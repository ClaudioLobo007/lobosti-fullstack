{
    "sourceFile": "BackupMain",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753826741526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753826741526,
            "name": "Commit-0",
            "content": "/**\r\n * main.js\r\n * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n */\r\n\r\n// =================================================================================\r\n// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n// =================================================================================\r\nimport { API_BASE_URL } from './config.js';\r\nimport * as api from './api.js';\r\nimport { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\nimport { showAdminDashboard, openManageUsersModal, openAddUserModal } from './admin.js';\r\n\r\n\r\n// =================================================================================\r\n// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n// =================================================================================\r\nlet currentLoggedInCompany = null;\r\nlet currentLoggedInUser = null;\r\nexport let isAdminLoggedIn = false;\r\nlet loggedInViaAdmin = false;\r\nlet selectedCompanyForAdmin = null;\r\nlet currentBill = {};\r\nlet selectedParcel = null;\r\nlet userBoletos = [];\r\nlet currentMonth, currentYear;\r\nlet expensesPieChart = null;\r\nlet expensesBarChart = null;\r\nlet topExpensesChart = null;\r\nlet parsedCsvData = [];\r\nlet selectedParcels = new Set();\r\nlet dashboardStatusFilter = 'all';\r\nlet selectedItems = new Map();\r\nlet pendingUpdateData = null;\r\n\r\n// =================================================================================\r\n// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n// =================================================================================\r\n\r\nconst adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\nconst mainAppContent = document.getElementById('mainAppContent');\r\nconst logoutBtn = document.getElementById('logoutBtn');\r\nconst backToAdminBtn = document.getElementById('backToAdminBtn');\r\nconst loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\nconst settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\nconst openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\nconst totalBillsSpan = document.getElementById('totalBills');\r\nconst prevMonthBtn = document.getElementById('prevMonth');\r\nconst nextMonthBtn = document.getElementById('nextMonth');\r\nconst calendarDays = document.getElementById('calendarDays');\r\nconst currentMonthYear = document.getElementById('currentMonthYear');\r\nconst billForm = document.getElementById('billForm');\r\nconst addBillModal = document.getElementById('addBillModal');\r\nconst closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\nconst installmentsList = document.getElementById('installmentsList');\r\nconst parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\nconst addToOrganizer = document.getElementById('addToOrganizer');\r\nconst billModal = document.getElementById('billModal');\r\nconst closeModalBtn = document.getElementById('closeModal');\r\nconst modalBillName = document.getElementById('modalBillName');\r\nconst modalBillAmount = document.getElementById('modalBillAmount');\r\nconst modalBillDate = document.getElementById('modalBillDate');\r\nconst modalBillDescription = document.getElementById('modalBillDescription');\r\nconst modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\nconst showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\nconst modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\nconst saveBillBtn = document.getElementById('saveBill');\r\nconst deleteBillBtn = document.getElementById('deleteBill');\r\nconst deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\nconst barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\nconst closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\nconst subscriptionModal = document.getElementById('subscriptionModal');\r\nconst subscriptionTitle = document.getElementById('subscriptionTitle');\r\nconst subscriptionMessage = document.getElementById('subscriptionMessage');\r\nconst subscriptionIcon = document.getElementById('subscriptionIcon');\r\nconst subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\nconst subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\nconst blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\nconst addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\nconst settingsBtn = document.getElementById('settingsBtn');\r\nconst settingsDropdown = document.getElementById('settingsDropdown');\r\nconst menuEmpresa = document.getElementById('menuEmpresa');\r\nconst menuUsuarios = document.getElementById('menuUsuarios');\r\nconst menuPermissoes = document.getElementById('menuPermissoes');\r\nconst companyInfoModal = document.getElementById('companyInfoModal');\r\nconst closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\nconst saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\nconst permissionsModal = document.getElementById('permissionsModal');\r\nconst closePermissionsModal = document.getElementById('closePermissionsModal');\r\nconst savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\nconst manageUsersModal = document.getElementById('manageUsersModal');\r\nconst closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\nconst addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\nconst installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\nconst closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\nconst nfeXmlInput = document.getElementById('nfeXmlInput');\r\nconst previewBillNameInput = document.getElementById('previewBillNameInput');\r\nconst previewNfeNumber = document.getElementById('previewNfeNumber');\r\nconst searchInput = document.getElementById('searchInput');\r\nconst filterButtons = document.querySelectorAll('.filter-btn');\r\nconst menuCategorias = document.getElementById('menuCategorias');\r\nconst categoriesModal = document.getElementById('categoriesModal');\r\nconst closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\nconst addCategoryForm = document.getElementById('addCategoryForm');\r\nconst newCategoryNameInput = document.getElementById('newCategoryName');\r\nconst categoryListDiv = document.getElementById('categoryList');\r\nconst modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\nconst categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n\r\nconst viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\nconst viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\nconst calendarView = document.getElementById('calendarView');\r\nconst dashboardView = document.getElementById('dashboardView');\r\nconst dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\nconst customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\nconst startDateInput = document.getElementById('start-date-input');\r\nconst endDateInput = document.getElementById('end-date-input');\r\nconst kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\nconst upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\nconst noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\nconst exportCsvBtn = document.getElementById('export-csv-btn');\r\nconst exportPdfBtn = document.getElementById('export-pdf-btn');\r\nconst dashboardFilterButtons = document.querySelectorAll('.dashboard-filter-btn');\r\n\r\nconst manualAddBtn = document.getElementById('manual-add-btn');\r\nconst xmlAddBtn = document.getElementById('xml-add-btn');\r\nconst manualAddForm = document.getElementById('manual-add-form');\r\nconst xmlAddForm = document.getElementById('xml-add-form');\r\n\r\nconst csvImportBtn = document.getElementById('csv-import-btn');\r\nconst csvImportForm = document.getElementById('csv-import-form');\r\nconst csvFileInput = document.getElementById('csv-file-input');\r\nconst csvPreviewArea = document.getElementById('csv-preview-area');\r\nconst csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\nconst csvImportSummary = document.getElementById('csv-import-summary');\r\nconst importCsvBtn = document.getElementById('import-csv-btn');\r\n\r\nconst markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\nconst selectedCountSpan = document.getElementById('selectedCount');\r\nconst massActionsContainer = document.getElementById('massActionsContainer');\r\nconst selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\nconst deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n\r\nconst changeCategoryBtn = document.getElementById('changeCategoryBtn');\r\nconst categoryBatchModal = document.getElementById('categoryBatchModal');\r\nconst batchCategorySelect = document.getElementById('batchCategorySelect');\r\nconst cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\nconst confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n\r\nconst openProfileModalBtn = document.getElementById('openProfileModalBtn');\r\nconst profileModal = document.getElementById('profileModal');\r\nconst closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\nconst profileUsername = document.getElementById('profileUsername');\r\nconst profileRole = document.getElementById('profileRole');\r\nconst profileCompany = document.getElementById('profileCompany');\r\nconst changePasswordForm = document.getElementById('changePasswordForm');\r\nconst verificationNotice = document.getElementById('verificationNotice');\r\nconst resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n\r\nconst recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\nconst recurrentAddForm = document.getElementById('recurrent-add-form');\r\nconst recurrentEditModal = document.getElementById('recurrentEditModal');\r\nconst cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\nconst singleParcelDate = document.getElementById('single-parcel-date');\r\n\r\nconst globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\nconst announcementMessage = document.getElementById('announcementBannerMessage');\r\nconst closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n\r\n// =================================================================================\r\n// FUNÇÕES DE LÓGICA E UI\r\n// =================================================================================\r\n\r\n/**\r\n * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n */\r\nfunction updateMonthlySummary(boletosForSummary = userBoletos) {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n\r\n    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n        .filter(parcel => {\r\n            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n        });\r\n\r\n    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n\r\n    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n\r\n    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n\r\n    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n\r\n    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n\r\n    // Atualiza os elementos HTML com os valores corretos\r\n    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n}\r\n\r\n\r\n/**\r\n * Renderiza o calendário com uma lista específica de boletos.\r\n * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n */\r\nfunction renderCalendar(boletosToRender = userBoletos) {\r\n    // --- INÍCIO DA CORREÇÃO ---\r\n    const calendarDays = document.getElementById('calendarDays');\r\n    const currentMonthYear = document.getElementById('currentMonthYear');\r\n\r\n    // VERIFICAÇÃO DE SEGURANÇA: Se os elementos essenciais não existirem, a função para.\r\n    if (!calendarDays || !currentMonthYear) {\r\n        console.error(\"ERRO CRÍTICO: Elementos essenciais do calendário (#calendarDays ou #currentMonthYear) não foram encontrados no HTML.\");\r\n        return; // Para a execução da função para evitar mais erros.\r\n    }\r\n    // --- FIM DA CORREÇÃO ---\r\n\r\n    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n    calendarDays.innerHTML = '';\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    const parcelsByDate = new Map();\r\n    boletosToRender.forEach(bill => {\r\n        bill.parcels.forEach(parcel => {\r\n            const date = parcel.dueDate;\r\n            if (!parcelsByDate.has(date)) {\r\n                parcelsByDate.set(date, []);\r\n            }\r\n            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n        });\r\n    });\r\n\r\n    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n\r\n    for (let i = 0; i < firstDayOfMonth; i++) {\r\n        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n    }\r\n\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n        const dayCell = document.createElement('div');\r\n        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n        dayCell.dataset.date = dateStr;\r\n\r\n        const dayHeader = document.createElement('div');\r\n        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n        dayHeader.textContent = day;\r\n        dayCell.appendChild(dayHeader);\r\n\r\n        dayCell.addEventListener('click', (e) => {\r\n            if (e.target.closest('.bill-card-draggable')) return;\r\n            openAddBillModal(e.currentTarget.dataset.date);\r\n        });\r\n\r\n        if (parcelsByDate.has(dateStr)) {\r\n            parcelsByDate.get(dateStr).forEach(parcel => {\r\n                const bill = parcel.parentBill;\r\n                const parcelElement = document.createElement('div');\r\n                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n                const isOverdue = !parcel.paid && dueDate < today;\r\n                let statusClass = 'bg-indigo-700 text-indigo-100';\r\n                let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n            \r\n                if (parcel.paid) {\r\n                    statusClass = 'bg-green-700 text-green-100';\r\n                    statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n                } else if (isOverdue) {\r\n                    statusClass = 'bg-red-700 text-red-100';\r\n                    statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n                }\r\n            \r\n                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n                parcelElement.dataset.boletoId = bill._id;\r\n                parcelElement.dataset.parcelId = parcel._id;\r\n    \r\n                parcelElement.innerHTML = `\r\n                    <div class=\"flex items-start space-x-2\">\r\n                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n                        <div class=\"flex-1 min-w-0\">\r\n                            <div class=\"flex justify-between items-center\">\r\n                                <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n                                    ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n                                </span>\r\n                                <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n                                    ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n                                </span>\r\n                            </div>\r\n                            \r\n                            ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n                            ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n                        </div>\r\n                    </div>\r\n                `;\r\n    \r\n                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n                \r\n                const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n                checkbox.addEventListener('change', (e) => {\r\n                    const parcelId = e.target.dataset.parcelId;\r\n                    const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n                    if (e.target.checked) {\r\n                        selectedItems.set(parcelId, boletoId);\r\n                    } else {\r\n                        selectedItems.delete(parcelId);\r\n                    }\r\n                    updateMassPaymentButton();\r\n                });\r\n                checkbox.addEventListener('click', (e) => e.stopPropagation());\r\n                \r\n                dayCell.appendChild(parcelElement);\r\n            });\r\n        }\r\n        \r\n        calendarDays.appendChild(dayCell);\r\n    }\r\n\r\n    initializeDragAndDrop();\r\n}\r\n\r\n/**\r\n * Abre o modal para ver/editar os detalhes de uma parcela.\r\n * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n * @param {object} parcel - O objeto da parcela específica.\r\n */\r\nasync function openBillModal(bill, parcel) {\r\n    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n    selectedParcel = { ...parcel, parentId: bill._id };\r\n\r\n    // Preenche todos os campos do modal com os dados da parcela clicada\r\n    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n    modalBillAmount.value = parcel.amount.toFixed(2);\r\n    modalBillDate.value = parcel.dueDate;\r\n    modalBillDescription.value = parcel.description || '';\r\n    modalBillBarcodeInput.value = parcel.barcode || '';\r\n    modalBillPaidCheckbox.checked = parcel.paid;\r\n\r\n    // Mostra o botão de gerar código de barras apenas se houver um código\r\n    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n\r\n    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n    if (bill.nfeNumber) {\r\n        nfeNumberEl.textContent = bill.nfeNumber;\r\n        nfeContainer.classList.remove('hidden');\r\n    } else {\r\n        nfeContainer.classList.add('hidden');\r\n    }\r\n\r\n    // Lógica dinâmica para a secção de anexos\r\n    const attachmentContainer = document.getElementById('attachment-container');\r\n    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n\r\n    if (parcel.attachmentUrl) {\r\n        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n        attachmentContainer.innerHTML = `\r\n            <div class=\"flex items-center justify-between\">\r\n                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n                </a>\r\n                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n            </div>\r\n        `;\r\n        // Adiciona o evento de clique ao novo botão de remover\r\n        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n    } else {\r\n        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n        // Adiciona o evento de 'change' ao novo input de upload\r\n        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n    }\r\n\r\n    try {\r\n        const categories = await api.getCategories();\r\n        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n        categories.forEach(cat => {\r\n            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n        });\r\n        if (bill.category) {\r\n            modalBillCategorySelect.value = bill.category._id;\r\n        } else {\r\n            modalBillCategorySelect.value = \"\";\r\n        }\r\n    } catch (error) {\r\n        showToast('Erro ao carregar categorias.', 'error');\r\n    }\r\n\r\n    billModal.classList.remove('hidden');\r\n}\r\n\r\n/**\r\n * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n */\r\nfunction clearBillForm() {\r\n    if (billForm) {\r\n        billForm.reset();\r\n    }\r\n    currentBill = {};\r\n}\r\n\r\n/**\r\n * Atualiza a interface principal com os dados dos boletos.\r\n */\r\nasync function updateBillsOrganizer() {\r\n    try {\r\n        userBoletos = await api.getBoletos();\r\n\r\n        if (!userBoletos || userBoletos.length === 0) {\r\n            console.log(\"AVISO: Nenhum boleto foi encontrado na base de dados para esta empresa.\");\r\n        }\r\n\r\n        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n        const totalBillsSpan = document.getElementById('totalBills');\r\n        \r\n        if (totalBillsSpan) {\r\n            totalBillsSpan.textContent = totalParcels;\r\n        } else {\r\n            console.error(\"FALHA CRÍTICA: O elemento HTML com o id 'totalBills' não foi encontrado!\");\r\n            return; // Para a execução se o elemento não existir\r\n        }\r\n\r\n        updateMonthlySummary();\r\n        renderCalendar();\r\n\r\n    } catch (error) {\r\n        console.error(\"ERRO GRAVE DENTRO DE updateBillsOrganizer:\", error);\r\n        showToast(error.message, 'error');\r\n    }\r\n}\r\n\r\nasync function showMainApp() {\r\n    hideAllScreens();\r\n    // Removemos a classe 'hidden' e definimos o display diretamente\r\n    mainAppContent.classList.remove('hidden');\r\n    mainAppContent.style.display = 'block';\r\n\r\n    openAddBillModalBtn.classList.remove('hidden');\r\n    openAddBillModalBtn.style.display = 'flex'; // O botão é um flex container\r\n\r\n    // O resto da função continua igual...\r\n    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n\r\n    await fetchAndDisplayAnnouncement();\r\n    await populateCategoryFilter();\r\n    await updateBillsOrganizer();\r\n}\r\n\r\n// Adicionar ao bloco de funções de Lógica e UI\r\n\r\n/**\r\n * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n * @param {string} tagName - O nome da tag a ser procurada.\r\n * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n */\r\nfunction getTagValue(tagName, parentElement) {\r\n    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n    return element?.textContent || '';\r\n}\r\n\r\n/**\r\n * Configura e exibe o modal de assinatura para o Proprietário.\r\n * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n */\r\nfunction showSubscriptionModal(company) {\r\n    hideAllScreens();\r\n    const status = company.subscription?.status;\r\n\r\n    if (status === 'inactive' || status === 'trial') {\r\n        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n    } else { // 'past_due' ou outro estado\r\n        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n    }\r\n    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n}\r\n\r\n/**\r\n * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n */\r\nfunction showAccessBlockedModal() {\r\n    hideAllScreens();\r\n    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n}\r\n\r\n/**\r\n * Abre o modal para criar uma nova empresa.\r\n */\r\n\r\n\r\n/**\r\n * Fecha o modal de criar empresa.\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n */\r\nasync function openCompanyInfoModal() {\r\n    showLoader();\r\n    try {\r\n        // A chamada à API já retorna os dados completos da empresa, incluindo 'isVerified'\r\n        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n\r\n        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n        document.getElementById('companyInfoEmail').value = company.email || '';\r\n        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n\r\n        // LÓGICA PARA MOSTRAR/ESCONDER O AVISO\r\n        if (company.isVerified) {\r\n            verificationNotice.classList.add('hidden');\r\n        } else {\r\n            verificationNotice.classList.remove('hidden');\r\n        }\r\n\r\n        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n\r\n        companyInfoModal.classList.remove('hidden');\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\n/**\r\n * Abre o modal de permissões para o Proprietário.\r\n */\r\nasync function openPermissionsModal() {\r\n    showLoader();\r\n    try {\r\n        const permissions = await api.getPermissions();\r\n\r\n        // Preenche o modal com as permissões atuais\r\n        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n\r\n        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n\r\n        permissionsModal.classList.remove('hidden');\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\n// --- Handlers para os botões DENTRO dos novos modais ---\r\n\r\nasync function handleSaveCompanyInfo() {\r\n    const payload = {\r\n        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n        email: document.getElementById('companyInfoEmail').value,\r\n        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n    };\r\n    showLoader();\r\n    try {\r\n        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n        showToast('Dados da empresa atualizados!', 'success');\r\n        companyInfoModal.classList.add('hidden');\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\nasync function handleSavePermissions() {\r\n    const newPermissions = {\r\n        Gerente: {\r\n            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n        },\r\n        Funcionário: {\r\n            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n        }\r\n    };\r\n    showLoader();\r\n    try {\r\n        await api.updatePermissions(newPermissions);\r\n        showToast('Permissões salvas com sucesso!', 'success');\r\n        permissionsModal.classList.add('hidden');\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\nasync function openCategoriesModal() {\r\n    showLoader();\r\n    try {\r\n        const categories = await api.getCategories();\r\n        renderCategoryList(categories);\r\n        categoriesModal.classList.remove('hidden');\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\nfunction renderCategoryList(categories) {\r\n    categoryListDiv.innerHTML = '';\r\n    if (categories.length === 0) {\r\n        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n        return;\r\n    }\r\n    categories.forEach(category => {\r\n        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n                <span class=\"text-white\">${category.name}</span>\r\n                <div>\r\n                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n                </div>\r\n            </div>\r\n        `);\r\n    });\r\n}\r\n\r\n/**\r\n * Abre o modal para adicionar um novo boleto,\r\n * e opcionalmente pré-preenchendo a data.\r\n * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n */\r\nasync function openAddBillModal(preselectedDate = null) {\r\n    clearBillForm();\r\n    switchAddBillMode('manual');\r\n    showLoader();\r\n    try {\r\n        // Se uma data foi passada como parâmetro (ou seja, o utilizador clicou no calendário)\r\n        if (preselectedDate) {\r\n            // Preenche o campo da aba \"Adicionar Manual\" (comportamento que já existia)\r\n            document.getElementById('dueDate').value = preselectedDate;\r\n\r\n            // NOVA LINHA: Preenche também o campo da aba \"Pagamento Recorrente\"\r\n            document.getElementById('recurrentStartDate').value = preselectedDate;\r\n        }\r\n\r\n        addBillModal.classList.remove('hidden');\r\n    } catch (error)\r\n {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\nasync function populateCategoryFilter() {\r\n    try {\r\n        const categories = await api.getCategories();\r\n        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n        categories.forEach(category => {\r\n            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n        // Se der erro, garante que a opção padrão exista\r\n        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n    }\r\n}\r\n\r\n/**\r\n * Alterna a visualização entre o Calendário e o Dashboard.\r\n */\r\nfunction switchView(viewToShow) {\r\n    // Esconde ambas as vistas\r\n    calendarView.classList.add('hidden');\r\n    dashboardView.classList.add('hidden');\r\n\r\n    // Reseta o estilo dos botões\r\n    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n\r\n    // Mostra a vista correta e ativa o botão correspondente\r\n    if (viewToShow === 'calendar') {\r\n        calendarView.classList.remove('hidden');\r\n        viewCalendarBtn.classList.add('bg-indigo-600');\r\n        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n    } else if (viewToShow === 'dashboard') {\r\n        dashboardView.classList.remove('hidden');\r\n        viewDashboardBtn.classList.add('bg-indigo-600');\r\n        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n        renderDashboard();\r\n    }\r\n}\r\n\r\n/**\r\n * Atualiza os cartões de KPI no dashboard.\r\n * @param {object} kpiData - Os dados dos KPIs vindos da API.\r\n */\r\nfunction updateKpiCards(kpiData) {\r\n    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n\r\n    const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n\r\n    // Popula os novos campos\r\n    if (kpiContasVencidas) kpiContasVencidas.textContent = formatCurrency(kpiData.totalVencido);\r\n    \r\n    // Popula os campos existentes\r\n    document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n    document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n    document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n}\r\n\r\n/**\r\n * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n */\r\nasync function renderDashboard() {\r\n    showLoader();\r\n    try {\r\n        const dateRange = getDateRangeFromPreset();\r\n\r\n        // ATUALIZADO: Passa o 'dashboardStatusFilter' para as chamadas da API\r\n        const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n            api.getExpensesByCategory(dateRange, dashboardStatusFilter),\r\n            api.getMonthlySummary(dateRange, dashboardStatusFilter),\r\n            api.getKpiSummary(dateRange),\r\n            api.getUpcomingPayments()\r\n        ]);\r\n\r\n        updateKpiCards(kpiData);\r\n        renderPieChart(pieData);\r\n        renderBarChart(barData);\r\n        renderUpcomingPayments(upcomingData);\r\n        renderTopExpensesChart(pieData);\r\n\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\n/**\r\n * Renderiza o gráfico de pizza de despesas por categoria.\r\n */\r\nfunction renderPieChart(data) {\r\n    const canvas = document.getElementById('expensesByCategoryChart');\r\n    if (!canvas) return;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    if (expensesPieChart) {\r\n        expensesPieChart.destroy();\r\n    }\r\n\r\n    expensesPieChart = new Chart(ctx, {\r\n        type: 'pie',\r\n        data: {\r\n            labels: data.map(item => item.categoryName),\r\n            datasets: [{\r\n                data: data.map(item => item.totalAmount),\r\n                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n                borderColor: '#1f2937',\r\n                borderWidth: 2\r\n            }]\r\n        },\r\n        options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n */\r\nfunction renderBarChart(data) {\r\n    const canvas = document.getElementById('monthlyExpensesChart');\r\n    if (!canvas) return;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n    const values = data.map(item => item.totalAmount);\r\n\r\n    if (expensesBarChart) {\r\n        expensesBarChart.destroy();\r\n    }\r\n    \r\n    expensesBarChart = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n            labels: labels,\r\n            datasets: [{\r\n                label: 'Total',\r\n                data: values,\r\n                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n                borderColor: 'rgba(79, 70, 229, 1)',\r\n                borderWidth: 1\r\n            }]\r\n        },\r\n        options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n            },\r\n            plugins: { legend: { display: false } }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Busca categorias da API e preenche um elemento <select> do HTML.\r\n * @param {HTMLSelectElement} selectElement - O elemento dropdown a ser preenchido.\r\n */\r\nasync function populateCategorySelect(selectElement) {\r\n    if (!selectElement) return;\r\n\r\n    try {\r\n        const categories = await api.getCategories();\r\n        selectElement.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n        categories.forEach(category => {\r\n            const option = document.createElement('option');\r\n            option.value = category._id;\r\n            option.textContent = category.name;\r\n            selectElement.appendChild(option);\r\n        });\r\n    } catch (error) {\r\n        showToast('Erro ao carregar categorias.', 'error');\r\n    }\r\n}\r\n\r\n/**\r\n * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n */\r\nfunction initializeDashboardDragAndDrop() {\r\n    const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n    const mainGrid = document.getElementById('dashboard-main-grid');\r\n\r\n    // Vamos guardar as instâncias do Sortable em variáveis\r\n    let kpiSortable, mainSortable;\r\n\r\n    const saveOrder = (gridType) => {\r\n        if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n\r\n        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n        let order;\r\n\r\n        // Usamos a instância correta para obter a ordem\r\n        if (gridType === 'kpi' && kpiSortable) {\r\n            order = kpiSortable.toArray();\r\n        } else if (gridType === 'main' && mainSortable) {\r\n            order = mainSortable.toArray();\r\n        }\r\n\r\n        if (order) {\r\n            localStorage.setItem(key, JSON.stringify(order));\r\n        }\r\n    };\r\n\r\n    if (kpiGrid) {\r\n        // Guardamos a instância na nossa variável\r\n        kpiSortable = new Sortable(kpiGrid, {\r\n            animation: 150,\r\n            ghostClass: 'opacity-50',\r\n            // A chamada agora é mais simples\r\n            onEnd: () => saveOrder('kpi'),\r\n        });\r\n    }\r\n\r\n    if (mainGrid) {\r\n        // Guardamos a instância na nossa variável\r\n        mainSortable = new Sortable(mainGrid, {\r\n            animation: 150,\r\n            ghostClass: 'opacity-50',\r\n            onEnd: () => saveOrder('main'),\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Verifica o localStorage por uma ordem de cartões salva para o utilizador atual\r\n * e, se encontrar, reordena os elementos no ecrã.\r\n */\r\nfunction applySavedDashboardOrder() {\r\n    if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n\r\n    const applyOrder = (gridType) => {\r\n        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n        const savedOrder = localStorage.getItem(key);\r\n        const grid = document.getElementById(`dashboard-${gridType}-grid`);\r\n\r\n        if (savedOrder && grid) {\r\n            const order = JSON.parse(savedOrder);\r\n            // Para cada id na ordem salva, encontramos o elemento correspondente\r\n            // e o movemos para o final do container. Ao fazer isto em sequência,\r\n            // a ordem final corresponde à ordem salva.\r\n            order.forEach(dataId => {\r\n                const card = grid.querySelector(`[data-id=\"${dataId}\"]`);\r\n                if (card) {\r\n                    grid.appendChild(card);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    applyOrder('kpi');\r\n    applyOrder('main');\r\n}\r\n\r\n/**\r\n * Captura a área do dashboard como uma imagem e gera um ficheiro PDF para download.\r\n */\r\nasync function handleVisualExportPDF() {\r\n    // Mostra o loader para dar feedback ao utilizador\r\n    showLoader();\r\n\r\n    // Seleciona o elemento do DOM que queremos \"fotografar\"\r\n    const dashboardElement = document.getElementById('dashboardView');\r\n    \r\n    // Esconde temporariamente os botões de filtro e exportação para não aparecerem no PDF\r\n    const filterContainer = document.getElementById('dashboard-date-filter-container');\r\n    if (filterContainer) filterContainer.style.display = 'none';\r\n\r\n    try {\r\n        // Usa a biblioteca html2canvas para criar um \"canvas\" (uma imagem) do elemento\r\n        const canvas = await html2canvas(dashboardElement, {\r\n            scale: 2, // Aumenta a resolução da imagem para melhor qualidade\r\n            backgroundColor: '#1e293b' // Garante um fundo consistente\r\n        });\r\n\r\n        // Converte o canvas para uma imagem no formato PNG\r\n        const imageData = canvas.toDataURL('image/png');\r\n\r\n        // Usa a biblioteca jsPDF para criar o documento\r\n        // A orientação 'p' é retrato (portrait), 'mm' é milímetros, 'a4' é o tamanho da página\r\n        const pdf = new jspdf.jsPDF({\r\n            orientation: 'p',\r\n            unit: 'mm',\r\n            format: 'a4'\r\n        });\r\n\r\n        // Calcula as dimensões da imagem para que ela caiba na página A4, mantendo a proporção\r\n        const pageWidth = pdf.internal.pageSize.getWidth();\r\n        const pageHeight = pdf.internal.pageSize.getHeight();\r\n        const imageWidth = canvas.width;\r\n        const imageHeight = canvas.height;\r\n        const ratio = imageWidth / imageHeight;\r\n        let pdfImageWidth = pageWidth - 20; // Deixa uma margem de 10mm de cada lado\r\n        let pdfImageHeight = pdfImageWidth / ratio;\r\n        \r\n        // Se a imagem ainda for muito alta, ajusta pela altura\r\n        if (pdfImageHeight > pageHeight - 20) {\r\n            pdfImageHeight = pageHeight - 20;\r\n            pdfImageWidth = pdfImageHeight * ratio;\r\n        }\r\n        \r\n        // Adiciona a imagem ao PDF, centralizada\r\n        const x = (pageWidth - pdfImageWidth) / 2;\r\n        const y = 10; // Margem de 10mm no topo\r\n        pdf.addImage(imageData, 'PNG', x, y, pdfImageWidth, pdfImageHeight);\r\n\r\n        // Força o download do ficheiro\r\n        pdf.save('dashboard-relatorio.pdf');\r\n\r\n    } catch (error) {\r\n        console.error(\"Erro ao gerar PDF visual:\", error);\r\n        showToast('Ocorreu um erro ao gerar o PDF.', 'error');\r\n    } finally {\r\n        // Mostra novamente os botões de filtro, quer a exportação tenha funcionado ou não\r\n        if (filterContainer) filterContainer.style.display = 'block';\r\n        // Esconde o loader\r\n        hideLoader();\r\n    }\r\n}\r\n\r\n/**\r\n * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n */\r\nfunction switchAddBillMode(mode) {\r\n    if (!manualAddForm || !xmlAddForm || !csvImportForm || !recurrentAddForm) return;\r\n\r\n    // Esconde todos os painéis\r\n    manualAddForm.classList.add('hidden');\r\n    xmlAddForm.classList.add('hidden');\r\n    csvImportForm.classList.add('hidden');\r\n    recurrentAddForm.classList.add('hidden'); // Esconde o novo painel\r\n\r\n    // Reseta o estilo de todos os botões\r\n    [manualAddBtn, xmlAddBtn, csvImportBtn, recurrentAddBtn].forEach(btn => { // Adiciona o novo botão\r\n        if(btn) {\r\n            btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n            btn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n        }\r\n    });\r\n\r\n    // Ativa o painel e o botão corretos\r\n    let activeBtn, activeForm;\r\n    if (mode === 'manual') {\r\n        activeBtn = manualAddBtn;\r\n        activeForm = manualAddForm;\r\n    } else if (mode === 'xml') {\r\n        activeBtn = xmlAddBtn;\r\n        activeForm = xmlAddForm;\r\n    } else if (mode === 'recurrent') { // Adiciona a nova condição\r\n        activeBtn = recurrentAddBtn;\r\n        activeForm = recurrentAddForm;\r\n    } else if (mode === 'csv') {\r\n        activeBtn = csvImportBtn;\r\n        activeForm = csvImportForm;\r\n    }\r\n\r\n    if (activeBtn && activeForm) {\r\n        activeForm.classList.remove('hidden');\r\n        activeBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n        activeBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n    }\r\n}\r\n\r\n/**\r\n * Lida com a seleção de um ficheiro CSV, lê e pré-visualiza os dados.\r\n */\r\nfunction handleCsvFileSelect(event) {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    // Usa o PapaParse para ler o ficheiro\r\n    Papa.parse(file, {\r\n        header: true, // Trata a primeira linha como cabeçalho\r\n        skipEmptyLines: true,\r\n        complete: (results) => {\r\n            // Guarda os dados processados no estado da aplicação\r\n            parsedCsvData = results.data;\r\n            renderCsvPreview(parsedCsvData);\r\n        },\r\n        error: (err) => {\r\n            showToast(`Erro ao ler o ficheiro CSV: ${err.message}`, 'error');\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Renderiza a tabela de pré-visualização com os dados lidos do CSV.\r\n */\r\nfunction renderCsvPreview(data) {\r\n    // Verificação de segurança para garantir que 'data' é um array\r\n    if (!Array.isArray(data)) {\r\n        console.error(\"renderCsvPreview foi chamada com dados inválidos:\", data);\r\n        data = []; // Assume um array vazio para não quebrar a execução\r\n    }\r\n\r\n    if (!csvPreviewTableBody || !csvPreviewArea || !csvImportSummary) {\r\n        console.error(\"Elementos da pré-visualização do CSV não foram encontrados no HTML.\");\r\n        return;\r\n    }\r\n\r\n    csvPreviewTableBody.innerHTML = '';\r\n    if (data.length === 0) {\r\n        csvPreviewArea.classList.add('hidden');\r\n        return;\r\n    }\r\n    \r\n    const formatCurrency = (valueStr) => {\r\n        const value = parseFloat(String(valueStr).replace(',', '.'));\r\n        return isNaN(value) ? 'Inválido' : value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n    };\r\n\r\n    data.forEach(row => {\r\n        const values = Object.values(row);\r\n        const tr = `\r\n            <tr>\r\n                <td class=\"px-4 py-2 border-b border-gray-700\">${values[0] || ''}</td>\r\n                <td class=\"px-4 py-2 border-b border-gray-700\">${values[1] || ''}</td>\r\n                <td class=\"px-4 py-2 border-b border-gray-700\">${values[2] || ''}</td>\r\n                <td class=\"px-4 py-2 border-b border-gray-700 text-right\">${formatCurrency(values[3])}</td>\r\n            </tr>\r\n        `;\r\n        csvPreviewTableBody.insertAdjacentHTML('beforeend', tr);\r\n    });\r\n\r\n    csvImportSummary.textContent = `${data.length} boletos prontos para serem importados.`;\r\n    csvPreviewArea.classList.remove('hidden');\r\n}\r\n\r\n/**\r\n * Envia os dados do CSV para a API para serem salvos na base de dados.\r\n */\r\nasync function handleConfirmImport() {\r\n    if (parsedCsvData.length === 0) {\r\n        return showToast('Não há dados para importar.', 'info');\r\n    }\r\n    showLoader();\r\n    try {\r\n        const response = await api.importBoletos(parsedCsvData);\r\n        showToast(response.message, 'success');\r\n\r\n        // Fecha o modal e atualiza a aplicação\r\n        addBillModal.classList.add('hidden');\r\n        await updateBillsOrganizer();\r\n\r\n        // Limpa os dados da pré-visualização\r\n        csvPreviewArea.classList.add('hidden');\r\n        csvFileInput.value = '';\r\n        parsedCsvData = [];\r\n\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\n/**\r\n * Atualiza a visibilidade e a contagem do botão de pagamento em massa.\r\n */\r\nfunction updateMassPaymentButton() {\r\n    const count = selectedItems.size;\r\n    selectedCountSpan.textContent = count;\r\n    massActionsContainer.classList.toggle('hidden', count === 0);\r\n}\r\n\r\n/**\r\n * Lida com o clique no botão \"Pagar Selecionados\".\r\n */\r\nasync function handleMarkSelectedAsPaid() {\r\n    if (selectedItems.size === 0) {\r\n        return showToast('Nenhuma parcela selecionada.', 'info');\r\n    }\r\n\r\n    if (!confirm(`Tem a certeza que deseja marcar ${selectedItems.size} parcela(s) como paga(s)?`)) {\r\n        return;\r\n    }\r\n\r\n    showLoader();\r\n    try {\r\n        const parcelIds = Array.from(selectedItems.keys());\r\n\r\n        // Chama a função da API com o array de IDs correto.\r\n        const response = await api.markParcelsAsPaid(parcelIds);\r\n\r\n        showToast(response.message, 'success');\r\n\r\n        // Limpa a seleção e atualiza a interface\r\n        selectedItems.clear();\r\n        updateMassPaymentButton();\r\n        await updateBillsOrganizer(); // Recarrega o calendário\r\n\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\n/**\r\n * Seleciona todos os checkboxes de boletos visíveis no calendário.\r\n */\r\nfunction handleSelectAllVisible() {\r\n    // Pega todos os checkboxes que estão atualmente no calendário\r\n    document.querySelectorAll('.mass-payment-checkbox').forEach(checkbox => {\r\n        // Marca apenas os que ainda não estão marcados\r\n        if (!checkbox.checked) {\r\n            checkbox.checked = true;\r\n\r\n            // --- LÓGICA CORRIGIDA ---\r\n            const parcelId = checkbox.dataset.parcelId;\r\n            // Pega o boletoId do elemento pai mais próximo\r\n            const boletoId = checkbox.closest('.bill-card-draggable').dataset.boletoId;\r\n\r\n            // Garante que temos os dois IDs antes de adicionar ao mapa\r\n            if (parcelId && boletoId) {\r\n                // Usa o método .set(key, value), que é o correto para um Map\r\n                selectedItems.set(parcelId, boletoId);\r\n            }\r\n        }\r\n    });\r\n    // Atualiza o botão para refletir a nova contagem\r\n    updateMassPaymentButton();\r\n}\r\n\r\n/**\r\n * Desmarca todos os checkboxes de boletos selecionados.\r\n */\r\nfunction handleDeselectAll() {\r\n    // Limpa o nosso Set de seleção\r\n    selectedItems.clear();\r\n    // Desmarca todos os checkboxes que estão no calendário\r\n    document.querySelectorAll('.mass-payment-checkbox:checked').forEach(checkbox => {\r\n        checkbox.checked = false;\r\n    });\r\n    // Atualiza o botão (que será escondido, pois a contagem é 0)\r\n    updateMassPaymentButton();\r\n}\r\n\r\n/**\r\n * Busca os dados do utilizador e abre o modal de perfil.\r\n */\r\nasync function openProfileModal() {\r\n    // Usa as variáveis globais que já temos da inicialização\r\n    if (!currentLoggedInUser || !currentLoggedInCompany) {\r\n        showToast('Não foi possível carregar os dados do perfil.', 'error');\r\n        return;\r\n    }\r\n\r\n    // Preenche o modal com os dados\r\n    profileUsername.textContent = currentLoggedInUser.username;\r\n    profileRole.textContent = currentLoggedInUser.role;\r\n    profileCompany.textContent = currentLoggedInCompany.nomeEmpresa;\r\n\r\n    // Mostra o modal\r\n    profileModal.classList.remove('hidden');\r\n}\r\n\r\n/**\r\n * Busca o anúncio ativo mais recente e o exibe no banner.\r\n */\r\nasync function fetchAndDisplayAnnouncement() {\r\n    try {\r\n        const announcement = await api.getActiveAnnouncement();\r\n\r\n        // Se existir um anúncio e ele tiver uma mensagem\r\n        if (announcement && announcement.message) {\r\n            let messageHtml = announcement.message;\r\n            // Se o anúncio tiver um link, transforma a mensagem num link clicável\r\n            if (announcement.link) {\r\n                messageHtml = `<a href=\"${announcement.link}\" target=\"_blank\" class=\"hover:underline\">${announcement.message} <i class=\"fas fa-external-link-alt fa-xs ml-1\"></i></a>`;\r\n            }\r\n            announcementMessage.innerHTML = messageHtml;\r\n            globalAnnouncementBanner.classList.remove('hidden');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Não foi possível buscar o anúncio:\", error);\r\n    }\r\n}\r\n\r\n// =================================================================================\r\n// =================================================================================\r\n// EVENT HANDLERS - Funções que respondem aos eventos\r\n// =================================================================================\r\n// =================================================================================\r\n\r\nasync function handleForgotPasswordRequest(e) {\r\n    e.preventDefault();\r\n    const email = document.getElementById('recoveryEmailInput').value;\r\n    showLoader();\r\n    try {\r\n        const data = await api.requestPasswordReset(email);\r\n        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n        forgotPasswordModal.classList.add('hidden');\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function handleCalculateInstallments(e) {\r\n    e.preventDefault(); // Impede a submissão padrão do formulário\r\n\r\n    const activeTabButton = document.querySelector('#addBillModal .flex button.bg-indigo-600');\r\n    if (!activeTabButton) {\r\n        return showToast('Erro: Não foi possível identificar a aba ativa.', 'error');\r\n    }\r\n    const activeModeId = activeTabButton.id;\r\n\r\n    currentBill = null;\r\n\r\n    if (activeModeId === 'manual-add-btn') {\r\n        const billName = document.getElementById('billName').value;\r\n        const dueDate = document.getElementById('dueDate').value;\r\n        const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(',', '.'));\r\n        const installments = parseInt(document.getElementById('installments').value);\r\n        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n        const description = document.getElementById('description').value;\r\n\r\n        // Validação feita aqui no JavaScript\r\n        if (!billName || !dueDate || !installments || isNaN(totalAmount) || totalAmount <= 0 || installments <= 0) {\r\n            return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n        }\r\n\r\n        currentBill = { name: billName, description, parcels: [], category: null };\r\n        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n\r\n        for (let i = 0; i < installments; i++) {\r\n            const parcelDate = new Date(dueDate + 'T00:00:00');\r\n            parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n            currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n        }\r\n\r\n    } else if (activeModeId === 'recurrent-add-btn') {\r\n        const billName = document.getElementById('recurrentBillName').value;\r\n        const startDate = document.getElementById('recurrentStartDate').value;\r\n        const amount = parseFloat(document.getElementById('recurrentAmount').value);\r\n        const months = parseInt(document.getElementById('recurrentInstallments').value);\r\n        const description = document.getElementById('recurrentDescription').value;\r\n\r\n        // Validação feita aqui no JavaScript\r\n        if (!billName || !startDate || !months || isNaN(amount) || amount <= 0 || months <= 0) {\r\n            return showToast(\"Preencha todos os campos do pagamento recorrente.\", \"error\");\r\n        }\r\n\r\n        currentBill = { name: billName, description, parcels: [], category: null };\r\n\r\n        for (let i = 0; i < months; i++) {\r\n            const parcelDate = new Date(startDate + 'T00:00:00');\r\n            parcelDate.setMonth(parcelDate.getMonth() + i);\r\n            currentBill.parcels.push({ number: i + 1, amount: amount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n        }\r\n    }\r\n\r\n    // Este bloco só será executado se `currentBill` tiver sido preenchido com sucesso\r\n    if (currentBill && currentBill.parcels.length > 0) {\r\n        installmentsList.innerHTML = '';\r\n        currentBill.parcels.forEach((parcel, index) => {\r\n             installmentsList.insertAdjacentHTML('beforeend', `\r\n                <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n                    <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n                    <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n                    <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n                    <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n                </div>\r\n            `);\r\n        });\r\n\r\n        addEventListenersToInstallmentInputs();\r\n        updatePreviewTotal();\r\n        previewBillNameInput.value = currentBill.name;\r\n        previewNfeNumber.textContent = 'N/A';\r\n        addBillModal.classList.add('hidden');\r\n        await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n        installmentsPreviewModal.classList.remove('hidden');\r\n    }\r\n}\r\n\r\n/**\r\n * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n */\r\nfunction updatePreviewTotal() {\r\n    if (!currentBill.parcels) return;\r\n    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n}\r\n\r\nasync function handleAddToOrganizer() {\r\n    currentBill.category = document.getElementById('previewBillCategorySelect').value || null;\r\n\r\n    showLoader();\r\n    try {\r\n        await api.createBoleto(currentBill); // O objeto currentBill agora tem a categoria correta\r\n        showToast('Boleto criado com sucesso!', 'success');\r\n        installmentsPreviewModal.classList.add('hidden');\r\n        clearBillForm();\r\n        await updateBillsOrganizer();\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\nasync function handleSaveChanges() {\r\n    if (!selectedParcel) return;\r\n\r\n    // Guarda os dados atualizados do formulário\r\n    const updatedParcelData = {\r\n        paid: modalBillPaidCheckbox.checked,\r\n        amount: parseFloat(modalBillAmount.value),\r\n        dueDate: modalBillDate.value,\r\n        description: modalBillDescription.value,\r\n        barcode: modalBillBarcodeInput.value,\r\n    };\r\n    const updatedBillData = {\r\n        category: modalBillCategorySelect.value || null\r\n    };\r\n\r\n    // Encontra o boleto pai na nossa lista local\r\n    const parentBoleto = userBoletos.find(b => b._id === selectedParcel.parentId);\r\n\r\n    // Verifica se a parcela é recorrente (se o boleto pai tem mais de 1 parcela)\r\n    if (parentBoleto && parentBoleto.parcels.length > 1) {\r\n        // Se for recorrente, guarda os dados e abre o modal de escolha\r\n        pendingUpdateData = { updatedParcelData, updatedBillData };\r\n\r\n        // Atualiza a data no texto do botão para dar mais contexto ao utilizador\r\n        const date = new Date(updatedParcelData.dueDate + 'T00:00:00');\r\n        singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n\r\n        recurrentEditModal.classList.remove('hidden');\r\n    } else {\r\n        // Se não for recorrente, salva diretamente como antes\r\n        showLoader();\r\n        try {\r\n            await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n            await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n            showToast('Alterações salvas com sucesso!', 'success');\r\n            billModal.classList.add('hidden');\r\n            await updateBillsOrganizer();\r\n        } catch (error) {\r\n            showToast(error.message, 'error');\r\n        } finally {\r\n            hideLoader();\r\n        }\r\n    }\r\n}\r\n\r\nasync function handleDeleteParcel() {\r\n    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n    showLoader();\r\n    try {\r\n        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n        showToast('Parcela excluída com sucesso!', 'success');\r\n        billModal.classList.add('hidden');\r\n        await updateBillsOrganizer();\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\nasync function handleDeleteEntireBill() {\r\n    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n    showLoader();\r\n    try {\r\n        await api.deleteBoleto(selectedParcel.parentId);\r\n        showToast('Boleto completo excluído com sucesso!', 'success');\r\n        billModal.classList.add('hidden');\r\n\r\n        await updateBillsOrganizer();\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\n/**\r\n * Função de inicialização principal da aplicação.\r\n * Verifica a sessão e o estado da assinatura.\r\n */\r\nasync function initializeApp() {\r\n    const today = new Date();\r\n    currentMonth = today.getMonth();\r\n    currentYear = today.getFullYear();\r\n\r\n    const token = localStorage.getItem('authToken');\r\n    if (!token) {\r\n        // Se não houver token, o utilizador não está logado.\r\n        // Idealmente, a página de login (Index.html) deveria ser mostrada.\r\n        // Como estamos em OrgBoletos.html, vamos redirecionar.\r\n        window.location.href = 'Index.html';\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const data = await api.checkSession();\r\n        if (data.user.role === 'SuperAdmin') {\r\n            isAdminLoggedIn = true;\r\n            await showAdminDashboard();\r\n        } else {\r\n            currentLoggedInUser = data.user;\r\n            currentLoggedInCompany = data.company;\r\n            const subscription = currentLoggedInCompany.subscription;\r\n            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n\r\n            if (isSubscriptionActive) {\r\n                await showMainApp();\r\n            } else {\r\n                if (currentLoggedInUser.role === 'Proprietário') {\r\n                    showSubscriptionModal(currentLoggedInCompany);\r\n                } else {\r\n                    showAccessBlockedModal();\r\n                }\r\n            }\r\n        }\r\n    } catch (error) {\r\n        // Se o token for inválido ou a API falhar, o utilizador é deslogado\r\n        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('superAdminToken');\r\n        setTimeout(() => {\r\n            window.location.href = 'Index.html';\r\n        }, 2000); // Aguarda 2 segundos para o utilizador ler a mensagem\r\n    } finally {\r\n        // Esconde a tela de carregamento inicial\r\n        document.getElementById('loadingScreen').classList.add('hidden');\r\n    }\r\n}\r\n\r\nfunction logout() {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('superAdminToken');\r\n    window.location.href = 'Index.html';\r\n}\r\n\r\n/**\r\n * Define a sessão de representação do admin.\r\n * Esta função é chamada pelo painel de admin quando clica em \"Entrar\".\r\n * @param {object} data - Os dados recebidos da API (token, user, company).\r\n */\r\nexport async function setImpersonationSession(data) {\r\n    localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n    localStorage.setItem('authToken', data.token);\r\n\r\n    currentLoggedInCompany = data.company;\r\n    currentLoggedInUser = data.user;\r\n    loggedInViaAdmin = true;\r\n\r\n    await showMainApp();\r\n}\r\n\r\n/**\r\n * Restaura a sessão original do SuperAdmin.\r\n * Limpa as variáveis de estado de representação e restaura o token do admin.\r\n * @returns {boolean} - Retorna true se o token do admin foi encontrado, senão false.\r\n */\r\nexport function restoreAdminSession() {\r\n    const adminToken = localStorage.getItem('superAdminToken');\r\n    if (!adminToken) {\r\n        console.error(\"Token de superAdmin não encontrado para restaurar a sessão.\");\r\n        return false;\r\n    }\r\n\r\n    localStorage.setItem('authToken', adminToken);\r\n    localStorage.removeItem('superAdminToken');\r\n\r\n    // Redefine as variáveis de estado da aplicação para o modo admin\r\n    currentLoggedInUser = null;\r\n    currentLoggedInCompany = null;\r\n    loggedInViaAdmin = false;\r\n    isAdminLoggedIn = true;\r\n\r\n    return true;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n * @param {Event} event - O evento 'change' do input do ficheiro.\r\n */\r\nasync function handleNfeXmlUpload(event) {\r\n    const file = event.target.files[0];\r\n    if (!file) {\r\n        return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = async (e) => {\r\n        try {\r\n            const xmlString = e.target.result;\r\n            const parser = new DOMParser();\r\n            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n\r\n            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n            }\r\n\r\n            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n\r\n            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n\r\n            let parcelsData = [];\r\n\r\n            if (duplicatas.length > 0) {\r\n                parcelsData = duplicatas.map((dup, i) => ({\r\n                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n                    dueDate: getTagValue(\"dVenc\", dup)\r\n                }));\r\n            } else {\r\n                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n\r\n                if (cobrancaMatch && cobrancaMatch[1]) {\r\n                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n\r\n                    parcelsData = dias.map((dia, i) => {\r\n                        const vencimento = new Date(dataEmissao);\r\n                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n                        return {\r\n                            number: i + 1,\r\n                            amount: parcelAmount,\r\n                            dueDate: vencimento.toISOString().split('T')[0]\r\n                        };\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (parcelsData.length > 0) {\r\n                // ALTERAÇÃO AQUI: Removemos o prefixo \"NFe - \" do nome.\r\n                currentBill = { name: nomeFornecedor, nfeNumber: nfeNumber, parcels: parcelsData };\r\n\r\n                installmentsList.innerHTML = '';\r\n                currentBill.parcels.forEach((parcel, index) => {\r\n                    installmentsList.insertAdjacentHTML('beforeend', `\r\n                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n                        </div>\r\n                    `);\r\n                });\r\n\r\n                addEventListenersToInstallmentInputs();\r\n                updatePreviewTotal();\r\n                previewBillNameInput.value = currentBill.name;\r\n                previewNfeNumber.textContent = nfeNumber;\r\n                await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n                installmentsPreviewModal.classList.remove('hidden');\r\n\r\n            } else {\r\n                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n\r\n                // ALTERAÇÃO AQUI TAMBÉM: Removemos o prefixo no caso de fallback.\r\n                document.getElementById('billName').value = nomeFornecedor;\r\n                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n                if (vencimento) {\r\n                    document.getElementById('dueDate').value = vencimento;\r\n                }\r\n\r\n                addBillModal.classList.remove('hidden');\r\n            }\r\n\r\n            showToast('Dados do XML carregados com sucesso!', 'success');\r\n\r\n        } catch (error) {\r\n            showToast(error.message, 'error');\r\n            console.error(\"Erro ao processar XML:\", error);\r\n        } finally {\r\n            event.target.value = '';\r\n        }\r\n    };\r\n\r\n    reader.onerror = () => {\r\n        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n    };\r\n\r\n    reader.readAsText(file);\r\n}\r\n\r\n/**\r\n * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n */\r\nfunction addEventListenersToInstallmentInputs() {\r\n    // Listener para o campo de VALOR\r\n    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n        input.addEventListener('input', (e) => {\r\n            const index = parseInt(e.target.dataset.parcelIndex);\r\n            if (currentBill.parcels[index]) {\r\n                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n            }\r\n            updatePreviewTotal();\r\n        });\r\n    });\r\n\r\n    // Listener para o campo de DATA\r\n    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n        input.addEventListener('change', (e) => {\r\n            const index = parseInt(e.target.dataset.parcelIndex);\r\n            if (currentBill.parcels[index]) {\r\n                currentBill.parcels[index].dueDate = e.target.value;\r\n            }\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Mostra a tela de login de administrador.\r\n     */\r\n    function showAdminLogin() {\r\n        hideAllScreens(); // Função de utils.js\r\n        if (adminLoginForm) adminLoginForm.reset();\r\n        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n    }\r\n\r\n    // Listener para o campo de CÓDIGO DE BARRAS\r\n    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n        // Evento para guardar o valor quando é digitado\r\n        input.addEventListener('input', (e) => {\r\n            const index = parseInt(e.target.dataset.parcelIndex);\r\n            if (currentBill.parcels[index]) {\r\n                currentBill.parcels[index].barcode = e.target.value;\r\n            }\r\n        });\r\n\r\n        input.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Enter') {\r\n                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n\r\n                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n                const nextIndex = currentIndex + 1;\r\n                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n\r\n                if (nextInput) {\r\n                    // Se houver um próximo campo de código de barras, foca nele.\r\n                    nextInput.focus();\r\n                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n                } else {\r\n                    // Se for o último campo, foca no botão de salvar.\r\n                    document.getElementById('addToOrganizer').focus();\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n */\r\nfunction handleShowFullScreenBarcode() {\r\n    const barcodeValue = modalBillBarcodeInput.value;\r\n    if (!barcodeValue) {\r\n        return showToast('Não há código de barras para mostrar.', 'info');\r\n    }\r\n\r\n    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n    if (!barcodeImageContainer) return;\r\n\r\n    // Limpa qualquer código de barras anterior\r\n    barcodeImageContainer.innerHTML = '';\r\n\r\n    try {\r\n        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n\r\n        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n            lineColor: \"#000000\",\r\n            width: 2,\r\n            height: 100,\r\n            displayValue: true, // Mostra os números abaixo das barras\r\n            fontSize: 18\r\n        });\r\n\r\n        // Mostra o modal de ecrã inteiro\r\n        barcodeFullScreenModal.classList.remove('hidden');\r\n\r\n    } catch (e) {\r\n        console.error(\"Erro ao gerar código de barras:\", e);\r\n        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n    }\r\n}\r\n\r\nasync function handleAttachmentUpload(event) {\r\n    const file = event.target.files[0];\r\n    if (!file || !selectedParcel) return;\r\n\r\n    // Cria um objeto FormData para enviar o ficheiro\r\n    const formData = new FormData();\r\n    formData.append('comprovante', file);\r\n\r\n    showLoader();\r\n    try {\r\n        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n        showToast(data.message, 'success');\r\n\r\n        // Atualiza a UI para mostrar o link do novo anexo\r\n        const attachmentContainer = document.getElementById('attachment-container');\r\n        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n\r\n        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n        await updateBillsOrganizer();\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\n/**\r\n * Lida com o clique no botão para remover um anexo de comprovativo.\r\n * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n */\r\nasync function handleRemoveAttachment() {\r\n    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n        return;\r\n    }\r\n\r\n    showLoader(); // Mostra o ícone de carregamento\r\n    try {\r\n        // Chama a nossa função da API para apagar o anexo\r\n        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n\r\n        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n        const attachmentContainer = document.getElementById('attachment-container');\r\n        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n\r\n        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n\r\n        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n        await updateBillsOrganizer();\r\n\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n    }\r\n}\r\n\r\n/**\r\n * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n */\r\nfunction applyFiltersAndSearch() {\r\n    const searchTerm = searchInput.value.toLowerCase();\r\n    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n    const selectedCategoryId = categoryFilterSelect.value;\r\n\r\n    let filteredBoletos = userBoletos.filter(bill => {\r\n        // Filtro de pesquisa\r\n        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n        if (!matchesSearch) return false;\r\n\r\n        // Filtro de categoria\r\n        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n        if (!matchesCategory) return false;\r\n\r\n        // Filtro de status\r\n        if (activeStatusFilter === 'all') return true;\r\n        const today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        return bill.parcels.some(parcel => {\r\n            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n            if (activeStatusFilter === 'paid') return parcel.paid;\r\n            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n            return false;\r\n        });\r\n    });\r\n\r\n    renderCalendar(filteredBoletos);\r\n    updateMonthlySummary(filteredBoletos);\r\n}\r\n\r\n/**\r\n * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n * agora com lógica para parcelas recorrentes.\r\n */\r\nfunction initializeDragAndDrop() {\r\n    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n\r\n    dayCells.forEach(cell => {\r\n        new Sortable(cell, {\r\n            group: 'calendar-bills',\r\n            animation: 150,\r\n            ghostClass: 'opacity-50',\r\n\r\n            onEnd: async function (evt) {\r\n                const item = evt.item;\r\n                const toCell = evt.to;\r\n                const boletoId = item.dataset.boletoId;\r\n                const parcelId = item.dataset.parcelId;\r\n                const newDate = toCell.dataset.date;\r\n\r\n                if (!boletoId || !parcelId || !newDate) return;\r\n\r\n                const parentBoleto = userBoletos.find(b => b._id === boletoId);\r\n                const originalParcel = parentBoleto?.parcels.find(p => p._id === parcelId);\r\n\r\n                if (!parentBoleto || !originalParcel) return;\r\n\r\n                if (parentBoleto.parcels.length > 1) {\r\n                    // --- CORREÇÃO AQUI ---\r\n                    // 1. Definimos a variável 'selectedParcel' que estava em falta.\r\n                    selectedParcel = { ...originalParcel, parentId: parentBoleto._id };\r\n\r\n                    // 2. O resto da lógica continua a mesma\r\n                    const updatedParcelData = {\r\n                        ...originalParcel,\r\n                        dueDate: newDate,\r\n                    };\r\n\r\n                    pendingUpdateData = { \r\n                        updatedParcelData, \r\n                        updatedBillData: { category: parentBoleto.category?._id || null }\r\n                    };\r\n\r\n                    const date = new Date(newDate + 'T00:00:00');\r\n                    singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n\r\n                    recurrentEditModal.classList.remove('hidden');\r\n                    renderCalendar();\r\n\r\n                } else {\r\n                    // Lógica para parcela única (continua a mesma)\r\n                    showLoader();\r\n                    try {\r\n                        await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n                        showToast('Data da parcela atualizada com sucesso!', 'success');\r\n                        await updateBillsOrganizer();\r\n                    } catch (error) {\r\n                        showToast(error.message, 'error');\r\n                        await updateBillsOrganizer();\r\n                    } finally {\r\n                        hideLoader();\r\n                    }\r\n                }\r\n            },\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Calcula o startDate e endDate com base numa predefinição do seletor.\r\n * @returns {{startDate?: string, endDate?: string}} - As datas ou um objeto vazio.\r\n */\r\nfunction getDateRangeFromPreset() {\r\n    const preset = dateRangePresetSelect.value;\r\n    const now = new Date();\r\n    let startDate, endDate;\r\n\r\n    switch (preset) {\r\n        case 'thisMonth':\r\n            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n            break;\r\n        case 'lastMonth':\r\n            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n            endDate = new Date(now.getFullYear(), now.getMonth(), 0);\r\n            break;\r\n        case 'thisQuarter':\r\n            const quarter = Math.floor(now.getMonth() / 3);\r\n            startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n            endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n            break;\r\n        case 'thisYear':\r\n            startDate = new Date(now.getFullYear(), 0, 1);\r\n            endDate = new Date(now.getFullYear(), 11, 31);\r\n            break;\r\n        case 'custom':\r\n            if (startDateInput.value && endDateInput.value) {\r\n                return {\r\n                    startDate: startDateInput.value,\r\n                    endDate: endDateInput.value\r\n                };\r\n            }\r\n            return {}; // Retorna vazio se o intervalo personalizado não estiver completo\r\n        default:\r\n            return {}; // Padrão sem filtro\r\n    }\r\n\r\n    // Formata as datas para o formato YYYY-MM-DD\r\n    return {\r\n        startDate: startDate.toISOString().split('T')[0],\r\n        endDate: endDate.toISOString().split('T')[0]\r\n    };\r\n}\r\n\r\n/**\r\n * Renderiza a lista de próximos vencimentos no dashboard.\r\n * @param {Array} payments - A lista de pagamentos vinda da API.\r\n */\r\nfunction renderUpcomingPayments(payments) {\r\n    if (!upcomingPaymentsList || !noUpcomingPaymentsMessage) return;\r\n\r\n    upcomingPaymentsList.innerHTML = ''; // Limpa a lista\r\n\r\n    if (payments.length === 0) {\r\n        upcomingPaymentsList.appendChild(noUpcomingPaymentsMessage);\r\n        noUpcomingPaymentsMessage.classList.remove('hidden');\r\n    } else {\r\n        noUpcomingPaymentsMessage.classList.add('hidden');\r\n        const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n\r\n        payments.forEach(payment => {\r\n            const dueDate = new Date(payment.dueDate + 'T00:00:00');\r\n            const formattedDate = dueDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\r\n\r\n            const paymentHtml = `\r\n                <div class=\"flex items-center justify-between bg-gray-700/50 p-3 rounded-md\">\r\n                    <div>\r\n                        <p class=\"font-medium text-white\">${payment.billName} (${payment.parcelNumber}ª)</p>\r\n                        <p class=\"text-sm text-gray-400\">Vence em: ${formattedDate}</p>\r\n                    </div>\r\n                    <p class=\"font-semibold text-lg text-yellow-400\">${formatCurrency(payment.amount)}</p>\r\n                </div>\r\n            `;\r\n            upcomingPaymentsList.insertAdjacentHTML('beforeend', paymentHtml);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Renderiza o gráfico de barras horizontais com as 5 maiores despesas por categoria.\r\n * @param {Array} data - Os dados de despesas vindos da API.\r\n */\r\nfunction renderTopExpensesChart(data) {\r\n    const canvas = document.getElementById('topExpensesChart');\r\n    if (!canvas) return;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    // Destrói o gráfico anterior, se existir, para evitar sobreposições\r\n    if (topExpensesChart) {\r\n        topExpensesChart.destroy();\r\n    }\r\n    \r\n    // 1. Ordena os dados do maior para o menor\r\n    const sortedData = [...data].sort((a, b) => b.totalAmount - a.totalAmount);\r\n    \r\n    // 2. Pega apenas nos 5 primeiros resultados\r\n    const top5Data = sortedData.slice(0, 5);\r\n\r\n    // 3. Prepara os dados para o Chart.js\r\n    const labels = top5Data.map(item => item.categoryName);\r\n    const values = top5Data.map(item => item.totalAmount);\r\n\r\n    topExpensesChart = new Chart(ctx, {\r\n        type: 'bar', // Tipo de gráfico\r\n        data: {\r\n            labels: labels,\r\n            datasets: [{\r\n                label: 'Total Gasto',\r\n                data: values,\r\n                backgroundColor: 'rgba(239, 68, 68, 0.6)', // Vermelho\r\n                borderColor: 'rgba(239, 68, 68, 1)',\r\n                borderWidth: 1\r\n            }]\r\n        },\r\n        options: {\r\n            indexAxis: 'y', // <-- Isto é o que torna o gráfico horizontal!\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n                x: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n                y: { ticks: { color: '#d1d5db' }, grid: { display: false } }\r\n            },\r\n            plugins: {\r\n                legend: { display: false },\r\n                tooltip: {\r\n                    callbacks: {\r\n                        label: function(context) {\r\n                            return ` Total: ${context.raw.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Lida com a submissão do formulário de alteração de senha.\r\n * @param {Event} e - O evento de submissão do formulário.\r\n */\r\nasync function handleChangePassword(e) {\r\n    e.preventDefault(); // Impede o recarregamento da página\r\n\r\n    const currentPassword = document.getElementById('currentPassword').value;\r\n    const newPassword = document.getElementById('newPassword').value;\r\n    const confirmPassword = document.getElementById('confirmPassword').value;\r\n\r\n    showLoader();\r\n    try {\r\n        const data = await api.changePassword({ currentPassword, newPassword, confirmPassword });\r\n        showToast(data.message, 'success');\r\n\r\n        // Limpa os campos e fecha o modal após o sucesso\r\n        changePasswordForm.reset();\r\n        profileModal.classList.add('hidden');\r\n\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\n\r\n// =================================================================================\r\n// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n// =================================================================================\r\n\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n// --- Lógica de inicialização que estava em initializeApp() ---\r\nconst today = new Date();\r\ncurrentMonth = today.getMonth();\r\ncurrentYear = today.getFullYear();\r\n\r\nconst token = localStorage.getItem('authToken');\r\nif (!token) {\r\n    // Se não houver token, redireciona para a página de login\r\n    window.location.href = 'Index.html';\r\n    return;\r\n}\r\n\r\ntry {\r\n    const data = await api.checkSession();\r\n    if (data.user.role === 'SuperAdmin') {\r\n        isAdminLoggedIn = true;\r\n        // Usamos import() dinâmico para evitar dependência circular\r\n        const adminModule = await import('./admin.js');\r\n        await adminModule.showAdminDashboard();\r\n    } else {\r\n        currentLoggedInUser = data.user;\r\n        currentLoggedInCompany = data.company;\r\n        const subscription = currentLoggedInCompany.subscription;\r\n        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n\r\n        if (isSubscriptionActive) {\r\n            await showMainApp();\r\n        } else {\r\n            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n            if (currentLoggedInUser.role === 'Proprietário') {\r\n                // Se for o dono da empresa, mostra o modal para renovar\r\n                showSubscriptionModal(currentLoggedInCompany);\r\n            } else {\r\n                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n                showAccessBlockedModal();\r\n            }\r\n        }\r\n    }\r\n    } catch (error) {\r\n        console.error(\"Erro original capturado:\", error); // <--- ADICIONE ESTA LINHA\r\n        // Se o token for inválido ou a API falhar, o utilizador é deslogado\r\n        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('superAdminToken');\r\n        setTimeout(() => {\r\n            window.location.href = 'Index.html';\r\n        }, 2000); \r\n    }  finally {\r\n    // Esconde a tela de carregamento inicial\r\n    document.getElementById('loadingScreen').classList.add('hidden');\r\n}\r\n\r\n\r\nif (logoutBtn) logoutBtn.addEventListener('click', logout);\r\nif (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\nif (addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n\r\n// Submissão de formulários\r\nif (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\nif (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\nif (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\nif (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\nif (logoutBtn) {\r\n    logoutBtn.addEventListener('click', () => {\r\n        window.location.href = 'Index.html';\r\n    });\r\n}\r\nif (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n\r\n\r\n// Ações na App Principal\r\naddToOrganizer.addEventListener('click', handleAddToOrganizer);\r\ncloseAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n\r\n// Ações do Modal de Edição de Boleto\r\ncloseModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\nsaveBillBtn.addEventListener('click', handleSaveChanges);\r\ndeleteBillBtn.addEventListener('click', handleDeleteParcel);\r\ndeleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\ncloseFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n\r\n// Navegação do Calendário\r\nprevMonthBtn.addEventListener('click', () => {\r\n    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n    if (currentMonth === 11) currentYear--;\r\n    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n    applyFiltersAndSearch(); \r\n});\r\n\r\nnextMonthBtn.addEventListener('click', () => {\r\n    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n    if (currentMonth === 0) currentYear++;\r\n    // A mesma mudança aqui\r\n    applyFiltersAndSearch(); \r\n});\r\nif (addCompanyCnpjInput) {\r\n    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n}\r\n\r\nif (openAddBillModalBtn) {\r\n    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n}\r\n\r\nconst handleRedirectToHome = () => {\r\n    window.location.href = 'Index.html';\r\n};\r\n\r\nconst handleFullLogoutAndRedirect = () => {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('superAdminToken');\r\n    window.location.href = 'Index.html';\r\n};\r\n\r\nif (subscriptionLogoutBtn) {\r\n    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n}\r\n\r\nif (blockedAccessLogoutBtn) {\r\n    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n        window.location.href = 'Index.html';\r\n    });\r\n}\r\n\r\n// --- Lógica do Menu de Configurações (Engrenagem) ---\r\nif (settingsBtn) {\r\n    settingsBtn.addEventListener('click', (e) => {\r\n        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n        settingsDropdown.classList.toggle('hidden');\r\n    });\r\n}\r\n\r\n// Links dentro do menu dropdown\r\nif (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n    e.preventDefault();\r\n    settingsDropdown.classList.add('hidden');\r\n    openCompanyInfoModal();\r\n});\r\n\r\nif (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n    e.preventDefault();\r\n    settingsDropdown.classList.add('hidden');\r\n    openPermissionsModal();\r\n});\r\n\r\nwindow.addEventListener('click', () => {\r\n    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n        settingsDropdown.classList.add('hidden');\r\n    }\r\n});\r\n\r\n// Link 'Gerenciar Usuários' dentro do menu dropdown\r\nif (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n    e.preventDefault();\r\n    settingsDropdown.classList.add('hidden');\r\n    openManageUsersModal(currentLoggedInCompany);\r\n});\r\n\r\n// Botões do modal de gerir utilizadores\r\nif (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\nif (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n    manageUsersModal.classList.add('hidden');\r\n    openAddUserModal(currentLoggedInCompany._id); \r\n});\r\n\r\n/**\r\n * Lida com o clique no botão de criar/renovar assinatura.\r\n */\r\nasync function handleCreateSubscription() {\r\n    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n    subscriptionActionBtn.disabled = true;\r\n    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n\r\n    try {\r\n        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n        const data = await api.createSubscriptionLink();\r\n\r\n        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n        if (data.init_point) {\r\n            window.location.href = data.init_point;\r\n        } else {\r\n            throw new Error('Link de pagamento não recebido.');\r\n        }\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n        subscriptionActionBtn.disabled = false;\r\n        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n    }\r\n}\r\n\r\n// Liga a função ao clique do botão.\r\nif (subscriptionActionBtn) {\r\n    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n}\r\n\r\nif (closePreviewModalBtn) {\r\n    closePreviewModalBtn.addEventListener('click', () => {\r\n        installmentsPreviewModal.classList.add('hidden');\r\n    });\r\n}\r\n\r\nif (nfeXmlInput) {\r\n    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n}\r\n\r\nif (previewBillNameInput) {\r\n    previewBillNameInput.addEventListener('input', (e) => {\r\n        if (currentBill) {\r\n            currentBill.name = e.target.value;\r\n        }\r\n    });\r\n}\r\n\r\n// Liga a função ao clique do botão\r\nif (showFullScreenBarcodeBtn) {\r\n    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n}\r\n\r\n// Listener para o campo de pesquisa\r\nif (searchInput) {\r\n    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n}\r\n\r\n// Listeners para os botões de filtro\r\nif (filterButtons) {\r\n    filterButtons.forEach(button => {\r\n        button.addEventListener('click', (e) => {\r\n            // Remove a classe 'active' de todos os botões\r\n            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n            // Adiciona a classe 'active' apenas ao botão clicado\r\n            e.currentTarget.classList.add('active');\r\n            // Aplica o filtro\r\n            applyFiltersAndSearch();\r\n        });\r\n    });\r\n}\r\n\r\nif (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n    e.preventDefault();\r\n    settingsDropdown.classList.add('hidden');\r\n    openCategoriesModal();\r\n});\r\n\r\nif (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n\r\nif (addCategoryForm) {\r\n    addCategoryForm.addEventListener('submit', async (e) => {\r\n        e.preventDefault();\r\n        const name = newCategoryNameInput.value.trim();\r\n        if (!name) return;\r\n        try {\r\n            await api.createCategory(name);\r\n            newCategoryNameInput.value = '';\r\n            await openCategoriesModal(); // Recarrega a lista do modal\r\n            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n        } catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n}\r\n\r\nif (categoryListDiv) {\r\n    categoryListDiv.addEventListener('click', async (e) => {\r\n        const editBtn = e.target.closest('.edit-category-btn');\r\n        const deleteBtn = e.target.closest('.delete-category-btn');\r\n\r\n        if (editBtn) {\r\n            const { id, name } = editBtn.dataset;\r\n            const newName = prompt(\"Editar nome da categoria:\", name);\r\n            if (newName && newName.trim() && newName.trim() !== name) {\r\n                await api.updateCategory(id, newName.trim());\r\n                await openCategoriesModal();\r\n                await populateCategoryFilter();\r\n            }\r\n        }\r\n\r\n        if (deleteBtn) {\r\n            const { id } = deleteBtn.dataset;\r\n            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n                await api.deleteCategory(id);\r\n                await openCategoriesModal();\r\n                await populateCategoryFilter();\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nif (categoryFilterSelect) {\r\n    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n}\r\n\r\n// Configuração dos botões do dashboard\r\nif (viewCalendarBtn) {\r\n    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n}\r\nif (viewDashboardBtn) {\r\n    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n}\r\n\r\nif (dateRangePresetSelect) {\r\n    dateRangePresetSelect.addEventListener('change', () => {\r\n        const isCustom = dateRangePresetSelect.value === 'custom';\r\n        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n\r\n        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n        // o dashboard é atualizado imediatamente.\r\n        if (!isCustom) {\r\n            renderDashboard();\r\n        }\r\n    });\r\n}\r\n\r\n// Para o intervalo personalizado, atualizamos o dashboard\r\n// assim que ambas as datas estiverem preenchidas.\r\nif (startDateInput) {\r\n    startDateInput.addEventListener('change', () => {\r\n        if (endDateInput.value) renderDashboard();\r\n    });\r\n}\r\nif (endDateInput) {\r\n    endDateInput.addEventListener('change', () => {\r\n        if (startDateInput.value) renderDashboard();\r\n    });\r\n}\r\n\r\nif (viewDashboardBtn) {\r\n    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n}\r\n\r\n// Listeners para os botões de exportação\r\nconst handleExport = (format) => {\r\n    // 1. Pega no período de tempo atual do filtro do dashboard\r\n    const dateRange = getDateRangeFromPreset();\r\n\r\n    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n    const queryString = new URLSearchParams(dateRange).toString();\r\n\r\n    // 3. Monta o URL completo para o download\r\n    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n    \r\n    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n    fetch(downloadUrl, {\r\n        headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        }\r\n    })\r\n    .then(res => res.blob())\r\n    .then(blob => {\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.style.display = 'none';\r\n        a.href = url;\r\n        a.download = `relatorio-despesas.${format}`;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n        a.remove();\r\n    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n};\r\n\r\nif (exportCsvBtn) {\r\n    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n}\r\nif (exportPdfBtn) {\r\n    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n}\r\n\r\nif (manualAddBtn) {\r\n    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n}\r\nif (xmlAddBtn) {\r\n    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n}\r\n\r\nif (csvImportBtn) {\r\n    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n}\r\nif (csvFileInput) {\r\n    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n}\r\nif (importCsvBtn) {\r\n    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n}\r\nif (markSelectedAsPaidBtn) {\r\n    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n}\r\nif (selectAllVisibleBtn) {\r\n    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n}\r\n\r\nif (deselectAllVisibleBtn) {\r\n    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n}\r\nif (dashboardFilterButtons) {\r\n    dashboardFilterButtons.forEach(button => {\r\n        button.addEventListener('click', (e) => {\r\n            // Remove a classe 'active' de todos os botões do dashboard\r\n            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n            // Adiciona 'active' apenas ao botão clicado\r\n            e.currentTarget.classList.add('active');\r\n            // Atualiza a variável de estado com o novo filtro\r\n            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n            // Renderiza o dashboard novamente com os dados filtrados\r\n            renderDashboard();\r\n        });\r\n    });\r\n}\r\n// Abre o modal de alteração de categoria\r\nif (changeCategoryBtn) {\r\n    changeCategoryBtn.addEventListener('click', async () => {\r\n        showLoader();\r\n        // Popula o dropdown do modal com as categorias existentes\r\n        await populateCategorySelect(batchCategorySelect);\r\n        hideLoader();\r\n        categoryBatchModal.classList.remove('hidden');\r\n    });\r\n}\r\n\r\n// Botão de cancelar no modal\r\nif (cancelCategoryBatchBtn) {\r\n    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n        categoryBatchModal.classList.add('hidden');\r\n    });\r\n}\r\n\r\n// Botão de confirmar a alteração\r\nif (confirmCategoryBatchBtn) {\r\n    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n        const categoryId = batchCategorySelect.value;\r\n        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n\r\n        if (boletoIds.length === 0) {\r\n            return showToast('Nenhum item selecionado.', 'info');\r\n        }\r\n\r\n        showLoader();\r\n        try {\r\n            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n            showToast(response.message, 'success');\r\n            selectedItems.clear();\r\n            updateMassPaymentButton();\r\n            await updateBillsOrganizer();\r\n        } catch (error) {\r\n            showToast(error.message, 'error');\r\n        } finally {\r\n            hideLoader();\r\n            categoryBatchModal.classList.add('hidden');\r\n        }\r\n    });\r\n}\r\nif (openProfileModalBtn) {\r\n    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n}\r\nif (closeProfileModalBtn) {\r\n    closeProfileModalBtn.addEventListener('click', () => {\r\n        profileModal.classList.add('hidden');\r\n    });\r\n}\r\nif (changePasswordForm) {\r\n    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n}\r\nif (resendVerificationBtn) {\r\n    resendVerificationBtn.addEventListener('click', async () => {\r\n        resendVerificationBtn.disabled = true;\r\n        resendVerificationBtn.textContent = 'A reenviar...';\r\n\r\n        try {\r\n            const data = await api.resendVerificationEmail();\r\n            showToast(data.message, 'success');\r\n        } catch (error) {\r\n            showToast(error.message, 'error');\r\n        } finally {\r\n            resendVerificationBtn.disabled = false;\r\n            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n        }\r\n    });\r\n}\r\nif (recurrentAddBtn) {\r\n    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n}\r\nif (recurrentEditModal) {\r\n    // Botões de escolha (Somente esta, futuras, todas)\r\n    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n        button.addEventListener('click', async (e) => {\r\n            const scope = e.currentTarget.dataset.scope;\r\n            if (!pendingUpdateData || !selectedParcel) return;\r\n\r\n            recurrentEditModal.classList.add('hidden');\r\n            showLoader();\r\n            try {\r\n                // Chama a nova rota da API com o escopo escolhido\r\n                await api.bulkUpdateParcels(\r\n                    selectedParcel.parentId, \r\n                    selectedParcel._id, \r\n                    pendingUpdateData.updatedParcelData, \r\n                    scope\r\n                );\r\n\r\n                // Atualiza a categoria do boleto, se foi alterada\r\n                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n\r\n                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n                billModal.classList.add('hidden');\r\n                await updateBillsOrganizer();\r\n            } catch (error) {\r\n                showToast(error.message, 'error');\r\n            } finally {\r\n                hideLoader();\r\n                pendingUpdateData = null; // Limpa os dados pendentes\r\n            }\r\n        });\r\n    });\r\n\r\n    // Botão de cancelar\r\n    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n        recurrentEditModal.classList.add('hidden');\r\n        pendingUpdateData = null; // Limpa os dados pendentes\r\n    });\r\n}\r\nif (closeAnnouncementBtn) {\r\n    closeAnnouncementBtn.addEventListener('click', () => {\r\n        globalAnnouncementBanner.classList.add('hidden');\r\n    });\r\n}\r\n\r\n// CHAME A NOVA FUNÇÃO AQUI\r\ninitializeDashboardDragAndDrop(); \r\n\r\n\r\n});"
        }
    ]
}