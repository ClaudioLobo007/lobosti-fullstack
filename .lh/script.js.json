{
    "sourceFile": "Script.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 79,
            "patches": [
                {
                    "date": 1752239476873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752240310871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n     let selectedParcel = null;\r\n     let userBoletos = [];\r\n     let currentMonth, currentYear;\r\n \r\n-    \r\n+\r\n     // --- Lógica para o Modal de Adicionar Boletos ---\r\n     openAddBillModalBtn.addEventListener('click', () => {\r\n         clearBillForm();\r\n         addBillModal.classList.remove('hidden');\r\n@@ -1046,8 +1046,10 @@\n             modalCompanyUsers.appendChild(userItem);\r\n         });\r\n     }\r\n \r\n+\r\n+\r\n     // Anexa os listeners aos botões e selects criados\r\n     document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n         button.addEventListener('click', (e) => {\r\n             const userId = e.target.dataset.userId;\r\n@@ -1081,10 +1083,13 @@\n                 }\r\n \r\n                 showToast(data.message, 'success');\r\n                 // Atualiza o estado local para refletir a mudança sem precisar recarregar\r\n-                selectedCompanyForAdmin.usuarios.find(u => u._id === userId).role = newRole;\r\n-\r\n+                const userToUpdate = selectedCompanyForAdmin.usuarios.find(u => u._id === userId);\r\n+                if(userToUpdate) {\r\n+                    userToUpdate.role = newRole;\r\n+                }\r\n+                \r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n                 // Em caso de erro, recarrega o modal para reverter a mudança visual na tela\r\n                 fetchCompanyDetailsAndOpenModal(companyId);\r\n"
                },
                {
                    "date": 1752240464752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -488,121 +488,105 @@\n         catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n-    // --- Funções do Admin Dashboard ---\r\n     async function renderCompanyList() {\r\n         const token = localStorage.getItem('authToken');\r\n         if (!token) return;\r\n+\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/companies',\r\n-                {\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n+            const response = await fetch('http://localhost:5000/api/companies', {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n             if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n+\r\n             const companies = await response.json();\r\n             companyListDiv.innerHTML = '';\r\n+\r\n             if (companies.length === 0) {\r\n                 noCompaniesMessage.classList.remove('hidden');\r\n-            }\r\n-            else {\r\n+            } else {\r\n                 noCompaniesMessage.classList.add('hidden');\r\n                 companies.forEach(company => {\r\n                     const companyCard = document.createElement('div');\r\n                     companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n                     companyCard.innerHTML = `\r\n-\r\n-                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-\r\n-                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-\r\n-                        <p class=\"text-gray-400 text-sm mt-2\">${company.usuarios.length} usuários cadastrados</p>\r\n-\r\n-                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n-\r\n-                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-\r\n-                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-\r\n-                        </div>\r\n-\r\n-                    `;\r\n+                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                        <p class=\"text-gray-400 text-sm mt-2\">${company.usuarios.length} usuários cadastrados</p>\r\n+                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                        </div>\r\n+                    `;\r\n                     companyListDiv.appendChild(companyCard);\r\n                 });\r\n+\r\n                 document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n                     button.addEventListener('click', async (e) => {\r\n                         const companyId = e.target.dataset.companyId;\r\n                         const token = localStorage.getItem('authToken');\r\n                         try {\r\n-                            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n-                                {\r\n-                                    headers:\r\n-                                    {\r\n-                                        'Authorization': `Bearer ${token}`\r\n-                                    }\r\n-                                });\r\n+                            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n+                                headers: {\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                }\r\n+                            });\r\n                             const companyDetails = await response.json();\r\n                             if (!response.ok) throw new Error(companyDetails.message);\r\n                             openCompanyDetailsModal(companyDetails);\r\n-                        }\r\n-                        catch (error) {\r\n+                        } catch (error) {\r\n                             showToast(error.message, 'error');\r\n                         }\r\n                     });\r\n                 });\r\n+\r\n                 document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n                     button.addEventListener('click', async (e) => {\r\n                         const companyId = e.target.dataset.companyId;\r\n                         const token = localStorage.getItem('authToken');\r\n                         try {\r\n-                            const companyResponse = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n-                                {\r\n-                                    headers:\r\n-                                    {\r\n-                                        'Authorization': `Bearer ${token}`\r\n-                                    }\r\n-                                });\r\n+                            const companyResponse = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n+                                headers: {\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                }\r\n+                            });\r\n                             const companyDetails = await companyResponse.json();\r\n                             if (!companyResponse.ok) throw new Error(companyDetails.message);\r\n                             if (companyDetails.usuarios.length === 0) {\r\n                                 showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n                                 return;\r\n                             }\r\n                             const userId = companyDetails.usuarios[0]._id;\r\n-                            const impersonateResponse = await fetch('http://localhost:5000/api/admin/impersonate',\r\n-                                {\r\n-                                    method: 'POST',\r\n-                                    headers:\r\n-                                    {\r\n-                                        'Content-Type': 'application/json',\r\n-                                        'Authorization': `Bearer ${token}`\r\n-                                    },\r\n-                                    body: JSON.stringify(\r\n-                                        {\r\n-                                            companyId,\r\n-                                            userId\r\n-                                        })\r\n-                                });\r\n+                            const impersonateResponse = await fetch('http://localhost:5000/api/admin/impersonate', {\r\n+                                method: 'POST',\r\n+                                headers: {\r\n+                                    'Content-Type': 'application/json',\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                },\r\n+                                body: JSON.stringify({\r\n+                                    companyId,\r\n+                                    userId\r\n+                                })\r\n+                            });\r\n                             const data = await impersonateResponse.json();\r\n                             if (!impersonateResponse.ok) throw new Error(data.message);\r\n                             showToast(`Entrando na empresa ${data.company.nomeEmpresa}...`, 'success');\r\n                             localStorage.setItem('authToken', data.token);\r\n                             currentLoggedInCompany = data.company;\r\n                             currentLoggedInUser = data.user;\r\n                             loggedInViaAdmin = true;\r\n                             showMainApp();\r\n-                        }\r\n-                        catch (error) {\r\n+                        } catch (error) {\r\n                             showToast(error.message, 'error');\r\n                         }\r\n                     });\r\n                 });\r\n             }\r\n-        }\r\n-        catch (error) {\r\n+        } catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n     createCompanyBtn.addEventListener('click', async () => {\r\n"
                },
                {
                    "date": 1752240788884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,8 +168,32 @@\n         catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n+\r\n+        // --- Lógica para os Itens do Menu da Engrenagem ---\r\n+\r\n+    // Função unificada que será chamada por qualquer link do menu\r\n+    const openManagementModal = (e) => {\r\n+        e.preventDefault(); // Impede o link de navegar para '#'\r\n+        settingsDropdown.classList.add('hidden'); // Fecha o menu dropdown\r\n+        \r\n+        // Pega o ID da empresa do usuário que está logado (seja Admin ou Proprietário)\r\n+        const companyId = isAdminLoggedIn ? (selectedCompanyForAdmin ? selectedCompanyForAdmin._id : null) : (currentLoggedInCompany ? currentLoggedInCompany._id : null);\r\n+\r\n+        // Se tivermos um ID, busca os detalhes e abre o modal de gerenciamento\r\n+        if (companyId) {\r\n+            fetchCompanyDetailsAndOpenModal(companyId);\r\n+        } else {\r\n+            showToast('Erro: Não foi possível identificar a empresa para abrir o gerenciador.', 'error');\r\n+        }\r\n+    };\r\n+\r\n+    // Anexa a mesma função de clique a TODOS os três links do menu\r\n+    menuEmpresa.addEventListener('click', openManagementModal);\r\n+    menuUsuarios.addEventListener('click', openManagementModal);\r\n+    menuPermissoes.addEventListener('click', openManagementModal);\r\n+\r\n     // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n     function closeQuickAddModal() {\r\n         quickUserAddModal.classList.add('hidden');\r\n     }\r\n"
                },
                {
                    "date": 1752241516834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n     const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n     const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n     const settingsBtn = document.getElementById('settingsBtn');\r\n     const settingsDropdown = document.getElementById('settingsDropdown');\r\n+    const menuCadastroUsuario = document.getElementById('menuCadastroUsuario');\r\n     const menuEmpresa = document.getElementById('menuEmpresa');\r\n     const menuUsuarios = document.getElementById('menuUsuarios');\r\n     const menuPermissoes = document.getElementById('menuPermissoes');\r\n     const billForm = document.getElementById('billForm');\r\n"
                },
                {
                    "date": 1752241869466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,8 @@\n     const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n     const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n     const settingsBtn = document.getElementById('settingsBtn');\r\n     const settingsDropdown = document.getElementById('settingsDropdown');\r\n-    const menuCadastroUsuario = document.getElementById('menuCadastroUsuario');\r\n     const menuEmpresa = document.getElementById('menuEmpresa');\r\n     const menuUsuarios = document.getElementById('menuUsuarios');\r\n     const menuPermissoes = document.getElementById('menuPermissoes');\r\n     const billForm = document.getElementById('billForm');\r\n@@ -138,21 +137,9 @@\n         if (!settingsDropdown.classList.contains('hidden')) {\r\n             settingsDropdown.classList.add('hidden');\r\n         }\r\n     });\r\n-    // A lógica para o item de menu continua aqui\r\n-    menuCadastroUsuario.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        let companyId = isAdminLoggedIn ? (selectedCompanyForAdmin ? selectedCompanyForAdmin._id : null) : (currentLoggedInCompany ? currentLoggedInCompany._id : null);\r\n-        if (companyId) {\r\n-            fetchCompanyDetailsAndOpenModal(companyId);\r\n-        }\r\n-        else if (currentLoggedInUser.role === 'Proprietário') {\r\n-            quickUserAddModal.classList.remove('hidden');\r\n-            quickUserAddForm.reset();\r\n-        }\r\n-    });\r\n+\r\n     async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n             const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n"
                },
                {
                    "date": 1752242025502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-document.addEventListener('DOMContentLoaded', function() {\r\n-    // --- Elementos HTML (Declarações completas) ---\r\n+document.addEventListener('DOMContentLoaded', function () {\r\n+    // --- Elementos HTML de Login e Telas ---\r\n     const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n     const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n     const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n     const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n"
                },
                {
                    "date": 1752242069514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-document.addEventListener('DOMContentLoaded', function () {\r\n-    // --- Elementos HTML de Login e Telas ---\r\n+document.addEventListener('DOMContentLoaded', function() {\r\n+    // --- Elementos HTML (Declarações completas) ---\r\n     const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n     const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n     const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n     const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n"
                },
                {
                    "date": 1752242518107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,27 +157,27 @@\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n \r\n-        // --- Lógica para os Itens do Menu da Engrenagem ---\r\n+            // --- Lógica para os Itens do Menu da Engrenagem ---\r\n \r\n     // Função unificada que será chamada por qualquer link do menu\r\n     const openManagementModal = (e) => {\r\n-        e.preventDefault(); // Impede o link de navegar para '#'\r\n-        settingsDropdown.classList.add('hidden'); // Fecha o menu dropdown\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n         \r\n-        // Pega o ID da empresa do usuário que está logado (seja Admin ou Proprietário)\r\n-        const companyId = isAdminLoggedIn ? (selectedCompanyForAdmin ? selectedCompanyForAdmin._id : null) : (currentLoggedInCompany ? currentLoggedInCompany._id : null);\r\n+        // Pega o ID da empresa do usuário que está logado\r\n+        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n \r\n-        // Se tivermos um ID, busca os detalhes e abre o modal de gerenciamento\r\n         if (companyId) {\r\n+            // Se encontrou um ID, busca os detalhes e abre o modal de gerenciamento\r\n             fetchCompanyDetailsAndOpenModal(companyId);\r\n         } else {\r\n-            showToast('Erro: Não foi possível identificar a empresa para abrir o gerenciador.', 'error');\r\n+            showToast('Erro: Não foi possível identificar a empresa.', 'error');\r\n         }\r\n     };\r\n \r\n-    // Anexa a mesma função de clique a TODOS os três links do menu\r\n+    // Anexa a mesma função de clique a TODOS os links do menu\r\n     menuEmpresa.addEventListener('click', openManagementModal);\r\n     menuUsuarios.addEventListener('click', openManagementModal);\r\n     menuPermissoes.addEventListener('click', openManagementModal);\r\n \r\n"
                },
                {
                    "date": 1752242819403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,20 +283,23 @@\n \r\n     function showMainApp() {\r\n         hideAllScreens();\r\n         mainAppContent.classList.remove('hidden');\r\n+\r\n         if (loggedInViaAdmin) {\r\n             backToAdminBtn.classList.remove('hidden');\r\n-        }\r\n-        else {\r\n+        } else {\r\n             backToAdminBtn.classList.add('hidden');\r\n         }\r\n-        if (currentLoggedInUser && currentLoggedInUser.role === 'Proprietário') {\r\n+        \r\n+        // <<< LÓGICA CORRIGIDA AQUI >>>\r\n+        // Agora a engrenagem só aparece se o usuário for 'Proprietário' E se ele NÃO for o Super Admin.\r\n+        if (!isAdminLoggedIn && currentLoggedInUser && currentLoggedInUser.role === 'Proprietário') {\r\n             settingsMenuContainer.classList.remove('hidden');\r\n-        }\r\n-        else {\r\n+        } else {\r\n             settingsMenuContainer.classList.add('hidden');\r\n         }\r\n+\r\n         updateBillsOrganizer();\r\n     }\r\n \r\n     function showAdminDashboard() {\r\n"
                },
                {
                    "date": 1752243803940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,11 @@\n     const settingsDropdown = document.getElementById('settingsDropdown');\r\n     const menuEmpresa = document.getElementById('menuEmpresa');\r\n     const menuUsuarios = document.getElementById('menuUsuarios');\r\n     const menuPermissoes = document.getElementById('menuPermissoes');\r\n+    const permissionsModal = document.getElementById('permissionsModal');\r\n+    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+    const permissionsContainer = document.getElementById('permissionsContainer');\r\n     const billForm = document.getElementById('billForm');\r\n     const installmentsPreview = document.getElementById('installmentsPreview');\r\n     const installmentsList = document.getElementById('installmentsList');\r\n     const addToOrganizer = document.getElementById('addToOrganizer');\r\n@@ -175,8 +178,78 @@\n             showToast('Erro: Não foi possível identificar a empresa.', 'error');\r\n         }\r\n     };\r\n \r\n+    // --- Lógica para o Modal de Permissões ---\r\n+    menuPermissoes.addEventListener('click', async (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+\r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch('http://localhost:5000/api/permissions', {\r\n+            headers: { 'Authorization': `Bearer ${token}` }\r\n+        });\r\n+        const permissions = await response.json();\r\n+        if (!response.ok) throw new Error(permissions.message);\r\n+\r\n+        // Preenche o formulário com as permissões atuais\r\n+        document.getElementById('gerente-canCreate').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+\r\n+        document.getElementById('funcionario-canCreate').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+    }\r\n+});\r\n+\r\n+    closePermissionsModal.addEventListener('click', () => {\r\n+    permissionsModal.classList.add('hidden');\r\n+});\r\n+\r\n+// Listener para salvar as alterações automaticamente\r\n+permissionsContainer.addEventListener('change', async (e) => {\r\n+    const target = e.target;\r\n+    const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n+\r\n+    let permissionKey;\r\n+    let permissionValue;\r\n+\r\n+    if (target.type === 'checkbox') {\r\n+        permissionKey = target.name.split('-')[1]; // Ex: 'canCreate'\r\n+        permissionValue = target.checked;\r\n+    } else if (target.type === 'radio') {\r\n+        permissionKey = target.name.split('-')[1]; // Ex: 'canUpdate'\r\n+        permissionValue = target.value;\r\n+    }\r\n+\r\n+    if (!roleToUpdate || !permissionKey) return;\r\n+\r\n+    const payload = {\r\n+        roleToUpdate,\r\n+        permissions: { [permissionKey]: permissionValue }\r\n+    };\r\n+\r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch('http://localhost:5000/api/permissions', {\r\n+            method: 'PATCH',\r\n+            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+            body: JSON.stringify(payload)\r\n+        });\r\n+        const data = await response.json();\r\n+        if (!response.ok) throw new Error(data.message);\r\n+        showToast(data.message, 'success');\r\n+    } catch (error) {\r\n+        showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n+    }\r\n+});\r\n+\r\n     // Anexa a mesma função de clique a TODOS os links do menu\r\n     menuEmpresa.addEventListener('click', openManagementModal);\r\n     menuUsuarios.addEventListener('click', openManagementModal);\r\n     menuPermissoes.addEventListener('click', openManagementModal);\r\n"
                },
                {
                    "date": 1752244766717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n         if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n     });\r\n     // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n     settingsBtn.addEventListener('click', (event) => {\r\n-        event.stopPropagation(); // Impede que o clique no próprio botão feche o menu imediatamente\r\n+        event.stopPropagation();\r\n         settingsDropdown.classList.toggle('hidden');\r\n     });\r\n     // Adiciona um listener na janela inteira para fechar o dropdown se o usuário clicar fora dele\r\n     window.addEventListener('click', () => {\r\n@@ -141,8 +141,16 @@\n             settingsDropdown.classList.add('hidden');\r\n         }\r\n     });\r\n \r\n+    // Listener para o item \"Gerenciar Usuários\"\r\n+    menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        const companyId = isAdminLoggedIn ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n+        if (companyId) fetchCompanyDetailsAndOpenModal(companyId);\r\n+    });\r\n+\r\n     async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n             const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n@@ -180,76 +188,64 @@\n     };\r\n \r\n     // --- Lógica para o Modal de Permissões ---\r\n     menuPermissoes.addEventListener('click', async (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/permissions', {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const permissions = await response.json();\r\n+            if (!response.ok) throw new Error(permissions.message);\r\n \r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch('http://localhost:5000/api/permissions', {\r\n-            headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n-        const permissions = await response.json();\r\n-        if (!response.ok) throw new Error(permissions.message);\r\n+            // Preenche o formulário com as permissões atuais\r\n+            document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+            document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+            document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+            document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n \r\n-        // Preenche o formulário com as permissões atuais\r\n-        document.getElementById('gerente-canCreate').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+            permissionsModal.classList.remove('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n \r\n-        document.getElementById('funcionario-canCreate').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-    }\r\n-});\r\n-\r\n+    // Listener para fechar o modal de permissões\r\n     closePermissionsModal.addEventListener('click', () => {\r\n-    permissionsModal.classList.add('hidden');\r\n-});\r\n+        permissionsModal.classList.add('hidden');\r\n+    });\r\n \r\n-// Listener para salvar as alterações automaticamente\r\n-permissionsContainer.addEventListener('change', async (e) => {\r\n-    const target = e.target;\r\n-    const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n+    // Listener para salvar as alterações de permissão automaticamente\r\n+    permissionsContainer.addEventListener('change', async (e) => {\r\n+        const target = e.target;\r\n+        if (target.type !== 'radio') return;\r\n \r\n-    let permissionKey;\r\n-    let permissionValue;\r\n+        const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n+        const permissionKey = target.name.split('-')[1]; // Ex: 'canUpdate' ou 'canDelete'\r\n+        const permissionValue = target.value;\r\n \r\n-    if (target.type === 'checkbox') {\r\n-        permissionKey = target.name.split('-')[1]; // Ex: 'canCreate'\r\n-        permissionValue = target.checked;\r\n-    } else if (target.type === 'radio') {\r\n-        permissionKey = target.name.split('-')[1]; // Ex: 'canUpdate'\r\n-        permissionValue = target.value;\r\n-    }\r\n+        const payload = {\r\n+            roleToUpdate,\r\n+            permissions: { [permissionKey]: permissionValue }\r\n+        };\r\n \r\n-    if (!roleToUpdate || !permissionKey) return;\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/permissions', {\r\n+                method: 'PATCH',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n \r\n-    const payload = {\r\n-        roleToUpdate,\r\n-        permissions: { [permissionKey]: permissionValue }\r\n-    };\r\n-\r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch('http://localhost:5000/api/permissions', {\r\n-            method: 'PATCH',\r\n-            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-            body: JSON.stringify(payload)\r\n-        });\r\n-        const data = await response.json();\r\n-        if (!response.ok) throw new Error(data.message);\r\n-        showToast(data.message, 'success');\r\n-    } catch (error) {\r\n-        showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n-    }\r\n-});\r\n-\r\n     // Anexa a mesma função de clique a TODOS os links do menu\r\n     menuEmpresa.addEventListener('click', openManagementModal);\r\n     menuUsuarios.addEventListener('click', openManagementModal);\r\n     menuPermissoes.addEventListener('click', openManagementModal);\r\n"
                },
                {
                    "date": 1752244935513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,13 +244,8 @@\n             showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n         }\r\n     });\r\n \r\n-    // Anexa a mesma função de clique a TODOS os links do menu\r\n-    menuEmpresa.addEventListener('click', openManagementModal);\r\n-    menuUsuarios.addEventListener('click', openManagementModal);\r\n-    menuPermissoes.addEventListener('click', openManagementModal);\r\n-\r\n     // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n     function closeQuickAddModal() {\r\n         quickUserAddModal.classList.add('hidden');\r\n     }\r\n"
                },
                {
                    "date": 1752245126224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1262 @@\n+document.addEventListener('DOMContentLoaded', function() {\r\n+    // --- Elementos HTML (Declarações completas) ---\r\n+    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+    const cnpjInput = document.getElementById('cnpjInput');\r\n+    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+    const adminLoginForm = document.getElementById('adminLoginForm');\r\n+    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+    const companyListDiv = document.getElementById('companyList');\r\n+    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+    const userLoginScreen = document.getElementById('userLoginScreen');\r\n+    const userLoginForm = document.getElementById('userLoginForm');\r\n+    const userInput = document.getElementById('userInput');\r\n+    const userPasswordInput = document.getElementById('userPasswordInput');\r\n+    const registerUserBtn = document.getElementById('registerUserBtn');\r\n+    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+    const welcomeUserText = document.getElementById('welcomeUserText');\r\n+    const mainAppContent = document.getElementById('mainAppContent');\r\n+    const toastMessage = document.getElementById('toastMessage');\r\n+    const logoutBtn = document.getElementById('logoutBtn');\r\n+    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+    const addBillModal = document.getElementById('addBillModal');\r\n+    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n+    const modalCompanyName = document.getElementById('modalCompanyName');\r\n+    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+    const addUserBtn = document.getElementById('addUserBtn');\r\n+    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+    const billModal = document.getElementById('billModal');\r\n+    const closeModalBtn = document.getElementById('closeModal');\r\n+    const saveBillBtn = document.getElementById('saveBill');\r\n+    const deleteBillBtn = document.getElementById('deleteBill');\r\n+    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n+    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n+    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n+    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n+    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+    const settingsBtn = document.getElementById('settingsBtn');\r\n+    const settingsDropdown = document.getElementById('settingsDropdown');\r\n+    const menuEmpresa = document.getElementById('menuEmpresa');\r\n+    const menuUsuarios = document.getElementById('menuUsuarios');\r\n+    const menuPermissoes = document.getElementById('menuPermissoes');\r\n+    const permissionsModal = document.getElementById('permissionsModal');\r\n+    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+    const permissionsContainer = document.getElementById('permissionsContainer');\r\n+    const billForm = document.getElementById('billForm');\r\n+    const installmentsPreview = document.getElementById('installmentsPreview');\r\n+    const installmentsList = document.getElementById('installmentsList');\r\n+    const addToOrganizer = document.getElementById('addToOrganizer');\r\n+    const totalBillsSpan = document.getElementById('totalBills');\r\n+    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+    const clearFormBtn = document.getElementById('clearFormBtn');\r\n+    const prevMonthBtn = document.getElementById('prevMonth');\r\n+    const nextMonthBtn = document.getElementById('nextMonth');\r\n+\r\n+    // --- Variáveis de Dados e Estado ---\r\n+    let currentLoggedInCompany = null;\r\n+    let currentLoggedInUser = null;\r\n+    let isAdminLoggedIn = false;\r\n+    let loggedInViaAdmin = false;\r\n+    let selectedCompanyForAdmin = null;\r\n+    let currentBill = {};\r\n+    let selectedParcel = null;\r\n+    let userBoletos = [];\r\n+    let currentMonth, currentYear;\r\n+\r\n+\r\n+    // --- Lógica para o Modal de Adicionar Boletos ---\r\n+    openAddBillModalBtn.addEventListener('click', () => {\r\n+        clearBillForm();\r\n+        addBillModal.classList.remove('hidden');\r\n+    });\r\n+    closeAddBillModalBtn.addEventListener('click', () => {\r\n+        addBillModal.classList.add('hidden');\r\n+    });\r\n+    addBillModal.addEventListener('click', (e) => {\r\n+        if (e.target === addBillModal) {\r\n+            addBillModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n+    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n+        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n+        if (!originalBarcode) return;\r\n+        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n+        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n+            try {\r\n+                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n+                    {\r\n+                        format: \"ITF\",\r\n+                        width: 1.5,\r\n+                        height: 80,\r\n+                        displayValue: true,\r\n+                        fontSize: 20,\r\n+                        lineColor: \"#000\",\r\n+                        background: \"#FFF\"\r\n+                    });\r\n+                barcodeFullScreenModal.classList.remove('hidden');\r\n+            }\r\n+            catch (e) {\r\n+                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n+            }\r\n+        }\r\n+        else {\r\n+            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n+        }\r\n+    });\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n+        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n+    });\r\n+    \r\n+    // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n+    settingsBtn.addEventListener('click', (event) => {\r\n+        event.stopPropagation();\r\n+        settingsDropdown.classList.toggle('hidden');\r\n+    });\r\n+    // Adiciona um listener na janela inteira para fechar o dropdown se o usuário clicar fora dele\r\n+    window.addEventListener('click', () => {\r\n+        if (!settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para o item \"Gerenciar Usuários\"\r\n+    menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        const companyId = isAdminLoggedIn ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n+        if (companyId) fetchCompanyDetailsAndOpenModal(companyId);\r\n+    });\r\n+\r\n+    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n+                {\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const companyDetails = await response.json();\r\n+            if (!response.ok) throw new Error(companyDetails.message);\r\n+            openCompanyDetailsModal(companyDetails);\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n+    settingsBtn.addEventListener('click', (event) => {\r\n+        event.stopPropagation();\r\n+        settingsDropdown.classList.toggle('hidden');\r\n+    });\r\n+\r\n+    window.addEventListener('click', () => {\r\n+        if (!settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n+    // Função auxiliar para os links de Empresa e Usuários\r\n+    const openCompanyDetails = (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+        if (companyId) {\r\n+            fetchCompanyDetailsAndOpenModal(companyId);\r\n+        }\r\n+    };\r\n+\r\n+    // Anexa a função aos links de Empresa e Usuários\r\n+    menuEmpresa.addEventListener('click', openCompanyDetails);\r\n+    menuUsuarios.addEventListener('click', openCompanyDetails);\r\n+\r\n+    // Listener EXCLUSIVO para o link de Permissões\r\n+    menuPermissoes.addEventListener('click', async (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        \r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/permissions', {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const permissions = await response.json();\r\n+            if (!response.ok) throw new Error(permissions.message);\r\n+\r\n+            // Preenche o formulário com as permissões atuais\r\n+            document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+            document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+            \r\n+            document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+            document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+\r\n+            permissionsModal.classList.remove('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n+    function closeQuickAddModal() {\r\n+        quickUserAddModal.classList.add('hidden');\r\n+    }\r\n+    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n+    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n+    quickUserAddForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const username = document.getElementById('quickAddUsername').value;\r\n+        const password = document.getElementById('quickAddPassword').value;\r\n+        if (!currentLoggedInCompany) {\r\n+            showToast('Erro: Empresa não identificada.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            closeQuickAddModal();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    // --- Funções de Utilitário e de Tela ---\r\n+    function showToast(message, type = 'success') {\r\n+        toastMessage.textContent = message;\r\n+        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n+        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n+        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n+        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n+        toastMessage.classList.remove('hidden');\r\n+        setTimeout(() => {\r\n+            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n+            setTimeout(() => {\r\n+                toastMessage.classList.add('hidden');\r\n+                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n+            }, 300);\r\n+        }, 3000);\r\n+    }\r\n+\r\n+    function hideAllScreens() {\r\n+        initialLoginScreen.classList.add('hidden');\r\n+        cnpjLoginScreen.classList.add('hidden');\r\n+        adminLoginScreen.classList.add('hidden');\r\n+        userLoginScreen.classList.add('hidden');\r\n+        adminDashboardScreen.classList.add('hidden');\r\n+        mainAppContent.classList.add('hidden');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        addBillModal.classList.add('hidden');\r\n+        billModal.classList.add('hidden');\r\n+        barcodeFullScreenModal.classList.add('hidden');\r\n+        quickUserAddModal.classList.add('hidden');\r\n+    }\r\n+\r\n+    function showInitialLogin() {\r\n+        hideAllScreens();\r\n+        initialLoginScreen.classList.remove('hidden');\r\n+        localStorage.removeItem('authToken');\r\n+        currentLoggedInCompany = null;\r\n+        currentLoggedInUser = null;\r\n+        isAdminLoggedIn = false;\r\n+        loggedInViaAdmin = false;\r\n+    }\r\n+\r\n+    function showCnpjLogin() {\r\n+        hideAllScreens();\r\n+        cnpjLoginForm.reset();\r\n+        cnpjLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showAdminLogin() {\r\n+        hideAllScreens();\r\n+        adminLoginForm.reset();\r\n+        adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showUserLogin(companyName) {\r\n+        hideAllScreens();\r\n+        userLoginForm.reset();\r\n+        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+        userLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showMainApp() {\r\n+        hideAllScreens();\r\n+        mainAppContent.classList.remove('hidden');\r\n+\r\n+        if (loggedInViaAdmin) {\r\n+            backToAdminBtn.classList.remove('hidden');\r\n+        } else {\r\n+            backToAdminBtn.classList.add('hidden');\r\n+        }\r\n+        \r\n+        // <<< LÓGICA CORRIGIDA AQUI >>>\r\n+        // Agora a engrenagem só aparece se o usuário for 'Proprietário' E se ele NÃO for o Super Admin.\r\n+        if (!isAdminLoggedIn && currentLoggedInUser && currentLoggedInUser.role === 'Proprietário') {\r\n+            settingsMenuContainer.classList.remove('hidden');\r\n+        } else {\r\n+            settingsMenuContainer.classList.add('hidden');\r\n+        }\r\n+\r\n+        updateBillsOrganizer();\r\n+    }\r\n+\r\n+    function showAdminDashboard() {\r\n+        hideAllScreens();\r\n+        adminDashboardScreen.classList.remove('hidden');\r\n+        renderCompanyList();\r\n+    }\r\n+\r\n+    function formatCnpj(value) {\r\n+        value = value.replace(/\\D/g, '');\r\n+        if (value.length > 14) value = value.slice(0, 14);\r\n+        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n+        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n+        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n+        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n+        return value;\r\n+    }\r\n+    // --- Lógica de Navegação do Calendário ---\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth--;\r\n+        if (currentMonth < 0) {\r\n+            currentMonth = 11;\r\n+            currentYear--;\r\n+        }\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth++;\r\n+        if (currentMonth > 11) {\r\n+            currentMonth = 0;\r\n+            currentYear++;\r\n+        }\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+    // --- Lógica de Autenticação e Outras Funções ---\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const cnpj = cnpjInput.value;\r\n+        const password = cnpjPasswordInput.value;\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/auth/login/company',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            cnpj,\r\n+                            password\r\n+                        }),\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInCompany = data.company;\r\n+            loggedInViaAdmin = false;\r\n+            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    adminLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const username = adminUsernameInput.value;\r\n+        const password = adminPasswordInput.value;\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            localStorage.setItem('authToken', data.token);\r\n+            isAdminLoggedIn = true;\r\n+            showToast('Login de Administrador bem-sucedido!', 'success');\r\n+            showAdminDashboard();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    userLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const username = userInput.value;\r\n+        const password = userPasswordInput.value;\r\n+        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n+            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/auth/login/user',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInUser = data.user;\r\n+            showMainApp();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    registerUserBtn.addEventListener('click', async function () {\r\n+        const username = userInput.value;\r\n+        const password = userPasswordInput.value;\r\n+        if (!username || !password) {\r\n+            showToast('Por favor, preencha o nome de usuário e a senha.', 'error');\r\n+            return;\r\n+        }\r\n+        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n+            showToast('Erro: Nenhuma empresa selecionada. Faça o login da empresa novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            userLoginForm.reset();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    backToAdminBtn.addEventListener('click', async () => {\r\n+        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username: 'Admin',\r\n+                            password: '@350239'\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) {\r\n+                showInitialLogin();\r\n+                throw new Error(data.message);\r\n+            }\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInUser = null;\r\n+            currentLoggedInCompany = null;\r\n+            loggedInViaAdmin = false;\r\n+            isAdminLoggedIn = true;\r\n+            showAdminDashboard();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    async function renderCompanyList() {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) return;\r\n+\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/companies', {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n+\r\n+            const companies = await response.json();\r\n+            companyListDiv.innerHTML = '';\r\n+\r\n+            if (companies.length === 0) {\r\n+                noCompaniesMessage.classList.remove('hidden');\r\n+            } else {\r\n+                noCompaniesMessage.classList.add('hidden');\r\n+                companies.forEach(company => {\r\n+                    const companyCard = document.createElement('div');\r\n+                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                    companyCard.innerHTML = `\r\n+                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                        <p class=\"text-gray-400 text-sm mt-2\">${company.usuarios.length} usuários cadastrados</p>\r\n+                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                        </div>\r\n+                    `;\r\n+                    companyListDiv.appendChild(companyCard);\r\n+                });\r\n+\r\n+                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n+                    button.addEventListener('click', async (e) => {\r\n+                        const companyId = e.target.dataset.companyId;\r\n+                        const token = localStorage.getItem('authToken');\r\n+                        try {\r\n+                            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n+                                headers: {\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                }\r\n+                            });\r\n+                            const companyDetails = await response.json();\r\n+                            if (!response.ok) throw new Error(companyDetails.message);\r\n+                            openCompanyDetailsModal(companyDetails);\r\n+                        } catch (error) {\r\n+                            showToast(error.message, 'error');\r\n+                        }\r\n+                    });\r\n+                });\r\n+\r\n+                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+                    button.addEventListener('click', async (e) => {\r\n+                        const companyId = e.target.dataset.companyId;\r\n+                        const token = localStorage.getItem('authToken');\r\n+                        try {\r\n+                            const companyResponse = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n+                                headers: {\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                }\r\n+                            });\r\n+                            const companyDetails = await companyResponse.json();\r\n+                            if (!companyResponse.ok) throw new Error(companyDetails.message);\r\n+                            if (companyDetails.usuarios.length === 0) {\r\n+                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n+                                return;\r\n+                            }\r\n+                            const userId = companyDetails.usuarios[0]._id;\r\n+                            const impersonateResponse = await fetch('http://localhost:5000/api/admin/impersonate', {\r\n+                                method: 'POST',\r\n+                                headers: {\r\n+                                    'Content-Type': 'application/json',\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                },\r\n+                                body: JSON.stringify({\r\n+                                    companyId,\r\n+                                    userId\r\n+                                })\r\n+                            });\r\n+                            const data = await impersonateResponse.json();\r\n+                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n+                            showToast(`Entrando na empresa ${data.company.nomeEmpresa}...`, 'success');\r\n+                            localStorage.setItem('authToken', data.token);\r\n+                            currentLoggedInCompany = data.company;\r\n+                            currentLoggedInUser = data.user;\r\n+                            loggedInViaAdmin = true;\r\n+                            showMainApp();\r\n+                        } catch (error) {\r\n+                            showToast(error.message, 'error');\r\n+                        }\r\n+                    });\r\n+                });\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+    createCompanyBtn.addEventListener('click', async () => {\r\n+        const nomeEmpresa = prompt(\"Digite o nome da nova empresa:\");\r\n+        if (!nomeEmpresa) return;\r\n+        const cnpj = prompt(\"Digite o CNPJ da nova empresa:\");\r\n+        if (!cnpj) return;\r\n+        const senhaEmpresa = prompt(\"Digite uma senha para a nova empresa:\");\r\n+        if (!senhaEmpresa) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/companies/register',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            nomeEmpresa,\r\n+                            cnpj,\r\n+                            senhaEmpresa\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || \"Não foi possível criar a empresa.\");\r\n+            showToast(data.message, 'success');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    // --- Lógica Principal do App de Boletos ---\r\n+    function initializeCalendarDate() {\r\n+        const today = new Date();\r\n+        currentMonth = today.getMonth();\r\n+        currentYear = today.getFullYear();\r\n+        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n+    }\r\n+    async function updateBillsOrganizer() {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/boletos',\r\n+                {\r\n+                    method: 'GET',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            if (!response.ok) throw new Error((await response.json()).message || \"Erro ao buscar boletos.\");\r\n+            userBoletos = await response.json();\r\n+            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+            totalBillsSpan.textContent = totalParcels;\r\n+            updateMonthlySummary();\r\n+            if (window.innerWidth >= 1024) {\r\n+                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n+                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n+                renderCalendar();\r\n+            }\r\n+            else {\r\n+                document.getElementById('billsOrganizer').classList.add('hidden');\r\n+                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n+                renderDailyBills();\r\n+            }\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    function updateMonthlySummary() {\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+            });\r\n+        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalNaoPago = totalMes - totalPago;\r\n+        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return dueDate < today && !parcel.paid;\r\n+            });\r\n+        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n+            {\r\n+                style: 'currency',\r\n+                currency: 'BRL'\r\n+            });\r\n+        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n+        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n+    }\r\n+\r\n+    function renderCalendar() {\r\n+        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+        const calendarDays = document.getElementById('calendarDays');\r\n+        calendarDays.innerHTML = '';\r\n+        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+        for (let i = 0; i < firstDayOfMonth; i++) {\r\n+            const emptyCell = document.createElement('div');\r\n+            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n+            calendarDays.appendChild(emptyCell);\r\n+        }\r\n+        for (let day = 1; day <= daysInMonth; day++) {\r\n+            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+            const dayCell = document.createElement('div');\r\n+            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n+            dayCell.dataset.date = dateStr;\r\n+            const dayHeader = document.createElement('div');\r\n+            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+            dayHeader.textContent = day;\r\n+            dayCell.appendChild(dayHeader);\r\n+            dayCell.addEventListener('click', (e) => {\r\n+                if (e.target.closest('.bill-card')) return;\r\n+                const clickedDate = e.currentTarget.dataset.date;\r\n+                clearBillForm();\r\n+                document.getElementById('dueDate').value = clickedDate;\r\n+                addBillModal.classList.remove('hidden');\r\n+            });\r\n+            userBoletos.forEach(bill => {\r\n+                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                    const parcelElement = document.createElement('div');\r\n+                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n+                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                    dayCell.appendChild(parcelElement);\r\n+                });\r\n+            });\r\n+            calendarDays.appendChild(dayCell);\r\n+        }\r\n+    }\r\n+\r\n+    function renderDailyBills() {\r\n+        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n+    }\r\n+\r\n+    function clearBillForm() {\r\n+        billForm.reset();\r\n+        installmentsPreview.classList.add('hidden');\r\n+        installmentsList.innerHTML = '';\r\n+        currentBill = {};\r\n+    }\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    billForm.addEventListener('submit', function (e) {\r\n+        e.preventDefault();\r\n+        const billName = document.getElementById('billName').value;\r\n+        const dueDate = document.getElementById('dueDate').value;\r\n+        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n+        const installments = parseInt(document.getElementById('installments').value);\r\n+        const description = document.getElementById('description').value;\r\n+        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+        const barcode = document.getElementById('barcode').value;\r\n+        if (!billName || !dueDate || !totalAmount || !installments) {\r\n+            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+            return;\r\n+        }\r\n+        currentBill = {\r\n+            name: billName,\r\n+            parcels: []\r\n+        };\r\n+        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+        installmentsList.innerHTML = '';\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        currentBill.parcels.push({\r\n+            id: `${Date.now()}-${i}`,\r\n+            number: i + 1,\r\n+            amount: parcelAmount,\r\n+            dueDate: dateForInput,\r\n+            paid: false,\r\n+            description: description,\r\n+            barcode: barcode\r\n+        });\r\n+\r\n+        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n+            day: '2-digit',\r\n+            month: '2-digit',\r\n+            year: 'numeric'\r\n+        });\r\n+        \r\n+        const parcelItem = document.createElement('div');\r\n+        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n+        \r\n+        parcelItem.innerHTML = `\r\n+            <div class=\"flex items-center space-x-4\">\r\n+                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n+                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n+            </div>\r\n+            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n+        `;\r\n+        \r\n+        installmentsList.appendChild(parcelItem);\r\n+    }\r\n+        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+            input.addEventListener('input', (e) => {\r\n+                const index = parseInt(e.target.dataset.parcelIndex);\r\n+                const newAmount = parseFloat(e.target.value) || 0;\r\n+                if (!isNaN(newAmount)) {\r\n+                    currentBill.parcels[index].amount = newAmount;\r\n+                    updatePreviewTotal();\r\n+                }\r\n+            });\r\n+            input.addEventListener('blur', (e) => {\r\n+                const newAmount = parseFloat(e.target.value) || 0;\r\n+                e.target.value = newAmount.toFixed(2);\r\n+            });\r\n+        });\r\n+        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+            input.addEventListener('change', (e) => {\r\n+                const index = parseInt(e.target.dataset.parcelIndex);\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            });\r\n+        });\r\n+        installmentsPreview.classList.remove('hidden');\r\n+        updatePreviewTotal();\r\n+    });\r\n+\r\n+    function updatePreviewTotal() {\r\n+        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n+        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+    }\r\n+    addToOrganizer.addEventListener('click', async function () {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        if (!currentBill || !currentBill.name) {\r\n+            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/boletos',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(currentBill)\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n+            showToast(data.message, 'success');\r\n+            addBillModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    // --- Lógica do Modal de Edição de Boletos ---\r\n+    function openBillModal(bill, parcel) {\r\n+        selectedParcel = {\r\n+            ...parcel,\r\n+            parentId: bill.id\r\n+        };\r\n+        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n+        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n+        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n+        modalBillBarcodeInput.value = parcel.barcode || '';\r\n+        modalBillPaidCheckbox.checked = parcel.paid;\r\n+        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n+            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n+        }\r\n+        else {\r\n+            showFullScreenBarcodeBtn.classList.add('hidden');\r\n+        }\r\n+        billModal.classList.remove('hidden');\r\n+    }\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    billModal.addEventListener('click', (e) => {\r\n+        if (e.target === billModal) billModal.classList.add('hidden');\r\n+    });\r\n+    saveBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        const updatedData = {\r\n+            paid: document.getElementById('modalBillPaid').checked,\r\n+            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n+            dueDate: document.getElementById('modalBillDate').value,\r\n+            description: document.getElementById('modalBillDescription').value,\r\n+            barcode: document.getElementById('modalBillBarcode').value\r\n+        };\r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n+                {\r\n+                    method: 'PATCH',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(updatedData)\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Parcela atualizada com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    deleteBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel) return;\r\n+        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Parcela excluída com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+deleteEntireBillBtn.addEventListener('click', async () => {\r\n+    if (!selectedParcel || !selectedParcel.parentId) {\r\n+        showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n+        return;\r\n+    }\r\n+    \r\n+    if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n+        return;\r\n+    }\r\n+    \r\n+    const token = localStorage.getItem('authToken');\r\n+    const boletoId = selectedParcel.parentId;\r\n+    \r\n+    try {\r\n+        const response = await fetch(`http://localhost:5000/api/boletos/${boletoId}`, {\r\n+            method: 'DELETE',\r\n+            headers: {\r\n+                'Authorization': `Bearer ${token}`\r\n+            }\r\n+        });\r\n+        \r\n+        const data = await response.json();\r\n+        if (!response.ok) {\r\n+            throw new Error(data.message);\r\n+        }\r\n+        \r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        updateBillsOrganizer();\r\n+        \r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    }\r\n+});\r\n+    // --- Lógica do Modal de Detalhes da Empresa ---\r\n+function openCompanyDetailsModal(company) {\r\n+    selectedCompanyForAdmin = company;\r\n+    modalCompanyName.textContent = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (company.usuarios.length === 0) {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    } else {\r\n+        // Define a lista de papéis disponíveis baseado em quem está logado\r\n+        const assignableRoles = isAdminLoggedIn ?\r\n+            ['Proprietário', 'Gerente', 'Funcionário'] :\r\n+            ['Gerente', 'Funcionário'];\r\n+\r\n+        company.usuarios.forEach(user => {\r\n+            const userItem = document.createElement('div');\r\n+            userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n+\r\n+            let roleDisplay = '';\r\n+\r\n+            // Se o Super Admin estiver logado, TODOS os usuários são editáveis.\r\n+            const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n+\r\n+            if (isEditable) {\r\n+                const optionsHTML = assignableRoles.map(role => {\r\n+                    // Impede que um Proprietário crie outro Proprietário no dropdown\r\n+                    if (!isAdminLoggedIn && role === 'Proprietário') {\r\n+                        return '';\r\n+                    }\r\n+                    return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n+                }).join('');\r\n+\r\n+                let finalOptions = optionsHTML;\r\n+                // Garante que a opção 'Proprietário' apareça para um usuário que já é proprietário\r\n+                if (isAdminLoggedIn && user.role === 'Proprietário' && !assignableRoles.includes('Proprietário')) {\r\n+                    finalOptions = `<option value=\"Proprietário\" selected>Proprietário</option>` + optionsHTML;\r\n+                }\r\n+\r\n+                roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${finalOptions}</select>`;\r\n+            } else {\r\n+                // Mostra um texto fixo para o Proprietário quando não é o Super Admin que está vendo.\r\n+                roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n+            }\r\n+\r\n+            userItem.innerHTML = `\r\n+                <div class=\"flex items-center space-x-3\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    ${roleDisplay}\r\n+                </div>\r\n+                <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+            `;\r\n+            modalCompanyUsers.appendChild(userItem);\r\n+        });\r\n+    }\r\n+\r\n+\r\n+\r\n+    // Anexa os listeners aos botões e selects criados\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+            handleRemoveUser(companyId, userId);\r\n+        });\r\n+    });\r\n+\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const token = localStorage.getItem('authToken');\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            try {\r\n+                const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}/role`, {\r\n+                    method: 'PATCH',\r\n+                    headers: {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify({\r\n+                        role: newRole\r\n+                    })\r\n+                });\r\n+\r\n+                const data = await response.json();\r\n+                if (!response.ok) {\r\n+                    throw new Error(data.message);\r\n+                }\r\n+\r\n+                showToast(data.message, 'success');\r\n+                // Atualiza o estado local para refletir a mudança sem precisar recarregar\r\n+                const userToUpdate = selectedCompanyForAdmin.usuarios.find(u => u._id === userId);\r\n+                if(userToUpdate) {\r\n+                    userToUpdate.role = newRole;\r\n+                }\r\n+                \r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+                // Em caso de erro, recarrega o modal para reverter a mudança visual na tela\r\n+                fetchCompanyDetailsAndOpenModal(companyId);\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+    async function handleRemoveUser(companyId, userId) {\r\n+        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+    addUserBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+        const username = prompt(\"Digite o nome do novo usuário:\");\r\n+        if (!username) return;\r\n+        const password = prompt(`Digite a senha para o usuário \"${username}\":`);\r\n+        if (!password) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: selectedCompanyForAdmin._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    deleteCompanyBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n+            return;\r\n+        }\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+        const newPassword = modalCompanyPasswordInput.value;\r\n+        if (!newPassword) {\r\n+            showToast(\"Digite uma nova senha para alterar.\", \"info\");\r\n+            return;\r\n+        }\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n+                {\r\n+                    method: 'PATCH',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            newPassword: newPassword\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    companyDetailsModal.addEventListener('click', (e) => {\r\n+        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n+    });\r\n+    // --- Inicialização ---\r\n+    initializeCalendarDate();\r\n+    showInitialLogin();\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752245266001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,8 @@\n     closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n     barcodeFullScreenModal.addEventListener('click', (e) => {\r\n         if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n     });\r\n-    \r\n     // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n     settingsBtn.addEventListener('click', (event) => {\r\n         event.stopPropagation();\r\n         settingsDropdown.classList.toggle('hidden');\r\n@@ -169,8 +168,26 @@\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n \r\n+            // --- Lógica para os Itens do Menu da Engrenagem ---\r\n+\r\n+    // Função unificada que será chamada por qualquer link do menu\r\n+    const openManagementModal = (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        \r\n+        // Pega o ID da empresa do usuário que está logado\r\n+        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+\r\n+        if (companyId) {\r\n+            // Se encontrou um ID, busca os detalhes e abre o modal de gerenciamento\r\n+            fetchCompanyDetailsAndOpenModal(companyId);\r\n+        } else {\r\n+            showToast('Erro: Não foi possível identificar a empresa.', 'error');\r\n+        }\r\n+    };\r\n+\r\n     // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n     settingsBtn.addEventListener('click', (event) => {\r\n         event.stopPropagation();\r\n         settingsDropdown.classList.toggle('hidden');\r\n@@ -1258,1290 +1275,5 @@\n     });\r\n     // --- Inicialização ---\r\n     initializeCalendarDate();\r\n     showInitialLogin();\r\n-});\n-document.addEventListener('DOMContentLoaded', function() {\r\n-    // --- Elementos HTML (Declarações completas) ---\r\n-    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-    const cnpjInput = document.getElementById('cnpjInput');\r\n-    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-    const adminLoginForm = document.getElementById('adminLoginForm');\r\n-    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-    const companyListDiv = document.getElementById('companyList');\r\n-    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-    const userLoginScreen = document.getElementById('userLoginScreen');\r\n-    const userLoginForm = document.getElementById('userLoginForm');\r\n-    const userInput = document.getElementById('userInput');\r\n-    const userPasswordInput = document.getElementById('userPasswordInput');\r\n-    const registerUserBtn = document.getElementById('registerUserBtn');\r\n-    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-    const welcomeUserText = document.getElementById('welcomeUserText');\r\n-    const mainAppContent = document.getElementById('mainAppContent');\r\n-    const toastMessage = document.getElementById('toastMessage');\r\n-    const logoutBtn = document.getElementById('logoutBtn');\r\n-    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-    const addBillModal = document.getElementById('addBillModal');\r\n-    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n-    const modalCompanyName = document.getElementById('modalCompanyName');\r\n-    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-    const addUserBtn = document.getElementById('addUserBtn');\r\n-    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-    const billModal = document.getElementById('billModal');\r\n-    const closeModalBtn = document.getElementById('closeModal');\r\n-    const saveBillBtn = document.getElementById('saveBill');\r\n-    const deleteBillBtn = document.getElementById('deleteBill');\r\n-    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n-    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n-    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n-    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n-    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-    const settingsBtn = document.getElementById('settingsBtn');\r\n-    const settingsDropdown = document.getElementById('settingsDropdown');\r\n-    const menuEmpresa = document.getElementById('menuEmpresa');\r\n-    const menuUsuarios = document.getElementById('menuUsuarios');\r\n-    const menuPermissoes = document.getElementById('menuPermissoes');\r\n-    const permissionsModal = document.getElementById('permissionsModal');\r\n-    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-    const permissionsContainer = document.getElementById('permissionsContainer');\r\n-    const billForm = document.getElementById('billForm');\r\n-    const installmentsPreview = document.getElementById('installmentsPreview');\r\n-    const installmentsList = document.getElementById('installmentsList');\r\n-    const addToOrganizer = document.getElementById('addToOrganizer');\r\n-    const totalBillsSpan = document.getElementById('totalBills');\r\n-    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-    const clearFormBtn = document.getElementById('clearFormBtn');\r\n-    const prevMonthBtn = document.getElementById('prevMonth');\r\n-    const nextMonthBtn = document.getElementById('nextMonth');\r\n-\r\n-    // --- Variáveis de Dados e Estado ---\r\n-    let currentLoggedInCompany = null;\r\n-    let currentLoggedInUser = null;\r\n-    let isAdminLoggedIn = false;\r\n-    let loggedInViaAdmin = false;\r\n-    let selectedCompanyForAdmin = null;\r\n-    let currentBill = {};\r\n-    let selectedParcel = null;\r\n-    let userBoletos = [];\r\n-    let currentMonth, currentYear;\r\n-\r\n-\r\n-    // --- Lógica para o Modal de Adicionar Boletos ---\r\n-    openAddBillModalBtn.addEventListener('click', () => {\r\n-        clearBillForm();\r\n-        addBillModal.classList.remove('hidden');\r\n-    });\r\n-    closeAddBillModalBtn.addEventListener('click', () => {\r\n-        addBillModal.classList.add('hidden');\r\n-    });\r\n-    addBillModal.addEventListener('click', (e) => {\r\n-        if (e.target === addBillModal) {\r\n-            addBillModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n-    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n-        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n-        if (!originalBarcode) return;\r\n-        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n-        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n-            try {\r\n-                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n-                    {\r\n-                        format: \"ITF\",\r\n-                        width: 1.5,\r\n-                        height: 80,\r\n-                        displayValue: true,\r\n-                        fontSize: 20,\r\n-                        lineColor: \"#000\",\r\n-                        background: \"#FFF\"\r\n-                    });\r\n-                barcodeFullScreenModal.classList.remove('hidden');\r\n-            }\r\n-            catch (e) {\r\n-                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n-            }\r\n-        }\r\n-        else {\r\n-            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n-        }\r\n-    });\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n-        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n-    });\r\n-    // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n-    settingsBtn.addEventListener('click', (event) => {\r\n-        event.stopPropagation();\r\n-        settingsDropdown.classList.toggle('hidden');\r\n-    });\r\n-    // Adiciona um listener na janela inteira para fechar o dropdown se o usuário clicar fora dele\r\n-    window.addEventListener('click', () => {\r\n-        if (!settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para o item \"Gerenciar Usuários\"\r\n-    menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        const companyId = isAdminLoggedIn ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n-        if (companyId) fetchCompanyDetailsAndOpenModal(companyId);\r\n-    });\r\n-\r\n-    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n-                {\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const companyDetails = await response.json();\r\n-            if (!response.ok) throw new Error(companyDetails.message);\r\n-            openCompanyDetailsModal(companyDetails);\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-            // --- Lógica para os Itens do Menu da Engrenagem ---\r\n-\r\n-    // Função unificada que será chamada por qualquer link do menu\r\n-    const openManagementModal = (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        \r\n-        // Pega o ID da empresa do usuário que está logado\r\n-        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-\r\n-        if (companyId) {\r\n-            // Se encontrou um ID, busca os detalhes e abre o modal de gerenciamento\r\n-            fetchCompanyDetailsAndOpenModal(companyId);\r\n-        } else {\r\n-            showToast('Erro: Não foi possível identificar a empresa.', 'error');\r\n-        }\r\n-    };\r\n-\r\n-    // --- Lógica para o Modal de Permissões ---\r\n-    menuPermissoes.addEventListener('click', async (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/permissions', {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const permissions = await response.json();\r\n-            if (!response.ok) throw new Error(permissions.message);\r\n-\r\n-            // Preenche o formulário com as permissões atuais\r\n-            document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-            document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-            document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-            document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-            permissionsModal.classList.remove('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal de permissões\r\n-    closePermissionsModal.addEventListener('click', () => {\r\n-        permissionsModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // Listener para salvar as alterações de permissão automaticamente\r\n-    permissionsContainer.addEventListener('change', async (e) => {\r\n-        const target = e.target;\r\n-        if (target.type !== 'radio') return;\r\n-\r\n-        const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n-        const permissionKey = target.name.split('-')[1]; // Ex: 'canUpdate' ou 'canDelete'\r\n-        const permissionValue = target.value;\r\n-\r\n-        const payload = {\r\n-            roleToUpdate,\r\n-            permissions: { [permissionKey]: permissionValue }\r\n-        };\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/permissions', {\r\n-                method: 'PATCH',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(payload)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-        } catch (error) {\r\n-            showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n-    function closeQuickAddModal() {\r\n-        quickUserAddModal.classList.add('hidden');\r\n-    }\r\n-    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n-    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n-    quickUserAddForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const username = document.getElementById('quickAddUsername').value;\r\n-        const password = document.getElementById('quickAddPassword').value;\r\n-        if (!currentLoggedInCompany) {\r\n-            showToast('Erro: Empresa não identificada.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            closeQuickAddModal();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    // --- Funções de Utilitário e de Tela ---\r\n-    function showToast(message, type = 'success') {\r\n-        toastMessage.textContent = message;\r\n-        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n-        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n-        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n-        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n-        toastMessage.classList.remove('hidden');\r\n-        setTimeout(() => {\r\n-            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n-            setTimeout(() => {\r\n-                toastMessage.classList.add('hidden');\r\n-                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n-            }, 300);\r\n-        }, 3000);\r\n-    }\r\n-\r\n-    function hideAllScreens() {\r\n-        initialLoginScreen.classList.add('hidden');\r\n-        cnpjLoginScreen.classList.add('hidden');\r\n-        adminLoginScreen.classList.add('hidden');\r\n-        userLoginScreen.classList.add('hidden');\r\n-        adminDashboardScreen.classList.add('hidden');\r\n-        mainAppContent.classList.add('hidden');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        addBillModal.classList.add('hidden');\r\n-        billModal.classList.add('hidden');\r\n-        barcodeFullScreenModal.classList.add('hidden');\r\n-        quickUserAddModal.classList.add('hidden');\r\n-    }\r\n-\r\n-    function showInitialLogin() {\r\n-        hideAllScreens();\r\n-        initialLoginScreen.classList.remove('hidden');\r\n-        localStorage.removeItem('authToken');\r\n-        currentLoggedInCompany = null;\r\n-        currentLoggedInUser = null;\r\n-        isAdminLoggedIn = false;\r\n-        loggedInViaAdmin = false;\r\n-    }\r\n-\r\n-    function showCnpjLogin() {\r\n-        hideAllScreens();\r\n-        cnpjLoginForm.reset();\r\n-        cnpjLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showAdminLogin() {\r\n-        hideAllScreens();\r\n-        adminLoginForm.reset();\r\n-        adminLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showUserLogin(companyName) {\r\n-        hideAllScreens();\r\n-        userLoginForm.reset();\r\n-        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-        userLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showMainApp() {\r\n-        hideAllScreens();\r\n-        mainAppContent.classList.remove('hidden');\r\n-\r\n-        if (loggedInViaAdmin) {\r\n-            backToAdminBtn.classList.remove('hidden');\r\n-        } else {\r\n-            backToAdminBtn.classList.add('hidden');\r\n-        }\r\n-        \r\n-        // <<< LÓGICA CORRIGIDA AQUI >>>\r\n-        // Agora a engrenagem só aparece se o usuário for 'Proprietário' E se ele NÃO for o Super Admin.\r\n-        if (!isAdminLoggedIn && currentLoggedInUser && currentLoggedInUser.role === 'Proprietário') {\r\n-            settingsMenuContainer.classList.remove('hidden');\r\n-        } else {\r\n-            settingsMenuContainer.classList.add('hidden');\r\n-        }\r\n-\r\n-        updateBillsOrganizer();\r\n-    }\r\n-\r\n-    function showAdminDashboard() {\r\n-        hideAllScreens();\r\n-        adminDashboardScreen.classList.remove('hidden');\r\n-        renderCompanyList();\r\n-    }\r\n-\r\n-    function formatCnpj(value) {\r\n-        value = value.replace(/\\D/g, '');\r\n-        if (value.length > 14) value = value.slice(0, 14);\r\n-        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n-        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n-        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n-        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n-        return value;\r\n-    }\r\n-    // --- Lógica de Navegação do Calendário ---\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth--;\r\n-        if (currentMonth < 0) {\r\n-            currentMonth = 11;\r\n-            currentYear--;\r\n-        }\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth++;\r\n-        if (currentMonth > 11) {\r\n-            currentMonth = 0;\r\n-            currentYear++;\r\n-        }\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-    // --- Lógica de Autenticação e Outras Funções ---\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const cnpj = cnpjInput.value;\r\n-        const password = cnpjPasswordInput.value;\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/company',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            cnpj,\r\n-                            password\r\n-                        }),\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInCompany = data.company;\r\n-            loggedInViaAdmin = false;\r\n-            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    adminLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const username = adminUsernameInput.value;\r\n-        const password = adminPasswordInput.value;\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            localStorage.setItem('authToken', data.token);\r\n-            isAdminLoggedIn = true;\r\n-            showToast('Login de Administrador bem-sucedido!', 'success');\r\n-            showAdminDashboard();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    userLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const username = userInput.value;\r\n-        const password = userPasswordInput.value;\r\n-        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n-            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/user',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInUser = data.user;\r\n-            showMainApp();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    registerUserBtn.addEventListener('click', async function () {\r\n-        const username = userInput.value;\r\n-        const password = userPasswordInput.value;\r\n-        if (!username || !password) {\r\n-            showToast('Por favor, preencha o nome de usuário e a senha.', 'error');\r\n-            return;\r\n-        }\r\n-        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n-            showToast('Erro: Nenhuma empresa selecionada. Faça o login da empresa novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            userLoginForm.reset();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    backToAdminBtn.addEventListener('click', async () => {\r\n-        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username: 'Admin',\r\n-                            password: '@350239'\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) {\r\n-                showInitialLogin();\r\n-                throw new Error(data.message);\r\n-            }\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInUser = null;\r\n-            currentLoggedInCompany = null;\r\n-            loggedInViaAdmin = false;\r\n-            isAdminLoggedIn = true;\r\n-            showAdminDashboard();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    async function renderCompanyList() {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) return;\r\n-\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/companies', {\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-\r\n-            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n-\r\n-            const companies = await response.json();\r\n-            companyListDiv.innerHTML = '';\r\n-\r\n-            if (companies.length === 0) {\r\n-                noCompaniesMessage.classList.remove('hidden');\r\n-            } else {\r\n-                noCompaniesMessage.classList.add('hidden');\r\n-                companies.forEach(company => {\r\n-                    const companyCard = document.createElement('div');\r\n-                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                    companyCard.innerHTML = `\r\n-                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                        <p class=\"text-gray-400 text-sm mt-2\">${company.usuarios.length} usuários cadastrados</p>\r\n-                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                        </div>\r\n-                    `;\r\n-                    companyListDiv.appendChild(companyCard);\r\n-                });\r\n-\r\n-                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n-                    button.addEventListener('click', async (e) => {\r\n-                        const companyId = e.target.dataset.companyId;\r\n-                        const token = localStorage.getItem('authToken');\r\n-                        try {\r\n-                            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n-                                headers: {\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                }\r\n-                            });\r\n-                            const companyDetails = await response.json();\r\n-                            if (!response.ok) throw new Error(companyDetails.message);\r\n-                            openCompanyDetailsModal(companyDetails);\r\n-                        } catch (error) {\r\n-                            showToast(error.message, 'error');\r\n-                        }\r\n-                    });\r\n-                });\r\n-\r\n-                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-                    button.addEventListener('click', async (e) => {\r\n-                        const companyId = e.target.dataset.companyId;\r\n-                        const token = localStorage.getItem('authToken');\r\n-                        try {\r\n-                            const companyResponse = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n-                                headers: {\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                }\r\n-                            });\r\n-                            const companyDetails = await companyResponse.json();\r\n-                            if (!companyResponse.ok) throw new Error(companyDetails.message);\r\n-                            if (companyDetails.usuarios.length === 0) {\r\n-                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n-                                return;\r\n-                            }\r\n-                            const userId = companyDetails.usuarios[0]._id;\r\n-                            const impersonateResponse = await fetch('http://localhost:5000/api/admin/impersonate', {\r\n-                                method: 'POST',\r\n-                                headers: {\r\n-                                    'Content-Type': 'application/json',\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                },\r\n-                                body: JSON.stringify({\r\n-                                    companyId,\r\n-                                    userId\r\n-                                })\r\n-                            });\r\n-                            const data = await impersonateResponse.json();\r\n-                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n-                            showToast(`Entrando na empresa ${data.company.nomeEmpresa}...`, 'success');\r\n-                            localStorage.setItem('authToken', data.token);\r\n-                            currentLoggedInCompany = data.company;\r\n-                            currentLoggedInUser = data.user;\r\n-                            loggedInViaAdmin = true;\r\n-                            showMainApp();\r\n-                        } catch (error) {\r\n-                            showToast(error.message, 'error');\r\n-                        }\r\n-                    });\r\n-                });\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-    createCompanyBtn.addEventListener('click', async () => {\r\n-        const nomeEmpresa = prompt(\"Digite o nome da nova empresa:\");\r\n-        if (!nomeEmpresa) return;\r\n-        const cnpj = prompt(\"Digite o CNPJ da nova empresa:\");\r\n-        if (!cnpj) return;\r\n-        const senhaEmpresa = prompt(\"Digite uma senha para a nova empresa:\");\r\n-        if (!senhaEmpresa) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/companies/register',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            nomeEmpresa,\r\n-                            cnpj,\r\n-                            senhaEmpresa\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || \"Não foi possível criar a empresa.\");\r\n-            showToast(data.message, 'success');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    // --- Lógica Principal do App de Boletos ---\r\n-    function initializeCalendarDate() {\r\n-        const today = new Date();\r\n-        currentMonth = today.getMonth();\r\n-        currentYear = today.getFullYear();\r\n-        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n-    }\r\n-    async function updateBillsOrganizer() {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/boletos',\r\n-                {\r\n-                    method: 'GET',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            if (!response.ok) throw new Error((await response.json()).message || \"Erro ao buscar boletos.\");\r\n-            userBoletos = await response.json();\r\n-            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-            totalBillsSpan.textContent = totalParcels;\r\n-            updateMonthlySummary();\r\n-            if (window.innerWidth >= 1024) {\r\n-                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n-                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n-                renderCalendar();\r\n-            }\r\n-            else {\r\n-                document.getElementById('billsOrganizer').classList.add('hidden');\r\n-                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n-                renderDailyBills();\r\n-            }\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    function updateMonthlySummary() {\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n-            .filter(parcel => {\r\n-                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-            });\r\n-        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const totalNaoPago = totalMes - totalPago;\r\n-        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-            .filter(parcel => {\r\n-                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                return dueDate < today && !parcel.paid;\r\n-            });\r\n-        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n-            {\r\n-                style: 'currency',\r\n-                currency: 'BRL'\r\n-            });\r\n-        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n-        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n-    }\r\n-\r\n-    function renderCalendar() {\r\n-        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-        const calendarDays = document.getElementById('calendarDays');\r\n-        calendarDays.innerHTML = '';\r\n-        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-        for (let i = 0; i < firstDayOfMonth; i++) {\r\n-            const emptyCell = document.createElement('div');\r\n-            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n-            calendarDays.appendChild(emptyCell);\r\n-        }\r\n-        for (let day = 1; day <= daysInMonth; day++) {\r\n-            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-            const dayCell = document.createElement('div');\r\n-            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n-            dayCell.dataset.date = dateStr;\r\n-            const dayHeader = document.createElement('div');\r\n-            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-            dayHeader.textContent = day;\r\n-            dayCell.appendChild(dayHeader);\r\n-            dayCell.addEventListener('click', (e) => {\r\n-                if (e.target.closest('.bill-card')) return;\r\n-                const clickedDate = e.currentTarget.dataset.date;\r\n-                clearBillForm();\r\n-                document.getElementById('dueDate').value = clickedDate;\r\n-                addBillModal.classList.remove('hidden');\r\n-            });\r\n-            userBoletos.forEach(bill => {\r\n-                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                    const parcelElement = document.createElement('div');\r\n-                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n-                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n-                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                    dayCell.appendChild(parcelElement);\r\n-                });\r\n-            });\r\n-            calendarDays.appendChild(dayCell);\r\n-        }\r\n-    }\r\n-\r\n-    function renderDailyBills() {\r\n-        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n-    }\r\n-\r\n-    function clearBillForm() {\r\n-        billForm.reset();\r\n-        installmentsPreview.classList.add('hidden');\r\n-        installmentsList.innerHTML = '';\r\n-        currentBill = {};\r\n-    }\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    billForm.addEventListener('submit', function (e) {\r\n-        e.preventDefault();\r\n-        const billName = document.getElementById('billName').value;\r\n-        const dueDate = document.getElementById('dueDate').value;\r\n-        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n-        const installments = parseInt(document.getElementById('installments').value);\r\n-        const description = document.getElementById('description').value;\r\n-        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-        const barcode = document.getElementById('barcode').value;\r\n-        if (!billName || !dueDate || !totalAmount || !installments) {\r\n-            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-            return;\r\n-        }\r\n-        currentBill = {\r\n-            name: billName,\r\n-            parcels: []\r\n-        };\r\n-        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-        installmentsList.innerHTML = '';\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        currentBill.parcels.push({\r\n-            id: `${Date.now()}-${i}`,\r\n-            number: i + 1,\r\n-            amount: parcelAmount,\r\n-            dueDate: dateForInput,\r\n-            paid: false,\r\n-            description: description,\r\n-            barcode: barcode\r\n-        });\r\n-\r\n-        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n-            day: '2-digit',\r\n-            month: '2-digit',\r\n-            year: 'numeric'\r\n-        });\r\n-        \r\n-        const parcelItem = document.createElement('div');\r\n-        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n-        \r\n-        parcelItem.innerHTML = `\r\n-            <div class=\"flex items-center space-x-4\">\r\n-                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n-                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n-            </div>\r\n-            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n-        `;\r\n-        \r\n-        installmentsList.appendChild(parcelItem);\r\n-    }\r\n-        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-            input.addEventListener('input', (e) => {\r\n-                const index = parseInt(e.target.dataset.parcelIndex);\r\n-                const newAmount = parseFloat(e.target.value) || 0;\r\n-                if (!isNaN(newAmount)) {\r\n-                    currentBill.parcels[index].amount = newAmount;\r\n-                    updatePreviewTotal();\r\n-                }\r\n-            });\r\n-            input.addEventListener('blur', (e) => {\r\n-                const newAmount = parseFloat(e.target.value) || 0;\r\n-                e.target.value = newAmount.toFixed(2);\r\n-            });\r\n-        });\r\n-        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-            input.addEventListener('change', (e) => {\r\n-                const index = parseInt(e.target.dataset.parcelIndex);\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            });\r\n-        });\r\n-        installmentsPreview.classList.remove('hidden');\r\n-        updatePreviewTotal();\r\n-    });\r\n-\r\n-    function updatePreviewTotal() {\r\n-        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n-        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-    }\r\n-    addToOrganizer.addEventListener('click', async function () {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        if (!currentBill || !currentBill.name) {\r\n-            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/boletos',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(currentBill)\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n-            showToast(data.message, 'success');\r\n-            addBillModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    // --- Lógica do Modal de Edição de Boletos ---\r\n-    function openBillModal(bill, parcel) {\r\n-        selectedParcel = {\r\n-            ...parcel,\r\n-            parentId: bill.id\r\n-        };\r\n-        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n-        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n-        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n-        modalBillBarcodeInput.value = parcel.barcode || '';\r\n-        modalBillPaidCheckbox.checked = parcel.paid;\r\n-        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n-            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n-        }\r\n-        else {\r\n-            showFullScreenBarcodeBtn.classList.add('hidden');\r\n-        }\r\n-        billModal.classList.remove('hidden');\r\n-    }\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    billModal.addEventListener('click', (e) => {\r\n-        if (e.target === billModal) billModal.classList.add('hidden');\r\n-    });\r\n-    saveBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        const updatedData = {\r\n-            paid: document.getElementById('modalBillPaid').checked,\r\n-            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n-            dueDate: document.getElementById('modalBillDate').value,\r\n-            description: document.getElementById('modalBillDescription').value,\r\n-            barcode: document.getElementById('modalBillBarcode').value\r\n-        };\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n-                {\r\n-                    method: 'PATCH',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(updatedData)\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Parcela atualizada com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    deleteBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel) return;\r\n-        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Parcela excluída com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-deleteEntireBillBtn.addEventListener('click', async () => {\r\n-    if (!selectedParcel || !selectedParcel.parentId) {\r\n-        showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n-        return;\r\n-    }\r\n-    \r\n-    if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n-        return;\r\n-    }\r\n-    \r\n-    const token = localStorage.getItem('authToken');\r\n-    const boletoId = selectedParcel.parentId;\r\n-    \r\n-    try {\r\n-        const response = await fetch(`http://localhost:5000/api/boletos/${boletoId}`, {\r\n-            method: 'DELETE',\r\n-            headers: {\r\n-                'Authorization': `Bearer ${token}`\r\n-            }\r\n-        });\r\n-        \r\n-        const data = await response.json();\r\n-        if (!response.ok) {\r\n-            throw new Error(data.message);\r\n-        }\r\n-        \r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        updateBillsOrganizer();\r\n-        \r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    }\r\n-});\r\n-    // --- Lógica do Modal de Detalhes da Empresa ---\r\n-function openCompanyDetailsModal(company) {\r\n-    selectedCompanyForAdmin = company;\r\n-    modalCompanyName.textContent = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (company.usuarios.length === 0) {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    } else {\r\n-        // Define a lista de papéis disponíveis baseado em quem está logado\r\n-        const assignableRoles = isAdminLoggedIn ?\r\n-            ['Proprietário', 'Gerente', 'Funcionário'] :\r\n-            ['Gerente', 'Funcionário'];\r\n-\r\n-        company.usuarios.forEach(user => {\r\n-            const userItem = document.createElement('div');\r\n-            userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n-\r\n-            let roleDisplay = '';\r\n-\r\n-            // Se o Super Admin estiver logado, TODOS os usuários são editáveis.\r\n-            const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n-\r\n-            if (isEditable) {\r\n-                const optionsHTML = assignableRoles.map(role => {\r\n-                    // Impede que um Proprietário crie outro Proprietário no dropdown\r\n-                    if (!isAdminLoggedIn && role === 'Proprietário') {\r\n-                        return '';\r\n-                    }\r\n-                    return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n-                }).join('');\r\n-\r\n-                let finalOptions = optionsHTML;\r\n-                // Garante que a opção 'Proprietário' apareça para um usuário que já é proprietário\r\n-                if (isAdminLoggedIn && user.role === 'Proprietário' && !assignableRoles.includes('Proprietário')) {\r\n-                    finalOptions = `<option value=\"Proprietário\" selected>Proprietário</option>` + optionsHTML;\r\n-                }\r\n-\r\n-                roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${finalOptions}</select>`;\r\n-            } else {\r\n-                // Mostra um texto fixo para o Proprietário quando não é o Super Admin que está vendo.\r\n-                roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n-            }\r\n-\r\n-            userItem.innerHTML = `\r\n-                <div class=\"flex items-center space-x-3\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    ${roleDisplay}\r\n-                </div>\r\n-                <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-            `;\r\n-            modalCompanyUsers.appendChild(userItem);\r\n-        });\r\n-    }\r\n-\r\n-\r\n-\r\n-    // Anexa os listeners aos botões e selects criados\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-            handleRemoveUser(companyId, userId);\r\n-        });\r\n-    });\r\n-\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const token = localStorage.getItem('authToken');\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            try {\r\n-                const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}/role`, {\r\n-                    method: 'PATCH',\r\n-                    headers: {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify({\r\n-                        role: newRole\r\n-                    })\r\n-                });\r\n-\r\n-                const data = await response.json();\r\n-                if (!response.ok) {\r\n-                    throw new Error(data.message);\r\n-                }\r\n-\r\n-                showToast(data.message, 'success');\r\n-                // Atualiza o estado local para refletir a mudança sem precisar recarregar\r\n-                const userToUpdate = selectedCompanyForAdmin.usuarios.find(u => u._id === userId);\r\n-                if(userToUpdate) {\r\n-                    userToUpdate.role = newRole;\r\n-                }\r\n-                \r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-                // Em caso de erro, recarrega o modal para reverter a mudança visual na tela\r\n-                fetchCompanyDetailsAndOpenModal(companyId);\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-    async function handleRemoveUser(companyId, userId) {\r\n-        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-    addUserBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-        const username = prompt(\"Digite o nome do novo usuário:\");\r\n-        if (!username) return;\r\n-        const password = prompt(`Digite a senha para o usuário \"${username}\":`);\r\n-        if (!password) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: selectedCompanyForAdmin._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    deleteCompanyBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n-            return;\r\n-        }\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-        const newPassword = modalCompanyPasswordInput.value;\r\n-        if (!newPassword) {\r\n-            showToast(\"Digite uma nova senha para alterar.\", \"info\");\r\n-            return;\r\n-        }\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n-                {\r\n-                    method: 'PATCH',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            newPassword: newPassword\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    companyDetailsModal.addEventListener('click', (e) => {\r\n-        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n-    });\r\n-    // --- Inicialização ---\r\n-    initializeCalendarDate();\r\n-    showInitialLogin();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752245509291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,26 +168,8 @@\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n \r\n-            // --- Lógica para os Itens do Menu da Engrenagem ---\r\n-\r\n-    // Função unificada que será chamada por qualquer link do menu\r\n-    const openManagementModal = (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        \r\n-        // Pega o ID da empresa do usuário que está logado\r\n-        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-\r\n-        if (companyId) {\r\n-            // Se encontrou um ID, busca os detalhes e abre o modal de gerenciamento\r\n-            fetchCompanyDetailsAndOpenModal(companyId);\r\n-        } else {\r\n-            showToast('Erro: Não foi possível identificar a empresa.', 'error');\r\n-        }\r\n-    };\r\n-\r\n     // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n     settingsBtn.addEventListener('click', (event) => {\r\n         event.stopPropagation();\r\n         settingsDropdown.classList.toggle('hidden');\r\n"
                },
                {
                    "date": 1752245565271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,60 +168,85 @@\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n \r\n-    // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n-    settingsBtn.addEventListener('click', (event) => {\r\n-        event.stopPropagation();\r\n-        settingsDropdown.classList.toggle('hidden');\r\n-    });\r\n+// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n+settingsBtn.addEventListener('click', (event) => {\r\n+    event.stopPropagation();\r\n+    settingsDropdown.classList.toggle('hidden');\r\n+});\r\n+window.addEventListener('click', () => {\r\n+    if (!settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n \r\n-    window.addEventListener('click', () => {\r\n-        if (!settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n+// Listener para o item \"Gerenciar Usuários\"\r\n+menuUsuarios.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    const companyId = isAdminLoggedIn ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n+    if (companyId) fetchCompanyDetailsAndOpenModal(companyId);\r\n+});\r\n \r\n-    // Função auxiliar para os links de Empresa e Usuários\r\n-    const openCompanyDetails = (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-        if (companyId) {\r\n-            fetchCompanyDetailsAndOpenModal(companyId);\r\n-        }\r\n-    };\r\n+// Listener para o item \"Permissões\" (NOVO)\r\n+menuPermissoes.addEventListener('click', async (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch('http://localhost:5000/api/permissions', {\r\n+            headers: { 'Authorization': `Bearer ${token}` }\r\n+        });\r\n+        const permissions = await response.json();\r\n+        if (!response.ok) throw new Error(permissions.message);\r\n \r\n-    // Anexa a função aos links de Empresa e Usuários\r\n-    menuEmpresa.addEventListener('click', openCompanyDetails);\r\n-    menuUsuarios.addEventListener('click', openCompanyDetails);\r\n+        // Preenche o formulário com as permissões atuais\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n \r\n-    // Listener EXCLUSIVO para o link de Permissões\r\n-    menuPermissoes.addEventListener('click', async (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        \r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/permissions', {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const permissions = await response.json();\r\n-            if (!response.ok) throw new Error(permissions.message);\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+    }\r\n+});\r\n \r\n-            // Preenche o formulário com as permissões atuais\r\n-            document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-            document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-            \r\n-            document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-            document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+// Listener para fechar o modal de permissões\r\n+closePermissionsModal.addEventListener('click', () => {\r\n+    permissionsModal.classList.add('hidden');\r\n+});\r\n \r\n-            permissionsModal.classList.remove('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-        }\r\n-    });\r\n+// Listener para salvar as alterações de permissão automaticamente\r\n+permissionsContainer.addEventListener('change', async (e) => {\r\n+    const target = e.target;\r\n+    if (target.type !== 'radio') return;\r\n \r\n+    const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n+    const permissionKey = target.name.split('-')[1]; // Ex: 'canUpdate' ou 'canDelete'\r\n+    const permissionValue = target.value;\r\n+\r\n+    const payload = {\r\n+        roleToUpdate,\r\n+        permissions: { [permissionKey]: permissionValue }\r\n+    };\r\n+\r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch('http://localhost:5000/api/permissions', {\r\n+            method: 'PATCH',\r\n+            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+            body: JSON.stringify(payload)\r\n+        });\r\n+        const data = await response.json();\r\n+        if (!response.ok) throw new Error(data.message);\r\n+        showToast(data.message, 'success');\r\n+    } catch (error) {\r\n+        showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n+    }\r\n+});\r\n+\r\n     // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n     function closeQuickAddModal() {\r\n         quickUserAddModal.classList.add('hidden');\r\n     }\r\n"
                },
                {
                    "date": 1752245608233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,85 +168,60 @@\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n \r\n-// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n-settingsBtn.addEventListener('click', (event) => {\r\n-    event.stopPropagation();\r\n-    settingsDropdown.classList.toggle('hidden');\r\n-});\r\n-window.addEventListener('click', () => {\r\n-    if (!settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n+    // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n+    settingsBtn.addEventListener('click', (event) => {\r\n+        event.stopPropagation();\r\n+        settingsDropdown.classList.toggle('hidden');\r\n+    });\r\n \r\n-// Listener para o item \"Gerenciar Usuários\"\r\n-menuUsuarios.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    const companyId = isAdminLoggedIn ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n-    if (companyId) fetchCompanyDetailsAndOpenModal(companyId);\r\n-});\r\n+    window.addEventListener('click', () => {\r\n+        if (!settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n \r\n-// Listener para o item \"Permissões\" (NOVO)\r\n-menuPermissoes.addEventListener('click', async (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch('http://localhost:5000/api/permissions', {\r\n-            headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n-        const permissions = await response.json();\r\n-        if (!response.ok) throw new Error(permissions.message);\r\n+    // Função auxiliar para os links de Empresa e Usuários\r\n+    const openCompanyDetails = (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+        if (companyId) {\r\n+            fetchCompanyDetailsAndOpenModal(companyId);\r\n+        }\r\n+    };\r\n \r\n-        // Preenche o formulário com as permissões atuais\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+    // Anexa a função aos links de Empresa e Usuários\r\n+    menuEmpresa.addEventListener('click', openCompanyDetails);\r\n+    menuUsuarios.addEventListener('click', openCompanyDetails);\r\n \r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-    }\r\n-});\r\n+    // Listener EXCLUSIVO para o link de Permissões\r\n+    menuPermissoes.addEventListener('click', async (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        \r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/permissions', {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const permissions = await response.json();\r\n+            if (!response.ok) throw new Error(permissions.message);\r\n \r\n-// Listener para fechar o modal de permissões\r\n-closePermissionsModal.addEventListener('click', () => {\r\n-    permissionsModal.classList.add('hidden');\r\n-});\r\n+            // Preenche o formulário com as permissões atuais\r\n+            document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+            document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+            \r\n+            document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+            document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n \r\n-// Listener para salvar as alterações de permissão automaticamente\r\n-permissionsContainer.addEventListener('change', async (e) => {\r\n-    const target = e.target;\r\n-    if (target.type !== 'radio') return;\r\n+            permissionsModal.classList.remove('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n \r\n-    const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n-    const permissionKey = target.name.split('-')[1]; // Ex: 'canUpdate' ou 'canDelete'\r\n-    const permissionValue = target.value;\r\n-\r\n-    const payload = {\r\n-        roleToUpdate,\r\n-        permissions: { [permissionKey]: permissionValue }\r\n-    };\r\n-\r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch('http://localhost:5000/api/permissions', {\r\n-            method: 'PATCH',\r\n-            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-            body: JSON.stringify(payload)\r\n-        });\r\n-        const data = await response.json();\r\n-        if (!response.ok) throw new Error(data.message);\r\n-        showToast(data.message, 'success');\r\n-    } catch (error) {\r\n-        showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n-    }\r\n-});\r\n-\r\n     // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n     function closeQuickAddModal() {\r\n         quickUserAddModal.classList.add('hidden');\r\n     }\r\n"
                },
                {
                    "date": 1752246364726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,60 +168,90 @@\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n \r\n-    // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n-    settingsBtn.addEventListener('click', (event) => {\r\n-        event.stopPropagation();\r\n-        settingsDropdown.classList.toggle('hidden');\r\n-    });\r\n+// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n+settingsBtn.addEventListener('click', (event) => {\r\n+    event.stopPropagation();\r\n+    settingsDropdown.classList.toggle('hidden');\r\n+});\r\n+window.addEventListener('click', () => {\r\n+    if (!settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n \r\n-    window.addEventListener('click', () => {\r\n-        if (!settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n+// Listener para o item \"Gerenciar Usuários\"\r\n+menuUsuarios.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    const companyId = isAdminLoggedIn ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n+    if (companyId) fetchCompanyDetailsAndOpenModal(companyId);\r\n+});\r\n \r\n-    // Função auxiliar para os links de Empresa e Usuários\r\n-    const openCompanyDetails = (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-        if (companyId) {\r\n-            fetchCompanyDetailsAndOpenModal(companyId);\r\n-        }\r\n-    };\r\n+// Listener para o item \"Permissões\" (NOVO)\r\n+menuPermissoes.addEventListener('click', async (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch('http://localhost:5000/api/permissions', {\r\n+            headers: { 'Authorization': `Bearer ${token}` }\r\n+        });\r\n+        const permissions = await response.json();\r\n+        if (!response.ok) throw new Error(permissions.message);\r\n \r\n-    // Anexa a função aos links de Empresa e Usuários\r\n-    menuEmpresa.addEventListener('click', openCompanyDetails);\r\n-    menuUsuarios.addEventListener('click', openCompanyDetails);\r\n+        // Preenche o formulário com as permissões atuais\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n \r\n-    // Listener EXCLUSIVO para o link de Permissões\r\n-    menuPermissoes.addEventListener('click', async (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        \r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/permissions', {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const permissions = await response.json();\r\n-            if (!response.ok) throw new Error(permissions.message);\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+    }\r\n+});\r\n \r\n-            // Preenche o formulário com as permissões atuais\r\n-            document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-            document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-            \r\n-            document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-            document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+// Listener para fechar o modal de permissões\r\n+closePermissionsModal.addEventListener('click', () => {\r\n+    permissionsModal.classList.add('hidden');\r\n+});\r\n \r\n-            permissionsModal.classList.remove('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-        }\r\n-    });\r\n+// Listener para salvar as alterações de permissão automaticamente\r\n+permissionsContainer.addEventListener('change', async (e) => {\r\n+    const target = e.target;\r\n+    if (target.type !== 'radio') return;\r\n \r\n+    const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n+    const permissionKey = target.name.split('-')[1]; // Ex: 'canUpdate' ou 'canDelete'\r\n+    const permissionValue = target.value;\r\n+\r\n+    const payload = {\r\n+        roleToUpdate,\r\n+        permissions: { [permissionKey]: permissionValue }\r\n+    };\r\n+\r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch('http://localhost:5000/api/permissions', {\r\n+            method: 'PATCH',\r\n+            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+            body: JSON.stringify(payload)\r\n+        });\r\n+        const data = await response.json();\r\n+        if (!response.ok) throw new Error(data.message);\r\n+        showToast(data.message, 'success');\r\n+    } catch (error) {\r\n+        showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n+    }\r\n+});\r\n+\r\n+    // Anexa a mesma função de clique a TODOS os links do menu\r\n+    menuEmpresa.addEventListener('click', openManagementModal);\r\n+    menuUsuarios.addEventListener('click', openManagementModal);\r\n+    menuPermissoes.addEventListener('click', openManagementModal);\r\n+\r\n     // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n     function closeQuickAddModal() {\r\n         quickUserAddModal.classList.add('hidden');\r\n     }\r\n"
                },
                {
                    "date": 1752247597139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,85 +168,95 @@\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n \r\n-// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n-settingsBtn.addEventListener('click', (event) => {\r\n-    event.stopPropagation();\r\n-    settingsDropdown.classList.toggle('hidden');\r\n-});\r\n-window.addEventListener('click', () => {\r\n-    if (!settingsDropdown.classList.contains('hidden')) {\r\n+            // --- Lógica para os Itens do Menu da Engrenagem ---\r\n+\r\n+    // Função unificada que será chamada por qualquer link do menu\r\n+    const openManagementModal = (e) => {\r\n+        e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n+        \r\n+        // Pega o ID da empresa do usuário que está logado\r\n+        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n \r\n-// Listener para o item \"Gerenciar Usuários\"\r\n-menuUsuarios.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    const companyId = isAdminLoggedIn ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n-    if (companyId) fetchCompanyDetailsAndOpenModal(companyId);\r\n-});\r\n+        if (companyId) {\r\n+            // Se encontrou um ID, busca os detalhes e abre o modal de gerenciamento\r\n+            fetchCompanyDetailsAndOpenModal(companyId);\r\n+        } else {\r\n+            showToast('Erro: Não foi possível identificar a empresa.', 'error');\r\n+        }\r\n+    };\r\n \r\n-// Listener para o item \"Permissões\" (NOVO)\r\n-menuPermissoes.addEventListener('click', async (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch('http://localhost:5000/api/permissions', {\r\n-            headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n-        const permissions = await response.json();\r\n-        if (!response.ok) throw new Error(permissions.message);\r\n+    menuPermissoes.addEventListener('click', async (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n \r\n-        // Preenche o formulário com as permissões atuais\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/permissions', {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const permissions = await response.json();\r\n+            if (!response.ok) throw new Error(permissions.message);\r\n \r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-    }\r\n-});\r\n+            // Preenche o formulário com as permissões atuais\r\n+            document.getElementById('gerente-canCreate').checked = permissions.Gerente.canCreate;\r\n+            document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+            document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n \r\n-// Listener para fechar o modal de permissões\r\n-closePermissionsModal.addEventListener('click', () => {\r\n-    permissionsModal.classList.add('hidden');\r\n-});\r\n+            document.getElementById('funcionario-canCreate').checked = permissions.Funcionário.canCreate;\r\n+            document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+            document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n \r\n-// Listener para salvar as alterações de permissão automaticamente\r\n-permissionsContainer.addEventListener('change', async (e) => {\r\n-    const target = e.target;\r\n-    if (target.type !== 'radio') return;\r\n+            permissionsModal.classList.remove('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n \r\n-    const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n-    const permissionKey = target.name.split('-')[1]; // Ex: 'canUpdate' ou 'canDelete'\r\n-    const permissionValue = target.value;\r\n+    closePermissionsModal.addEventListener('click', () => {\r\n+        permissionsModal.classList.add('hidden');\r\n+    });\r\n \r\n-    const payload = {\r\n-        roleToUpdate,\r\n-        permissions: { [permissionKey]: permissionValue }\r\n-    };\r\n+    // Listener para salvar as alterações automaticamente\r\n+    permissionsContainer.addEventListener('change', async (e) => {\r\n+        const target = e.target;\r\n+        const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n \r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch('http://localhost:5000/api/permissions', {\r\n-            method: 'PATCH',\r\n-            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-            body: JSON.stringify(payload)\r\n-        });\r\n-        const data = await response.json();\r\n-        if (!response.ok) throw new Error(data.message);\r\n-        showToast(data.message, 'success');\r\n-    } catch (error) {\r\n-        showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n-    }\r\n-});\r\n+        let permissionKey;\r\n+        let permissionValue;\r\n \r\n+        if (target.type === 'checkbox') {\r\n+            permissionKey = target.name.split('-')[1]; // Ex: 'canCreate'\r\n+            permissionValue = target.checked;\r\n+        } else if (target.type === 'radio') {\r\n+            permissionKey = target.name.split('-')[1]; // Ex: 'canUpdate'\r\n+            permissionValue = target.value;\r\n+        }\r\n+\r\n+        if (!roleToUpdate || !permissionKey) return;\r\n+\r\n+        const payload = {\r\n+            roleToUpdate,\r\n+            permissions: { [permissionKey]: permissionValue }\r\n+        };\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/permissions', {\r\n+                method: 'PATCH',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n     // Anexa a mesma função de clique a TODOS os links do menu\r\n     menuEmpresa.addEventListener('click', openManagementModal);\r\n     menuUsuarios.addEventListener('click', openManagementModal);\r\n     menuPermissoes.addEventListener('click', openManagementModal);\r\n"
                },
                {
                    "date": 1752247957872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,100 +168,94 @@\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n \r\n-            // --- Lógica para os Itens do Menu da Engrenagem ---\r\n+// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n+settingsBtn.addEventListener('click', (event) => {\r\n+    event.stopPropagation();\r\n+    settingsDropdown.classList.toggle('hidden');\r\n+});\r\n \r\n-    // Função unificada que será chamada por qualquer link do menu\r\n-    const openManagementModal = (e) => {\r\n-        e.preventDefault();\r\n+window.addEventListener('click', () => {\r\n+    if (!settingsDropdown.classList.contains('hidden')) {\r\n         settingsDropdown.classList.add('hidden');\r\n-        \r\n-        // Pega o ID da empresa do usuário que está logado\r\n-        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+    }\r\n+});\r\n \r\n-        if (companyId) {\r\n-            // Se encontrou um ID, busca os detalhes e abre o modal de gerenciamento\r\n-            fetchCompanyDetailsAndOpenModal(companyId);\r\n-        } else {\r\n-            showToast('Erro: Não foi possível identificar a empresa.', 'error');\r\n-        }\r\n-    };\r\n+// Função auxiliar para os links de Empresa e Usuários\r\n+const openManagementModal = (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+    if (companyId) {\r\n+        fetchCompanyDetailsAndOpenModal(companyId);\r\n+    }\r\n+};\r\n \r\n-    menuPermissoes.addEventListener('click', async (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n+// Anexa a função aos links corretos\r\n+menuEmpresa.addEventListener('click', openManagementModal);\r\n+menuUsuarios.addEventListener('click', openManagementModal);\r\n \r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/permissions', {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const permissions = await response.json();\r\n-            if (!response.ok) throw new Error(permissions.message);\r\n+// Listener EXCLUSIVO para o link de Permissões\r\n+menuPermissoes.addEventListener('click', async (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n \r\n-            // Preenche o formulário com as permissões atuais\r\n-            document.getElementById('gerente-canCreate').checked = permissions.Gerente.canCreate;\r\n-            document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-            document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch('http://localhost:5000/api/permissions', {\r\n+            headers: { 'Authorization': `Bearer ${token}` }\r\n+        });\r\n+        const permissions = await response.json();\r\n+        if (!response.ok) throw new Error(permissions.message);\r\n \r\n-            document.getElementById('funcionario-canCreate').checked = permissions.Funcionário.canCreate;\r\n-            document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-            document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+        // Preenche o formulário com as permissões atuais\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n \r\n-            permissionsModal.classList.remove('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-        }\r\n-    });\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n \r\n-    closePermissionsModal.addEventListener('click', () => {\r\n-        permissionsModal.classList.add('hidden');\r\n-    });\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+    }\r\n+});\r\n \r\n-    // Listener para salvar as alterações automaticamente\r\n-    permissionsContainer.addEventListener('change', async (e) => {\r\n-        const target = e.target;\r\n-        const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n+// Listener para fechar o modal de permissões\r\n+closePermissionsModal.addEventListener('click', () => {\r\n+    permissionsModal.classList.add('hidden');\r\n+});\r\n \r\n-        let permissionKey;\r\n-        let permissionValue;\r\n+// Listener para salvar as alterações de permissão automaticamente\r\n+permissionsContainer.addEventListener('change', async (e) => {\r\n+    const target = e.target;\r\n+    if (target.type !== 'radio') return;\r\n \r\n-        if (target.type === 'checkbox') {\r\n-            permissionKey = target.name.split('-')[1]; // Ex: 'canCreate'\r\n-            permissionValue = target.checked;\r\n-        } else if (target.type === 'radio') {\r\n-            permissionKey = target.name.split('-')[1]; // Ex: 'canUpdate'\r\n-            permissionValue = target.value;\r\n-        }\r\n+    const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n+    const permissionKey = target.name.split('-')[1];\r\n+    const permissionValue = target.value;\r\n \r\n-        if (!roleToUpdate || !permissionKey) return;\r\n+    const payload = {\r\n+        roleToUpdate,\r\n+        permissions: { [permissionKey]: permissionValue }\r\n+    };\r\n \r\n-        const payload = {\r\n-            roleToUpdate,\r\n-            permissions: { [permissionKey]: permissionValue }\r\n-        };\r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch('http://localhost:5000/api/permissions', {\r\n+            method: 'PATCH',\r\n+            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+            body: JSON.stringify(payload)\r\n+        });\r\n+        const data = await response.json();\r\n+        if (!response.ok) throw new Error(data.message);\r\n+        showToast(data.message, 'success');\r\n+    } catch (error) {\r\n+        showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n+    }\r\n+});\r\n \r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/permissions', {\r\n-                method: 'PATCH',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(payload)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-        } catch (error) {\r\n-            showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // Anexa a mesma função de clique a TODOS os links do menu\r\n-    menuEmpresa.addEventListener('click', openManagementModal);\r\n-    menuUsuarios.addEventListener('click', openManagementModal);\r\n-    menuPermissoes.addEventListener('click', openManagementModal);\r\n-\r\n     // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n     function closeQuickAddModal() {\r\n         quickUserAddModal.classList.add('hidden');\r\n     }\r\n"
                },
                {
                    "date": 1752248223262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,19 +129,8 @@\n     closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n     barcodeFullScreenModal.addEventListener('click', (e) => {\r\n         if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n     });\r\n-    // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n-    settingsBtn.addEventListener('click', (event) => {\r\n-        event.stopPropagation();\r\n-        settingsDropdown.classList.toggle('hidden');\r\n-    });\r\n-    // Adiciona um listener na janela inteira para fechar o dropdown se o usuário clicar fora dele\r\n-    window.addEventListener('click', () => {\r\n-        if (!settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n \r\n     // Listener para o item \"Gerenciar Usuários\"\r\n     menuUsuarios.addEventListener('click', (e) => {\r\n         e.preventDefault();\r\n"
                },
                {
                    "date": 1752248529764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,27 +138,10 @@\n         const companyId = isAdminLoggedIn ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n         if (companyId) fetchCompanyDetailsAndOpenModal(companyId);\r\n     });\r\n \r\n-    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n-                {\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const companyDetails = await response.json();\r\n-            if (!response.ok) throw new Error(companyDetails.message);\r\n-            openCompanyDetailsModal(companyDetails);\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n \r\n+\r\n // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n settingsBtn.addEventListener('click', (event) => {\r\n     event.stopPropagation();\r\n     settingsDropdown.classList.toggle('hidden');\r\n@@ -1051,8 +1034,28 @@\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     }\r\n });\r\n+\r\n+async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n+    const token = localStorage.getItem('authToken');\r\n+    try {\r\n+        const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n+            {\r\n+                headers:\r\n+                {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+        const companyDetails = await response.json();\r\n+        if (!response.ok) throw new Error(companyDetails.message);\r\n+        openCompanyDetailsModal(companyDetails);\r\n+    }\r\n+    catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    }\r\n+}\r\n+\r\n     // --- Lógica do Modal de Detalhes da Empresa ---\r\n function openCompanyDetailsModal(company) {\r\n     selectedCompanyForAdmin = company;\r\n     modalCompanyName.textContent = company.nomeEmpresa;\r\n"
                },
                {
                    "date": 1752248886238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,33 +167,33 @@\n menuEmpresa.addEventListener('click', openManagementModal);\r\n menuUsuarios.addEventListener('click', openManagementModal);\r\n \r\n // Listener EXCLUSIVO para o link de Permissões\r\n-menuPermissoes.addEventListener('click', async (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n+    menuPermissoes.addEventListener('click', async (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        \r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/permissions', {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const permissions = await response.json();\r\n+            if (!response.ok) throw new Error(permissions.message);\r\n \r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch('http://localhost:5000/api/permissions', {\r\n-            headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n-        const permissions = await response.json();\r\n-        if (!response.ok) throw new Error(permissions.message);\r\n+            // Preenche o formulário com as permissões atuais (sem os checkboxes de \"canCreate\")\r\n+            document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+            document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+            \r\n+            document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+            document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n \r\n-        // Preenche o formulário com as permissões atuais\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+            permissionsModal.classList.remove('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n \r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-    }\r\n-});\r\n-\r\n // Listener para fechar o modal de permissões\r\n closePermissionsModal.addEventListener('click', () => {\r\n     permissionsModal.classList.add('hidden');\r\n });\r\n"
                },
                {
                    "date": 1752267329573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n document.addEventListener('DOMContentLoaded', function() {\r\n     // --- Elementos HTML (Declarações completas) ---\r\n+    const API_BASE_URL = 'http://localhost:5000';\r\n     const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n     const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n     const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n     const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n@@ -173,9 +174,9 @@\n         settingsDropdown.classList.add('hidden');\r\n         \r\n         try {\r\n             const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/permissions', {\r\n+            const response = await fetch('${API_BASE_URL}/api/permissions', {\r\n                 headers: { 'Authorization': `Bearer ${token}` }\r\n             });\r\n             const permissions = await response.json();\r\n             if (!response.ok) throw new Error(permissions.message);\r\n@@ -213,9 +214,9 @@\n     };\r\n \r\n     try {\r\n         const token = localStorage.getItem('authToken');\r\n-        const response = await fetch('http://localhost:5000/api/permissions', {\r\n+        const response = await fetch('${API_BASE_URL}/api/permissions', {\r\n             method: 'PATCH',\r\n             headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n             body: JSON.stringify(payload)\r\n         });\r\n@@ -242,9 +243,9 @@\n             return;\r\n         }\r\n         try {\r\n             const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/register/user',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -395,9 +396,9 @@\n         e.preventDefault();\r\n         const cnpj = cnpjInput.value;\r\n         const password = cnpjPasswordInput.value;\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/company',\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/login/company',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -424,9 +425,9 @@\n         e.preventDefault();\r\n         const username = adminUsernameInput.value;\r\n         const password = adminPasswordInput.value;\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/login/admin',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -457,9 +458,9 @@\n             showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/user',\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/login/user',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -494,9 +495,9 @@\n             showToast('Erro: Nenhuma empresa selecionada. Faça o login da empresa novamente.', 'error');\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/register/user',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -520,9 +521,9 @@\n     });\r\n     backToAdminBtn.addEventListener('click', async () => {\r\n         showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/login/admin',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -554,9 +555,9 @@\n         const token = localStorage.getItem('authToken');\r\n         if (!token) return;\r\n \r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/companies', {\r\n+            const response = await fetch('${API_BASE_URL}/api/companies', {\r\n                 headers: {\r\n                     'Authorization': `Bearer ${token}`\r\n                 }\r\n             });\r\n@@ -589,9 +590,9 @@\n                     button.addEventListener('click', async (e) => {\r\n                         const companyId = e.target.dataset.companyId;\r\n                         const token = localStorage.getItem('authToken');\r\n                         try {\r\n-                            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n+                            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n                                 headers: {\r\n                                     'Authorization': `Bearer ${token}`\r\n                                 }\r\n                             });\r\n@@ -608,9 +609,9 @@\n                     button.addEventListener('click', async (e) => {\r\n                         const companyId = e.target.dataset.companyId;\r\n                         const token = localStorage.getItem('authToken');\r\n                         try {\r\n-                            const companyResponse = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n+                            const companyResponse = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n                                 headers: {\r\n                                     'Authorization': `Bearer ${token}`\r\n                                 }\r\n                             });\r\n@@ -620,9 +621,9 @@\n                                 showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n                                 return;\r\n                             }\r\n                             const userId = companyDetails.usuarios[0]._id;\r\n-                            const impersonateResponse = await fetch('http://localhost:5000/api/admin/impersonate', {\r\n+                            const impersonateResponse = await fetch('${API_BASE_URL}/api/admin/impersonate', {\r\n                                 method: 'POST',\r\n                                 headers: {\r\n                                     'Content-Type': 'application/json',\r\n                                     'Authorization': `Bearer ${token}`\r\n@@ -662,9 +663,9 @@\n             showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/companies/register',\r\n+            const response = await fetch('${API_BASE_URL}/api/companies/register',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -700,9 +701,9 @@\n             showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/boletos',\r\n+            const response = await fetch('${API_BASE_URL}/api/boletos',\r\n                 {\r\n                     method: 'GET',\r\n                     headers:\r\n                     {\r\n@@ -902,9 +903,9 @@\n             showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/boletos',\r\n+            const response = await fetch('${API_BASE_URL}/api/boletos',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -957,9 +958,9 @@\n             description: document.getElementById('modalBillDescription').value,\r\n             barcode: document.getElementById('modalBillBarcode').value\r\n         };\r\n         try {\r\n-            const response = await fetch(`http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n                 {\r\n                     method: 'PATCH',\r\n                     headers:\r\n                     {\r\n@@ -982,9 +983,9 @@\n         if (!selectedParcel) return;\r\n         if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n-            const response = await fetch(`http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n                 {\r\n                     method: 'DELETE',\r\n                     headers:\r\n                     {\r\n@@ -1014,9 +1015,9 @@\n     const token = localStorage.getItem('authToken');\r\n     const boletoId = selectedParcel.parentId;\r\n     \r\n     try {\r\n-        const response = await fetch(`http://localhost:5000/api/boletos/${boletoId}`, {\r\n+        const response = await fetch(`${API_BASE_URL}/api/boletos/${boletoId}`, {\r\n             method: 'DELETE',\r\n             headers: {\r\n                 'Authorization': `Bearer ${token}`\r\n             }\r\n@@ -1038,9 +1039,9 @@\n \r\n async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n     const token = localStorage.getItem('authToken');\r\n     try {\r\n-        const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n+        const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`,\r\n             {\r\n                 headers:\r\n                 {\r\n                     'Authorization': `Bearer ${token}`\r\n@@ -1130,9 +1131,9 @@\n             const token = localStorage.getItem('authToken');\r\n             const companyId = selectedCompanyForAdmin._id;\r\n \r\n             try {\r\n-                const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}/role`, {\r\n+                const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}/role`, {\r\n                     method: 'PATCH',\r\n                     headers: {\r\n                         'Content-Type': 'application/json',\r\n                         'Authorization': `Bearer ${token}`\r\n@@ -1167,9 +1168,9 @@\n     async function handleRemoveUser(companyId, userId) {\r\n         if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}`,\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}`,\r\n                 {\r\n                     method: 'DELETE',\r\n                     headers:\r\n                     {\r\n@@ -1193,9 +1194,9 @@\n         const password = prompt(`Digite a senha para o usuário \"${username}\":`);\r\n         if (!password) return;\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/register/user',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -1227,9 +1228,9 @@\n             return;\r\n         }\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`,\r\n                 {\r\n                     method: 'DELETE',\r\n                     headers:\r\n                     {\r\n@@ -1254,9 +1255,9 @@\n             return;\r\n         }\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`,\r\n                 {\r\n                     method: 'PATCH',\r\n                     headers:\r\n                     {\r\n"
                },
                {
                    "date": 1752267795342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n document.addEventListener('DOMContentLoaded', function() {\r\n     // --- Elementos HTML (Declarações completas) ---\r\n-    const API_BASE_URL = 'http://localhost:5000';\r\n     const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n     const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n     const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n     const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n@@ -174,9 +173,9 @@\n         settingsDropdown.classList.add('hidden');\r\n         \r\n         try {\r\n             const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('${API_BASE_URL}/api/permissions', {\r\n+            const response = await fetch('http://localhost:5000/api/permissions', {\r\n                 headers: { 'Authorization': `Bearer ${token}` }\r\n             });\r\n             const permissions = await response.json();\r\n             if (!response.ok) throw new Error(permissions.message);\r\n@@ -214,9 +213,9 @@\n     };\r\n \r\n     try {\r\n         const token = localStorage.getItem('authToken');\r\n-        const response = await fetch('${API_BASE_URL}/api/permissions', {\r\n+        const response = await fetch('http://localhost:5000/api/permissions', {\r\n             method: 'PATCH',\r\n             headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n             body: JSON.stringify(payload)\r\n         });\r\n@@ -243,9 +242,9 @@\n             return;\r\n         }\r\n         try {\r\n             const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/register/user',\r\n+            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -396,9 +395,9 @@\n         e.preventDefault();\r\n         const cnpj = cnpjInput.value;\r\n         const password = cnpjPasswordInput.value;\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/login/company',\r\n+            const response = await fetch('http://localhost:5000/api/auth/login/company',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -425,9 +424,9 @@\n         e.preventDefault();\r\n         const username = adminUsernameInput.value;\r\n         const password = adminPasswordInput.value;\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/login/admin',\r\n+            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -458,9 +457,9 @@\n             showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/login/user',\r\n+            const response = await fetch('http://localhost:5000/api/auth/login/user',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -495,9 +494,9 @@\n             showToast('Erro: Nenhuma empresa selecionada. Faça o login da empresa novamente.', 'error');\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/register/user',\r\n+            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -521,9 +520,9 @@\n     });\r\n     backToAdminBtn.addEventListener('click', async () => {\r\n         showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/login/admin',\r\n+            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -555,9 +554,9 @@\n         const token = localStorage.getItem('authToken');\r\n         if (!token) return;\r\n \r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/companies', {\r\n+            const response = await fetch('http://localhost:5000/api/companies', {\r\n                 headers: {\r\n                     'Authorization': `Bearer ${token}`\r\n                 }\r\n             });\r\n@@ -590,9 +589,9 @@\n                     button.addEventListener('click', async (e) => {\r\n                         const companyId = e.target.dataset.companyId;\r\n                         const token = localStorage.getItem('authToken');\r\n                         try {\r\n-                            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n                                 headers: {\r\n                                     'Authorization': `Bearer ${token}`\r\n                                 }\r\n                             });\r\n@@ -609,9 +608,9 @@\n                     button.addEventListener('click', async (e) => {\r\n                         const companyId = e.target.dataset.companyId;\r\n                         const token = localStorage.getItem('authToken');\r\n                         try {\r\n-                            const companyResponse = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                            const companyResponse = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n                                 headers: {\r\n                                     'Authorization': `Bearer ${token}`\r\n                                 }\r\n                             });\r\n@@ -621,9 +620,9 @@\n                                 showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n                                 return;\r\n                             }\r\n                             const userId = companyDetails.usuarios[0]._id;\r\n-                            const impersonateResponse = await fetch('${API_BASE_URL}/api/admin/impersonate', {\r\n+                            const impersonateResponse = await fetch('http://localhost:5000/api/admin/impersonate', {\r\n                                 method: 'POST',\r\n                                 headers: {\r\n                                     'Content-Type': 'application/json',\r\n                                     'Authorization': `Bearer ${token}`\r\n@@ -663,9 +662,9 @@\n             showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/companies/register',\r\n+            const response = await fetch('http://localhost:5000/api/companies/register',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -701,9 +700,9 @@\n             showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/boletos',\r\n+            const response = await fetch('http://localhost:5000/api/boletos',\r\n                 {\r\n                     method: 'GET',\r\n                     headers:\r\n                     {\r\n@@ -903,9 +902,9 @@\n             showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/boletos',\r\n+            const response = await fetch('http://localhost:5000/api/boletos',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -958,9 +957,9 @@\n             description: document.getElementById('modalBillDescription').value,\r\n             barcode: document.getElementById('modalBillBarcode').value\r\n         };\r\n         try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n+            const response = await fetch(`http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n                 {\r\n                     method: 'PATCH',\r\n                     headers:\r\n                     {\r\n@@ -983,9 +982,9 @@\n         if (!selectedParcel) return;\r\n         if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n+            const response = await fetch(`http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n                 {\r\n                     method: 'DELETE',\r\n                     headers:\r\n                     {\r\n@@ -1015,9 +1014,9 @@\n     const token = localStorage.getItem('authToken');\r\n     const boletoId = selectedParcel.parentId;\r\n     \r\n     try {\r\n-        const response = await fetch(`${API_BASE_URL}/api/boletos/${boletoId}`, {\r\n+        const response = await fetch(`http://localhost:5000/api/boletos/${boletoId}`, {\r\n             method: 'DELETE',\r\n             headers: {\r\n                 'Authorization': `Bearer ${token}`\r\n             }\r\n@@ -1039,9 +1038,9 @@\n \r\n async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n     const token = localStorage.getItem('authToken');\r\n     try {\r\n-        const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`,\r\n+        const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n             {\r\n                 headers:\r\n                 {\r\n                     'Authorization': `Bearer ${token}`\r\n@@ -1131,9 +1130,9 @@\n             const token = localStorage.getItem('authToken');\r\n             const companyId = selectedCompanyForAdmin._id;\r\n \r\n             try {\r\n-                const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}/role`, {\r\n+                const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}/role`, {\r\n                     method: 'PATCH',\r\n                     headers: {\r\n                         'Content-Type': 'application/json',\r\n                         'Authorization': `Bearer ${token}`\r\n@@ -1168,9 +1167,9 @@\n     async function handleRemoveUser(companyId, userId) {\r\n         if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}`,\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}`,\r\n                 {\r\n                     method: 'DELETE',\r\n                     headers:\r\n                     {\r\n@@ -1194,9 +1193,9 @@\n         const password = prompt(`Digite a senha para o usuário \"${username}\":`);\r\n         if (!password) return;\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/register/user',\r\n+            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -1228,9 +1227,9 @@\n             return;\r\n         }\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`,\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n                 {\r\n                     method: 'DELETE',\r\n                     headers:\r\n                     {\r\n@@ -1255,9 +1254,9 @@\n             return;\r\n         }\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`,\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n                 {\r\n                     method: 'PATCH',\r\n                     headers:\r\n                     {\r\n"
                },
                {
                    "date": 1752268274887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,8 +301,9 @@\n     function showInitialLogin() {\r\n         hideAllScreens();\r\n         initialLoginScreen.classList.remove('hidden');\r\n         localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n         currentLoggedInCompany = null;\r\n         currentLoggedInUser = null;\r\n         isAdminLoggedIn = false;\r\n         loggedInViaAdmin = false;\r\n@@ -517,39 +518,30 @@\n         catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n-    backToAdminBtn.addEventListener('click', async () => {\r\n+    backToAdminBtn.addEventListener('click', () => {\r\n         showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username: 'Admin',\r\n-                            password: '@350239'\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) {\r\n-                showInitialLogin();\r\n-                throw new Error(data.message);\r\n-            }\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInUser = null;\r\n-            currentLoggedInCompany = null;\r\n-            loggedInViaAdmin = false;\r\n-            isAdminLoggedIn = true;\r\n-            showAdminDashboard();\r\n+\r\n+        // 1. Recuperamos o token original do admin que guardámos\r\n+        const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+        if (!adminToken) {\r\n+            showToast(\"Erro: Token de administrador não encontrado. Faça o login novamente.\", \"error\");\r\n+            showInitialLogin();\r\n+            return;\r\n         }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n+\r\n+        // 2. Restauramos o token do admin como o token ativo\r\n+        localStorage.setItem('authToken', adminToken);\r\n+        localStorage.removeItem('superAdminToken'); // Limpamos o token temporário\r\n+\r\n+        // 3. Resetamos o estado da aplicação e mostramos o painel\r\n+        currentLoggedInUser = null;\r\n+        currentLoggedInCompany = null;\r\n+        loggedInViaAdmin = false;\r\n+        isAdminLoggedIn = true;\r\n+        showAdminDashboard();\r\n     });\r\n     async function renderCompanyList() {\r\n         const token = localStorage.getItem('authToken');\r\n         if (!token) return;\r\n@@ -634,8 +626,9 @@\n                             });\r\n                             const data = await impersonateResponse.json();\r\n                             if (!impersonateResponse.ok) throw new Error(data.message);\r\n                             showToast(`Entrando na empresa ${data.company.nomeEmpresa}...`, 'success');\r\n+                            localStorage.setItem('superAdminToken', token);\r\n                             localStorage.setItem('authToken', data.token);\r\n                             currentLoggedInCompany = data.company;\r\n                             currentLoggedInUser = data.user;\r\n                             loggedInViaAdmin = true;\r\n"
                },
                {
                    "date": 1752269934542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -643,44 +643,57 @@\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n     createCompanyBtn.addEventListener('click', async () => {\r\n+        // 1. Pedimos os dados da empresa, como antes\r\n         const nomeEmpresa = prompt(\"Digite o nome da nova empresa:\");\r\n         if (!nomeEmpresa) return;\r\n         const cnpj = prompt(\"Digite o CNPJ da nova empresa:\");\r\n         if (!cnpj) return;\r\n         const senhaEmpresa = prompt(\"Digite uma senha para a nova empresa:\");\r\n         if (!senhaEmpresa) return;\r\n+\r\n+        // 2. MUDANÇA: Pedimos os dados para o novo usuário Proprietário\r\n+        const ownerUsername = prompt(\"Digite o NOME DE USUÁRIO para o Proprietário:\");\r\n+        if (!ownerUsername) return;\r\n+        const ownerPassword = prompt(`Digite a SENHA para o usuário proprietário \"${ownerUsername}\":`);\r\n+        if (!ownerPassword) return;\r\n+\r\n+        // 3. Pegamos o token do admin para autorizar a criação\r\n         const token = localStorage.getItem('authToken');\r\n         if (!token) {\r\n             showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n             return;\r\n         }\r\n+\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/companies/register',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            nomeEmpresa,\r\n-                            cnpj,\r\n-                            senhaEmpresa\r\n-                        })\r\n-                });\r\n+            const response = await fetch('http://localhost:5000/api/companies/register', {\r\n+                method: 'POST',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                // 4. MUDANÇA: Enviamos o novo payload completo para o backend\r\n+                body: JSON.stringify({\r\n+                    nomeEmpresa,\r\n+                    cnpj,\r\n+                    senhaEmpresa,\r\n+                    ownerUsername,\r\n+                    ownerPassword\r\n+                })\r\n+            });\r\n+\r\n             const data = await response.json();\r\n             if (!response.ok) throw new Error(data.message || \"Não foi possível criar a empresa.\");\r\n+            \r\n             showToast(data.message, 'success');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n+            renderCompanyList(); // Atualiza a lista de empresas na tela\r\n+\r\n+        } catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n+    \r\n     // --- Lógica Principal do App de Boletos ---\r\n     function initializeCalendarDate() {\r\n         const today = new Date();\r\n         currentMonth = today.getMonth();\r\n"
                },
                {
                    "date": 1752270928821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -541,8 +541,9 @@\n         loggedInViaAdmin = false;\r\n         isAdminLoggedIn = true;\r\n         showAdminDashboard();\r\n     });\r\n+\r\n     async function renderCompanyList() {\r\n         const token = localStorage.getItem('authToken');\r\n         if (!token) return;\r\n \r\n@@ -564,12 +565,14 @@\n                 noCompaniesMessage.classList.add('hidden');\r\n                 companies.forEach(company => {\r\n                     const companyCard = document.createElement('div');\r\n                     companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                    \r\n+                    // MUDANÇA: A API agora não retorna a contagem de usuários diretamente na lista.\r\n+                    // Podemos mostrar esta informação de outra forma ou remover por enquanto para simplificar.\r\n                     companyCard.innerHTML = `\r\n                         <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n                         <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                        <p class=\"text-gray-400 text-sm mt-2\">${company.usuarios.length} usuários cadastrados</p>\r\n                         <div class=\"mt-4 flex justify-end space-x-2\">\r\n                             <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n                             <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n                         </div>\r\n@@ -586,51 +589,60 @@\n                                 headers: {\r\n                                     'Authorization': `Bearer ${token}`\r\n                                 }\r\n                             });\r\n-                            const companyDetails = await response.json();\r\n-                            if (!response.ok) throw new Error(companyDetails.message);\r\n-                            openCompanyDetailsModal(companyDetails);\r\n+                            \r\n+                            // MUDANÇA: A resposta agora é desestruturada em 'company' e 'users'.\r\n+                            const { company, users } = await response.json();\r\n+                            \r\n+                            if (!response.ok) throw new Error(company.message); // Usa a mensagem de erro do objeto company\r\n+                            \r\n+                            // MUDANÇA: Passamos os dois objetos para a função do modal.\r\n+                            openCompanyDetailsModal(company, users);\r\n+\r\n                         } catch (error) {\r\n                             showToast(error.message, 'error');\r\n                         }\r\n                     });\r\n                 });\r\n \r\n+                // O listener do 'enter-company-btn' precisa ser atualizado também para funcionar com a nova lógica\r\n                 document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n                     button.addEventListener('click', async (e) => {\r\n                         const companyId = e.target.dataset.companyId;\r\n                         const token = localStorage.getItem('authToken');\r\n                         try {\r\n-                            const companyResponse = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n-                                headers: {\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                }\r\n+                            // Precisamos buscar os usuários da empresa para poder entrar como o primeiro\r\n+                            const companyDetailsResponse = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n+                                headers: { 'Authorization': `Bearer ${token}` }\r\n                             });\r\n-                            const companyDetails = await companyResponse.json();\r\n-                            if (!companyResponse.ok) throw new Error(companyDetails.message);\r\n-                            if (companyDetails.usuarios.length === 0) {\r\n+                            const { company, users } = await companyDetailsResponse.json();\r\n+\r\n+                            if (!companyDetailsResponse.ok) throw new Error(company.message);\r\n+                            \r\n+                            if (users.length === 0) {\r\n                                 showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n                                 return;\r\n                             }\r\n-                            const userId = companyDetails.usuarios[0]._id;\r\n+\r\n+                            // Entramos como o primeiro usuário da lista\r\n+                            const userId = users[0]._id; \r\n+                            \r\n                             const impersonateResponse = await fetch('http://localhost:5000/api/admin/impersonate', {\r\n                                 method: 'POST',\r\n                                 headers: {\r\n                                     'Content-Type': 'application/json',\r\n                                     'Authorization': `Bearer ${token}`\r\n                                 },\r\n-                                body: JSON.stringify({\r\n-                                    companyId,\r\n-                                    userId\r\n-                                })\r\n+                                body: JSON.stringify({ companyId, userId })\r\n                             });\r\n                             const data = await impersonateResponse.json();\r\n                             if (!impersonateResponse.ok) throw new Error(data.message);\r\n-                            showToast(`Entrando na empresa ${data.company.nomeEmpresa}...`, 'success');\r\n+                            \r\n+                            showToast(`Entrando na empresa ${company.nomeEmpresa}...`, 'success');\r\n                             localStorage.setItem('superAdminToken', token);\r\n                             localStorage.setItem('authToken', data.token);\r\n-                            currentLoggedInCompany = data.company;\r\n+                            currentLoggedInCompany = company;\r\n                             currentLoggedInUser = data.user;\r\n                             loggedInViaAdmin = true;\r\n                             showMainApp();\r\n                         } catch (error) {\r\n@@ -642,8 +654,9 @@\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n+\r\n     createCompanyBtn.addEventListener('click', async () => {\r\n         // 1. Pedimos os dados da empresa, como antes\r\n         const nomeEmpresa = prompt(\"Digite o nome da nova empresa:\");\r\n         if (!nomeEmpresa) return;\r\n@@ -691,49 +704,64 @@\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n-    \r\n+\r\n     // --- Lógica Principal do App de Boletos ---\r\n     function initializeCalendarDate() {\r\n         const today = new Date();\r\n         currentMonth = today.getMonth();\r\n         currentYear = today.getFullYear();\r\n         currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n     }\r\n+\r\n     async function updateBillsOrganizer() {\r\n         const token = localStorage.getItem('authToken');\r\n         if (!token) {\r\n             showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n+            showInitialLogin(); // Redireciona para o login se não houver token\r\n             return;\r\n         }\r\n+\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/boletos',\r\n-                {\r\n-                    method: 'GET',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            if (!response.ok) throw new Error((await response.json()).message || \"Erro ao buscar boletos.\");\r\n+            // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n+            const response = await fetch('http://localhost:5000/api/boletos', {\r\n+                method: 'GET',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) {\r\n+                const errorData = await response.json();\r\n+                throw new Error(errorData.message || \"Erro ao buscar boletos.\");\r\n+            }\r\n+            \r\n+            // A resposta da nova API já vem no formato de uma lista de boletos,\r\n+            // com os dados do usuário \"populados\".\r\n             userBoletos = await response.json();\r\n+            \r\n             const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n             totalBillsSpan.textContent = totalParcels;\r\n+\r\n+            // As funções de renderização e resumo são chamadas como antes.\r\n             updateMonthlySummary();\r\n+            \r\n+            // A lógica para alternar entre calendário e lista diária continua a mesma.\r\n             if (window.innerWidth >= 1024) {\r\n                 document.getElementById('billsOrganizer').classList.remove('hidden');\r\n                 document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n                 renderCalendar();\r\n-            }\r\n-            else {\r\n+            } else {\r\n                 document.getElementById('billsOrganizer').classList.add('hidden');\r\n                 document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n                 renderDailyBills();\r\n             }\r\n-        }\r\n-        catch (error) {\r\n+\r\n+        } catch (error) {\r\n             showToast(error.message, 'error');\r\n+            // Se a busca falhar (ex: token expirado), deslogamos o usuário\r\n+            showInitialLogin();\r\n         }\r\n     }\r\n \r\n     function updateMonthlySummary() {\r\n@@ -928,183 +956,177 @@\n         catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n+\r\n     // --- Lógica do Modal de Edição de Boletos ---\r\n     function openBillModal(bill, parcel) {\r\n-        selectedParcel = {\r\n-            ...parcel,\r\n-            parentId: bill.id\r\n-        };\r\n+        // MUDANÇA: Usamos bill._id para o parentId e o parcel já terá o seu próprio _id.\r\n+        selectedParcel = { ...parcel, parentId: bill._id };\r\n+        \r\n         document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n         document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n         document.getElementById('modalBillDate').value = parcel.dueDate;\r\n         document.getElementById('modalBillDescription').value = parcel.description || '';\r\n         modalBillBarcodeInput.value = parcel.barcode || '';\r\n         modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n         if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n             showFullScreenBarcodeBtn.classList.remove('hidden');\r\n-        }\r\n-        else {\r\n+        } else {\r\n             showFullScreenBarcodeBtn.classList.add('hidden');\r\n         }\r\n         billModal.classList.remove('hidden');\r\n     }\r\n+\r\n     closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n     billModal.addEventListener('click', (e) => {\r\n         if (e.target === billModal) billModal.classList.add('hidden');\r\n     });\r\n+\r\n     saveBillBtn.addEventListener('click', async () => {\r\n         if (!selectedParcel) return;\r\n         const token = localStorage.getItem('authToken');\r\n+\r\n+        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n+        const url = `http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n+\r\n         const updatedData = {\r\n             paid: document.getElementById('modalBillPaid').checked,\r\n             amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n             dueDate: document.getElementById('modalBillDate').value,\r\n             description: document.getElementById('modalBillDescription').value,\r\n             barcode: document.getElementById('modalBillBarcode').value\r\n         };\r\n+\r\n         try {\r\n-            const response = await fetch(`http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n-                {\r\n-                    method: 'PATCH',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(updatedData)\r\n-                });\r\n+            const response = await fetch(url, { // Usamos a nova URL\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify(updatedData)\r\n+            });\r\n             const data = await response.json();\r\n             if (!response.ok) throw new Error(data.message);\r\n             showToast('Parcela atualizada com sucesso!', 'success');\r\n             billModal.classList.add('hidden');\r\n             updateBillsOrganizer();\r\n-        }\r\n-        catch (error) {\r\n+        } catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n+\r\n     deleteBillBtn.addEventListener('click', async () => {\r\n         if (!selectedParcel) return;\r\n         if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n         const token = localStorage.getItem('authToken');\r\n+        \r\n+        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n+        const url = `http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n+\r\n         try {\r\n-            const response = await fetch(`http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n+            const response = await fetch(url, { // Usamos a nova URL\r\n+                method: 'DELETE',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n             const data = await response.json();\r\n             if (!response.ok) throw new Error(data.message);\r\n             showToast('Parcela excluída com sucesso!', 'success');\r\n             billModal.classList.add('hidden');\r\n             updateBillsOrganizer();\r\n-        }\r\n-        catch (error) {\r\n+        } catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n-deleteEntireBillBtn.addEventListener('click', async () => {\r\n-    if (!selectedParcel || !selectedParcel.parentId) {\r\n-        showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n-        return;\r\n-    }\r\n-    \r\n-    if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n-        return;\r\n-    }\r\n-    \r\n-    const token = localStorage.getItem('authToken');\r\n-    const boletoId = selectedParcel.parentId;\r\n-    \r\n-    try {\r\n-        const response = await fetch(`http://localhost:5000/api/boletos/${boletoId}`, {\r\n-            method: 'DELETE',\r\n-            headers: {\r\n-                'Authorization': `Bearer ${token}`\r\n-            }\r\n-        });\r\n+\r\n+    deleteEntireBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel || !selectedParcel.parentId) {\r\n+            showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n+            return;\r\n+        }\r\n         \r\n-        const data = await response.json();\r\n-        if (!response.ok) {\r\n-            throw new Error(data.message);\r\n+        if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n+            return;\r\n         }\r\n         \r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        updateBillsOrganizer();\r\n+        const token = localStorage.getItem('authToken');\r\n+        // MUDANÇA: O ID do boleto vem de selectedParcel.parentId, que agora já é o _id correto.\r\n+        const boletoId = selectedParcel.parentId; \r\n         \r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    }\r\n-});\r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/boletos/${boletoId}`, {\r\n+                method: 'DELETE',\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            \r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast('Boleto completo excluído com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+            \r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n \r\n-async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n-    const token = localStorage.getItem('authToken');\r\n-    try {\r\n-        const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n-            {\r\n-                headers:\r\n+    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n                 {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-        const companyDetails = await response.json();\r\n-        if (!response.ok) throw new Error(companyDetails.message);\r\n-        openCompanyDetailsModal(companyDetails);\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const companyDetails = await response.json();\r\n+            if (!response.ok) throw new Error(companyDetails.message);\r\n+            openCompanyDetailsModal(companyDetails);\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n     }\r\n-    catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    }\r\n-}\r\n \r\n     // --- Lógica do Modal de Detalhes da Empresa ---\r\n-function openCompanyDetailsModal(company) {\r\n+function openCompanyDetailsModal(company, users) {\r\n+    // MUDANÇA: A função agora recebe 'company' e 'users'\r\n     selectedCompanyForAdmin = company;\r\n     modalCompanyName.textContent = company.nomeEmpresa;\r\n     modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n     modalCompanyPasswordInput.value = '';\r\n \r\n     modalCompanyUsers.innerHTML = '';\r\n-    if (company.usuarios.length === 0) {\r\n+    \r\n+    // MUDANÇA: Usamos a nova variável 'users'\r\n+    if (users.length === 0) {\r\n         modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n     } else {\r\n-        // Define a lista de papéis disponíveis baseado em quem está logado\r\n         const assignableRoles = isAdminLoggedIn ?\r\n             ['Proprietário', 'Gerente', 'Funcionário'] :\r\n             ['Gerente', 'Funcionário'];\r\n \r\n-        company.usuarios.forEach(user => {\r\n+        // MUDANÇA: Iteramos sobre a nova variável 'users'\r\n+        users.forEach(user => {\r\n             const userItem = document.createElement('div');\r\n             userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n \r\n+            const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n             let roleDisplay = '';\r\n \r\n-            // Se o Super Admin estiver logado, TODOS os usuários são editáveis.\r\n-            const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n-\r\n             if (isEditable) {\r\n                 const optionsHTML = assignableRoles.map(role => {\r\n-                    // Impede que um Proprietário crie outro Proprietário no dropdown\r\n-                    if (!isAdminLoggedIn && role === 'Proprietário') {\r\n-                        return '';\r\n-                    }\r\n+                    if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n                     return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n                 }).join('');\r\n-\r\n-                let finalOptions = optionsHTML;\r\n-                // Garante que a opção 'Proprietário' apareça para um usuário que já é proprietário\r\n-                if (isAdminLoggedIn && user.role === 'Proprietário' && !assignableRoles.includes('Proprietário')) {\r\n-                    finalOptions = `<option value=\"Proprietário\" selected>Proprietário</option>` + optionsHTML;\r\n-                }\r\n-\r\n-                roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${finalOptions}</select>`;\r\n+                roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n             } else {\r\n-                // Mostra um texto fixo para o Proprietário quando não é o Super Admin que está vendo.\r\n                 roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n             }\r\n \r\n             userItem.innerHTML = `\r\n@@ -1138,39 +1160,25 @@\n \r\n             try {\r\n                 const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}/role`, {\r\n                     method: 'PATCH',\r\n-                    headers: {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify({\r\n-                        role: newRole\r\n-                    })\r\n+                    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                    body: JSON.stringify({ role: newRole })\r\n                 });\r\n \r\n                 const data = await response.json();\r\n-                if (!response.ok) {\r\n-                    throw new Error(data.message);\r\n-                }\r\n-\r\n+                if (!response.ok) throw new Error(data.message);\r\n                 showToast(data.message, 'success');\r\n-                // Atualiza o estado local para refletir a mudança sem precisar recarregar\r\n-                const userToUpdate = selectedCompanyForAdmin.usuarios.find(u => u._id === userId);\r\n-                if(userToUpdate) {\r\n-                    userToUpdate.role = newRole;\r\n-                }\r\n-                \r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n-                // Em caso de erro, recarrega o modal para reverter a mudança visual na tela\r\n                 fetchCompanyDetailsAndOpenModal(companyId);\r\n             }\r\n         });\r\n     });\r\n \r\n     companyDetailsModal.classList.remove('hidden');\r\n }\r\n+\r\n     async function handleRemoveUser(companyId, userId) {\r\n         if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n"
                },
                {
                    "date": 1752271265472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1093,91 +1093,92 @@\n         }\r\n     }\r\n \r\n     // --- Lógica do Modal de Detalhes da Empresa ---\r\n-function openCompanyDetailsModal(company, users) {\r\n-    // MUDANÇA: A função agora recebe 'company' e 'users'\r\n-    selectedCompanyForAdmin = company;\r\n-    modalCompanyName.textContent = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n+    function openCompanyDetailsModal(company, users) {\r\n+        selectedCompanyForAdmin = company;\r\n+        modalCompanyName.textContent = company.nomeEmpresa;\r\n \r\n-    modalCompanyUsers.innerHTML = '';\r\n-    \r\n-    // MUDANÇA: Usamos a nova variável 'users'\r\n-    if (users.length === 0) {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    } else {\r\n-        const assignableRoles = isAdminLoggedIn ?\r\n-            ['Proprietário', 'Gerente', 'Funcionário'] :\r\n-            ['Gerente', 'Funcionário'];\r\n+        // MUDANÇA: Adicionamos uma verificação para garantir que 'company.cnpj' existe\r\n+        // antes de o formatarmos. Se não existir (como no caso do clique na engrenagem),\r\n+        // ele simplesmente não exibirá nada, evitando o erro.\r\n+        modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n \r\n-        // MUDANÇA: Iteramos sobre a nova variável 'users'\r\n-        users.forEach(user => {\r\n-            const userItem = document.createElement('div');\r\n-            userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n+        modalCompanyPasswordInput.value = '';\r\n \r\n-            const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n-            let roleDisplay = '';\r\n+        modalCompanyUsers.innerHTML = '';\r\n+        \r\n+        if (users.length === 0) {\r\n+            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+        } else {\r\n+            // A lógica para listar usuários permanece a mesma\r\n+            const assignableRoles = isAdminLoggedIn ?\r\n+                ['Proprietário', 'Gerente', 'Funcionário'] :\r\n+                ['Gerente', 'Funcionário'];\r\n \r\n-            if (isEditable) {\r\n-                const optionsHTML = assignableRoles.map(role => {\r\n-                    if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n-                    return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n-                }).join('');\r\n-                roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n-            } else {\r\n-                roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n-            }\r\n+            users.forEach(user => {\r\n+                const userItem = document.createElement('div');\r\n+                userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n \r\n-            userItem.innerHTML = `\r\n-                <div class=\"flex items-center space-x-3\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    ${roleDisplay}\r\n-                </div>\r\n-                <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-            `;\r\n-            modalCompanyUsers.appendChild(userItem);\r\n-        });\r\n-    }\r\n+                const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n+                let roleDisplay = '';\r\n \r\n+                if (isEditable) {\r\n+                    const optionsHTML = assignableRoles.map(role => {\r\n+                        if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n+                        return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n+                    }).join('');\r\n+                    roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n+                } else {\r\n+                    roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n+                }\r\n \r\n+                userItem.innerHTML = `\r\n+                    <div class=\"flex items-center space-x-3\">\r\n+                        <span class=\"text-white\">${user.username}</span>\r\n+                        ${roleDisplay}\r\n+                    </div>\r\n+                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                `;\r\n+                modalCompanyUsers.appendChild(userItem);\r\n+            });\r\n+        }\r\n \r\n-    // Anexa os listeners aos botões e selects criados\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-            handleRemoveUser(companyId, userId);\r\n+        // Recriamos os listeners para garantir que funcionem\r\n+        document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+            button.addEventListener('click', (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const companyId = selectedCompanyForAdmin._id;\r\n+                handleRemoveUser(companyId, userId);\r\n+            });\r\n         });\r\n-    });\r\n \r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const token = localStorage.getItem('authToken');\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n+        document.querySelectorAll('.role-select').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const token = localStorage.getItem('authToken');\r\n+                const companyId = selectedCompanyForAdmin._id;\r\n \r\n-            try {\r\n-                const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}/role`, {\r\n-                    method: 'PATCH',\r\n-                    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                    body: JSON.stringify({ role: newRole })\r\n-                });\r\n+                try {\r\n+                    const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}/role`, {\r\n+                        method: 'PATCH',\r\n+                        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                        body: JSON.stringify({ role: newRole })\r\n+                    });\r\n \r\n-                const data = await response.json();\r\n-                if (!response.ok) throw new Error(data.message);\r\n-                showToast(data.message, 'success');\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-                fetchCompanyDetailsAndOpenModal(companyId);\r\n-            }\r\n+                    const data = await response.json();\r\n+                    if (!response.ok) throw new Error(data.message);\r\n+                    showToast(data.message, 'success');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                    fetchCompanyDetailsAndOpenModal(companyId);\r\n+                }\r\n+            });\r\n         });\r\n-    });\r\n \r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n+        companyDetailsModal.classList.remove('hidden');\r\n+    }\r\n \r\n     async function handleRemoveUser(companyId, userId) {\r\n         if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n         const token = localStorage.getItem('authToken');\r\n"
                },
                {
                    "date": 1752271378288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1076,20 +1076,27 @@\n \r\n     async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n         const token = localStorage.getItem('authToken');\r\n         try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n-                {\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const companyDetails = await response.json();\r\n-            if (!response.ok) throw new Error(companyDetails.message);\r\n-            openCompanyDetailsModal(companyDetails);\r\n-        }\r\n-        catch (error) {\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+            \r\n+            // A resposta da API é um objeto { company, users }\r\n+            const data = await response.json(); \r\n+\r\n+            if (!response.ok) {\r\n+                // A mensagem de erro pode estar em 'data.message'\r\n+                throw new Error(data.message || 'Não foi possível buscar os detalhes da empresa.');\r\n+            }\r\n+\r\n+            // MUDANÇA CRÍTICA: Em vez de passar o objeto 'data' inteiro,\r\n+            // passamos as suas propriedades 'company' e 'users' corretamente.\r\n+            openCompanyDetailsModal(data.company, data.users);\r\n+\r\n+        } catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n \r\n"
                },
                {
                    "date": 1752275271374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,22 +331,24 @@\n     function showMainApp() {\r\n         hideAllScreens();\r\n         mainAppContent.classList.remove('hidden');\r\n \r\n+        // Mantenha esta lógica que já tínhamos\r\n         if (loggedInViaAdmin) {\r\n             backToAdminBtn.classList.remove('hidden');\r\n         } else {\r\n             backToAdminBtn.classList.add('hidden');\r\n         }\r\n         \r\n-        // <<< LÓGICA CORRIGIDA AQUI >>>\r\n-        // Agora a engrenagem só aparece se o usuário for 'Proprietário' E se ele NÃO for o Super Admin.\r\n         if (!isAdminLoggedIn && currentLoggedInUser && currentLoggedInUser.role === 'Proprietário') {\r\n             settingsMenuContainer.classList.remove('hidden');\r\n         } else {\r\n             settingsMenuContainer.classList.add('hidden');\r\n         }\r\n \r\n+        // ADICIONE ESTA LINHA para mostrar o botão \"+\"\r\n+        openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n         updateBillsOrganizer();\r\n     }\r\n \r\n     function showAdminDashboard() {\r\n"
                },
                {
                    "date": 1752275486802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -295,8 +295,9 @@\n         addBillModal.classList.add('hidden');\r\n         billModal.classList.add('hidden');\r\n         barcodeFullScreenModal.classList.add('hidden');\r\n         quickUserAddModal.classList.add('hidden');\r\n+        openAddBillModalBtn.classList.add('hidden');\r\n     }\r\n \r\n     function showInitialLogin() {\r\n         hideAllScreens();\r\n"
                },
                {
                    "date": 1752276119687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1105,17 +1105,12 @@\n \r\n     // --- Lógica do Modal de Detalhes da Empresa ---\r\n     function openCompanyDetailsModal(company, users) {\r\n         selectedCompanyForAdmin = company;\r\n-        modalCompanyName.textContent = company.nomeEmpresa;\r\n+        document.getElementById('modalCompanyNameInput').value = company.nomeEmpresa;\r\n \r\n-        // MUDANÇA: Adicionamos uma verificação para garantir que 'company.cnpj' existe\r\n-        // antes de o formatarmos. Se não existir (como no caso do clique na engrenagem),\r\n-        // ele simplesmente não exibirá nada, evitando o erro.\r\n         modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n-\r\n         modalCompanyPasswordInput.value = '';\r\n-\r\n         modalCompanyUsers.innerHTML = '';\r\n         \r\n         if (users.length === 0) {\r\n             modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n@@ -1270,39 +1265,54 @@\n         catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n+\r\n     saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n         if (!selectedCompanyForAdmin) return;\r\n+\r\n+        const token = localStorage.getItem('authToken');\r\n+        const updatedData = {}; // Objeto vazio para guardar apenas o que mudou\r\n+\r\n+        // Pegamos os valores dos campos\r\n+        const newName = document.getElementById('modalCompanyNameInput').value;\r\n         const newPassword = modalCompanyPasswordInput.value;\r\n-        if (!newPassword) {\r\n-            showToast(\"Digite uma nova senha para alterar.\", \"info\");\r\n+\r\n+        // MUDANÇA: Verificamos se o nome foi alterado e adicionamo-lo ao payload\r\n+        if (newName && newName.trim() !== '' && newName.trim() !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+            updatedData.nomeEmpresa = newName.trim();\r\n+        }\r\n+\r\n+        // A lógica da senha continua, mas agora também é adicionada ao mesmo payload\r\n+        if (newPassword && newPassword.length > 0) {\r\n+            updatedData.newPassword = newPassword;\r\n+        }\r\n+\r\n+        // Se nada foi alterado, informamos o usuário e paramos\r\n+        if (Object.keys(updatedData).length === 0) {\r\n+            showToast(\"Nenhuma alteração para salvar.\", \"info\");\r\n             return;\r\n         }\r\n-        const token = localStorage.getItem('authToken');\r\n+\r\n         try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n-                {\r\n-                    method: 'PATCH',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            newPassword: newPassword\r\n-                        })\r\n-                });\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`, {\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify(updatedData) // Enviamos o objeto com as alterações\r\n+            });\r\n             const data = await response.json();\r\n             if (!response.ok) throw new Error(data.message);\r\n             showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n             companyDetailsModal.classList.add('hidden');\r\n-        }\r\n-        catch (error) {\r\n+            renderCompanyList(); // Atualizamos a lista de empresas para refletir o novo nome\r\n+        } catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n+\r\n     closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n     companyDetailsModal.addEventListener('click', (e) => {\r\n         if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n     });\r\n"
                },
                {
                    "date": 1752335652860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1370 @@\n+document.addEventListener('DOMContentLoaded', function() {\r\n+    // --- Elementos HTML (Declarações completas) ---\r\n+    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+    const cnpjInput = document.getElementById('cnpjInput');\r\n+    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+    const adminLoginForm = document.getElementById('adminLoginForm');\r\n+    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+    const companyListDiv = document.getElementById('companyList');\r\n+    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+    const userLoginScreen = document.getElementById('userLoginScreen');\r\n+    const userLoginForm = document.getElementById('userLoginForm');\r\n+    const userInput = document.getElementById('userInput');\r\n+    const userPasswordInput = document.getElementById('userPasswordInput');\r\n+    const registerUserBtn = document.getElementById('registerUserBtn');\r\n+    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+    const welcomeUserText = document.getElementById('welcomeUserText');\r\n+    const mainAppContent = document.getElementById('mainAppContent');\r\n+    const toastMessage = document.getElementById('toastMessage');\r\n+    const logoutBtn = document.getElementById('logoutBtn');\r\n+    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+    const addBillModal = document.getElementById('addBillModal');\r\n+    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n+    const modalCompanyName = document.getElementById('modalCompanyName');\r\n+    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+    const addUserBtn = document.getElementById('addUserBtn');\r\n+    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+    const billModal = document.getElementById('billModal');\r\n+    const closeModalBtn = document.getElementById('closeModal');\r\n+    const saveBillBtn = document.getElementById('saveBill');\r\n+    const deleteBillBtn = document.getElementById('deleteBill');\r\n+    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n+    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n+    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n+    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n+    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+    const settingsBtn = document.getElementById('settingsBtn');\r\n+    const settingsDropdown = document.getElementById('settingsDropdown');\r\n+    const menuEmpresa = document.getElementById('menuEmpresa');\r\n+    const menuUsuarios = document.getElementById('menuUsuarios');\r\n+    const menuPermissoes = document.getElementById('menuPermissoes');\r\n+    const permissionsModal = document.getElementById('permissionsModal');\r\n+    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+    const permissionsContainer = document.getElementById('permissionsContainer');\r\n+    const billForm = document.getElementById('billForm');\r\n+    const installmentsPreview = document.getElementById('installmentsPreview');\r\n+    const installmentsList = document.getElementById('installmentsList');\r\n+    const addToOrganizer = document.getElementById('addToOrganizer');\r\n+    const totalBillsSpan = document.getElementById('totalBills');\r\n+    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+    const clearFormBtn = document.getElementById('clearFormBtn');\r\n+    const prevMonthBtn = document.getElementById('prevMonth');\r\n+    const nextMonthBtn = document.getElementById('nextMonth');\r\n+\r\n+    // --- Variáveis de Dados e Estado ---\r\n+    let currentLoggedInCompany = null;\r\n+    let currentLoggedInUser = null;\r\n+    let isAdminLoggedIn = false;\r\n+    let loggedInViaAdmin = false;\r\n+    let selectedCompanyForAdmin = null;\r\n+    let currentBill = {};\r\n+    let selectedParcel = null;\r\n+    let userBoletos = [];\r\n+    let currentMonth, currentYear;\r\n+\r\n+\r\n+    // --- Lógica para o Modal de Adicionar Boletos ---\r\n+    openAddBillModalBtn.addEventListener('click', () => {\r\n+        clearBillForm();\r\n+        addBillModal.classList.remove('hidden');\r\n+    });\r\n+    closeAddBillModalBtn.addEventListener('click', () => {\r\n+        addBillModal.classList.add('hidden');\r\n+    });\r\n+    addBillModal.addEventListener('click', (e) => {\r\n+        if (e.target === addBillModal) {\r\n+            addBillModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n+    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n+        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n+        if (!originalBarcode) return;\r\n+        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n+        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n+            try {\r\n+                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n+                    {\r\n+                        format: \"ITF\",\r\n+                        width: 1.5,\r\n+                        height: 80,\r\n+                        displayValue: true,\r\n+                        fontSize: 20,\r\n+                        lineColor: \"#000\",\r\n+                        background: \"#FFF\"\r\n+                    });\r\n+                barcodeFullScreenModal.classList.remove('hidden');\r\n+            }\r\n+            catch (e) {\r\n+                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n+            }\r\n+        }\r\n+        else {\r\n+            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n+        }\r\n+    });\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n+        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // Listener para o item \"Gerenciar Usuários\"\r\n+    menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        const companyId = isAdminLoggedIn ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n+        if (companyId) fetchCompanyDetailsAndOpenModal(companyId);\r\n+    });\r\n+\r\n+\r\n+\r\n+// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n+settingsBtn.addEventListener('click', (event) => {\r\n+    event.stopPropagation();\r\n+    settingsDropdown.classList.toggle('hidden');\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (!settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n+\r\n+// Função auxiliar para os links de Empresa e Usuários\r\n+const openManagementModal = (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+    if (companyId) {\r\n+        fetchCompanyDetailsAndOpenModal(companyId);\r\n+    }\r\n+};\r\n+\r\n+// Anexa a função aos links corretos\r\n+menuEmpresa.addEventListener('click', openManagementModal);\r\n+menuUsuarios.addEventListener('click', openManagementModal);\r\n+\r\n+// Listener EXCLUSIVO para o link de Permissões\r\n+    menuPermissoes.addEventListener('click', async (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        \r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/permissions', {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const permissions = await response.json();\r\n+            if (!response.ok) throw new Error(permissions.message);\r\n+\r\n+            // Chamamos a função para preencher o modal com os dados\r\n+            populatePermissionsModal(permissions);\r\n+\r\n+            permissionsModal.classList.remove('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal de permissões\r\n+    closePermissionsModal.addEventListener('click', () => {\r\n+        permissionsModal.classList.add('hidden');\r\n+    });\r\n+\r\n+// Listener para salvar as alterações de permissão automaticamente\r\n+    permissionsContainer.addEventListener('change', async (e) => {\r\n+        const target = e.target;\r\n+        if (target.type !== 'radio') return;\r\n+\r\n+        const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n+        const permissionKey = target.name.split('-')[1];\r\n+        const permissionValue = target.value;\r\n+\r\n+        const payload = {\r\n+            roleToUpdate,\r\n+            permissions: { [permissionKey]: permissionValue }\r\n+        };\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/permissions', {\r\n+                method: 'PATCH',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // Nova função para popular os interruptores com os dados do backend\r\n+    function populatePermissionsModal(permissions) {\r\n+        // Lógica para Gerente\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        // No backend, a permissão é 'all', 'own' ou 'none'. Se for diferente de 'none', consideramos como 'ligado'.\r\n+        document.getElementById('gerente-canUpdate-boleto').checked = permissions.Gerente.canUpdate !== 'none';\r\n+        document.getElementById('gerente-canDelete-boleto').checked = permissions.Gerente.canDelete !== 'none';\r\n+        \r\n+        // Lógica para Funcionário\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.getElementById('funcionario-canUpdate-boleto').checked = permissions.Funcionário.canUpdate !== 'none';\r\n+        document.getElementById('funcionario-canDelete-boleto').checked = permissions.Funcionário.canDelete !== 'none';\r\n+    }\r\n+\r\n+    document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n+    // Lemos o estado de cada interruptor e montamos o objeto de permissões\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            // Se o interruptor estiver ligado, salvamos 'all', senão, 'none'.\r\n+            canUpdate: document.getElementById('gerente-canUpdate-boleto').checked ? 'all' : 'none',\r\n+            canDelete: document.getElementById('gerente-canDelete-boleto').checked ? 'all' : 'none',\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            // Para funcionários, a regra pode ser 'own' em vez de 'all'\r\n+            canUpdate: document.getElementById('funcionario-canUpdate-boleto').checked ? 'own' : 'none',\r\n+            canDelete: document.getElementById('funcionario-canDelete-boleto').checked ? 'own' : 'none',\r\n+        }\r\n+    };\r\n+\r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch('http://localhost:5000/api/permissions', {\r\n+            method: 'PATCH',\r\n+            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+            body: JSON.stringify(newPermissions)\r\n+        });\r\n+        const data = await response.json();\r\n+        if (!response.ok) throw new Error(data.message);\r\n+        \r\n+        showToast(data.message, 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast('Erro ao salvar permissões: ' + error.message, 'error');\r\n+    }\r\n+});\r\n+\r\n+// Listener para fechar o modal\r\n+closePermissionsModal.addEventListener('click', () => {\r\n+    permissionsModal.classList.add('hidden');\r\n+\r\n+    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n+    function closeQuickAddModal() {\r\n+        quickUserAddModal.classList.add('hidden');\r\n+    }\r\n+    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n+    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n+    quickUserAddForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const username = document.getElementById('quickAddUsername').value;\r\n+        const password = document.getElementById('quickAddPassword').value;\r\n+        if (!currentLoggedInCompany) {\r\n+            showToast('Erro: Empresa não identificada.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            closeQuickAddModal();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    // --- Funções de Utilitário e de Tela ---\r\n+    function showToast(message, type = 'success') {\r\n+        toastMessage.textContent = message;\r\n+        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n+        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n+        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n+        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n+        toastMessage.classList.remove('hidden');\r\n+        setTimeout(() => {\r\n+            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n+            setTimeout(() => {\r\n+                toastMessage.classList.add('hidden');\r\n+                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n+            }, 300);\r\n+        }, 3000);\r\n+    }\r\n+\r\n+    function hideAllScreens() {\r\n+        initialLoginScreen.classList.add('hidden');\r\n+        cnpjLoginScreen.classList.add('hidden');\r\n+        adminLoginScreen.classList.add('hidden');\r\n+        userLoginScreen.classList.add('hidden');\r\n+        adminDashboardScreen.classList.add('hidden');\r\n+        mainAppContent.classList.add('hidden');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        addBillModal.classList.add('hidden');\r\n+        billModal.classList.add('hidden');\r\n+        barcodeFullScreenModal.classList.add('hidden');\r\n+        quickUserAddModal.classList.add('hidden');\r\n+        openAddBillModalBtn.classList.add('hidden');\r\n+    }\r\n+\r\n+    function showInitialLogin() {\r\n+        hideAllScreens();\r\n+        initialLoginScreen.classList.remove('hidden');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        currentLoggedInCompany = null;\r\n+        currentLoggedInUser = null;\r\n+        isAdminLoggedIn = false;\r\n+        loggedInViaAdmin = false;\r\n+    }\r\n+\r\n+    function showCnpjLogin() {\r\n+        hideAllScreens();\r\n+        cnpjLoginForm.reset();\r\n+        cnpjLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showAdminLogin() {\r\n+        hideAllScreens();\r\n+        adminLoginForm.reset();\r\n+        adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showUserLogin(companyName) {\r\n+        hideAllScreens();\r\n+        userLoginForm.reset();\r\n+        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+        userLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showMainApp() {\r\n+        hideAllScreens();\r\n+        mainAppContent.classList.remove('hidden');\r\n+\r\n+        // Mantenha esta lógica que já tínhamos\r\n+        if (loggedInViaAdmin) {\r\n+            backToAdminBtn.classList.remove('hidden');\r\n+        } else {\r\n+            backToAdminBtn.classList.add('hidden');\r\n+        }\r\n+        \r\n+        if (!isAdminLoggedIn && currentLoggedInUser && currentLoggedInUser.role === 'Proprietário') {\r\n+            settingsMenuContainer.classList.remove('hidden');\r\n+        } else {\r\n+            settingsMenuContainer.classList.add('hidden');\r\n+        }\r\n+\r\n+        // ADICIONE ESTA LINHA para mostrar o botão \"+\"\r\n+        openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+        updateBillsOrganizer();\r\n+    }\r\n+\r\n+    function showAdminDashboard() {\r\n+        hideAllScreens();\r\n+        adminDashboardScreen.classList.remove('hidden');\r\n+        renderCompanyList();\r\n+    }\r\n+\r\n+    function formatCnpj(value) {\r\n+        value = value.replace(/\\D/g, '');\r\n+        if (value.length > 14) value = value.slice(0, 14);\r\n+        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n+        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n+        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n+        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n+        return value;\r\n+    }\r\n+    // --- Lógica de Navegação do Calendário ---\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth--;\r\n+        if (currentMonth < 0) {\r\n+            currentMonth = 11;\r\n+            currentYear--;\r\n+        }\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth++;\r\n+        if (currentMonth > 11) {\r\n+            currentMonth = 0;\r\n+            currentYear++;\r\n+        }\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+    // --- Lógica de Autenticação e Outras Funções ---\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const cnpj = cnpjInput.value;\r\n+        const password = cnpjPasswordInput.value;\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/auth/login/company',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            cnpj,\r\n+                            password\r\n+                        }),\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInCompany = data.company;\r\n+            loggedInViaAdmin = false;\r\n+            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    adminLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const username = adminUsernameInput.value;\r\n+        const password = adminPasswordInput.value;\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            localStorage.setItem('authToken', data.token);\r\n+            isAdminLoggedIn = true;\r\n+            showToast('Login de Administrador bem-sucedido!', 'success');\r\n+            showAdminDashboard();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    userLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const username = userInput.value;\r\n+        const password = userPasswordInput.value;\r\n+        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n+            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/auth/login/user',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInUser = data.user;\r\n+            showMainApp();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    registerUserBtn.addEventListener('click', async function () {\r\n+        const username = userInput.value;\r\n+        const password = userPasswordInput.value;\r\n+        if (!username || !password) {\r\n+            showToast('Por favor, preencha o nome de usuário e a senha.', 'error');\r\n+            return;\r\n+        }\r\n+        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n+            showToast('Erro: Nenhuma empresa selecionada. Faça o login da empresa novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            userLoginForm.reset();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    backToAdminBtn.addEventListener('click', () => {\r\n+        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n+\r\n+        // 1. Recuperamos o token original do admin que guardámos\r\n+        const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+        if (!adminToken) {\r\n+            showToast(\"Erro: Token de administrador não encontrado. Faça o login novamente.\", \"error\");\r\n+            showInitialLogin();\r\n+            return;\r\n+        }\r\n+\r\n+        // 2. Restauramos o token do admin como o token ativo\r\n+        localStorage.setItem('authToken', adminToken);\r\n+        localStorage.removeItem('superAdminToken'); // Limpamos o token temporário\r\n+\r\n+        // 3. Resetamos o estado da aplicação e mostramos o painel\r\n+        currentLoggedInUser = null;\r\n+        currentLoggedInCompany = null;\r\n+        loggedInViaAdmin = false;\r\n+        isAdminLoggedIn = true;\r\n+        showAdminDashboard();\r\n+    });\r\n+\r\n+    async function renderCompanyList() {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) return;\r\n+\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/companies', {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n+\r\n+            const companies = await response.json();\r\n+            companyListDiv.innerHTML = '';\r\n+\r\n+            if (companies.length === 0) {\r\n+                noCompaniesMessage.classList.remove('hidden');\r\n+            } else {\r\n+                noCompaniesMessage.classList.add('hidden');\r\n+                companies.forEach(company => {\r\n+                    const companyCard = document.createElement('div');\r\n+                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                    \r\n+                    // MUDANÇA: A API agora não retorna a contagem de usuários diretamente na lista.\r\n+                    // Podemos mostrar esta informação de outra forma ou remover por enquanto para simplificar.\r\n+                    companyCard.innerHTML = `\r\n+                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                        </div>\r\n+                    `;\r\n+                    companyListDiv.appendChild(companyCard);\r\n+                });\r\n+\r\n+                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n+                    button.addEventListener('click', async (e) => {\r\n+                        const companyId = e.target.dataset.companyId;\r\n+                        const token = localStorage.getItem('authToken');\r\n+                        try {\r\n+                            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n+                                headers: {\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                }\r\n+                            });\r\n+                            \r\n+                            // MUDANÇA: A resposta agora é desestruturada em 'company' e 'users'.\r\n+                            const { company, users } = await response.json();\r\n+                            \r\n+                            if (!response.ok) throw new Error(company.message); // Usa a mensagem de erro do objeto company\r\n+                            \r\n+                            // MUDANÇA: Passamos os dois objetos para a função do modal.\r\n+                            openCompanyDetailsModal(company, users);\r\n+\r\n+                        } catch (error) {\r\n+                            showToast(error.message, 'error');\r\n+                        }\r\n+                    });\r\n+                });\r\n+\r\n+                // O listener do 'enter-company-btn' precisa ser atualizado também para funcionar com a nova lógica\r\n+                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+                    button.addEventListener('click', async (e) => {\r\n+                        const companyId = e.target.dataset.companyId;\r\n+                        const token = localStorage.getItem('authToken');\r\n+                        try {\r\n+                            // Precisamos buscar os usuários da empresa para poder entrar como o primeiro\r\n+                            const companyDetailsResponse = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n+                                headers: { 'Authorization': `Bearer ${token}` }\r\n+                            });\r\n+                            const { company, users } = await companyDetailsResponse.json();\r\n+\r\n+                            if (!companyDetailsResponse.ok) throw new Error(company.message);\r\n+                            \r\n+                            if (users.length === 0) {\r\n+                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n+                                return;\r\n+                            }\r\n+\r\n+                            // Entramos como o primeiro usuário da lista\r\n+                            const userId = users[0]._id; \r\n+                            \r\n+                            const impersonateResponse = await fetch('http://localhost:5000/api/admin/impersonate', {\r\n+                                method: 'POST',\r\n+                                headers: {\r\n+                                    'Content-Type': 'application/json',\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                },\r\n+                                body: JSON.stringify({ companyId, userId })\r\n+                            });\r\n+                            const data = await impersonateResponse.json();\r\n+                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n+                            \r\n+                            showToast(`Entrando na empresa ${company.nomeEmpresa}...`, 'success');\r\n+                            localStorage.setItem('superAdminToken', token);\r\n+                            localStorage.setItem('authToken', data.token);\r\n+                            currentLoggedInCompany = company;\r\n+                            currentLoggedInUser = data.user;\r\n+                            loggedInViaAdmin = true;\r\n+                            showMainApp();\r\n+                        } catch (error) {\r\n+                            showToast(error.message, 'error');\r\n+                        }\r\n+                    });\r\n+                });\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    createCompanyBtn.addEventListener('click', async () => {\r\n+        // 1. Pedimos os dados da empresa, como antes\r\n+        const nomeEmpresa = prompt(\"Digite o nome da nova empresa:\");\r\n+        if (!nomeEmpresa) return;\r\n+        const cnpj = prompt(\"Digite o CNPJ da nova empresa:\");\r\n+        if (!cnpj) return;\r\n+        const senhaEmpresa = prompt(\"Digite uma senha para a nova empresa:\");\r\n+        if (!senhaEmpresa) return;\r\n+\r\n+        // 2. MUDANÇA: Pedimos os dados para o novo usuário Proprietário\r\n+        const ownerUsername = prompt(\"Digite o NOME DE USUÁRIO para o Proprietário:\");\r\n+        if (!ownerUsername) return;\r\n+        const ownerPassword = prompt(`Digite a SENHA para o usuário proprietário \"${ownerUsername}\":`);\r\n+        if (!ownerPassword) return;\r\n+\r\n+        // 3. Pegamos o token do admin para autorizar a criação\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/companies/register', {\r\n+                method: 'POST',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                // 4. MUDANÇA: Enviamos o novo payload completo para o backend\r\n+                body: JSON.stringify({\r\n+                    nomeEmpresa,\r\n+                    cnpj,\r\n+                    senhaEmpresa,\r\n+                    ownerUsername,\r\n+                    ownerPassword\r\n+                })\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || \"Não foi possível criar a empresa.\");\r\n+            \r\n+            showToast(data.message, 'success');\r\n+            renderCompanyList(); // Atualiza a lista de empresas na tela\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // --- Lógica Principal do App de Boletos ---\r\n+    function initializeCalendarDate() {\r\n+        const today = new Date();\r\n+        currentMonth = today.getMonth();\r\n+        currentYear = today.getFullYear();\r\n+        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n+    }\r\n+\r\n+    async function updateBillsOrganizer() {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n+            showInitialLogin(); // Redireciona para o login se não houver token\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n+            const response = await fetch('http://localhost:5000/api/boletos', {\r\n+                method: 'GET',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) {\r\n+                const errorData = await response.json();\r\n+                throw new Error(errorData.message || \"Erro ao buscar boletos.\");\r\n+            }\r\n+            \r\n+            // A resposta da nova API já vem no formato de uma lista de boletos,\r\n+            // com os dados do usuário \"populados\".\r\n+            userBoletos = await response.json();\r\n+            \r\n+            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+            totalBillsSpan.textContent = totalParcels;\r\n+\r\n+            // As funções de renderização e resumo são chamadas como antes.\r\n+            updateMonthlySummary();\r\n+            \r\n+            // A lógica para alternar entre calendário e lista diária continua a mesma.\r\n+            if (window.innerWidth >= 1024) {\r\n+                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n+                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n+                renderCalendar();\r\n+            } else {\r\n+                document.getElementById('billsOrganizer').classList.add('hidden');\r\n+                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n+                renderDailyBills();\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Se a busca falhar (ex: token expirado), deslogamos o usuário\r\n+            showInitialLogin();\r\n+        }\r\n+    }\r\n+\r\n+    function updateMonthlySummary() {\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+            });\r\n+        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalNaoPago = totalMes - totalPago;\r\n+        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return dueDate < today && !parcel.paid;\r\n+            });\r\n+        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n+            {\r\n+                style: 'currency',\r\n+                currency: 'BRL'\r\n+            });\r\n+        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n+        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n+    }\r\n+\r\n+    function renderCalendar() {\r\n+        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+        const calendarDays = document.getElementById('calendarDays');\r\n+        calendarDays.innerHTML = '';\r\n+        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+        for (let i = 0; i < firstDayOfMonth; i++) {\r\n+            const emptyCell = document.createElement('div');\r\n+            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n+            calendarDays.appendChild(emptyCell);\r\n+        }\r\n+        for (let day = 1; day <= daysInMonth; day++) {\r\n+            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+            const dayCell = document.createElement('div');\r\n+            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n+            dayCell.dataset.date = dateStr;\r\n+            const dayHeader = document.createElement('div');\r\n+            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+            dayHeader.textContent = day;\r\n+            dayCell.appendChild(dayHeader);\r\n+            dayCell.addEventListener('click', (e) => {\r\n+                if (e.target.closest('.bill-card')) return;\r\n+                const clickedDate = e.currentTarget.dataset.date;\r\n+                clearBillForm();\r\n+                document.getElementById('dueDate').value = clickedDate;\r\n+                addBillModal.classList.remove('hidden');\r\n+            });\r\n+            userBoletos.forEach(bill => {\r\n+                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                    const parcelElement = document.createElement('div');\r\n+                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n+                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                    dayCell.appendChild(parcelElement);\r\n+                });\r\n+            });\r\n+            calendarDays.appendChild(dayCell);\r\n+        }\r\n+    }\r\n+\r\n+    function renderDailyBills() {\r\n+        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n+    }\r\n+\r\n+    function clearBillForm() {\r\n+        billForm.reset();\r\n+        installmentsPreview.classList.add('hidden');\r\n+        installmentsList.innerHTML = '';\r\n+        currentBill = {};\r\n+    }\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    billForm.addEventListener('submit', function (e) {\r\n+        e.preventDefault();\r\n+        const billName = document.getElementById('billName').value;\r\n+        const dueDate = document.getElementById('dueDate').value;\r\n+        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n+        const installments = parseInt(document.getElementById('installments').value);\r\n+        const description = document.getElementById('description').value;\r\n+        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+        const barcode = document.getElementById('barcode').value;\r\n+        if (!billName || !dueDate || !totalAmount || !installments) {\r\n+            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+            return;\r\n+        }\r\n+        currentBill = {\r\n+            name: billName,\r\n+            parcels: []\r\n+        };\r\n+        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+        installmentsList.innerHTML = '';\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        currentBill.parcels.push({\r\n+            id: `${Date.now()}-${i}`,\r\n+            number: i + 1,\r\n+            amount: parcelAmount,\r\n+            dueDate: dateForInput,\r\n+            paid: false,\r\n+            description: description,\r\n+            barcode: barcode\r\n+        });\r\n+\r\n+        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n+            day: '2-digit',\r\n+            month: '2-digit',\r\n+            year: 'numeric'\r\n+        });\r\n+        \r\n+        const parcelItem = document.createElement('div');\r\n+        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n+        \r\n+        parcelItem.innerHTML = `\r\n+            <div class=\"flex items-center space-x-4\">\r\n+                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n+                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n+            </div>\r\n+            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n+        `;\r\n+        \r\n+        installmentsList.appendChild(parcelItem);\r\n+    }\r\n+        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+            input.addEventListener('input', (e) => {\r\n+                const index = parseInt(e.target.dataset.parcelIndex);\r\n+                const newAmount = parseFloat(e.target.value) || 0;\r\n+                if (!isNaN(newAmount)) {\r\n+                    currentBill.parcels[index].amount = newAmount;\r\n+                    updatePreviewTotal();\r\n+                }\r\n+            });\r\n+            input.addEventListener('blur', (e) => {\r\n+                const newAmount = parseFloat(e.target.value) || 0;\r\n+                e.target.value = newAmount.toFixed(2);\r\n+            });\r\n+        });\r\n+        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+            input.addEventListener('change', (e) => {\r\n+                const index = parseInt(e.target.dataset.parcelIndex);\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            });\r\n+        });\r\n+        installmentsPreview.classList.remove('hidden');\r\n+        updatePreviewTotal();\r\n+    });\r\n+\r\n+    function updatePreviewTotal() {\r\n+        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n+        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+    }\r\n+    addToOrganizer.addEventListener('click', async function () {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        if (!currentBill || !currentBill.name) {\r\n+            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/boletos',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(currentBill)\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n+            showToast(data.message, 'success');\r\n+            addBillModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // --- Lógica do Modal de Edição de Boletos ---\r\n+    function openBillModal(bill, parcel) {\r\n+        // MUDANÇA: Usamos bill._id para o parentId e o parcel já terá o seu próprio _id.\r\n+        selectedParcel = { ...parcel, parentId: bill._id };\r\n+        \r\n+        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n+        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n+        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n+        modalBillBarcodeInput.value = parcel.barcode || '';\r\n+        modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n+            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n+        } else {\r\n+            showFullScreenBarcodeBtn.classList.add('hidden');\r\n+        }\r\n+        billModal.classList.remove('hidden');\r\n+    }\r\n+\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    billModal.addEventListener('click', (e) => {\r\n+        if (e.target === billModal) billModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    saveBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+\r\n+        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n+        const url = `http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n+\r\n+        const updatedData = {\r\n+            paid: document.getElementById('modalBillPaid').checked,\r\n+            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n+            dueDate: document.getElementById('modalBillDate').value,\r\n+            description: document.getElementById('modalBillDescription').value,\r\n+            barcode: document.getElementById('modalBillBarcode').value\r\n+        };\r\n+\r\n+        try {\r\n+            const response = await fetch(url, { // Usamos a nova URL\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify(updatedData)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Parcela atualizada com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    deleteBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel) return;\r\n+        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        \r\n+        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n+        const url = `http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n+\r\n+        try {\r\n+            const response = await fetch(url, { // Usamos a nova URL\r\n+                method: 'DELETE',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Parcela excluída com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    deleteEntireBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel || !selectedParcel.parentId) {\r\n+            showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n+            return;\r\n+        }\r\n+        \r\n+        if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n+            return;\r\n+        }\r\n+        \r\n+        const token = localStorage.getItem('authToken');\r\n+        // MUDANÇA: O ID do boleto vem de selectedParcel.parentId, que agora já é o _id correto.\r\n+        const boletoId = selectedParcel.parentId; \r\n+        \r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/boletos/${boletoId}`, {\r\n+                method: 'DELETE',\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            \r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast('Boleto completo excluído com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+            \r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+            \r\n+            // A resposta da API é um objeto { company, users }\r\n+            const data = await response.json(); \r\n+\r\n+            if (!response.ok) {\r\n+                // A mensagem de erro pode estar em 'data.message'\r\n+                throw new Error(data.message || 'Não foi possível buscar os detalhes da empresa.');\r\n+            }\r\n+\r\n+            // MUDANÇA CRÍTICA: Em vez de passar o objeto 'data' inteiro,\r\n+            // passamos as suas propriedades 'company' e 'users' corretamente.\r\n+            openCompanyDetailsModal(data.company, data.users);\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    // --- Lógica do Modal de Detalhes da Empresa ---\r\n+    function openCompanyDetailsModal(company, users) {\r\n+        selectedCompanyForAdmin = company;\r\n+        document.getElementById('modalCompanyNameInput').value = company.nomeEmpresa;\r\n+\r\n+        modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n+        modalCompanyPasswordInput.value = '';\r\n+        modalCompanyUsers.innerHTML = '';\r\n+        \r\n+        if (users.length === 0) {\r\n+            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+        } else {\r\n+            // A lógica para listar usuários permanece a mesma\r\n+            const assignableRoles = isAdminLoggedIn ?\r\n+                ['Proprietário', 'Gerente', 'Funcionário'] :\r\n+                ['Gerente', 'Funcionário'];\r\n+\r\n+            users.forEach(user => {\r\n+                const userItem = document.createElement('div');\r\n+                userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n+\r\n+                const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n+                let roleDisplay = '';\r\n+\r\n+                if (isEditable) {\r\n+                    const optionsHTML = assignableRoles.map(role => {\r\n+                        if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n+                        return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n+                    }).join('');\r\n+                    roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n+                } else {\r\n+                    roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n+                }\r\n+\r\n+                userItem.innerHTML = `\r\n+                    <div class=\"flex items-center space-x-3\">\r\n+                        <span class=\"text-white\">${user.username}</span>\r\n+                        ${roleDisplay}\r\n+                    </div>\r\n+                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                `;\r\n+                modalCompanyUsers.appendChild(userItem);\r\n+            });\r\n+        }\r\n+\r\n+        // Recriamos os listeners para garantir que funcionem\r\n+        document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+            button.addEventListener('click', (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const companyId = selectedCompanyForAdmin._id;\r\n+                handleRemoveUser(companyId, userId);\r\n+            });\r\n+        });\r\n+\r\n+        document.querySelectorAll('.role-select').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const token = localStorage.getItem('authToken');\r\n+                const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+                try {\r\n+                    const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}/role`, {\r\n+                        method: 'PATCH',\r\n+                        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                        body: JSON.stringify({ role: newRole })\r\n+                    });\r\n+\r\n+                    const data = await response.json();\r\n+                    if (!response.ok) throw new Error(data.message);\r\n+                    showToast(data.message, 'success');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                    fetchCompanyDetailsAndOpenModal(companyId);\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        companyDetailsModal.classList.remove('hidden');\r\n+    }\r\n+\r\n+    async function handleRemoveUser(companyId, userId) {\r\n+        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+    addUserBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+        const username = prompt(\"Digite o nome do novo usuário:\");\r\n+        if (!username) return;\r\n+        const password = prompt(`Digite a senha para o usuário \"${username}\":`);\r\n+        if (!password) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: selectedCompanyForAdmin._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    deleteCompanyBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n+            return;\r\n+        }\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+\r\n+        const token = localStorage.getItem('authToken');\r\n+        const updatedData = {}; // Objeto vazio para guardar apenas o que mudou\r\n+\r\n+        // Pegamos os valores dos campos\r\n+        const newName = document.getElementById('modalCompanyNameInput').value;\r\n+        const newPassword = modalCompanyPasswordInput.value;\r\n+\r\n+        // MUDANÇA: Verificamos se o nome foi alterado e adicionamo-lo ao payload\r\n+        if (newName && newName.trim() !== '' && newName.trim() !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+            updatedData.nomeEmpresa = newName.trim();\r\n+        }\r\n+\r\n+        // A lógica da senha continua, mas agora também é adicionada ao mesmo payload\r\n+        if (newPassword && newPassword.length > 0) {\r\n+            updatedData.newPassword = newPassword;\r\n+        }\r\n+\r\n+        // Se nada foi alterado, informamos o usuário e paramos\r\n+        if (Object.keys(updatedData).length === 0) {\r\n+            showToast(\"Nenhuma alteração para salvar.\", \"info\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`, {\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify(updatedData) // Enviamos o objeto com as alterações\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList(); // Atualizamos a lista de empresas para refletir o novo nome\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    companyDetailsModal.addEventListener('click', (e) => {\r\n+        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n+    });\r\n+    // --- Inicialização ---\r\n+    initializeCalendarDate();\r\n+    showInitialLogin();\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752335693178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,1368 +236,71 @@\n         document.getElementById('funcionario-canUpdate-boleto').checked = permissions.Funcionário.canUpdate !== 'none';\r\n         document.getElementById('funcionario-canDelete-boleto').checked = permissions.Funcionário.canDelete !== 'none';\r\n     }\r\n \r\n-    document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n-    // Lemos o estado de cada interruptor e montamos o objeto de permissões\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            // Se o interruptor estiver ligado, salvamos 'all', senão, 'none'.\r\n-            canUpdate: document.getElementById('gerente-canUpdate-boleto').checked ? 'all' : 'none',\r\n-            canDelete: document.getElementById('gerente-canDelete-boleto').checked ? 'all' : 'none',\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            // Para funcionários, a regra pode ser 'own' em vez de 'all'\r\n-            canUpdate: document.getElementById('funcionario-canUpdate-boleto').checked ? 'own' : 'none',\r\n-            canDelete: document.getElementById('funcionario-canDelete-boleto').checked ? 'own' : 'none',\r\n-        }\r\n-    };\r\n-\r\n+// Atualizamos o listener do menu para usar a nova função\r\n+menuPermissoes.addEventListener('click', async (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    \r\n     try {\r\n         const token = localStorage.getItem('authToken');\r\n         const response = await fetch('http://localhost:5000/api/permissions', {\r\n-            method: 'PATCH',\r\n-            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-            body: JSON.stringify(newPermissions)\r\n+            headers: { 'Authorization': `Bearer ${token}` }\r\n         });\r\n-        const data = await response.json();\r\n-        if (!response.ok) throw new Error(data.message);\r\n-        \r\n-        showToast(data.message, 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n+        const permissions = await response.json();\r\n+        if (!response.ok) throw new Error(permissions.message);\r\n+\r\n+        // Chamamos a função para preencher o modal com os dados\r\n+        populatePermissionsModal(permissions);\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n     } catch (error) {\r\n-        showToast('Erro ao salvar permissões: ' + error.message, 'error');\r\n+        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n     }\r\n });\r\n \r\n-// Listener para fechar o modal\r\n-closePermissionsModal.addEventListener('click', () => {\r\n-    permissionsModal.classList.add('hidden');\r\n \r\n-    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n-    function closeQuickAddModal() {\r\n-        quickUserAddModal.classList.add('hidden');\r\n-    }\r\n-    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n-    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n-    quickUserAddForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const username = document.getElementById('quickAddUsername').value;\r\n-        const password = document.getElementById('quickAddPassword').value;\r\n-        if (!currentLoggedInCompany) {\r\n-            showToast('Erro: Empresa não identificada.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            closeQuickAddModal();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    // --- Funções de Utilitário e de Tela ---\r\n-    function showToast(message, type = 'success') {\r\n-        toastMessage.textContent = message;\r\n-        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n-        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n-        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n-        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n-        toastMessage.classList.remove('hidden');\r\n-        setTimeout(() => {\r\n-            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n-            setTimeout(() => {\r\n-                toastMessage.classList.add('hidden');\r\n-                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n-            }, 300);\r\n-        }, 3000);\r\n-    }\r\n-\r\n-    function hideAllScreens() {\r\n-        initialLoginScreen.classList.add('hidden');\r\n-        cnpjLoginScreen.classList.add('hidden');\r\n-        adminLoginScreen.classList.add('hidden');\r\n-        userLoginScreen.classList.add('hidden');\r\n-        adminDashboardScreen.classList.add('hidden');\r\n-        mainAppContent.classList.add('hidden');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        addBillModal.classList.add('hidden');\r\n-        billModal.classList.add('hidden');\r\n-        barcodeFullScreenModal.classList.add('hidden');\r\n-        quickUserAddModal.classList.add('hidden');\r\n-        openAddBillModalBtn.classList.add('hidden');\r\n-    }\r\n-\r\n-    function showInitialLogin() {\r\n-        hideAllScreens();\r\n-        initialLoginScreen.classList.remove('hidden');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        currentLoggedInCompany = null;\r\n-        currentLoggedInUser = null;\r\n-        isAdminLoggedIn = false;\r\n-        loggedInViaAdmin = false;\r\n-    }\r\n-\r\n-    function showCnpjLogin() {\r\n-        hideAllScreens();\r\n-        cnpjLoginForm.reset();\r\n-        cnpjLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showAdminLogin() {\r\n-        hideAllScreens();\r\n-        adminLoginForm.reset();\r\n-        adminLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showUserLogin(companyName) {\r\n-        hideAllScreens();\r\n-        userLoginForm.reset();\r\n-        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-        userLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showMainApp() {\r\n-        hideAllScreens();\r\n-        mainAppContent.classList.remove('hidden');\r\n-\r\n-        // Mantenha esta lógica que já tínhamos\r\n-        if (loggedInViaAdmin) {\r\n-            backToAdminBtn.classList.remove('hidden');\r\n-        } else {\r\n-            backToAdminBtn.classList.add('hidden');\r\n-        }\r\n-        \r\n-        if (!isAdminLoggedIn && currentLoggedInUser && currentLoggedInUser.role === 'Proprietário') {\r\n-            settingsMenuContainer.classList.remove('hidden');\r\n-        } else {\r\n-            settingsMenuContainer.classList.add('hidden');\r\n-        }\r\n-\r\n-        // ADICIONE ESTA LINHA para mostrar o botão \"+\"\r\n-        openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-        updateBillsOrganizer();\r\n-    }\r\n-\r\n-    function showAdminDashboard() {\r\n-        hideAllScreens();\r\n-        adminDashboardScreen.classList.remove('hidden');\r\n-        renderCompanyList();\r\n-    }\r\n-\r\n-    function formatCnpj(value) {\r\n-        value = value.replace(/\\D/g, '');\r\n-        if (value.length > 14) value = value.slice(0, 14);\r\n-        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n-        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n-        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n-        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n-        return value;\r\n-    }\r\n-    // --- Lógica de Navegação do Calendário ---\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth--;\r\n-        if (currentMonth < 0) {\r\n-            currentMonth = 11;\r\n-            currentYear--;\r\n-        }\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth++;\r\n-        if (currentMonth > 11) {\r\n-            currentMonth = 0;\r\n-            currentYear++;\r\n-        }\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-    // --- Lógica de Autenticação e Outras Funções ---\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const cnpj = cnpjInput.value;\r\n-        const password = cnpjPasswordInput.value;\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/company',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            cnpj,\r\n-                            password\r\n-                        }),\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInCompany = data.company;\r\n-            loggedInViaAdmin = false;\r\n-            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    adminLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const username = adminUsernameInput.value;\r\n-        const password = adminPasswordInput.value;\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            localStorage.setItem('authToken', data.token);\r\n-            isAdminLoggedIn = true;\r\n-            showToast('Login de Administrador bem-sucedido!', 'success');\r\n-            showAdminDashboard();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    userLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const username = userInput.value;\r\n-        const password = userPasswordInput.value;\r\n-        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n-            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/user',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInUser = data.user;\r\n-            showMainApp();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    registerUserBtn.addEventListener('click', async function () {\r\n-        const username = userInput.value;\r\n-        const password = userPasswordInput.value;\r\n-        if (!username || !password) {\r\n-            showToast('Por favor, preencha o nome de usuário e a senha.', 'error');\r\n-            return;\r\n-        }\r\n-        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n-            showToast('Erro: Nenhuma empresa selecionada. Faça o login da empresa novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            userLoginForm.reset();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    backToAdminBtn.addEventListener('click', () => {\r\n-        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n-\r\n-        // 1. Recuperamos o token original do admin que guardámos\r\n-        const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-        if (!adminToken) {\r\n-            showToast(\"Erro: Token de administrador não encontrado. Faça o login novamente.\", \"error\");\r\n-            showInitialLogin();\r\n-            return;\r\n-        }\r\n-\r\n-        // 2. Restauramos o token do admin como o token ativo\r\n-        localStorage.setItem('authToken', adminToken);\r\n-        localStorage.removeItem('superAdminToken'); // Limpamos o token temporário\r\n-\r\n-        // 3. Resetamos o estado da aplicação e mostramos o painel\r\n-        currentLoggedInUser = null;\r\n-        currentLoggedInCompany = null;\r\n-        loggedInViaAdmin = false;\r\n-        isAdminLoggedIn = true;\r\n-        showAdminDashboard();\r\n-    });\r\n-\r\n-    async function renderCompanyList() {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) return;\r\n-\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/companies', {\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-\r\n-            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n-\r\n-            const companies = await response.json();\r\n-            companyListDiv.innerHTML = '';\r\n-\r\n-            if (companies.length === 0) {\r\n-                noCompaniesMessage.classList.remove('hidden');\r\n-            } else {\r\n-                noCompaniesMessage.classList.add('hidden');\r\n-                companies.forEach(company => {\r\n-                    const companyCard = document.createElement('div');\r\n-                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                    \r\n-                    // MUDANÇA: A API agora não retorna a contagem de usuários diretamente na lista.\r\n-                    // Podemos mostrar esta informação de outra forma ou remover por enquanto para simplificar.\r\n-                    companyCard.innerHTML = `\r\n-                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                        </div>\r\n-                    `;\r\n-                    companyListDiv.appendChild(companyCard);\r\n-                });\r\n-\r\n-                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n-                    button.addEventListener('click', async (e) => {\r\n-                        const companyId = e.target.dataset.companyId;\r\n-                        const token = localStorage.getItem('authToken');\r\n-                        try {\r\n-                            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n-                                headers: {\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                }\r\n-                            });\r\n-                            \r\n-                            // MUDANÇA: A resposta agora é desestruturada em 'company' e 'users'.\r\n-                            const { company, users } = await response.json();\r\n-                            \r\n-                            if (!response.ok) throw new Error(company.message); // Usa a mensagem de erro do objeto company\r\n-                            \r\n-                            // MUDANÇA: Passamos os dois objetos para a função do modal.\r\n-                            openCompanyDetailsModal(company, users);\r\n-\r\n-                        } catch (error) {\r\n-                            showToast(error.message, 'error');\r\n-                        }\r\n-                    });\r\n-                });\r\n-\r\n-                // O listener do 'enter-company-btn' precisa ser atualizado também para funcionar com a nova lógica\r\n-                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-                    button.addEventListener('click', async (e) => {\r\n-                        const companyId = e.target.dataset.companyId;\r\n-                        const token = localStorage.getItem('authToken');\r\n-                        try {\r\n-                            // Precisamos buscar os usuários da empresa para poder entrar como o primeiro\r\n-                            const companyDetailsResponse = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n-                                headers: { 'Authorization': `Bearer ${token}` }\r\n-                            });\r\n-                            const { company, users } = await companyDetailsResponse.json();\r\n-\r\n-                            if (!companyDetailsResponse.ok) throw new Error(company.message);\r\n-                            \r\n-                            if (users.length === 0) {\r\n-                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n-                                return;\r\n-                            }\r\n-\r\n-                            // Entramos como o primeiro usuário da lista\r\n-                            const userId = users[0]._id; \r\n-                            \r\n-                            const impersonateResponse = await fetch('http://localhost:5000/api/admin/impersonate', {\r\n-                                method: 'POST',\r\n-                                headers: {\r\n-                                    'Content-Type': 'application/json',\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                },\r\n-                                body: JSON.stringify({ companyId, userId })\r\n-                            });\r\n-                            const data = await impersonateResponse.json();\r\n-                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n-                            \r\n-                            showToast(`Entrando na empresa ${company.nomeEmpresa}...`, 'success');\r\n-                            localStorage.setItem('superAdminToken', token);\r\n-                            localStorage.setItem('authToken', data.token);\r\n-                            currentLoggedInCompany = company;\r\n-                            currentLoggedInUser = data.user;\r\n-                            loggedInViaAdmin = true;\r\n-                            showMainApp();\r\n-                        } catch (error) {\r\n-                            showToast(error.message, 'error');\r\n-                        }\r\n-                    });\r\n-                });\r\n+    // Adicionamos o listener para o novo botão Salvar\r\n+    document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n+        // Lemos o estado de cada interruptor e montamos o objeto de permissões\r\n+        const newPermissions = {\r\n+            Gerente: {\r\n+                canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+                // Se o interruptor estiver ligado, salvamos 'all', senão, 'none'.\r\n+                canUpdate: document.getElementById('gerente-canUpdate-boleto').checked ? 'all' : 'none',\r\n+                canDelete: document.getElementById('gerente-canDelete-boleto').checked ? 'all' : 'none',\r\n+            },\r\n+            Funcionário: {\r\n+                canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+                // Para funcionários, a regra pode ser 'own' em vez de 'all'\r\n+                canUpdate: document.getElementById('funcionario-canUpdate-boleto').checked ? 'own' : 'none',\r\n+                canDelete: document.getElementById('funcionario-canDelete-boleto').checked ? 'own' : 'none',\r\n             }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    createCompanyBtn.addEventListener('click', async () => {\r\n-        // 1. Pedimos os dados da empresa, como antes\r\n-        const nomeEmpresa = prompt(\"Digite o nome da nova empresa:\");\r\n-        if (!nomeEmpresa) return;\r\n-        const cnpj = prompt(\"Digite o CNPJ da nova empresa:\");\r\n-        if (!cnpj) return;\r\n-        const senhaEmpresa = prompt(\"Digite uma senha para a nova empresa:\");\r\n-        if (!senhaEmpresa) return;\r\n-\r\n-        // 2. MUDANÇA: Pedimos os dados para o novo usuário Proprietário\r\n-        const ownerUsername = prompt(\"Digite o NOME DE USUÁRIO para o Proprietário:\");\r\n-        if (!ownerUsername) return;\r\n-        const ownerPassword = prompt(`Digite a SENHA para o usuário proprietário \"${ownerUsername}\":`);\r\n-        if (!ownerPassword) return;\r\n-\r\n-        // 3. Pegamos o token do admin para autorizar a criação\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/companies/register', {\r\n-                method: 'POST',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                // 4. MUDANÇA: Enviamos o novo payload completo para o backend\r\n-                body: JSON.stringify({\r\n-                    nomeEmpresa,\r\n-                    cnpj,\r\n-                    senhaEmpresa,\r\n-                    ownerUsername,\r\n-                    ownerPassword\r\n-                })\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || \"Não foi possível criar a empresa.\");\r\n-            \r\n-            showToast(data.message, 'success');\r\n-            renderCompanyList(); // Atualiza a lista de empresas na tela\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // --- Lógica Principal do App de Boletos ---\r\n-    function initializeCalendarDate() {\r\n-        const today = new Date();\r\n-        currentMonth = today.getMonth();\r\n-        currentYear = today.getFullYear();\r\n-        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n-    }\r\n-\r\n-    async function updateBillsOrganizer() {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n-            showInitialLogin(); // Redireciona para o login se não houver token\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n-            const response = await fetch('http://localhost:5000/api/boletos', {\r\n-                method: 'GET',\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-\r\n-            if (!response.ok) {\r\n-                const errorData = await response.json();\r\n-                throw new Error(errorData.message || \"Erro ao buscar boletos.\");\r\n-            }\r\n-            \r\n-            // A resposta da nova API já vem no formato de uma lista de boletos,\r\n-            // com os dados do usuário \"populados\".\r\n-            userBoletos = await response.json();\r\n-            \r\n-            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-            totalBillsSpan.textContent = totalParcels;\r\n-\r\n-            // As funções de renderização e resumo são chamadas como antes.\r\n-            updateMonthlySummary();\r\n-            \r\n-            // A lógica para alternar entre calendário e lista diária continua a mesma.\r\n-            if (window.innerWidth >= 1024) {\r\n-                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n-                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n-                renderCalendar();\r\n-            } else {\r\n-                document.getElementById('billsOrganizer').classList.add('hidden');\r\n-                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n-                renderDailyBills();\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Se a busca falhar (ex: token expirado), deslogamos o usuário\r\n-            showInitialLogin();\r\n-        }\r\n-    }\r\n-\r\n-    function updateMonthlySummary() {\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n-            .filter(parcel => {\r\n-                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-            });\r\n-        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const totalNaoPago = totalMes - totalPago;\r\n-        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-            .filter(parcel => {\r\n-                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                return dueDate < today && !parcel.paid;\r\n-            });\r\n-        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n-            {\r\n-                style: 'currency',\r\n-                currency: 'BRL'\r\n-            });\r\n-        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n-        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n-    }\r\n-\r\n-    function renderCalendar() {\r\n-        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-        const calendarDays = document.getElementById('calendarDays');\r\n-        calendarDays.innerHTML = '';\r\n-        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-        for (let i = 0; i < firstDayOfMonth; i++) {\r\n-            const emptyCell = document.createElement('div');\r\n-            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n-            calendarDays.appendChild(emptyCell);\r\n-        }\r\n-        for (let day = 1; day <= daysInMonth; day++) {\r\n-            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-            const dayCell = document.createElement('div');\r\n-            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n-            dayCell.dataset.date = dateStr;\r\n-            const dayHeader = document.createElement('div');\r\n-            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-            dayHeader.textContent = day;\r\n-            dayCell.appendChild(dayHeader);\r\n-            dayCell.addEventListener('click', (e) => {\r\n-                if (e.target.closest('.bill-card')) return;\r\n-                const clickedDate = e.currentTarget.dataset.date;\r\n-                clearBillForm();\r\n-                document.getElementById('dueDate').value = clickedDate;\r\n-                addBillModal.classList.remove('hidden');\r\n-            });\r\n-            userBoletos.forEach(bill => {\r\n-                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                    const parcelElement = document.createElement('div');\r\n-                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n-                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n-                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                    dayCell.appendChild(parcelElement);\r\n-                });\r\n-            });\r\n-            calendarDays.appendChild(dayCell);\r\n-        }\r\n-    }\r\n-\r\n-    function renderDailyBills() {\r\n-        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n-    }\r\n-\r\n-    function clearBillForm() {\r\n-        billForm.reset();\r\n-        installmentsPreview.classList.add('hidden');\r\n-        installmentsList.innerHTML = '';\r\n-        currentBill = {};\r\n-    }\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    billForm.addEventListener('submit', function (e) {\r\n-        e.preventDefault();\r\n-        const billName = document.getElementById('billName').value;\r\n-        const dueDate = document.getElementById('dueDate').value;\r\n-        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n-        const installments = parseInt(document.getElementById('installments').value);\r\n-        const description = document.getElementById('description').value;\r\n-        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-        const barcode = document.getElementById('barcode').value;\r\n-        if (!billName || !dueDate || !totalAmount || !installments) {\r\n-            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-            return;\r\n-        }\r\n-        currentBill = {\r\n-            name: billName,\r\n-            parcels: []\r\n         };\r\n-        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-        installmentsList.innerHTML = '';\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n \r\n-        currentBill.parcels.push({\r\n-            id: `${Date.now()}-${i}`,\r\n-            number: i + 1,\r\n-            amount: parcelAmount,\r\n-            dueDate: dateForInput,\r\n-            paid: false,\r\n-            description: description,\r\n-            barcode: barcode\r\n-        });\r\n-\r\n-        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n-            day: '2-digit',\r\n-            month: '2-digit',\r\n-            year: 'numeric'\r\n-        });\r\n-        \r\n-        const parcelItem = document.createElement('div');\r\n-        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n-        \r\n-        parcelItem.innerHTML = `\r\n-            <div class=\"flex items-center space-x-4\">\r\n-                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n-                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n-            </div>\r\n-            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n-        `;\r\n-        \r\n-        installmentsList.appendChild(parcelItem);\r\n-    }\r\n-        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-            input.addEventListener('input', (e) => {\r\n-                const index = parseInt(e.target.dataset.parcelIndex);\r\n-                const newAmount = parseFloat(e.target.value) || 0;\r\n-                if (!isNaN(newAmount)) {\r\n-                    currentBill.parcels[index].amount = newAmount;\r\n-                    updatePreviewTotal();\r\n-                }\r\n-            });\r\n-            input.addEventListener('blur', (e) => {\r\n-                const newAmount = parseFloat(e.target.value) || 0;\r\n-                e.target.value = newAmount.toFixed(2);\r\n-            });\r\n-        });\r\n-        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-            input.addEventListener('change', (e) => {\r\n-                const index = parseInt(e.target.dataset.parcelIndex);\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            });\r\n-        });\r\n-        installmentsPreview.classList.remove('hidden');\r\n-        updatePreviewTotal();\r\n-    });\r\n-\r\n-    function updatePreviewTotal() {\r\n-        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n-        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-    }\r\n-    addToOrganizer.addEventListener('click', async function () {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        if (!currentBill || !currentBill.name) {\r\n-            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n-            return;\r\n-        }\r\n         try {\r\n-            const response = await fetch('http://localhost:5000/api/boletos',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(currentBill)\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n-            showToast(data.message, 'success');\r\n-            addBillModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // --- Lógica do Modal de Edição de Boletos ---\r\n-    function openBillModal(bill, parcel) {\r\n-        // MUDANÇA: Usamos bill._id para o parentId e o parcel já terá o seu próprio _id.\r\n-        selectedParcel = { ...parcel, parentId: bill._id };\r\n-        \r\n-        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n-        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n-        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n-        modalBillBarcodeInput.value = parcel.barcode || '';\r\n-        modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n-            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n-        } else {\r\n-            showFullScreenBarcodeBtn.classList.add('hidden');\r\n-        }\r\n-        billModal.classList.remove('hidden');\r\n-    }\r\n-\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    billModal.addEventListener('click', (e) => {\r\n-        if (e.target === billModal) billModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    saveBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-\r\n-        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n-        const url = `http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n-\r\n-        const updatedData = {\r\n-            paid: document.getElementById('modalBillPaid').checked,\r\n-            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n-            dueDate: document.getElementById('modalBillDate').value,\r\n-            description: document.getElementById('modalBillDescription').value,\r\n-            barcode: document.getElementById('modalBillBarcode').value\r\n-        };\r\n-\r\n-        try {\r\n-            const response = await fetch(url, { // Usamos a nova URL\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/permissions', {\r\n                 method: 'PATCH',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                body: JSON.stringify(updatedData)\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(newPermissions)\r\n             });\r\n             const data = await response.json();\r\n             if (!response.ok) throw new Error(data.message);\r\n-            showToast('Parcela atualizada com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    deleteBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel) return;\r\n-        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        \r\n-        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n-        const url = `http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n-\r\n-        try {\r\n-            const response = await fetch(url, { // Usamos a nova URL\r\n-                method: 'DELETE',\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Parcela excluída com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    deleteEntireBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel || !selectedParcel.parentId) {\r\n-            showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n-            return;\r\n-        }\r\n-        \r\n-        if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n-            return;\r\n-        }\r\n-        \r\n-        const token = localStorage.getItem('authToken');\r\n-        // MUDANÇA: O ID do boleto vem de selectedParcel.parentId, que agora já é o _id correto.\r\n-        const boletoId = selectedParcel.parentId; \r\n-        \r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/boletos/${boletoId}`, {\r\n-                method: 'DELETE',\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n             \r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast('Boleto completo excluído com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-            \r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-            \r\n-            // A resposta da API é um objeto { company, users }\r\n-            const data = await response.json(); \r\n-\r\n-            if (!response.ok) {\r\n-                // A mensagem de erro pode estar em 'data.message'\r\n-                throw new Error(data.message || 'Não foi possível buscar os detalhes da empresa.');\r\n-            }\r\n-\r\n-            // MUDANÇA CRÍTICA: Em vez de passar o objeto 'data' inteiro,\r\n-            // passamos as suas propriedades 'company' e 'users' corretamente.\r\n-            openCompanyDetailsModal(data.company, data.users);\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    // --- Lógica do Modal de Detalhes da Empresa ---\r\n-    function openCompanyDetailsModal(company, users) {\r\n-        selectedCompanyForAdmin = company;\r\n-        document.getElementById('modalCompanyNameInput').value = company.nomeEmpresa;\r\n-\r\n-        modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n-        modalCompanyPasswordInput.value = '';\r\n-        modalCompanyUsers.innerHTML = '';\r\n-        \r\n-        if (users.length === 0) {\r\n-            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-        } else {\r\n-            // A lógica para listar usuários permanece a mesma\r\n-            const assignableRoles = isAdminLoggedIn ?\r\n-                ['Proprietário', 'Gerente', 'Funcionário'] :\r\n-                ['Gerente', 'Funcionário'];\r\n-\r\n-            users.forEach(user => {\r\n-                const userItem = document.createElement('div');\r\n-                userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n-\r\n-                const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n-                let roleDisplay = '';\r\n-\r\n-                if (isEditable) {\r\n-                    const optionsHTML = assignableRoles.map(role => {\r\n-                        if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n-                        return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n-                    }).join('');\r\n-                    roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n-                } else {\r\n-                    roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n-                }\r\n-\r\n-                userItem.innerHTML = `\r\n-                    <div class=\"flex items-center space-x-3\">\r\n-                        <span class=\"text-white\">${user.username}</span>\r\n-                        ${roleDisplay}\r\n-                    </div>\r\n-                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                `;\r\n-                modalCompanyUsers.appendChild(userItem);\r\n-            });\r\n-        }\r\n-\r\n-        // Recriamos os listeners para garantir que funcionem\r\n-        document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-            button.addEventListener('click', (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const companyId = selectedCompanyForAdmin._id;\r\n-                handleRemoveUser(companyId, userId);\r\n-            });\r\n-        });\r\n-\r\n-        document.querySelectorAll('.role-select').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                const token = localStorage.getItem('authToken');\r\n-                const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-                try {\r\n-                    const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}/role`, {\r\n-                        method: 'PATCH',\r\n-                        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                        body: JSON.stringify({ role: newRole })\r\n-                    });\r\n-\r\n-                    const data = await response.json();\r\n-                    if (!response.ok) throw new Error(data.message);\r\n-                    showToast(data.message, 'success');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                    fetchCompanyDetailsAndOpenModal(companyId);\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        companyDetailsModal.classList.remove('hidden');\r\n-    }\r\n-\r\n-    async function handleRemoveUser(companyId, userId) {\r\n-        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n             showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-    addUserBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-        const username = prompt(\"Digite o nome do novo usuário:\");\r\n-        if (!username) return;\r\n-        const password = prompt(`Digite a senha para o usuário \"${username}\":`);\r\n-        if (!password) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: selectedCompanyForAdmin._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    deleteCompanyBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n-            return;\r\n-        }\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-\r\n-        const token = localStorage.getItem('authToken');\r\n-        const updatedData = {}; // Objeto vazio para guardar apenas o que mudou\r\n-\r\n-        // Pegamos os valores dos campos\r\n-        const newName = document.getElementById('modalCompanyNameInput').value;\r\n-        const newPassword = modalCompanyPasswordInput.value;\r\n-\r\n-        // MUDANÇA: Verificamos se o nome foi alterado e adicionamo-lo ao payload\r\n-        if (newName && newName.trim() !== '' && newName.trim() !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-            updatedData.nomeEmpresa = newName.trim();\r\n-        }\r\n-\r\n-        // A lógica da senha continua, mas agora também é adicionada ao mesmo payload\r\n-        if (newPassword && newPassword.length > 0) {\r\n-            updatedData.newPassword = newPassword;\r\n-        }\r\n-\r\n-        // Se nada foi alterado, informamos o usuário e paramos\r\n-        if (Object.keys(updatedData).length === 0) {\r\n-            showToast(\"Nenhuma alteração para salvar.\", \"info\");\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`, {\r\n-                method: 'PATCH',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                body: JSON.stringify(updatedData) // Enviamos o objeto com as alterações\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList(); // Atualizamos a lista de empresas para refletir o novo nome\r\n+            permissionsModal.classList.add('hidden');\r\n         } catch (error) {\r\n-            showToast(error.message, 'error');\r\n+            showToast('Erro ao salvar permissões: ' + error.message, 'error');\r\n         }\r\n     });\r\n \r\n-    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    companyDetailsModal.addEventListener('click', (e) => {\r\n-        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n+    // Listener para fechar o modal\r\n+    closePermissionsModal.addEventListener('click', () => {\r\n+        permissionsModal.classList.add('hidden');\r\n     });\r\n-    // --- Inicialização ---\r\n-    initializeCalendarDate();\r\n-    showInitialLogin();\r\n-});\n-document.addEventListener('DOMContentLoaded', function() {\r\n-    // --- Elementos HTML (Declarações completas) ---\r\n-    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-    const cnpjInput = document.getElementById('cnpjInput');\r\n-    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-    const adminLoginForm = document.getElementById('adminLoginForm');\r\n-    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-    const companyListDiv = document.getElementById('companyList');\r\n-    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-    const userLoginScreen = document.getElementById('userLoginScreen');\r\n-    const userLoginForm = document.getElementById('userLoginForm');\r\n-    const userInput = document.getElementById('userInput');\r\n-    const userPasswordInput = document.getElementById('userPasswordInput');\r\n-    const registerUserBtn = document.getElementById('registerUserBtn');\r\n-    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-    const welcomeUserText = document.getElementById('welcomeUserText');\r\n-    const mainAppContent = document.getElementById('mainAppContent');\r\n-    const toastMessage = document.getElementById('toastMessage');\r\n-    const logoutBtn = document.getElementById('logoutBtn');\r\n-    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-    const addBillModal = document.getElementById('addBillModal');\r\n-    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n-    const modalCompanyName = document.getElementById('modalCompanyName');\r\n-    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-    const addUserBtn = document.getElementById('addUserBtn');\r\n-    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-    const billModal = document.getElementById('billModal');\r\n-    const closeModalBtn = document.getElementById('closeModal');\r\n-    const saveBillBtn = document.getElementById('saveBill');\r\n-    const deleteBillBtn = document.getElementById('deleteBill');\r\n-    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n-    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n-    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n-    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n-    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-    const settingsBtn = document.getElementById('settingsBtn');\r\n-    const settingsDropdown = document.getElementById('settingsDropdown');\r\n-    const menuEmpresa = document.getElementById('menuEmpresa');\r\n-    const menuUsuarios = document.getElementById('menuUsuarios');\r\n-    const menuPermissoes = document.getElementById('menuPermissoes');\r\n-    const permissionsModal = document.getElementById('permissionsModal');\r\n-    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-    const permissionsContainer = document.getElementById('permissionsContainer');\r\n-    const billForm = document.getElementById('billForm');\r\n-    const installmentsPreview = document.getElementById('installmentsPreview');\r\n-    const installmentsList = document.getElementById('installmentsList');\r\n-    const addToOrganizer = document.getElementById('addToOrganizer');\r\n-    const totalBillsSpan = document.getElementById('totalBills');\r\n-    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-    const clearFormBtn = document.getElementById('clearFormBtn');\r\n-    const prevMonthBtn = document.getElementById('prevMonth');\r\n-    const nextMonthBtn = document.getElementById('nextMonth');\r\n \r\n-    // --- Variáveis de Dados e Estado ---\r\n-    let currentLoggedInCompany = null;\r\n-    let currentLoggedInUser = null;\r\n-    let isAdminLoggedIn = false;\r\n-    let loggedInViaAdmin = false;\r\n-    let selectedCompanyForAdmin = null;\r\n-    let currentBill = {};\r\n-    let selectedParcel = null;\r\n-    let userBoletos = [];\r\n-    let currentMonth, currentYear;\r\n-\r\n-\r\n-    // --- Lógica para o Modal de Adicionar Boletos ---\r\n-    openAddBillModalBtn.addEventListener('click', () => {\r\n-        clearBillForm();\r\n-        addBillModal.classList.remove('hidden');\r\n-    });\r\n-    closeAddBillModalBtn.addEventListener('click', () => {\r\n-        addBillModal.classList.add('hidden');\r\n-    });\r\n-    addBillModal.addEventListener('click', (e) => {\r\n-        if (e.target === addBillModal) {\r\n-            addBillModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n-    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n-        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n-        if (!originalBarcode) return;\r\n-        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n-        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n-            try {\r\n-                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n-                    {\r\n-                        format: \"ITF\",\r\n-                        width: 1.5,\r\n-                        height: 80,\r\n-                        displayValue: true,\r\n-                        fontSize: 20,\r\n-                        lineColor: \"#000\",\r\n-                        background: \"#FFF\"\r\n-                    });\r\n-                barcodeFullScreenModal.classList.remove('hidden');\r\n-            }\r\n-            catch (e) {\r\n-                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n-            }\r\n-        }\r\n-        else {\r\n-            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n-        }\r\n-    });\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n-        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // Listener para o item \"Gerenciar Usuários\"\r\n-    menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        const companyId = isAdminLoggedIn ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n-        if (companyId) fetchCompanyDetailsAndOpenModal(companyId);\r\n-    });\r\n-\r\n-\r\n-\r\n-// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n-settingsBtn.addEventListener('click', (event) => {\r\n-    event.stopPropagation();\r\n-    settingsDropdown.classList.toggle('hidden');\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (!settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n-\r\n-// Função auxiliar para os links de Empresa e Usuários\r\n-const openManagementModal = (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-    if (companyId) {\r\n-        fetchCompanyDetailsAndOpenModal(companyId);\r\n-    }\r\n-};\r\n-\r\n-// Anexa a função aos links corretos\r\n-menuEmpresa.addEventListener('click', openManagementModal);\r\n-menuUsuarios.addEventListener('click', openManagementModal);\r\n-\r\n-// Listener EXCLUSIVO para o link de Permissões\r\n-    menuPermissoes.addEventListener('click', async (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        \r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/permissions', {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const permissions = await response.json();\r\n-            if (!response.ok) throw new Error(permissions.message);\r\n-\r\n-            // Preenche o formulário com as permissões atuais (sem os checkboxes de \"canCreate\")\r\n-            document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-            document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-            \r\n-            document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-            document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-            permissionsModal.classList.remove('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-// Listener para fechar o modal de permissões\r\n-closePermissionsModal.addEventListener('click', () => {\r\n-    permissionsModal.classList.add('hidden');\r\n-});\r\n-\r\n-// Listener para salvar as alterações de permissão automaticamente\r\n-permissionsContainer.addEventListener('change', async (e) => {\r\n-    const target = e.target;\r\n-    if (target.type !== 'radio') return;\r\n-\r\n-    const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n-    const permissionKey = target.name.split('-')[1];\r\n-    const permissionValue = target.value;\r\n-\r\n-    const payload = {\r\n-        roleToUpdate,\r\n-        permissions: { [permissionKey]: permissionValue }\r\n-    };\r\n-\r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch('http://localhost:5000/api/permissions', {\r\n-            method: 'PATCH',\r\n-            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-            body: JSON.stringify(payload)\r\n-        });\r\n-        const data = await response.json();\r\n-        if (!response.ok) throw new Error(data.message);\r\n-        showToast(data.message, 'success');\r\n-    } catch (error) {\r\n-        showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n-    }\r\n-});\r\n-\r\n     // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n     function closeQuickAddModal() {\r\n         quickUserAddModal.classList.add('hidden');\r\n     }\r\n"
                },
                {
                    "date": 1752336042219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,16 +226,16 @@\n     // Nova função para popular os interruptores com os dados do backend\r\n     function populatePermissionsModal(permissions) {\r\n         // Lógica para Gerente\r\n         document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        // No backend, a permissão é 'all', 'own' ou 'none'. Se for diferente de 'none', consideramos como 'ligado'.\r\n-        document.getElementById('gerente-canUpdate-boleto').checked = permissions.Gerente.canUpdate !== 'none';\r\n-        document.getElementById('gerente-canDelete-boleto').checked = permissions.Gerente.canDelete !== 'none';\r\n+        // MUDANÇA: Marca o rádio correto com base no valor (none, own, all)\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n         \r\n         // Lógica para Funcionário\r\n         document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.getElementById('funcionario-canUpdate-boleto').checked = permissions.Funcionário.canUpdate !== 'none';\r\n-        document.getElementById('funcionario-canDelete-boleto').checked = permissions.Funcionário.canDelete !== 'none';\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n     }\r\n \r\n // Atualizamos o listener do menu para usar a nova função\r\n menuPermissoes.addEventListener('click', async (e) => {\r\n@@ -261,21 +261,20 @@\n \r\n \r\n     // Adicionamos o listener para o novo botão Salvar\r\n     document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n-        // Lemos o estado de cada interruptor e montamos o objeto de permissões\r\n+        // Lemos o estado de cada interruptor e rádio\r\n         const newPermissions = {\r\n             Gerente: {\r\n                 canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-                // Se o interruptor estiver ligado, salvamos 'all', senão, 'none'.\r\n-                canUpdate: document.getElementById('gerente-canUpdate-boleto').checked ? 'all' : 'none',\r\n-                canDelete: document.getElementById('gerente-canDelete-boleto').checked ? 'all' : 'none',\r\n+                // MUDANÇA: Pega o valor do rádio selecionado\r\n+                canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+                canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n             },\r\n             Funcionário: {\r\n                 canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-                // Para funcionários, a regra pode ser 'own' em vez de 'all'\r\n-                canUpdate: document.getElementById('funcionario-canUpdate-boleto').checked ? 'own' : 'none',\r\n-                canDelete: document.getElementById('funcionario-canDelete-boleto').checked ? 'own' : 'none',\r\n+                canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+                canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n             }\r\n         };\r\n \r\n         try {\r\n"
                },
                {
                    "date": 1752340054520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,37 +193,8 @@\n     closePermissionsModal.addEventListener('click', () => {\r\n         permissionsModal.classList.add('hidden');\r\n     });\r\n \r\n-// Listener para salvar as alterações de permissão automaticamente\r\n-    permissionsContainer.addEventListener('change', async (e) => {\r\n-        const target = e.target;\r\n-        if (target.type !== 'radio') return;\r\n-\r\n-        const roleToUpdate = target.closest('[data-role]').dataset.role;\r\n-        const permissionKey = target.name.split('-')[1];\r\n-        const permissionValue = target.value;\r\n-\r\n-        const payload = {\r\n-            roleToUpdate,\r\n-            permissions: { [permissionKey]: permissionValue }\r\n-        };\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/permissions', {\r\n-                method: 'PATCH',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(payload)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-        } catch (error) {\r\n-            showToast('Erro ao salvar permissão: ' + error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n     // Nova função para popular os interruptores com os dados do backend\r\n     function populatePermissionsModal(permissions) {\r\n         // Lógica para Gerente\r\n         document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n"
                },
                {
                    "date": 1752340517121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,11 @@\n     const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n     const clearFormBtn = document.getElementById('clearFormBtn');\r\n     const prevMonthBtn = document.getElementById('prevMonth');\r\n     const nextMonthBtn = document.getElementById('nextMonth');\r\n+    const companyInfoModal = document.getElementById('companyInfoModal');\r\n+    const closeCompanyInfoModalBtn = document.getElementById('closeCompanyInfoModal');\r\n+    const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n \r\n     // --- Variáveis de Dados e Estado ---\r\n     let currentLoggedInCompany = null;\r\n     let currentLoggedInUser = null;\r\n@@ -83,8 +86,9 @@\n     let currentBill = {};\r\n     let selectedParcel = null;\r\n     let userBoletos = [];\r\n     let currentMonth, currentYear;\r\n+    let currentCompanyDetails = null;\r\n \r\n \r\n     // --- Lógica para o Modal de Adicionar Boletos ---\r\n     openAddBillModalBtn.addEventListener('click', () => {\r\n@@ -1361,5 +1365,69 @@\n     });\r\n     // --- Inicialização ---\r\n     initializeCalendarDate();\r\n     showInitialLogin();\r\n+\r\n+    // Função para abrir e preencher o modal\r\n+async function openCompanyInfoModal() {\r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        // Usamos o ID da empresa logada para buscar os detalhes mais recentes\r\n+        const response = await fetch(`http://localhost:5000/api/companies/${currentLoggedInCompany._id}`, {\r\n+            headers: { 'Authorization': `Bearer ${token}` }\r\n+        });\r\n+        const data = await response.json();\r\n+        if (!response.ok) throw new Error(data.message);\r\n+        \r\n+        // Guardamos os detalhes e preenchemos os campos\r\n+        currentCompanyDetails = data.company;\r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(currentCompanyDetails.cnpj);\r\n+        document.getElementById('companyInfoName').value = currentCompanyDetails.nomeEmpresa;\r\n+        document.getElementById('companyInfoTelefone').value = currentCompanyDetails.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = currentCompanyDetails.telefoneWhatsapp || '';\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n+    }\r\n+}\r\n+\r\n+// Listener para o link do menu \"Detalhes da Empresa\"\r\n+menuEmpresa.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCompanyInfoModal();\r\n+});\r\n+\r\n+// Listener para o botão de salvar\r\n+saveCompanyInfoBtn.addEventListener('click', async () => {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+\r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch(`http://localhost:5000/api/companies/${currentCompanyDetails._id}`, {\r\n+            method: 'PATCH',\r\n+            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+            body: JSON.stringify(payload)\r\n+        });\r\n+        const data = await response.json();\r\n+        if (!response.ok) throw new Error(data.message);\r\n+        \r\n+        showToast(data.message, 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+\r\n+    } catch (error) {\r\n+        showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n+    }\r\n+});\r\n+\r\n+// Listener para fechar o modal\r\n+closeCompanyInfoModalBtn.addEventListener('click', () => {\r\n+    companyInfoModal.classList.add('hidden');\r\n+});\r\n+\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752340785931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,10 +138,14 @@\n     // Listener para o item \"Gerenciar Usuários\"\r\n     menuUsuarios.addEventListener('click', (e) => {\r\n         e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n-        const companyId = isAdminLoggedIn ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n-        if (companyId) fetchCompanyDetailsAndOpenModal(companyId);\r\n+        // Usamos o ID da empresa logada para buscar os detalhes\r\n+        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+        if (companyId) {\r\n+            // Chama a função para abrir o modal com a lista de usuários\r\n+            fetchCompanyDetailsAndOpenModal(companyId); \r\n+        }\r\n     });\r\n \r\n \r\n \r\n@@ -1391,40 +1395,41 @@\n         showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n     }\r\n }\r\n \r\n-// Listener para o link do menu \"Detalhes da Empresa\"\r\n-menuEmpresa.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCompanyInfoModal();\r\n-});\r\n+    // Listener para o link do menu \"Detalhes da Empresa\"\r\n+    menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        // Chama a função para abrir o modal com as informações da empresa\r\n+        openCompanyInfoModal(); \r\n+    });\r\n \r\n-// Listener para o botão de salvar\r\n-saveCompanyInfoBtn.addEventListener('click', async () => {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n+    // Listener para o botão de salvar\r\n+    saveCompanyInfoBtn.addEventListener('click', async () => {\r\n+        const payload = {\r\n+            nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+            telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+            telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+        };\r\n \r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch(`http://localhost:5000/api/companies/${currentCompanyDetails._id}`, {\r\n-            method: 'PATCH',\r\n-            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-            body: JSON.stringify(payload)\r\n-        });\r\n-        const data = await response.json();\r\n-        if (!response.ok) throw new Error(data.message);\r\n-        \r\n-        showToast(data.message, 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${currentCompanyDetails._id}`, {\r\n+                method: 'PATCH',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast(data.message, 'success');\r\n+            companyInfoModal.classList.add('hidden');\r\n \r\n-    } catch (error) {\r\n-        showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n-    }\r\n-});\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n \r\n // Listener para fechar o modal\r\n closeCompanyInfoModalBtn.addEventListener('click', () => {\r\n     companyInfoModal.classList.add('hidden');\r\n"
                },
                {
                    "date": 1752340815195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,12 +170,8 @@\n         fetchCompanyDetailsAndOpenModal(companyId);\r\n     }\r\n };\r\n \r\n-// Anexa a função aos links corretos\r\n-menuEmpresa.addEventListener('click', openManagementModal);\r\n-menuUsuarios.addEventListener('click', openManagementModal);\r\n-\r\n // Listener EXCLUSIVO para o link de Permissões\r\n     menuPermissoes.addEventListener('click', async (e) => {\r\n         e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n"
                },
                {
                    "date": 1752341026638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1367,31 +1367,33 @@\n     initializeCalendarDate();\r\n     showInitialLogin();\r\n \r\n     // Função para abrir e preencher o modal\r\n-async function openCompanyInfoModal() {\r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        // Usamos o ID da empresa logada para buscar os detalhes mais recentes\r\n-        const response = await fetch(`http://localhost:5000/api/companies/${currentLoggedInCompany._id}`, {\r\n-            headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n-        const data = await response.json();\r\n-        if (!response.ok) throw new Error(data.message);\r\n-        \r\n-        // Guardamos os detalhes e preenchemos os campos\r\n-        currentCompanyDetails = data.company;\r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(currentCompanyDetails.cnpj);\r\n-        document.getElementById('companyInfoName').value = currentCompanyDetails.nomeEmpresa;\r\n-        document.getElementById('companyInfoTelefone').value = currentCompanyDetails.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = currentCompanyDetails.telefoneWhatsapp || '';\r\n+    async function openCompanyInfoModal() {\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`http://localhost:5000/api/companies/${currentLoggedInCompany._id}`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            currentCompanyDetails = data.company;\r\n+            document.getElementById('companyInfoCnpj').textContent = formatCnpj(currentCompanyDetails.cnpj);\r\n+            document.getElementById('companyInfoName').value = currentCompanyDetails.nomeEmpresa;\r\n+            \r\n+            // MUDANÇA: Preenchemos o novo campo de e-mail\r\n+            document.getElementById('companyInfoEmail').value = currentCompanyDetails.email || '';\r\n \r\n-        companyInfoModal.classList.remove('hidden');\r\n+            document.getElementById('companyInfoTelefone').value = currentCompanyDetails.telefoneFixo || '';\r\n+            document.getElementById('companyInfoWhatsapp').value = currentCompanyDetails.telefoneWhatsapp || '';\r\n \r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n+            companyInfoModal.classList.remove('hidden');\r\n+\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n+        }\r\n     }\r\n-}\r\n \r\n     // Listener para o link do menu \"Detalhes da Empresa\"\r\n     menuEmpresa.addEventListener('click', (e) => {\r\n         e.preventDefault();\r\n@@ -1403,8 +1405,12 @@\n     // Listener para o botão de salvar\r\n     saveCompanyInfoBtn.addEventListener('click', async () => {\r\n         const payload = {\r\n             nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+            \r\n+            // MUDANÇA: Adicionamos o e-mail ao payload que será enviado para a API\r\n+            email: document.getElementById('companyInfoEmail').value,\r\n+\r\n             telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n             telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n         };\r\n \r\n"
                },
                {
                    "date": 1752341485800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1431,10 +1431,71 @@\n             showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n         }\r\n     });\r\n \r\n-// Listener para fechar o modal\r\n-closeCompanyInfoModalBtn.addEventListener('click', () => {\r\n-    companyInfoModal.classList.add('hidden');\r\n-});\r\n+    // Listener para fechar o modal\r\n+    closeCompanyInfoModalBtn.addEventListener('click', () => {\r\n+        companyInfoModal.classList.add('hidden');\r\n+    });\r\n \r\n+    // --- LÓGICA PARA MÁSCARAS DE INPUT (IMask.js) ---\r\n+\r\n+    document.addEventListener('DOMContentLoaded', () => {\r\n+        // Máscara para o campo de CNPJ no modal de login da empresa\r\n+        const cnpjInput = document.getElementById('cnpjInput');\r\n+        if (cnpjInput) {\r\n+            const cnpjMask = IMask(cnpjInput, {\r\n+                mask: '00.000.000/0000-00'\r\n+            });\r\n+        }\r\n+\r\n+        // Máscaras para os campos no modal de Detalhes da Empresa\r\n+        const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n+        if (telefoneFixoInput) {\r\n+            const telefoneMask = IMask(telefoneFixoInput, {\r\n+                mask: '(00) 0000-0000'\r\n+            });\r\n+        }\r\n+\r\n+        const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n+        if (whatsappInput) {\r\n+            const whatsappMask = IMask(whatsappInput, {\r\n+                mask: '(00) 00000-0000' // Máscara para 9 dígitos no WhatsApp\r\n+            });\r\n+        }\r\n+        \r\n+        // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n+        const totalAmountInput = document.getElementById('totalAmount');\r\n+        if (totalAmountInput) {\r\n+            const amountMask = IMask(totalAmountInput, {\r\n+                mask: 'R$ num',\r\n+                blocks: {\r\n+                    num: {\r\n+                        mask: Number,\r\n+                        scale: 2,\r\n+                        radix: ',',\r\n+                        thousandsSeparator: '.',\r\n+                        padFractionalZeros: true\r\n+                    }\r\n+                }\r\n+            });\r\n+        }\r\n+\r\n+        // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n+        const modalAmountInput = document.getElementById('modalBillAmount');\r\n+        if (modalAmountInput) {\r\n+            const modalAmountMask = IMask(modalAmountInput, {\r\n+                mask: 'R$ num',\r\n+                blocks: {\r\n+                    num: {\r\n+                        mask: Number,\r\n+                        scale: 2,\r\n+                        radix: ',',\r\n+                        thousandsSeparator: '.',\r\n+                        padFractionalZeros: true\r\n+                    }\r\n+                }\r\n+            });\r\n+        }\r\n+    });\r\n+\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752341697630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1438,64 +1438,66 @@\n     });\r\n \r\n     // --- LÓGICA PARA MÁSCARAS DE INPUT (IMask.js) ---\r\n \r\n-    document.addEventListener('DOMContentLoaded', () => {\r\n-        // Máscara para o campo de CNPJ no modal de login da empresa\r\n-        const cnpjInput = document.getElementById('cnpjInput');\r\n-        if (cnpjInput) {\r\n-            const cnpjMask = IMask(cnpjInput, {\r\n-                mask: '00.000.000/0000-00'\r\n-            });\r\n-        }\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+    // Máscara para o campo de CNPJ no modal de login da empresa\r\n+    const cnpjInput = document.getElementById('cnpjInput');\r\n+    if (cnpjInput) {\r\n+        const cnpjMask = IMask(cnpjInput, {\r\n+            mask: '00.000.000/0000-00'\r\n+        });\r\n+    }\r\n \r\n-        // Máscaras para os campos no modal de Detalhes da Empresa\r\n-        const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n-        if (telefoneFixoInput) {\r\n-            const telefoneMask = IMask(telefoneFixoInput, {\r\n-                mask: '(00) 0000-0000'\r\n-            });\r\n-        }\r\n+    // Máscaras para os campos no modal de Detalhes da Empresa\r\n+    // CORREÇÃO: Usando a ID correta 'companyInfoTelefone'\r\n+    const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n+    if (telefoneFixoInput) {\r\n+        const telefoneMask = IMask(telefoneFixoInput, {\r\n+            mask: '(00) 0000-0000'\r\n+        });\r\n+    }\r\n \r\n-        const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n-        if (whatsappInput) {\r\n-            const whatsappMask = IMask(whatsappInput, {\r\n-                mask: '(00) 00000-0000' // Máscara para 9 dígitos no WhatsApp\r\n-            });\r\n-        }\r\n-        \r\n-        // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n-        const totalAmountInput = document.getElementById('totalAmount');\r\n-        if (totalAmountInput) {\r\n-            const amountMask = IMask(totalAmountInput, {\r\n-                mask: 'R$ num',\r\n-                blocks: {\r\n-                    num: {\r\n-                        mask: Number,\r\n-                        scale: 2,\r\n-                        radix: ',',\r\n-                        thousandsSeparator: '.',\r\n-                        padFractionalZeros: true\r\n-                    }\r\n+    // CORREÇÃO: Usando a ID correta 'companyInfoWhatsapp'\r\n+    const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n+    if (whatsappInput) {\r\n+        const whatsappMask = IMask(whatsappInput, {\r\n+            mask: '(00) 00000-0000'\r\n+        });\r\n+    }\r\n+    \r\n+    // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n+    const totalAmountInput = document.getElementById('totalAmount');\r\n+    if (totalAmountInput) {\r\n+        const amountMask = IMask(totalAmountInput, {\r\n+            mask: 'R$ num',\r\n+            blocks: {\r\n+                num: {\r\n+                    mask: Number,\r\n+                    scale: 2,\r\n+                    radix: ',',\r\n+                    thousandsSeparator: '.',\r\n+                    padFractionalZeros: true\r\n                 }\r\n-            });\r\n-        }\r\n+            }\r\n+        });\r\n+    }\r\n \r\n-        // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n-        const modalAmountInput = document.getElementById('modalBillAmount');\r\n-        if (modalAmountInput) {\r\n-            const modalAmountMask = IMask(modalAmountInput, {\r\n-                mask: 'R$ num',\r\n-                blocks: {\r\n-                    num: {\r\n-                        mask: Number,\r\n-                        scale: 2,\r\n-                        radix: ',',\r\n-                        thousandsSeparator: '.',\r\n-                        padFractionalZeros: true\r\n-                    }\r\n+    // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n+    const modalAmountInput = document.getElementById('modalBillAmount');\r\n+    if (modalAmountInput) {\r\n+        const modalAmountMask = IMask(modalAmountInput, {\r\n+            mask: 'R$ num',\r\n+            blocks: {\r\n+                num: {\r\n+                    mask: Number,\r\n+                    scale: 2,\r\n+                    radix: ',',\r\n+                    thousandsSeparator: '.',\r\n+                    padFractionalZeros: true\r\n                 }\r\n-            });\r\n-        }\r\n-    });\r\n+            }\r\n+        });\r\n+    }\r\n+});\r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752341703870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1438,66 +1438,66 @@\n     });\r\n \r\n     // --- LÓGICA PARA MÁSCARAS DE INPUT (IMask.js) ---\r\n \r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-    // Máscara para o campo de CNPJ no modal de login da empresa\r\n-    const cnpjInput = document.getElementById('cnpjInput');\r\n-    if (cnpjInput) {\r\n-        const cnpjMask = IMask(cnpjInput, {\r\n-            mask: '00.000.000/0000-00'\r\n-        });\r\n-    }\r\n+    document.addEventListener('DOMContentLoaded', () => {\r\n+        // Máscara para o campo de CNPJ no modal de login da empresa\r\n+        const cnpjInput = document.getElementById('cnpjInput');\r\n+        if (cnpjInput) {\r\n+            const cnpjMask = IMask(cnpjInput, {\r\n+                mask: '00.000.000/0000-00'\r\n+            });\r\n+        }\r\n \r\n-    // Máscaras para os campos no modal de Detalhes da Empresa\r\n-    // CORREÇÃO: Usando a ID correta 'companyInfoTelefone'\r\n-    const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n-    if (telefoneFixoInput) {\r\n-        const telefoneMask = IMask(telefoneFixoInput, {\r\n-            mask: '(00) 0000-0000'\r\n-        });\r\n-    }\r\n+        // Máscaras para os campos no modal de Detalhes da Empresa\r\n+        // CORREÇÃO: Usando a ID correta 'companyInfoTelefone'\r\n+        const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n+        if (telefoneFixoInput) {\r\n+            const telefoneMask = IMask(telefoneFixoInput, {\r\n+                mask: '(00) 0000-0000'\r\n+            });\r\n+        }\r\n \r\n-    // CORREÇÃO: Usando a ID correta 'companyInfoWhatsapp'\r\n-    const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n-    if (whatsappInput) {\r\n-        const whatsappMask = IMask(whatsappInput, {\r\n-            mask: '(00) 00000-0000'\r\n-        });\r\n-    }\r\n-    \r\n-    // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n-    const totalAmountInput = document.getElementById('totalAmount');\r\n-    if (totalAmountInput) {\r\n-        const amountMask = IMask(totalAmountInput, {\r\n-            mask: 'R$ num',\r\n-            blocks: {\r\n-                num: {\r\n-                    mask: Number,\r\n-                    scale: 2,\r\n-                    radix: ',',\r\n-                    thousandsSeparator: '.',\r\n-                    padFractionalZeros: true\r\n+        // CORREÇÃO: Usando a ID correta 'companyInfoWhatsapp'\r\n+        const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n+        if (whatsappInput) {\r\n+            const whatsappMask = IMask(whatsappInput, {\r\n+                mask: '(00) 00000-0000'\r\n+            });\r\n+        }\r\n+        \r\n+        // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n+        const totalAmountInput = document.getElementById('totalAmount');\r\n+        if (totalAmountInput) {\r\n+            const amountMask = IMask(totalAmountInput, {\r\n+                mask: 'R$ num',\r\n+                blocks: {\r\n+                    num: {\r\n+                        mask: Number,\r\n+                        scale: 2,\r\n+                        radix: ',',\r\n+                        thousandsSeparator: '.',\r\n+                        padFractionalZeros: true\r\n+                    }\r\n                 }\r\n-            }\r\n-        });\r\n-    }\r\n+            });\r\n+        }\r\n \r\n-    // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n-    const modalAmountInput = document.getElementById('modalBillAmount');\r\n-    if (modalAmountInput) {\r\n-        const modalAmountMask = IMask(modalAmountInput, {\r\n-            mask: 'R$ num',\r\n-            blocks: {\r\n-                num: {\r\n-                    mask: Number,\r\n-                    scale: 2,\r\n-                    radix: ',',\r\n-                    thousandsSeparator: '.',\r\n-                    padFractionalZeros: true\r\n+        // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n+        const modalAmountInput = document.getElementById('modalBillAmount');\r\n+        if (modalAmountInput) {\r\n+            const modalAmountMask = IMask(modalAmountInput, {\r\n+                mask: 'R$ num',\r\n+                blocks: {\r\n+                    num: {\r\n+                        mask: Number,\r\n+                        scale: 2,\r\n+                        radix: ',',\r\n+                        thousandsSeparator: '.',\r\n+                        padFractionalZeros: true\r\n+                    }\r\n                 }\r\n-            }\r\n-        });\r\n-    }\r\n-});\r\n+            });\r\n+        }\r\n+    });\r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752342161999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1379,15 +1379,22 @@\n             \r\n             currentCompanyDetails = data.company;\r\n             document.getElementById('companyInfoCnpj').textContent = formatCnpj(currentCompanyDetails.cnpj);\r\n             document.getElementById('companyInfoName').value = currentCompanyDetails.nomeEmpresa;\r\n-            \r\n-            // MUDANÇA: Preenchemos o novo campo de e-mail\r\n             document.getElementById('companyInfoEmail').value = currentCompanyDetails.email || '';\r\n-\r\n             document.getElementById('companyInfoTelefone').value = currentCompanyDetails.telefoneFixo || '';\r\n             document.getElementById('companyInfoWhatsapp').value = currentCompanyDetails.telefoneWhatsapp || '';\r\n \r\n+            // MUDANÇA: Aplicamos as máscaras AQUI, depois de o modal estar preenchido e prestes a ser exibido.\r\n+            const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n+            if (telefoneFixoInput) {\r\n+                IMask(telefoneFixoInput, { mask: '(00) 0000-0000' });\r\n+            }\r\n+            const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n+            if (whatsappInput) {\r\n+                IMask(whatsappInput, { mask: '(00) 00000-0000' });\r\n+            }\r\n+\r\n             companyInfoModal.classList.remove('hidden');\r\n \r\n         } catch (error) {\r\n             showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n@@ -1439,32 +1446,15 @@\n \r\n     // --- LÓGICA PARA MÁSCARAS DE INPUT (IMask.js) ---\r\n \r\n     document.addEventListener('DOMContentLoaded', () => {\r\n-        // Máscara para o campo de CNPJ no modal de login da empresa\r\n+        // Máscara para o campo de CNPJ no modal de login da empresa (ESTA FICA)\r\n         const cnpjInput = document.getElementById('cnpjInput');\r\n         if (cnpjInput) {\r\n             const cnpjMask = IMask(cnpjInput, {\r\n                 mask: '00.000.000/0000-00'\r\n             });\r\n         }\r\n-\r\n-        // Máscaras para os campos no modal de Detalhes da Empresa\r\n-        // CORREÇÃO: Usando a ID correta 'companyInfoTelefone'\r\n-        const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n-        if (telefoneFixoInput) {\r\n-            const telefoneMask = IMask(telefoneFixoInput, {\r\n-                mask: '(00) 0000-0000'\r\n-            });\r\n-        }\r\n-\r\n-        // CORREÇÃO: Usando a ID correta 'companyInfoWhatsapp'\r\n-        const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n-        if (whatsappInput) {\r\n-            const whatsappMask = IMask(whatsappInput, {\r\n-                mask: '(00) 00000-0000'\r\n-            });\r\n-        }\r\n         \r\n         // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n         const totalAmountInput = document.getElementById('totalAmount');\r\n         if (totalAmountInput) {\r\n"
                },
                {
                    "date": 1752342709195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,12 @@\n     const nextMonthBtn = document.getElementById('nextMonth');\r\n     const companyInfoModal = document.getElementById('companyInfoModal');\r\n     const closeCompanyInfoModalBtn = document.getElementById('closeCompanyInfoModal');\r\n     const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+    const addUserModal = document.getElementById('addUserModal');\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n+    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n \r\n     // --- Variáveis de Dados e Estado ---\r\n     let currentLoggedInCompany = null;\r\n     let currentLoggedInUser = null;\r\n@@ -1252,41 +1256,13 @@\n         catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n-    addUserBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-        const username = prompt(\"Digite o nome do novo usuário:\");\r\n-        if (!username) return;\r\n-        const password = prompt(`Digite a senha para o usuário \"${username}\":`);\r\n-        if (!password) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: selectedCompanyForAdmin._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n+    \r\n+    addUserBtn.addEventListener('click', () => {\r\n+        openAddUserModal();\r\n     });\r\n+\r\n     deleteCompanyBtn.addEventListener('click', async () => {\r\n         if (!selectedCompanyForAdmin) return;\r\n         const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n         if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n@@ -1489,5 +1465,72 @@\n             });\r\n         }\r\n     });\r\n \r\n+    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR USUÁRIO ---\r\n+\r\n+    // Função para abrir o modal\r\n+    function openAddUserModal() {\r\n+        addUserForm.reset(); // Limpa o formulário\r\n+        addUserModal.classList.remove('hidden');\r\n+        document.getElementById('addUsernameInput').focus();\r\n+    }\r\n+\r\n+    // Função para fechar o modal\r\n+    function closeAddUserModal() {\r\n+        addUserModal.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Listeners para fechar/cancelar\r\n+    closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+\r\n+    // Listener para o envio do formulário\r\n+    addUserForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault(); // Impede o recarregamento da página\r\n+\r\n+        const username = document.getElementById('addUsernameInput').value;\r\n+        const password = document.getElementById('addUserPasswordInput').value;\r\n+        const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+\r\n+        // Validação de senha\r\n+        if (password !== confirmPassword) {\r\n+            showToast(\"As senhas não coincidem.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        // Identifica a empresa atual (seja via admin ou login normal)\r\n+        const companyId = selectedCompanyForAdmin ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n+        if (!companyId) {\r\n+            showToast(\"Erro: Não foi possível identificar a empresa.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('http://localhost:5000/api/auth/register/user', {\r\n+                method: 'POST',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify({ username, password, companyId })\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+\r\n+            showToast(data.message, 'success');\r\n+            closeAddUserModal();\r\n+\r\n+            // Atualiza a lista de usuários na tela que estiver aberta\r\n+            if (adminDashboardScreen.classList.contains('hidden')) {\r\n+                // Se estiver no modal de \"Gerenciar Usuários\" do proprietário\r\n+                fetchCompanyDetailsAndOpenModal(companyId, true); // O 'true' indica que é uma atualização\r\n+            } else {\r\n+                // Se estiver no painel do admin\r\n+                renderCompanyList();\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752342944776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,8 +79,12 @@\n     const addUserModal = document.getElementById('addUserModal');\r\n     const addUserForm = document.getElementById('addUserForm');\r\n     const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n     const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+    const addCompanyModal = document.getElementById('addCompanyModal');\r\n+    const addCompanyForm = document.getElementById('addCompanyForm');\r\n+    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n+    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n \r\n     // --- Variáveis de Dados e Estado ---\r\n     let currentLoggedInCompany = null;\r\n     let currentLoggedInUser = null;\r\n@@ -709,56 +713,10 @@\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n \r\n-    createCompanyBtn.addEventListener('click', async () => {\r\n-        // 1. Pedimos os dados da empresa, como antes\r\n-        const nomeEmpresa = prompt(\"Digite o nome da nova empresa:\");\r\n-        if (!nomeEmpresa) return;\r\n-        const cnpj = prompt(\"Digite o CNPJ da nova empresa:\");\r\n-        if (!cnpj) return;\r\n-        const senhaEmpresa = prompt(\"Digite uma senha para a nova empresa:\");\r\n-        if (!senhaEmpresa) return;\r\n-\r\n-        // 2. MUDANÇA: Pedimos os dados para o novo usuário Proprietário\r\n-        const ownerUsername = prompt(\"Digite o NOME DE USUÁRIO para o Proprietário:\");\r\n-        if (!ownerUsername) return;\r\n-        const ownerPassword = prompt(`Digite a SENHA para o usuário proprietário \"${ownerUsername}\":`);\r\n-        if (!ownerPassword) return;\r\n-\r\n-        // 3. Pegamos o token do admin para autorizar a criação\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/companies/register', {\r\n-                method: 'POST',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                // 4. MUDANÇA: Enviamos o novo payload completo para o backend\r\n-                body: JSON.stringify({\r\n-                    nomeEmpresa,\r\n-                    cnpj,\r\n-                    senhaEmpresa,\r\n-                    ownerUsername,\r\n-                    ownerPassword\r\n-                })\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || \"Não foi possível criar a empresa.\");\r\n-            \r\n-            showToast(data.message, 'success');\r\n-            renderCompanyList(); // Atualiza a lista de empresas na tela\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n+    createCompanyBtn.addEventListener('click', () => {\r\n+        openAddCompanyModal();\r\n     });\r\n \r\n     // --- Lógica Principal do App de Boletos ---\r\n     function initializeCalendarDate() {\r\n@@ -1256,9 +1214,9 @@\n         catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     }\r\n-    \r\n+\r\n     addUserBtn.addEventListener('click', () => {\r\n         openAddUserModal();\r\n     });\r\n \r\n@@ -1532,5 +1490,66 @@\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n \r\n+    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR EMPRESA ---\r\n+\r\n+    // Aplica a máscara de CNPJ ao novo campo\r\n+    const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+    if (addCompanyCnpjInput) {\r\n+        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    // Função para abrir o modal\r\n+    function openAddCompanyModal() {\r\n+        addCompanyForm.reset(); // Limpa o formulário\r\n+        addCompanyModal.classList.remove('hidden');\r\n+        document.getElementById('addCompanyNameInput').focus();\r\n+    }\r\n+\r\n+    // Função para fechar o modal\r\n+    function closeAddCompanyModal() {\r\n+        addCompanyModal.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Listeners para fechar/cancelar\r\n+    closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+\r\n+    // Listener para o envio do formulário\r\n+    addCompanyForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+\r\n+        const payload = {\r\n+            nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+            cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+            senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+            ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+            ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+        };\r\n+\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const response = await fetch('http://localhost:5000/api/companies/register', {\r\n+                method: 'POST',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+\r\n+            showToast(data.message, 'success');\r\n+            closeAddCompanyModal();\r\n+            renderCompanyList(); // Atualiza a lista de empresas no painel de admin\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752343427151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1551,5 +1551,49 @@\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n \r\n+    // --- LÓGICA PARA NOTIFICAÇÃO DE BOLETOS VENCIDOS VIA WHATSAPP ---\r\n+\r\n+    const sendWhatsappReportBtn = document.getElementById('sendWhatsappReportBtn');\r\n+\r\n+    sendWhatsappReportBtn.addEventListener('click', async () => {\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            // 1. Chama a nossa nova rota no backend\r\n+            const response = await fetch('http://localhost:5000/api/boletos/report/overdue', {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+\r\n+            const { overdueCount, whatsappNumber, companyName } = data;\r\n+\r\n+            // 2. Verifica se existe um número de WhatsApp cadastrado\r\n+            if (!whatsappNumber || whatsappNumber.trim() === '') {\r\n+                showToast('Por favor, cadastre um número de WhatsApp para a empresa antes de notificar.', 'error');\r\n+                return;\r\n+            }\r\n+\r\n+            // 3. Monta a mensagem\r\n+            let message = `Olá, ${companyName}! Este é um lembrete do seu Organizador de Boletos.\\n\\n`;\r\n+            if (overdueCount > 0) {\r\n+                message += `Atualmente, existem *${overdueCount}* boletos(s) vencido(s) e não pago(s) em sua empresa.`;\r\n+            } else {\r\n+                message += `Ótima notícia! Não encontramos boletos vencidos. Mantenha o bom trabalho!`;\r\n+            }\r\n+            \r\n+            // 4. Formata o número e a URL do WhatsApp\r\n+            const cleanWhatsappNumber = '55' + whatsappNumber.replace(/\\D/g, ''); // Adiciona o código do Brasil\r\n+            const encodedMessage = encodeURIComponent(message);\r\n+            const whatsappUrl = `https://wa.me/${cleanWhatsappNumber}?text=${encodedMessage}`;\r\n+\r\n+            // 5. Abre o link do WhatsApp numa nova aba\r\n+            window.open(whatsappUrl, '_blank');\r\n+\r\n+        } catch (error) {\r\n+            showToast('Erro ao gerar notificação: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752344375659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1551,49 +1551,6 @@\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n \r\n-    // --- LÓGICA PARA NOTIFICAÇÃO DE BOLETOS VENCIDOS VIA WHATSAPP ---\r\n \r\n-    const sendWhatsappReportBtn = document.getElementById('sendWhatsappReportBtn');\r\n-\r\n-    sendWhatsappReportBtn.addEventListener('click', async () => {\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            // 1. Chama a nossa nova rota no backend\r\n-            const response = await fetch('http://localhost:5000/api/boletos/report/overdue', {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-\r\n-            const { overdueCount, whatsappNumber, companyName } = data;\r\n-\r\n-            // 2. Verifica se existe um número de WhatsApp cadastrado\r\n-            if (!whatsappNumber || whatsappNumber.trim() === '') {\r\n-                showToast('Por favor, cadastre um número de WhatsApp para a empresa antes de notificar.', 'error');\r\n-                return;\r\n-            }\r\n-\r\n-            // 3. Monta a mensagem\r\n-            let message = `Olá, ${companyName}! Este é um lembrete do seu Organizador de Boletos.\\n\\n`;\r\n-            if (overdueCount > 0) {\r\n-                message += `Atualmente, existem *${overdueCount}* boletos(s) vencido(s) e não pago(s) em sua empresa.`;\r\n-            } else {\r\n-                message += `Ótima notícia! Não encontramos boletos vencidos. Mantenha o bom trabalho!`;\r\n-            }\r\n-            \r\n-            // 4. Formata o número e a URL do WhatsApp\r\n-            const cleanWhatsappNumber = '55' + whatsappNumber.replace(/\\D/g, ''); // Adiciona o código do Brasil\r\n-            const encodedMessage = encodeURIComponent(message);\r\n-            const whatsappUrl = `https://wa.me/${cleanWhatsappNumber}?text=${encodedMessage}`;\r\n-\r\n-            // 5. Abre o link do WhatsApp numa nova aba\r\n-            window.open(whatsappUrl, '_blank');\r\n-\r\n-        } catch (error) {\r\n-            showToast('Erro ao gerar notificação: ' + error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752348900532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1557 @@\n+document.addEventListener('DOMContentLoaded', function() {\r\n+    // --- Elementos HTML (Declarações completas) ---\r\n+    const API_BASE_URL = 'http://localhost:5000';\r\n+    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+    const cnpjInput = document.getElementById('cnpjInput');\r\n+    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+    const adminLoginForm = document.getElementById('adminLoginForm');\r\n+    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+    const companyListDiv = document.getElementById('companyList');\r\n+    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+    const userLoginScreen = document.getElementById('userLoginScreen');\r\n+    const userLoginForm = document.getElementById('userLoginForm');\r\n+    const userInput = document.getElementById('userInput');\r\n+    const userPasswordInput = document.getElementById('userPasswordInput');\r\n+    const registerUserBtn = document.getElementById('registerUserBtn');\r\n+    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+    const welcomeUserText = document.getElementById('welcomeUserText');\r\n+    const mainAppContent = document.getElementById('mainAppContent');\r\n+    const toastMessage = document.getElementById('toastMessage');\r\n+    const logoutBtn = document.getElementById('logoutBtn');\r\n+    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+    const addBillModal = document.getElementById('addBillModal');\r\n+    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n+    const modalCompanyName = document.getElementById('modalCompanyName');\r\n+    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+    const addUserBtn = document.getElementById('addUserBtn');\r\n+    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+    const billModal = document.getElementById('billModal');\r\n+    const closeModalBtn = document.getElementById('closeModal');\r\n+    const saveBillBtn = document.getElementById('saveBill');\r\n+    const deleteBillBtn = document.getElementById('deleteBill');\r\n+    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n+    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n+    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n+    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n+    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+    const settingsBtn = document.getElementById('settingsBtn');\r\n+    const settingsDropdown = document.getElementById('settingsDropdown');\r\n+    const menuEmpresa = document.getElementById('menuEmpresa');\r\n+    const menuUsuarios = document.getElementById('menuUsuarios');\r\n+    const menuPermissoes = document.getElementById('menuPermissoes');\r\n+    const permissionsModal = document.getElementById('permissionsModal');\r\n+    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+    const permissionsContainer = document.getElementById('permissionsContainer');\r\n+    const billForm = document.getElementById('billForm');\r\n+    const installmentsPreview = document.getElementById('installmentsPreview');\r\n+    const installmentsList = document.getElementById('installmentsList');\r\n+    const addToOrganizer = document.getElementById('addToOrganizer');\r\n+    const totalBillsSpan = document.getElementById('totalBills');\r\n+    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+    const clearFormBtn = document.getElementById('clearFormBtn');\r\n+    const prevMonthBtn = document.getElementById('prevMonth');\r\n+    const nextMonthBtn = document.getElementById('nextMonth');\r\n+    const companyInfoModal = document.getElementById('companyInfoModal');\r\n+    const closeCompanyInfoModalBtn = document.getElementById('closeCompanyInfoModal');\r\n+    const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+    const addUserModal = document.getElementById('addUserModal');\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n+    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+    const addCompanyModal = document.getElementById('addCompanyModal');\r\n+    const addCompanyForm = document.getElementById('addCompanyForm');\r\n+    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n+    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+\r\n+    // --- Variáveis de Dados e Estado ---\r\n+    let currentLoggedInCompany = null;\r\n+    let currentLoggedInUser = null;\r\n+    let isAdminLoggedIn = false;\r\n+    let loggedInViaAdmin = false;\r\n+    let selectedCompanyForAdmin = null;\r\n+    let currentBill = {};\r\n+    let selectedParcel = null;\r\n+    let userBoletos = [];\r\n+    let currentMonth, currentYear;\r\n+    let currentCompanyDetails = null;\r\n+\r\n+\r\n+    // --- Lógica para o Modal de Adicionar Boletos ---\r\n+    openAddBillModalBtn.addEventListener('click', () => {\r\n+        clearBillForm();\r\n+        addBillModal.classList.remove('hidden');\r\n+    });\r\n+    closeAddBillModalBtn.addEventListener('click', () => {\r\n+        addBillModal.classList.add('hidden');\r\n+    });\r\n+    addBillModal.addEventListener('click', (e) => {\r\n+        if (e.target === addBillModal) {\r\n+            addBillModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n+    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n+        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n+        if (!originalBarcode) return;\r\n+        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n+        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n+            try {\r\n+                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n+                    {\r\n+                        format: \"ITF\",\r\n+                        width: 1.5,\r\n+                        height: 80,\r\n+                        displayValue: true,\r\n+                        fontSize: 20,\r\n+                        lineColor: \"#000\",\r\n+                        background: \"#FFF\"\r\n+                    });\r\n+                barcodeFullScreenModal.classList.remove('hidden');\r\n+            }\r\n+            catch (e) {\r\n+                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n+            }\r\n+        }\r\n+        else {\r\n+            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n+        }\r\n+    });\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n+        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // Listener para o item \"Gerenciar Usuários\"\r\n+    menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        // Usamos o ID da empresa logada para buscar os detalhes\r\n+        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+        if (companyId) {\r\n+            // Chama a função para abrir o modal com a lista de usuários\r\n+            fetchCompanyDetailsAndOpenModal(companyId); \r\n+        }\r\n+    });\r\n+\r\n+\r\n+\r\n+// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n+settingsBtn.addEventListener('click', (event) => {\r\n+    event.stopPropagation();\r\n+    settingsDropdown.classList.toggle('hidden');\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (!settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n+\r\n+// Função auxiliar para os links de Empresa e Usuários\r\n+const openManagementModal = (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+    if (companyId) {\r\n+        fetchCompanyDetailsAndOpenModal(companyId);\r\n+    }\r\n+};\r\n+\r\n+// Listener EXCLUSIVO para o link de Permissões\r\n+    menuPermissoes.addEventListener('click', async (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        \r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('${API_BASE_URL}/api/permissions', {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const permissions = await response.json();\r\n+            if (!response.ok) throw new Error(permissions.message);\r\n+\r\n+            // Chamamos a função para preencher o modal com os dados\r\n+            populatePermissionsModal(permissions);\r\n+\r\n+            permissionsModal.classList.remove('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal de permissões\r\n+    closePermissionsModal.addEventListener('click', () => {\r\n+        permissionsModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // Nova função para popular os interruptores com os dados do backend\r\n+    function populatePermissionsModal(permissions) {\r\n+        // Lógica para Gerente\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        // MUDANÇA: Marca o rádio correto com base no valor (none, own, all)\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+        \r\n+        // Lógica para Funcionário\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+    }\r\n+\r\n+// Atualizamos o listener do menu para usar a nova função\r\n+menuPermissoes.addEventListener('click', async (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    \r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch('${API_BASE_URL}/api/permissions', {\r\n+            headers: { 'Authorization': `Bearer ${token}` }\r\n+        });\r\n+        const permissions = await response.json();\r\n+        if (!response.ok) throw new Error(permissions.message);\r\n+\r\n+        // Chamamos a função para preencher o modal com os dados\r\n+        populatePermissionsModal(permissions);\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+    }\r\n+});\r\n+\r\n+\r\n+    // Adicionamos o listener para o novo botão Salvar\r\n+    document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n+        // Lemos o estado de cada interruptor e rádio\r\n+        const newPermissions = {\r\n+            Gerente: {\r\n+                canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+                // MUDANÇA: Pega o valor do rádio selecionado\r\n+                canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+                canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+            },\r\n+            Funcionário: {\r\n+                canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+                canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+                canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+            }\r\n+        };\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('${API_BASE_URL}/api/permissions', {\r\n+                method: 'PATCH',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(newPermissions)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast(data.message, 'success');\r\n+            permissionsModal.classList.add('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar permissões: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal\r\n+    closePermissionsModal.addEventListener('click', () => {\r\n+        permissionsModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n+    function closeQuickAddModal() {\r\n+        quickUserAddModal.classList.add('hidden');\r\n+    }\r\n+    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n+    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n+    quickUserAddForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const username = document.getElementById('quickAddUsername').value;\r\n+        const password = document.getElementById('quickAddPassword').value;\r\n+        if (!currentLoggedInCompany) {\r\n+            showToast('Erro: Empresa não identificada.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/register/user',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            closeQuickAddModal();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    // --- Funções de Utilitário e de Tela ---\r\n+    function showToast(message, type = 'success') {\r\n+        toastMessage.textContent = message;\r\n+        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n+        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n+        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n+        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n+        toastMessage.classList.remove('hidden');\r\n+        setTimeout(() => {\r\n+            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n+            setTimeout(() => {\r\n+                toastMessage.classList.add('hidden');\r\n+                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n+            }, 300);\r\n+        }, 3000);\r\n+    }\r\n+\r\n+    function hideAllScreens() {\r\n+        initialLoginScreen.classList.add('hidden');\r\n+        cnpjLoginScreen.classList.add('hidden');\r\n+        adminLoginScreen.classList.add('hidden');\r\n+        userLoginScreen.classList.add('hidden');\r\n+        adminDashboardScreen.classList.add('hidden');\r\n+        mainAppContent.classList.add('hidden');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        addBillModal.classList.add('hidden');\r\n+        billModal.classList.add('hidden');\r\n+        barcodeFullScreenModal.classList.add('hidden');\r\n+        quickUserAddModal.classList.add('hidden');\r\n+        openAddBillModalBtn.classList.add('hidden');\r\n+    }\r\n+\r\n+    function showInitialLogin() {\r\n+        hideAllScreens();\r\n+        initialLoginScreen.classList.remove('hidden');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        currentLoggedInCompany = null;\r\n+        currentLoggedInUser = null;\r\n+        isAdminLoggedIn = false;\r\n+        loggedInViaAdmin = false;\r\n+    }\r\n+\r\n+    function showCnpjLogin() {\r\n+        hideAllScreens();\r\n+        cnpjLoginForm.reset();\r\n+        cnpjLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showAdminLogin() {\r\n+        hideAllScreens();\r\n+        adminLoginForm.reset();\r\n+        adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showUserLogin(companyName) {\r\n+        hideAllScreens();\r\n+        userLoginForm.reset();\r\n+        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+        userLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showMainApp() {\r\n+        hideAllScreens();\r\n+        mainAppContent.classList.remove('hidden');\r\n+\r\n+        // Mantenha esta lógica que já tínhamos\r\n+        if (loggedInViaAdmin) {\r\n+            backToAdminBtn.classList.remove('hidden');\r\n+        } else {\r\n+            backToAdminBtn.classList.add('hidden');\r\n+        }\r\n+        \r\n+        if (!isAdminLoggedIn && currentLoggedInUser && currentLoggedInUser.role === 'Proprietário') {\r\n+            settingsMenuContainer.classList.remove('hidden');\r\n+        } else {\r\n+            settingsMenuContainer.classList.add('hidden');\r\n+        }\r\n+\r\n+        // ADICIONE ESTA LINHA para mostrar o botão \"+\"\r\n+        openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+        updateBillsOrganizer();\r\n+    }\r\n+\r\n+    function showAdminDashboard() {\r\n+        hideAllScreens();\r\n+        adminDashboardScreen.classList.remove('hidden');\r\n+        renderCompanyList();\r\n+    }\r\n+\r\n+    function formatCnpj(value) {\r\n+        value = value.replace(/\\D/g, '');\r\n+        if (value.length > 14) value = value.slice(0, 14);\r\n+        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n+        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n+        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n+        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n+        return value;\r\n+    }\r\n+    // --- Lógica de Navegação do Calendário ---\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth--;\r\n+        if (currentMonth < 0) {\r\n+            currentMonth = 11;\r\n+            currentYear--;\r\n+        }\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth++;\r\n+        if (currentMonth > 11) {\r\n+            currentMonth = 0;\r\n+            currentYear++;\r\n+        }\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+    // --- Lógica de Autenticação e Outras Funções ---\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const cnpj = cnpjInput.value;\r\n+        const password = cnpjPasswordInput.value;\r\n+        try {\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/login/company',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            cnpj,\r\n+                            password\r\n+                        }),\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInCompany = data.company;\r\n+            loggedInViaAdmin = false;\r\n+            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    adminLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const username = adminUsernameInput.value;\r\n+        const password = adminPasswordInput.value;\r\n+        try {\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/login/admin',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            localStorage.setItem('authToken', data.token);\r\n+            isAdminLoggedIn = true;\r\n+            showToast('Login de Administrador bem-sucedido!', 'success');\r\n+            showAdminDashboard();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    userLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const username = userInput.value;\r\n+        const password = userPasswordInput.value;\r\n+        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n+            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/login/user',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInUser = data.user;\r\n+            showMainApp();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    registerUserBtn.addEventListener('click', async function () {\r\n+        const username = userInput.value;\r\n+        const password = userPasswordInput.value;\r\n+        if (!username || !password) {\r\n+            showToast('Por favor, preencha o nome de usuário e a senha.', 'error');\r\n+            return;\r\n+        }\r\n+        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n+            showToast('Erro: Nenhuma empresa selecionada. Faça o login da empresa novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/register/user',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            userLoginForm.reset();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    backToAdminBtn.addEventListener('click', () => {\r\n+        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n+\r\n+        // 1. Recuperamos o token original do admin que guardámos\r\n+        const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+        if (!adminToken) {\r\n+            showToast(\"Erro: Token de administrador não encontrado. Faça o login novamente.\", \"error\");\r\n+            showInitialLogin();\r\n+            return;\r\n+        }\r\n+\r\n+        // 2. Restauramos o token do admin como o token ativo\r\n+        localStorage.setItem('authToken', adminToken);\r\n+        localStorage.removeItem('superAdminToken'); // Limpamos o token temporário\r\n+\r\n+        // 3. Resetamos o estado da aplicação e mostramos o painel\r\n+        currentLoggedInUser = null;\r\n+        currentLoggedInCompany = null;\r\n+        loggedInViaAdmin = false;\r\n+        isAdminLoggedIn = true;\r\n+        showAdminDashboard();\r\n+    });\r\n+\r\n+    async function renderCompanyList() {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) return;\r\n+\r\n+        try {\r\n+            const response = await fetch('${API_BASE_URL}/api/companies', {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n+\r\n+            const companies = await response.json();\r\n+            companyListDiv.innerHTML = '';\r\n+\r\n+            if (companies.length === 0) {\r\n+                noCompaniesMessage.classList.remove('hidden');\r\n+            } else {\r\n+                noCompaniesMessage.classList.add('hidden');\r\n+                companies.forEach(company => {\r\n+                    const companyCard = document.createElement('div');\r\n+                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                    \r\n+                    // MUDANÇA: A API agora não retorna a contagem de usuários diretamente na lista.\r\n+                    // Podemos mostrar esta informação de outra forma ou remover por enquanto para simplificar.\r\n+                    companyCard.innerHTML = `\r\n+                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                        </div>\r\n+                    `;\r\n+                    companyListDiv.appendChild(companyCard);\r\n+                });\r\n+\r\n+                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n+                    button.addEventListener('click', async (e) => {\r\n+                        const companyId = e.target.dataset.companyId;\r\n+                        const token = localStorage.getItem('authToken');\r\n+                        try {\r\n+                            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                                headers: {\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                }\r\n+                            });\r\n+                            \r\n+                            // MUDANÇA: A resposta agora é desestruturada em 'company' e 'users'.\r\n+                            const { company, users } = await response.json();\r\n+                            \r\n+                            if (!response.ok) throw new Error(company.message); // Usa a mensagem de erro do objeto company\r\n+                            \r\n+                            // MUDANÇA: Passamos os dois objetos para a função do modal.\r\n+                            openCompanyDetailsModal(company, users);\r\n+\r\n+                        } catch (error) {\r\n+                            showToast(error.message, 'error');\r\n+                        }\r\n+                    });\r\n+                });\r\n+\r\n+                // O listener do 'enter-company-btn' precisa ser atualizado também para funcionar com a nova lógica\r\n+                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+                    button.addEventListener('click', async (e) => {\r\n+                        const companyId = e.target.dataset.companyId;\r\n+                        const token = localStorage.getItem('authToken');\r\n+                        try {\r\n+                            // Precisamos buscar os usuários da empresa para poder entrar como o primeiro\r\n+                            const companyDetailsResponse = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                                headers: { 'Authorization': `Bearer ${token}` }\r\n+                            });\r\n+                            const { company, users } = await companyDetailsResponse.json();\r\n+\r\n+                            if (!companyDetailsResponse.ok) throw new Error(company.message);\r\n+                            \r\n+                            if (users.length === 0) {\r\n+                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n+                                return;\r\n+                            }\r\n+\r\n+                            // Entramos como o primeiro usuário da lista\r\n+                            const userId = users[0]._id; \r\n+                            \r\n+                            const impersonateResponse = await fetch('${API_BASE_URL}/api/admin/impersonate', {\r\n+                                method: 'POST',\r\n+                                headers: {\r\n+                                    'Content-Type': 'application/json',\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                },\r\n+                                body: JSON.stringify({ companyId, userId })\r\n+                            });\r\n+                            const data = await impersonateResponse.json();\r\n+                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n+                            \r\n+                            showToast(`Entrando na empresa ${company.nomeEmpresa}...`, 'success');\r\n+                            localStorage.setItem('superAdminToken', token);\r\n+                            localStorage.setItem('authToken', data.token);\r\n+                            currentLoggedInCompany = company;\r\n+                            currentLoggedInUser = data.user;\r\n+                            loggedInViaAdmin = true;\r\n+                            showMainApp();\r\n+                        } catch (error) {\r\n+                            showToast(error.message, 'error');\r\n+                        }\r\n+                    });\r\n+                });\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    createCompanyBtn.addEventListener('click', () => {\r\n+        openAddCompanyModal();\r\n+    });\r\n+\r\n+    // --- Lógica Principal do App de Boletos ---\r\n+    function initializeCalendarDate() {\r\n+        const today = new Date();\r\n+        currentMonth = today.getMonth();\r\n+        currentYear = today.getFullYear();\r\n+        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n+    }\r\n+\r\n+    async function updateBillsOrganizer() {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n+            showInitialLogin(); // Redireciona para o login se não houver token\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n+            const response = await fetch('${API_BASE_URL}/api/boletos', {\r\n+                method: 'GET',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) {\r\n+                const errorData = await response.json();\r\n+                throw new Error(errorData.message || \"Erro ao buscar boletos.\");\r\n+            }\r\n+            \r\n+            // A resposta da nova API já vem no formato de uma lista de boletos,\r\n+            // com os dados do usuário \"populados\".\r\n+            userBoletos = await response.json();\r\n+            \r\n+            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+            totalBillsSpan.textContent = totalParcels;\r\n+\r\n+            // As funções de renderização e resumo são chamadas como antes.\r\n+            updateMonthlySummary();\r\n+            \r\n+            // A lógica para alternar entre calendário e lista diária continua a mesma.\r\n+            if (window.innerWidth >= 1024) {\r\n+                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n+                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n+                renderCalendar();\r\n+            } else {\r\n+                document.getElementById('billsOrganizer').classList.add('hidden');\r\n+                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n+                renderDailyBills();\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Se a busca falhar (ex: token expirado), deslogamos o usuário\r\n+            showInitialLogin();\r\n+        }\r\n+    }\r\n+\r\n+    function updateMonthlySummary() {\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+            });\r\n+        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalNaoPago = totalMes - totalPago;\r\n+        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return dueDate < today && !parcel.paid;\r\n+            });\r\n+        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n+            {\r\n+                style: 'currency',\r\n+                currency: 'BRL'\r\n+            });\r\n+        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n+        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n+    }\r\n+\r\n+    function renderCalendar() {\r\n+        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+        const calendarDays = document.getElementById('calendarDays');\r\n+        calendarDays.innerHTML = '';\r\n+        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+        for (let i = 0; i < firstDayOfMonth; i++) {\r\n+            const emptyCell = document.createElement('div');\r\n+            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n+            calendarDays.appendChild(emptyCell);\r\n+        }\r\n+        for (let day = 1; day <= daysInMonth; day++) {\r\n+            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+            const dayCell = document.createElement('div');\r\n+            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n+            dayCell.dataset.date = dateStr;\r\n+            const dayHeader = document.createElement('div');\r\n+            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+            dayHeader.textContent = day;\r\n+            dayCell.appendChild(dayHeader);\r\n+            dayCell.addEventListener('click', (e) => {\r\n+                if (e.target.closest('.bill-card')) return;\r\n+                const clickedDate = e.currentTarget.dataset.date;\r\n+                clearBillForm();\r\n+                document.getElementById('dueDate').value = clickedDate;\r\n+                addBillModal.classList.remove('hidden');\r\n+            });\r\n+            userBoletos.forEach(bill => {\r\n+                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                    const parcelElement = document.createElement('div');\r\n+                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n+                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                    dayCell.appendChild(parcelElement);\r\n+                });\r\n+            });\r\n+            calendarDays.appendChild(dayCell);\r\n+        }\r\n+    }\r\n+\r\n+    function renderDailyBills() {\r\n+        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n+    }\r\n+\r\n+    function clearBillForm() {\r\n+        billForm.reset();\r\n+        installmentsPreview.classList.add('hidden');\r\n+        installmentsList.innerHTML = '';\r\n+        currentBill = {};\r\n+    }\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    billForm.addEventListener('submit', function (e) {\r\n+        e.preventDefault();\r\n+        const billName = document.getElementById('billName').value;\r\n+        const dueDate = document.getElementById('dueDate').value;\r\n+        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n+        const installments = parseInt(document.getElementById('installments').value);\r\n+        const description = document.getElementById('description').value;\r\n+        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+        const barcode = document.getElementById('barcode').value;\r\n+        if (!billName || !dueDate || !totalAmount || !installments) {\r\n+            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+            return;\r\n+        }\r\n+        currentBill = {\r\n+            name: billName,\r\n+            parcels: []\r\n+        };\r\n+        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+        installmentsList.innerHTML = '';\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        currentBill.parcels.push({\r\n+            id: `${Date.now()}-${i}`,\r\n+            number: i + 1,\r\n+            amount: parcelAmount,\r\n+            dueDate: dateForInput,\r\n+            paid: false,\r\n+            description: description,\r\n+            barcode: barcode\r\n+        });\r\n+\r\n+        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n+            day: '2-digit',\r\n+            month: '2-digit',\r\n+            year: 'numeric'\r\n+        });\r\n+        \r\n+        const parcelItem = document.createElement('div');\r\n+        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n+        \r\n+        parcelItem.innerHTML = `\r\n+            <div class=\"flex items-center space-x-4\">\r\n+                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n+                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n+            </div>\r\n+            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n+        `;\r\n+        \r\n+        installmentsList.appendChild(parcelItem);\r\n+    }\r\n+        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+            input.addEventListener('input', (e) => {\r\n+                const index = parseInt(e.target.dataset.parcelIndex);\r\n+                const newAmount = parseFloat(e.target.value) || 0;\r\n+                if (!isNaN(newAmount)) {\r\n+                    currentBill.parcels[index].amount = newAmount;\r\n+                    updatePreviewTotal();\r\n+                }\r\n+            });\r\n+            input.addEventListener('blur', (e) => {\r\n+                const newAmount = parseFloat(e.target.value) || 0;\r\n+                e.target.value = newAmount.toFixed(2);\r\n+            });\r\n+        });\r\n+        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+            input.addEventListener('change', (e) => {\r\n+                const index = parseInt(e.target.dataset.parcelIndex);\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            });\r\n+        });\r\n+        installmentsPreview.classList.remove('hidden');\r\n+        updatePreviewTotal();\r\n+    });\r\n+\r\n+    function updatePreviewTotal() {\r\n+        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n+        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+    }\r\n+    addToOrganizer.addEventListener('click', async function () {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        if (!currentBill || !currentBill.name) {\r\n+            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const response = await fetch('${API_BASE_URL}/api/boletos',\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(currentBill)\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n+            showToast(data.message, 'success');\r\n+            addBillModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // --- Lógica do Modal de Edição de Boletos ---\r\n+    function openBillModal(bill, parcel) {\r\n+        // MUDANÇA: Usamos bill._id para o parentId e o parcel já terá o seu próprio _id.\r\n+        selectedParcel = { ...parcel, parentId: bill._id };\r\n+        \r\n+        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n+        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n+        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n+        modalBillBarcodeInput.value = parcel.barcode || '';\r\n+        modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n+            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n+        } else {\r\n+            showFullScreenBarcodeBtn.classList.add('hidden');\r\n+        }\r\n+        billModal.classList.remove('hidden');\r\n+    }\r\n+\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    billModal.addEventListener('click', (e) => {\r\n+        if (e.target === billModal) billModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    saveBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+\r\n+        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n+        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n+\r\n+        const updatedData = {\r\n+            paid: document.getElementById('modalBillPaid').checked,\r\n+            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n+            dueDate: document.getElementById('modalBillDate').value,\r\n+            description: document.getElementById('modalBillDescription').value,\r\n+            barcode: document.getElementById('modalBillBarcode').value\r\n+        };\r\n+\r\n+        try {\r\n+            const response = await fetch(url, { // Usamos a nova URL\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify(updatedData)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Parcela atualizada com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    deleteBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel) return;\r\n+        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        \r\n+        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n+        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n+\r\n+        try {\r\n+            const response = await fetch(url, { // Usamos a nova URL\r\n+                method: 'DELETE',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Parcela excluída com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    deleteEntireBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel || !selectedParcel.parentId) {\r\n+            showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n+            return;\r\n+        }\r\n+        \r\n+        if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n+            return;\r\n+        }\r\n+        \r\n+        const token = localStorage.getItem('authToken');\r\n+        // MUDANÇA: O ID do boleto vem de selectedParcel.parentId, que agora já é o _id correto.\r\n+        const boletoId = selectedParcel.parentId; \r\n+        \r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos/${boletoId}`, {\r\n+                method: 'DELETE',\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            \r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast('Boleto completo excluído com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+            \r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+            \r\n+            // A resposta da API é um objeto { company, users }\r\n+            const data = await response.json(); \r\n+\r\n+            if (!response.ok) {\r\n+                // A mensagem de erro pode estar em 'data.message'\r\n+                throw new Error(data.message || 'Não foi possível buscar os detalhes da empresa.');\r\n+            }\r\n+\r\n+            // MUDANÇA CRÍTICA: Em vez de passar o objeto 'data' inteiro,\r\n+            // passamos as suas propriedades 'company' e 'users' corretamente.\r\n+            openCompanyDetailsModal(data.company, data.users);\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    // --- Lógica do Modal de Detalhes da Empresa ---\r\n+    function openCompanyDetailsModal(company, users) {\r\n+        selectedCompanyForAdmin = company;\r\n+        document.getElementById('modalCompanyNameInput').value = company.nomeEmpresa;\r\n+\r\n+        modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n+        modalCompanyPasswordInput.value = '';\r\n+        modalCompanyUsers.innerHTML = '';\r\n+        \r\n+        if (users.length === 0) {\r\n+            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+        } else {\r\n+            // A lógica para listar usuários permanece a mesma\r\n+            const assignableRoles = isAdminLoggedIn ?\r\n+                ['Proprietário', 'Gerente', 'Funcionário'] :\r\n+                ['Gerente', 'Funcionário'];\r\n+\r\n+            users.forEach(user => {\r\n+                const userItem = document.createElement('div');\r\n+                userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n+\r\n+                const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n+                let roleDisplay = '';\r\n+\r\n+                if (isEditable) {\r\n+                    const optionsHTML = assignableRoles.map(role => {\r\n+                        if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n+                        return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n+                    }).join('');\r\n+                    roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n+                } else {\r\n+                    roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n+                }\r\n+\r\n+                userItem.innerHTML = `\r\n+                    <div class=\"flex items-center space-x-3\">\r\n+                        <span class=\"text-white\">${user.username}</span>\r\n+                        ${roleDisplay}\r\n+                    </div>\r\n+                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                `;\r\n+                modalCompanyUsers.appendChild(userItem);\r\n+            });\r\n+        }\r\n+\r\n+        // Recriamos os listeners para garantir que funcionem\r\n+        document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+            button.addEventListener('click', (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const companyId = selectedCompanyForAdmin._id;\r\n+                handleRemoveUser(companyId, userId);\r\n+            });\r\n+        });\r\n+\r\n+        document.querySelectorAll('.role-select').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const token = localStorage.getItem('authToken');\r\n+                const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+                try {\r\n+                    const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}/role`, {\r\n+                        method: 'PATCH',\r\n+                        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                        body: JSON.stringify({ role: newRole })\r\n+                    });\r\n+\r\n+                    const data = await response.json();\r\n+                    if (!response.ok) throw new Error(data.message);\r\n+                    showToast(data.message, 'success');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                    fetchCompanyDetailsAndOpenModal(companyId);\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        companyDetailsModal.classList.remove('hidden');\r\n+    }\r\n+\r\n+    async function handleRemoveUser(companyId, userId) {\r\n+        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    addUserBtn.addEventListener('click', () => {\r\n+        openAddUserModal();\r\n+    });\r\n+\r\n+    deleteCompanyBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n+            return;\r\n+        }\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+\r\n+        const token = localStorage.getItem('authToken');\r\n+        const updatedData = {}; // Objeto vazio para guardar apenas o que mudou\r\n+\r\n+        // Pegamos os valores dos campos\r\n+        const newName = document.getElementById('modalCompanyNameInput').value;\r\n+        const newPassword = modalCompanyPasswordInput.value;\r\n+\r\n+        // MUDANÇA: Verificamos se o nome foi alterado e adicionamo-lo ao payload\r\n+        if (newName && newName.trim() !== '' && newName.trim() !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+            updatedData.nomeEmpresa = newName.trim();\r\n+        }\r\n+\r\n+        // A lógica da senha continua, mas agora também é adicionada ao mesmo payload\r\n+        if (newPassword && newPassword.length > 0) {\r\n+            updatedData.newPassword = newPassword;\r\n+        }\r\n+\r\n+        // Se nada foi alterado, informamos o usuário e paramos\r\n+        if (Object.keys(updatedData).length === 0) {\r\n+            showToast(\"Nenhuma alteração para salvar.\", \"info\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`, {\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify(updatedData) // Enviamos o objeto com as alterações\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList(); // Atualizamos a lista de empresas para refletir o novo nome\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    companyDetailsModal.addEventListener('click', (e) => {\r\n+        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n+    });\r\n+    // --- Inicialização ---\r\n+    initializeCalendarDate();\r\n+    showInitialLogin();\r\n+\r\n+    // Função para abrir e preencher o modal\r\n+    async function openCompanyInfoModal() {\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${currentLoggedInCompany._id}`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            currentCompanyDetails = data.company;\r\n+            document.getElementById('companyInfoCnpj').textContent = formatCnpj(currentCompanyDetails.cnpj);\r\n+            document.getElementById('companyInfoName').value = currentCompanyDetails.nomeEmpresa;\r\n+            document.getElementById('companyInfoEmail').value = currentCompanyDetails.email || '';\r\n+            document.getElementById('companyInfoTelefone').value = currentCompanyDetails.telefoneFixo || '';\r\n+            document.getElementById('companyInfoWhatsapp').value = currentCompanyDetails.telefoneWhatsapp || '';\r\n+\r\n+            // MUDANÇA: Aplicamos as máscaras AQUI, depois de o modal estar preenchido e prestes a ser exibido.\r\n+            const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n+            if (telefoneFixoInput) {\r\n+                IMask(telefoneFixoInput, { mask: '(00) 0000-0000' });\r\n+            }\r\n+            const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n+            if (whatsappInput) {\r\n+                IMask(whatsappInput, { mask: '(00) 00000-0000' });\r\n+            }\r\n+\r\n+            companyInfoModal.classList.remove('hidden');\r\n+\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    // Listener para o link do menu \"Detalhes da Empresa\"\r\n+    menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        // Chama a função para abrir o modal com as informações da empresa\r\n+        openCompanyInfoModal(); \r\n+    });\r\n+\r\n+    // Listener para o botão de salvar\r\n+    saveCompanyInfoBtn.addEventListener('click', async () => {\r\n+        const payload = {\r\n+            nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+            \r\n+            // MUDANÇA: Adicionamos o e-mail ao payload que será enviado para a API\r\n+            email: document.getElementById('companyInfoEmail').value,\r\n+\r\n+            telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+            telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+        };\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${currentCompanyDetails._id}`, {\r\n+                method: 'PATCH',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast(data.message, 'success');\r\n+            companyInfoModal.classList.add('hidden');\r\n+\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal\r\n+    closeCompanyInfoModalBtn.addEventListener('click', () => {\r\n+        companyInfoModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // --- LÓGICA PARA MÁSCARAS DE INPUT (IMask.js) ---\r\n+\r\n+    document.addEventListener('DOMContentLoaded', () => {\r\n+        // Máscara para o campo de CNPJ no modal de login da empresa (ESTA FICA)\r\n+        const cnpjInput = document.getElementById('cnpjInput');\r\n+        if (cnpjInput) {\r\n+            const cnpjMask = IMask(cnpjInput, {\r\n+                mask: '00.000.000/0000-00'\r\n+            });\r\n+        }\r\n+        \r\n+        // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n+        const totalAmountInput = document.getElementById('totalAmount');\r\n+        if (totalAmountInput) {\r\n+            const amountMask = IMask(totalAmountInput, {\r\n+                mask: 'R$ num',\r\n+                blocks: {\r\n+                    num: {\r\n+                        mask: Number,\r\n+                        scale: 2,\r\n+                        radix: ',',\r\n+                        thousandsSeparator: '.',\r\n+                        padFractionalZeros: true\r\n+                    }\r\n+                }\r\n+            });\r\n+        }\r\n+\r\n+        // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n+        const modalAmountInput = document.getElementById('modalBillAmount');\r\n+        if (modalAmountInput) {\r\n+            const modalAmountMask = IMask(modalAmountInput, {\r\n+                mask: 'R$ num',\r\n+                blocks: {\r\n+                    num: {\r\n+                        mask: Number,\r\n+                        scale: 2,\r\n+                        radix: ',',\r\n+                        thousandsSeparator: '.',\r\n+                        padFractionalZeros: true\r\n+                    }\r\n+                }\r\n+            });\r\n+        }\r\n+    });\r\n+\r\n+    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR USUÁRIO ---\r\n+\r\n+    // Função para abrir o modal\r\n+    function openAddUserModal() {\r\n+        addUserForm.reset(); // Limpa o formulário\r\n+        addUserModal.classList.remove('hidden');\r\n+        document.getElementById('addUsernameInput').focus();\r\n+    }\r\n+\r\n+    // Função para fechar o modal\r\n+    function closeAddUserModal() {\r\n+        addUserModal.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Listeners para fechar/cancelar\r\n+    closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+\r\n+    // Listener para o envio do formulário\r\n+    addUserForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault(); // Impede o recarregamento da página\r\n+\r\n+        const username = document.getElementById('addUsernameInput').value;\r\n+        const password = document.getElementById('addUserPasswordInput').value;\r\n+        const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+\r\n+        // Validação de senha\r\n+        if (password !== confirmPassword) {\r\n+            showToast(\"As senhas não coincidem.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        // Identifica a empresa atual (seja via admin ou login normal)\r\n+        const companyId = selectedCompanyForAdmin ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n+        if (!companyId) {\r\n+            showToast(\"Erro: Não foi possível identificar a empresa.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch('${API_BASE_URL}/api/auth/register/user', {\r\n+                method: 'POST',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify({ username, password, companyId })\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+\r\n+            showToast(data.message, 'success');\r\n+            closeAddUserModal();\r\n+\r\n+            // Atualiza a lista de usuários na tela que estiver aberta\r\n+            if (adminDashboardScreen.classList.contains('hidden')) {\r\n+                // Se estiver no modal de \"Gerenciar Usuários\" do proprietário\r\n+                fetchCompanyDetailsAndOpenModal(companyId, true); // O 'true' indica que é uma atualização\r\n+            } else {\r\n+                // Se estiver no painel do admin\r\n+                renderCompanyList();\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR EMPRESA ---\r\n+\r\n+    // Aplica a máscara de CNPJ ao novo campo\r\n+    const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+    if (addCompanyCnpjInput) {\r\n+        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    // Função para abrir o modal\r\n+    function openAddCompanyModal() {\r\n+        addCompanyForm.reset(); // Limpa o formulário\r\n+        addCompanyModal.classList.remove('hidden');\r\n+        document.getElementById('addCompanyNameInput').focus();\r\n+    }\r\n+\r\n+    // Função para fechar o modal\r\n+    function closeAddCompanyModal() {\r\n+        addCompanyModal.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Listeners para fechar/cancelar\r\n+    closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+\r\n+    // Listener para o envio do formulário\r\n+    addCompanyForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+\r\n+        const payload = {\r\n+            nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+            cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+            senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+            ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+            ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+        };\r\n+\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const response = await fetch('${API_BASE_URL}/api/companies/register', {\r\n+                method: 'POST',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+\r\n+            showToast(data.message, 'success');\r\n+            closeAddCompanyModal();\r\n+            renderCompanyList(); // Atualiza a lista de empresas no painel de admin\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752349642474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -354,8 +354,50 @@\n         quickUserAddModal.classList.add('hidden');\r\n         openAddBillModalBtn.classList.add('hidden');\r\n     }\r\n \r\n+    async function initializeApp() {\r\n+    const token = localStorage.getItem('authToken');\r\n+\r\n+    // Se não há token, vai para a tela de login\r\n+    if (!token) {\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Se há um token, tentamos verificar com o backend\r\n+    try {\r\n+        const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\r\n+            headers: { 'Authorization': `Bearer ${token}` }\r\n+        });\r\n+\r\n+        if (!response.ok) {\r\n+            // Se o token for inválido ou expirado, limpamos o lixo e vamos para o login.\r\n+            localStorage.removeItem('authToken');\r\n+            localStorage.removeItem('superAdminToken');\r\n+            showInitialLogin();\r\n+            return;\r\n+        }\r\n+\r\n+        const data = await response.json();\r\n+        \r\n+        // Se o token for válido, restauramos o estado da aplicação\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            isAdminLoggedIn = false;\r\n+            showMainApp();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        // Em caso de erro de rede, etc., vai para o login por segurança\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n     function showInitialLogin() {\r\n         hideAllScreens();\r\n         initialLoginScreen.classList.remove('hidden');\r\n         localStorage.removeItem('authToken');\r\n@@ -1297,11 +1339,8 @@\n     closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n     companyDetailsModal.addEventListener('click', (e) => {\r\n         if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n     });\r\n-    // --- Inicialização ---\r\n-    initializeCalendarDate();\r\n-    showInitialLogin();\r\n \r\n     // Função para abrir e preencher o modal\r\n     async function openCompanyInfoModal() {\r\n         try {\r\n@@ -1552,1562 +1591,10 @@\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n \r\n-\r\n-});\n-document.addEventListener('DOMContentLoaded', function() {\r\n-    // --- Elementos HTML (Declarações completas) ---\r\n-    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-    const cnpjInput = document.getElementById('cnpjInput');\r\n-    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-    const adminLoginForm = document.getElementById('adminLoginForm');\r\n-    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-    const companyListDiv = document.getElementById('companyList');\r\n-    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-    const userLoginScreen = document.getElementById('userLoginScreen');\r\n-    const userLoginForm = document.getElementById('userLoginForm');\r\n-    const userInput = document.getElementById('userInput');\r\n-    const userPasswordInput = document.getElementById('userPasswordInput');\r\n-    const registerUserBtn = document.getElementById('registerUserBtn');\r\n-    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-    const welcomeUserText = document.getElementById('welcomeUserText');\r\n-    const mainAppContent = document.getElementById('mainAppContent');\r\n-    const toastMessage = document.getElementById('toastMessage');\r\n-    const logoutBtn = document.getElementById('logoutBtn');\r\n-    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-    const addBillModal = document.getElementById('addBillModal');\r\n-    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n-    const modalCompanyName = document.getElementById('modalCompanyName');\r\n-    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-    const addUserBtn = document.getElementById('addUserBtn');\r\n-    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-    const billModal = document.getElementById('billModal');\r\n-    const closeModalBtn = document.getElementById('closeModal');\r\n-    const saveBillBtn = document.getElementById('saveBill');\r\n-    const deleteBillBtn = document.getElementById('deleteBill');\r\n-    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n-    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n-    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n-    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n-    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-    const settingsBtn = document.getElementById('settingsBtn');\r\n-    const settingsDropdown = document.getElementById('settingsDropdown');\r\n-    const menuEmpresa = document.getElementById('menuEmpresa');\r\n-    const menuUsuarios = document.getElementById('menuUsuarios');\r\n-    const menuPermissoes = document.getElementById('menuPermissoes');\r\n-    const permissionsModal = document.getElementById('permissionsModal');\r\n-    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-    const permissionsContainer = document.getElementById('permissionsContainer');\r\n-    const billForm = document.getElementById('billForm');\r\n-    const installmentsPreview = document.getElementById('installmentsPreview');\r\n-    const installmentsList = document.getElementById('installmentsList');\r\n-    const addToOrganizer = document.getElementById('addToOrganizer');\r\n-    const totalBillsSpan = document.getElementById('totalBills');\r\n-    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-    const clearFormBtn = document.getElementById('clearFormBtn');\r\n-    const prevMonthBtn = document.getElementById('prevMonth');\r\n-    const nextMonthBtn = document.getElementById('nextMonth');\r\n-    const companyInfoModal = document.getElementById('companyInfoModal');\r\n-    const closeCompanyInfoModalBtn = document.getElementById('closeCompanyInfoModal');\r\n-    const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-    const addUserModal = document.getElementById('addUserModal');\r\n-    const addUserForm = document.getElementById('addUserForm');\r\n-    const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n-    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-    const addCompanyModal = document.getElementById('addCompanyModal');\r\n-    const addCompanyForm = document.getElementById('addCompanyForm');\r\n-    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n-    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-\r\n-    // --- Variáveis de Dados e Estado ---\r\n-    let currentLoggedInCompany = null;\r\n-    let currentLoggedInUser = null;\r\n-    let isAdminLoggedIn = false;\r\n-    let loggedInViaAdmin = false;\r\n-    let selectedCompanyForAdmin = null;\r\n-    let currentBill = {};\r\n-    let selectedParcel = null;\r\n-    let userBoletos = [];\r\n-    let currentMonth, currentYear;\r\n-    let currentCompanyDetails = null;\r\n-\r\n-\r\n-    // --- Lógica para o Modal de Adicionar Boletos ---\r\n-    openAddBillModalBtn.addEventListener('click', () => {\r\n-        clearBillForm();\r\n-        addBillModal.classList.remove('hidden');\r\n-    });\r\n-    closeAddBillModalBtn.addEventListener('click', () => {\r\n-        addBillModal.classList.add('hidden');\r\n-    });\r\n-    addBillModal.addEventListener('click', (e) => {\r\n-        if (e.target === addBillModal) {\r\n-            addBillModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n-    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n-        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n-        if (!originalBarcode) return;\r\n-        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n-        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n-            try {\r\n-                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n-                    {\r\n-                        format: \"ITF\",\r\n-                        width: 1.5,\r\n-                        height: 80,\r\n-                        displayValue: true,\r\n-                        fontSize: 20,\r\n-                        lineColor: \"#000\",\r\n-                        background: \"#FFF\"\r\n-                    });\r\n-                barcodeFullScreenModal.classList.remove('hidden');\r\n-            }\r\n-            catch (e) {\r\n-                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n-            }\r\n-        }\r\n-        else {\r\n-            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n-        }\r\n-    });\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n-        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // Listener para o item \"Gerenciar Usuários\"\r\n-    menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        // Usamos o ID da empresa logada para buscar os detalhes\r\n-        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-        if (companyId) {\r\n-            // Chama a função para abrir o modal com a lista de usuários\r\n-            fetchCompanyDetailsAndOpenModal(companyId); \r\n-        }\r\n-    });\r\n-\r\n-\r\n-\r\n-// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n-settingsBtn.addEventListener('click', (event) => {\r\n-    event.stopPropagation();\r\n-    settingsDropdown.classList.toggle('hidden');\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (!settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n-\r\n-// Função auxiliar para os links de Empresa e Usuários\r\n-const openManagementModal = (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-    if (companyId) {\r\n-        fetchCompanyDetailsAndOpenModal(companyId);\r\n-    }\r\n-};\r\n-\r\n-// Listener EXCLUSIVO para o link de Permissões\r\n-    menuPermissoes.addEventListener('click', async (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        \r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/permissions', {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const permissions = await response.json();\r\n-            if (!response.ok) throw new Error(permissions.message);\r\n-\r\n-            // Chamamos a função para preencher o modal com os dados\r\n-            populatePermissionsModal(permissions);\r\n-\r\n-            permissionsModal.classList.remove('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal de permissões\r\n-    closePermissionsModal.addEventListener('click', () => {\r\n-        permissionsModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // Nova função para popular os interruptores com os dados do backend\r\n-    function populatePermissionsModal(permissions) {\r\n-        // Lógica para Gerente\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        // MUDANÇA: Marca o rádio correto com base no valor (none, own, all)\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-        \r\n-        // Lógica para Funcionário\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-    }\r\n-\r\n-// Atualizamos o listener do menu para usar a nova função\r\n-menuPermissoes.addEventListener('click', async (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    \r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch('http://localhost:5000/api/permissions', {\r\n-            headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n-        const permissions = await response.json();\r\n-        if (!response.ok) throw new Error(permissions.message);\r\n-\r\n-        // Chamamos a função para preencher o modal com os dados\r\n-        populatePermissionsModal(permissions);\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-    }\r\n-});\r\n-\r\n-\r\n-    // Adicionamos o listener para o novo botão Salvar\r\n-    document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n-        // Lemos o estado de cada interruptor e rádio\r\n-        const newPermissions = {\r\n-            Gerente: {\r\n-                canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-                // MUDANÇA: Pega o valor do rádio selecionado\r\n-                canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-                canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-            },\r\n-            Funcionário: {\r\n-                canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-                canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-                canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-            }\r\n-        };\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/permissions', {\r\n-                method: 'PATCH',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(newPermissions)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast(data.message, 'success');\r\n-            permissionsModal.classList.add('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao salvar permissões: ' + error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal\r\n-    closePermissionsModal.addEventListener('click', () => {\r\n-        permissionsModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n-    function closeQuickAddModal() {\r\n-        quickUserAddModal.classList.add('hidden');\r\n-    }\r\n-    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n-    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n-    quickUserAddForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const username = document.getElementById('quickAddUsername').value;\r\n-        const password = document.getElementById('quickAddPassword').value;\r\n-        if (!currentLoggedInCompany) {\r\n-            showToast('Erro: Empresa não identificada.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            closeQuickAddModal();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    // --- Funções de Utilitário e de Tela ---\r\n-    function showToast(message, type = 'success') {\r\n-        toastMessage.textContent = message;\r\n-        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n-        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n-        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n-        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n-        toastMessage.classList.remove('hidden');\r\n-        setTimeout(() => {\r\n-            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n-            setTimeout(() => {\r\n-                toastMessage.classList.add('hidden');\r\n-                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n-            }, 300);\r\n-        }, 3000);\r\n-    }\r\n-\r\n-    function hideAllScreens() {\r\n-        initialLoginScreen.classList.add('hidden');\r\n-        cnpjLoginScreen.classList.add('hidden');\r\n-        adminLoginScreen.classList.add('hidden');\r\n-        userLoginScreen.classList.add('hidden');\r\n-        adminDashboardScreen.classList.add('hidden');\r\n-        mainAppContent.classList.add('hidden');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        addBillModal.classList.add('hidden');\r\n-        billModal.classList.add('hidden');\r\n-        barcodeFullScreenModal.classList.add('hidden');\r\n-        quickUserAddModal.classList.add('hidden');\r\n-        openAddBillModalBtn.classList.add('hidden');\r\n-    }\r\n-\r\n-    function showInitialLogin() {\r\n-        hideAllScreens();\r\n-        initialLoginScreen.classList.remove('hidden');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        currentLoggedInCompany = null;\r\n-        currentLoggedInUser = null;\r\n-        isAdminLoggedIn = false;\r\n-        loggedInViaAdmin = false;\r\n-    }\r\n-\r\n-    function showCnpjLogin() {\r\n-        hideAllScreens();\r\n-        cnpjLoginForm.reset();\r\n-        cnpjLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showAdminLogin() {\r\n-        hideAllScreens();\r\n-        adminLoginForm.reset();\r\n-        adminLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showUserLogin(companyName) {\r\n-        hideAllScreens();\r\n-        userLoginForm.reset();\r\n-        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-        userLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showMainApp() {\r\n-        hideAllScreens();\r\n-        mainAppContent.classList.remove('hidden');\r\n-\r\n-        // Mantenha esta lógica que já tínhamos\r\n-        if (loggedInViaAdmin) {\r\n-            backToAdminBtn.classList.remove('hidden');\r\n-        } else {\r\n-            backToAdminBtn.classList.add('hidden');\r\n-        }\r\n-        \r\n-        if (!isAdminLoggedIn && currentLoggedInUser && currentLoggedInUser.role === 'Proprietário') {\r\n-            settingsMenuContainer.classList.remove('hidden');\r\n-        } else {\r\n-            settingsMenuContainer.classList.add('hidden');\r\n-        }\r\n-\r\n-        // ADICIONE ESTA LINHA para mostrar o botão \"+\"\r\n-        openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-        updateBillsOrganizer();\r\n-    }\r\n-\r\n-    function showAdminDashboard() {\r\n-        hideAllScreens();\r\n-        adminDashboardScreen.classList.remove('hidden');\r\n-        renderCompanyList();\r\n-    }\r\n-\r\n-    function formatCnpj(value) {\r\n-        value = value.replace(/\\D/g, '');\r\n-        if (value.length > 14) value = value.slice(0, 14);\r\n-        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n-        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n-        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n-        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n-        return value;\r\n-    }\r\n-    // --- Lógica de Navegação do Calendário ---\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth--;\r\n-        if (currentMonth < 0) {\r\n-            currentMonth = 11;\r\n-            currentYear--;\r\n-        }\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth++;\r\n-        if (currentMonth > 11) {\r\n-            currentMonth = 0;\r\n-            currentYear++;\r\n-        }\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-    // --- Lógica de Autenticação e Outras Funções ---\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const cnpj = cnpjInput.value;\r\n-        const password = cnpjPasswordInput.value;\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/company',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            cnpj,\r\n-                            password\r\n-                        }),\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInCompany = data.company;\r\n-            loggedInViaAdmin = false;\r\n-            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    adminLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const username = adminUsernameInput.value;\r\n-        const password = adminPasswordInput.value;\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            localStorage.setItem('authToken', data.token);\r\n-            isAdminLoggedIn = true;\r\n-            showToast('Login de Administrador bem-sucedido!', 'success');\r\n-            showAdminDashboard();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    userLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const username = userInput.value;\r\n-        const password = userPasswordInput.value;\r\n-        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n-            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/login/user',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInUser = data.user;\r\n-            showMainApp();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    registerUserBtn.addEventListener('click', async function () {\r\n-        const username = userInput.value;\r\n-        const password = userPasswordInput.value;\r\n-        if (!username || !password) {\r\n-            showToast('Por favor, preencha o nome de usuário e a senha.', 'error');\r\n-            return;\r\n-        }\r\n-        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n-            showToast('Erro: Nenhuma empresa selecionada. Faça o login da empresa novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            userLoginForm.reset();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    backToAdminBtn.addEventListener('click', () => {\r\n-        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n-\r\n-        // 1. Recuperamos o token original do admin que guardámos\r\n-        const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-        if (!adminToken) {\r\n-            showToast(\"Erro: Token de administrador não encontrado. Faça o login novamente.\", \"error\");\r\n-            showInitialLogin();\r\n-            return;\r\n-        }\r\n-\r\n-        // 2. Restauramos o token do admin como o token ativo\r\n-        localStorage.setItem('authToken', adminToken);\r\n-        localStorage.removeItem('superAdminToken'); // Limpamos o token temporário\r\n-\r\n-        // 3. Resetamos o estado da aplicação e mostramos o painel\r\n-        currentLoggedInUser = null;\r\n-        currentLoggedInCompany = null;\r\n-        loggedInViaAdmin = false;\r\n-        isAdminLoggedIn = true;\r\n-        showAdminDashboard();\r\n-    });\r\n-\r\n-    async function renderCompanyList() {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) return;\r\n-\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/companies', {\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-\r\n-            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n-\r\n-            const companies = await response.json();\r\n-            companyListDiv.innerHTML = '';\r\n-\r\n-            if (companies.length === 0) {\r\n-                noCompaniesMessage.classList.remove('hidden');\r\n-            } else {\r\n-                noCompaniesMessage.classList.add('hidden');\r\n-                companies.forEach(company => {\r\n-                    const companyCard = document.createElement('div');\r\n-                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                    \r\n-                    // MUDANÇA: A API agora não retorna a contagem de usuários diretamente na lista.\r\n-                    // Podemos mostrar esta informação de outra forma ou remover por enquanto para simplificar.\r\n-                    companyCard.innerHTML = `\r\n-                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                        </div>\r\n-                    `;\r\n-                    companyListDiv.appendChild(companyCard);\r\n-                });\r\n-\r\n-                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n-                    button.addEventListener('click', async (e) => {\r\n-                        const companyId = e.target.dataset.companyId;\r\n-                        const token = localStorage.getItem('authToken');\r\n-                        try {\r\n-                            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n-                                headers: {\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                }\r\n-                            });\r\n-                            \r\n-                            // MUDANÇA: A resposta agora é desestruturada em 'company' e 'users'.\r\n-                            const { company, users } = await response.json();\r\n-                            \r\n-                            if (!response.ok) throw new Error(company.message); // Usa a mensagem de erro do objeto company\r\n-                            \r\n-                            // MUDANÇA: Passamos os dois objetos para a função do modal.\r\n-                            openCompanyDetailsModal(company, users);\r\n-\r\n-                        } catch (error) {\r\n-                            showToast(error.message, 'error');\r\n-                        }\r\n-                    });\r\n-                });\r\n-\r\n-                // O listener do 'enter-company-btn' precisa ser atualizado também para funcionar com a nova lógica\r\n-                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-                    button.addEventListener('click', async (e) => {\r\n-                        const companyId = e.target.dataset.companyId;\r\n-                        const token = localStorage.getItem('authToken');\r\n-                        try {\r\n-                            // Precisamos buscar os usuários da empresa para poder entrar como o primeiro\r\n-                            const companyDetailsResponse = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n-                                headers: { 'Authorization': `Bearer ${token}` }\r\n-                            });\r\n-                            const { company, users } = await companyDetailsResponse.json();\r\n-\r\n-                            if (!companyDetailsResponse.ok) throw new Error(company.message);\r\n-                            \r\n-                            if (users.length === 0) {\r\n-                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n-                                return;\r\n-                            }\r\n-\r\n-                            // Entramos como o primeiro usuário da lista\r\n-                            const userId = users[0]._id; \r\n-                            \r\n-                            const impersonateResponse = await fetch('http://localhost:5000/api/admin/impersonate', {\r\n-                                method: 'POST',\r\n-                                headers: {\r\n-                                    'Content-Type': 'application/json',\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                },\r\n-                                body: JSON.stringify({ companyId, userId })\r\n-                            });\r\n-                            const data = await impersonateResponse.json();\r\n-                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n-                            \r\n-                            showToast(`Entrando na empresa ${company.nomeEmpresa}...`, 'success');\r\n-                            localStorage.setItem('superAdminToken', token);\r\n-                            localStorage.setItem('authToken', data.token);\r\n-                            currentLoggedInCompany = company;\r\n-                            currentLoggedInUser = data.user;\r\n-                            loggedInViaAdmin = true;\r\n-                            showMainApp();\r\n-                        } catch (error) {\r\n-                            showToast(error.message, 'error');\r\n-                        }\r\n-                    });\r\n-                });\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    createCompanyBtn.addEventListener('click', () => {\r\n-        openAddCompanyModal();\r\n-    });\r\n-\r\n-    // --- Lógica Principal do App de Boletos ---\r\n-    function initializeCalendarDate() {\r\n-        const today = new Date();\r\n-        currentMonth = today.getMonth();\r\n-        currentYear = today.getFullYear();\r\n-        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n-    }\r\n-\r\n-    async function updateBillsOrganizer() {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n-            showInitialLogin(); // Redireciona para o login se não houver token\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n-            const response = await fetch('http://localhost:5000/api/boletos', {\r\n-                method: 'GET',\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-\r\n-            if (!response.ok) {\r\n-                const errorData = await response.json();\r\n-                throw new Error(errorData.message || \"Erro ao buscar boletos.\");\r\n-            }\r\n-            \r\n-            // A resposta da nova API já vem no formato de uma lista de boletos,\r\n-            // com os dados do usuário \"populados\".\r\n-            userBoletos = await response.json();\r\n-            \r\n-            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-            totalBillsSpan.textContent = totalParcels;\r\n-\r\n-            // As funções de renderização e resumo são chamadas como antes.\r\n-            updateMonthlySummary();\r\n-            \r\n-            // A lógica para alternar entre calendário e lista diária continua a mesma.\r\n-            if (window.innerWidth >= 1024) {\r\n-                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n-                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n-                renderCalendar();\r\n-            } else {\r\n-                document.getElementById('billsOrganizer').classList.add('hidden');\r\n-                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n-                renderDailyBills();\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Se a busca falhar (ex: token expirado), deslogamos o usuário\r\n-            showInitialLogin();\r\n-        }\r\n-    }\r\n-\r\n-    function updateMonthlySummary() {\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n-            .filter(parcel => {\r\n-                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-            });\r\n-        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const totalNaoPago = totalMes - totalPago;\r\n-        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-            .filter(parcel => {\r\n-                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                return dueDate < today && !parcel.paid;\r\n-            });\r\n-        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n-            {\r\n-                style: 'currency',\r\n-                currency: 'BRL'\r\n-            });\r\n-        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n-        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n-    }\r\n-\r\n-    function renderCalendar() {\r\n-        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-        const calendarDays = document.getElementById('calendarDays');\r\n-        calendarDays.innerHTML = '';\r\n-        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-        for (let i = 0; i < firstDayOfMonth; i++) {\r\n-            const emptyCell = document.createElement('div');\r\n-            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n-            calendarDays.appendChild(emptyCell);\r\n-        }\r\n-        for (let day = 1; day <= daysInMonth; day++) {\r\n-            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-            const dayCell = document.createElement('div');\r\n-            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n-            dayCell.dataset.date = dateStr;\r\n-            const dayHeader = document.createElement('div');\r\n-            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-            dayHeader.textContent = day;\r\n-            dayCell.appendChild(dayHeader);\r\n-            dayCell.addEventListener('click', (e) => {\r\n-                if (e.target.closest('.bill-card')) return;\r\n-                const clickedDate = e.currentTarget.dataset.date;\r\n-                clearBillForm();\r\n-                document.getElementById('dueDate').value = clickedDate;\r\n-                addBillModal.classList.remove('hidden');\r\n-            });\r\n-            userBoletos.forEach(bill => {\r\n-                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                    const parcelElement = document.createElement('div');\r\n-                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n-                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n-                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                    dayCell.appendChild(parcelElement);\r\n-                });\r\n-            });\r\n-            calendarDays.appendChild(dayCell);\r\n-        }\r\n-    }\r\n-\r\n-    function renderDailyBills() {\r\n-        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n-    }\r\n-\r\n-    function clearBillForm() {\r\n-        billForm.reset();\r\n-        installmentsPreview.classList.add('hidden');\r\n-        installmentsList.innerHTML = '';\r\n-        currentBill = {};\r\n-    }\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    billForm.addEventListener('submit', function (e) {\r\n-        e.preventDefault();\r\n-        const billName = document.getElementById('billName').value;\r\n-        const dueDate = document.getElementById('dueDate').value;\r\n-        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n-        const installments = parseInt(document.getElementById('installments').value);\r\n-        const description = document.getElementById('description').value;\r\n-        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-        const barcode = document.getElementById('barcode').value;\r\n-        if (!billName || !dueDate || !totalAmount || !installments) {\r\n-            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-            return;\r\n-        }\r\n-        currentBill = {\r\n-            name: billName,\r\n-            parcels: []\r\n-        };\r\n-        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-        installmentsList.innerHTML = '';\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        currentBill.parcels.push({\r\n-            id: `${Date.now()}-${i}`,\r\n-            number: i + 1,\r\n-            amount: parcelAmount,\r\n-            dueDate: dateForInput,\r\n-            paid: false,\r\n-            description: description,\r\n-            barcode: barcode\r\n-        });\r\n-\r\n-        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n-            day: '2-digit',\r\n-            month: '2-digit',\r\n-            year: 'numeric'\r\n-        });\r\n-        \r\n-        const parcelItem = document.createElement('div');\r\n-        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n-        \r\n-        parcelItem.innerHTML = `\r\n-            <div class=\"flex items-center space-x-4\">\r\n-                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n-                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n-            </div>\r\n-            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n-        `;\r\n-        \r\n-        installmentsList.appendChild(parcelItem);\r\n-    }\r\n-        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-            input.addEventListener('input', (e) => {\r\n-                const index = parseInt(e.target.dataset.parcelIndex);\r\n-                const newAmount = parseFloat(e.target.value) || 0;\r\n-                if (!isNaN(newAmount)) {\r\n-                    currentBill.parcels[index].amount = newAmount;\r\n-                    updatePreviewTotal();\r\n-                }\r\n-            });\r\n-            input.addEventListener('blur', (e) => {\r\n-                const newAmount = parseFloat(e.target.value) || 0;\r\n-                e.target.value = newAmount.toFixed(2);\r\n-            });\r\n-        });\r\n-        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-            input.addEventListener('change', (e) => {\r\n-                const index = parseInt(e.target.dataset.parcelIndex);\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            });\r\n-        });\r\n-        installmentsPreview.classList.remove('hidden');\r\n-        updatePreviewTotal();\r\n-    });\r\n-\r\n-    function updatePreviewTotal() {\r\n-        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n-        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-    }\r\n-    addToOrganizer.addEventListener('click', async function () {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        if (!currentBill || !currentBill.name) {\r\n-            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/boletos',\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(currentBill)\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n-            showToast(data.message, 'success');\r\n-            addBillModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // --- Lógica do Modal de Edição de Boletos ---\r\n-    function openBillModal(bill, parcel) {\r\n-        // MUDANÇA: Usamos bill._id para o parentId e o parcel já terá o seu próprio _id.\r\n-        selectedParcel = { ...parcel, parentId: bill._id };\r\n-        \r\n-        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n-        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n-        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n-        modalBillBarcodeInput.value = parcel.barcode || '';\r\n-        modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n-            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n-        } else {\r\n-            showFullScreenBarcodeBtn.classList.add('hidden');\r\n-        }\r\n-        billModal.classList.remove('hidden');\r\n-    }\r\n-\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    billModal.addEventListener('click', (e) => {\r\n-        if (e.target === billModal) billModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    saveBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-\r\n-        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n-        const url = `http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n-\r\n-        const updatedData = {\r\n-            paid: document.getElementById('modalBillPaid').checked,\r\n-            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n-            dueDate: document.getElementById('modalBillDate').value,\r\n-            description: document.getElementById('modalBillDescription').value,\r\n-            barcode: document.getElementById('modalBillBarcode').value\r\n-        };\r\n-\r\n-        try {\r\n-            const response = await fetch(url, { // Usamos a nova URL\r\n-                method: 'PATCH',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                body: JSON.stringify(updatedData)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Parcela atualizada com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    deleteBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel) return;\r\n-        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        \r\n-        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n-        const url = `http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n-\r\n-        try {\r\n-            const response = await fetch(url, { // Usamos a nova URL\r\n-                method: 'DELETE',\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Parcela excluída com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    deleteEntireBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel || !selectedParcel.parentId) {\r\n-            showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n-            return;\r\n-        }\r\n-        \r\n-        if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n-            return;\r\n-        }\r\n-        \r\n-        const token = localStorage.getItem('authToken');\r\n-        // MUDANÇA: O ID do boleto vem de selectedParcel.parentId, que agora já é o _id correto.\r\n-        const boletoId = selectedParcel.parentId; \r\n-        \r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/boletos/${boletoId}`, {\r\n-                method: 'DELETE',\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            \r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast('Boleto completo excluído com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-            \r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`, {\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-            \r\n-            // A resposta da API é um objeto { company, users }\r\n-            const data = await response.json(); \r\n-\r\n-            if (!response.ok) {\r\n-                // A mensagem de erro pode estar em 'data.message'\r\n-                throw new Error(data.message || 'Não foi possível buscar os detalhes da empresa.');\r\n-            }\r\n-\r\n-            // MUDANÇA CRÍTICA: Em vez de passar o objeto 'data' inteiro,\r\n-            // passamos as suas propriedades 'company' e 'users' corretamente.\r\n-            openCompanyDetailsModal(data.company, data.users);\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    // --- Lógica do Modal de Detalhes da Empresa ---\r\n-    function openCompanyDetailsModal(company, users) {\r\n-        selectedCompanyForAdmin = company;\r\n-        document.getElementById('modalCompanyNameInput').value = company.nomeEmpresa;\r\n-\r\n-        modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n-        modalCompanyPasswordInput.value = '';\r\n-        modalCompanyUsers.innerHTML = '';\r\n-        \r\n-        if (users.length === 0) {\r\n-            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-        } else {\r\n-            // A lógica para listar usuários permanece a mesma\r\n-            const assignableRoles = isAdminLoggedIn ?\r\n-                ['Proprietário', 'Gerente', 'Funcionário'] :\r\n-                ['Gerente', 'Funcionário'];\r\n-\r\n-            users.forEach(user => {\r\n-                const userItem = document.createElement('div');\r\n-                userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n-\r\n-                const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n-                let roleDisplay = '';\r\n-\r\n-                if (isEditable) {\r\n-                    const optionsHTML = assignableRoles.map(role => {\r\n-                        if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n-                        return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n-                    }).join('');\r\n-                    roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n-                } else {\r\n-                    roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n-                }\r\n-\r\n-                userItem.innerHTML = `\r\n-                    <div class=\"flex items-center space-x-3\">\r\n-                        <span class=\"text-white\">${user.username}</span>\r\n-                        ${roleDisplay}\r\n-                    </div>\r\n-                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                `;\r\n-                modalCompanyUsers.appendChild(userItem);\r\n-            });\r\n-        }\r\n-\r\n-        // Recriamos os listeners para garantir que funcionem\r\n-        document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-            button.addEventListener('click', (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const companyId = selectedCompanyForAdmin._id;\r\n-                handleRemoveUser(companyId, userId);\r\n-            });\r\n-        });\r\n-\r\n-        document.querySelectorAll('.role-select').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                const token = localStorage.getItem('authToken');\r\n-                const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-                try {\r\n-                    const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}/role`, {\r\n-                        method: 'PATCH',\r\n-                        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                        body: JSON.stringify({ role: newRole })\r\n-                    });\r\n-\r\n-                    const data = await response.json();\r\n-                    if (!response.ok) throw new Error(data.message);\r\n-                    showToast(data.message, 'success');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                    fetchCompanyDetailsAndOpenModal(companyId);\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        companyDetailsModal.classList.remove('hidden');\r\n-    }\r\n-\r\n-    async function handleRemoveUser(companyId, userId) {\r\n-        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    addUserBtn.addEventListener('click', () => {\r\n-        openAddUserModal();\r\n-    });\r\n-\r\n-    deleteCompanyBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n-            return;\r\n-        }\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-\r\n-        const token = localStorage.getItem('authToken');\r\n-        const updatedData = {}; // Objeto vazio para guardar apenas o que mudou\r\n-\r\n-        // Pegamos os valores dos campos\r\n-        const newName = document.getElementById('modalCompanyNameInput').value;\r\n-        const newPassword = modalCompanyPasswordInput.value;\r\n-\r\n-        // MUDANÇA: Verificamos se o nome foi alterado e adicionamo-lo ao payload\r\n-        if (newName && newName.trim() !== '' && newName.trim() !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-            updatedData.nomeEmpresa = newName.trim();\r\n-        }\r\n-\r\n-        // A lógica da senha continua, mas agora também é adicionada ao mesmo payload\r\n-        if (newPassword && newPassword.length > 0) {\r\n-            updatedData.newPassword = newPassword;\r\n-        }\r\n-\r\n-        // Se nada foi alterado, informamos o usuário e paramos\r\n-        if (Object.keys(updatedData).length === 0) {\r\n-            showToast(\"Nenhuma alteração para salvar.\", \"info\");\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`, {\r\n-                method: 'PATCH',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                body: JSON.stringify(updatedData) // Enviamos o objeto com as alterações\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList(); // Atualizamos a lista de empresas para refletir o novo nome\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    companyDetailsModal.addEventListener('click', (e) => {\r\n-        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n-    });\r\n     // --- Inicialização ---\r\n     initializeCalendarDate();\r\n-    showInitialLogin();\r\n+    initializeApp();\r\n \r\n-    // Função para abrir e preencher o modal\r\n-    async function openCompanyInfoModal() {\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${currentLoggedInCompany._id}`, {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            currentCompanyDetails = data.company;\r\n-            document.getElementById('companyInfoCnpj').textContent = formatCnpj(currentCompanyDetails.cnpj);\r\n-            document.getElementById('companyInfoName').value = currentCompanyDetails.nomeEmpresa;\r\n-            document.getElementById('companyInfoEmail').value = currentCompanyDetails.email || '';\r\n-            document.getElementById('companyInfoTelefone').value = currentCompanyDetails.telefoneFixo || '';\r\n-            document.getElementById('companyInfoWhatsapp').value = currentCompanyDetails.telefoneWhatsapp || '';\r\n \r\n-            // MUDANÇA: Aplicamos as máscaras AQUI, depois de o modal estar preenchido e prestes a ser exibido.\r\n-            const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n-            if (telefoneFixoInput) {\r\n-                IMask(telefoneFixoInput, { mask: '(00) 0000-0000' });\r\n-            }\r\n-            const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n-            if (whatsappInput) {\r\n-                IMask(whatsappInput, { mask: '(00) 00000-0000' });\r\n-            }\r\n-\r\n-            companyInfoModal.classList.remove('hidden');\r\n-\r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    // Listener para o link do menu \"Detalhes da Empresa\"\r\n-    menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        // Chama a função para abrir o modal com as informações da empresa\r\n-        openCompanyInfoModal(); \r\n-    });\r\n-\r\n-    // Listener para o botão de salvar\r\n-    saveCompanyInfoBtn.addEventListener('click', async () => {\r\n-        const payload = {\r\n-            nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-            \r\n-            // MUDANÇA: Adicionamos o e-mail ao payload que será enviado para a API\r\n-            email: document.getElementById('companyInfoEmail').value,\r\n-\r\n-            telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-            telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-        };\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`http://localhost:5000/api/companies/${currentCompanyDetails._id}`, {\r\n-                method: 'PATCH',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(payload)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast(data.message, 'success');\r\n-            companyInfoModal.classList.add('hidden');\r\n-\r\n-        } catch (error) {\r\n-            showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal\r\n-    closeCompanyInfoModalBtn.addEventListener('click', () => {\r\n-        companyInfoModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // --- LÓGICA PARA MÁSCARAS DE INPUT (IMask.js) ---\r\n-\r\n-    document.addEventListener('DOMContentLoaded', () => {\r\n-        // Máscara para o campo de CNPJ no modal de login da empresa (ESTA FICA)\r\n-        const cnpjInput = document.getElementById('cnpjInput');\r\n-        if (cnpjInput) {\r\n-            const cnpjMask = IMask(cnpjInput, {\r\n-                mask: '00.000.000/0000-00'\r\n-            });\r\n-        }\r\n-        \r\n-        // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n-        const totalAmountInput = document.getElementById('totalAmount');\r\n-        if (totalAmountInput) {\r\n-            const amountMask = IMask(totalAmountInput, {\r\n-                mask: 'R$ num',\r\n-                blocks: {\r\n-                    num: {\r\n-                        mask: Number,\r\n-                        scale: 2,\r\n-                        radix: ',',\r\n-                        thousandsSeparator: '.',\r\n-                        padFractionalZeros: true\r\n-                    }\r\n-                }\r\n-            });\r\n-        }\r\n-\r\n-        // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n-        const modalAmountInput = document.getElementById('modalBillAmount');\r\n-        if (modalAmountInput) {\r\n-            const modalAmountMask = IMask(modalAmountInput, {\r\n-                mask: 'R$ num',\r\n-                blocks: {\r\n-                    num: {\r\n-                        mask: Number,\r\n-                        scale: 2,\r\n-                        radix: ',',\r\n-                        thousandsSeparator: '.',\r\n-                        padFractionalZeros: true\r\n-                    }\r\n-                }\r\n-            });\r\n-        }\r\n-    });\r\n-\r\n-    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR USUÁRIO ---\r\n-\r\n-    // Função para abrir o modal\r\n-    function openAddUserModal() {\r\n-        addUserForm.reset(); // Limpa o formulário\r\n-        addUserModal.classList.remove('hidden');\r\n-        document.getElementById('addUsernameInput').focus();\r\n-    }\r\n-\r\n-    // Função para fechar o modal\r\n-    function closeAddUserModal() {\r\n-        addUserModal.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Listeners para fechar/cancelar\r\n-    closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-\r\n-    // Listener para o envio do formulário\r\n-    addUserForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault(); // Impede o recarregamento da página\r\n-\r\n-        const username = document.getElementById('addUsernameInput').value;\r\n-        const password = document.getElementById('addUserPasswordInput').value;\r\n-        const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-\r\n-        // Validação de senha\r\n-        if (password !== confirmPassword) {\r\n-            showToast(\"As senhas não coincidem.\", \"error\");\r\n-            return;\r\n-        }\r\n-\r\n-        // Identifica a empresa atual (seja via admin ou login normal)\r\n-        const companyId = selectedCompanyForAdmin ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n-        if (!companyId) {\r\n-            showToast(\"Erro: Não foi possível identificar a empresa.\", \"error\");\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('http://localhost:5000/api/auth/register/user', {\r\n-                method: 'POST',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify({ username, password, companyId })\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-\r\n-            showToast(data.message, 'success');\r\n-            closeAddUserModal();\r\n-\r\n-            // Atualiza a lista de usuários na tela que estiver aberta\r\n-            if (adminDashboardScreen.classList.contains('hidden')) {\r\n-                // Se estiver no modal de \"Gerenciar Usuários\" do proprietário\r\n-                fetchCompanyDetailsAndOpenModal(companyId, true); // O 'true' indica que é uma atualização\r\n-            } else {\r\n-                // Se estiver no painel do admin\r\n-                renderCompanyList();\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR EMPRESA ---\r\n-\r\n-    // Aplica a máscara de CNPJ ao novo campo\r\n-    const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-    if (addCompanyCnpjInput) {\r\n-        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    // Função para abrir o modal\r\n-    function openAddCompanyModal() {\r\n-        addCompanyForm.reset(); // Limpa o formulário\r\n-        addCompanyModal.classList.remove('hidden');\r\n-        document.getElementById('addCompanyNameInput').focus();\r\n-    }\r\n-\r\n-    // Função para fechar o modal\r\n-    function closeAddCompanyModal() {\r\n-        addCompanyModal.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Listeners para fechar/cancelar\r\n-    closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-\r\n-    // Listener para o envio do formulário\r\n-    addCompanyForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-\r\n-        const payload = {\r\n-            nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-            cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-            senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-            ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-            ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-        };\r\n-\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            const response = await fetch('http://localhost:5000/api/companies/register', {\r\n-                method: 'POST',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(payload)\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-\r\n-            showToast(data.message, 'success');\r\n-            closeAddCompanyModal();\r\n-            renderCompanyList(); // Atualiza a lista de empresas no painel de admin\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752349744132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1339,8 +1339,11 @@\n     closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n     companyDetailsModal.addEventListener('click', (e) => {\r\n         if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n     });\r\n+    // --- Inicialização ---\r\n+    initializeCalendarDate();\r\n+    initializeApp();\r\n \r\n     // Função para abrir e preencher o modal\r\n     async function openCompanyInfoModal() {\r\n         try {\r\n@@ -1591,10 +1594,6 @@\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n \r\n-    // --- Inicialização ---\r\n-    initializeCalendarDate();\r\n-    initializeApp();\r\n \r\n-\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752350728992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n         settingsDropdown.classList.add('hidden');\r\n         \r\n         try {\r\n             const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('${API_BASE_URL}/api/permissions', {\r\n+            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n                 headers: { 'Authorization': `Bearer ${token}` }\r\n             });\r\n             const permissions = await response.json();\r\n             if (!response.ok) throw new Error(permissions.message);\r\n@@ -227,9 +227,9 @@\n     settingsDropdown.classList.add('hidden');\r\n     \r\n     try {\r\n         const token = localStorage.getItem('authToken');\r\n-        const response = await fetch('${API_BASE_URL}/api/permissions', {\r\n+        const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n             headers: { 'Authorization': `Bearer ${token}` }\r\n         });\r\n         const permissions = await response.json();\r\n         if (!response.ok) throw new Error(permissions.message);\r\n@@ -262,9 +262,9 @@\n         };\r\n \r\n         try {\r\n             const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('${API_BASE_URL}/api/permissions', {\r\n+            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n                 method: 'PATCH',\r\n                 headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n                 body: JSON.stringify(newPermissions)\r\n             });\r\n@@ -298,9 +298,9 @@\n             return;\r\n         }\r\n         try {\r\n             const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/register/user',\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`,\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -497,9 +497,9 @@\n         e.preventDefault();\r\n         const cnpj = cnpjInput.value;\r\n         const password = cnpjPasswordInput.value;\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/login/company',\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/login/company`,\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -526,9 +526,9 @@\n         e.preventDefault();\r\n         const username = adminUsernameInput.value;\r\n         const password = adminPasswordInput.value;\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/login/admin',\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/login/admin`,\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -559,9 +559,9 @@\n             showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/login/user',\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/login/user`,\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -596,9 +596,9 @@\n             showToast('Erro: Nenhuma empresa selecionada. Faça o login da empresa novamente.', 'error');\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/register/user',\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`,\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -648,9 +648,9 @@\n         const token = localStorage.getItem('authToken');\r\n         if (!token) return;\r\n \r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/companies', {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies`, {\r\n                 headers: {\r\n                     'Authorization': `Bearer ${token}`\r\n                 }\r\n             });\r\n@@ -727,9 +727,9 @@\n \r\n                             // Entramos como o primeiro usuário da lista\r\n                             const userId = users[0]._id; \r\n                             \r\n-                            const impersonateResponse = await fetch('${API_BASE_URL}/api/admin/impersonate', {\r\n+                            const impersonateResponse = await fetch(`${API_BASE_URL}/api/admin/impersonate`, {\r\n                                 method: 'POST',\r\n                                 headers: {\r\n                                     'Content-Type': 'application/json',\r\n                                     'Authorization': `Bearer ${token}`\r\n@@ -778,9 +778,9 @@\n         }\r\n \r\n         try {\r\n             // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n-            const response = await fetch('${API_BASE_URL}/api/boletos', {\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos`, {\r\n                 method: 'GET',\r\n                 headers: {\r\n                     'Authorization': `Bearer ${token}`\r\n                 }\r\n@@ -991,9 +991,9 @@\n             showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n             return;\r\n         }\r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/boletos',\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos`,\r\n                 {\r\n                     method: 'POST',\r\n                     headers:\r\n                     {\r\n@@ -1507,9 +1507,9 @@\n         }\r\n \r\n         try {\r\n             const token = localStorage.getItem('authToken');\r\n-            const response = await fetch('${API_BASE_URL}/api/auth/register/user', {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`, {\r\n                 method: 'POST',\r\n                 headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n                 body: JSON.stringify({ username, password, companyId })\r\n             });\r\n@@ -1576,9 +1576,9 @@\n             return;\r\n         }\r\n \r\n         try {\r\n-            const response = await fetch('${API_BASE_URL}/api/companies/register', {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/register`, {\r\n                 method: 'POST',\r\n                 headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n                 body: JSON.stringify(payload)\r\n             });\r\n"
                },
                {
                    "date": 1752351007914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n document.addEventListener('DOMContentLoaded', function() {\r\n     // --- Elementos HTML (Declarações completas) ---\r\n     const API_BASE_URL = 'http://localhost:5000';\r\n+    const loadingScreen = document.getElementById('loadingScreen');\r\n     const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n     const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n     const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n     const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n"
                },
                {
                    "date": 1752351088013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,51 +356,56 @@\n         openAddBillModalBtn.classList.add('hidden');\r\n     }\r\n \r\n     async function initializeApp() {\r\n-    const token = localStorage.getItem('authToken');\r\n+        // A tela de carregamento já está visível por padrão, não precisamos de a mostrar aqui.\r\n+        const token = localStorage.getItem('authToken');\r\n \r\n-    // Se não há token, vai para a tela de login\r\n-    if (!token) {\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n+        try {\r\n+            if (!token) {\r\n+                // Se não há token, simplesmente mostramos a tela de login.\r\n+                showInitialLogin();\r\n+                return;\r\n+            }\r\n \r\n-    // Se há um token, tentamos verificar com o backend\r\n-    try {\r\n-        const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\r\n-            headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n+            // Se há um token, verificamos com o backend.\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n \r\n-        if (!response.ok) {\r\n-            // Se o token for inválido ou expirado, limpamos o lixo e vamos para o login.\r\n-            localStorage.removeItem('authToken');\r\n-            localStorage.removeItem('superAdminToken');\r\n+            if (!response.ok) {\r\n+                localStorage.removeItem('authToken');\r\n+                localStorage.removeItem('superAdminToken');\r\n+                showInitialLogin();\r\n+                return;\r\n+            }\r\n+\r\n+            const data = await response.json();\r\n+\r\n+            // Com base na resposta, restauramos o estado e mostramos a tela correta.\r\n+            if (data.user.role === 'SuperAdmin') {\r\n+                isAdminLoggedIn = true;\r\n+                showAdminDashboard();\r\n+            } else {\r\n+                currentLoggedInUser = data.user;\r\n+                currentLoggedInCompany = data.company;\r\n+                isAdminLoggedIn = false;\r\n+                showMainApp();\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            // Em caso de erro, sempre vamos para a tela de login por segurança.\r\n             showInitialLogin();\r\n-            return;\r\n+        } finally {\r\n+            // MUDANÇA IMPORTANTE: O bloco 'finally' é executado SEMPRE,\r\n+            // garantindo que a tela de carregamento seja escondida, não importa o resultado.\r\n+            loadingScreen.classList.add('hidden');\r\n         }\r\n-\r\n-        const data = await response.json();\r\n-        \r\n-        // Se o token for válido, restauramos o estado da aplicação\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            isAdminLoggedIn = false;\r\n-            showMainApp();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        // Em caso de erro de rede, etc., vai para o login por segurança\r\n-        showInitialLogin();\r\n     }\r\n-}\r\n \r\n     function showInitialLogin() {\r\n         hideAllScreens();\r\n+        loadingScreen.classList.add('hidden');\r\n         initialLoginScreen.classList.remove('hidden');\r\n         localStorage.removeItem('authToken');\r\n         localStorage.removeItem('superAdminToken');\r\n         currentLoggedInCompany = null;\r\n"
                },
                {
                    "date": 1752351352375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,9 @@\n     const addCompanyModal = document.getElementById('addCompanyModal');\r\n     const addCompanyForm = document.getElementById('addCompanyForm');\r\n     const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n     const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+    const INACTIVITY_TIMEOUT = 30 * 60 * 1000;\r\n \r\n     // --- Variáveis de Dados e Estado ---\r\n     let currentLoggedInCompany = null;\r\n     let currentLoggedInUser = null;\r\n@@ -97,10 +98,57 @@\n     let selectedParcel = null;\r\n     let userBoletos = [];\r\n     let currentMonth, currentYear;\r\n     let currentCompanyDetails = null;\r\n+    let inactivityTimer; // Variável para guardar o nosso cronómetro\r\n \r\n \r\n+        // --- LÓGICA DE INATIVIDADE E LOGOUT AUTOMÁTICO ---\r\n+    function logoutDueToInactivity() {\r\n+        // Primeiro, limpamos o cronómetro para não tentar fazer logout de novo\r\n+        clearInactivityTimer(); \r\n+        // Mostramos uma mensagem amigável\r\n+        showToast(\"Você foi desconectado por inatividade.\", \"info\");\r\n+        // Chamamos a função de login, que já limpa tudo\r\n+        showInitialLogin(); \r\n+    }\r\n+\r\n+    // Função que reinicia o cronómetro\r\n+    function resetInactivityTimer() {\r\n+        // Limpa o cronómetro antigo\r\n+        clearTimeout(inactivityTimer);\r\n+        // Cria um novo cronómetro que chamará a função de logout depois de 30 minutos\r\n+        inactivityTimer = setTimeout(logoutDueToInactivity, INACTIVITY_TIMEOUT);\r\n+    }\r\n+\r\n+    // Função para iniciar o monitoramento de inatividade\r\n+    function startInactivityTimer() {\r\n+        // Adiciona \"espiões\" para vários tipos de atividade do usuário.\r\n+        // Qualquer uma destas ações irá reiniciar o cronómetro.\r\n+        window.addEventListener('mousemove', resetInactivityTimer);\r\n+        window.addEventListener('mousedown', resetInactivityTimer);\r\n+        window.addEventListener('keypress', resetInactivityTimer);\r\n+        window.addEventListener('scroll', resetInactivityTimer, true);\r\n+        window.addEventListener('touchstart', resetInactivityTimer);\r\n+        \r\n+        // Inicia o cronómetro pela primeira vez\r\n+        resetInactivityTimer();\r\n+        console.log(\"Monitor de inatividade iniciado. Logout em 30 minutos.\");\r\n+    }\r\n+\r\n+    // Função para parar o monitoramento e limpar tudo\r\n+    function clearInactivityTimer() {\r\n+        clearTimeout(inactivityTimer);\r\n+        // Remove os \"espiões\" para não consumir memória desnecessariamente\r\n+        window.removeEventListener('mousemove', resetInactivityTimer);\r\n+        window.removeEventListener('mousedown', resetInactivityTimer);\r\n+        window.removeEventListener('keypress', resetInactivityTimer);\r\n+        window.removeEventListener('scroll', resetInactivityTimer, true);\r\n+        window.removeEventListener('touchstart', resetInactivityTimer);\r\n+        console.log(\"Monitor de inatividade parado.\");\r\n+    }\r\n+\r\n+\r\n     // --- Lógica para o Modal de Adicionar Boletos ---\r\n     openAddBillModalBtn.addEventListener('click', () => {\r\n         clearBillForm();\r\n         addBillModal.classList.remove('hidden');\r\n@@ -402,8 +450,9 @@\n         }\r\n     }\r\n \r\n     function showInitialLogin() {\r\n+        clearInactivityTimer();\r\n         hideAllScreens();\r\n         loadingScreen.classList.add('hidden');\r\n         initialLoginScreen.classList.remove('hidden');\r\n         localStorage.removeItem('authToken');\r\n@@ -453,14 +502,16 @@\n         // ADICIONE ESTA LINHA para mostrar o botão \"+\"\r\n         openAddBillModalBtn.classList.remove('hidden');\r\n \r\n         updateBillsOrganizer();\r\n+        startInactivityTimer();\r\n     }\r\n \r\n     function showAdminDashboard() {\r\n         hideAllScreens();\r\n         adminDashboardScreen.classList.remove('hidden');\r\n         renderCompanyList();\r\n+        tartInactivityTimer();\r\n     }\r\n \r\n     function formatCnpj(value) {\r\n         value = value.replace(/\\D/g, '');\r\n"
                },
                {
                    "date": 1752353815855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n document.addEventListener('DOMContentLoaded', function() {\r\n     // --- Elementos HTML (Declarações completas) ---\r\n     const API_BASE_URL = 'http://localhost:5000';\r\n+    const generalLoader = document.getElementById('generalLoader');\r\n     const loadingScreen = document.getElementById('loadingScreen');\r\n     const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n     const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n     const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n@@ -232,8 +233,9 @@\n // Listener EXCLUSIVO para o link de Permissões\r\n     menuPermissoes.addEventListener('click', async (e) => {\r\n         e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n+        showLoader();\r\n         \r\n         try {\r\n             const token = localStorage.getItem('authToken');\r\n             const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n@@ -247,8 +249,10 @@\n \r\n             permissionsModal.classList.remove('hidden');\r\n         } catch (error) {\r\n             showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n         }\r\n     });\r\n \r\n     // Listener para fechar o modal de permissões\r\n@@ -308,8 +312,9 @@\n                 canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n                 canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n             }\r\n         };\r\n+        showLoader()\r\n \r\n         try {\r\n             const token = localStorage.getItem('authToken');\r\n             const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n@@ -323,8 +328,10 @@\n             showToast(data.message, 'success');\r\n             permissionsModal.classList.add('hidden');\r\n         } catch (error) {\r\n             showToast('Erro ao salvar permissões: ' + error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n         }\r\n     });\r\n \r\n     // Listener para fechar o modal\r\n@@ -388,8 +395,17 @@\n             }, 300);\r\n         }, 3000);\r\n     }\r\n \r\n+    // --- Funções para o Loader Genérico ---\r\n+    function showLoader() {\r\n+        generalLoader.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function hideLoader() {\r\n+        generalLoader.classList.add('hidden');\r\n+    }\r\n+\r\n     function hideAllScreens() {\r\n         initialLoginScreen.classList.add('hidden');\r\n         cnpjLoginScreen.classList.add('hidden');\r\n         adminLoginScreen.classList.add('hidden');\r\n@@ -553,8 +569,9 @@\n     cnpjLoginForm.addEventListener('submit', async function (e) {\r\n         e.preventDefault();\r\n         const cnpj = cnpjInput.value;\r\n         const password = cnpjPasswordInput.value;\r\n+        showLoader();\r\n         try {\r\n             const response = await fetch(`${API_BASE_URL}/api/auth/login/company`,\r\n                 {\r\n                     method: 'POST',\r\n@@ -578,12 +595,14 @@\n         catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n+\r\n     adminLoginForm.addEventListener('submit', async function (e) {\r\n         e.preventDefault();\r\n         const username = adminUsernameInput.value;\r\n         const password = adminPasswordInput.value;\r\n+        showLoader();\r\n         try {\r\n             const response = await fetch(`${API_BASE_URL}/api/auth/login/admin`,\r\n                 {\r\n                     method: 'POST',\r\n@@ -615,8 +634,9 @@\n         if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n             showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n             return;\r\n         }\r\n+        showLoader();\r\n         try {\r\n             const response = await fetch(`${API_BASE_URL}/api/auth/login/user`,\r\n                 {\r\n                     method: 'POST',\r\n@@ -639,8 +659,10 @@\n             showMainApp();\r\n         }\r\n         catch (error) {\r\n             showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n         }\r\n     });\r\n     registerUserBtn.addEventListener('click', async function () {\r\n         const username = userInput.value;\r\n@@ -703,8 +725,9 @@\n \r\n     async function renderCompanyList() {\r\n         const token = localStorage.getItem('authToken');\r\n         if (!token) return;\r\n+        showLoader();\r\n \r\n         try {\r\n             const response = await fetch(`${API_BASE_URL}/api/companies`, {\r\n                 headers: {\r\n@@ -810,8 +833,10 @@\n                 });\r\n             }\r\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n         }\r\n     }\r\n \r\n     createCompanyBtn.addEventListener('click', () => {\r\n@@ -832,8 +857,9 @@\n             showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n             showInitialLogin(); // Redireciona para o login se não houver token\r\n             return;\r\n         }\r\n+        showLoader();\r\n \r\n         try {\r\n             // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n             const response = await fetch(`${API_BASE_URL}/api/boletos`, {\r\n@@ -1047,8 +1073,9 @@\n         if (!currentBill || !currentBill.name) {\r\n             showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n             return;\r\n         }\r\n+        showLoader();\r\n         try {\r\n             const response = await fetch(`${API_BASE_URL}/api/boletos`,\r\n                 {\r\n                     method: 'POST',\r\n@@ -1066,8 +1093,10 @@\n             updateBillsOrganizer();\r\n         }\r\n         catch (error) {\r\n             showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader()\r\n         }\r\n     });\r\n \r\n     // --- Lógica do Modal de Edição de Boletos ---\r\n@@ -1097,19 +1126,17 @@\n \r\n     saveBillBtn.addEventListener('click', async () => {\r\n         if (!selectedParcel) return;\r\n         const token = localStorage.getItem('authToken');\r\n-\r\n-        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n         const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n-\r\n         const updatedData = {\r\n             paid: document.getElementById('modalBillPaid').checked,\r\n             amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n             dueDate: document.getElementById('modalBillDate').value,\r\n             description: document.getElementById('modalBillDescription').value,\r\n             barcode: document.getElementById('modalBillBarcode').value\r\n         };\r\n+        showLoader();\r\n \r\n         try {\r\n             const response = await fetch(url, { // Usamos a nova URL\r\n                 method: 'PATCH',\r\n@@ -1125,8 +1152,10 @@\n             billModal.classList.add('hidden');\r\n             updateBillsOrganizer();\r\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n         }\r\n     });\r\n \r\n     deleteBillBtn.addEventListener('click', async () => {\r\n@@ -1187,8 +1216,9 @@\n     });\r\n \r\n     async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n         const token = localStorage.getItem('authToken');\r\n+        showLoader();\r\n         try {\r\n             const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n                 headers: {\r\n                     'Authorization': `Bearer ${token}`\r\n@@ -1208,8 +1238,10 @@\n             openCompanyDetailsModal(data.company, data.users);\r\n \r\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n         }\r\n     }\r\n \r\n     // --- Lógica do Modal de Detalhes da Empresa ---\r\n@@ -1453,8 +1485,9 @@\n \r\n             telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n             telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n         };\r\n+        showLoader();\r\n \r\n         try {\r\n             const token = localStorage.getItem('authToken');\r\n             const response = await fetch(`${API_BASE_URL}/api/companies/${currentCompanyDetails._id}`, {\r\n@@ -1617,22 +1650,21 @@\n \r\n     // Listener para o envio do formulário\r\n     addCompanyForm.addEventListener('submit', async (e) => {\r\n         e.preventDefault();\r\n-\r\n         const payload = {\r\n             nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n             cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n             senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n             ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n             ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n         };\r\n-\r\n         const token = localStorage.getItem('authToken');\r\n         if (!token) {\r\n             showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n             return;\r\n         }\r\n+        showLoader();\r\n \r\n         try {\r\n             const response = await fetch(`${API_BASE_URL}/api/companies/register`, {\r\n                 method: 'POST',\r\n@@ -1648,8 +1680,10 @@\n             renderCompanyList(); // Atualiza a lista de empresas no painel de admin\r\n \r\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader()\r\n         }\r\n     });\r\n \r\n \r\n"
                },
                {
                    "date": 1752354444239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -593,8 +593,10 @@\n             showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n         }\r\n         catch (error) {\r\n             showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n         }\r\n     });\r\n \r\n     adminLoginForm.addEventListener('submit', async function (e) {\r\n@@ -624,8 +626,10 @@\n             showAdminDashboard();\r\n         }\r\n         catch (error) {\r\n             showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n         }\r\n     });\r\n     userLoginForm.addEventListener('submit', async function (e) {\r\n         e.preventDefault();\r\n@@ -898,8 +902,10 @@\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n             // Se a busca falhar (ex: token expirado), deslogamos o usuário\r\n             showInitialLogin();\r\n+        } finally{\r\n+            hideLoader()\r\n         }\r\n     }\r\n \r\n     function updateMonthlySummary() {\r\n@@ -1502,8 +1508,10 @@\n             companyInfoModal.classList.add('hidden');\r\n \r\n         } catch (error) {\r\n             showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n         }\r\n     });\r\n \r\n     // Listener para fechar o modal\r\n"
                },
                {
                    "date": 1752355760932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,8 @@\n     const userLoginScreen = document.getElementById('userLoginScreen');\r\n     const userLoginForm = document.getElementById('userLoginForm');\r\n     const userInput = document.getElementById('userInput');\r\n     const userPasswordInput = document.getElementById('userPasswordInput');\r\n-    const registerUserBtn = document.getElementById('registerUserBtn');\r\n     const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n     const welcomeUserText = document.getElementById('welcomeUserText');\r\n     const mainAppContent = document.getElementById('mainAppContent');\r\n     const toastMessage = document.getElementById('toastMessage');\r\n@@ -667,43 +666,8 @@\n         } finally {\r\n             hideLoader();\r\n         }\r\n     });\r\n-    registerUserBtn.addEventListener('click', async function () {\r\n-        const username = userInput.value;\r\n-        const password = userPasswordInput.value;\r\n-        if (!username || !password) {\r\n-            showToast('Por favor, preencha o nome de usuário e a senha.', 'error');\r\n-            return;\r\n-        }\r\n-        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n-            showToast('Erro: Nenhuma empresa selecionada. Faça o login da empresa novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            userLoginForm.reset();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n     backToAdminBtn.addEventListener('click', () => {\r\n         showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n \r\n         // 1. Recuperamos o token original do admin que guardámos\r\n"
                },
                {
                    "date": 1752355999132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -500,22 +500,25 @@\n     function showMainApp() {\r\n         hideAllScreens();\r\n         mainAppContent.classList.remove('hidden');\r\n \r\n-        // Mantenha esta lógica que já tínhamos\r\n+        if (currentLoggedInUser && currentLoggedInUser.username) {\r\n+            document.getElementById('loggedInUserDisplay').textContent = `Logado como: ${currentLoggedInUser.username}`;\r\n+        }\r\n+\r\n+        // O resto da sua função continua igual...\r\n         if (loggedInViaAdmin) {\r\n             backToAdminBtn.classList.remove('hidden');\r\n         } else {\r\n             backToAdminBtn.classList.add('hidden');\r\n         }\r\n         \r\n-        if (!isAdminLoggedIn && currentLoggedInUser && currentLoggedInUser.role === 'Proprietário') {\r\n+        if (!isAdminLoggedIn && currentLoggedInUser.role === 'Proprietário') {\r\n             settingsMenuContainer.classList.remove('hidden');\r\n         } else {\r\n             settingsMenuContainer.classList.add('hidden');\r\n         }\r\n \r\n-        // ADICIONE ESTA LINHA para mostrar o botão \"+\"\r\n         openAddBillModalBtn.classList.remove('hidden');\r\n \r\n         updateBillsOrganizer();\r\n         startInactivityTimer();\r\n"
                },
                {
                    "date": 1752356188684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -501,9 +501,9 @@\n         hideAllScreens();\r\n         mainAppContent.classList.remove('hidden');\r\n \r\n         if (currentLoggedInUser && currentLoggedInUser.username) {\r\n-            document.getElementById('loggedInUserDisplay').textContent = `Logado como: ${currentLoggedInUser.username}`;\r\n+            document.getElementById('loggedInUserDisplay').textContent = `${currentLoggedInUser.username}`;\r\n         }\r\n \r\n         // O resto da sua função continua igual...\r\n         if (loggedInViaAdmin) {\r\n"
                },
                {
                    "date": 1752356212719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -501,9 +501,9 @@\n         hideAllScreens();\r\n         mainAppContent.classList.remove('hidden');\r\n \r\n         if (currentLoggedInUser && currentLoggedInUser.username) {\r\n-            document.getElementById('loggedInUserDisplay').textContent = `${currentLoggedInUser.username}`;\r\n+            document.getElementById('loggedInUserDisplay').textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n         }\r\n \r\n         // O resto da sua função continua igual...\r\n         if (loggedInViaAdmin) {\r\n"
                },
                {
                    "date": 1752357398095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -503,10 +503,9 @@\n \r\n         if (currentLoggedInUser && currentLoggedInUser.username) {\r\n             document.getElementById('loggedInUserDisplay').textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n         }\r\n-\r\n-        // O resto da sua função continua igual...\r\n+        \r\n         if (loggedInViaAdmin) {\r\n             backToAdminBtn.classList.remove('hidden');\r\n         } else {\r\n             backToAdminBtn.classList.add('hidden');\r\n"
                },
                {
                    "date": 1752503286401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -419,8 +419,29 @@\n         openAddBillModalBtn.classList.add('hidden');\r\n     }\r\n \r\n     async function initializeApp() {\r\n+\r\n+            // Verifica se há um login de empresa pendente vindo da página principal\r\n+        const pendingCompanyLogin = localStorage.getItem('pendingCompanyLogin');\r\n+        if (pendingCompanyLogin) {\r\n+            try {\r\n+                const company = JSON.parse(pendingCompanyLogin);\r\n+                currentLoggedInCompany = company; // Define o estado da empresa\r\n+                \r\n+                // Limpa o item para não ser usado novamente\r\n+                localStorage.removeItem('pendingCompanyLogin'); \r\n+                \r\n+                // Pula diretamente para a tela de login do usuário\r\n+                showUserLogin(company.nomeEmpresa); \r\n+                loadingScreen.classList.add('hidden'); // Esconde o loader inicial\r\n+                return; // Para a execução para não continuar com a verificação de token\r\n+            } catch(e) {\r\n+                // Se houver erro ao ler os dados, limpa e vai para o login normal\r\n+                localStorage.removeItem('pendingCompanyLogin');\r\n+            }\r\n+        }\r\n+\r\n         // A tela de carregamento já está visível por padrão, não precisamos de a mostrar aqui.\r\n         const token = localStorage.getItem('authToken');\r\n \r\n         try {\r\n@@ -503,9 +524,9 @@\n \r\n         if (currentLoggedInUser && currentLoggedInUser.username) {\r\n             document.getElementById('loggedInUserDisplay').textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n         }\r\n-        \r\n+\r\n         if (loggedInViaAdmin) {\r\n             backToAdminBtn.classList.remove('hidden');\r\n         } else {\r\n             backToAdminBtn.classList.add('hidden');\r\n"
                },
                {
                    "date": 1752508778701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1735 @@\n+document.addEventListener('DOMContentLoaded', function() {\r\n+    // --- Elementos HTML (Declarações completas) ---\r\n+    const API_BASE_URL = 'http://localhost:5000';\r\n+    const generalLoader = document.getElementById('generalLoader');\r\n+    const loadingScreen = document.getElementById('loadingScreen');\r\n+    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+    const cnpjInput = document.getElementById('cnpjInput');\r\n+    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+    const adminLoginForm = document.getElementById('adminLoginForm');\r\n+    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+    const companyListDiv = document.getElementById('companyList');\r\n+    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+    const userLoginScreen = document.getElementById('userLoginScreen');\r\n+    const userLoginForm = document.getElementById('userLoginForm');\r\n+    const userInput = document.getElementById('userInput');\r\n+    const userPasswordInput = document.getElementById('userPasswordInput');\r\n+    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+    const welcomeUserText = document.getElementById('welcomeUserText');\r\n+    const mainAppContent = document.getElementById('mainAppContent');\r\n+    const toastMessage = document.getElementById('toastMessage');\r\n+    const logoutBtn = document.getElementById('logoutBtn');\r\n+    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+    const addBillModal = document.getElementById('addBillModal');\r\n+    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n+    const modalCompanyName = document.getElementById('modalCompanyName');\r\n+    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+    const addUserBtn = document.getElementById('addUserBtn');\r\n+    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+    const billModal = document.getElementById('billModal');\r\n+    const closeModalBtn = document.getElementById('closeModal');\r\n+    const saveBillBtn = document.getElementById('saveBill');\r\n+    const deleteBillBtn = document.getElementById('deleteBill');\r\n+    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n+    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n+    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n+    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n+    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+    const settingsBtn = document.getElementById('settingsBtn');\r\n+    const settingsDropdown = document.getElementById('settingsDropdown');\r\n+    const menuEmpresa = document.getElementById('menuEmpresa');\r\n+    const menuUsuarios = document.getElementById('menuUsuarios');\r\n+    const menuPermissoes = document.getElementById('menuPermissoes');\r\n+    const permissionsModal = document.getElementById('permissionsModal');\r\n+    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+    const permissionsContainer = document.getElementById('permissionsContainer');\r\n+    const billForm = document.getElementById('billForm');\r\n+    const installmentsPreview = document.getElementById('installmentsPreview');\r\n+    const installmentsList = document.getElementById('installmentsList');\r\n+    const addToOrganizer = document.getElementById('addToOrganizer');\r\n+    const totalBillsSpan = document.getElementById('totalBills');\r\n+    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+    const clearFormBtn = document.getElementById('clearFormBtn');\r\n+    const prevMonthBtn = document.getElementById('prevMonth');\r\n+    const nextMonthBtn = document.getElementById('nextMonth');\r\n+    const companyInfoModal = document.getElementById('companyInfoModal');\r\n+    const closeCompanyInfoModalBtn = document.getElementById('closeCompanyInfoModal');\r\n+    const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+    const addUserModal = document.getElementById('addUserModal');\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n+    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+    const addCompanyModal = document.getElementById('addCompanyModal');\r\n+    const addCompanyForm = document.getElementById('addCompanyForm');\r\n+    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n+    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+    const INACTIVITY_TIMEOUT = 30 * 60 * 1000;\r\n+    const subscriptionModal = document.getElementById('subscriptionModal');\r\n+    const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+\r\n+    // --- Variáveis de Dados e Estado ---\r\n+    let currentLoggedInCompany = null;\r\n+    let currentLoggedInUser = null;\r\n+    let isAdminLoggedIn = false;\r\n+    let loggedInViaAdmin = false;\r\n+    let selectedCompanyForAdmin = null;\r\n+    let currentBill = {};\r\n+    let selectedParcel = null;\r\n+    let userBoletos = [];\r\n+    let currentMonth, currentYear;\r\n+    let currentCompanyDetails = null;\r\n+    let inactivityTimer; // Variável para guardar o nosso cronómetro\r\n+\r\n+\r\n+        // --- LÓGICA DE INATIVIDADE E LOGOUT AUTOMÁTICO ---\r\n+    function logoutDueToInactivity() {\r\n+        // Primeiro, limpamos o cronómetro para não tentar fazer logout de novo\r\n+        clearInactivityTimer(); \r\n+        // Mostramos uma mensagem amigável\r\n+        showToast(\"Você foi desconectado por inatividade.\", \"info\");\r\n+        // Chamamos a função de login, que já limpa tudo\r\n+        showInitialLogin(); \r\n+    }\r\n+\r\n+    // Função que reinicia o cronómetro\r\n+    function resetInactivityTimer() {\r\n+        // Limpa o cronómetro antigo\r\n+        clearTimeout(inactivityTimer);\r\n+        // Cria um novo cronómetro que chamará a função de logout depois de 30 minutos\r\n+        inactivityTimer = setTimeout(logoutDueToInactivity, INACTIVITY_TIMEOUT);\r\n+    }\r\n+\r\n+    // Função para iniciar o monitoramento de inatividade\r\n+    function startInactivityTimer() {\r\n+        // Adiciona \"espiões\" para vários tipos de atividade do usuário.\r\n+        // Qualquer uma destas ações irá reiniciar o cronómetro.\r\n+        window.addEventListener('mousemove', resetInactivityTimer);\r\n+        window.addEventListener('mousedown', resetInactivityTimer);\r\n+        window.addEventListener('keypress', resetInactivityTimer);\r\n+        window.addEventListener('scroll', resetInactivityTimer, true);\r\n+        window.addEventListener('touchstart', resetInactivityTimer);\r\n+        \r\n+        // Inicia o cronómetro pela primeira vez\r\n+        resetInactivityTimer();\r\n+        console.log(\"Monitor de inatividade iniciado. Logout em 30 minutos.\");\r\n+    }\r\n+\r\n+    // Função para parar o monitoramento e limpar tudo\r\n+    function clearInactivityTimer() {\r\n+        clearTimeout(inactivityTimer);\r\n+        // Remove os \"espiões\" para não consumir memória desnecessariamente\r\n+        window.removeEventListener('mousemove', resetInactivityTimer);\r\n+        window.removeEventListener('mousedown', resetInactivityTimer);\r\n+        window.removeEventListener('keypress', resetInactivityTimer);\r\n+        window.removeEventListener('scroll', resetInactivityTimer, true);\r\n+        window.removeEventListener('touchstart', resetInactivityTimer);\r\n+        console.log(\"Monitor de inatividade parado.\");\r\n+    }\r\n+\r\n+\r\n+    // --- Lógica para o Modal de Adicionar Boletos ---\r\n+    openAddBillModalBtn.addEventListener('click', () => {\r\n+        clearBillForm();\r\n+        addBillModal.classList.remove('hidden');\r\n+    });\r\n+    closeAddBillModalBtn.addEventListener('click', () => {\r\n+        addBillModal.classList.add('hidden');\r\n+    });\r\n+    addBillModal.addEventListener('click', (e) => {\r\n+        if (e.target === addBillModal) {\r\n+            addBillModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n+    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n+        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n+        if (!originalBarcode) return;\r\n+        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n+        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n+            try {\r\n+                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n+                    {\r\n+                        format: \"ITF\",\r\n+                        width: 1.5,\r\n+                        height: 80,\r\n+                        displayValue: true,\r\n+                        fontSize: 20,\r\n+                        lineColor: \"#000\",\r\n+                        background: \"#FFF\"\r\n+                    });\r\n+                barcodeFullScreenModal.classList.remove('hidden');\r\n+            }\r\n+            catch (e) {\r\n+                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n+            }\r\n+        }\r\n+        else {\r\n+            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n+        }\r\n+    });\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n+        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // Listener para o item \"Gerenciar Usuários\"\r\n+    menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        // Usamos o ID da empresa logada para buscar os detalhes\r\n+        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+        if (companyId) {\r\n+            // Chama a função para abrir o modal com a lista de usuários\r\n+            fetchCompanyDetailsAndOpenModal(companyId); \r\n+        }\r\n+    });\r\n+\r\n+\r\n+\r\n+// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n+settingsBtn.addEventListener('click', (event) => {\r\n+    event.stopPropagation();\r\n+    settingsDropdown.classList.toggle('hidden');\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (!settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n+\r\n+// Função auxiliar para os links de Empresa e Usuários\r\n+const openManagementModal = (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+    if (companyId) {\r\n+        fetchCompanyDetailsAndOpenModal(companyId);\r\n+    }\r\n+};\r\n+\r\n+// Listener EXCLUSIVO para o link de Permissões\r\n+    menuPermissoes.addEventListener('click', async (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        showLoader();\r\n+        \r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const permissions = await response.json();\r\n+            if (!response.ok) throw new Error(permissions.message);\r\n+\r\n+            // Chamamos a função para preencher o modal com os dados\r\n+            populatePermissionsModal(permissions);\r\n+\r\n+            permissionsModal.classList.remove('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal de permissões\r\n+    closePermissionsModal.addEventListener('click', () => {\r\n+        permissionsModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // Nova função para popular os interruptores com os dados do backend\r\n+    function populatePermissionsModal(permissions) {\r\n+        // Lógica para Gerente\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        // MUDANÇA: Marca o rádio correto com base no valor (none, own, all)\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+        \r\n+        // Lógica para Funcionário\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+    }\r\n+\r\n+// Atualizamos o listener do menu para usar a nova função\r\n+menuPermissoes.addEventListener('click', async (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    \r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n+            headers: { 'Authorization': `Bearer ${token}` }\r\n+        });\r\n+        const permissions = await response.json();\r\n+        if (!response.ok) throw new Error(permissions.message);\r\n+\r\n+        // Chamamos a função para preencher o modal com os dados\r\n+        populatePermissionsModal(permissions);\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+    }\r\n+});\r\n+\r\n+\r\n+    // Adicionamos o listener para o novo botão Salvar\r\n+    document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n+        // Lemos o estado de cada interruptor e rádio\r\n+        const newPermissions = {\r\n+            Gerente: {\r\n+                canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+                // MUDANÇA: Pega o valor do rádio selecionado\r\n+                canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+                canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+            },\r\n+            Funcionário: {\r\n+                canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+                canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+                canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+            }\r\n+        };\r\n+        showLoader()\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n+                method: 'PATCH',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(newPermissions)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast(data.message, 'success');\r\n+            permissionsModal.classList.add('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar permissões: ' + error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal\r\n+    closePermissionsModal.addEventListener('click', () => {\r\n+        permissionsModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n+    function closeQuickAddModal() {\r\n+        quickUserAddModal.classList.add('hidden');\r\n+    }\r\n+    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n+    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n+    quickUserAddForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const username = document.getElementById('quickAddUsername').value;\r\n+        const password = document.getElementById('quickAddPassword').value;\r\n+        if (!currentLoggedInCompany) {\r\n+            showToast('Erro: Empresa não identificada.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            closeQuickAddModal();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    // --- Funções de Utilitário e de Tela ---\r\n+    function showToast(message, type = 'success') {\r\n+        toastMessage.textContent = message;\r\n+        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n+        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n+        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n+        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n+        toastMessage.classList.remove('hidden');\r\n+        setTimeout(() => {\r\n+            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n+            setTimeout(() => {\r\n+                toastMessage.classList.add('hidden');\r\n+                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n+            }, 300);\r\n+        }, 3000);\r\n+    }\r\n+\r\n+    // --- Funções para o Loader Genérico ---\r\n+    function showLoader() {\r\n+        generalLoader.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function hideLoader() {\r\n+        generalLoader.classList.add('hidden');\r\n+    }\r\n+\r\n+    function hideAllScreens() {\r\n+        initialLoginScreen.classList.add('hidden');\r\n+        cnpjLoginScreen.classList.add('hidden');\r\n+        adminLoginScreen.classList.add('hidden');\r\n+        userLoginScreen.classList.add('hidden');\r\n+        adminDashboardScreen.classList.add('hidden');\r\n+        mainAppContent.classList.add('hidden');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        addBillModal.classList.add('hidden');\r\n+        billModal.classList.add('hidden');\r\n+        barcodeFullScreenModal.classList.add('hidden');\r\n+        quickUserAddModal.classList.add('hidden');\r\n+        openAddBillModalBtn.classList.add('hidden');\r\n+    }\r\n+\r\n+    /**\r\n+     * Verifica o status da assinatura da empresa e bloqueia o acesso se necessário.\r\n+     * @param {object} company - O objeto da empresa retornado pela API.\r\n+     * @returns {boolean} - Retorna 'true' se o acesso for permitido, 'false' se for bloqueado.\r\n+     */\r\n+    function checkSubscription(company) {\r\n+        const status = company.subscription?.status; // Usamos 'optional chaining' por segurança\r\n+\r\n+        // Se a assinatura estiver ativa, permite o acesso.\r\n+        if (status === 'active') {\r\n+            return true;\r\n+        }\r\n+\r\n+        // Se a assinatura não estiver ativa, configura e mostra o modal.\r\n+        const title = document.getElementById('subscriptionTitle');\r\n+        const message = document.getElementById('subscriptionMessage');\r\n+        const icon = document.getElementById('subscriptionIcon');\r\n+        const actionBtn = document.getElementById('subscriptionActionBtn');\r\n+\r\n+        if (status === 'inactive' || status === 'trial') {\r\n+            title.textContent = 'Ative sua Assinatura';\r\n+            message.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+            actionBtn.textContent = 'Realizar Assinatura';\r\n+            icon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+        } else { // 'past_due' ou qualquer outro status\r\n+            title.textContent = 'Assinatura Pendente';\r\n+            message.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+            actionBtn.textContent = 'Renovar Assinatura';\r\n+            icon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+        }\r\n+\r\n+        subscriptionModal.classList.remove('hidden');\r\n+        return false; // Bloqueia o acesso ao resto da aplicação\r\n+    }\r\n+\r\n+    subscriptionLogoutBtn.addEventListener('click', () => {\r\n+    showInitialLogin();\r\n+    });\r\n+\r\n+    async function initializeApp() {\r\n+        // Verifica se há um login de empresa pendente vindo da página principal\r\n+        const pendingCompanyLogin = localStorage.getItem('pendingCompanyLogin');\r\n+        if (pendingCompanyLogin) {\r\n+            try {\r\n+                const company = JSON.parse(pendingCompanyLogin);\r\n+                currentLoggedInCompany = company; // Define o estado da empresa\r\n+                \r\n+                // Limpa o item para não ser usado novamente\r\n+                localStorage.removeItem('pendingCompanyLogin'); \r\n+                \r\n+                // Pula diretamente para a tela de login do usuário\r\n+                showUserLogin(company.nomeEmpresa); \r\n+                loadingScreen.classList.add('hidden'); // Esconde o loader inicial\r\n+                return; // Para a execução para não continuar com a verificação de token\r\n+            } catch(e) {\r\n+                // Se houver erro ao ler os dados, limpa e vai para o login normal\r\n+                localStorage.removeItem('pendingCompanyLogin');\r\n+            }\r\n+        }\r\n+\r\n+        // Se não houver login pendente, continua com a verificação normal de sessão\r\n+        const token = localStorage.getItem('authToken');\r\n+\r\n+        // Se não há token, vai para a tela de login\r\n+        if (!token) {\r\n+            showInitialLogin();\r\n+            loadingScreen.classList.add('hidden'); // Garante que o loader seja escondido\r\n+            return;\r\n+        }\r\n+\r\n+        // Se há um token, tentamos verificar com o backend\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+\r\n+            if (!response.ok) {\r\n+                // Se o token for inválido ou expirado, limpamos o lixo e vamos para o login.\r\n+                localStorage.removeItem('authToken');\r\n+                localStorage.removeItem('superAdminToken');\r\n+                showInitialLogin();\r\n+                return;\r\n+            }\r\n+\r\n+            const data = await response.json();\r\n+            \r\n+            // Com base na resposta, restauramos o estado da aplicação.\r\n+            if (data.user.role === 'SuperAdmin') {\r\n+                isAdminLoggedIn = true;\r\n+                showAdminDashboard();\r\n+            } else {\r\n+                // É um usuário normal, vamos verificar a assinatura\r\n+                currentLoggedInUser = data.user;\r\n+                currentLoggedInCompany = data.company;\r\n+                isAdminLoggedIn = false;\r\n+\r\n+                // Se for Proprietário, verifica a assinatura.\r\n+                // Se não for, ou se a assinatura estiver ativa, permite o acesso.\r\n+                if (currentLoggedInUser.role !== 'Proprietário' || checkSubscription(currentLoggedInCompany)) {\r\n+                    showMainApp();\r\n+                }\r\n+                // Se a verificação da assinatura retornar 'false', o modal de assinatura já foi exibido\r\n+                // e a função para aqui, bloqueando o acesso ao resto da aplicação.\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            // Em caso de erro de rede, etc., sempre vamos para a tela de login por segurança.\r\n+            showInitialLogin();\r\n+        } finally {\r\n+            // O bloco 'finally' é executado SEMPRE,\r\n+            // garantindo que a tela de carregamento da sessão seja escondida, não importa o resultado.\r\n+            loadingScreen.classList.add('hidden');\r\n+        }\r\n+    }\r\n+\r\n+    function showInitialLogin() {\r\n+        clearInactivityTimer();\r\n+        hideAllScreens();\r\n+        loadingScreen.classList.add('hidden');\r\n+        initialLoginScreen.classList.remove('hidden');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        currentLoggedInCompany = null;\r\n+        currentLoggedInUser = null;\r\n+        isAdminLoggedIn = false;\r\n+        loggedInViaAdmin = false;\r\n+    }\r\n+\r\n+    function showCnpjLogin() {\r\n+        hideAllScreens();\r\n+        cnpjLoginForm.reset();\r\n+        cnpjLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showAdminLogin() {\r\n+        hideAllScreens();\r\n+        adminLoginForm.reset();\r\n+        adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showUserLogin(companyName) {\r\n+        hideAllScreens();\r\n+        userLoginForm.reset();\r\n+        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+        userLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showMainApp() {\r\n+        hideAllScreens();\r\n+        mainAppContent.classList.remove('hidden');\r\n+\r\n+        if (currentLoggedInUser && currentLoggedInUser.username) {\r\n+            document.getElementById('loggedInUserDisplay').textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+        }\r\n+\r\n+        if (loggedInViaAdmin) {\r\n+            backToAdminBtn.classList.remove('hidden');\r\n+        } else {\r\n+            backToAdminBtn.classList.add('hidden');\r\n+        }\r\n+        \r\n+        if (!isAdminLoggedIn && currentLoggedInUser.role === 'Proprietário') {\r\n+            settingsMenuContainer.classList.remove('hidden');\r\n+        } else {\r\n+            settingsMenuContainer.classList.add('hidden');\r\n+        }\r\n+\r\n+        openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+        updateBillsOrganizer();\r\n+        startInactivityTimer();\r\n+    }\r\n+\r\n+    function showAdminDashboard() {\r\n+        hideAllScreens();\r\n+        adminDashboardScreen.classList.remove('hidden');\r\n+        renderCompanyList();\r\n+        tartInactivityTimer();\r\n+    }\r\n+\r\n+    function formatCnpj(value) {\r\n+        value = value.replace(/\\D/g, '');\r\n+        if (value.length > 14) value = value.slice(0, 14);\r\n+        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n+        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n+        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n+        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n+        return value;\r\n+    }\r\n+    // --- Lógica de Navegação do Calendário ---\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth--;\r\n+        if (currentMonth < 0) {\r\n+            currentMonth = 11;\r\n+            currentYear--;\r\n+        }\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth++;\r\n+        if (currentMonth > 11) {\r\n+            currentMonth = 0;\r\n+            currentYear++;\r\n+        }\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+    // --- Lógica de Autenticação e Outras Funções ---\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const cnpj = cnpjInput.value;\r\n+        const password = cnpjPasswordInput.value;\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/login/company`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            cnpj,\r\n+                            password\r\n+                        }),\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInCompany = data.company;\r\n+            loggedInViaAdmin = false;\r\n+            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    adminLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const username = adminUsernameInput.value;\r\n+        const password = adminPasswordInput.value;\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/login/admin`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            localStorage.setItem('authToken', data.token);\r\n+            isAdminLoggedIn = true;\r\n+            showToast('Login de Administrador bem-sucedido!', 'success');\r\n+            showAdminDashboard();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+    userLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const username = userInput.value;\r\n+        const password = userPasswordInput.value;\r\n+        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n+            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/login/user`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInUser = data.user;\r\n+            showMainApp();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    });\r\n+    backToAdminBtn.addEventListener('click', () => {\r\n+        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n+\r\n+        // 1. Recuperamos o token original do admin que guardámos\r\n+        const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+        if (!adminToken) {\r\n+            showToast(\"Erro: Token de administrador não encontrado. Faça o login novamente.\", \"error\");\r\n+            showInitialLogin();\r\n+            return;\r\n+        }\r\n+\r\n+        // 2. Restauramos o token do admin como o token ativo\r\n+        localStorage.setItem('authToken', adminToken);\r\n+        localStorage.removeItem('superAdminToken'); // Limpamos o token temporário\r\n+\r\n+        // 3. Resetamos o estado da aplicação e mostramos o painel\r\n+        currentLoggedInUser = null;\r\n+        currentLoggedInCompany = null;\r\n+        loggedInViaAdmin = false;\r\n+        isAdminLoggedIn = true;\r\n+        showAdminDashboard();\r\n+    });\r\n+\r\n+    async function renderCompanyList() {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) return;\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies`, {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n+\r\n+            const companies = await response.json();\r\n+            companyListDiv.innerHTML = '';\r\n+\r\n+            if (companies.length === 0) {\r\n+                noCompaniesMessage.classList.remove('hidden');\r\n+            } else {\r\n+                noCompaniesMessage.classList.add('hidden');\r\n+                companies.forEach(company => {\r\n+                    const companyCard = document.createElement('div');\r\n+                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                    \r\n+                    // MUDANÇA: A API agora não retorna a contagem de usuários diretamente na lista.\r\n+                    // Podemos mostrar esta informação de outra forma ou remover por enquanto para simplificar.\r\n+                    companyCard.innerHTML = `\r\n+                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                        </div>\r\n+                    `;\r\n+                    companyListDiv.appendChild(companyCard);\r\n+                });\r\n+\r\n+                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n+                    button.addEventListener('click', async (e) => {\r\n+                        const companyId = e.target.dataset.companyId;\r\n+                        const token = localStorage.getItem('authToken');\r\n+                        try {\r\n+                            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                                headers: {\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                }\r\n+                            });\r\n+                            \r\n+                            // MUDANÇA: A resposta agora é desestruturada em 'company' e 'users'.\r\n+                            const { company, users } = await response.json();\r\n+                            \r\n+                            if (!response.ok) throw new Error(company.message); // Usa a mensagem de erro do objeto company\r\n+                            \r\n+                            // MUDANÇA: Passamos os dois objetos para a função do modal.\r\n+                            openCompanyDetailsModal(company, users);\r\n+\r\n+                        } catch (error) {\r\n+                            showToast(error.message, 'error');\r\n+                        }\r\n+                    });\r\n+                });\r\n+\r\n+                // O listener do 'enter-company-btn' precisa ser atualizado também para funcionar com a nova lógica\r\n+                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+                    button.addEventListener('click', async (e) => {\r\n+                        const companyId = e.target.dataset.companyId;\r\n+                        const token = localStorage.getItem('authToken');\r\n+                        try {\r\n+                            // Precisamos buscar os usuários da empresa para poder entrar como o primeiro\r\n+                            const companyDetailsResponse = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                                headers: { 'Authorization': `Bearer ${token}` }\r\n+                            });\r\n+                            const { company, users } = await companyDetailsResponse.json();\r\n+\r\n+                            if (!companyDetailsResponse.ok) throw new Error(company.message);\r\n+                            \r\n+                            if (users.length === 0) {\r\n+                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n+                                return;\r\n+                            }\r\n+\r\n+                            // Entramos como o primeiro usuário da lista\r\n+                            const userId = users[0]._id; \r\n+                            \r\n+                            const impersonateResponse = await fetch(`${API_BASE_URL}/api/admin/impersonate`, {\r\n+                                method: 'POST',\r\n+                                headers: {\r\n+                                    'Content-Type': 'application/json',\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                },\r\n+                                body: JSON.stringify({ companyId, userId })\r\n+                            });\r\n+                            const data = await impersonateResponse.json();\r\n+                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n+                            \r\n+                            showToast(`Entrando na empresa ${company.nomeEmpresa}...`, 'success');\r\n+                            localStorage.setItem('superAdminToken', token);\r\n+                            localStorage.setItem('authToken', data.token);\r\n+                            currentLoggedInCompany = company;\r\n+                            currentLoggedInUser = data.user;\r\n+                            loggedInViaAdmin = true;\r\n+                            showMainApp();\r\n+                        } catch (error) {\r\n+                            showToast(error.message, 'error');\r\n+                        }\r\n+                    });\r\n+                });\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    }\r\n+\r\n+    createCompanyBtn.addEventListener('click', () => {\r\n+        openAddCompanyModal();\r\n+    });\r\n+\r\n+    // --- Lógica Principal do App de Boletos ---\r\n+    function initializeCalendarDate() {\r\n+        const today = new Date();\r\n+        currentMonth = today.getMonth();\r\n+        currentYear = today.getFullYear();\r\n+        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n+    }\r\n+\r\n+    async function updateBillsOrganizer() {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n+            showInitialLogin(); // Redireciona para o login se não houver token\r\n+            return;\r\n+        }\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos`, {\r\n+                method: 'GET',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) {\r\n+                const errorData = await response.json();\r\n+                throw new Error(errorData.message || \"Erro ao buscar boletos.\");\r\n+            }\r\n+            \r\n+            // A resposta da nova API já vem no formato de uma lista de boletos,\r\n+            // com os dados do usuário \"populados\".\r\n+            userBoletos = await response.json();\r\n+            \r\n+            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+            totalBillsSpan.textContent = totalParcels;\r\n+\r\n+            // As funções de renderização e resumo são chamadas como antes.\r\n+            updateMonthlySummary();\r\n+            \r\n+            // A lógica para alternar entre calendário e lista diária continua a mesma.\r\n+            if (window.innerWidth >= 1024) {\r\n+                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n+                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n+                renderCalendar();\r\n+            } else {\r\n+                document.getElementById('billsOrganizer').classList.add('hidden');\r\n+                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n+                renderDailyBills();\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Se a busca falhar (ex: token expirado), deslogamos o usuário\r\n+            showInitialLogin();\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    }\r\n+\r\n+    function updateMonthlySummary() {\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+            });\r\n+        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalNaoPago = totalMes - totalPago;\r\n+        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return dueDate < today && !parcel.paid;\r\n+            });\r\n+        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n+            {\r\n+                style: 'currency',\r\n+                currency: 'BRL'\r\n+            });\r\n+        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n+        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n+    }\r\n+\r\n+    function renderCalendar() {\r\n+        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+        const calendarDays = document.getElementById('calendarDays');\r\n+        calendarDays.innerHTML = '';\r\n+        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+        for (let i = 0; i < firstDayOfMonth; i++) {\r\n+            const emptyCell = document.createElement('div');\r\n+            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n+            calendarDays.appendChild(emptyCell);\r\n+        }\r\n+        for (let day = 1; day <= daysInMonth; day++) {\r\n+            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+            const dayCell = document.createElement('div');\r\n+            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n+            dayCell.dataset.date = dateStr;\r\n+            const dayHeader = document.createElement('div');\r\n+            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+            dayHeader.textContent = day;\r\n+            dayCell.appendChild(dayHeader);\r\n+            dayCell.addEventListener('click', (e) => {\r\n+                if (e.target.closest('.bill-card')) return;\r\n+                const clickedDate = e.currentTarget.dataset.date;\r\n+                clearBillForm();\r\n+                document.getElementById('dueDate').value = clickedDate;\r\n+                addBillModal.classList.remove('hidden');\r\n+            });\r\n+            userBoletos.forEach(bill => {\r\n+                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                    const parcelElement = document.createElement('div');\r\n+                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n+                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                    dayCell.appendChild(parcelElement);\r\n+                });\r\n+            });\r\n+            calendarDays.appendChild(dayCell);\r\n+        }\r\n+    }\r\n+\r\n+    function renderDailyBills() {\r\n+        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n+    }\r\n+\r\n+    function clearBillForm() {\r\n+        billForm.reset();\r\n+        installmentsPreview.classList.add('hidden');\r\n+        installmentsList.innerHTML = '';\r\n+        currentBill = {};\r\n+    }\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    billForm.addEventListener('submit', function (e) {\r\n+        e.preventDefault();\r\n+        const billName = document.getElementById('billName').value;\r\n+        const dueDate = document.getElementById('dueDate').value;\r\n+        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n+        const installments = parseInt(document.getElementById('installments').value);\r\n+        const description = document.getElementById('description').value;\r\n+        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+        const barcode = document.getElementById('barcode').value;\r\n+        if (!billName || !dueDate || !totalAmount || !installments) {\r\n+            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+            return;\r\n+        }\r\n+        currentBill = {\r\n+            name: billName,\r\n+            parcels: []\r\n+        };\r\n+        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+        installmentsList.innerHTML = '';\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        currentBill.parcels.push({\r\n+            id: `${Date.now()}-${i}`,\r\n+            number: i + 1,\r\n+            amount: parcelAmount,\r\n+            dueDate: dateForInput,\r\n+            paid: false,\r\n+            description: description,\r\n+            barcode: barcode\r\n+        });\r\n+\r\n+        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n+            day: '2-digit',\r\n+            month: '2-digit',\r\n+            year: 'numeric'\r\n+        });\r\n+        \r\n+        const parcelItem = document.createElement('div');\r\n+        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n+        \r\n+        parcelItem.innerHTML = `\r\n+            <div class=\"flex items-center space-x-4\">\r\n+                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n+                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n+            </div>\r\n+            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n+        `;\r\n+        \r\n+        installmentsList.appendChild(parcelItem);\r\n+    }\r\n+        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+            input.addEventListener('input', (e) => {\r\n+                const index = parseInt(e.target.dataset.parcelIndex);\r\n+                const newAmount = parseFloat(e.target.value) || 0;\r\n+                if (!isNaN(newAmount)) {\r\n+                    currentBill.parcels[index].amount = newAmount;\r\n+                    updatePreviewTotal();\r\n+                }\r\n+            });\r\n+            input.addEventListener('blur', (e) => {\r\n+                const newAmount = parseFloat(e.target.value) || 0;\r\n+                e.target.value = newAmount.toFixed(2);\r\n+            });\r\n+        });\r\n+        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+            input.addEventListener('change', (e) => {\r\n+                const index = parseInt(e.target.dataset.parcelIndex);\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            });\r\n+        });\r\n+        installmentsPreview.classList.remove('hidden');\r\n+        updatePreviewTotal();\r\n+    });\r\n+\r\n+    function updatePreviewTotal() {\r\n+        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n+        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+    }\r\n+    addToOrganizer.addEventListener('click', async function () {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        if (!currentBill || !currentBill.name) {\r\n+            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n+            return;\r\n+        }\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(currentBill)\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n+            showToast(data.message, 'success');\r\n+            addBillModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    // --- Lógica do Modal de Edição de Boletos ---\r\n+    function openBillModal(bill, parcel) {\r\n+        // MUDANÇA: Usamos bill._id para o parentId e o parcel já terá o seu próprio _id.\r\n+        selectedParcel = { ...parcel, parentId: bill._id };\r\n+        \r\n+        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n+        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n+        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n+        modalBillBarcodeInput.value = parcel.barcode || '';\r\n+        modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n+            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n+        } else {\r\n+            showFullScreenBarcodeBtn.classList.add('hidden');\r\n+        }\r\n+        billModal.classList.remove('hidden');\r\n+    }\r\n+\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    billModal.addEventListener('click', (e) => {\r\n+        if (e.target === billModal) billModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    saveBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n+        const updatedData = {\r\n+            paid: document.getElementById('modalBillPaid').checked,\r\n+            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n+            dueDate: document.getElementById('modalBillDate').value,\r\n+            description: document.getElementById('modalBillDescription').value,\r\n+            barcode: document.getElementById('modalBillBarcode').value\r\n+        };\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            const response = await fetch(url, { // Usamos a nova URL\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify(updatedData)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Parcela atualizada com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    deleteBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel) return;\r\n+        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        \r\n+        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n+        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n+\r\n+        try {\r\n+            const response = await fetch(url, { // Usamos a nova URL\r\n+                method: 'DELETE',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Parcela excluída com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    deleteEntireBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel || !selectedParcel.parentId) {\r\n+            showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n+            return;\r\n+        }\r\n+        \r\n+        if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n+            return;\r\n+        }\r\n+        \r\n+        const token = localStorage.getItem('authToken');\r\n+        // MUDANÇA: O ID do boleto vem de selectedParcel.parentId, que agora já é o _id correto.\r\n+        const boletoId = selectedParcel.parentId; \r\n+        \r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos/${boletoId}`, {\r\n+                method: 'DELETE',\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            \r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast('Boleto completo excluído com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+            \r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n+        const token = localStorage.getItem('authToken');\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+            \r\n+            // A resposta da API é um objeto { company, users }\r\n+            const data = await response.json(); \r\n+\r\n+            if (!response.ok) {\r\n+                // A mensagem de erro pode estar em 'data.message'\r\n+                throw new Error(data.message || 'Não foi possível buscar os detalhes da empresa.');\r\n+            }\r\n+\r\n+            // MUDANÇA CRÍTICA: Em vez de passar o objeto 'data' inteiro,\r\n+            // passamos as suas propriedades 'company' e 'users' corretamente.\r\n+            openCompanyDetailsModal(data.company, data.users);\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    }\r\n+\r\n+    // --- Lógica do Modal de Detalhes da Empresa ---\r\n+    function openCompanyDetailsModal(company, users) {\r\n+        selectedCompanyForAdmin = company;\r\n+        document.getElementById('modalCompanyNameInput').value = company.nomeEmpresa;\r\n+\r\n+        modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n+        modalCompanyPasswordInput.value = '';\r\n+        modalCompanyUsers.innerHTML = '';\r\n+        \r\n+        if (users.length === 0) {\r\n+            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+        } else {\r\n+            // A lógica para listar usuários permanece a mesma\r\n+            const assignableRoles = isAdminLoggedIn ?\r\n+                ['Proprietário', 'Gerente', 'Funcionário'] :\r\n+                ['Gerente', 'Funcionário'];\r\n+\r\n+            users.forEach(user => {\r\n+                const userItem = document.createElement('div');\r\n+                userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n+\r\n+                const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n+                let roleDisplay = '';\r\n+\r\n+                if (isEditable) {\r\n+                    const optionsHTML = assignableRoles.map(role => {\r\n+                        if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n+                        return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n+                    }).join('');\r\n+                    roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n+                } else {\r\n+                    roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n+                }\r\n+\r\n+                userItem.innerHTML = `\r\n+                    <div class=\"flex items-center space-x-3\">\r\n+                        <span class=\"text-white\">${user.username}</span>\r\n+                        ${roleDisplay}\r\n+                    </div>\r\n+                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                `;\r\n+                modalCompanyUsers.appendChild(userItem);\r\n+            });\r\n+        }\r\n+\r\n+        // Recriamos os listeners para garantir que funcionem\r\n+        document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+            button.addEventListener('click', (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const companyId = selectedCompanyForAdmin._id;\r\n+                handleRemoveUser(companyId, userId);\r\n+            });\r\n+        });\r\n+\r\n+        document.querySelectorAll('.role-select').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const token = localStorage.getItem('authToken');\r\n+                const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+                try {\r\n+                    const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}/role`, {\r\n+                        method: 'PATCH',\r\n+                        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                        body: JSON.stringify({ role: newRole })\r\n+                    });\r\n+\r\n+                    const data = await response.json();\r\n+                    if (!response.ok) throw new Error(data.message);\r\n+                    showToast(data.message, 'success');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                    fetchCompanyDetailsAndOpenModal(companyId);\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        companyDetailsModal.classList.remove('hidden');\r\n+    }\r\n+\r\n+    async function handleRemoveUser(companyId, userId) {\r\n+        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    addUserBtn.addEventListener('click', () => {\r\n+        openAddUserModal();\r\n+    });\r\n+\r\n+    deleteCompanyBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n+            return;\r\n+        }\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+\r\n+        const token = localStorage.getItem('authToken');\r\n+        const updatedData = {}; // Objeto vazio para guardar apenas o que mudou\r\n+\r\n+        // Pegamos os valores dos campos\r\n+        const newName = document.getElementById('modalCompanyNameInput').value;\r\n+        const newPassword = modalCompanyPasswordInput.value;\r\n+\r\n+        // MUDANÇA: Verificamos se o nome foi alterado e adicionamo-lo ao payload\r\n+        if (newName && newName.trim() !== '' && newName.trim() !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+            updatedData.nomeEmpresa = newName.trim();\r\n+        }\r\n+\r\n+        // A lógica da senha continua, mas agora também é adicionada ao mesmo payload\r\n+        if (newPassword && newPassword.length > 0) {\r\n+            updatedData.newPassword = newPassword;\r\n+        }\r\n+\r\n+        // Se nada foi alterado, informamos o usuário e paramos\r\n+        if (Object.keys(updatedData).length === 0) {\r\n+            showToast(\"Nenhuma alteração para salvar.\", \"info\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`, {\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify(updatedData) // Enviamos o objeto com as alterações\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList(); // Atualizamos a lista de empresas para refletir o novo nome\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    companyDetailsModal.addEventListener('click', (e) => {\r\n+        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n+    });\r\n+    // --- Inicialização ---\r\n+    initializeCalendarDate();\r\n+    initializeApp();\r\n+\r\n+    // Função para abrir e preencher o modal\r\n+    async function openCompanyInfoModal() {\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${currentLoggedInCompany._id}`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            currentCompanyDetails = data.company;\r\n+            document.getElementById('companyInfoCnpj').textContent = formatCnpj(currentCompanyDetails.cnpj);\r\n+            document.getElementById('companyInfoName').value = currentCompanyDetails.nomeEmpresa;\r\n+            document.getElementById('companyInfoEmail').value = currentCompanyDetails.email || '';\r\n+            document.getElementById('companyInfoTelefone').value = currentCompanyDetails.telefoneFixo || '';\r\n+            document.getElementById('companyInfoWhatsapp').value = currentCompanyDetails.telefoneWhatsapp || '';\r\n+\r\n+            // MUDANÇA: Aplicamos as máscaras AQUI, depois de o modal estar preenchido e prestes a ser exibido.\r\n+            const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n+            if (telefoneFixoInput) {\r\n+                IMask(telefoneFixoInput, { mask: '(00) 0000-0000' });\r\n+            }\r\n+            const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n+            if (whatsappInput) {\r\n+                IMask(whatsappInput, { mask: '(00) 00000-0000' });\r\n+            }\r\n+\r\n+            companyInfoModal.classList.remove('hidden');\r\n+\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    // Listener para o link do menu \"Detalhes da Empresa\"\r\n+    menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        // Chama a função para abrir o modal com as informações da empresa\r\n+        openCompanyInfoModal(); \r\n+    });\r\n+\r\n+    // Listener para o botão de salvar\r\n+    saveCompanyInfoBtn.addEventListener('click', async () => {\r\n+        const payload = {\r\n+            nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+            \r\n+            // MUDANÇA: Adicionamos o e-mail ao payload que será enviado para a API\r\n+            email: document.getElementById('companyInfoEmail').value,\r\n+\r\n+            telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+            telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+        };\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${currentCompanyDetails._id}`, {\r\n+                method: 'PATCH',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast(data.message, 'success');\r\n+            companyInfoModal.classList.add('hidden');\r\n+\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal\r\n+    closeCompanyInfoModalBtn.addEventListener('click', () => {\r\n+        companyInfoModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // --- LÓGICA PARA MÁSCARAS DE INPUT (IMask.js) ---\r\n+\r\n+    document.addEventListener('DOMContentLoaded', () => {\r\n+        // Máscara para o campo de CNPJ no modal de login da empresa (ESTA FICA)\r\n+        const cnpjInput = document.getElementById('cnpjInput');\r\n+        if (cnpjInput) {\r\n+            const cnpjMask = IMask(cnpjInput, {\r\n+                mask: '00.000.000/0000-00'\r\n+            });\r\n+        }\r\n+        \r\n+        // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n+        const totalAmountInput = document.getElementById('totalAmount');\r\n+        if (totalAmountInput) {\r\n+            const amountMask = IMask(totalAmountInput, {\r\n+                mask: 'R$ num',\r\n+                blocks: {\r\n+                    num: {\r\n+                        mask: Number,\r\n+                        scale: 2,\r\n+                        radix: ',',\r\n+                        thousandsSeparator: '.',\r\n+                        padFractionalZeros: true\r\n+                    }\r\n+                }\r\n+            });\r\n+        }\r\n+\r\n+        // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n+        const modalAmountInput = document.getElementById('modalBillAmount');\r\n+        if (modalAmountInput) {\r\n+            const modalAmountMask = IMask(modalAmountInput, {\r\n+                mask: 'R$ num',\r\n+                blocks: {\r\n+                    num: {\r\n+                        mask: Number,\r\n+                        scale: 2,\r\n+                        radix: ',',\r\n+                        thousandsSeparator: '.',\r\n+                        padFractionalZeros: true\r\n+                    }\r\n+                }\r\n+            });\r\n+        }\r\n+    });\r\n+\r\n+    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR USUÁRIO ---\r\n+\r\n+    // Função para abrir o modal\r\n+    function openAddUserModal() {\r\n+        addUserForm.reset(); // Limpa o formulário\r\n+        addUserModal.classList.remove('hidden');\r\n+        document.getElementById('addUsernameInput').focus();\r\n+    }\r\n+\r\n+    // Função para fechar o modal\r\n+    function closeAddUserModal() {\r\n+        addUserModal.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Listeners para fechar/cancelar\r\n+    closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+\r\n+    // Listener para o envio do formulário\r\n+    addUserForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault(); // Impede o recarregamento da página\r\n+\r\n+        const username = document.getElementById('addUsernameInput').value;\r\n+        const password = document.getElementById('addUserPasswordInput').value;\r\n+        const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+\r\n+        // Validação de senha\r\n+        if (password !== confirmPassword) {\r\n+            showToast(\"As senhas não coincidem.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        // Identifica a empresa atual (seja via admin ou login normal)\r\n+        const companyId = selectedCompanyForAdmin ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n+        if (!companyId) {\r\n+            showToast(\"Erro: Não foi possível identificar a empresa.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`, {\r\n+                method: 'POST',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify({ username, password, companyId })\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+\r\n+            showToast(data.message, 'success');\r\n+            closeAddUserModal();\r\n+\r\n+            // Atualiza a lista de usuários na tela que estiver aberta\r\n+            if (adminDashboardScreen.classList.contains('hidden')) {\r\n+                // Se estiver no modal de \"Gerenciar Usuários\" do proprietário\r\n+                fetchCompanyDetailsAndOpenModal(companyId, true); // O 'true' indica que é uma atualização\r\n+            } else {\r\n+                // Se estiver no painel do admin\r\n+                renderCompanyList();\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR EMPRESA ---\r\n+\r\n+    // Aplica a máscara de CNPJ ao novo campo\r\n+    const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+    if (addCompanyCnpjInput) {\r\n+        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    // Função para abrir o modal\r\n+    function openAddCompanyModal() {\r\n+        addCompanyForm.reset(); // Limpa o formulário\r\n+        addCompanyModal.classList.remove('hidden');\r\n+        document.getElementById('addCompanyNameInput').focus();\r\n+    }\r\n+\r\n+    // Função para fechar o modal\r\n+    function closeAddCompanyModal() {\r\n+        addCompanyModal.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Listeners para fechar/cancelar\r\n+    closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+\r\n+    // Listener para o envio do formulário\r\n+    addCompanyForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const payload = {\r\n+            nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+            cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+            senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+            ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+            ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+        };\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n+            return;\r\n+        }\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/register`, {\r\n+                method: 'POST',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+\r\n+            showToast(data.message, 'success');\r\n+            closeAddCompanyModal();\r\n+            renderCompanyList(); // Atualiza a lista de empresas no painel de admin\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752508807304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1731,1690 +1731,5 @@\n         }\r\n     });\r\n \r\n \r\n-});\n-document.addEventListener('DOMContentLoaded', function() {\r\n-    // --- Elementos HTML (Declarações completas) ---\r\n-    const API_BASE_URL = 'http://localhost:5000';\r\n-    const generalLoader = document.getElementById('generalLoader');\r\n-    const loadingScreen = document.getElementById('loadingScreen');\r\n-    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-    const cnpjInput = document.getElementById('cnpjInput');\r\n-    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-    const adminLoginForm = document.getElementById('adminLoginForm');\r\n-    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-    const companyListDiv = document.getElementById('companyList');\r\n-    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-    const userLoginScreen = document.getElementById('userLoginScreen');\r\n-    const userLoginForm = document.getElementById('userLoginForm');\r\n-    const userInput = document.getElementById('userInput');\r\n-    const userPasswordInput = document.getElementById('userPasswordInput');\r\n-    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-    const welcomeUserText = document.getElementById('welcomeUserText');\r\n-    const mainAppContent = document.getElementById('mainAppContent');\r\n-    const toastMessage = document.getElementById('toastMessage');\r\n-    const logoutBtn = document.getElementById('logoutBtn');\r\n-    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-    const addBillModal = document.getElementById('addBillModal');\r\n-    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n-    const modalCompanyName = document.getElementById('modalCompanyName');\r\n-    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-    const addUserBtn = document.getElementById('addUserBtn');\r\n-    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-    const billModal = document.getElementById('billModal');\r\n-    const closeModalBtn = document.getElementById('closeModal');\r\n-    const saveBillBtn = document.getElementById('saveBill');\r\n-    const deleteBillBtn = document.getElementById('deleteBill');\r\n-    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n-    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n-    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n-    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n-    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-    const settingsBtn = document.getElementById('settingsBtn');\r\n-    const settingsDropdown = document.getElementById('settingsDropdown');\r\n-    const menuEmpresa = document.getElementById('menuEmpresa');\r\n-    const menuUsuarios = document.getElementById('menuUsuarios');\r\n-    const menuPermissoes = document.getElementById('menuPermissoes');\r\n-    const permissionsModal = document.getElementById('permissionsModal');\r\n-    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-    const permissionsContainer = document.getElementById('permissionsContainer');\r\n-    const billForm = document.getElementById('billForm');\r\n-    const installmentsPreview = document.getElementById('installmentsPreview');\r\n-    const installmentsList = document.getElementById('installmentsList');\r\n-    const addToOrganizer = document.getElementById('addToOrganizer');\r\n-    const totalBillsSpan = document.getElementById('totalBills');\r\n-    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-    const clearFormBtn = document.getElementById('clearFormBtn');\r\n-    const prevMonthBtn = document.getElementById('prevMonth');\r\n-    const nextMonthBtn = document.getElementById('nextMonth');\r\n-    const companyInfoModal = document.getElementById('companyInfoModal');\r\n-    const closeCompanyInfoModalBtn = document.getElementById('closeCompanyInfoModal');\r\n-    const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-    const addUserModal = document.getElementById('addUserModal');\r\n-    const addUserForm = document.getElementById('addUserForm');\r\n-    const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n-    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-    const addCompanyModal = document.getElementById('addCompanyModal');\r\n-    const addCompanyForm = document.getElementById('addCompanyForm');\r\n-    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n-    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-    const INACTIVITY_TIMEOUT = 30 * 60 * 1000;\r\n-\r\n-    // --- Variáveis de Dados e Estado ---\r\n-    let currentLoggedInCompany = null;\r\n-    let currentLoggedInUser = null;\r\n-    let isAdminLoggedIn = false;\r\n-    let loggedInViaAdmin = false;\r\n-    let selectedCompanyForAdmin = null;\r\n-    let currentBill = {};\r\n-    let selectedParcel = null;\r\n-    let userBoletos = [];\r\n-    let currentMonth, currentYear;\r\n-    let currentCompanyDetails = null;\r\n-    let inactivityTimer; // Variável para guardar o nosso cronómetro\r\n-\r\n-\r\n-        // --- LÓGICA DE INATIVIDADE E LOGOUT AUTOMÁTICO ---\r\n-    function logoutDueToInactivity() {\r\n-        // Primeiro, limpamos o cronómetro para não tentar fazer logout de novo\r\n-        clearInactivityTimer(); \r\n-        // Mostramos uma mensagem amigável\r\n-        showToast(\"Você foi desconectado por inatividade.\", \"info\");\r\n-        // Chamamos a função de login, que já limpa tudo\r\n-        showInitialLogin(); \r\n-    }\r\n-\r\n-    // Função que reinicia o cronómetro\r\n-    function resetInactivityTimer() {\r\n-        // Limpa o cronómetro antigo\r\n-        clearTimeout(inactivityTimer);\r\n-        // Cria um novo cronómetro que chamará a função de logout depois de 30 minutos\r\n-        inactivityTimer = setTimeout(logoutDueToInactivity, INACTIVITY_TIMEOUT);\r\n-    }\r\n-\r\n-    // Função para iniciar o monitoramento de inatividade\r\n-    function startInactivityTimer() {\r\n-        // Adiciona \"espiões\" para vários tipos de atividade do usuário.\r\n-        // Qualquer uma destas ações irá reiniciar o cronómetro.\r\n-        window.addEventListener('mousemove', resetInactivityTimer);\r\n-        window.addEventListener('mousedown', resetInactivityTimer);\r\n-        window.addEventListener('keypress', resetInactivityTimer);\r\n-        window.addEventListener('scroll', resetInactivityTimer, true);\r\n-        window.addEventListener('touchstart', resetInactivityTimer);\r\n-        \r\n-        // Inicia o cronómetro pela primeira vez\r\n-        resetInactivityTimer();\r\n-        console.log(\"Monitor de inatividade iniciado. Logout em 30 minutos.\");\r\n-    }\r\n-\r\n-    // Função para parar o monitoramento e limpar tudo\r\n-    function clearInactivityTimer() {\r\n-        clearTimeout(inactivityTimer);\r\n-        // Remove os \"espiões\" para não consumir memória desnecessariamente\r\n-        window.removeEventListener('mousemove', resetInactivityTimer);\r\n-        window.removeEventListener('mousedown', resetInactivityTimer);\r\n-        window.removeEventListener('keypress', resetInactivityTimer);\r\n-        window.removeEventListener('scroll', resetInactivityTimer, true);\r\n-        window.removeEventListener('touchstart', resetInactivityTimer);\r\n-        console.log(\"Monitor de inatividade parado.\");\r\n-    }\r\n-\r\n-\r\n-    // --- Lógica para o Modal de Adicionar Boletos ---\r\n-    openAddBillModalBtn.addEventListener('click', () => {\r\n-        clearBillForm();\r\n-        addBillModal.classList.remove('hidden');\r\n-    });\r\n-    closeAddBillModalBtn.addEventListener('click', () => {\r\n-        addBillModal.classList.add('hidden');\r\n-    });\r\n-    addBillModal.addEventListener('click', (e) => {\r\n-        if (e.target === addBillModal) {\r\n-            addBillModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n-    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n-        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n-        if (!originalBarcode) return;\r\n-        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n-        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n-            try {\r\n-                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n-                    {\r\n-                        format: \"ITF\",\r\n-                        width: 1.5,\r\n-                        height: 80,\r\n-                        displayValue: true,\r\n-                        fontSize: 20,\r\n-                        lineColor: \"#000\",\r\n-                        background: \"#FFF\"\r\n-                    });\r\n-                barcodeFullScreenModal.classList.remove('hidden');\r\n-            }\r\n-            catch (e) {\r\n-                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n-            }\r\n-        }\r\n-        else {\r\n-            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n-        }\r\n-    });\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n-        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // Listener para o item \"Gerenciar Usuários\"\r\n-    menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        // Usamos o ID da empresa logada para buscar os detalhes\r\n-        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-        if (companyId) {\r\n-            // Chama a função para abrir o modal com a lista de usuários\r\n-            fetchCompanyDetailsAndOpenModal(companyId); \r\n-        }\r\n-    });\r\n-\r\n-\r\n-\r\n-// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n-settingsBtn.addEventListener('click', (event) => {\r\n-    event.stopPropagation();\r\n-    settingsDropdown.classList.toggle('hidden');\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (!settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n-\r\n-// Função auxiliar para os links de Empresa e Usuários\r\n-const openManagementModal = (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-    if (companyId) {\r\n-        fetchCompanyDetailsAndOpenModal(companyId);\r\n-    }\r\n-};\r\n-\r\n-// Listener EXCLUSIVO para o link de Permissões\r\n-    menuPermissoes.addEventListener('click', async (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        showLoader();\r\n-        \r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const permissions = await response.json();\r\n-            if (!response.ok) throw new Error(permissions.message);\r\n-\r\n-            // Chamamos a função para preencher o modal com os dados\r\n-            populatePermissionsModal(permissions);\r\n-\r\n-            permissionsModal.classList.remove('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal de permissões\r\n-    closePermissionsModal.addEventListener('click', () => {\r\n-        permissionsModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // Nova função para popular os interruptores com os dados do backend\r\n-    function populatePermissionsModal(permissions) {\r\n-        // Lógica para Gerente\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        // MUDANÇA: Marca o rádio correto com base no valor (none, own, all)\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-        \r\n-        // Lógica para Funcionário\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-    }\r\n-\r\n-// Atualizamos o listener do menu para usar a nova função\r\n-menuPermissoes.addEventListener('click', async (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    \r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n-            headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n-        const permissions = await response.json();\r\n-        if (!response.ok) throw new Error(permissions.message);\r\n-\r\n-        // Chamamos a função para preencher o modal com os dados\r\n-        populatePermissionsModal(permissions);\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-    }\r\n-});\r\n-\r\n-\r\n-    // Adicionamos o listener para o novo botão Salvar\r\n-    document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n-        // Lemos o estado de cada interruptor e rádio\r\n-        const newPermissions = {\r\n-            Gerente: {\r\n-                canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-                // MUDANÇA: Pega o valor do rádio selecionado\r\n-                canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-                canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-            },\r\n-            Funcionário: {\r\n-                canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-                canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-                canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-            }\r\n-        };\r\n-        showLoader()\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n-                method: 'PATCH',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(newPermissions)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast(data.message, 'success');\r\n-            permissionsModal.classList.add('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao salvar permissões: ' + error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal\r\n-    closePermissionsModal.addEventListener('click', () => {\r\n-        permissionsModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n-    function closeQuickAddModal() {\r\n-        quickUserAddModal.classList.add('hidden');\r\n-    }\r\n-    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n-    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n-    quickUserAddForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const username = document.getElementById('quickAddUsername').value;\r\n-        const password = document.getElementById('quickAddPassword').value;\r\n-        if (!currentLoggedInCompany) {\r\n-            showToast('Erro: Empresa não identificada.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            closeQuickAddModal();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    // --- Funções de Utilitário e de Tela ---\r\n-    function showToast(message, type = 'success') {\r\n-        toastMessage.textContent = message;\r\n-        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n-        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n-        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n-        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n-        toastMessage.classList.remove('hidden');\r\n-        setTimeout(() => {\r\n-            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n-            setTimeout(() => {\r\n-                toastMessage.classList.add('hidden');\r\n-                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n-            }, 300);\r\n-        }, 3000);\r\n-    }\r\n-\r\n-    // --- Funções para o Loader Genérico ---\r\n-    function showLoader() {\r\n-        generalLoader.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function hideLoader() {\r\n-        generalLoader.classList.add('hidden');\r\n-    }\r\n-\r\n-    function hideAllScreens() {\r\n-        initialLoginScreen.classList.add('hidden');\r\n-        cnpjLoginScreen.classList.add('hidden');\r\n-        adminLoginScreen.classList.add('hidden');\r\n-        userLoginScreen.classList.add('hidden');\r\n-        adminDashboardScreen.classList.add('hidden');\r\n-        mainAppContent.classList.add('hidden');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        addBillModal.classList.add('hidden');\r\n-        billModal.classList.add('hidden');\r\n-        barcodeFullScreenModal.classList.add('hidden');\r\n-        quickUserAddModal.classList.add('hidden');\r\n-        openAddBillModalBtn.classList.add('hidden');\r\n-    }\r\n-\r\n-    async function initializeApp() {\r\n-\r\n-            // Verifica se há um login de empresa pendente vindo da página principal\r\n-        const pendingCompanyLogin = localStorage.getItem('pendingCompanyLogin');\r\n-        if (pendingCompanyLogin) {\r\n-            try {\r\n-                const company = JSON.parse(pendingCompanyLogin);\r\n-                currentLoggedInCompany = company; // Define o estado da empresa\r\n-                \r\n-                // Limpa o item para não ser usado novamente\r\n-                localStorage.removeItem('pendingCompanyLogin'); \r\n-                \r\n-                // Pula diretamente para a tela de login do usuário\r\n-                showUserLogin(company.nomeEmpresa); \r\n-                loadingScreen.classList.add('hidden'); // Esconde o loader inicial\r\n-                return; // Para a execução para não continuar com a verificação de token\r\n-            } catch(e) {\r\n-                // Se houver erro ao ler os dados, limpa e vai para o login normal\r\n-                localStorage.removeItem('pendingCompanyLogin');\r\n-            }\r\n-        }\r\n-\r\n-        // A tela de carregamento já está visível por padrão, não precisamos de a mostrar aqui.\r\n-        const token = localStorage.getItem('authToken');\r\n-\r\n-        try {\r\n-            if (!token) {\r\n-                // Se não há token, simplesmente mostramos a tela de login.\r\n-                showInitialLogin();\r\n-                return;\r\n-            }\r\n-\r\n-            // Se há um token, verificamos com o backend.\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-\r\n-            if (!response.ok) {\r\n-                localStorage.removeItem('authToken');\r\n-                localStorage.removeItem('superAdminToken');\r\n-                showInitialLogin();\r\n-                return;\r\n-            }\r\n-\r\n-            const data = await response.json();\r\n-\r\n-            // Com base na resposta, restauramos o estado e mostramos a tela correta.\r\n-            if (data.user.role === 'SuperAdmin') {\r\n-                isAdminLoggedIn = true;\r\n-                showAdminDashboard();\r\n-            } else {\r\n-                currentLoggedInUser = data.user;\r\n-                currentLoggedInCompany = data.company;\r\n-                isAdminLoggedIn = false;\r\n-                showMainApp();\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            // Em caso de erro, sempre vamos para a tela de login por segurança.\r\n-            showInitialLogin();\r\n-        } finally {\r\n-            // MUDANÇA IMPORTANTE: O bloco 'finally' é executado SEMPRE,\r\n-            // garantindo que a tela de carregamento seja escondida, não importa o resultado.\r\n-            loadingScreen.classList.add('hidden');\r\n-        }\r\n-    }\r\n-\r\n-    function showInitialLogin() {\r\n-        clearInactivityTimer();\r\n-        hideAllScreens();\r\n-        loadingScreen.classList.add('hidden');\r\n-        initialLoginScreen.classList.remove('hidden');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        currentLoggedInCompany = null;\r\n-        currentLoggedInUser = null;\r\n-        isAdminLoggedIn = false;\r\n-        loggedInViaAdmin = false;\r\n-    }\r\n-\r\n-    function showCnpjLogin() {\r\n-        hideAllScreens();\r\n-        cnpjLoginForm.reset();\r\n-        cnpjLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showAdminLogin() {\r\n-        hideAllScreens();\r\n-        adminLoginForm.reset();\r\n-        adminLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showUserLogin(companyName) {\r\n-        hideAllScreens();\r\n-        userLoginForm.reset();\r\n-        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-        userLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showMainApp() {\r\n-        hideAllScreens();\r\n-        mainAppContent.classList.remove('hidden');\r\n-\r\n-        if (currentLoggedInUser && currentLoggedInUser.username) {\r\n-            document.getElementById('loggedInUserDisplay').textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-        }\r\n-\r\n-        if (loggedInViaAdmin) {\r\n-            backToAdminBtn.classList.remove('hidden');\r\n-        } else {\r\n-            backToAdminBtn.classList.add('hidden');\r\n-        }\r\n-        \r\n-        if (!isAdminLoggedIn && currentLoggedInUser.role === 'Proprietário') {\r\n-            settingsMenuContainer.classList.remove('hidden');\r\n-        } else {\r\n-            settingsMenuContainer.classList.add('hidden');\r\n-        }\r\n-\r\n-        openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-        updateBillsOrganizer();\r\n-        startInactivityTimer();\r\n-    }\r\n-\r\n-    function showAdminDashboard() {\r\n-        hideAllScreens();\r\n-        adminDashboardScreen.classList.remove('hidden');\r\n-        renderCompanyList();\r\n-        tartInactivityTimer();\r\n-    }\r\n-\r\n-    function formatCnpj(value) {\r\n-        value = value.replace(/\\D/g, '');\r\n-        if (value.length > 14) value = value.slice(0, 14);\r\n-        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n-        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n-        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n-        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n-        return value;\r\n-    }\r\n-    // --- Lógica de Navegação do Calendário ---\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth--;\r\n-        if (currentMonth < 0) {\r\n-            currentMonth = 11;\r\n-            currentYear--;\r\n-        }\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth++;\r\n-        if (currentMonth > 11) {\r\n-            currentMonth = 0;\r\n-            currentYear++;\r\n-        }\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-    // --- Lógica de Autenticação e Outras Funções ---\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const cnpj = cnpjInput.value;\r\n-        const password = cnpjPasswordInput.value;\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/login/company`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            cnpj,\r\n-                            password\r\n-                        }),\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInCompany = data.company;\r\n-            loggedInViaAdmin = false;\r\n-            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    adminLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const username = adminUsernameInput.value;\r\n-        const password = adminPasswordInput.value;\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/login/admin`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            localStorage.setItem('authToken', data.token);\r\n-            isAdminLoggedIn = true;\r\n-            showToast('Login de Administrador bem-sucedido!', 'success');\r\n-            showAdminDashboard();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-    userLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const username = userInput.value;\r\n-        const password = userPasswordInput.value;\r\n-        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n-            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/login/user`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInUser = data.user;\r\n-            showMainApp();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    });\r\n-    backToAdminBtn.addEventListener('click', () => {\r\n-        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n-\r\n-        // 1. Recuperamos o token original do admin que guardámos\r\n-        const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-        if (!adminToken) {\r\n-            showToast(\"Erro: Token de administrador não encontrado. Faça o login novamente.\", \"error\");\r\n-            showInitialLogin();\r\n-            return;\r\n-        }\r\n-\r\n-        // 2. Restauramos o token do admin como o token ativo\r\n-        localStorage.setItem('authToken', adminToken);\r\n-        localStorage.removeItem('superAdminToken'); // Limpamos o token temporário\r\n-\r\n-        // 3. Resetamos o estado da aplicação e mostramos o painel\r\n-        currentLoggedInUser = null;\r\n-        currentLoggedInCompany = null;\r\n-        loggedInViaAdmin = false;\r\n-        isAdminLoggedIn = true;\r\n-        showAdminDashboard();\r\n-    });\r\n-\r\n-    async function renderCompanyList() {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) return;\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies`, {\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-\r\n-            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n-\r\n-            const companies = await response.json();\r\n-            companyListDiv.innerHTML = '';\r\n-\r\n-            if (companies.length === 0) {\r\n-                noCompaniesMessage.classList.remove('hidden');\r\n-            } else {\r\n-                noCompaniesMessage.classList.add('hidden');\r\n-                companies.forEach(company => {\r\n-                    const companyCard = document.createElement('div');\r\n-                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                    \r\n-                    // MUDANÇA: A API agora não retorna a contagem de usuários diretamente na lista.\r\n-                    // Podemos mostrar esta informação de outra forma ou remover por enquanto para simplificar.\r\n-                    companyCard.innerHTML = `\r\n-                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                        </div>\r\n-                    `;\r\n-                    companyListDiv.appendChild(companyCard);\r\n-                });\r\n-\r\n-                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n-                    button.addEventListener('click', async (e) => {\r\n-                        const companyId = e.target.dataset.companyId;\r\n-                        const token = localStorage.getItem('authToken');\r\n-                        try {\r\n-                            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n-                                headers: {\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                }\r\n-                            });\r\n-                            \r\n-                            // MUDANÇA: A resposta agora é desestruturada em 'company' e 'users'.\r\n-                            const { company, users } = await response.json();\r\n-                            \r\n-                            if (!response.ok) throw new Error(company.message); // Usa a mensagem de erro do objeto company\r\n-                            \r\n-                            // MUDANÇA: Passamos os dois objetos para a função do modal.\r\n-                            openCompanyDetailsModal(company, users);\r\n-\r\n-                        } catch (error) {\r\n-                            showToast(error.message, 'error');\r\n-                        }\r\n-                    });\r\n-                });\r\n-\r\n-                // O listener do 'enter-company-btn' precisa ser atualizado também para funcionar com a nova lógica\r\n-                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-                    button.addEventListener('click', async (e) => {\r\n-                        const companyId = e.target.dataset.companyId;\r\n-                        const token = localStorage.getItem('authToken');\r\n-                        try {\r\n-                            // Precisamos buscar os usuários da empresa para poder entrar como o primeiro\r\n-                            const companyDetailsResponse = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n-                                headers: { 'Authorization': `Bearer ${token}` }\r\n-                            });\r\n-                            const { company, users } = await companyDetailsResponse.json();\r\n-\r\n-                            if (!companyDetailsResponse.ok) throw new Error(company.message);\r\n-                            \r\n-                            if (users.length === 0) {\r\n-                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n-                                return;\r\n-                            }\r\n-\r\n-                            // Entramos como o primeiro usuário da lista\r\n-                            const userId = users[0]._id; \r\n-                            \r\n-                            const impersonateResponse = await fetch(`${API_BASE_URL}/api/admin/impersonate`, {\r\n-                                method: 'POST',\r\n-                                headers: {\r\n-                                    'Content-Type': 'application/json',\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                },\r\n-                                body: JSON.stringify({ companyId, userId })\r\n-                            });\r\n-                            const data = await impersonateResponse.json();\r\n-                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n-                            \r\n-                            showToast(`Entrando na empresa ${company.nomeEmpresa}...`, 'success');\r\n-                            localStorage.setItem('superAdminToken', token);\r\n-                            localStorage.setItem('authToken', data.token);\r\n-                            currentLoggedInCompany = company;\r\n-                            currentLoggedInUser = data.user;\r\n-                            loggedInViaAdmin = true;\r\n-                            showMainApp();\r\n-                        } catch (error) {\r\n-                            showToast(error.message, 'error');\r\n-                        }\r\n-                    });\r\n-                });\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    }\r\n-\r\n-    createCompanyBtn.addEventListener('click', () => {\r\n-        openAddCompanyModal();\r\n-    });\r\n-\r\n-    // --- Lógica Principal do App de Boletos ---\r\n-    function initializeCalendarDate() {\r\n-        const today = new Date();\r\n-        currentMonth = today.getMonth();\r\n-        currentYear = today.getFullYear();\r\n-        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n-    }\r\n-\r\n-    async function updateBillsOrganizer() {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n-            showInitialLogin(); // Redireciona para o login se não houver token\r\n-            return;\r\n-        }\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n-            const response = await fetch(`${API_BASE_URL}/api/boletos`, {\r\n-                method: 'GET',\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-\r\n-            if (!response.ok) {\r\n-                const errorData = await response.json();\r\n-                throw new Error(errorData.message || \"Erro ao buscar boletos.\");\r\n-            }\r\n-            \r\n-            // A resposta da nova API já vem no formato de uma lista de boletos,\r\n-            // com os dados do usuário \"populados\".\r\n-            userBoletos = await response.json();\r\n-            \r\n-            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-            totalBillsSpan.textContent = totalParcels;\r\n-\r\n-            // As funções de renderização e resumo são chamadas como antes.\r\n-            updateMonthlySummary();\r\n-            \r\n-            // A lógica para alternar entre calendário e lista diária continua a mesma.\r\n-            if (window.innerWidth >= 1024) {\r\n-                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n-                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n-                renderCalendar();\r\n-            } else {\r\n-                document.getElementById('billsOrganizer').classList.add('hidden');\r\n-                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n-                renderDailyBills();\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Se a busca falhar (ex: token expirado), deslogamos o usuário\r\n-            showInitialLogin();\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    }\r\n-\r\n-    function updateMonthlySummary() {\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n-            .filter(parcel => {\r\n-                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-            });\r\n-        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const totalNaoPago = totalMes - totalPago;\r\n-        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-            .filter(parcel => {\r\n-                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                return dueDate < today && !parcel.paid;\r\n-            });\r\n-        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n-            {\r\n-                style: 'currency',\r\n-                currency: 'BRL'\r\n-            });\r\n-        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n-        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n-    }\r\n-\r\n-    function renderCalendar() {\r\n-        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-        const calendarDays = document.getElementById('calendarDays');\r\n-        calendarDays.innerHTML = '';\r\n-        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-        for (let i = 0; i < firstDayOfMonth; i++) {\r\n-            const emptyCell = document.createElement('div');\r\n-            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n-            calendarDays.appendChild(emptyCell);\r\n-        }\r\n-        for (let day = 1; day <= daysInMonth; day++) {\r\n-            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-            const dayCell = document.createElement('div');\r\n-            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n-            dayCell.dataset.date = dateStr;\r\n-            const dayHeader = document.createElement('div');\r\n-            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-            dayHeader.textContent = day;\r\n-            dayCell.appendChild(dayHeader);\r\n-            dayCell.addEventListener('click', (e) => {\r\n-                if (e.target.closest('.bill-card')) return;\r\n-                const clickedDate = e.currentTarget.dataset.date;\r\n-                clearBillForm();\r\n-                document.getElementById('dueDate').value = clickedDate;\r\n-                addBillModal.classList.remove('hidden');\r\n-            });\r\n-            userBoletos.forEach(bill => {\r\n-                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                    const parcelElement = document.createElement('div');\r\n-                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n-                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n-                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                    dayCell.appendChild(parcelElement);\r\n-                });\r\n-            });\r\n-            calendarDays.appendChild(dayCell);\r\n-        }\r\n-    }\r\n-\r\n-    function renderDailyBills() {\r\n-        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n-    }\r\n-\r\n-    function clearBillForm() {\r\n-        billForm.reset();\r\n-        installmentsPreview.classList.add('hidden');\r\n-        installmentsList.innerHTML = '';\r\n-        currentBill = {};\r\n-    }\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    billForm.addEventListener('submit', function (e) {\r\n-        e.preventDefault();\r\n-        const billName = document.getElementById('billName').value;\r\n-        const dueDate = document.getElementById('dueDate').value;\r\n-        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n-        const installments = parseInt(document.getElementById('installments').value);\r\n-        const description = document.getElementById('description').value;\r\n-        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-        const barcode = document.getElementById('barcode').value;\r\n-        if (!billName || !dueDate || !totalAmount || !installments) {\r\n-            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-            return;\r\n-        }\r\n-        currentBill = {\r\n-            name: billName,\r\n-            parcels: []\r\n-        };\r\n-        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-        installmentsList.innerHTML = '';\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        currentBill.parcels.push({\r\n-            id: `${Date.now()}-${i}`,\r\n-            number: i + 1,\r\n-            amount: parcelAmount,\r\n-            dueDate: dateForInput,\r\n-            paid: false,\r\n-            description: description,\r\n-            barcode: barcode\r\n-        });\r\n-\r\n-        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n-            day: '2-digit',\r\n-            month: '2-digit',\r\n-            year: 'numeric'\r\n-        });\r\n-        \r\n-        const parcelItem = document.createElement('div');\r\n-        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n-        \r\n-        parcelItem.innerHTML = `\r\n-            <div class=\"flex items-center space-x-4\">\r\n-                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n-                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n-            </div>\r\n-            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n-        `;\r\n-        \r\n-        installmentsList.appendChild(parcelItem);\r\n-    }\r\n-        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-            input.addEventListener('input', (e) => {\r\n-                const index = parseInt(e.target.dataset.parcelIndex);\r\n-                const newAmount = parseFloat(e.target.value) || 0;\r\n-                if (!isNaN(newAmount)) {\r\n-                    currentBill.parcels[index].amount = newAmount;\r\n-                    updatePreviewTotal();\r\n-                }\r\n-            });\r\n-            input.addEventListener('blur', (e) => {\r\n-                const newAmount = parseFloat(e.target.value) || 0;\r\n-                e.target.value = newAmount.toFixed(2);\r\n-            });\r\n-        });\r\n-        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-            input.addEventListener('change', (e) => {\r\n-                const index = parseInt(e.target.dataset.parcelIndex);\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            });\r\n-        });\r\n-        installmentsPreview.classList.remove('hidden');\r\n-        updatePreviewTotal();\r\n-    });\r\n-\r\n-    function updatePreviewTotal() {\r\n-        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n-        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-    }\r\n-    addToOrganizer.addEventListener('click', async function () {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        if (!currentBill || !currentBill.name) {\r\n-            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n-            return;\r\n-        }\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/boletos`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(currentBill)\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n-            showToast(data.message, 'success');\r\n-            addBillModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    // --- Lógica do Modal de Edição de Boletos ---\r\n-    function openBillModal(bill, parcel) {\r\n-        // MUDANÇA: Usamos bill._id para o parentId e o parcel já terá o seu próprio _id.\r\n-        selectedParcel = { ...parcel, parentId: bill._id };\r\n-        \r\n-        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n-        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n-        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n-        modalBillBarcodeInput.value = parcel.barcode || '';\r\n-        modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n-            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n-        } else {\r\n-            showFullScreenBarcodeBtn.classList.add('hidden');\r\n-        }\r\n-        billModal.classList.remove('hidden');\r\n-    }\r\n-\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    billModal.addEventListener('click', (e) => {\r\n-        if (e.target === billModal) billModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    saveBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n-        const updatedData = {\r\n-            paid: document.getElementById('modalBillPaid').checked,\r\n-            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n-            dueDate: document.getElementById('modalBillDate').value,\r\n-            description: document.getElementById('modalBillDescription').value,\r\n-            barcode: document.getElementById('modalBillBarcode').value\r\n-        };\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            const response = await fetch(url, { // Usamos a nova URL\r\n-                method: 'PATCH',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                body: JSON.stringify(updatedData)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Parcela atualizada com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    deleteBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel) return;\r\n-        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        \r\n-        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n-        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n-\r\n-        try {\r\n-            const response = await fetch(url, { // Usamos a nova URL\r\n-                method: 'DELETE',\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Parcela excluída com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    deleteEntireBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel || !selectedParcel.parentId) {\r\n-            showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n-            return;\r\n-        }\r\n-        \r\n-        if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n-            return;\r\n-        }\r\n-        \r\n-        const token = localStorage.getItem('authToken');\r\n-        // MUDANÇA: O ID do boleto vem de selectedParcel.parentId, que agora já é o _id correto.\r\n-        const boletoId = selectedParcel.parentId; \r\n-        \r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/boletos/${boletoId}`, {\r\n-                method: 'DELETE',\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            \r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast('Boleto completo excluído com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-            \r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n-        const token = localStorage.getItem('authToken');\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-            \r\n-            // A resposta da API é um objeto { company, users }\r\n-            const data = await response.json(); \r\n-\r\n-            if (!response.ok) {\r\n-                // A mensagem de erro pode estar em 'data.message'\r\n-                throw new Error(data.message || 'Não foi possível buscar os detalhes da empresa.');\r\n-            }\r\n-\r\n-            // MUDANÇA CRÍTICA: Em vez de passar o objeto 'data' inteiro,\r\n-            // passamos as suas propriedades 'company' e 'users' corretamente.\r\n-            openCompanyDetailsModal(data.company, data.users);\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    }\r\n-\r\n-    // --- Lógica do Modal de Detalhes da Empresa ---\r\n-    function openCompanyDetailsModal(company, users) {\r\n-        selectedCompanyForAdmin = company;\r\n-        document.getElementById('modalCompanyNameInput').value = company.nomeEmpresa;\r\n-\r\n-        modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n-        modalCompanyPasswordInput.value = '';\r\n-        modalCompanyUsers.innerHTML = '';\r\n-        \r\n-        if (users.length === 0) {\r\n-            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-        } else {\r\n-            // A lógica para listar usuários permanece a mesma\r\n-            const assignableRoles = isAdminLoggedIn ?\r\n-                ['Proprietário', 'Gerente', 'Funcionário'] :\r\n-                ['Gerente', 'Funcionário'];\r\n-\r\n-            users.forEach(user => {\r\n-                const userItem = document.createElement('div');\r\n-                userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n-\r\n-                const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n-                let roleDisplay = '';\r\n-\r\n-                if (isEditable) {\r\n-                    const optionsHTML = assignableRoles.map(role => {\r\n-                        if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n-                        return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n-                    }).join('');\r\n-                    roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n-                } else {\r\n-                    roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n-                }\r\n-\r\n-                userItem.innerHTML = `\r\n-                    <div class=\"flex items-center space-x-3\">\r\n-                        <span class=\"text-white\">${user.username}</span>\r\n-                        ${roleDisplay}\r\n-                    </div>\r\n-                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                `;\r\n-                modalCompanyUsers.appendChild(userItem);\r\n-            });\r\n-        }\r\n-\r\n-        // Recriamos os listeners para garantir que funcionem\r\n-        document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-            button.addEventListener('click', (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const companyId = selectedCompanyForAdmin._id;\r\n-                handleRemoveUser(companyId, userId);\r\n-            });\r\n-        });\r\n-\r\n-        document.querySelectorAll('.role-select').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                const token = localStorage.getItem('authToken');\r\n-                const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-                try {\r\n-                    const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}/role`, {\r\n-                        method: 'PATCH',\r\n-                        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                        body: JSON.stringify({ role: newRole })\r\n-                    });\r\n-\r\n-                    const data = await response.json();\r\n-                    if (!response.ok) throw new Error(data.message);\r\n-                    showToast(data.message, 'success');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                    fetchCompanyDetailsAndOpenModal(companyId);\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        companyDetailsModal.classList.remove('hidden');\r\n-    }\r\n-\r\n-    async function handleRemoveUser(companyId, userId) {\r\n-        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    addUserBtn.addEventListener('click', () => {\r\n-        openAddUserModal();\r\n-    });\r\n-\r\n-    deleteCompanyBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n-            return;\r\n-        }\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-\r\n-        const token = localStorage.getItem('authToken');\r\n-        const updatedData = {}; // Objeto vazio para guardar apenas o que mudou\r\n-\r\n-        // Pegamos os valores dos campos\r\n-        const newName = document.getElementById('modalCompanyNameInput').value;\r\n-        const newPassword = modalCompanyPasswordInput.value;\r\n-\r\n-        // MUDANÇA: Verificamos se o nome foi alterado e adicionamo-lo ao payload\r\n-        if (newName && newName.trim() !== '' && newName.trim() !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-            updatedData.nomeEmpresa = newName.trim();\r\n-        }\r\n-\r\n-        // A lógica da senha continua, mas agora também é adicionada ao mesmo payload\r\n-        if (newPassword && newPassword.length > 0) {\r\n-            updatedData.newPassword = newPassword;\r\n-        }\r\n-\r\n-        // Se nada foi alterado, informamos o usuário e paramos\r\n-        if (Object.keys(updatedData).length === 0) {\r\n-            showToast(\"Nenhuma alteração para salvar.\", \"info\");\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`, {\r\n-                method: 'PATCH',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                body: JSON.stringify(updatedData) // Enviamos o objeto com as alterações\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList(); // Atualizamos a lista de empresas para refletir o novo nome\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    companyDetailsModal.addEventListener('click', (e) => {\r\n-        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n-    });\r\n-    // --- Inicialização ---\r\n-    initializeCalendarDate();\r\n-    initializeApp();\r\n-\r\n-    // Função para abrir e preencher o modal\r\n-    async function openCompanyInfoModal() {\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${currentLoggedInCompany._id}`, {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            currentCompanyDetails = data.company;\r\n-            document.getElementById('companyInfoCnpj').textContent = formatCnpj(currentCompanyDetails.cnpj);\r\n-            document.getElementById('companyInfoName').value = currentCompanyDetails.nomeEmpresa;\r\n-            document.getElementById('companyInfoEmail').value = currentCompanyDetails.email || '';\r\n-            document.getElementById('companyInfoTelefone').value = currentCompanyDetails.telefoneFixo || '';\r\n-            document.getElementById('companyInfoWhatsapp').value = currentCompanyDetails.telefoneWhatsapp || '';\r\n-\r\n-            // MUDANÇA: Aplicamos as máscaras AQUI, depois de o modal estar preenchido e prestes a ser exibido.\r\n-            const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n-            if (telefoneFixoInput) {\r\n-                IMask(telefoneFixoInput, { mask: '(00) 0000-0000' });\r\n-            }\r\n-            const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n-            if (whatsappInput) {\r\n-                IMask(whatsappInput, { mask: '(00) 00000-0000' });\r\n-            }\r\n-\r\n-            companyInfoModal.classList.remove('hidden');\r\n-\r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    // Listener para o link do menu \"Detalhes da Empresa\"\r\n-    menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        // Chama a função para abrir o modal com as informações da empresa\r\n-        openCompanyInfoModal(); \r\n-    });\r\n-\r\n-    // Listener para o botão de salvar\r\n-    saveCompanyInfoBtn.addEventListener('click', async () => {\r\n-        const payload = {\r\n-            nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-            \r\n-            // MUDANÇA: Adicionamos o e-mail ao payload que será enviado para a API\r\n-            email: document.getElementById('companyInfoEmail').value,\r\n-\r\n-            telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-            telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-        };\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${currentCompanyDetails._id}`, {\r\n-                method: 'PATCH',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(payload)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast(data.message, 'success');\r\n-            companyInfoModal.classList.add('hidden');\r\n-\r\n-        } catch (error) {\r\n-            showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal\r\n-    closeCompanyInfoModalBtn.addEventListener('click', () => {\r\n-        companyInfoModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // --- LÓGICA PARA MÁSCARAS DE INPUT (IMask.js) ---\r\n-\r\n-    document.addEventListener('DOMContentLoaded', () => {\r\n-        // Máscara para o campo de CNPJ no modal de login da empresa (ESTA FICA)\r\n-        const cnpjInput = document.getElementById('cnpjInput');\r\n-        if (cnpjInput) {\r\n-            const cnpjMask = IMask(cnpjInput, {\r\n-                mask: '00.000.000/0000-00'\r\n-            });\r\n-        }\r\n-        \r\n-        // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n-        const totalAmountInput = document.getElementById('totalAmount');\r\n-        if (totalAmountInput) {\r\n-            const amountMask = IMask(totalAmountInput, {\r\n-                mask: 'R$ num',\r\n-                blocks: {\r\n-                    num: {\r\n-                        mask: Number,\r\n-                        scale: 2,\r\n-                        radix: ',',\r\n-                        thousandsSeparator: '.',\r\n-                        padFractionalZeros: true\r\n-                    }\r\n-                }\r\n-            });\r\n-        }\r\n-\r\n-        // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n-        const modalAmountInput = document.getElementById('modalBillAmount');\r\n-        if (modalAmountInput) {\r\n-            const modalAmountMask = IMask(modalAmountInput, {\r\n-                mask: 'R$ num',\r\n-                blocks: {\r\n-                    num: {\r\n-                        mask: Number,\r\n-                        scale: 2,\r\n-                        radix: ',',\r\n-                        thousandsSeparator: '.',\r\n-                        padFractionalZeros: true\r\n-                    }\r\n-                }\r\n-            });\r\n-        }\r\n-    });\r\n-\r\n-    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR USUÁRIO ---\r\n-\r\n-    // Função para abrir o modal\r\n-    function openAddUserModal() {\r\n-        addUserForm.reset(); // Limpa o formulário\r\n-        addUserModal.classList.remove('hidden');\r\n-        document.getElementById('addUsernameInput').focus();\r\n-    }\r\n-\r\n-    // Função para fechar o modal\r\n-    function closeAddUserModal() {\r\n-        addUserModal.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Listeners para fechar/cancelar\r\n-    closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-\r\n-    // Listener para o envio do formulário\r\n-    addUserForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault(); // Impede o recarregamento da página\r\n-\r\n-        const username = document.getElementById('addUsernameInput').value;\r\n-        const password = document.getElementById('addUserPasswordInput').value;\r\n-        const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-\r\n-        // Validação de senha\r\n-        if (password !== confirmPassword) {\r\n-            showToast(\"As senhas não coincidem.\", \"error\");\r\n-            return;\r\n-        }\r\n-\r\n-        // Identifica a empresa atual (seja via admin ou login normal)\r\n-        const companyId = selectedCompanyForAdmin ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n-        if (!companyId) {\r\n-            showToast(\"Erro: Não foi possível identificar a empresa.\", \"error\");\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`, {\r\n-                method: 'POST',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify({ username, password, companyId })\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-\r\n-            showToast(data.message, 'success');\r\n-            closeAddUserModal();\r\n-\r\n-            // Atualiza a lista de usuários na tela que estiver aberta\r\n-            if (adminDashboardScreen.classList.contains('hidden')) {\r\n-                // Se estiver no modal de \"Gerenciar Usuários\" do proprietário\r\n-                fetchCompanyDetailsAndOpenModal(companyId, true); // O 'true' indica que é uma atualização\r\n-            } else {\r\n-                // Se estiver no painel do admin\r\n-                renderCompanyList();\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR EMPRESA ---\r\n-\r\n-    // Aplica a máscara de CNPJ ao novo campo\r\n-    const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-    if (addCompanyCnpjInput) {\r\n-        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    // Função para abrir o modal\r\n-    function openAddCompanyModal() {\r\n-        addCompanyForm.reset(); // Limpa o formulário\r\n-        addCompanyModal.classList.remove('hidden');\r\n-        document.getElementById('addCompanyNameInput').focus();\r\n-    }\r\n-\r\n-    // Função para fechar o modal\r\n-    function closeAddCompanyModal() {\r\n-        addCompanyModal.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Listeners para fechar/cancelar\r\n-    closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-\r\n-    // Listener para o envio do formulário\r\n-    addCompanyForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const payload = {\r\n-            nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-            cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-            senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-            ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-            ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-        };\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n-            return;\r\n-        }\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/register`, {\r\n-                method: 'POST',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(payload)\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-\r\n-            showToast(data.message, 'success');\r\n-            closeAddCompanyModal();\r\n-            renderCompanyList(); // Atualiza a lista de empresas no painel de admin\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752509506501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -460,9 +460,9 @@\n     showInitialLogin();\r\n     });\r\n \r\n     async function initializeApp() {\r\n-        // Verifica se há um login de empresa pendente vindo da página principal\r\n+        // 1. Verifica se há um login de empresa pendente vindo da página principal\r\n         const pendingCompanyLogin = localStorage.getItem('pendingCompanyLogin');\r\n         if (pendingCompanyLogin) {\r\n             try {\r\n                 const company = JSON.parse(pendingCompanyLogin);\r\n@@ -480,63 +480,117 @@\n                 localStorage.removeItem('pendingCompanyLogin');\r\n             }\r\n         }\r\n \r\n-        // Se não houver login pendente, continua com a verificação normal de sessão\r\n+        // 2. Se não houver login pendente, continua com a verificação normal de sessão\r\n         const token = localStorage.getItem('authToken');\r\n \r\n-        // Se não há token, vai para a tela de login\r\n         if (!token) {\r\n             showInitialLogin();\r\n-            loadingScreen.classList.add('hidden'); // Garante que o loader seja escondido\r\n+            loadingScreen.classList.add('hidden');\r\n             return;\r\n         }\r\n \r\n-        // Se há um token, tentamos verificar com o backend\r\n+        // 3. Se há um token, tentamos verificar com o backend\r\n         try {\r\n             const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\r\n                 headers: { 'Authorization': `Bearer ${token}` }\r\n             });\r\n \r\n             if (!response.ok) {\r\n-                // Se o token for inválido ou expirado, limpamos o lixo e vamos para o login.\r\n+                // Se o token for inválido ou expirado, limpa e vai para o login.\r\n                 localStorage.removeItem('authToken');\r\n                 localStorage.removeItem('superAdminToken');\r\n                 showInitialLogin();\r\n                 return;\r\n             }\r\n \r\n             const data = await response.json();\r\n             \r\n-            // Com base na resposta, restauramos o estado da aplicação.\r\n+            // 4. Com base na resposta, decide para onde ir\r\n             if (data.user.role === 'SuperAdmin') {\r\n                 isAdminLoggedIn = true;\r\n                 showAdminDashboard();\r\n             } else {\r\n-                // É um usuário normal, vamos verificar a assinatura\r\n+                // Para usuários normais, o acesso depende da assinatura da empresa\r\n                 currentLoggedInUser = data.user;\r\n                 currentLoggedInCompany = data.company;\r\n                 isAdminLoggedIn = false;\r\n \r\n-                // Se for Proprietário, verifica a assinatura.\r\n-                // Se não for, ou se a assinatura estiver ativa, permite o acesso.\r\n-                if (currentLoggedInUser.role !== 'Proprietário' || checkSubscription(currentLoggedInCompany)) {\r\n+                const isSubscriptionActive = currentLoggedInCompany.subscription?.status === 'active';\r\n+\r\n+                if (isSubscriptionActive) {\r\n+                    // Se a assinatura estiver ATIVA, todos têm acesso.\r\n                     showMainApp();\r\n+                } else {\r\n+                    // Se a assinatura NÃO estiver ativa...\r\n+                    if (currentLoggedInUser.role === 'Proprietário') {\r\n+                        // ...e o usuário for o Proprietário, mostra o modal de renovação.\r\n+                        checkSubscription(currentLoggedInCompany);\r\n+                    } else {\r\n+                        // ...e for um Gerente ou Funcionário, mostra o modal de acesso bloqueado.\r\n+                        showAccessBlockedModal();\r\n+                    }\r\n                 }\r\n-                // Se a verificação da assinatura retornar 'false', o modal de assinatura já foi exibido\r\n-                // e a função para aqui, bloqueando o acesso ao resto da aplicação.\r\n             }\r\n \r\n         } catch (error) {\r\n             // Em caso de erro de rede, etc., sempre vamos para a tela de login por segurança.\r\n             showInitialLogin();\r\n         } finally {\r\n-            // O bloco 'finally' é executado SEMPRE,\r\n-            // garantindo que a tela de carregamento da sessão seja escondida, não importa o resultado.\r\n+            // Garante que a tela de carregamento da sessão seja escondida, não importa o resultado.\r\n             loadingScreen.classList.add('hidden');\r\n         }\r\n     }\r\n \r\n+    /**\r\n+     * Verifica o status da assinatura e mostra o modal apropriado para o Proprietário.\r\n+     * @param {object} company - O objeto da empresa retornado pela API.\r\n+     */\r\n+    function checkSubscription(company) {\r\n+        const status = company.subscription?.status;\r\n+\r\n+        // Se a assinatura estiver ativa, não faz nada e permite o acesso.\r\n+        if (status === 'active') {\r\n+            return true;\r\n+        }\r\n+\r\n+        // Se não estiver ativa, configura e mostra o modal de assinatura.\r\n+        const title = document.getElementById('subscriptionTitle');\r\n+        const message = document.getElementById('subscriptionMessage');\r\n+        const icon = document.getElementById('subscriptionIcon');\r\n+        const actionBtn = document.getElementById('subscriptionActionBtn');\r\n+\r\n+        if (status === 'inactive' || status === 'trial') {\r\n+            title.textContent = 'Ative sua Assinatura';\r\n+            message.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+            actionBtn.textContent = 'Realizar Assinatura';\r\n+            icon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+        } else { // 'past_due' ou qualquer outro status\r\n+            title.textContent = 'Assinatura Pendente';\r\n+            message.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+            actionBtn.textContent = 'Renovar Assinatura';\r\n+            icon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+        }\r\n+\r\n+        subscriptionModal.classList.remove('hidden');\r\n+        return false; // Retorna false para indicar que o acesso está bloqueado.\r\n+    }\r\n+\r\n+    function showAccessBlockedModal() {\r\n+        const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+        const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+        \r\n+        hideAllScreens();\r\n+        \r\n+        accessBlockedModal.classList.remove('hidden');\r\n+        \r\n+        // Adiciona um listener para o botão de sair deste modal\r\n+        if(blockedAccessLogoutBtn) {\r\n+            blockedAccessLogoutBtn.addEventListener('click', showInitialLogin);\r\n+        }\r\n+    }\r\n+\r\n     function showInitialLogin() {\r\n         clearInactivityTimer();\r\n         hideAllScreens();\r\n         loadingScreen.classList.add('hidden');\r\n"
                },
                {
                    "date": 1752510316107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1385,8 +1385,48 @@\n                 modalCompanyUsers.appendChild(userItem);\r\n             });\r\n         }\r\n \r\n+        if (company.subscription && company.subscription.status) {\r\n+            let statusText = '';\r\n+            let statusColorClass = '';\r\n+\r\n+            switch (company.subscription.status) {\r\n+                case 'active':\r\n+                    statusText = 'Ativa';\r\n+                    statusColorClass = 'text-green-400';\r\n+                    break;\r\n+                case 'inactive':\r\n+                    statusText = 'Inativa';\r\n+                    statusColorClass = 'text-red-400';\r\n+                    break;\r\n+                case 'past_due':\r\n+                    statusText = 'Vencida';\r\n+                    statusColorClass = 'text-orange-400';\r\n+                    break;\r\n+                case 'trial':\r\n+                    statusText = 'Período de Teste';\r\n+                    statusColorClass = 'text-blue-400';\r\n+                    break;\r\n+                default:\r\n+                    statusText = 'Desconhecido';\r\n+                    statusColorClass = 'text-gray-400';\r\n+            }\r\n+            subStatusEl.textContent = statusText;\r\n+            subStatusEl.className = `ml-2 font-bold ${statusColorClass}`;\r\n+\r\n+            if (company.subscription.endDate) {\r\n+                subEndDateEl.textContent = new Date(company.subscription.endDate).toLocaleDateString('pt-BR', {\r\n+                    day: '2-digit', month: '2-digit', year: 'numeric'\r\n+                });\r\n+            } else {\r\n+                subEndDateEl.textContent = 'N/A';\r\n+            }\r\n+        } else {\r\n+            subStatusEl.textContent = 'Não configurada';\r\n+            subEndDateEl.textContent = 'N/A';\r\n+        }\r\n+\r\n         // Recriamos os listeners para garantir que funcionem\r\n         document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n             button.addEventListener('click', (e) => {\r\n                 const userId = e.target.dataset.userId;\r\n@@ -1655,8 +1695,56 @@\n             });\r\n         }\r\n     });\r\n \r\n+    // Listerner para botão de adição de assinatura\r\n+    document.getElementById('addSubscriptionBtn').addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) {\r\n+            showToast('Nenhuma empresa selecionada.', 'error');\r\n+            return;\r\n+        }\r\n+\r\n+        const daysToAddInput = document.getElementById('daysToAddInput');\r\n+        const daysToAdd = daysToAddInput.value;\r\n+        if (!daysToAdd || parseInt(daysToAdd, 10) <= 0) {\r\n+            showToast('Por favor, insira um número de dias válido.', 'error');\r\n+            return;\r\n+        }\r\n+\r\n+        const companyId = selectedCompanyForAdmin._id;\r\n+        const token = localStorage.getItem('authToken');\r\n+        \r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/subscription`, {\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify({ daysToAdd: daysToAdd })\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) {\r\n+                throw new Error(data.message);\r\n+            }\r\n+\r\n+            showToast(data.message, 'success');\r\n+            \r\n+            // Limpa o input\r\n+            daysToAddInput.value = '';\r\n+\r\n+            // Atualiza a UI do modal com os novos dados da empresa retornados pela API\r\n+            openCompanyDetailsModal(data.company, data.users);\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    });\r\n+\r\n     // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR USUÁRIO ---\r\n \r\n     // Função para abrir o modal\r\n     function openAddUserModal() {\r\n"
                },
                {
                    "date": 1752510622563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1342,27 +1342,26 @@\n     }\r\n \r\n     // --- Lógica do Modal de Detalhes da Empresa ---\r\n     function openCompanyDetailsModal(company, users) {\r\n+        // Guarda a referência da empresa selecionada\r\n         selectedCompanyForAdmin = company;\r\n+\r\n+        // Preenche os campos de input e texto\r\n         document.getElementById('modalCompanyNameInput').value = company.nomeEmpresa;\r\n-\r\n         modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n-        modalCompanyPasswordInput.value = '';\r\n+        modalCompanyPasswordInput.value = ''; // Limpa o campo de senha por segurança\r\n         modalCompanyUsers.innerHTML = '';\r\n         \r\n-        if (users.length === 0) {\r\n-            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-        } else {\r\n-            // A lógica para listar usuários permanece a mesma\r\n+        // Renderiza a lista de usuários\r\n+        if (users && users.length > 0) {\r\n             const assignableRoles = isAdminLoggedIn ?\r\n                 ['Proprietário', 'Gerente', 'Funcionário'] :\r\n                 ['Gerente', 'Funcionário'];\r\n \r\n             users.forEach(user => {\r\n                 const userItem = document.createElement('div');\r\n                 userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n-\r\n                 const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n                 let roleDisplay = '';\r\n \r\n                 if (isEditable) {\r\n@@ -1383,10 +1382,16 @@\n                     <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n                 `;\r\n                 modalCompanyUsers.appendChild(userItem);\r\n             });\r\n+        } else {\r\n+            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n         }\r\n \r\n+        // --- LÓGICA PARA PREENCHER DADOS DA ASSINATURA ---\r\n+        const subStatusEl = document.getElementById('subscriptionStatus');\r\n+        const subEndDateEl = document.getElementById('subscriptionEndDate');\r\n+\r\n         if (company.subscription && company.subscription.status) {\r\n             let statusText = '';\r\n             let statusColorClass = '';\r\n \r\n@@ -1423,43 +1428,24 @@\n             }\r\n         } else {\r\n             subStatusEl.textContent = 'Não configurada';\r\n             subEndDateEl.textContent = 'N/A';\r\n+            subStatusEl.className = 'ml-2 font-bold text-gray-400';\r\n         }\r\n-\r\n-        // Recriamos os listeners para garantir que funcionem\r\n+        \r\n+        // Adiciona novamente os listeners para os botões dentro do modal\r\n         document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-            button.addEventListener('click', (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const companyId = selectedCompanyForAdmin._id;\r\n-                handleRemoveUser(companyId, userId);\r\n-            });\r\n+            button.addEventListener('click', (e) => handleRemoveUser(company._id, e.target.dataset.userId));\r\n         });\r\n-\r\n         document.querySelectorAll('.role-select').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n+            select.addEventListener('change', (e) => {\r\n                 const userId = e.target.dataset.userId;\r\n                 const newRole = e.target.value;\r\n-                const token = localStorage.getItem('authToken');\r\n-                const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-                try {\r\n-                    const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}/role`, {\r\n-                        method: 'PATCH',\r\n-                        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                        body: JSON.stringify({ role: newRole })\r\n-                    });\r\n-\r\n-                    const data = await response.json();\r\n-                    if (!response.ok) throw new Error(data.message);\r\n-                    showToast(data.message, 'success');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                    fetchCompanyDetailsAndOpenModal(companyId);\r\n-                }\r\n+                // Aqui você pode chamar uma função para atualizar o papel do usuário\r\n             });\r\n         });\r\n \r\n+        // Mostra o modal\r\n         companyDetailsModal.classList.remove('hidden');\r\n     }\r\n \r\n     async function handleRemoveUser(companyId, userId) {\r\n"
                },
                {
                    "date": 1752524181906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1904 @@\n+document.addEventListener('DOMContentLoaded', function() {\r\n+    // --- Elementos HTML (Declarações completas) ---\r\n+    const API_BASE_URL = 'http://localhost:5000';\r\n+    const generalLoader = document.getElementById('generalLoader');\r\n+    const loadingScreen = document.getElementById('loadingScreen');\r\n+    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+    const cnpjInput = document.getElementById('cnpjInput');\r\n+    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+    const adminLoginForm = document.getElementById('adminLoginForm');\r\n+    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+    const companyListDiv = document.getElementById('companyList');\r\n+    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+    const userLoginScreen = document.getElementById('userLoginScreen');\r\n+    const userLoginForm = document.getElementById('userLoginForm');\r\n+    const userInput = document.getElementById('userInput');\r\n+    const userPasswordInput = document.getElementById('userPasswordInput');\r\n+    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+    const welcomeUserText = document.getElementById('welcomeUserText');\r\n+    const mainAppContent = document.getElementById('mainAppContent');\r\n+    const toastMessage = document.getElementById('toastMessage');\r\n+    const logoutBtn = document.getElementById('logoutBtn');\r\n+    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+    const addBillModal = document.getElementById('addBillModal');\r\n+    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n+    const modalCompanyName = document.getElementById('modalCompanyName');\r\n+    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+    const addUserBtn = document.getElementById('addUserBtn');\r\n+    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+    const billModal = document.getElementById('billModal');\r\n+    const closeModalBtn = document.getElementById('closeModal');\r\n+    const saveBillBtn = document.getElementById('saveBill');\r\n+    const deleteBillBtn = document.getElementById('deleteBill');\r\n+    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n+    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n+    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n+    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n+    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+    const settingsBtn = document.getElementById('settingsBtn');\r\n+    const settingsDropdown = document.getElementById('settingsDropdown');\r\n+    const menuEmpresa = document.getElementById('menuEmpresa');\r\n+    const menuUsuarios = document.getElementById('menuUsuarios');\r\n+    const menuPermissoes = document.getElementById('menuPermissoes');\r\n+    const permissionsModal = document.getElementById('permissionsModal');\r\n+    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+    const permissionsContainer = document.getElementById('permissionsContainer');\r\n+    const billForm = document.getElementById('billForm');\r\n+    const installmentsPreview = document.getElementById('installmentsPreview');\r\n+    const installmentsList = document.getElementById('installmentsList');\r\n+    const addToOrganizer = document.getElementById('addToOrganizer');\r\n+    const totalBillsSpan = document.getElementById('totalBills');\r\n+    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+    const clearFormBtn = document.getElementById('clearFormBtn');\r\n+    const prevMonthBtn = document.getElementById('prevMonth');\r\n+    const nextMonthBtn = document.getElementById('nextMonth');\r\n+    const companyInfoModal = document.getElementById('companyInfoModal');\r\n+    const closeCompanyInfoModalBtn = document.getElementById('closeCompanyInfoModal');\r\n+    const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+    const addUserModal = document.getElementById('addUserModal');\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n+    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+    const addCompanyModal = document.getElementById('addCompanyModal');\r\n+    const addCompanyForm = document.getElementById('addCompanyForm');\r\n+    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n+    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+    const INACTIVITY_TIMEOUT = 30 * 60 * 1000;\r\n+    const subscriptionModal = document.getElementById('subscriptionModal');\r\n+    const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+\r\n+    // --- Variáveis de Dados e Estado ---\r\n+    let currentLoggedInCompany = null;\r\n+    let currentLoggedInUser = null;\r\n+    let isAdminLoggedIn = false;\r\n+    let loggedInViaAdmin = false;\r\n+    let selectedCompanyForAdmin = null;\r\n+    let currentBill = {};\r\n+    let selectedParcel = null;\r\n+    let userBoletos = [];\r\n+    let currentMonth, currentYear;\r\n+    let currentCompanyDetails = null;\r\n+    let inactivityTimer; // Variável para guardar o nosso cronómetro\r\n+\r\n+\r\n+        // --- LÓGICA DE INATIVIDADE E LOGOUT AUTOMÁTICO ---\r\n+    function logoutDueToInactivity() {\r\n+        // Primeiro, limpamos o cronómetro para não tentar fazer logout de novo\r\n+        clearInactivityTimer(); \r\n+        // Mostramos uma mensagem amigável\r\n+        showToast(\"Você foi desconectado por inatividade.\", \"info\");\r\n+        // Chamamos a função de login, que já limpa tudo\r\n+        showInitialLogin(); \r\n+    }\r\n+\r\n+    // Função que reinicia o cronómetro\r\n+    function resetInactivityTimer() {\r\n+        // Limpa o cronómetro antigo\r\n+        clearTimeout(inactivityTimer);\r\n+        // Cria um novo cronómetro que chamará a função de logout depois de 30 minutos\r\n+        inactivityTimer = setTimeout(logoutDueToInactivity, INACTIVITY_TIMEOUT);\r\n+    }\r\n+\r\n+    // Função para iniciar o monitoramento de inatividade\r\n+    function startInactivityTimer() {\r\n+        // Adiciona \"espiões\" para vários tipos de atividade do usuário.\r\n+        // Qualquer uma destas ações irá reiniciar o cronómetro.\r\n+        window.addEventListener('mousemove', resetInactivityTimer);\r\n+        window.addEventListener('mousedown', resetInactivityTimer);\r\n+        window.addEventListener('keypress', resetInactivityTimer);\r\n+        window.addEventListener('scroll', resetInactivityTimer, true);\r\n+        window.addEventListener('touchstart', resetInactivityTimer);\r\n+        \r\n+        // Inicia o cronómetro pela primeira vez\r\n+        resetInactivityTimer();\r\n+        console.log(\"Monitor de inatividade iniciado. Logout em 30 minutos.\");\r\n+    }\r\n+\r\n+    // Função para parar o monitoramento e limpar tudo\r\n+    function clearInactivityTimer() {\r\n+        clearTimeout(inactivityTimer);\r\n+        // Remove os \"espiões\" para não consumir memória desnecessariamente\r\n+        window.removeEventListener('mousemove', resetInactivityTimer);\r\n+        window.removeEventListener('mousedown', resetInactivityTimer);\r\n+        window.removeEventListener('keypress', resetInactivityTimer);\r\n+        window.removeEventListener('scroll', resetInactivityTimer, true);\r\n+        window.removeEventListener('touchstart', resetInactivityTimer);\r\n+        console.log(\"Monitor de inatividade parado.\");\r\n+    }\r\n+\r\n+\r\n+    // --- Lógica para o Modal de Adicionar Boletos ---\r\n+    openAddBillModalBtn.addEventListener('click', () => {\r\n+        clearBillForm();\r\n+        addBillModal.classList.remove('hidden');\r\n+    });\r\n+    closeAddBillModalBtn.addEventListener('click', () => {\r\n+        addBillModal.classList.add('hidden');\r\n+    });\r\n+    addBillModal.addEventListener('click', (e) => {\r\n+        if (e.target === addBillModal) {\r\n+            addBillModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n+    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n+        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n+        if (!originalBarcode) return;\r\n+        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n+        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n+            try {\r\n+                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n+                    {\r\n+                        format: \"ITF\",\r\n+                        width: 1.5,\r\n+                        height: 80,\r\n+                        displayValue: true,\r\n+                        fontSize: 20,\r\n+                        lineColor: \"#000\",\r\n+                        background: \"#FFF\"\r\n+                    });\r\n+                barcodeFullScreenModal.classList.remove('hidden');\r\n+            }\r\n+            catch (e) {\r\n+                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n+            }\r\n+        }\r\n+        else {\r\n+            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n+        }\r\n+    });\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n+        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // Listener para o item \"Gerenciar Usuários\"\r\n+    menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        // Usamos o ID da empresa logada para buscar os detalhes\r\n+        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+        if (companyId) {\r\n+            // Chama a função para abrir o modal com a lista de usuários\r\n+            fetchCompanyDetailsAndOpenModal(companyId); \r\n+        }\r\n+    });\r\n+\r\n+\r\n+\r\n+// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n+settingsBtn.addEventListener('click', (event) => {\r\n+    event.stopPropagation();\r\n+    settingsDropdown.classList.toggle('hidden');\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (!settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n+\r\n+// Função auxiliar para os links de Empresa e Usuários\r\n+const openManagementModal = (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+    if (companyId) {\r\n+        fetchCompanyDetailsAndOpenModal(companyId);\r\n+    }\r\n+};\r\n+\r\n+// Listener EXCLUSIVO para o link de Permissões\r\n+    menuPermissoes.addEventListener('click', async (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        showLoader();\r\n+        \r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const permissions = await response.json();\r\n+            if (!response.ok) throw new Error(permissions.message);\r\n+\r\n+            // Chamamos a função para preencher o modal com os dados\r\n+            populatePermissionsModal(permissions);\r\n+\r\n+            permissionsModal.classList.remove('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal de permissões\r\n+    closePermissionsModal.addEventListener('click', () => {\r\n+        permissionsModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // Nova função para popular os interruptores com os dados do backend\r\n+    function populatePermissionsModal(permissions) {\r\n+        // Lógica para Gerente\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        // MUDANÇA: Marca o rádio correto com base no valor (none, own, all)\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+        \r\n+        // Lógica para Funcionário\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+    }\r\n+\r\n+// Atualizamos o listener do menu para usar a nova função\r\n+menuPermissoes.addEventListener('click', async (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    \r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n+            headers: { 'Authorization': `Bearer ${token}` }\r\n+        });\r\n+        const permissions = await response.json();\r\n+        if (!response.ok) throw new Error(permissions.message);\r\n+\r\n+        // Chamamos a função para preencher o modal com os dados\r\n+        populatePermissionsModal(permissions);\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+    }\r\n+});\r\n+\r\n+\r\n+    // Adicionamos o listener para o novo botão Salvar\r\n+    document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n+        // Lemos o estado de cada interruptor e rádio\r\n+        const newPermissions = {\r\n+            Gerente: {\r\n+                canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+                // MUDANÇA: Pega o valor do rádio selecionado\r\n+                canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+                canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+            },\r\n+            Funcionário: {\r\n+                canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+                canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+                canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+            }\r\n+        };\r\n+        showLoader()\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n+                method: 'PATCH',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(newPermissions)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast(data.message, 'success');\r\n+            permissionsModal.classList.add('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar permissões: ' + error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal\r\n+    closePermissionsModal.addEventListener('click', () => {\r\n+        permissionsModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n+    function closeQuickAddModal() {\r\n+        quickUserAddModal.classList.add('hidden');\r\n+    }\r\n+    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n+    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n+    quickUserAddForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const username = document.getElementById('quickAddUsername').value;\r\n+        const password = document.getElementById('quickAddPassword').value;\r\n+        if (!currentLoggedInCompany) {\r\n+            showToast('Erro: Empresa não identificada.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            closeQuickAddModal();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    // --- Funções de Utilitário e de Tela ---\r\n+    function showToast(message, type = 'success') {\r\n+        toastMessage.textContent = message;\r\n+        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n+        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n+        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n+        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n+        toastMessage.classList.remove('hidden');\r\n+        setTimeout(() => {\r\n+            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n+            setTimeout(() => {\r\n+                toastMessage.classList.add('hidden');\r\n+                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n+            }, 300);\r\n+        }, 3000);\r\n+    }\r\n+\r\n+    // --- Funções para o Loader Genérico ---\r\n+    function showLoader() {\r\n+        generalLoader.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function hideLoader() {\r\n+        generalLoader.classList.add('hidden');\r\n+    }\r\n+\r\n+    function hideAllScreens() {\r\n+        initialLoginScreen.classList.add('hidden');\r\n+        cnpjLoginScreen.classList.add('hidden');\r\n+        adminLoginScreen.classList.add('hidden');\r\n+        userLoginScreen.classList.add('hidden');\r\n+        adminDashboardScreen.classList.add('hidden');\r\n+        mainAppContent.classList.add('hidden');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        addBillModal.classList.add('hidden');\r\n+        billModal.classList.add('hidden');\r\n+        barcodeFullScreenModal.classList.add('hidden');\r\n+        quickUserAddModal.classList.add('hidden');\r\n+        openAddBillModalBtn.classList.add('hidden');\r\n+    }\r\n+\r\n+    /**\r\n+     * Verifica o status da assinatura da empresa e bloqueia o acesso se necessário.\r\n+     * @param {object} company - O objeto da empresa retornado pela API.\r\n+     * @returns {boolean} - Retorna 'true' se o acesso for permitido, 'false' se for bloqueado.\r\n+     */\r\n+    function checkSubscription(company) {\r\n+        const status = company.subscription?.status; // Usamos 'optional chaining' por segurança\r\n+\r\n+        // Se a assinatura estiver ativa, permite o acesso.\r\n+        if (status === 'active') {\r\n+            return true;\r\n+        }\r\n+\r\n+        // Se a assinatura não estiver ativa, configura e mostra o modal.\r\n+        const title = document.getElementById('subscriptionTitle');\r\n+        const message = document.getElementById('subscriptionMessage');\r\n+        const icon = document.getElementById('subscriptionIcon');\r\n+        const actionBtn = document.getElementById('subscriptionActionBtn');\r\n+\r\n+        if (status === 'inactive' || status === 'trial') {\r\n+            title.textContent = 'Ative sua Assinatura';\r\n+            message.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+            actionBtn.textContent = 'Realizar Assinatura';\r\n+            icon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+        } else { // 'past_due' ou qualquer outro status\r\n+            title.textContent = 'Assinatura Pendente';\r\n+            message.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+            actionBtn.textContent = 'Renovar Assinatura';\r\n+            icon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+        }\r\n+\r\n+        subscriptionModal.classList.remove('hidden');\r\n+        return false; // Bloqueia o acesso ao resto da aplicação\r\n+    }\r\n+\r\n+    subscriptionLogoutBtn.addEventListener('click', () => {\r\n+    showInitialLogin();\r\n+    });\r\n+\r\n+    async function initializeApp() {\r\n+        // 1. Verifica se há um login de empresa pendente vindo da página principal\r\n+        const pendingCompanyLogin = localStorage.getItem('pendingCompanyLogin');\r\n+        if (pendingCompanyLogin) {\r\n+            try {\r\n+                const company = JSON.parse(pendingCompanyLogin);\r\n+                currentLoggedInCompany = company; // Define o estado da empresa\r\n+                \r\n+                // Limpa o item para não ser usado novamente\r\n+                localStorage.removeItem('pendingCompanyLogin'); \r\n+                \r\n+                // Pula diretamente para a tela de login do usuário\r\n+                showUserLogin(company.nomeEmpresa); \r\n+                loadingScreen.classList.add('hidden'); // Esconde o loader inicial\r\n+                return; // Para a execução para não continuar com a verificação de token\r\n+            } catch(e) {\r\n+                // Se houver erro ao ler os dados, limpa e vai para o login normal\r\n+                localStorage.removeItem('pendingCompanyLogin');\r\n+            }\r\n+        }\r\n+\r\n+        // 2. Se não houver login pendente, continua com a verificação normal de sessão\r\n+        const token = localStorage.getItem('authToken');\r\n+\r\n+        if (!token) {\r\n+            showInitialLogin();\r\n+            loadingScreen.classList.add('hidden');\r\n+            return;\r\n+        }\r\n+\r\n+        // 3. Se há um token, tentamos verificar com o backend\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+\r\n+            if (!response.ok) {\r\n+                // Se o token for inválido ou expirado, limpa e vai para o login.\r\n+                localStorage.removeItem('authToken');\r\n+                localStorage.removeItem('superAdminToken');\r\n+                showInitialLogin();\r\n+                return;\r\n+            }\r\n+\r\n+            const data = await response.json();\r\n+            \r\n+            // 4. Com base na resposta, decide para onde ir\r\n+            if (data.user.role === 'SuperAdmin') {\r\n+                isAdminLoggedIn = true;\r\n+                showAdminDashboard();\r\n+            } else {\r\n+                // Para usuários normais, o acesso depende da assinatura da empresa\r\n+                currentLoggedInUser = data.user;\r\n+                currentLoggedInCompany = data.company;\r\n+                isAdminLoggedIn = false;\r\n+\r\n+                const isSubscriptionActive = currentLoggedInCompany.subscription?.status === 'active';\r\n+\r\n+                if (isSubscriptionActive) {\r\n+                    // Se a assinatura estiver ATIVA, todos têm acesso.\r\n+                    showMainApp();\r\n+                } else {\r\n+                    // Se a assinatura NÃO estiver ativa...\r\n+                    if (currentLoggedInUser.role === 'Proprietário') {\r\n+                        // ...e o usuário for o Proprietário, mostra o modal de renovação.\r\n+                        checkSubscription(currentLoggedInCompany);\r\n+                    } else {\r\n+                        // ...e for um Gerente ou Funcionário, mostra o modal de acesso bloqueado.\r\n+                        showAccessBlockedModal();\r\n+                    }\r\n+                }\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            // Em caso de erro de rede, etc., sempre vamos para a tela de login por segurança.\r\n+            showInitialLogin();\r\n+        } finally {\r\n+            // Garante que a tela de carregamento da sessão seja escondida, não importa o resultado.\r\n+            loadingScreen.classList.add('hidden');\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Verifica o status da assinatura e mostra o modal apropriado para o Proprietário.\r\n+     * @param {object} company - O objeto da empresa retornado pela API.\r\n+     */\r\n+    function checkSubscription(company) {\r\n+        const status = company.subscription?.status;\r\n+\r\n+        // Se a assinatura estiver ativa, não faz nada e permite o acesso.\r\n+        if (status === 'active') {\r\n+            return true;\r\n+        }\r\n+\r\n+        // Se não estiver ativa, configura e mostra o modal de assinatura.\r\n+        const title = document.getElementById('subscriptionTitle');\r\n+        const message = document.getElementById('subscriptionMessage');\r\n+        const icon = document.getElementById('subscriptionIcon');\r\n+        const actionBtn = document.getElementById('subscriptionActionBtn');\r\n+\r\n+        if (status === 'inactive' || status === 'trial') {\r\n+            title.textContent = 'Ative sua Assinatura';\r\n+            message.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+            actionBtn.textContent = 'Realizar Assinatura';\r\n+            icon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+        } else { // 'past_due' ou qualquer outro status\r\n+            title.textContent = 'Assinatura Pendente';\r\n+            message.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+            actionBtn.textContent = 'Renovar Assinatura';\r\n+            icon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+        }\r\n+\r\n+        subscriptionModal.classList.remove('hidden');\r\n+        return false; // Retorna false para indicar que o acesso está bloqueado.\r\n+    }\r\n+\r\n+    function showAccessBlockedModal() {\r\n+        const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+        const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+        \r\n+        hideAllScreens();\r\n+        \r\n+        accessBlockedModal.classList.remove('hidden');\r\n+        \r\n+        // Adiciona um listener para o botão de sair deste modal\r\n+        if(blockedAccessLogoutBtn) {\r\n+            blockedAccessLogoutBtn.addEventListener('click', showInitialLogin);\r\n+        }\r\n+    }\r\n+\r\n+    function showInitialLogin() {\r\n+        clearInactivityTimer();\r\n+        hideAllScreens();\r\n+        loadingScreen.classList.add('hidden');\r\n+        initialLoginScreen.classList.remove('hidden');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        currentLoggedInCompany = null;\r\n+        currentLoggedInUser = null;\r\n+        isAdminLoggedIn = false;\r\n+        loggedInViaAdmin = false;\r\n+    }\r\n+\r\n+    function showCnpjLogin() {\r\n+        hideAllScreens();\r\n+        cnpjLoginForm.reset();\r\n+        cnpjLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showAdminLogin() {\r\n+        hideAllScreens();\r\n+        adminLoginForm.reset();\r\n+        adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showUserLogin(companyName) {\r\n+        hideAllScreens();\r\n+        userLoginForm.reset();\r\n+        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+        userLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showMainApp() {\r\n+        hideAllScreens();\r\n+        mainAppContent.classList.remove('hidden');\r\n+\r\n+        if (currentLoggedInUser && currentLoggedInUser.username) {\r\n+            document.getElementById('loggedInUserDisplay').textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+        }\r\n+\r\n+        if (loggedInViaAdmin) {\r\n+            backToAdminBtn.classList.remove('hidden');\r\n+        } else {\r\n+            backToAdminBtn.classList.add('hidden');\r\n+        }\r\n+        \r\n+        if (!isAdminLoggedIn && currentLoggedInUser.role === 'Proprietário') {\r\n+            settingsMenuContainer.classList.remove('hidden');\r\n+        } else {\r\n+            settingsMenuContainer.classList.add('hidden');\r\n+        }\r\n+\r\n+        openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+        updateBillsOrganizer();\r\n+        startInactivityTimer();\r\n+    }\r\n+\r\n+    function showAdminDashboard() {\r\n+        hideAllScreens();\r\n+        adminDashboardScreen.classList.remove('hidden');\r\n+        renderCompanyList();\r\n+        tartInactivityTimer();\r\n+    }\r\n+\r\n+    function formatCnpj(value) {\r\n+        value = value.replace(/\\D/g, '');\r\n+        if (value.length > 14) value = value.slice(0, 14);\r\n+        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n+        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n+        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n+        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n+        return value;\r\n+    }\r\n+    // --- Lógica de Navegação do Calendário ---\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth--;\r\n+        if (currentMonth < 0) {\r\n+            currentMonth = 11;\r\n+            currentYear--;\r\n+        }\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth++;\r\n+        if (currentMonth > 11) {\r\n+            currentMonth = 0;\r\n+            currentYear++;\r\n+        }\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+    // --- Lógica de Autenticação e Outras Funções ---\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const cnpj = cnpjInput.value;\r\n+        const password = cnpjPasswordInput.value;\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/login/company`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            cnpj,\r\n+                            password\r\n+                        }),\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInCompany = data.company;\r\n+            loggedInViaAdmin = false;\r\n+            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    adminLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const username = adminUsernameInput.value;\r\n+        const password = adminPasswordInput.value;\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/login/admin`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            localStorage.setItem('authToken', data.token);\r\n+            isAdminLoggedIn = true;\r\n+            showToast('Login de Administrador bem-sucedido!', 'success');\r\n+            showAdminDashboard();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+    userLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const username = userInput.value;\r\n+        const password = userPasswordInput.value;\r\n+        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n+            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/login/user`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInUser = data.user;\r\n+            showMainApp();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    });\r\n+    backToAdminBtn.addEventListener('click', () => {\r\n+        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n+\r\n+        // 1. Recuperamos o token original do admin que guardámos\r\n+        const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+        if (!adminToken) {\r\n+            showToast(\"Erro: Token de administrador não encontrado. Faça o login novamente.\", \"error\");\r\n+            showInitialLogin();\r\n+            return;\r\n+        }\r\n+\r\n+        // 2. Restauramos o token do admin como o token ativo\r\n+        localStorage.setItem('authToken', adminToken);\r\n+        localStorage.removeItem('superAdminToken'); // Limpamos o token temporário\r\n+\r\n+        // 3. Resetamos o estado da aplicação e mostramos o painel\r\n+        currentLoggedInUser = null;\r\n+        currentLoggedInCompany = null;\r\n+        loggedInViaAdmin = false;\r\n+        isAdminLoggedIn = true;\r\n+        showAdminDashboard();\r\n+    });\r\n+\r\n+    async function renderCompanyList() {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) return;\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies`, {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n+\r\n+            const companies = await response.json();\r\n+            companyListDiv.innerHTML = '';\r\n+\r\n+            if (companies.length === 0) {\r\n+                noCompaniesMessage.classList.remove('hidden');\r\n+            } else {\r\n+                noCompaniesMessage.classList.add('hidden');\r\n+                companies.forEach(company => {\r\n+                    const companyCard = document.createElement('div');\r\n+                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                    \r\n+                    // MUDANÇA: A API agora não retorna a contagem de usuários diretamente na lista.\r\n+                    // Podemos mostrar esta informação de outra forma ou remover por enquanto para simplificar.\r\n+                    companyCard.innerHTML = `\r\n+                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                        </div>\r\n+                    `;\r\n+                    companyListDiv.appendChild(companyCard);\r\n+                });\r\n+\r\n+                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n+                    button.addEventListener('click', async (e) => {\r\n+                        const companyId = e.target.dataset.companyId;\r\n+                        const token = localStorage.getItem('authToken');\r\n+                        try {\r\n+                            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                                headers: {\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                }\r\n+                            });\r\n+                            \r\n+                            // MUDANÇA: A resposta agora é desestruturada em 'company' e 'users'.\r\n+                            const { company, users } = await response.json();\r\n+                            \r\n+                            if (!response.ok) throw new Error(company.message); // Usa a mensagem de erro do objeto company\r\n+                            \r\n+                            // MUDANÇA: Passamos os dois objetos para a função do modal.\r\n+                            openCompanyDetailsModal(company, users);\r\n+\r\n+                        } catch (error) {\r\n+                            showToast(error.message, 'error');\r\n+                        }\r\n+                    });\r\n+                });\r\n+\r\n+                // O listener do 'enter-company-btn' precisa ser atualizado também para funcionar com a nova lógica\r\n+                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+                    button.addEventListener('click', async (e) => {\r\n+                        const companyId = e.target.dataset.companyId;\r\n+                        const token = localStorage.getItem('authToken');\r\n+                        try {\r\n+                            // Precisamos buscar os usuários da empresa para poder entrar como o primeiro\r\n+                            const companyDetailsResponse = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                                headers: { 'Authorization': `Bearer ${token}` }\r\n+                            });\r\n+                            const { company, users } = await companyDetailsResponse.json();\r\n+\r\n+                            if (!companyDetailsResponse.ok) throw new Error(company.message);\r\n+                            \r\n+                            if (users.length === 0) {\r\n+                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n+                                return;\r\n+                            }\r\n+\r\n+                            // Entramos como o primeiro usuário da lista\r\n+                            const userId = users[0]._id; \r\n+                            \r\n+                            const impersonateResponse = await fetch(`${API_BASE_URL}/api/admin/impersonate`, {\r\n+                                method: 'POST',\r\n+                                headers: {\r\n+                                    'Content-Type': 'application/json',\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                },\r\n+                                body: JSON.stringify({ companyId, userId })\r\n+                            });\r\n+                            const data = await impersonateResponse.json();\r\n+                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n+                            \r\n+                            showToast(`Entrando na empresa ${company.nomeEmpresa}...`, 'success');\r\n+                            localStorage.setItem('superAdminToken', token);\r\n+                            localStorage.setItem('authToken', data.token);\r\n+                            currentLoggedInCompany = company;\r\n+                            currentLoggedInUser = data.user;\r\n+                            loggedInViaAdmin = true;\r\n+                            showMainApp();\r\n+                        } catch (error) {\r\n+                            showToast(error.message, 'error');\r\n+                        }\r\n+                    });\r\n+                });\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    }\r\n+\r\n+    createCompanyBtn.addEventListener('click', () => {\r\n+        openAddCompanyModal();\r\n+    });\r\n+\r\n+    // --- Lógica Principal do App de Boletos ---\r\n+    function initializeCalendarDate() {\r\n+        const today = new Date();\r\n+        currentMonth = today.getMonth();\r\n+        currentYear = today.getFullYear();\r\n+        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n+    }\r\n+\r\n+    async function updateBillsOrganizer() {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n+            showInitialLogin(); // Redireciona para o login se não houver token\r\n+            return;\r\n+        }\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos`, {\r\n+                method: 'GET',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) {\r\n+                const errorData = await response.json();\r\n+                throw new Error(errorData.message || \"Erro ao buscar boletos.\");\r\n+            }\r\n+            \r\n+            // A resposta da nova API já vem no formato de uma lista de boletos,\r\n+            // com os dados do usuário \"populados\".\r\n+            userBoletos = await response.json();\r\n+            \r\n+            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+            totalBillsSpan.textContent = totalParcels;\r\n+\r\n+            // As funções de renderização e resumo são chamadas como antes.\r\n+            updateMonthlySummary();\r\n+            \r\n+            // A lógica para alternar entre calendário e lista diária continua a mesma.\r\n+            if (window.innerWidth >= 1024) {\r\n+                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n+                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n+                renderCalendar();\r\n+            } else {\r\n+                document.getElementById('billsOrganizer').classList.add('hidden');\r\n+                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n+                renderDailyBills();\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Se a busca falhar (ex: token expirado), deslogamos o usuário\r\n+            showInitialLogin();\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    }\r\n+\r\n+    function updateMonthlySummary() {\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+            });\r\n+        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalNaoPago = totalMes - totalPago;\r\n+        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return dueDate < today && !parcel.paid;\r\n+            });\r\n+        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n+            {\r\n+                style: 'currency',\r\n+                currency: 'BRL'\r\n+            });\r\n+        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n+        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n+    }\r\n+\r\n+    function renderCalendar() {\r\n+        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+        const calendarDays = document.getElementById('calendarDays');\r\n+        calendarDays.innerHTML = '';\r\n+        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+        for (let i = 0; i < firstDayOfMonth; i++) {\r\n+            const emptyCell = document.createElement('div');\r\n+            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n+            calendarDays.appendChild(emptyCell);\r\n+        }\r\n+        for (let day = 1; day <= daysInMonth; day++) {\r\n+            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+            const dayCell = document.createElement('div');\r\n+            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n+            dayCell.dataset.date = dateStr;\r\n+            const dayHeader = document.createElement('div');\r\n+            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+            dayHeader.textContent = day;\r\n+            dayCell.appendChild(dayHeader);\r\n+            dayCell.addEventListener('click', (e) => {\r\n+                if (e.target.closest('.bill-card')) return;\r\n+                const clickedDate = e.currentTarget.dataset.date;\r\n+                clearBillForm();\r\n+                document.getElementById('dueDate').value = clickedDate;\r\n+                addBillModal.classList.remove('hidden');\r\n+            });\r\n+            userBoletos.forEach(bill => {\r\n+                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                    const parcelElement = document.createElement('div');\r\n+                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n+                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                    dayCell.appendChild(parcelElement);\r\n+                });\r\n+            });\r\n+            calendarDays.appendChild(dayCell);\r\n+        }\r\n+    }\r\n+\r\n+    function renderDailyBills() {\r\n+        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n+    }\r\n+\r\n+    function clearBillForm() {\r\n+        billForm.reset();\r\n+        installmentsPreview.classList.add('hidden');\r\n+        installmentsList.innerHTML = '';\r\n+        currentBill = {};\r\n+    }\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    billForm.addEventListener('submit', function (e) {\r\n+        e.preventDefault();\r\n+        const billName = document.getElementById('billName').value;\r\n+        const dueDate = document.getElementById('dueDate').value;\r\n+        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n+        const installments = parseInt(document.getElementById('installments').value);\r\n+        const description = document.getElementById('description').value;\r\n+        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+        const barcode = document.getElementById('barcode').value;\r\n+        if (!billName || !dueDate || !totalAmount || !installments) {\r\n+            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+            return;\r\n+        }\r\n+        currentBill = {\r\n+            name: billName,\r\n+            parcels: []\r\n+        };\r\n+        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+        installmentsList.innerHTML = '';\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        currentBill.parcels.push({\r\n+            id: `${Date.now()}-${i}`,\r\n+            number: i + 1,\r\n+            amount: parcelAmount,\r\n+            dueDate: dateForInput,\r\n+            paid: false,\r\n+            description: description,\r\n+            barcode: barcode\r\n+        });\r\n+\r\n+        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n+            day: '2-digit',\r\n+            month: '2-digit',\r\n+            year: 'numeric'\r\n+        });\r\n+        \r\n+        const parcelItem = document.createElement('div');\r\n+        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n+        \r\n+        parcelItem.innerHTML = `\r\n+            <div class=\"flex items-center space-x-4\">\r\n+                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n+                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n+            </div>\r\n+            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n+        `;\r\n+        \r\n+        installmentsList.appendChild(parcelItem);\r\n+    }\r\n+        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+            input.addEventListener('input', (e) => {\r\n+                const index = parseInt(e.target.dataset.parcelIndex);\r\n+                const newAmount = parseFloat(e.target.value) || 0;\r\n+                if (!isNaN(newAmount)) {\r\n+                    currentBill.parcels[index].amount = newAmount;\r\n+                    updatePreviewTotal();\r\n+                }\r\n+            });\r\n+            input.addEventListener('blur', (e) => {\r\n+                const newAmount = parseFloat(e.target.value) || 0;\r\n+                e.target.value = newAmount.toFixed(2);\r\n+            });\r\n+        });\r\n+        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+            input.addEventListener('change', (e) => {\r\n+                const index = parseInt(e.target.dataset.parcelIndex);\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            });\r\n+        });\r\n+        installmentsPreview.classList.remove('hidden');\r\n+        updatePreviewTotal();\r\n+    });\r\n+\r\n+    function updatePreviewTotal() {\r\n+        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n+        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+    }\r\n+    addToOrganizer.addEventListener('click', async function () {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        if (!currentBill || !currentBill.name) {\r\n+            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n+            return;\r\n+        }\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(currentBill)\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n+            showToast(data.message, 'success');\r\n+            addBillModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    // --- Lógica do Modal de Edição de Boletos ---\r\n+    function openBillModal(bill, parcel) {\r\n+        // MUDANÇA: Usamos bill._id para o parentId e o parcel já terá o seu próprio _id.\r\n+        selectedParcel = { ...parcel, parentId: bill._id };\r\n+        \r\n+        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n+        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n+        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n+        modalBillBarcodeInput.value = parcel.barcode || '';\r\n+        modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n+            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n+        } else {\r\n+            showFullScreenBarcodeBtn.classList.add('hidden');\r\n+        }\r\n+        billModal.classList.remove('hidden');\r\n+    }\r\n+\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    billModal.addEventListener('click', (e) => {\r\n+        if (e.target === billModal) billModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    saveBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n+        const updatedData = {\r\n+            paid: document.getElementById('modalBillPaid').checked,\r\n+            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n+            dueDate: document.getElementById('modalBillDate').value,\r\n+            description: document.getElementById('modalBillDescription').value,\r\n+            barcode: document.getElementById('modalBillBarcode').value\r\n+        };\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            const response = await fetch(url, { // Usamos a nova URL\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify(updatedData)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Parcela atualizada com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    deleteBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel) return;\r\n+        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        \r\n+        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n+        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n+\r\n+        try {\r\n+            const response = await fetch(url, { // Usamos a nova URL\r\n+                method: 'DELETE',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Parcela excluída com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    deleteEntireBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel || !selectedParcel.parentId) {\r\n+            showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n+            return;\r\n+        }\r\n+        \r\n+        if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n+            return;\r\n+        }\r\n+        \r\n+        const token = localStorage.getItem('authToken');\r\n+        // MUDANÇA: O ID do boleto vem de selectedParcel.parentId, que agora já é o _id correto.\r\n+        const boletoId = selectedParcel.parentId; \r\n+        \r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos/${boletoId}`, {\r\n+                method: 'DELETE',\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            \r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast('Boleto completo excluído com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+            \r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n+        const token = localStorage.getItem('authToken');\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+            \r\n+            // A resposta da API é um objeto { company, users }\r\n+            const data = await response.json(); \r\n+\r\n+            if (!response.ok) {\r\n+                // A mensagem de erro pode estar em 'data.message'\r\n+                throw new Error(data.message || 'Não foi possível buscar os detalhes da empresa.');\r\n+            }\r\n+\r\n+            // MUDANÇA CRÍTICA: Em vez de passar o objeto 'data' inteiro,\r\n+            // passamos as suas propriedades 'company' e 'users' corretamente.\r\n+            openCompanyDetailsModal(data.company, data.users);\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    }\r\n+\r\n+    // --- Lógica do Modal de Detalhes da Empresa ---\r\n+    function openCompanyDetailsModal(company, users) {\r\n+        // Guarda a referência da empresa selecionada\r\n+        selectedCompanyForAdmin = company;\r\n+\r\n+        // Preenche os campos de input e texto\r\n+        document.getElementById('modalCompanyNameInput').value = company.nomeEmpresa;\r\n+        modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n+        modalCompanyPasswordInput.value = ''; // Limpa o campo de senha por segurança\r\n+        modalCompanyUsers.innerHTML = '';\r\n+        \r\n+        // Renderiza a lista de usuários\r\n+        if (users && users.length > 0) {\r\n+            const assignableRoles = isAdminLoggedIn ?\r\n+                ['Proprietário', 'Gerente', 'Funcionário'] :\r\n+                ['Gerente', 'Funcionário'];\r\n+\r\n+            users.forEach(user => {\r\n+                const userItem = document.createElement('div');\r\n+                userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n+                const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n+                let roleDisplay = '';\r\n+\r\n+                if (isEditable) {\r\n+                    const optionsHTML = assignableRoles.map(role => {\r\n+                        if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n+                        return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n+                    }).join('');\r\n+                    roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n+                } else {\r\n+                    roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n+                }\r\n+\r\n+                userItem.innerHTML = `\r\n+                    <div class=\"flex items-center space-x-3\">\r\n+                        <span class=\"text-white\">${user.username}</span>\r\n+                        ${roleDisplay}\r\n+                    </div>\r\n+                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                `;\r\n+                modalCompanyUsers.appendChild(userItem);\r\n+            });\r\n+        } else {\r\n+            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+        }\r\n+\r\n+        // --- LÓGICA PARA PREENCHER DADOS DA ASSINATURA ---\r\n+        const subStatusEl = document.getElementById('subscriptionStatus');\r\n+        const subEndDateEl = document.getElementById('subscriptionEndDate');\r\n+\r\n+        if (company.subscription && company.subscription.status) {\r\n+            let statusText = '';\r\n+            let statusColorClass = '';\r\n+\r\n+            switch (company.subscription.status) {\r\n+                case 'active':\r\n+                    statusText = 'Ativa';\r\n+                    statusColorClass = 'text-green-400';\r\n+                    break;\r\n+                case 'inactive':\r\n+                    statusText = 'Inativa';\r\n+                    statusColorClass = 'text-red-400';\r\n+                    break;\r\n+                case 'past_due':\r\n+                    statusText = 'Vencida';\r\n+                    statusColorClass = 'text-orange-400';\r\n+                    break;\r\n+                case 'trial':\r\n+                    statusText = 'Período de Teste';\r\n+                    statusColorClass = 'text-blue-400';\r\n+                    break;\r\n+                default:\r\n+                    statusText = 'Desconhecido';\r\n+                    statusColorClass = 'text-gray-400';\r\n+            }\r\n+            subStatusEl.textContent = statusText;\r\n+            subStatusEl.className = `ml-2 font-bold ${statusColorClass}`;\r\n+\r\n+            if (company.subscription.endDate) {\r\n+                subEndDateEl.textContent = new Date(company.subscription.endDate).toLocaleDateString('pt-BR', {\r\n+                    day: '2-digit', month: '2-digit', year: 'numeric'\r\n+                });\r\n+            } else {\r\n+                subEndDateEl.textContent = 'N/A';\r\n+            }\r\n+        } else {\r\n+            subStatusEl.textContent = 'Não configurada';\r\n+            subEndDateEl.textContent = 'N/A';\r\n+            subStatusEl.className = 'ml-2 font-bold text-gray-400';\r\n+        }\r\n+        \r\n+        // Adiciona novamente os listeners para os botões dentro do modal\r\n+        document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+            button.addEventListener('click', (e) => handleRemoveUser(company._id, e.target.dataset.userId));\r\n+        });\r\n+        document.querySelectorAll('.role-select').forEach(select => {\r\n+            select.addEventListener('change', (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                // Aqui você pode chamar uma função para atualizar o papel do usuário\r\n+            });\r\n+        });\r\n+\r\n+        // Mostra o modal\r\n+        companyDetailsModal.classList.remove('hidden');\r\n+    }\r\n+\r\n+    async function handleRemoveUser(companyId, userId) {\r\n+        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    addUserBtn.addEventListener('click', () => {\r\n+        openAddUserModal();\r\n+    });\r\n+\r\n+    deleteCompanyBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n+            return;\r\n+        }\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+\r\n+        const token = localStorage.getItem('authToken');\r\n+        const updatedData = {}; // Objeto vazio para guardar apenas o que mudou\r\n+\r\n+        // Pegamos os valores dos campos\r\n+        const newName = document.getElementById('modalCompanyNameInput').value;\r\n+        const newPassword = modalCompanyPasswordInput.value;\r\n+\r\n+        // MUDANÇA: Verificamos se o nome foi alterado e adicionamo-lo ao payload\r\n+        if (newName && newName.trim() !== '' && newName.trim() !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+            updatedData.nomeEmpresa = newName.trim();\r\n+        }\r\n+\r\n+        // A lógica da senha continua, mas agora também é adicionada ao mesmo payload\r\n+        if (newPassword && newPassword.length > 0) {\r\n+            updatedData.newPassword = newPassword;\r\n+        }\r\n+\r\n+        // Se nada foi alterado, informamos o usuário e paramos\r\n+        if (Object.keys(updatedData).length === 0) {\r\n+            showToast(\"Nenhuma alteração para salvar.\", \"info\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`, {\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify(updatedData) // Enviamos o objeto com as alterações\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList(); // Atualizamos a lista de empresas para refletir o novo nome\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    companyDetailsModal.addEventListener('click', (e) => {\r\n+        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n+    });\r\n+    // --- Inicialização ---\r\n+    initializeCalendarDate();\r\n+    initializeApp();\r\n+\r\n+    // Função para abrir e preencher o modal\r\n+    async function openCompanyInfoModal() {\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${currentLoggedInCompany._id}`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            currentCompanyDetails = data.company;\r\n+            document.getElementById('companyInfoCnpj').textContent = formatCnpj(currentCompanyDetails.cnpj);\r\n+            document.getElementById('companyInfoName').value = currentCompanyDetails.nomeEmpresa;\r\n+            document.getElementById('companyInfoEmail').value = currentCompanyDetails.email || '';\r\n+            document.getElementById('companyInfoTelefone').value = currentCompanyDetails.telefoneFixo || '';\r\n+            document.getElementById('companyInfoWhatsapp').value = currentCompanyDetails.telefoneWhatsapp || '';\r\n+\r\n+            // MUDANÇA: Aplicamos as máscaras AQUI, depois de o modal estar preenchido e prestes a ser exibido.\r\n+            const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n+            if (telefoneFixoInput) {\r\n+                IMask(telefoneFixoInput, { mask: '(00) 0000-0000' });\r\n+            }\r\n+            const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n+            if (whatsappInput) {\r\n+                IMask(whatsappInput, { mask: '(00) 00000-0000' });\r\n+            }\r\n+\r\n+            companyInfoModal.classList.remove('hidden');\r\n+\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    // Listener para o link do menu \"Detalhes da Empresa\"\r\n+    menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        // Chama a função para abrir o modal com as informações da empresa\r\n+        openCompanyInfoModal(); \r\n+    });\r\n+\r\n+    // Listener para o botão de salvar\r\n+    saveCompanyInfoBtn.addEventListener('click', async () => {\r\n+        const payload = {\r\n+            nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+            \r\n+            // MUDANÇA: Adicionamos o e-mail ao payload que será enviado para a API\r\n+            email: document.getElementById('companyInfoEmail').value,\r\n+\r\n+            telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+            telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+        };\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${currentCompanyDetails._id}`, {\r\n+                method: 'PATCH',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast(data.message, 'success');\r\n+            companyInfoModal.classList.add('hidden');\r\n+\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal\r\n+    closeCompanyInfoModalBtn.addEventListener('click', () => {\r\n+        companyInfoModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // --- LÓGICA PARA MÁSCARAS DE INPUT (IMask.js) ---\r\n+\r\n+    document.addEventListener('DOMContentLoaded', () => {\r\n+        // Máscara para o campo de CNPJ no modal de login da empresa (ESTA FICA)\r\n+        const cnpjInput = document.getElementById('cnpjInput');\r\n+        if (cnpjInput) {\r\n+            const cnpjMask = IMask(cnpjInput, {\r\n+                mask: '00.000.000/0000-00'\r\n+            });\r\n+        }\r\n+        \r\n+        // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n+        const totalAmountInput = document.getElementById('totalAmount');\r\n+        if (totalAmountInput) {\r\n+            const amountMask = IMask(totalAmountInput, {\r\n+                mask: 'R$ num',\r\n+                blocks: {\r\n+                    num: {\r\n+                        mask: Number,\r\n+                        scale: 2,\r\n+                        radix: ',',\r\n+                        thousandsSeparator: '.',\r\n+                        padFractionalZeros: true\r\n+                    }\r\n+                }\r\n+            });\r\n+        }\r\n+\r\n+        // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n+        const modalAmountInput = document.getElementById('modalBillAmount');\r\n+        if (modalAmountInput) {\r\n+            const modalAmountMask = IMask(modalAmountInput, {\r\n+                mask: 'R$ num',\r\n+                blocks: {\r\n+                    num: {\r\n+                        mask: Number,\r\n+                        scale: 2,\r\n+                        radix: ',',\r\n+                        thousandsSeparator: '.',\r\n+                        padFractionalZeros: true\r\n+                    }\r\n+                }\r\n+            });\r\n+        }\r\n+    });\r\n+\r\n+    // Listerner para botão de adição de assinatura\r\n+    document.getElementById('addSubscriptionBtn').addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) {\r\n+            showToast('Nenhuma empresa selecionada.', 'error');\r\n+            return;\r\n+        }\r\n+\r\n+        const daysToAddInput = document.getElementById('daysToAddInput');\r\n+        const daysToAdd = daysToAddInput.value;\r\n+        if (!daysToAdd || parseInt(daysToAdd, 10) <= 0) {\r\n+            showToast('Por favor, insira um número de dias válido.', 'error');\r\n+            return;\r\n+        }\r\n+\r\n+        const companyId = selectedCompanyForAdmin._id;\r\n+        const token = localStorage.getItem('authToken');\r\n+        \r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/subscription`, {\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify({ daysToAdd: daysToAdd })\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) {\r\n+                throw new Error(data.message);\r\n+            }\r\n+\r\n+            showToast(data.message, 'success');\r\n+            \r\n+            // Limpa o input\r\n+            daysToAddInput.value = '';\r\n+\r\n+            // Atualiza a UI do modal com os novos dados da empresa retornados pela API\r\n+            openCompanyDetailsModal(data.company, data.users);\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para o novo botão de remover assinatura\r\n+    document.getElementById('removeSubscriptionBtn').addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) {\r\n+            showToast('Nenhuma empresa selecionada.', 'error');\r\n+            return;\r\n+        }\r\n+\r\n+        // Pede uma confirmação para evitar cliques acidentais\r\n+        if (!confirm(`Tem certeza que deseja REMOVER a assinatura da empresa \"${selectedCompanyForAdmin.nomeEmpresa}\"? A empresa voltará ao status \"Inativa\".`)) {\r\n+            return;\r\n+        }\r\n+\r\n+        const companyId = selectedCompanyForAdmin._id;\r\n+        const token = localStorage.getItem('authToken');\r\n+        \r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/subscription`, {\r\n+                method: 'DELETE', // Usamos o método DELETE para chamar a nova rota\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) {\r\n+                throw new Error(data.message);\r\n+            }\r\n+\r\n+            showToast(data.message, 'success');\r\n+            \r\n+            // Atualiza a UI do modal com os novos dados da empresa retornados pela API\r\n+            openCompanyDetailsModal(data.company, data.users);\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    });\r\n+\r\n+    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR USUÁRIO ---\r\n+\r\n+    // Função para abrir o modal\r\n+    function openAddUserModal() {\r\n+        addUserForm.reset(); // Limpa o formulário\r\n+        addUserModal.classList.remove('hidden');\r\n+        document.getElementById('addUsernameInput').focus();\r\n+    }\r\n+\r\n+    // Função para fechar o modal\r\n+    function closeAddUserModal() {\r\n+        addUserModal.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Listeners para fechar/cancelar\r\n+    closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+\r\n+    // Listener para o envio do formulário\r\n+    addUserForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault(); // Impede o recarregamento da página\r\n+\r\n+        const username = document.getElementById('addUsernameInput').value;\r\n+        const password = document.getElementById('addUserPasswordInput').value;\r\n+        const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+\r\n+        // Validação de senha\r\n+        if (password !== confirmPassword) {\r\n+            showToast(\"As senhas não coincidem.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        // Identifica a empresa atual (seja via admin ou login normal)\r\n+        const companyId = selectedCompanyForAdmin ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n+        if (!companyId) {\r\n+            showToast(\"Erro: Não foi possível identificar a empresa.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`, {\r\n+                method: 'POST',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify({ username, password, companyId })\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+\r\n+            showToast(data.message, 'success');\r\n+            closeAddUserModal();\r\n+\r\n+            // Atualiza a lista de usuários na tela que estiver aberta\r\n+            if (adminDashboardScreen.classList.contains('hidden')) {\r\n+                // Se estiver no modal de \"Gerenciar Usuários\" do proprietário\r\n+                fetchCompanyDetailsAndOpenModal(companyId, true); // O 'true' indica que é uma atualização\r\n+            } else {\r\n+                // Se estiver no painel do admin\r\n+                renderCompanyList();\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR EMPRESA ---\r\n+\r\n+    // Aplica a máscara de CNPJ ao novo campo\r\n+    const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+    if (addCompanyCnpjInput) {\r\n+        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    // Função para abrir o modal\r\n+    function openAddCompanyModal() {\r\n+        addCompanyForm.reset(); // Limpa o formulário\r\n+        addCompanyModal.classList.remove('hidden');\r\n+        document.getElementById('addCompanyNameInput').focus();\r\n+    }\r\n+\r\n+    // Função para fechar o modal\r\n+    function closeAddCompanyModal() {\r\n+        addCompanyModal.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Listeners para fechar/cancelar\r\n+    closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+\r\n+    // Listener para o envio do formulário\r\n+    addCompanyForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const payload = {\r\n+            nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+            cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+            senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+            ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+            ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+        };\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n+            return;\r\n+        }\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/register`, {\r\n+                method: 'POST',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+\r\n+            showToast(data.message, 'success');\r\n+            closeAddCompanyModal();\r\n+            renderCompanyList(); // Atualiza a lista de empresas no painel de admin\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752533181565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,9 @@\n     const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n     const INACTIVITY_TIMEOUT = 30 * 60 * 1000;\r\n     const subscriptionModal = document.getElementById('subscriptionModal');\r\n     const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+    const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n \r\n     // --- Variáveis de Dados e Estado ---\r\n     let currentLoggedInCompany = null;\r\n     let currentLoggedInUser = null;\r\n@@ -673,8 +674,9 @@\n         }\r\n         renderCalendar();\r\n         updateMonthlySummary();\r\n     });\r\n+\r\n     nextMonthBtn.addEventListener('click', () => {\r\n         currentMonth++;\r\n         if (currentMonth > 11) {\r\n             currentMonth = 0;\r\n@@ -682,8 +684,9 @@\n         }\r\n         renderCalendar();\r\n         updateMonthlySummary();\r\n     });\r\n+\r\n     // --- Lógica de Autenticação e Outras Funções ---\r\n     showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n     showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n     backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n@@ -933,8 +936,55 @@\n             hideLoader();\r\n         }\r\n     }\r\n \r\n+    if (subscriptionActionBtn) {\r\n+        subscriptionActionBtn.addEventListener('click', async () => {\r\n+            // Desabilita o botão para evitar múltiplos cliques\r\n+            subscriptionActionBtn.disabled = true;\r\n+            subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> Gerando link de pagamento...';\r\n+\r\n+            try {\r\n+                const token = localStorage.getItem('authToken');\r\n+                if (!token) {\r\n+                    // Se não houver token, o usuário não está logado\r\n+                    showToast('Sessão expirada. Por favor, faça o login novamente.', 'error');\r\n+                    showInitialLogin(); // Redireciona para a tela de login\r\n+                    return;\r\n+                }\r\n+\r\n+                // 1. Chamamos a nossa API para criar a preferência de assinatura\r\n+                const response = await fetch(`${API_BASE_URL}/api/payments/create-subscription`, {\r\n+                    method: 'POST',\r\n+                    headers: {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}` // O token é essencial para autenticação!\r\n+                    }\r\n+                });\r\n+\r\n+                const result = await response.json();\r\n+\r\n+                if (!response.ok) {\r\n+                    // Se a API retornar um erro, nós o mostramos na tela\r\n+                    throw new Error(result.message || 'Falha ao criar o link de assinatura.');\r\n+                }\r\n+\r\n+                // 2. Se tudo deu certo, redirecionamos o usuário para a página de pagamento\r\n+                if (result.init_point) {\r\n+                    window.location.href = result.init_point;\r\n+                } else {\r\n+                    throw new Error('Link de pagamento não recebido.');\r\n+                }\r\n+\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+                // Reabilita o botão em caso de erro para o usuário tentar novamente\r\n+                subscriptionActionBtn.disabled = false;\r\n+                subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n     createCompanyBtn.addEventListener('click', () => {\r\n         openAddCompanyModal();\r\n     });\r\n \r\n@@ -1900,1868 +1950,5 @@\n         }\r\n     });\r\n \r\n \r\n-});\n-document.addEventListener('DOMContentLoaded', function() {\r\n-    // --- Elementos HTML (Declarações completas) ---\r\n-    const API_BASE_URL = 'http://localhost:5000';\r\n-    const generalLoader = document.getElementById('generalLoader');\r\n-    const loadingScreen = document.getElementById('loadingScreen');\r\n-    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-    const cnpjInput = document.getElementById('cnpjInput');\r\n-    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-    const adminLoginForm = document.getElementById('adminLoginForm');\r\n-    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-    const companyListDiv = document.getElementById('companyList');\r\n-    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-    const userLoginScreen = document.getElementById('userLoginScreen');\r\n-    const userLoginForm = document.getElementById('userLoginForm');\r\n-    const userInput = document.getElementById('userInput');\r\n-    const userPasswordInput = document.getElementById('userPasswordInput');\r\n-    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-    const welcomeUserText = document.getElementById('welcomeUserText');\r\n-    const mainAppContent = document.getElementById('mainAppContent');\r\n-    const toastMessage = document.getElementById('toastMessage');\r\n-    const logoutBtn = document.getElementById('logoutBtn');\r\n-    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-    const addBillModal = document.getElementById('addBillModal');\r\n-    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n-    const modalCompanyName = document.getElementById('modalCompanyName');\r\n-    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-    const addUserBtn = document.getElementById('addUserBtn');\r\n-    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-    const billModal = document.getElementById('billModal');\r\n-    const closeModalBtn = document.getElementById('closeModal');\r\n-    const saveBillBtn = document.getElementById('saveBill');\r\n-    const deleteBillBtn = document.getElementById('deleteBill');\r\n-    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n-    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n-    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n-    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n-    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-    const settingsBtn = document.getElementById('settingsBtn');\r\n-    const settingsDropdown = document.getElementById('settingsDropdown');\r\n-    const menuEmpresa = document.getElementById('menuEmpresa');\r\n-    const menuUsuarios = document.getElementById('menuUsuarios');\r\n-    const menuPermissoes = document.getElementById('menuPermissoes');\r\n-    const permissionsModal = document.getElementById('permissionsModal');\r\n-    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-    const permissionsContainer = document.getElementById('permissionsContainer');\r\n-    const billForm = document.getElementById('billForm');\r\n-    const installmentsPreview = document.getElementById('installmentsPreview');\r\n-    const installmentsList = document.getElementById('installmentsList');\r\n-    const addToOrganizer = document.getElementById('addToOrganizer');\r\n-    const totalBillsSpan = document.getElementById('totalBills');\r\n-    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-    const clearFormBtn = document.getElementById('clearFormBtn');\r\n-    const prevMonthBtn = document.getElementById('prevMonth');\r\n-    const nextMonthBtn = document.getElementById('nextMonth');\r\n-    const companyInfoModal = document.getElementById('companyInfoModal');\r\n-    const closeCompanyInfoModalBtn = document.getElementById('closeCompanyInfoModal');\r\n-    const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-    const addUserModal = document.getElementById('addUserModal');\r\n-    const addUserForm = document.getElementById('addUserForm');\r\n-    const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n-    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-    const addCompanyModal = document.getElementById('addCompanyModal');\r\n-    const addCompanyForm = document.getElementById('addCompanyForm');\r\n-    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n-    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-    const INACTIVITY_TIMEOUT = 30 * 60 * 1000;\r\n-    const subscriptionModal = document.getElementById('subscriptionModal');\r\n-    const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-\r\n-    // --- Variáveis de Dados e Estado ---\r\n-    let currentLoggedInCompany = null;\r\n-    let currentLoggedInUser = null;\r\n-    let isAdminLoggedIn = false;\r\n-    let loggedInViaAdmin = false;\r\n-    let selectedCompanyForAdmin = null;\r\n-    let currentBill = {};\r\n-    let selectedParcel = null;\r\n-    let userBoletos = [];\r\n-    let currentMonth, currentYear;\r\n-    let currentCompanyDetails = null;\r\n-    let inactivityTimer; // Variável para guardar o nosso cronómetro\r\n-\r\n-\r\n-        // --- LÓGICA DE INATIVIDADE E LOGOUT AUTOMÁTICO ---\r\n-    function logoutDueToInactivity() {\r\n-        // Primeiro, limpamos o cronómetro para não tentar fazer logout de novo\r\n-        clearInactivityTimer(); \r\n-        // Mostramos uma mensagem amigável\r\n-        showToast(\"Você foi desconectado por inatividade.\", \"info\");\r\n-        // Chamamos a função de login, que já limpa tudo\r\n-        showInitialLogin(); \r\n-    }\r\n-\r\n-    // Função que reinicia o cronómetro\r\n-    function resetInactivityTimer() {\r\n-        // Limpa o cronómetro antigo\r\n-        clearTimeout(inactivityTimer);\r\n-        // Cria um novo cronómetro que chamará a função de logout depois de 30 minutos\r\n-        inactivityTimer = setTimeout(logoutDueToInactivity, INACTIVITY_TIMEOUT);\r\n-    }\r\n-\r\n-    // Função para iniciar o monitoramento de inatividade\r\n-    function startInactivityTimer() {\r\n-        // Adiciona \"espiões\" para vários tipos de atividade do usuário.\r\n-        // Qualquer uma destas ações irá reiniciar o cronómetro.\r\n-        window.addEventListener('mousemove', resetInactivityTimer);\r\n-        window.addEventListener('mousedown', resetInactivityTimer);\r\n-        window.addEventListener('keypress', resetInactivityTimer);\r\n-        window.addEventListener('scroll', resetInactivityTimer, true);\r\n-        window.addEventListener('touchstart', resetInactivityTimer);\r\n-        \r\n-        // Inicia o cronómetro pela primeira vez\r\n-        resetInactivityTimer();\r\n-        console.log(\"Monitor de inatividade iniciado. Logout em 30 minutos.\");\r\n-    }\r\n-\r\n-    // Função para parar o monitoramento e limpar tudo\r\n-    function clearInactivityTimer() {\r\n-        clearTimeout(inactivityTimer);\r\n-        // Remove os \"espiões\" para não consumir memória desnecessariamente\r\n-        window.removeEventListener('mousemove', resetInactivityTimer);\r\n-        window.removeEventListener('mousedown', resetInactivityTimer);\r\n-        window.removeEventListener('keypress', resetInactivityTimer);\r\n-        window.removeEventListener('scroll', resetInactivityTimer, true);\r\n-        window.removeEventListener('touchstart', resetInactivityTimer);\r\n-        console.log(\"Monitor de inatividade parado.\");\r\n-    }\r\n-\r\n-\r\n-    // --- Lógica para o Modal de Adicionar Boletos ---\r\n-    openAddBillModalBtn.addEventListener('click', () => {\r\n-        clearBillForm();\r\n-        addBillModal.classList.remove('hidden');\r\n-    });\r\n-    closeAddBillModalBtn.addEventListener('click', () => {\r\n-        addBillModal.classList.add('hidden');\r\n-    });\r\n-    addBillModal.addEventListener('click', (e) => {\r\n-        if (e.target === addBillModal) {\r\n-            addBillModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n-    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n-        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n-        if (!originalBarcode) return;\r\n-        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n-        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n-            try {\r\n-                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n-                    {\r\n-                        format: \"ITF\",\r\n-                        width: 1.5,\r\n-                        height: 80,\r\n-                        displayValue: true,\r\n-                        fontSize: 20,\r\n-                        lineColor: \"#000\",\r\n-                        background: \"#FFF\"\r\n-                    });\r\n-                barcodeFullScreenModal.classList.remove('hidden');\r\n-            }\r\n-            catch (e) {\r\n-                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n-            }\r\n-        }\r\n-        else {\r\n-            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n-        }\r\n-    });\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n-        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // Listener para o item \"Gerenciar Usuários\"\r\n-    menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        // Usamos o ID da empresa logada para buscar os detalhes\r\n-        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-        if (companyId) {\r\n-            // Chama a função para abrir o modal com a lista de usuários\r\n-            fetchCompanyDetailsAndOpenModal(companyId); \r\n-        }\r\n-    });\r\n-\r\n-\r\n-\r\n-// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n-settingsBtn.addEventListener('click', (event) => {\r\n-    event.stopPropagation();\r\n-    settingsDropdown.classList.toggle('hidden');\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (!settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n-\r\n-// Função auxiliar para os links de Empresa e Usuários\r\n-const openManagementModal = (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-    if (companyId) {\r\n-        fetchCompanyDetailsAndOpenModal(companyId);\r\n-    }\r\n-};\r\n-\r\n-// Listener EXCLUSIVO para o link de Permissões\r\n-    menuPermissoes.addEventListener('click', async (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        showLoader();\r\n-        \r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const permissions = await response.json();\r\n-            if (!response.ok) throw new Error(permissions.message);\r\n-\r\n-            // Chamamos a função para preencher o modal com os dados\r\n-            populatePermissionsModal(permissions);\r\n-\r\n-            permissionsModal.classList.remove('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal de permissões\r\n-    closePermissionsModal.addEventListener('click', () => {\r\n-        permissionsModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // Nova função para popular os interruptores com os dados do backend\r\n-    function populatePermissionsModal(permissions) {\r\n-        // Lógica para Gerente\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        // MUDANÇA: Marca o rádio correto com base no valor (none, own, all)\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-        \r\n-        // Lógica para Funcionário\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-    }\r\n-\r\n-// Atualizamos o listener do menu para usar a nova função\r\n-menuPermissoes.addEventListener('click', async (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    \r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n-            headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n-        const permissions = await response.json();\r\n-        if (!response.ok) throw new Error(permissions.message);\r\n-\r\n-        // Chamamos a função para preencher o modal com os dados\r\n-        populatePermissionsModal(permissions);\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-    }\r\n-});\r\n-\r\n-\r\n-    // Adicionamos o listener para o novo botão Salvar\r\n-    document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n-        // Lemos o estado de cada interruptor e rádio\r\n-        const newPermissions = {\r\n-            Gerente: {\r\n-                canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-                // MUDANÇA: Pega o valor do rádio selecionado\r\n-                canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-                canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-            },\r\n-            Funcionário: {\r\n-                canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-                canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-                canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-            }\r\n-        };\r\n-        showLoader()\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n-                method: 'PATCH',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(newPermissions)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast(data.message, 'success');\r\n-            permissionsModal.classList.add('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao salvar permissões: ' + error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal\r\n-    closePermissionsModal.addEventListener('click', () => {\r\n-        permissionsModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n-    function closeQuickAddModal() {\r\n-        quickUserAddModal.classList.add('hidden');\r\n-    }\r\n-    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n-    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n-    quickUserAddForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const username = document.getElementById('quickAddUsername').value;\r\n-        const password = document.getElementById('quickAddPassword').value;\r\n-        if (!currentLoggedInCompany) {\r\n-            showToast('Erro: Empresa não identificada.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            closeQuickAddModal();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    // --- Funções de Utilitário e de Tela ---\r\n-    function showToast(message, type = 'success') {\r\n-        toastMessage.textContent = message;\r\n-        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n-        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n-        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n-        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n-        toastMessage.classList.remove('hidden');\r\n-        setTimeout(() => {\r\n-            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n-            setTimeout(() => {\r\n-                toastMessage.classList.add('hidden');\r\n-                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n-            }, 300);\r\n-        }, 3000);\r\n-    }\r\n-\r\n-    // --- Funções para o Loader Genérico ---\r\n-    function showLoader() {\r\n-        generalLoader.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function hideLoader() {\r\n-        generalLoader.classList.add('hidden');\r\n-    }\r\n-\r\n-    function hideAllScreens() {\r\n-        initialLoginScreen.classList.add('hidden');\r\n-        cnpjLoginScreen.classList.add('hidden');\r\n-        adminLoginScreen.classList.add('hidden');\r\n-        userLoginScreen.classList.add('hidden');\r\n-        adminDashboardScreen.classList.add('hidden');\r\n-        mainAppContent.classList.add('hidden');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        addBillModal.classList.add('hidden');\r\n-        billModal.classList.add('hidden');\r\n-        barcodeFullScreenModal.classList.add('hidden');\r\n-        quickUserAddModal.classList.add('hidden');\r\n-        openAddBillModalBtn.classList.add('hidden');\r\n-    }\r\n-\r\n-    /**\r\n-     * Verifica o status da assinatura da empresa e bloqueia o acesso se necessário.\r\n-     * @param {object} company - O objeto da empresa retornado pela API.\r\n-     * @returns {boolean} - Retorna 'true' se o acesso for permitido, 'false' se for bloqueado.\r\n-     */\r\n-    function checkSubscription(company) {\r\n-        const status = company.subscription?.status; // Usamos 'optional chaining' por segurança\r\n-\r\n-        // Se a assinatura estiver ativa, permite o acesso.\r\n-        if (status === 'active') {\r\n-            return true;\r\n-        }\r\n-\r\n-        // Se a assinatura não estiver ativa, configura e mostra o modal.\r\n-        const title = document.getElementById('subscriptionTitle');\r\n-        const message = document.getElementById('subscriptionMessage');\r\n-        const icon = document.getElementById('subscriptionIcon');\r\n-        const actionBtn = document.getElementById('subscriptionActionBtn');\r\n-\r\n-        if (status === 'inactive' || status === 'trial') {\r\n-            title.textContent = 'Ative sua Assinatura';\r\n-            message.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-            actionBtn.textContent = 'Realizar Assinatura';\r\n-            icon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-        } else { // 'past_due' ou qualquer outro status\r\n-            title.textContent = 'Assinatura Pendente';\r\n-            message.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-            actionBtn.textContent = 'Renovar Assinatura';\r\n-            icon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-        }\r\n-\r\n-        subscriptionModal.classList.remove('hidden');\r\n-        return false; // Bloqueia o acesso ao resto da aplicação\r\n-    }\r\n-\r\n-    subscriptionLogoutBtn.addEventListener('click', () => {\r\n-    showInitialLogin();\r\n-    });\r\n-\r\n-    async function initializeApp() {\r\n-        // 1. Verifica se há um login de empresa pendente vindo da página principal\r\n-        const pendingCompanyLogin = localStorage.getItem('pendingCompanyLogin');\r\n-        if (pendingCompanyLogin) {\r\n-            try {\r\n-                const company = JSON.parse(pendingCompanyLogin);\r\n-                currentLoggedInCompany = company; // Define o estado da empresa\r\n-                \r\n-                // Limpa o item para não ser usado novamente\r\n-                localStorage.removeItem('pendingCompanyLogin'); \r\n-                \r\n-                // Pula diretamente para a tela de login do usuário\r\n-                showUserLogin(company.nomeEmpresa); \r\n-                loadingScreen.classList.add('hidden'); // Esconde o loader inicial\r\n-                return; // Para a execução para não continuar com a verificação de token\r\n-            } catch(e) {\r\n-                // Se houver erro ao ler os dados, limpa e vai para o login normal\r\n-                localStorage.removeItem('pendingCompanyLogin');\r\n-            }\r\n-        }\r\n-\r\n-        // 2. Se não houver login pendente, continua com a verificação normal de sessão\r\n-        const token = localStorage.getItem('authToken');\r\n-\r\n-        if (!token) {\r\n-            showInitialLogin();\r\n-            loadingScreen.classList.add('hidden');\r\n-            return;\r\n-        }\r\n-\r\n-        // 3. Se há um token, tentamos verificar com o backend\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-\r\n-            if (!response.ok) {\r\n-                // Se o token for inválido ou expirado, limpa e vai para o login.\r\n-                localStorage.removeItem('authToken');\r\n-                localStorage.removeItem('superAdminToken');\r\n-                showInitialLogin();\r\n-                return;\r\n-            }\r\n-\r\n-            const data = await response.json();\r\n-            \r\n-            // 4. Com base na resposta, decide para onde ir\r\n-            if (data.user.role === 'SuperAdmin') {\r\n-                isAdminLoggedIn = true;\r\n-                showAdminDashboard();\r\n-            } else {\r\n-                // Para usuários normais, o acesso depende da assinatura da empresa\r\n-                currentLoggedInUser = data.user;\r\n-                currentLoggedInCompany = data.company;\r\n-                isAdminLoggedIn = false;\r\n-\r\n-                const isSubscriptionActive = currentLoggedInCompany.subscription?.status === 'active';\r\n-\r\n-                if (isSubscriptionActive) {\r\n-                    // Se a assinatura estiver ATIVA, todos têm acesso.\r\n-                    showMainApp();\r\n-                } else {\r\n-                    // Se a assinatura NÃO estiver ativa...\r\n-                    if (currentLoggedInUser.role === 'Proprietário') {\r\n-                        // ...e o usuário for o Proprietário, mostra o modal de renovação.\r\n-                        checkSubscription(currentLoggedInCompany);\r\n-                    } else {\r\n-                        // ...e for um Gerente ou Funcionário, mostra o modal de acesso bloqueado.\r\n-                        showAccessBlockedModal();\r\n-                    }\r\n-                }\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            // Em caso de erro de rede, etc., sempre vamos para a tela de login por segurança.\r\n-            showInitialLogin();\r\n-        } finally {\r\n-            // Garante que a tela de carregamento da sessão seja escondida, não importa o resultado.\r\n-            loadingScreen.classList.add('hidden');\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Verifica o status da assinatura e mostra o modal apropriado para o Proprietário.\r\n-     * @param {object} company - O objeto da empresa retornado pela API.\r\n-     */\r\n-    function checkSubscription(company) {\r\n-        const status = company.subscription?.status;\r\n-\r\n-        // Se a assinatura estiver ativa, não faz nada e permite o acesso.\r\n-        if (status === 'active') {\r\n-            return true;\r\n-        }\r\n-\r\n-        // Se não estiver ativa, configura e mostra o modal de assinatura.\r\n-        const title = document.getElementById('subscriptionTitle');\r\n-        const message = document.getElementById('subscriptionMessage');\r\n-        const icon = document.getElementById('subscriptionIcon');\r\n-        const actionBtn = document.getElementById('subscriptionActionBtn');\r\n-\r\n-        if (status === 'inactive' || status === 'trial') {\r\n-            title.textContent = 'Ative sua Assinatura';\r\n-            message.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-            actionBtn.textContent = 'Realizar Assinatura';\r\n-            icon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-        } else { // 'past_due' ou qualquer outro status\r\n-            title.textContent = 'Assinatura Pendente';\r\n-            message.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-            actionBtn.textContent = 'Renovar Assinatura';\r\n-            icon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-        }\r\n-\r\n-        subscriptionModal.classList.remove('hidden');\r\n-        return false; // Retorna false para indicar que o acesso está bloqueado.\r\n-    }\r\n-\r\n-    function showAccessBlockedModal() {\r\n-        const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-        const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-        \r\n-        hideAllScreens();\r\n-        \r\n-        accessBlockedModal.classList.remove('hidden');\r\n-        \r\n-        // Adiciona um listener para o botão de sair deste modal\r\n-        if(blockedAccessLogoutBtn) {\r\n-            blockedAccessLogoutBtn.addEventListener('click', showInitialLogin);\r\n-        }\r\n-    }\r\n-\r\n-    function showInitialLogin() {\r\n-        clearInactivityTimer();\r\n-        hideAllScreens();\r\n-        loadingScreen.classList.add('hidden');\r\n-        initialLoginScreen.classList.remove('hidden');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        currentLoggedInCompany = null;\r\n-        currentLoggedInUser = null;\r\n-        isAdminLoggedIn = false;\r\n-        loggedInViaAdmin = false;\r\n-    }\r\n-\r\n-    function showCnpjLogin() {\r\n-        hideAllScreens();\r\n-        cnpjLoginForm.reset();\r\n-        cnpjLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showAdminLogin() {\r\n-        hideAllScreens();\r\n-        adminLoginForm.reset();\r\n-        adminLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showUserLogin(companyName) {\r\n-        hideAllScreens();\r\n-        userLoginForm.reset();\r\n-        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-        userLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showMainApp() {\r\n-        hideAllScreens();\r\n-        mainAppContent.classList.remove('hidden');\r\n-\r\n-        if (currentLoggedInUser && currentLoggedInUser.username) {\r\n-            document.getElementById('loggedInUserDisplay').textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-        }\r\n-\r\n-        if (loggedInViaAdmin) {\r\n-            backToAdminBtn.classList.remove('hidden');\r\n-        } else {\r\n-            backToAdminBtn.classList.add('hidden');\r\n-        }\r\n-        \r\n-        if (!isAdminLoggedIn && currentLoggedInUser.role === 'Proprietário') {\r\n-            settingsMenuContainer.classList.remove('hidden');\r\n-        } else {\r\n-            settingsMenuContainer.classList.add('hidden');\r\n-        }\r\n-\r\n-        openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-        updateBillsOrganizer();\r\n-        startInactivityTimer();\r\n-    }\r\n-\r\n-    function showAdminDashboard() {\r\n-        hideAllScreens();\r\n-        adminDashboardScreen.classList.remove('hidden');\r\n-        renderCompanyList();\r\n-        tartInactivityTimer();\r\n-    }\r\n-\r\n-    function formatCnpj(value) {\r\n-        value = value.replace(/\\D/g, '');\r\n-        if (value.length > 14) value = value.slice(0, 14);\r\n-        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n-        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n-        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n-        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n-        return value;\r\n-    }\r\n-    // --- Lógica de Navegação do Calendário ---\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth--;\r\n-        if (currentMonth < 0) {\r\n-            currentMonth = 11;\r\n-            currentYear--;\r\n-        }\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth++;\r\n-        if (currentMonth > 11) {\r\n-            currentMonth = 0;\r\n-            currentYear++;\r\n-        }\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-    // --- Lógica de Autenticação e Outras Funções ---\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const cnpj = cnpjInput.value;\r\n-        const password = cnpjPasswordInput.value;\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/login/company`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            cnpj,\r\n-                            password\r\n-                        }),\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInCompany = data.company;\r\n-            loggedInViaAdmin = false;\r\n-            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    adminLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const username = adminUsernameInput.value;\r\n-        const password = adminPasswordInput.value;\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/login/admin`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            localStorage.setItem('authToken', data.token);\r\n-            isAdminLoggedIn = true;\r\n-            showToast('Login de Administrador bem-sucedido!', 'success');\r\n-            showAdminDashboard();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-    userLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const username = userInput.value;\r\n-        const password = userPasswordInput.value;\r\n-        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n-            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/login/user`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInUser = data.user;\r\n-            showMainApp();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    });\r\n-    backToAdminBtn.addEventListener('click', () => {\r\n-        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n-\r\n-        // 1. Recuperamos o token original do admin que guardámos\r\n-        const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-        if (!adminToken) {\r\n-            showToast(\"Erro: Token de administrador não encontrado. Faça o login novamente.\", \"error\");\r\n-            showInitialLogin();\r\n-            return;\r\n-        }\r\n-\r\n-        // 2. Restauramos o token do admin como o token ativo\r\n-        localStorage.setItem('authToken', adminToken);\r\n-        localStorage.removeItem('superAdminToken'); // Limpamos o token temporário\r\n-\r\n-        // 3. Resetamos o estado da aplicação e mostramos o painel\r\n-        currentLoggedInUser = null;\r\n-        currentLoggedInCompany = null;\r\n-        loggedInViaAdmin = false;\r\n-        isAdminLoggedIn = true;\r\n-        showAdminDashboard();\r\n-    });\r\n-\r\n-    async function renderCompanyList() {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) return;\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies`, {\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-\r\n-            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n-\r\n-            const companies = await response.json();\r\n-            companyListDiv.innerHTML = '';\r\n-\r\n-            if (companies.length === 0) {\r\n-                noCompaniesMessage.classList.remove('hidden');\r\n-            } else {\r\n-                noCompaniesMessage.classList.add('hidden');\r\n-                companies.forEach(company => {\r\n-                    const companyCard = document.createElement('div');\r\n-                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                    \r\n-                    // MUDANÇA: A API agora não retorna a contagem de usuários diretamente na lista.\r\n-                    // Podemos mostrar esta informação de outra forma ou remover por enquanto para simplificar.\r\n-                    companyCard.innerHTML = `\r\n-                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                        </div>\r\n-                    `;\r\n-                    companyListDiv.appendChild(companyCard);\r\n-                });\r\n-\r\n-                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n-                    button.addEventListener('click', async (e) => {\r\n-                        const companyId = e.target.dataset.companyId;\r\n-                        const token = localStorage.getItem('authToken');\r\n-                        try {\r\n-                            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n-                                headers: {\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                }\r\n-                            });\r\n-                            \r\n-                            // MUDANÇA: A resposta agora é desestruturada em 'company' e 'users'.\r\n-                            const { company, users } = await response.json();\r\n-                            \r\n-                            if (!response.ok) throw new Error(company.message); // Usa a mensagem de erro do objeto company\r\n-                            \r\n-                            // MUDANÇA: Passamos os dois objetos para a função do modal.\r\n-                            openCompanyDetailsModal(company, users);\r\n-\r\n-                        } catch (error) {\r\n-                            showToast(error.message, 'error');\r\n-                        }\r\n-                    });\r\n-                });\r\n-\r\n-                // O listener do 'enter-company-btn' precisa ser atualizado também para funcionar com a nova lógica\r\n-                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-                    button.addEventListener('click', async (e) => {\r\n-                        const companyId = e.target.dataset.companyId;\r\n-                        const token = localStorage.getItem('authToken');\r\n-                        try {\r\n-                            // Precisamos buscar os usuários da empresa para poder entrar como o primeiro\r\n-                            const companyDetailsResponse = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n-                                headers: { 'Authorization': `Bearer ${token}` }\r\n-                            });\r\n-                            const { company, users } = await companyDetailsResponse.json();\r\n-\r\n-                            if (!companyDetailsResponse.ok) throw new Error(company.message);\r\n-                            \r\n-                            if (users.length === 0) {\r\n-                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n-                                return;\r\n-                            }\r\n-\r\n-                            // Entramos como o primeiro usuário da lista\r\n-                            const userId = users[0]._id; \r\n-                            \r\n-                            const impersonateResponse = await fetch(`${API_BASE_URL}/api/admin/impersonate`, {\r\n-                                method: 'POST',\r\n-                                headers: {\r\n-                                    'Content-Type': 'application/json',\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                },\r\n-                                body: JSON.stringify({ companyId, userId })\r\n-                            });\r\n-                            const data = await impersonateResponse.json();\r\n-                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n-                            \r\n-                            showToast(`Entrando na empresa ${company.nomeEmpresa}...`, 'success');\r\n-                            localStorage.setItem('superAdminToken', token);\r\n-                            localStorage.setItem('authToken', data.token);\r\n-                            currentLoggedInCompany = company;\r\n-                            currentLoggedInUser = data.user;\r\n-                            loggedInViaAdmin = true;\r\n-                            showMainApp();\r\n-                        } catch (error) {\r\n-                            showToast(error.message, 'error');\r\n-                        }\r\n-                    });\r\n-                });\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    }\r\n-\r\n-    createCompanyBtn.addEventListener('click', () => {\r\n-        openAddCompanyModal();\r\n-    });\r\n-\r\n-    // --- Lógica Principal do App de Boletos ---\r\n-    function initializeCalendarDate() {\r\n-        const today = new Date();\r\n-        currentMonth = today.getMonth();\r\n-        currentYear = today.getFullYear();\r\n-        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n-    }\r\n-\r\n-    async function updateBillsOrganizer() {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n-            showInitialLogin(); // Redireciona para o login se não houver token\r\n-            return;\r\n-        }\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n-            const response = await fetch(`${API_BASE_URL}/api/boletos`, {\r\n-                method: 'GET',\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-\r\n-            if (!response.ok) {\r\n-                const errorData = await response.json();\r\n-                throw new Error(errorData.message || \"Erro ao buscar boletos.\");\r\n-            }\r\n-            \r\n-            // A resposta da nova API já vem no formato de uma lista de boletos,\r\n-            // com os dados do usuário \"populados\".\r\n-            userBoletos = await response.json();\r\n-            \r\n-            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-            totalBillsSpan.textContent = totalParcels;\r\n-\r\n-            // As funções de renderização e resumo são chamadas como antes.\r\n-            updateMonthlySummary();\r\n-            \r\n-            // A lógica para alternar entre calendário e lista diária continua a mesma.\r\n-            if (window.innerWidth >= 1024) {\r\n-                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n-                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n-                renderCalendar();\r\n-            } else {\r\n-                document.getElementById('billsOrganizer').classList.add('hidden');\r\n-                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n-                renderDailyBills();\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Se a busca falhar (ex: token expirado), deslogamos o usuário\r\n-            showInitialLogin();\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    }\r\n-\r\n-    function updateMonthlySummary() {\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n-            .filter(parcel => {\r\n-                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-            });\r\n-        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const totalNaoPago = totalMes - totalPago;\r\n-        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-            .filter(parcel => {\r\n-                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                return dueDate < today && !parcel.paid;\r\n-            });\r\n-        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n-            {\r\n-                style: 'currency',\r\n-                currency: 'BRL'\r\n-            });\r\n-        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n-        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n-    }\r\n-\r\n-    function renderCalendar() {\r\n-        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-        const calendarDays = document.getElementById('calendarDays');\r\n-        calendarDays.innerHTML = '';\r\n-        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-        for (let i = 0; i < firstDayOfMonth; i++) {\r\n-            const emptyCell = document.createElement('div');\r\n-            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n-            calendarDays.appendChild(emptyCell);\r\n-        }\r\n-        for (let day = 1; day <= daysInMonth; day++) {\r\n-            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-            const dayCell = document.createElement('div');\r\n-            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n-            dayCell.dataset.date = dateStr;\r\n-            const dayHeader = document.createElement('div');\r\n-            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-            dayHeader.textContent = day;\r\n-            dayCell.appendChild(dayHeader);\r\n-            dayCell.addEventListener('click', (e) => {\r\n-                if (e.target.closest('.bill-card')) return;\r\n-                const clickedDate = e.currentTarget.dataset.date;\r\n-                clearBillForm();\r\n-                document.getElementById('dueDate').value = clickedDate;\r\n-                addBillModal.classList.remove('hidden');\r\n-            });\r\n-            userBoletos.forEach(bill => {\r\n-                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                    const parcelElement = document.createElement('div');\r\n-                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n-                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n-                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                    dayCell.appendChild(parcelElement);\r\n-                });\r\n-            });\r\n-            calendarDays.appendChild(dayCell);\r\n-        }\r\n-    }\r\n-\r\n-    function renderDailyBills() {\r\n-        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n-    }\r\n-\r\n-    function clearBillForm() {\r\n-        billForm.reset();\r\n-        installmentsPreview.classList.add('hidden');\r\n-        installmentsList.innerHTML = '';\r\n-        currentBill = {};\r\n-    }\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    billForm.addEventListener('submit', function (e) {\r\n-        e.preventDefault();\r\n-        const billName = document.getElementById('billName').value;\r\n-        const dueDate = document.getElementById('dueDate').value;\r\n-        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n-        const installments = parseInt(document.getElementById('installments').value);\r\n-        const description = document.getElementById('description').value;\r\n-        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-        const barcode = document.getElementById('barcode').value;\r\n-        if (!billName || !dueDate || !totalAmount || !installments) {\r\n-            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-            return;\r\n-        }\r\n-        currentBill = {\r\n-            name: billName,\r\n-            parcels: []\r\n-        };\r\n-        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-        installmentsList.innerHTML = '';\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        currentBill.parcels.push({\r\n-            id: `${Date.now()}-${i}`,\r\n-            number: i + 1,\r\n-            amount: parcelAmount,\r\n-            dueDate: dateForInput,\r\n-            paid: false,\r\n-            description: description,\r\n-            barcode: barcode\r\n-        });\r\n-\r\n-        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n-            day: '2-digit',\r\n-            month: '2-digit',\r\n-            year: 'numeric'\r\n-        });\r\n-        \r\n-        const parcelItem = document.createElement('div');\r\n-        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n-        \r\n-        parcelItem.innerHTML = `\r\n-            <div class=\"flex items-center space-x-4\">\r\n-                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n-                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n-            </div>\r\n-            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n-        `;\r\n-        \r\n-        installmentsList.appendChild(parcelItem);\r\n-    }\r\n-        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-            input.addEventListener('input', (e) => {\r\n-                const index = parseInt(e.target.dataset.parcelIndex);\r\n-                const newAmount = parseFloat(e.target.value) || 0;\r\n-                if (!isNaN(newAmount)) {\r\n-                    currentBill.parcels[index].amount = newAmount;\r\n-                    updatePreviewTotal();\r\n-                }\r\n-            });\r\n-            input.addEventListener('blur', (e) => {\r\n-                const newAmount = parseFloat(e.target.value) || 0;\r\n-                e.target.value = newAmount.toFixed(2);\r\n-            });\r\n-        });\r\n-        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-            input.addEventListener('change', (e) => {\r\n-                const index = parseInt(e.target.dataset.parcelIndex);\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            });\r\n-        });\r\n-        installmentsPreview.classList.remove('hidden');\r\n-        updatePreviewTotal();\r\n-    });\r\n-\r\n-    function updatePreviewTotal() {\r\n-        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n-        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-    }\r\n-    addToOrganizer.addEventListener('click', async function () {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        if (!currentBill || !currentBill.name) {\r\n-            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n-            return;\r\n-        }\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/boletos`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(currentBill)\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n-            showToast(data.message, 'success');\r\n-            addBillModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    // --- Lógica do Modal de Edição de Boletos ---\r\n-    function openBillModal(bill, parcel) {\r\n-        // MUDANÇA: Usamos bill._id para o parentId e o parcel já terá o seu próprio _id.\r\n-        selectedParcel = { ...parcel, parentId: bill._id };\r\n-        \r\n-        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n-        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n-        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n-        modalBillBarcodeInput.value = parcel.barcode || '';\r\n-        modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n-            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n-        } else {\r\n-            showFullScreenBarcodeBtn.classList.add('hidden');\r\n-        }\r\n-        billModal.classList.remove('hidden');\r\n-    }\r\n-\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    billModal.addEventListener('click', (e) => {\r\n-        if (e.target === billModal) billModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    saveBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n-        const updatedData = {\r\n-            paid: document.getElementById('modalBillPaid').checked,\r\n-            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n-            dueDate: document.getElementById('modalBillDate').value,\r\n-            description: document.getElementById('modalBillDescription').value,\r\n-            barcode: document.getElementById('modalBillBarcode').value\r\n-        };\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            const response = await fetch(url, { // Usamos a nova URL\r\n-                method: 'PATCH',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                body: JSON.stringify(updatedData)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Parcela atualizada com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    deleteBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel) return;\r\n-        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        \r\n-        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n-        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n-\r\n-        try {\r\n-            const response = await fetch(url, { // Usamos a nova URL\r\n-                method: 'DELETE',\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Parcela excluída com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    deleteEntireBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel || !selectedParcel.parentId) {\r\n-            showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n-            return;\r\n-        }\r\n-        \r\n-        if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n-            return;\r\n-        }\r\n-        \r\n-        const token = localStorage.getItem('authToken');\r\n-        // MUDANÇA: O ID do boleto vem de selectedParcel.parentId, que agora já é o _id correto.\r\n-        const boletoId = selectedParcel.parentId; \r\n-        \r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/boletos/${boletoId}`, {\r\n-                method: 'DELETE',\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            \r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast('Boleto completo excluído com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-            \r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n-        const token = localStorage.getItem('authToken');\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-            \r\n-            // A resposta da API é um objeto { company, users }\r\n-            const data = await response.json(); \r\n-\r\n-            if (!response.ok) {\r\n-                // A mensagem de erro pode estar em 'data.message'\r\n-                throw new Error(data.message || 'Não foi possível buscar os detalhes da empresa.');\r\n-            }\r\n-\r\n-            // MUDANÇA CRÍTICA: Em vez de passar o objeto 'data' inteiro,\r\n-            // passamos as suas propriedades 'company' e 'users' corretamente.\r\n-            openCompanyDetailsModal(data.company, data.users);\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    }\r\n-\r\n-    // --- Lógica do Modal de Detalhes da Empresa ---\r\n-    function openCompanyDetailsModal(company, users) {\r\n-        // Guarda a referência da empresa selecionada\r\n-        selectedCompanyForAdmin = company;\r\n-\r\n-        // Preenche os campos de input e texto\r\n-        document.getElementById('modalCompanyNameInput').value = company.nomeEmpresa;\r\n-        modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n-        modalCompanyPasswordInput.value = ''; // Limpa o campo de senha por segurança\r\n-        modalCompanyUsers.innerHTML = '';\r\n-        \r\n-        // Renderiza a lista de usuários\r\n-        if (users && users.length > 0) {\r\n-            const assignableRoles = isAdminLoggedIn ?\r\n-                ['Proprietário', 'Gerente', 'Funcionário'] :\r\n-                ['Gerente', 'Funcionário'];\r\n-\r\n-            users.forEach(user => {\r\n-                const userItem = document.createElement('div');\r\n-                userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n-                const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n-                let roleDisplay = '';\r\n-\r\n-                if (isEditable) {\r\n-                    const optionsHTML = assignableRoles.map(role => {\r\n-                        if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n-                        return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n-                    }).join('');\r\n-                    roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n-                } else {\r\n-                    roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n-                }\r\n-\r\n-                userItem.innerHTML = `\r\n-                    <div class=\"flex items-center space-x-3\">\r\n-                        <span class=\"text-white\">${user.username}</span>\r\n-                        ${roleDisplay}\r\n-                    </div>\r\n-                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                `;\r\n-                modalCompanyUsers.appendChild(userItem);\r\n-            });\r\n-        } else {\r\n-            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-        }\r\n-\r\n-        // --- LÓGICA PARA PREENCHER DADOS DA ASSINATURA ---\r\n-        const subStatusEl = document.getElementById('subscriptionStatus');\r\n-        const subEndDateEl = document.getElementById('subscriptionEndDate');\r\n-\r\n-        if (company.subscription && company.subscription.status) {\r\n-            let statusText = '';\r\n-            let statusColorClass = '';\r\n-\r\n-            switch (company.subscription.status) {\r\n-                case 'active':\r\n-                    statusText = 'Ativa';\r\n-                    statusColorClass = 'text-green-400';\r\n-                    break;\r\n-                case 'inactive':\r\n-                    statusText = 'Inativa';\r\n-                    statusColorClass = 'text-red-400';\r\n-                    break;\r\n-                case 'past_due':\r\n-                    statusText = 'Vencida';\r\n-                    statusColorClass = 'text-orange-400';\r\n-                    break;\r\n-                case 'trial':\r\n-                    statusText = 'Período de Teste';\r\n-                    statusColorClass = 'text-blue-400';\r\n-                    break;\r\n-                default:\r\n-                    statusText = 'Desconhecido';\r\n-                    statusColorClass = 'text-gray-400';\r\n-            }\r\n-            subStatusEl.textContent = statusText;\r\n-            subStatusEl.className = `ml-2 font-bold ${statusColorClass}`;\r\n-\r\n-            if (company.subscription.endDate) {\r\n-                subEndDateEl.textContent = new Date(company.subscription.endDate).toLocaleDateString('pt-BR', {\r\n-                    day: '2-digit', month: '2-digit', year: 'numeric'\r\n-                });\r\n-            } else {\r\n-                subEndDateEl.textContent = 'N/A';\r\n-            }\r\n-        } else {\r\n-            subStatusEl.textContent = 'Não configurada';\r\n-            subEndDateEl.textContent = 'N/A';\r\n-            subStatusEl.className = 'ml-2 font-bold text-gray-400';\r\n-        }\r\n-        \r\n-        // Adiciona novamente os listeners para os botões dentro do modal\r\n-        document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-            button.addEventListener('click', (e) => handleRemoveUser(company._id, e.target.dataset.userId));\r\n-        });\r\n-        document.querySelectorAll('.role-select').forEach(select => {\r\n-            select.addEventListener('change', (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                // Aqui você pode chamar uma função para atualizar o papel do usuário\r\n-            });\r\n-        });\r\n-\r\n-        // Mostra o modal\r\n-        companyDetailsModal.classList.remove('hidden');\r\n-    }\r\n-\r\n-    async function handleRemoveUser(companyId, userId) {\r\n-        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    addUserBtn.addEventListener('click', () => {\r\n-        openAddUserModal();\r\n-    });\r\n-\r\n-    deleteCompanyBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n-            return;\r\n-        }\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-\r\n-        const token = localStorage.getItem('authToken');\r\n-        const updatedData = {}; // Objeto vazio para guardar apenas o que mudou\r\n-\r\n-        // Pegamos os valores dos campos\r\n-        const newName = document.getElementById('modalCompanyNameInput').value;\r\n-        const newPassword = modalCompanyPasswordInput.value;\r\n-\r\n-        // MUDANÇA: Verificamos se o nome foi alterado e adicionamo-lo ao payload\r\n-        if (newName && newName.trim() !== '' && newName.trim() !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-            updatedData.nomeEmpresa = newName.trim();\r\n-        }\r\n-\r\n-        // A lógica da senha continua, mas agora também é adicionada ao mesmo payload\r\n-        if (newPassword && newPassword.length > 0) {\r\n-            updatedData.newPassword = newPassword;\r\n-        }\r\n-\r\n-        // Se nada foi alterado, informamos o usuário e paramos\r\n-        if (Object.keys(updatedData).length === 0) {\r\n-            showToast(\"Nenhuma alteração para salvar.\", \"info\");\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`, {\r\n-                method: 'PATCH',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                body: JSON.stringify(updatedData) // Enviamos o objeto com as alterações\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList(); // Atualizamos a lista de empresas para refletir o novo nome\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    companyDetailsModal.addEventListener('click', (e) => {\r\n-        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n-    });\r\n-    // --- Inicialização ---\r\n-    initializeCalendarDate();\r\n-    initializeApp();\r\n-\r\n-    // Função para abrir e preencher o modal\r\n-    async function openCompanyInfoModal() {\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${currentLoggedInCompany._id}`, {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            currentCompanyDetails = data.company;\r\n-            document.getElementById('companyInfoCnpj').textContent = formatCnpj(currentCompanyDetails.cnpj);\r\n-            document.getElementById('companyInfoName').value = currentCompanyDetails.nomeEmpresa;\r\n-            document.getElementById('companyInfoEmail').value = currentCompanyDetails.email || '';\r\n-            document.getElementById('companyInfoTelefone').value = currentCompanyDetails.telefoneFixo || '';\r\n-            document.getElementById('companyInfoWhatsapp').value = currentCompanyDetails.telefoneWhatsapp || '';\r\n-\r\n-            // MUDANÇA: Aplicamos as máscaras AQUI, depois de o modal estar preenchido e prestes a ser exibido.\r\n-            const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n-            if (telefoneFixoInput) {\r\n-                IMask(telefoneFixoInput, { mask: '(00) 0000-0000' });\r\n-            }\r\n-            const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n-            if (whatsappInput) {\r\n-                IMask(whatsappInput, { mask: '(00) 00000-0000' });\r\n-            }\r\n-\r\n-            companyInfoModal.classList.remove('hidden');\r\n-\r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    // Listener para o link do menu \"Detalhes da Empresa\"\r\n-    menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        // Chama a função para abrir o modal com as informações da empresa\r\n-        openCompanyInfoModal(); \r\n-    });\r\n-\r\n-    // Listener para o botão de salvar\r\n-    saveCompanyInfoBtn.addEventListener('click', async () => {\r\n-        const payload = {\r\n-            nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-            \r\n-            // MUDANÇA: Adicionamos o e-mail ao payload que será enviado para a API\r\n-            email: document.getElementById('companyInfoEmail').value,\r\n-\r\n-            telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-            telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-        };\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${currentCompanyDetails._id}`, {\r\n-                method: 'PATCH',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(payload)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast(data.message, 'success');\r\n-            companyInfoModal.classList.add('hidden');\r\n-\r\n-        } catch (error) {\r\n-            showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal\r\n-    closeCompanyInfoModalBtn.addEventListener('click', () => {\r\n-        companyInfoModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // --- LÓGICA PARA MÁSCARAS DE INPUT (IMask.js) ---\r\n-\r\n-    document.addEventListener('DOMContentLoaded', () => {\r\n-        // Máscara para o campo de CNPJ no modal de login da empresa (ESTA FICA)\r\n-        const cnpjInput = document.getElementById('cnpjInput');\r\n-        if (cnpjInput) {\r\n-            const cnpjMask = IMask(cnpjInput, {\r\n-                mask: '00.000.000/0000-00'\r\n-            });\r\n-        }\r\n-        \r\n-        // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n-        const totalAmountInput = document.getElementById('totalAmount');\r\n-        if (totalAmountInput) {\r\n-            const amountMask = IMask(totalAmountInput, {\r\n-                mask: 'R$ num',\r\n-                blocks: {\r\n-                    num: {\r\n-                        mask: Number,\r\n-                        scale: 2,\r\n-                        radix: ',',\r\n-                        thousandsSeparator: '.',\r\n-                        padFractionalZeros: true\r\n-                    }\r\n-                }\r\n-            });\r\n-        }\r\n-\r\n-        // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n-        const modalAmountInput = document.getElementById('modalBillAmount');\r\n-        if (modalAmountInput) {\r\n-            const modalAmountMask = IMask(modalAmountInput, {\r\n-                mask: 'R$ num',\r\n-                blocks: {\r\n-                    num: {\r\n-                        mask: Number,\r\n-                        scale: 2,\r\n-                        radix: ',',\r\n-                        thousandsSeparator: '.',\r\n-                        padFractionalZeros: true\r\n-                    }\r\n-                }\r\n-            });\r\n-        }\r\n-    });\r\n-\r\n-    // Listerner para botão de adição de assinatura\r\n-    document.getElementById('addSubscriptionBtn').addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) {\r\n-            showToast('Nenhuma empresa selecionada.', 'error');\r\n-            return;\r\n-        }\r\n-\r\n-        const daysToAddInput = document.getElementById('daysToAddInput');\r\n-        const daysToAdd = daysToAddInput.value;\r\n-        if (!daysToAdd || parseInt(daysToAdd, 10) <= 0) {\r\n-            showToast('Por favor, insira um número de dias válido.', 'error');\r\n-            return;\r\n-        }\r\n-\r\n-        const companyId = selectedCompanyForAdmin._id;\r\n-        const token = localStorage.getItem('authToken');\r\n-        \r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/subscription`, {\r\n-                method: 'PATCH',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                body: JSON.stringify({ daysToAdd: daysToAdd })\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) {\r\n-                throw new Error(data.message);\r\n-            }\r\n-\r\n-            showToast(data.message, 'success');\r\n-            \r\n-            // Limpa o input\r\n-            daysToAddInput.value = '';\r\n-\r\n-            // Atualiza a UI do modal com os novos dados da empresa retornados pela API\r\n-            openCompanyDetailsModal(data.company, data.users);\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    });\r\n-\r\n-    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR USUÁRIO ---\r\n-\r\n-    // Função para abrir o modal\r\n-    function openAddUserModal() {\r\n-        addUserForm.reset(); // Limpa o formulário\r\n-        addUserModal.classList.remove('hidden');\r\n-        document.getElementById('addUsernameInput').focus();\r\n-    }\r\n-\r\n-    // Função para fechar o modal\r\n-    function closeAddUserModal() {\r\n-        addUserModal.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Listeners para fechar/cancelar\r\n-    closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-\r\n-    // Listener para o envio do formulário\r\n-    addUserForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault(); // Impede o recarregamento da página\r\n-\r\n-        const username = document.getElementById('addUsernameInput').value;\r\n-        const password = document.getElementById('addUserPasswordInput').value;\r\n-        const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-\r\n-        // Validação de senha\r\n-        if (password !== confirmPassword) {\r\n-            showToast(\"As senhas não coincidem.\", \"error\");\r\n-            return;\r\n-        }\r\n-\r\n-        // Identifica a empresa atual (seja via admin ou login normal)\r\n-        const companyId = selectedCompanyForAdmin ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n-        if (!companyId) {\r\n-            showToast(\"Erro: Não foi possível identificar a empresa.\", \"error\");\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`, {\r\n-                method: 'POST',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify({ username, password, companyId })\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-\r\n-            showToast(data.message, 'success');\r\n-            closeAddUserModal();\r\n-\r\n-            // Atualiza a lista de usuários na tela que estiver aberta\r\n-            if (adminDashboardScreen.classList.contains('hidden')) {\r\n-                // Se estiver no modal de \"Gerenciar Usuários\" do proprietário\r\n-                fetchCompanyDetailsAndOpenModal(companyId, true); // O 'true' indica que é uma atualização\r\n-            } else {\r\n-                // Se estiver no painel do admin\r\n-                renderCompanyList();\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR EMPRESA ---\r\n-\r\n-    // Aplica a máscara de CNPJ ao novo campo\r\n-    const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-    if (addCompanyCnpjInput) {\r\n-        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    // Função para abrir o modal\r\n-    function openAddCompanyModal() {\r\n-        addCompanyForm.reset(); // Limpa o formulário\r\n-        addCompanyModal.classList.remove('hidden');\r\n-        document.getElementById('addCompanyNameInput').focus();\r\n-    }\r\n-\r\n-    // Função para fechar o modal\r\n-    function closeAddCompanyModal() {\r\n-        addCompanyModal.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Listeners para fechar/cancelar\r\n-    closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-\r\n-    // Listener para o envio do formulário\r\n-    addCompanyForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const payload = {\r\n-            nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-            cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-            senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-            ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-            ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-        };\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n-            return;\r\n-        }\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/register`, {\r\n-                method: 'POST',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(payload)\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-\r\n-            showToast(data.message, 'success');\r\n-            closeAddCompanyModal();\r\n-            renderCompanyList(); // Atualiza a lista de empresas no painel de admin\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752608480803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1965 @@\n+document.addEventListener('DOMContentLoaded', function() {\r\n+    // --- Elementos HTML (Declarações completas) ---\r\n+    const API_BASE_URL = 'http://localhost:5000';\r\n+    const generalLoader = document.getElementById('generalLoader');\r\n+    const loadingScreen = document.getElementById('loadingScreen');\r\n+    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+    const cnpjInput = document.getElementById('cnpjInput');\r\n+    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+    const adminLoginForm = document.getElementById('adminLoginForm');\r\n+    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+    const companyListDiv = document.getElementById('companyList');\r\n+    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+    const userLoginScreen = document.getElementById('userLoginScreen');\r\n+    const userLoginForm = document.getElementById('userLoginForm');\r\n+    const userInput = document.getElementById('userInput');\r\n+    const userPasswordInput = document.getElementById('userPasswordInput');\r\n+    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+    const welcomeUserText = document.getElementById('welcomeUserText');\r\n+    const mainAppContent = document.getElementById('mainAppContent');\r\n+    const toastMessage = document.getElementById('toastMessage');\r\n+    const logoutBtn = document.getElementById('logoutBtn');\r\n+    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+    const addBillModal = document.getElementById('addBillModal');\r\n+    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n+    const modalCompanyName = document.getElementById('modalCompanyName');\r\n+    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+    const addUserBtn = document.getElementById('addUserBtn');\r\n+    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+    const billModal = document.getElementById('billModal');\r\n+    const closeModalBtn = document.getElementById('closeModal');\r\n+    const saveBillBtn = document.getElementById('saveBill');\r\n+    const deleteBillBtn = document.getElementById('deleteBill');\r\n+    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n+    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n+    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n+    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n+    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+    const settingsBtn = document.getElementById('settingsBtn');\r\n+    const settingsDropdown = document.getElementById('settingsDropdown');\r\n+    const menuEmpresa = document.getElementById('menuEmpresa');\r\n+    const menuUsuarios = document.getElementById('menuUsuarios');\r\n+    const menuPermissoes = document.getElementById('menuPermissoes');\r\n+    const permissionsModal = document.getElementById('permissionsModal');\r\n+    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+    const permissionsContainer = document.getElementById('permissionsContainer');\r\n+    const billForm = document.getElementById('billForm');\r\n+    const installmentsPreview = document.getElementById('installmentsPreview');\r\n+    const installmentsList = document.getElementById('installmentsList');\r\n+    const addToOrganizer = document.getElementById('addToOrganizer');\r\n+    const totalBillsSpan = document.getElementById('totalBills');\r\n+    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+    const clearFormBtn = document.getElementById('clearFormBtn');\r\n+    const prevMonthBtn = document.getElementById('prevMonth');\r\n+    const nextMonthBtn = document.getElementById('nextMonth');\r\n+    const companyInfoModal = document.getElementById('companyInfoModal');\r\n+    const closeCompanyInfoModalBtn = document.getElementById('closeCompanyInfoModal');\r\n+    const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+    const addUserModal = document.getElementById('addUserModal');\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n+    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+    const addCompanyModal = document.getElementById('addCompanyModal');\r\n+    const addCompanyForm = document.getElementById('addCompanyForm');\r\n+    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n+    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+    const INACTIVITY_TIMEOUT = 30 * 60 * 1000;\r\n+    const subscriptionModal = document.getElementById('subscriptionModal');\r\n+    const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+    const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+\r\n+    // --- Variáveis de Dados e Estado ---\r\n+    let currentLoggedInCompany = null;\r\n+    let currentLoggedInUser = null;\r\n+    let isAdminLoggedIn = false;\r\n+    let loggedInViaAdmin = false;\r\n+    let selectedCompanyForAdmin = null;\r\n+    let currentBill = {};\r\n+    let selectedParcel = null;\r\n+    let userBoletos = [];\r\n+    let currentMonth, currentYear;\r\n+    let currentCompanyDetails = null;\r\n+    let inactivityTimer; // Variável para guardar o nosso cronómetro\r\n+\r\n+\r\n+        // --- LÓGICA DE INATIVIDADE E LOGOUT AUTOMÁTICO ---\r\n+    function logoutDueToInactivity() {\r\n+        // Primeiro, limpamos o cronómetro para não tentar fazer logout de novo\r\n+        clearInactivityTimer(); \r\n+        // Mostramos uma mensagem amigável\r\n+        showToast(\"Você foi desconectado por inatividade.\", \"info\");\r\n+        // Chamamos a função de login, que já limpa tudo\r\n+        showInitialLogin(); \r\n+    }\r\n+\r\n+    // Função que reinicia o cronómetro\r\n+    function resetInactivityTimer() {\r\n+        // Limpa o cronómetro antigo\r\n+        clearTimeout(inactivityTimer);\r\n+        // Cria um novo cronómetro que chamará a função de logout depois de 30 minutos\r\n+        inactivityTimer = setTimeout(logoutDueToInactivity, INACTIVITY_TIMEOUT);\r\n+    }\r\n+\r\n+    // Função para iniciar o monitoramento de inatividade\r\n+    function startInactivityTimer() {\r\n+        // Adiciona \"espiões\" para vários tipos de atividade do usuário.\r\n+        // Qualquer uma destas ações irá reiniciar o cronómetro.\r\n+        window.addEventListener('mousemove', resetInactivityTimer);\r\n+        window.addEventListener('mousedown', resetInactivityTimer);\r\n+        window.addEventListener('keypress', resetInactivityTimer);\r\n+        window.addEventListener('scroll', resetInactivityTimer, true);\r\n+        window.addEventListener('touchstart', resetInactivityTimer);\r\n+        \r\n+        // Inicia o cronómetro pela primeira vez\r\n+        resetInactivityTimer();\r\n+        console.log(\"Monitor de inatividade iniciado. Logout em 30 minutos.\");\r\n+    }\r\n+\r\n+    // Função para parar o monitoramento e limpar tudo\r\n+    function clearInactivityTimer() {\r\n+        clearTimeout(inactivityTimer);\r\n+        // Remove os \"espiões\" para não consumir memória desnecessariamente\r\n+        window.removeEventListener('mousemove', resetInactivityTimer);\r\n+        window.removeEventListener('mousedown', resetInactivityTimer);\r\n+        window.removeEventListener('keypress', resetInactivityTimer);\r\n+        window.removeEventListener('scroll', resetInactivityTimer, true);\r\n+        window.removeEventListener('touchstart', resetInactivityTimer);\r\n+        console.log(\"Monitor de inatividade parado.\");\r\n+    }\r\n+\r\n+\r\n+    // --- Lógica para o Modal de Adicionar Boletos ---\r\n+    openAddBillModalBtn.addEventListener('click', () => {\r\n+        clearBillForm();\r\n+        addBillModal.classList.remove('hidden');\r\n+    });\r\n+    closeAddBillModalBtn.addEventListener('click', () => {\r\n+        addBillModal.classList.add('hidden');\r\n+    });\r\n+    addBillModal.addEventListener('click', (e) => {\r\n+        if (e.target === addBillModal) {\r\n+            addBillModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n+    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n+        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n+        if (!originalBarcode) return;\r\n+        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n+        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n+            try {\r\n+                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n+                    {\r\n+                        format: \"ITF\",\r\n+                        width: 1.5,\r\n+                        height: 80,\r\n+                        displayValue: true,\r\n+                        fontSize: 20,\r\n+                        lineColor: \"#000\",\r\n+                        background: \"#FFF\"\r\n+                    });\r\n+                barcodeFullScreenModal.classList.remove('hidden');\r\n+            }\r\n+            catch (e) {\r\n+                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n+            }\r\n+        }\r\n+        else {\r\n+            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n+        }\r\n+    });\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n+        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // Listener para o item \"Gerenciar Usuários\"\r\n+    menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        // Usamos o ID da empresa logada para buscar os detalhes\r\n+        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+        if (companyId) {\r\n+            // Chama a função para abrir o modal com a lista de usuários\r\n+            fetchCompanyDetailsAndOpenModal(companyId); \r\n+        }\r\n+    });\r\n+\r\n+\r\n+\r\n+// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n+settingsBtn.addEventListener('click', (event) => {\r\n+    event.stopPropagation();\r\n+    settingsDropdown.classList.toggle('hidden');\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (!settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n+\r\n+// Função auxiliar para os links de Empresa e Usuários\r\n+const openManagementModal = (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+    if (companyId) {\r\n+        fetchCompanyDetailsAndOpenModal(companyId);\r\n+    }\r\n+};\r\n+\r\n+// Listener EXCLUSIVO para o link de Permissões\r\n+    menuPermissoes.addEventListener('click', async (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        showLoader();\r\n+        \r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const permissions = await response.json();\r\n+            if (!response.ok) throw new Error(permissions.message);\r\n+\r\n+            // Chamamos a função para preencher o modal com os dados\r\n+            populatePermissionsModal(permissions);\r\n+\r\n+            permissionsModal.classList.remove('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal de permissões\r\n+    closePermissionsModal.addEventListener('click', () => {\r\n+        permissionsModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // Nova função para popular os interruptores com os dados do backend\r\n+    function populatePermissionsModal(permissions) {\r\n+        // Lógica para Gerente\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        // MUDANÇA: Marca o rádio correto com base no valor (none, own, all)\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+        \r\n+        // Lógica para Funcionário\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+    }\r\n+\r\n+// Atualizamos o listener do menu para usar a nova função\r\n+menuPermissoes.addEventListener('click', async (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    \r\n+    try {\r\n+        const token = localStorage.getItem('authToken');\r\n+        const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n+            headers: { 'Authorization': `Bearer ${token}` }\r\n+        });\r\n+        const permissions = await response.json();\r\n+        if (!response.ok) throw new Error(permissions.message);\r\n+\r\n+        // Chamamos a função para preencher o modal com os dados\r\n+        populatePermissionsModal(permissions);\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+    }\r\n+});\r\n+\r\n+\r\n+    // Adicionamos o listener para o novo botão Salvar\r\n+    document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n+        // Lemos o estado de cada interruptor e rádio\r\n+        const newPermissions = {\r\n+            Gerente: {\r\n+                canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+                // MUDANÇA: Pega o valor do rádio selecionado\r\n+                canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+                canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+            },\r\n+            Funcionário: {\r\n+                canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+                canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+                canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+            }\r\n+        };\r\n+        showLoader()\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n+                method: 'PATCH',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(newPermissions)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast(data.message, 'success');\r\n+            permissionsModal.classList.add('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar permissões: ' + error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal\r\n+    closePermissionsModal.addEventListener('click', () => {\r\n+        permissionsModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n+    function closeQuickAddModal() {\r\n+        quickUserAddModal.classList.add('hidden');\r\n+    }\r\n+    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n+    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n+    quickUserAddForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const username = document.getElementById('quickAddUsername').value;\r\n+        const password = document.getElementById('quickAddPassword').value;\r\n+        if (!currentLoggedInCompany) {\r\n+            showToast('Erro: Empresa não identificada.', 'error');\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            closeQuickAddModal();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    // --- Funções de Utilitário e de Tela ---\r\n+    function showToast(message, type = 'success') {\r\n+        toastMessage.textContent = message;\r\n+        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n+        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n+        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n+        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n+        toastMessage.classList.remove('hidden');\r\n+        setTimeout(() => {\r\n+            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n+            setTimeout(() => {\r\n+                toastMessage.classList.add('hidden');\r\n+                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n+            }, 300);\r\n+        }, 3000);\r\n+    }\r\n+\r\n+    // --- Funções para o Loader Genérico ---\r\n+    function showLoader() {\r\n+        generalLoader.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function hideLoader() {\r\n+        generalLoader.classList.add('hidden');\r\n+    }\r\n+\r\n+    function hideAllScreens() {\r\n+        initialLoginScreen.classList.add('hidden');\r\n+        cnpjLoginScreen.classList.add('hidden');\r\n+        adminLoginScreen.classList.add('hidden');\r\n+        userLoginScreen.classList.add('hidden');\r\n+        adminDashboardScreen.classList.add('hidden');\r\n+        mainAppContent.classList.add('hidden');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        addBillModal.classList.add('hidden');\r\n+        billModal.classList.add('hidden');\r\n+        barcodeFullScreenModal.classList.add('hidden');\r\n+        quickUserAddModal.classList.add('hidden');\r\n+        openAddBillModalBtn.classList.add('hidden');\r\n+    }\r\n+\r\n+    /**\r\n+     * Verifica o status da assinatura da empresa e bloqueia o acesso se necessário.\r\n+     * @param {object} company - O objeto da empresa retornado pela API.\r\n+     * @returns {boolean} - Retorna 'true' se o acesso for permitido, 'false' se for bloqueado.\r\n+     */\r\n+    function checkSubscription(company) {\r\n+        const status = company.subscription?.status; // Usamos 'optional chaining' por segurança\r\n+\r\n+        // Se a assinatura estiver ativa, permite o acesso.\r\n+        if (status === 'active') {\r\n+            return true;\r\n+        }\r\n+\r\n+        // Se a assinatura não estiver ativa, configura e mostra o modal.\r\n+        const title = document.getElementById('subscriptionTitle');\r\n+        const message = document.getElementById('subscriptionMessage');\r\n+        const icon = document.getElementById('subscriptionIcon');\r\n+        const actionBtn = document.getElementById('subscriptionActionBtn');\r\n+\r\n+        if (status === 'inactive' || status === 'trial') {\r\n+            title.textContent = 'Ative sua Assinatura';\r\n+            message.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+            actionBtn.textContent = 'Realizar Assinatura';\r\n+            icon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+        } else { // 'past_due' ou qualquer outro status\r\n+            title.textContent = 'Assinatura Pendente';\r\n+            message.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+            actionBtn.textContent = 'Renovar Assinatura';\r\n+            icon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+        }\r\n+\r\n+        subscriptionModal.classList.remove('hidden');\r\n+        return false; // Bloqueia o acesso ao resto da aplicação\r\n+    }\r\n+\r\n+    subscriptionLogoutBtn.addEventListener('click', () => {\r\n+    showInitialLogin();\r\n+    });\r\n+\r\n+    async function initializeApp() {\r\n+        // 1. Verifica se há um login de empresa pendente vindo da página principal\r\n+        const pendingCompanyLogin = localStorage.getItem('pendingCompanyLogin');\r\n+        if (pendingCompanyLogin) {\r\n+            try {\r\n+                const company = JSON.parse(pendingCompanyLogin);\r\n+                currentLoggedInCompany = company; // Define o estado da empresa\r\n+                \r\n+                // Limpa o item para não ser usado novamente\r\n+                localStorage.removeItem('pendingCompanyLogin'); \r\n+                \r\n+                // Pula diretamente para a tela de login do usuário\r\n+                showUserLogin(company.nomeEmpresa); \r\n+                loadingScreen.classList.add('hidden'); // Esconde o loader inicial\r\n+                return; // Para a execução para não continuar com a verificação de token\r\n+            } catch(e) {\r\n+                // Se houver erro ao ler os dados, limpa e vai para o login normal\r\n+                localStorage.removeItem('pendingCompanyLogin');\r\n+            }\r\n+        }\r\n+\r\n+        // 2. Se não houver login pendente, continua com a verificação normal de sessão\r\n+        const token = localStorage.getItem('authToken');\r\n+\r\n+        if (!token) {\r\n+            showInitialLogin();\r\n+            loadingScreen.classList.add('hidden');\r\n+            return;\r\n+        }\r\n+\r\n+        // 3. Se há um token, tentamos verificar com o backend\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+\r\n+            if (!response.ok) {\r\n+                // Se o token for inválido ou expirado, limpa e vai para o login.\r\n+                localStorage.removeItem('authToken');\r\n+                localStorage.removeItem('superAdminToken');\r\n+                showInitialLogin();\r\n+                return;\r\n+            }\r\n+\r\n+            const data = await response.json();\r\n+            \r\n+            // 4. Com base na resposta, decide para onde ir\r\n+            if (data.user.role === 'SuperAdmin') {\r\n+                isAdminLoggedIn = true;\r\n+                showAdminDashboard();\r\n+            } else {\r\n+                // Para usuários normais, o acesso depende da assinatura da empresa\r\n+                currentLoggedInUser = data.user;\r\n+                currentLoggedInCompany = data.company;\r\n+                isAdminLoggedIn = false;\r\n+\r\n+                const isSubscriptionActive = currentLoggedInCompany.subscription?.status === 'active';\r\n+\r\n+                if (isSubscriptionActive) {\r\n+                    // Se a assinatura estiver ATIVA, todos têm acesso.\r\n+                    showMainApp();\r\n+                } else {\r\n+                    // Se a assinatura NÃO estiver ativa...\r\n+                    if (currentLoggedInUser.role === 'Proprietário') {\r\n+                        // ...e o usuário for o Proprietário, mostra o modal de renovação.\r\n+                        checkSubscription(currentLoggedInCompany);\r\n+                    } else {\r\n+                        // ...e for um Gerente ou Funcionário, mostra o modal de acesso bloqueado.\r\n+                        showAccessBlockedModal();\r\n+                    }\r\n+                }\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            // Em caso de erro de rede, etc., sempre vamos para a tela de login por segurança.\r\n+            showInitialLogin();\r\n+        } finally {\r\n+            // Garante que a tela de carregamento da sessão seja escondida, não importa o resultado.\r\n+            loadingScreen.classList.add('hidden');\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Verifica o status da assinatura e mostra o modal apropriado para o Proprietário.\r\n+     * @param {object} company - O objeto da empresa retornado pela API.\r\n+     */\r\n+    function checkSubscription(company) {\r\n+        const status = company.subscription?.status;\r\n+\r\n+        // Se a assinatura estiver ativa, não faz nada e permite o acesso.\r\n+        if (status === 'active') {\r\n+            return true;\r\n+        }\r\n+\r\n+        // Se não estiver ativa, configura e mostra o modal de assinatura.\r\n+        const title = document.getElementById('subscriptionTitle');\r\n+        const message = document.getElementById('subscriptionMessage');\r\n+        const icon = document.getElementById('subscriptionIcon');\r\n+        const actionBtn = document.getElementById('subscriptionActionBtn');\r\n+\r\n+        if (status === 'inactive' || status === 'trial') {\r\n+            title.textContent = 'Ative sua Assinatura';\r\n+            message.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+            actionBtn.textContent = 'Realizar Assinatura';\r\n+            icon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+        } else { // 'past_due' ou qualquer outro status\r\n+            title.textContent = 'Assinatura Pendente';\r\n+            message.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+            actionBtn.textContent = 'Renovar Assinatura';\r\n+            icon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+        }\r\n+\r\n+        subscriptionModal.classList.remove('hidden');\r\n+        return false; // Retorna false para indicar que o acesso está bloqueado.\r\n+    }\r\n+\r\n+    function showAccessBlockedModal() {\r\n+        const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+        const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+        \r\n+        hideAllScreens();\r\n+        \r\n+        accessBlockedModal.classList.remove('hidden');\r\n+        \r\n+        // Adiciona um listener para o botão de sair deste modal\r\n+        if(blockedAccessLogoutBtn) {\r\n+            blockedAccessLogoutBtn.addEventListener('click', showInitialLogin);\r\n+        }\r\n+    }\r\n+\r\n+    function showInitialLogin() {\r\n+        clearInactivityTimer();\r\n+        hideAllScreens();\r\n+        loadingScreen.classList.add('hidden');\r\n+        initialLoginScreen.classList.remove('hidden');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        currentLoggedInCompany = null;\r\n+        currentLoggedInUser = null;\r\n+        isAdminLoggedIn = false;\r\n+        loggedInViaAdmin = false;\r\n+    }\r\n+\r\n+    function showCnpjLogin() {\r\n+        hideAllScreens();\r\n+        cnpjLoginForm.reset();\r\n+        cnpjLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showAdminLogin() {\r\n+        hideAllScreens();\r\n+        adminLoginForm.reset();\r\n+        adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showUserLogin(companyName) {\r\n+        hideAllScreens();\r\n+        userLoginForm.reset();\r\n+        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+        userLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    function showMainApp() {\r\n+        hideAllScreens();\r\n+        mainAppContent.classList.remove('hidden');\r\n+\r\n+        if (currentLoggedInUser && currentLoggedInUser.username) {\r\n+            document.getElementById('loggedInUserDisplay').textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+        }\r\n+\r\n+        if (loggedInViaAdmin) {\r\n+            backToAdminBtn.classList.remove('hidden');\r\n+        } else {\r\n+            backToAdminBtn.classList.add('hidden');\r\n+        }\r\n+        \r\n+        if (!isAdminLoggedIn && currentLoggedInUser.role === 'Proprietário') {\r\n+            settingsMenuContainer.classList.remove('hidden');\r\n+        } else {\r\n+            settingsMenuContainer.classList.add('hidden');\r\n+        }\r\n+\r\n+        openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+        updateBillsOrganizer();\r\n+        startInactivityTimer();\r\n+    }\r\n+\r\n+    function showAdminDashboard() {\r\n+        hideAllScreens();\r\n+        adminDashboardScreen.classList.remove('hidden');\r\n+        renderCompanyList();\r\n+        tartInactivityTimer();\r\n+    }\r\n+\r\n+    function formatCnpj(value) {\r\n+        value = value.replace(/\\D/g, '');\r\n+        if (value.length > 14) value = value.slice(0, 14);\r\n+        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n+        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n+        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n+        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n+        return value;\r\n+    }\r\n+    // --- Lógica de Navegação do Calendário ---\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth--;\r\n+        if (currentMonth < 0) {\r\n+            currentMonth = 11;\r\n+            currentYear--;\r\n+        }\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth++;\r\n+        if (currentMonth > 11) {\r\n+            currentMonth = 0;\r\n+            currentYear++;\r\n+        }\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    // --- Lógica de Autenticação e Outras Funções ---\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const cnpj = cnpjInput.value;\r\n+        const password = cnpjPasswordInput.value;\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/login/company`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            cnpj,\r\n+                            password\r\n+                        }),\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInCompany = data.company;\r\n+            loggedInViaAdmin = false;\r\n+            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    adminLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const username = adminUsernameInput.value;\r\n+        const password = adminPasswordInput.value;\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/login/admin`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            localStorage.setItem('authToken', data.token);\r\n+            isAdminLoggedIn = true;\r\n+            showToast('Login de Administrador bem-sucedido!', 'success');\r\n+            showAdminDashboard();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+    userLoginForm.addEventListener('submit', async function (e) {\r\n+        e.preventDefault();\r\n+        const username = userInput.value;\r\n+        const password = userPasswordInput.value;\r\n+        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n+            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/login/user`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json'\r\n+                    },\r\n+                    body: JSON.stringify(\r\n+                        {\r\n+                            username,\r\n+                            password,\r\n+                            companyId: currentLoggedInCompany._id\r\n+                        })\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            localStorage.setItem('authToken', data.token);\r\n+            currentLoggedInUser = data.user;\r\n+            showMainApp();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    });\r\n+    backToAdminBtn.addEventListener('click', () => {\r\n+        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n+\r\n+        // 1. Recuperamos o token original do admin que guardámos\r\n+        const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+        if (!adminToken) {\r\n+            showToast(\"Erro: Token de administrador não encontrado. Faça o login novamente.\", \"error\");\r\n+            showInitialLogin();\r\n+            return;\r\n+        }\r\n+\r\n+        // 2. Restauramos o token do admin como o token ativo\r\n+        localStorage.setItem('authToken', adminToken);\r\n+        localStorage.removeItem('superAdminToken'); // Limpamos o token temporário\r\n+\r\n+        // 3. Resetamos o estado da aplicação e mostramos o painel\r\n+        currentLoggedInUser = null;\r\n+        currentLoggedInCompany = null;\r\n+        loggedInViaAdmin = false;\r\n+        isAdminLoggedIn = true;\r\n+        showAdminDashboard();\r\n+    });\r\n+\r\n+    async function renderCompanyList() {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) return;\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies`, {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n+\r\n+            const companies = await response.json();\r\n+            companyListDiv.innerHTML = '';\r\n+\r\n+            if (companies.length === 0) {\r\n+                noCompaniesMessage.classList.remove('hidden');\r\n+            } else {\r\n+                noCompaniesMessage.classList.add('hidden');\r\n+                companies.forEach(company => {\r\n+                    const companyCard = document.createElement('div');\r\n+                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                    \r\n+                    // MUDANÇA: A API agora não retorna a contagem de usuários diretamente na lista.\r\n+                    // Podemos mostrar esta informação de outra forma ou remover por enquanto para simplificar.\r\n+                    companyCard.innerHTML = `\r\n+                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                        </div>\r\n+                    `;\r\n+                    companyListDiv.appendChild(companyCard);\r\n+                });\r\n+\r\n+                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n+                    button.addEventListener('click', async (e) => {\r\n+                        const companyId = e.target.dataset.companyId;\r\n+                        const token = localStorage.getItem('authToken');\r\n+                        try {\r\n+                            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                                headers: {\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                }\r\n+                            });\r\n+                            \r\n+                            // MUDANÇA: A resposta agora é desestruturada em 'company' e 'users'.\r\n+                            const { company, users } = await response.json();\r\n+                            \r\n+                            if (!response.ok) throw new Error(company.message); // Usa a mensagem de erro do objeto company\r\n+                            \r\n+                            // MUDANÇA: Passamos os dois objetos para a função do modal.\r\n+                            openCompanyDetailsModal(company, users);\r\n+\r\n+                        } catch (error) {\r\n+                            showToast(error.message, 'error');\r\n+                        }\r\n+                    });\r\n+                });\r\n+\r\n+                // O listener do 'enter-company-btn' precisa ser atualizado também para funcionar com a nova lógica\r\n+                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+                    button.addEventListener('click', async (e) => {\r\n+                        const companyId = e.target.dataset.companyId;\r\n+                        const token = localStorage.getItem('authToken');\r\n+                        try {\r\n+                            // Precisamos buscar os usuários da empresa para poder entrar como o primeiro\r\n+                            const companyDetailsResponse = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                                headers: { 'Authorization': `Bearer ${token}` }\r\n+                            });\r\n+                            const { company, users } = await companyDetailsResponse.json();\r\n+\r\n+                            if (!companyDetailsResponse.ok) throw new Error(company.message);\r\n+                            \r\n+                            if (users.length === 0) {\r\n+                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n+                                return;\r\n+                            }\r\n+\r\n+                            // Entramos como o primeiro usuário da lista\r\n+                            const userId = users[0]._id; \r\n+                            \r\n+                            const impersonateResponse = await fetch(`${API_BASE_URL}/api/admin/impersonate`, {\r\n+                                method: 'POST',\r\n+                                headers: {\r\n+                                    'Content-Type': 'application/json',\r\n+                                    'Authorization': `Bearer ${token}`\r\n+                                },\r\n+                                body: JSON.stringify({ companyId, userId })\r\n+                            });\r\n+                            const data = await impersonateResponse.json();\r\n+                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n+                            \r\n+                            showToast(`Entrando na empresa ${company.nomeEmpresa}...`, 'success');\r\n+                            localStorage.setItem('superAdminToken', token);\r\n+                            localStorage.setItem('authToken', data.token);\r\n+                            currentLoggedInCompany = company;\r\n+                            currentLoggedInUser = data.user;\r\n+                            loggedInViaAdmin = true;\r\n+                            showMainApp();\r\n+                        } catch (error) {\r\n+                            showToast(error.message, 'error');\r\n+                        }\r\n+                    });\r\n+                });\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    }\r\n+\r\n+    if (subscriptionActionBtn) {\r\n+        subscriptionActionBtn.addEventListener('click', async () => {\r\n+            // Desabilita o botão para evitar múltiplos cliques\r\n+            subscriptionActionBtn.disabled = true;\r\n+            subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> Gerando link de pagamento...';\r\n+\r\n+            try {\r\n+                const token = localStorage.getItem('authToken');\r\n+                if (!token) {\r\n+                    // Se não houver token, o usuário não está logado\r\n+                    showToast('Sessão expirada. Por favor, faça o login novamente.', 'error');\r\n+                    showInitialLogin(); // Redireciona para a tela de login\r\n+                    return;\r\n+                }\r\n+\r\n+                // 1. Chamamos a nossa API para criar a preferência de assinatura\r\n+                const response = await fetch(`${API_BASE_URL}/api/payments/create-subscription`, {\r\n+                    method: 'POST',\r\n+                    headers: {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}` // O token é essencial para autenticação!\r\n+                    }\r\n+                });\r\n+\r\n+                const result = await response.json();\r\n+\r\n+                if (!response.ok) {\r\n+                    // Se a API retornar um erro, nós o mostramos na tela\r\n+                    throw new Error(result.message || 'Falha ao criar o link de assinatura.');\r\n+                }\r\n+\r\n+                // 2. Se tudo deu certo, redirecionamos o usuário para a página de pagamento\r\n+                if (result.init_point) {\r\n+                    window.location.href = result.init_point;\r\n+                } else {\r\n+                    throw new Error('Link de pagamento não recebido.');\r\n+                }\r\n+\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+                // Reabilita o botão em caso de erro para o usuário tentar novamente\r\n+                subscriptionActionBtn.disabled = false;\r\n+                subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    createCompanyBtn.addEventListener('click', () => {\r\n+        openAddCompanyModal();\r\n+    });\r\n+\r\n+    // --- Lógica Principal do App de Boletos ---\r\n+    function initializeCalendarDate() {\r\n+        const today = new Date();\r\n+        currentMonth = today.getMonth();\r\n+        currentYear = today.getFullYear();\r\n+        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n+    }\r\n+\r\n+    async function updateBillsOrganizer() {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n+            showInitialLogin(); // Redireciona para o login se não houver token\r\n+            return;\r\n+        }\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos`, {\r\n+                method: 'GET',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) {\r\n+                const errorData = await response.json();\r\n+                throw new Error(errorData.message || \"Erro ao buscar boletos.\");\r\n+            }\r\n+            \r\n+            // A resposta da nova API já vem no formato de uma lista de boletos,\r\n+            // com os dados do usuário \"populados\".\r\n+            userBoletos = await response.json();\r\n+            \r\n+            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+            totalBillsSpan.textContent = totalParcels;\r\n+\r\n+            // As funções de renderização e resumo são chamadas como antes.\r\n+            updateMonthlySummary();\r\n+            \r\n+            // A lógica para alternar entre calendário e lista diária continua a mesma.\r\n+            if (window.innerWidth >= 1024) {\r\n+                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n+                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n+                renderCalendar();\r\n+            } else {\r\n+                document.getElementById('billsOrganizer').classList.add('hidden');\r\n+                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n+                renderDailyBills();\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Se a busca falhar (ex: token expirado), deslogamos o usuário\r\n+            showInitialLogin();\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    }\r\n+\r\n+    function updateMonthlySummary() {\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+            });\r\n+        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalNaoPago = totalMes - totalPago;\r\n+        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return dueDate < today && !parcel.paid;\r\n+            });\r\n+        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n+            {\r\n+                style: 'currency',\r\n+                currency: 'BRL'\r\n+            });\r\n+        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n+        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n+    }\r\n+\r\n+    function renderCalendar() {\r\n+        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+        const calendarDays = document.getElementById('calendarDays');\r\n+        calendarDays.innerHTML = '';\r\n+        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+        for (let i = 0; i < firstDayOfMonth; i++) {\r\n+            const emptyCell = document.createElement('div');\r\n+            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n+            calendarDays.appendChild(emptyCell);\r\n+        }\r\n+        for (let day = 1; day <= daysInMonth; day++) {\r\n+            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+            const dayCell = document.createElement('div');\r\n+            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n+            dayCell.dataset.date = dateStr;\r\n+            const dayHeader = document.createElement('div');\r\n+            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+            dayHeader.textContent = day;\r\n+            dayCell.appendChild(dayHeader);\r\n+            dayCell.addEventListener('click', (e) => {\r\n+                if (e.target.closest('.bill-card')) return;\r\n+                const clickedDate = e.currentTarget.dataset.date;\r\n+                clearBillForm();\r\n+                document.getElementById('dueDate').value = clickedDate;\r\n+                addBillModal.classList.remove('hidden');\r\n+            });\r\n+            userBoletos.forEach(bill => {\r\n+                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                    const parcelElement = document.createElement('div');\r\n+                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n+                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                    dayCell.appendChild(parcelElement);\r\n+                });\r\n+            });\r\n+            calendarDays.appendChild(dayCell);\r\n+        }\r\n+    }\r\n+\r\n+    function renderDailyBills() {\r\n+        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n+    }\r\n+\r\n+    function clearBillForm() {\r\n+        billForm.reset();\r\n+        installmentsPreview.classList.add('hidden');\r\n+        installmentsList.innerHTML = '';\r\n+        currentBill = {};\r\n+    }\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    billForm.addEventListener('submit', function (e) {\r\n+        e.preventDefault();\r\n+        const billName = document.getElementById('billName').value;\r\n+        const dueDate = document.getElementById('dueDate').value;\r\n+        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n+        const installments = parseInt(document.getElementById('installments').value);\r\n+        const description = document.getElementById('description').value;\r\n+        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+        const barcode = document.getElementById('barcode').value;\r\n+        if (!billName || !dueDate || !totalAmount || !installments) {\r\n+            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+            return;\r\n+        }\r\n+        currentBill = {\r\n+            name: billName,\r\n+            parcels: []\r\n+        };\r\n+        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+        installmentsList.innerHTML = '';\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        currentBill.parcels.push({\r\n+            id: `${Date.now()}-${i}`,\r\n+            number: i + 1,\r\n+            amount: parcelAmount,\r\n+            dueDate: dateForInput,\r\n+            paid: false,\r\n+            description: description,\r\n+            barcode: barcode\r\n+        });\r\n+\r\n+        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n+            day: '2-digit',\r\n+            month: '2-digit',\r\n+            year: 'numeric'\r\n+        });\r\n+        \r\n+        const parcelItem = document.createElement('div');\r\n+        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n+        \r\n+        parcelItem.innerHTML = `\r\n+            <div class=\"flex items-center space-x-4\">\r\n+                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n+                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n+            </div>\r\n+            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n+        `;\r\n+        \r\n+        installmentsList.appendChild(parcelItem);\r\n+    }\r\n+        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+            input.addEventListener('input', (e) => {\r\n+                const index = parseInt(e.target.dataset.parcelIndex);\r\n+                const newAmount = parseFloat(e.target.value) || 0;\r\n+                if (!isNaN(newAmount)) {\r\n+                    currentBill.parcels[index].amount = newAmount;\r\n+                    updatePreviewTotal();\r\n+                }\r\n+            });\r\n+            input.addEventListener('blur', (e) => {\r\n+                const newAmount = parseFloat(e.target.value) || 0;\r\n+                e.target.value = newAmount.toFixed(2);\r\n+            });\r\n+        });\r\n+        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+            input.addEventListener('change', (e) => {\r\n+                const index = parseInt(e.target.dataset.parcelIndex);\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            });\r\n+        });\r\n+        installmentsPreview.classList.remove('hidden');\r\n+        updatePreviewTotal();\r\n+    });\r\n+\r\n+    function updatePreviewTotal() {\r\n+        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n+        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+    }\r\n+    addToOrganizer.addEventListener('click', async function () {\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n+            return;\r\n+        }\r\n+        if (!currentBill || !currentBill.name) {\r\n+            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n+            return;\r\n+        }\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos`,\r\n+                {\r\n+                    method: 'POST',\r\n+                    headers:\r\n+                    {\r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    },\r\n+                    body: JSON.stringify(currentBill)\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n+            showToast(data.message, 'success');\r\n+            addBillModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    // --- Lógica do Modal de Edição de Boletos ---\r\n+    function openBillModal(bill, parcel) {\r\n+        // MUDANÇA: Usamos bill._id para o parentId e o parcel já terá o seu próprio _id.\r\n+        selectedParcel = { ...parcel, parentId: bill._id };\r\n+        \r\n+        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n+        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n+        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n+        modalBillBarcodeInput.value = parcel.barcode || '';\r\n+        modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n+            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n+        } else {\r\n+            showFullScreenBarcodeBtn.classList.add('hidden');\r\n+        }\r\n+        billModal.classList.remove('hidden');\r\n+    }\r\n+\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    billModal.addEventListener('click', (e) => {\r\n+        if (e.target === billModal) billModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    saveBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n+        const updatedData = {\r\n+            paid: document.getElementById('modalBillPaid').checked,\r\n+            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n+            dueDate: document.getElementById('modalBillDate').value,\r\n+            description: document.getElementById('modalBillDescription').value,\r\n+            barcode: document.getElementById('modalBillBarcode').value\r\n+        };\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            const response = await fetch(url, { // Usamos a nova URL\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify(updatedData)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Parcela atualizada com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    deleteBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel) return;\r\n+        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        \r\n+        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n+        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n+\r\n+        try {\r\n+            const response = await fetch(url, { // Usamos a nova URL\r\n+                method: 'DELETE',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Parcela excluída com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    deleteEntireBillBtn.addEventListener('click', async () => {\r\n+        if (!selectedParcel || !selectedParcel.parentId) {\r\n+            showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n+            return;\r\n+        }\r\n+        \r\n+        if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n+            return;\r\n+        }\r\n+        \r\n+        const token = localStorage.getItem('authToken');\r\n+        // MUDANÇA: O ID do boleto vem de selectedParcel.parentId, que agora já é o _id correto.\r\n+        const boletoId = selectedParcel.parentId; \r\n+        \r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/boletos/${boletoId}`, {\r\n+                method: 'DELETE',\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            \r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast('Boleto completo excluído com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            updateBillsOrganizer();\r\n+            \r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n+        const token = localStorage.getItem('authToken');\r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+            \r\n+            // A resposta da API é um objeto { company, users }\r\n+            const data = await response.json(); \r\n+\r\n+            if (!response.ok) {\r\n+                // A mensagem de erro pode estar em 'data.message'\r\n+                throw new Error(data.message || 'Não foi possível buscar os detalhes da empresa.');\r\n+            }\r\n+\r\n+            // MUDANÇA CRÍTICA: Em vez de passar o objeto 'data' inteiro,\r\n+            // passamos as suas propriedades 'company' e 'users' corretamente.\r\n+            openCompanyDetailsModal(data.company, data.users);\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    }\r\n+\r\n+    // --- Lógica do Modal de Detalhes da Empresa ---\r\n+    function openCompanyDetailsModal(company, users) {\r\n+        // Guarda a referência da empresa selecionada\r\n+        selectedCompanyForAdmin = company;\r\n+\r\n+        // Preenche os campos de input e texto\r\n+        document.getElementById('modalCompanyNameInput').value = company.nomeEmpresa;\r\n+        modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n+        modalCompanyPasswordInput.value = ''; // Limpa o campo de senha por segurança\r\n+        modalCompanyUsers.innerHTML = '';\r\n+\r\n+        const subscriptionPanel = document.getElementById('adminSubscriptionManagement');\r\n+        if (subscriptionPanel) {\r\n+            if (isAdminLoggedIn) {\r\n+                // Se for o SuperAdmin, mostra o painel de gerenciamento\r\n+                subscriptionPanel.classList.remove('hidden');\r\n+            } else {\r\n+                // Se for qualquer outro usuário (como o Proprietário), esconde o painel\r\n+                subscriptionPanel.classList.add('hidden');\r\n+            }\r\n+        }\r\n+        \r\n+        // Renderiza a lista de usuários\r\n+        if (users && users.length > 0) {\r\n+            const assignableRoles = isAdminLoggedIn ?\r\n+                ['Proprietário', 'Gerente', 'Funcionário'] :\r\n+                ['Gerente', 'Funcionário'];\r\n+\r\n+            users.forEach(user => {\r\n+                const userItem = document.createElement('div');\r\n+                userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n+                const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n+                let roleDisplay = '';\r\n+\r\n+                if (isEditable) {\r\n+                    const optionsHTML = assignableRoles.map(role => {\r\n+                        if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n+                        return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n+                    }).join('');\r\n+                    roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n+                } else {\r\n+                    roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n+                }\r\n+\r\n+                userItem.innerHTML = `\r\n+                    <div class=\"flex items-center space-x-3\">\r\n+                        <span class=\"text-white\">${user.username}</span>\r\n+                        ${roleDisplay}\r\n+                    </div>\r\n+                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                `;\r\n+                modalCompanyUsers.appendChild(userItem);\r\n+            });\r\n+        } else {\r\n+            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+        }\r\n+\r\n+        // --- LÓGICA PARA PREENCHER DADOS DA ASSINATURA ---\r\n+        const subStatusEl = document.getElementById('subscriptionStatus');\r\n+        const subEndDateEl = document.getElementById('subscriptionEndDate');\r\n+\r\n+        if (company.subscription && company.subscription.status) {\r\n+            let statusText = '';\r\n+            let statusColorClass = '';\r\n+\r\n+            switch (company.subscription.status) {\r\n+                case 'active':\r\n+                    statusText = 'Ativa';\r\n+                    statusColorClass = 'text-green-400';\r\n+                    break;\r\n+                case 'inactive':\r\n+                    statusText = 'Inativa';\r\n+                    statusColorClass = 'text-red-400';\r\n+                    break;\r\n+                case 'past_due':\r\n+                    statusText = 'Vencida';\r\n+                    statusColorClass = 'text-orange-400';\r\n+                    break;\r\n+                case 'trial':\r\n+                    statusText = 'Período de Teste';\r\n+                    statusColorClass = 'text-blue-400';\r\n+                    break;\r\n+                default:\r\n+                    statusText = 'Desconhecido';\r\n+                    statusColorClass = 'text-gray-400';\r\n+            }\r\n+            subStatusEl.textContent = statusText;\r\n+            subStatusEl.className = `ml-2 font-bold ${statusColorClass}`;\r\n+\r\n+            if (company.subscription.endDate) {\r\n+                subEndDateEl.textContent = new Date(company.subscription.endDate).toLocaleDateString('pt-BR', {\r\n+                    day: '2-digit', month: '2-digit', year: 'numeric'\r\n+                });\r\n+            } else {\r\n+                subEndDateEl.textContent = 'N/A';\r\n+            }\r\n+        } else {\r\n+            subStatusEl.textContent = 'Não configurada';\r\n+            subEndDateEl.textContent = 'N/A';\r\n+            subStatusEl.className = 'ml-2 font-bold text-gray-400';\r\n+        }\r\n+        \r\n+        // Adiciona novamente os listeners para os botões dentro do modal\r\n+        document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+            button.addEventListener('click', (e) => handleRemoveUser(company._id, e.target.dataset.userId));\r\n+        });\r\n+        document.querySelectorAll('.role-select').forEach(select => {\r\n+            select.addEventListener('change', (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                // Aqui você pode chamar uma função para atualizar o papel do usuário\r\n+            });\r\n+        });\r\n+\r\n+        // Mostra o modal\r\n+        companyDetailsModal.classList.remove('hidden');\r\n+    }\r\n+\r\n+    async function handleRemoveUser(companyId, userId) {\r\n+        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    addUserBtn.addEventListener('click', () => {\r\n+        openAddUserModal();\r\n+    });\r\n+\r\n+    deleteCompanyBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n+            return;\r\n+        }\r\n+        const token = localStorage.getItem('authToken');\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`,\r\n+                {\r\n+                    method: 'DELETE',\r\n+                    headers:\r\n+                    {\r\n+                        'Authorization': `Bearer ${token}`\r\n+                    }\r\n+                });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast(data.message, 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList();\r\n+        }\r\n+        catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) return;\r\n+\r\n+        const token = localStorage.getItem('authToken');\r\n+        const updatedData = {}; // Objeto vazio para guardar apenas o que mudou\r\n+\r\n+        // Pegamos os valores dos campos\r\n+        const newName = document.getElementById('modalCompanyNameInput').value;\r\n+        const newPassword = modalCompanyPasswordInput.value;\r\n+\r\n+        // MUDANÇA: Verificamos se o nome foi alterado e adicionamo-lo ao payload\r\n+        if (newName && newName.trim() !== '' && newName.trim() !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+            updatedData.nomeEmpresa = newName.trim();\r\n+        }\r\n+\r\n+        // A lógica da senha continua, mas agora também é adicionada ao mesmo payload\r\n+        if (newPassword && newPassword.length > 0) {\r\n+            updatedData.newPassword = newPassword;\r\n+        }\r\n+\r\n+        // Se nada foi alterado, informamos o usuário e paramos\r\n+        if (Object.keys(updatedData).length === 0) {\r\n+            showToast(\"Nenhuma alteração para salvar.\", \"info\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`, {\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify(updatedData) // Enviamos o objeto com as alterações\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompanyList(); // Atualizamos a lista de empresas para refletir o novo nome\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    companyDetailsModal.addEventListener('click', (e) => {\r\n+        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n+    });\r\n+    // --- Inicialização ---\r\n+    initializeCalendarDate();\r\n+    initializeApp();\r\n+\r\n+    // Função para abrir e preencher o modal\r\n+    async function openCompanyInfoModal() {\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${currentLoggedInCompany._id}`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            currentCompanyDetails = data.company;\r\n+            document.getElementById('companyInfoCnpj').textContent = formatCnpj(currentCompanyDetails.cnpj);\r\n+            document.getElementById('companyInfoName').value = currentCompanyDetails.nomeEmpresa;\r\n+            document.getElementById('companyInfoEmail').value = currentCompanyDetails.email || '';\r\n+            document.getElementById('companyInfoTelefone').value = currentCompanyDetails.telefoneFixo || '';\r\n+            document.getElementById('companyInfoWhatsapp').value = currentCompanyDetails.telefoneWhatsapp || '';\r\n+\r\n+            // MUDANÇA: Aplicamos as máscaras AQUI, depois de o modal estar preenchido e prestes a ser exibido.\r\n+            const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n+            if (telefoneFixoInput) {\r\n+                IMask(telefoneFixoInput, { mask: '(00) 0000-0000' });\r\n+            }\r\n+            const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n+            if (whatsappInput) {\r\n+                IMask(whatsappInput, { mask: '(00) 00000-0000' });\r\n+            }\r\n+\r\n+            companyInfoModal.classList.remove('hidden');\r\n+\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n+        }\r\n+    }\r\n+\r\n+    // Listener para o link do menu \"Detalhes da Empresa\"\r\n+    menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        // Chama a função para abrir o modal com as informações da empresa\r\n+        openCompanyInfoModal(); \r\n+    });\r\n+\r\n+    // Listener para o botão de salvar\r\n+    saveCompanyInfoBtn.addEventListener('click', async () => {\r\n+        const payload = {\r\n+            nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+            \r\n+            // MUDANÇA: Adicionamos o e-mail ao payload que será enviado para a API\r\n+            email: document.getElementById('companyInfoEmail').value,\r\n+\r\n+            telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+            telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+        };\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${currentCompanyDetails._id}`, {\r\n+                method: 'PATCH',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+            \r\n+            showToast(data.message, 'success');\r\n+            companyInfoModal.classList.add('hidden');\r\n+\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n+        } finally{\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para fechar o modal\r\n+    closeCompanyInfoModalBtn.addEventListener('click', () => {\r\n+        companyInfoModal.classList.add('hidden');\r\n+    });\r\n+\r\n+    // --- LÓGICA PARA MÁSCARAS DE INPUT (IMask.js) ---\r\n+\r\n+    document.addEventListener('DOMContentLoaded', () => {\r\n+        // Máscara para o campo de CNPJ no modal de login da empresa (ESTA FICA)\r\n+        const cnpjInput = document.getElementById('cnpjInput');\r\n+        if (cnpjInput) {\r\n+            const cnpjMask = IMask(cnpjInput, {\r\n+                mask: '00.000.000/0000-00'\r\n+            });\r\n+        }\r\n+        \r\n+        // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n+        const totalAmountInput = document.getElementById('totalAmount');\r\n+        if (totalAmountInput) {\r\n+            const amountMask = IMask(totalAmountInput, {\r\n+                mask: 'R$ num',\r\n+                blocks: {\r\n+                    num: {\r\n+                        mask: Number,\r\n+                        scale: 2,\r\n+                        radix: ',',\r\n+                        thousandsSeparator: '.',\r\n+                        padFractionalZeros: true\r\n+                    }\r\n+                }\r\n+            });\r\n+        }\r\n+\r\n+        // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n+        const modalAmountInput = document.getElementById('modalBillAmount');\r\n+        if (modalAmountInput) {\r\n+            const modalAmountMask = IMask(modalAmountInput, {\r\n+                mask: 'R$ num',\r\n+                blocks: {\r\n+                    num: {\r\n+                        mask: Number,\r\n+                        scale: 2,\r\n+                        radix: ',',\r\n+                        thousandsSeparator: '.',\r\n+                        padFractionalZeros: true\r\n+                    }\r\n+                }\r\n+            });\r\n+        }\r\n+    });\r\n+\r\n+    // Listerner para botão de adição de assinatura\r\n+    document.getElementById('addSubscriptionBtn').addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) {\r\n+            showToast('Nenhuma empresa selecionada.', 'error');\r\n+            return;\r\n+        }\r\n+\r\n+        const daysToAddInput = document.getElementById('daysToAddInput');\r\n+        const daysToAdd = daysToAddInput.value;\r\n+        if (!daysToAdd || parseInt(daysToAdd, 10) <= 0) {\r\n+            showToast('Por favor, insira um número de dias válido.', 'error');\r\n+            return;\r\n+        }\r\n+\r\n+        const companyId = selectedCompanyForAdmin._id;\r\n+        const token = localStorage.getItem('authToken');\r\n+        \r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/subscription`, {\r\n+                method: 'PATCH',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n+                body: JSON.stringify({ daysToAdd: daysToAdd })\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) {\r\n+                throw new Error(data.message);\r\n+            }\r\n+\r\n+            showToast(data.message, 'success');\r\n+            \r\n+            // Limpa o input\r\n+            daysToAddInput.value = '';\r\n+\r\n+            // Atualiza a UI do modal com os novos dados da empresa retornados pela API\r\n+            openCompanyDetailsModal(data.company, data.users);\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    });\r\n+\r\n+    // Listener para o novo botão de remover assinatura\r\n+    document.getElementById('removeSubscriptionBtn').addEventListener('click', async () => {\r\n+        if (!selectedCompanyForAdmin) {\r\n+            showToast('Nenhuma empresa selecionada.', 'error');\r\n+            return;\r\n+        }\r\n+\r\n+        // Pede uma confirmação para evitar cliques acidentais\r\n+        if (!confirm(`Tem certeza que deseja REMOVER a assinatura da empresa \"${selectedCompanyForAdmin.nomeEmpresa}\"? A empresa voltará ao status \"Inativa\".`)) {\r\n+            return;\r\n+        }\r\n+\r\n+        const companyId = selectedCompanyForAdmin._id;\r\n+        const token = localStorage.getItem('authToken');\r\n+        \r\n+        showLoader();\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/subscription`, {\r\n+                method: 'DELETE', // Usamos o método DELETE para chamar a nova rota\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) {\r\n+                throw new Error(data.message);\r\n+            }\r\n+\r\n+            showToast(data.message, 'success');\r\n+            \r\n+            // Atualiza a UI do modal com os novos dados da empresa retornados pela API\r\n+            openCompanyDetailsModal(data.company, data.users);\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    });\r\n+\r\n+    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR USUÁRIO ---\r\n+\r\n+    // Função para abrir o modal\r\n+    function openAddUserModal() {\r\n+        addUserForm.reset(); // Limpa o formulário\r\n+        addUserModal.classList.remove('hidden');\r\n+        document.getElementById('addUsernameInput').focus();\r\n+    }\r\n+\r\n+    // Função para fechar o modal\r\n+    function closeAddUserModal() {\r\n+        addUserModal.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Listeners para fechar/cancelar\r\n+    closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+\r\n+    // Listener para o envio do formulário\r\n+    addUserForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault(); // Impede o recarregamento da página\r\n+\r\n+        const username = document.getElementById('addUsernameInput').value;\r\n+        const password = document.getElementById('addUserPasswordInput').value;\r\n+        const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+\r\n+        // Validação de senha\r\n+        if (password !== confirmPassword) {\r\n+            showToast(\"As senhas não coincidem.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        // Identifica a empresa atual (seja via admin ou login normal)\r\n+        const companyId = selectedCompanyForAdmin ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n+        if (!companyId) {\r\n+            showToast(\"Erro: Não foi possível identificar a empresa.\", \"error\");\r\n+            return;\r\n+        }\r\n+\r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`, {\r\n+                method: 'POST',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify({ username, password, companyId })\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+\r\n+            showToast(data.message, 'success');\r\n+            closeAddUserModal();\r\n+\r\n+            // Atualiza a lista de usuários na tela que estiver aberta\r\n+            if (adminDashboardScreen.classList.contains('hidden')) {\r\n+                // Se estiver no modal de \"Gerenciar Usuários\" do proprietário\r\n+                fetchCompanyDetailsAndOpenModal(companyId, true); // O 'true' indica que é uma atualização\r\n+            } else {\r\n+                // Se estiver no painel do admin\r\n+                renderCompanyList();\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+\r\n+    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR EMPRESA ---\r\n+\r\n+    // Aplica a máscara de CNPJ ao novo campo\r\n+    const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+    if (addCompanyCnpjInput) {\r\n+        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    // Função para abrir o modal\r\n+    function openAddCompanyModal() {\r\n+        addCompanyForm.reset(); // Limpa o formulário\r\n+        addCompanyModal.classList.remove('hidden');\r\n+        document.getElementById('addCompanyNameInput').focus();\r\n+    }\r\n+\r\n+    // Função para fechar o modal\r\n+    function closeAddCompanyModal() {\r\n+        addCompanyModal.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Listeners para fechar/cancelar\r\n+    closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+\r\n+    // Listener para o envio do formulário\r\n+    addCompanyForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const payload = {\r\n+            nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+            cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+            senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+            ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+            ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+        };\r\n+        const token = localStorage.getItem('authToken');\r\n+        if (!token) {\r\n+            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n+            return;\r\n+        }\r\n+        showLoader();\r\n+\r\n+        try {\r\n+            const response = await fetch(`${API_BASE_URL}/api/companies/register`, {\r\n+                method: 'POST',\r\n+                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n+                body: JSON.stringify(payload)\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+            if (!response.ok) throw new Error(data.message);\r\n+\r\n+            showToast(data.message, 'success');\r\n+            closeAddCompanyModal();\r\n+            renderCompanyList(); // Atualiza a lista de empresas no painel de admin\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader()\r\n+        }\r\n+    });\r\n+\r\n+\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752608790005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1643,1962 +1643,29 @@\n             if (whatsappInput) {\r\n                 IMask(whatsappInput, { mask: '(00) 00000-0000' });\r\n             }\r\n \r\n-            companyInfoModal.classList.remove('hidden');\r\n+            const endDateElement = document.getElementById('companyInfoSubscriptionEndDate');\r\n+            const subscriptionStatus = currentCompanyDetails.subscription?.status;\r\n+            const subscriptionEndDate = currentCompanyDetails.subscription?.endDate;\r\n \r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    // Listener para o link do menu \"Detalhes da Empresa\"\r\n-    menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        // Chama a função para abrir o modal com as informações da empresa\r\n-        openCompanyInfoModal(); \r\n-    });\r\n-\r\n-    // Listener para o botão de salvar\r\n-    saveCompanyInfoBtn.addEventListener('click', async () => {\r\n-        const payload = {\r\n-            nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-            \r\n-            // MUDANÇA: Adicionamos o e-mail ao payload que será enviado para a API\r\n-            email: document.getElementById('companyInfoEmail').value,\r\n-\r\n-            telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-            telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-        };\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${currentCompanyDetails._id}`, {\r\n-                method: 'PATCH',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(payload)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast(data.message, 'success');\r\n-            companyInfoModal.classList.add('hidden');\r\n-\r\n-        } catch (error) {\r\n-            showToast('Erro ao salvar alterações: ' + error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal\r\n-    closeCompanyInfoModalBtn.addEventListener('click', () => {\r\n-        companyInfoModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // --- LÓGICA PARA MÁSCARAS DE INPUT (IMask.js) ---\r\n-\r\n-    document.addEventListener('DOMContentLoaded', () => {\r\n-        // Máscara para o campo de CNPJ no modal de login da empresa (ESTA FICA)\r\n-        const cnpjInput = document.getElementById('cnpjInput');\r\n-        if (cnpjInput) {\r\n-            const cnpjMask = IMask(cnpjInput, {\r\n-                mask: '00.000.000/0000-00'\r\n-            });\r\n-        }\r\n-        \r\n-        // Máscara para o campo de Valor (R$) no modal de adicionar boleto\r\n-        const totalAmountInput = document.getElementById('totalAmount');\r\n-        if (totalAmountInput) {\r\n-            const amountMask = IMask(totalAmountInput, {\r\n-                mask: 'R$ num',\r\n-                blocks: {\r\n-                    num: {\r\n-                        mask: Number,\r\n-                        scale: 2,\r\n-                        radix: ',',\r\n-                        thousandsSeparator: '.',\r\n-                        padFractionalZeros: true\r\n-                    }\r\n-                }\r\n-            });\r\n-        }\r\n-\r\n-        // Máscara para o campo de Valor (R$) no modal de editar parcela\r\n-        const modalAmountInput = document.getElementById('modalBillAmount');\r\n-        if (modalAmountInput) {\r\n-            const modalAmountMask = IMask(modalAmountInput, {\r\n-                mask: 'R$ num',\r\n-                blocks: {\r\n-                    num: {\r\n-                        mask: Number,\r\n-                        scale: 2,\r\n-                        radix: ',',\r\n-                        thousandsSeparator: '.',\r\n-                        padFractionalZeros: true\r\n-                    }\r\n-                }\r\n-            });\r\n-        }\r\n-    });\r\n-\r\n-    // Listerner para botão de adição de assinatura\r\n-    document.getElementById('addSubscriptionBtn').addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) {\r\n-            showToast('Nenhuma empresa selecionada.', 'error');\r\n-            return;\r\n-        }\r\n-\r\n-        const daysToAddInput = document.getElementById('daysToAddInput');\r\n-        const daysToAdd = daysToAddInput.value;\r\n-        if (!daysToAdd || parseInt(daysToAdd, 10) <= 0) {\r\n-            showToast('Por favor, insira um número de dias válido.', 'error');\r\n-            return;\r\n-        }\r\n-\r\n-        const companyId = selectedCompanyForAdmin._id;\r\n-        const token = localStorage.getItem('authToken');\r\n-        \r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/subscription`, {\r\n-                method: 'PATCH',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                body: JSON.stringify({ daysToAdd: daysToAdd })\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) {\r\n-                throw new Error(data.message);\r\n-            }\r\n-\r\n-            showToast(data.message, 'success');\r\n-            \r\n-            // Limpa o input\r\n-            daysToAddInput.value = '';\r\n-\r\n-            // Atualiza a UI do modal com os novos dados da empresa retornados pela API\r\n-            openCompanyDetailsModal(data.company, data.users);\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para o novo botão de remover assinatura\r\n-    document.getElementById('removeSubscriptionBtn').addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) {\r\n-            showToast('Nenhuma empresa selecionada.', 'error');\r\n-            return;\r\n-        }\r\n-\r\n-        // Pede uma confirmação para evitar cliques acidentais\r\n-        if (!confirm(`Tem certeza que deseja REMOVER a assinatura da empresa \"${selectedCompanyForAdmin.nomeEmpresa}\"? A empresa voltará ao status \"Inativa\".`)) {\r\n-            return;\r\n-        }\r\n-\r\n-        const companyId = selectedCompanyForAdmin._id;\r\n-        const token = localStorage.getItem('authToken');\r\n-        \r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/subscription`, {\r\n-                method: 'DELETE', // Usamos o método DELETE para chamar a nova rota\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) {\r\n-                throw new Error(data.message);\r\n-            }\r\n-\r\n-            showToast(data.message, 'success');\r\n-            \r\n-            // Atualiza a UI do modal com os novos dados da empresa retornados pela API\r\n-            openCompanyDetailsModal(data.company, data.users);\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    });\r\n-\r\n-    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR USUÁRIO ---\r\n-\r\n-    // Função para abrir o modal\r\n-    function openAddUserModal() {\r\n-        addUserForm.reset(); // Limpa o formulário\r\n-        addUserModal.classList.remove('hidden');\r\n-        document.getElementById('addUsernameInput').focus();\r\n-    }\r\n-\r\n-    // Função para fechar o modal\r\n-    function closeAddUserModal() {\r\n-        addUserModal.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Listeners para fechar/cancelar\r\n-    closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-\r\n-    // Listener para o envio do formulário\r\n-    addUserForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault(); // Impede o recarregamento da página\r\n-\r\n-        const username = document.getElementById('addUsernameInput').value;\r\n-        const password = document.getElementById('addUserPasswordInput').value;\r\n-        const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-\r\n-        // Validação de senha\r\n-        if (password !== confirmPassword) {\r\n-            showToast(\"As senhas não coincidem.\", \"error\");\r\n-            return;\r\n-        }\r\n-\r\n-        // Identifica a empresa atual (seja via admin ou login normal)\r\n-        const companyId = selectedCompanyForAdmin ? selectedCompanyForAdmin._id : currentLoggedInCompany._id;\r\n-        if (!companyId) {\r\n-            showToast(\"Erro: Não foi possível identificar a empresa.\", \"error\");\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`, {\r\n-                method: 'POST',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify({ username, password, companyId })\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-\r\n-            showToast(data.message, 'success');\r\n-            closeAddUserModal();\r\n-\r\n-            // Atualiza a lista de usuários na tela que estiver aberta\r\n-            if (adminDashboardScreen.classList.contains('hidden')) {\r\n-                // Se estiver no modal de \"Gerenciar Usuários\" do proprietário\r\n-                fetchCompanyDetailsAndOpenModal(companyId, true); // O 'true' indica que é uma atualização\r\n-            } else {\r\n-                // Se estiver no painel do admin\r\n-                renderCompanyList();\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    // --- LÓGICA PARA O NOVO MODAL DE ADICIONAR EMPRESA ---\r\n-\r\n-    // Aplica a máscara de CNPJ ao novo campo\r\n-    const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-    if (addCompanyCnpjInput) {\r\n-        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    // Função para abrir o modal\r\n-    function openAddCompanyModal() {\r\n-        addCompanyForm.reset(); // Limpa o formulário\r\n-        addCompanyModal.classList.remove('hidden');\r\n-        document.getElementById('addCompanyNameInput').focus();\r\n-    }\r\n-\r\n-    // Função para fechar o modal\r\n-    function closeAddCompanyModal() {\r\n-        addCompanyModal.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Listeners para fechar/cancelar\r\n-    closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-\r\n-    // Listener para o envio do formulário\r\n-    addCompanyForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const payload = {\r\n-            nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-            cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-            senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-            ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-            ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-        };\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n-            return;\r\n-        }\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/register`, {\r\n-                method: 'POST',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(payload)\r\n-            });\r\n-\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-\r\n-            showToast(data.message, 'success');\r\n-            closeAddCompanyModal();\r\n-            renderCompanyList(); // Atualiza a lista de empresas no painel de admin\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-\r\n-});\n-document.addEventListener('DOMContentLoaded', function() {\r\n-    // --- Elementos HTML (Declarações completas) ---\r\n-    const API_BASE_URL = 'http://localhost:5000';\r\n-    const generalLoader = document.getElementById('generalLoader');\r\n-    const loadingScreen = document.getElementById('loadingScreen');\r\n-    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-    const cnpjInput = document.getElementById('cnpjInput');\r\n-    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-    const adminLoginForm = document.getElementById('adminLoginForm');\r\n-    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-    const companyListDiv = document.getElementById('companyList');\r\n-    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-    const userLoginScreen = document.getElementById('userLoginScreen');\r\n-    const userLoginForm = document.getElementById('userLoginForm');\r\n-    const userInput = document.getElementById('userInput');\r\n-    const userPasswordInput = document.getElementById('userPasswordInput');\r\n-    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-    const welcomeUserText = document.getElementById('welcomeUserText');\r\n-    const mainAppContent = document.getElementById('mainAppContent');\r\n-    const toastMessage = document.getElementById('toastMessage');\r\n-    const logoutBtn = document.getElementById('logoutBtn');\r\n-    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-    const addBillModal = document.getElementById('addBillModal');\r\n-    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n-    const modalCompanyName = document.getElementById('modalCompanyName');\r\n-    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-    const addUserBtn = document.getElementById('addUserBtn');\r\n-    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-    const billModal = document.getElementById('billModal');\r\n-    const closeModalBtn = document.getElementById('closeModal');\r\n-    const saveBillBtn = document.getElementById('saveBill');\r\n-    const deleteBillBtn = document.getElementById('deleteBill');\r\n-    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n-    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n-    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n-    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n-    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-    const settingsBtn = document.getElementById('settingsBtn');\r\n-    const settingsDropdown = document.getElementById('settingsDropdown');\r\n-    const menuEmpresa = document.getElementById('menuEmpresa');\r\n-    const menuUsuarios = document.getElementById('menuUsuarios');\r\n-    const menuPermissoes = document.getElementById('menuPermissoes');\r\n-    const permissionsModal = document.getElementById('permissionsModal');\r\n-    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-    const permissionsContainer = document.getElementById('permissionsContainer');\r\n-    const billForm = document.getElementById('billForm');\r\n-    const installmentsPreview = document.getElementById('installmentsPreview');\r\n-    const installmentsList = document.getElementById('installmentsList');\r\n-    const addToOrganizer = document.getElementById('addToOrganizer');\r\n-    const totalBillsSpan = document.getElementById('totalBills');\r\n-    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-    const clearFormBtn = document.getElementById('clearFormBtn');\r\n-    const prevMonthBtn = document.getElementById('prevMonth');\r\n-    const nextMonthBtn = document.getElementById('nextMonth');\r\n-    const companyInfoModal = document.getElementById('companyInfoModal');\r\n-    const closeCompanyInfoModalBtn = document.getElementById('closeCompanyInfoModal');\r\n-    const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-    const addUserModal = document.getElementById('addUserModal');\r\n-    const addUserForm = document.getElementById('addUserForm');\r\n-    const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n-    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-    const addCompanyModal = document.getElementById('addCompanyModal');\r\n-    const addCompanyForm = document.getElementById('addCompanyForm');\r\n-    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n-    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-    const INACTIVITY_TIMEOUT = 30 * 60 * 1000;\r\n-    const subscriptionModal = document.getElementById('subscriptionModal');\r\n-    const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-    const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-\r\n-    // --- Variáveis de Dados e Estado ---\r\n-    let currentLoggedInCompany = null;\r\n-    let currentLoggedInUser = null;\r\n-    let isAdminLoggedIn = false;\r\n-    let loggedInViaAdmin = false;\r\n-    let selectedCompanyForAdmin = null;\r\n-    let currentBill = {};\r\n-    let selectedParcel = null;\r\n-    let userBoletos = [];\r\n-    let currentMonth, currentYear;\r\n-    let currentCompanyDetails = null;\r\n-    let inactivityTimer; // Variável para guardar o nosso cronómetro\r\n-\r\n-\r\n-        // --- LÓGICA DE INATIVIDADE E LOGOUT AUTOMÁTICO ---\r\n-    function logoutDueToInactivity() {\r\n-        // Primeiro, limpamos o cronómetro para não tentar fazer logout de novo\r\n-        clearInactivityTimer(); \r\n-        // Mostramos uma mensagem amigável\r\n-        showToast(\"Você foi desconectado por inatividade.\", \"info\");\r\n-        // Chamamos a função de login, que já limpa tudo\r\n-        showInitialLogin(); \r\n-    }\r\n-\r\n-    // Função que reinicia o cronómetro\r\n-    function resetInactivityTimer() {\r\n-        // Limpa o cronómetro antigo\r\n-        clearTimeout(inactivityTimer);\r\n-        // Cria um novo cronómetro que chamará a função de logout depois de 30 minutos\r\n-        inactivityTimer = setTimeout(logoutDueToInactivity, INACTIVITY_TIMEOUT);\r\n-    }\r\n-\r\n-    // Função para iniciar o monitoramento de inatividade\r\n-    function startInactivityTimer() {\r\n-        // Adiciona \"espiões\" para vários tipos de atividade do usuário.\r\n-        // Qualquer uma destas ações irá reiniciar o cronómetro.\r\n-        window.addEventListener('mousemove', resetInactivityTimer);\r\n-        window.addEventListener('mousedown', resetInactivityTimer);\r\n-        window.addEventListener('keypress', resetInactivityTimer);\r\n-        window.addEventListener('scroll', resetInactivityTimer, true);\r\n-        window.addEventListener('touchstart', resetInactivityTimer);\r\n-        \r\n-        // Inicia o cronómetro pela primeira vez\r\n-        resetInactivityTimer();\r\n-        console.log(\"Monitor de inatividade iniciado. Logout em 30 minutos.\");\r\n-    }\r\n-\r\n-    // Função para parar o monitoramento e limpar tudo\r\n-    function clearInactivityTimer() {\r\n-        clearTimeout(inactivityTimer);\r\n-        // Remove os \"espiões\" para não consumir memória desnecessariamente\r\n-        window.removeEventListener('mousemove', resetInactivityTimer);\r\n-        window.removeEventListener('mousedown', resetInactivityTimer);\r\n-        window.removeEventListener('keypress', resetInactivityTimer);\r\n-        window.removeEventListener('scroll', resetInactivityTimer, true);\r\n-        window.removeEventListener('touchstart', resetInactivityTimer);\r\n-        console.log(\"Monitor de inatividade parado.\");\r\n-    }\r\n-\r\n-\r\n-    // --- Lógica para o Modal de Adicionar Boletos ---\r\n-    openAddBillModalBtn.addEventListener('click', () => {\r\n-        clearBillForm();\r\n-        addBillModal.classList.remove('hidden');\r\n-    });\r\n-    closeAddBillModalBtn.addEventListener('click', () => {\r\n-        addBillModal.classList.add('hidden');\r\n-    });\r\n-    addBillModal.addEventListener('click', (e) => {\r\n-        if (e.target === addBillModal) {\r\n-            addBillModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n-    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n-        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n-        if (!originalBarcode) return;\r\n-        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n-        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n-            try {\r\n-                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n-                    {\r\n-                        format: \"ITF\",\r\n-                        width: 1.5,\r\n-                        height: 80,\r\n-                        displayValue: true,\r\n-                        fontSize: 20,\r\n-                        lineColor: \"#000\",\r\n-                        background: \"#FFF\"\r\n-                    });\r\n-                barcodeFullScreenModal.classList.remove('hidden');\r\n-            }\r\n-            catch (e) {\r\n-                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n-            }\r\n-        }\r\n-        else {\r\n-            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n-        }\r\n-    });\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n-        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // Listener para o item \"Gerenciar Usuários\"\r\n-    menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        // Usamos o ID da empresa logada para buscar os detalhes\r\n-        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-        if (companyId) {\r\n-            // Chama a função para abrir o modal com a lista de usuários\r\n-            fetchCompanyDetailsAndOpenModal(companyId); \r\n-        }\r\n-    });\r\n-\r\n-\r\n-\r\n-// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n-settingsBtn.addEventListener('click', (event) => {\r\n-    event.stopPropagation();\r\n-    settingsDropdown.classList.toggle('hidden');\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (!settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n-\r\n-// Função auxiliar para os links de Empresa e Usuários\r\n-const openManagementModal = (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-    if (companyId) {\r\n-        fetchCompanyDetailsAndOpenModal(companyId);\r\n-    }\r\n-};\r\n-\r\n-// Listener EXCLUSIVO para o link de Permissões\r\n-    menuPermissoes.addEventListener('click', async (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        showLoader();\r\n-        \r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const permissions = await response.json();\r\n-            if (!response.ok) throw new Error(permissions.message);\r\n-\r\n-            // Chamamos a função para preencher o modal com os dados\r\n-            populatePermissionsModal(permissions);\r\n-\r\n-            permissionsModal.classList.remove('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal de permissões\r\n-    closePermissionsModal.addEventListener('click', () => {\r\n-        permissionsModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // Nova função para popular os interruptores com os dados do backend\r\n-    function populatePermissionsModal(permissions) {\r\n-        // Lógica para Gerente\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        // MUDANÇA: Marca o rádio correto com base no valor (none, own, all)\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-        \r\n-        // Lógica para Funcionário\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-    }\r\n-\r\n-// Atualizamos o listener do menu para usar a nova função\r\n-menuPermissoes.addEventListener('click', async (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    \r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n-            headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n-        const permissions = await response.json();\r\n-        if (!response.ok) throw new Error(permissions.message);\r\n-\r\n-        // Chamamos a função para preencher o modal com os dados\r\n-        populatePermissionsModal(permissions);\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-    }\r\n-});\r\n-\r\n-\r\n-    // Adicionamos o listener para o novo botão Salvar\r\n-    document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n-        // Lemos o estado de cada interruptor e rádio\r\n-        const newPermissions = {\r\n-            Gerente: {\r\n-                canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-                // MUDANÇA: Pega o valor do rádio selecionado\r\n-                canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-                canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-            },\r\n-            Funcionário: {\r\n-                canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-                canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-                canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-            }\r\n-        };\r\n-        showLoader()\r\n-\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n-                method: 'PATCH',\r\n-                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n-                body: JSON.stringify(newPermissions)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast(data.message, 'success');\r\n-            permissionsModal.classList.add('hidden');\r\n-        } catch (error) {\r\n-            showToast('Erro ao salvar permissões: ' + error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    // Listener para fechar o modal\r\n-    closePermissionsModal.addEventListener('click', () => {\r\n-        permissionsModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n-    function closeQuickAddModal() {\r\n-        quickUserAddModal.classList.add('hidden');\r\n-    }\r\n-    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n-    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n-    quickUserAddForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const username = document.getElementById('quickAddUsername').value;\r\n-        const password = document.getElementById('quickAddPassword').value;\r\n-        if (!currentLoggedInCompany) {\r\n-            showToast('Erro: Empresa não identificada.', 'error');\r\n-            return;\r\n-        }\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/register/user`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n+            if (endDateElement && subscriptionStatus === 'active' && subscriptionEndDate) {\r\n+                // Formata a data para o padrão brasileiro (dd/mm/aaaa)\r\n+                const formattedDate = new Date(subscriptionEndDate).toLocaleDateString('pt-BR', {\r\n+                    day: '2-digit',\r\n+                    month: '2-digit',\r\n+                    year: 'numeric'\r\n                 });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            closeQuickAddModal();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-    // --- Funções de Utilitário e de Tela ---\r\n-    function showToast(message, type = 'success') {\r\n-        toastMessage.textContent = message;\r\n-        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n-        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n-        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n-        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n-        toastMessage.classList.remove('hidden');\r\n-        setTimeout(() => {\r\n-            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n-            setTimeout(() => {\r\n-                toastMessage.classList.add('hidden');\r\n-                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n-            }, 300);\r\n-        }, 3000);\r\n-    }\r\n-\r\n-    // --- Funções para o Loader Genérico ---\r\n-    function showLoader() {\r\n-        generalLoader.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function hideLoader() {\r\n-        generalLoader.classList.add('hidden');\r\n-    }\r\n-\r\n-    function hideAllScreens() {\r\n-        initialLoginScreen.classList.add('hidden');\r\n-        cnpjLoginScreen.classList.add('hidden');\r\n-        adminLoginScreen.classList.add('hidden');\r\n-        userLoginScreen.classList.add('hidden');\r\n-        adminDashboardScreen.classList.add('hidden');\r\n-        mainAppContent.classList.add('hidden');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        addBillModal.classList.add('hidden');\r\n-        billModal.classList.add('hidden');\r\n-        barcodeFullScreenModal.classList.add('hidden');\r\n-        quickUserAddModal.classList.add('hidden');\r\n-        openAddBillModalBtn.classList.add('hidden');\r\n-    }\r\n-\r\n-    /**\r\n-     * Verifica o status da assinatura da empresa e bloqueia o acesso se necessário.\r\n-     * @param {object} company - O objeto da empresa retornado pela API.\r\n-     * @returns {boolean} - Retorna 'true' se o acesso for permitido, 'false' se for bloqueado.\r\n-     */\r\n-    function checkSubscription(company) {\r\n-        const status = company.subscription?.status; // Usamos 'optional chaining' por segurança\r\n-\r\n-        // Se a assinatura estiver ativa, permite o acesso.\r\n-        if (status === 'active') {\r\n-            return true;\r\n-        }\r\n-\r\n-        // Se a assinatura não estiver ativa, configura e mostra o modal.\r\n-        const title = document.getElementById('subscriptionTitle');\r\n-        const message = document.getElementById('subscriptionMessage');\r\n-        const icon = document.getElementById('subscriptionIcon');\r\n-        const actionBtn = document.getElementById('subscriptionActionBtn');\r\n-\r\n-        if (status === 'inactive' || status === 'trial') {\r\n-            title.textContent = 'Ative sua Assinatura';\r\n-            message.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-            actionBtn.textContent = 'Realizar Assinatura';\r\n-            icon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-        } else { // 'past_due' ou qualquer outro status\r\n-            title.textContent = 'Assinatura Pendente';\r\n-            message.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-            actionBtn.textContent = 'Renovar Assinatura';\r\n-            icon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-        }\r\n-\r\n-        subscriptionModal.classList.remove('hidden');\r\n-        return false; // Bloqueia o acesso ao resto da aplicação\r\n-    }\r\n-\r\n-    subscriptionLogoutBtn.addEventListener('click', () => {\r\n-    showInitialLogin();\r\n-    });\r\n-\r\n-    async function initializeApp() {\r\n-        // 1. Verifica se há um login de empresa pendente vindo da página principal\r\n-        const pendingCompanyLogin = localStorage.getItem('pendingCompanyLogin');\r\n-        if (pendingCompanyLogin) {\r\n-            try {\r\n-                const company = JSON.parse(pendingCompanyLogin);\r\n-                currentLoggedInCompany = company; // Define o estado da empresa\r\n-                \r\n-                // Limpa o item para não ser usado novamente\r\n-                localStorage.removeItem('pendingCompanyLogin'); \r\n-                \r\n-                // Pula diretamente para a tela de login do usuário\r\n-                showUserLogin(company.nomeEmpresa); \r\n-                loadingScreen.classList.add('hidden'); // Esconde o loader inicial\r\n-                return; // Para a execução para não continuar com a verificação de token\r\n-            } catch(e) {\r\n-                // Se houver erro ao ler os dados, limpa e vai para o login normal\r\n-                localStorage.removeItem('pendingCompanyLogin');\r\n+                endDateElement.textContent = formattedDate;\r\n+                // Garante que a cor seja verde para assinaturas ativas\r\n+                endDateElement.className = 'mt-1 text-lg font-semibold text-green-400';\r\n+            } else if (endDateElement) {\r\n+                // Caso a assinatura esteja inativa ou sem data, exibe 'N/A'\r\n+                endDateElement.textContent = 'Inativa';\r\n+                // Muda a cor para cinza/vermelho para indicar inatividade\r\n+                endDateElement.className = 'mt-1 text-lg font-semibold text-red-400';\r\n             }\r\n-        }\r\n \r\n-        // 2. Se não houver login pendente, continua com a verificação normal de sessão\r\n-        const token = localStorage.getItem('authToken');\r\n-\r\n-        if (!token) {\r\n-            showInitialLogin();\r\n-            loadingScreen.classList.add('hidden');\r\n-            return;\r\n-        }\r\n-\r\n-        // 3. Se há um token, tentamos verificar com o backend\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-\r\n-            if (!response.ok) {\r\n-                // Se o token for inválido ou expirado, limpa e vai para o login.\r\n-                localStorage.removeItem('authToken');\r\n-                localStorage.removeItem('superAdminToken');\r\n-                showInitialLogin();\r\n-                return;\r\n-            }\r\n-\r\n-            const data = await response.json();\r\n-            \r\n-            // 4. Com base na resposta, decide para onde ir\r\n-            if (data.user.role === 'SuperAdmin') {\r\n-                isAdminLoggedIn = true;\r\n-                showAdminDashboard();\r\n-            } else {\r\n-                // Para usuários normais, o acesso depende da assinatura da empresa\r\n-                currentLoggedInUser = data.user;\r\n-                currentLoggedInCompany = data.company;\r\n-                isAdminLoggedIn = false;\r\n-\r\n-                const isSubscriptionActive = currentLoggedInCompany.subscription?.status === 'active';\r\n-\r\n-                if (isSubscriptionActive) {\r\n-                    // Se a assinatura estiver ATIVA, todos têm acesso.\r\n-                    showMainApp();\r\n-                } else {\r\n-                    // Se a assinatura NÃO estiver ativa...\r\n-                    if (currentLoggedInUser.role === 'Proprietário') {\r\n-                        // ...e o usuário for o Proprietário, mostra o modal de renovação.\r\n-                        checkSubscription(currentLoggedInCompany);\r\n-                    } else {\r\n-                        // ...e for um Gerente ou Funcionário, mostra o modal de acesso bloqueado.\r\n-                        showAccessBlockedModal();\r\n-                    }\r\n-                }\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            // Em caso de erro de rede, etc., sempre vamos para a tela de login por segurança.\r\n-            showInitialLogin();\r\n-        } finally {\r\n-            // Garante que a tela de carregamento da sessão seja escondida, não importa o resultado.\r\n-            loadingScreen.classList.add('hidden');\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Verifica o status da assinatura e mostra o modal apropriado para o Proprietário.\r\n-     * @param {object} company - O objeto da empresa retornado pela API.\r\n-     */\r\n-    function checkSubscription(company) {\r\n-        const status = company.subscription?.status;\r\n-\r\n-        // Se a assinatura estiver ativa, não faz nada e permite o acesso.\r\n-        if (status === 'active') {\r\n-            return true;\r\n-        }\r\n-\r\n-        // Se não estiver ativa, configura e mostra o modal de assinatura.\r\n-        const title = document.getElementById('subscriptionTitle');\r\n-        const message = document.getElementById('subscriptionMessage');\r\n-        const icon = document.getElementById('subscriptionIcon');\r\n-        const actionBtn = document.getElementById('subscriptionActionBtn');\r\n-\r\n-        if (status === 'inactive' || status === 'trial') {\r\n-            title.textContent = 'Ative sua Assinatura';\r\n-            message.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-            actionBtn.textContent = 'Realizar Assinatura';\r\n-            icon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-        } else { // 'past_due' ou qualquer outro status\r\n-            title.textContent = 'Assinatura Pendente';\r\n-            message.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-            actionBtn.textContent = 'Renovar Assinatura';\r\n-            icon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-        }\r\n-\r\n-        subscriptionModal.classList.remove('hidden');\r\n-        return false; // Retorna false para indicar que o acesso está bloqueado.\r\n-    }\r\n-\r\n-    function showAccessBlockedModal() {\r\n-        const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-        const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-        \r\n-        hideAllScreens();\r\n-        \r\n-        accessBlockedModal.classList.remove('hidden');\r\n-        \r\n-        // Adiciona um listener para o botão de sair deste modal\r\n-        if(blockedAccessLogoutBtn) {\r\n-            blockedAccessLogoutBtn.addEventListener('click', showInitialLogin);\r\n-        }\r\n-    }\r\n-\r\n-    function showInitialLogin() {\r\n-        clearInactivityTimer();\r\n-        hideAllScreens();\r\n-        loadingScreen.classList.add('hidden');\r\n-        initialLoginScreen.classList.remove('hidden');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        currentLoggedInCompany = null;\r\n-        currentLoggedInUser = null;\r\n-        isAdminLoggedIn = false;\r\n-        loggedInViaAdmin = false;\r\n-    }\r\n-\r\n-    function showCnpjLogin() {\r\n-        hideAllScreens();\r\n-        cnpjLoginForm.reset();\r\n-        cnpjLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showAdminLogin() {\r\n-        hideAllScreens();\r\n-        adminLoginForm.reset();\r\n-        adminLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showUserLogin(companyName) {\r\n-        hideAllScreens();\r\n-        userLoginForm.reset();\r\n-        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-        userLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    function showMainApp() {\r\n-        hideAllScreens();\r\n-        mainAppContent.classList.remove('hidden');\r\n-\r\n-        if (currentLoggedInUser && currentLoggedInUser.username) {\r\n-            document.getElementById('loggedInUserDisplay').textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-        }\r\n-\r\n-        if (loggedInViaAdmin) {\r\n-            backToAdminBtn.classList.remove('hidden');\r\n-        } else {\r\n-            backToAdminBtn.classList.add('hidden');\r\n-        }\r\n-        \r\n-        if (!isAdminLoggedIn && currentLoggedInUser.role === 'Proprietário') {\r\n-            settingsMenuContainer.classList.remove('hidden');\r\n-        } else {\r\n-            settingsMenuContainer.classList.add('hidden');\r\n-        }\r\n-\r\n-        openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-        updateBillsOrganizer();\r\n-        startInactivityTimer();\r\n-    }\r\n-\r\n-    function showAdminDashboard() {\r\n-        hideAllScreens();\r\n-        adminDashboardScreen.classList.remove('hidden');\r\n-        renderCompanyList();\r\n-        tartInactivityTimer();\r\n-    }\r\n-\r\n-    function formatCnpj(value) {\r\n-        value = value.replace(/\\D/g, '');\r\n-        if (value.length > 14) value = value.slice(0, 14);\r\n-        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n-        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n-        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n-        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n-        return value;\r\n-    }\r\n-    // --- Lógica de Navegação do Calendário ---\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth--;\r\n-        if (currentMonth < 0) {\r\n-            currentMonth = 11;\r\n-            currentYear--;\r\n-        }\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth++;\r\n-        if (currentMonth > 11) {\r\n-            currentMonth = 0;\r\n-            currentYear++;\r\n-        }\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    // --- Lógica de Autenticação e Outras Funções ---\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const cnpj = cnpjInput.value;\r\n-        const password = cnpjPasswordInput.value;\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/login/company`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            cnpj,\r\n-                            password\r\n-                        }),\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInCompany = data.company;\r\n-            loggedInViaAdmin = false;\r\n-            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    adminLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const username = adminUsernameInput.value;\r\n-        const password = adminPasswordInput.value;\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/login/admin`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            localStorage.setItem('authToken', data.token);\r\n-            isAdminLoggedIn = true;\r\n-            showToast('Login de Administrador bem-sucedido!', 'success');\r\n-            showAdminDashboard();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-    userLoginForm.addEventListener('submit', async function (e) {\r\n-        e.preventDefault();\r\n-        const username = userInput.value;\r\n-        const password = userPasswordInput.value;\r\n-        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n-            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/auth/login/user`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json'\r\n-                    },\r\n-                    body: JSON.stringify(\r\n-                        {\r\n-                            username,\r\n-                            password,\r\n-                            companyId: currentLoggedInCompany._id\r\n-                        })\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            localStorage.setItem('authToken', data.token);\r\n-            currentLoggedInUser = data.user;\r\n-            showMainApp();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    });\r\n-    backToAdminBtn.addEventListener('click', () => {\r\n-        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n-\r\n-        // 1. Recuperamos o token original do admin que guardámos\r\n-        const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-        if (!adminToken) {\r\n-            showToast(\"Erro: Token de administrador não encontrado. Faça o login novamente.\", \"error\");\r\n-            showInitialLogin();\r\n-            return;\r\n-        }\r\n-\r\n-        // 2. Restauramos o token do admin como o token ativo\r\n-        localStorage.setItem('authToken', adminToken);\r\n-        localStorage.removeItem('superAdminToken'); // Limpamos o token temporário\r\n-\r\n-        // 3. Resetamos o estado da aplicação e mostramos o painel\r\n-        currentLoggedInUser = null;\r\n-        currentLoggedInCompany = null;\r\n-        loggedInViaAdmin = false;\r\n-        isAdminLoggedIn = true;\r\n-        showAdminDashboard();\r\n-    });\r\n-\r\n-    async function renderCompanyList() {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) return;\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies`, {\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-\r\n-            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n-\r\n-            const companies = await response.json();\r\n-            companyListDiv.innerHTML = '';\r\n-\r\n-            if (companies.length === 0) {\r\n-                noCompaniesMessage.classList.remove('hidden');\r\n-            } else {\r\n-                noCompaniesMessage.classList.add('hidden');\r\n-                companies.forEach(company => {\r\n-                    const companyCard = document.createElement('div');\r\n-                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                    \r\n-                    // MUDANÇA: A API agora não retorna a contagem de usuários diretamente na lista.\r\n-                    // Podemos mostrar esta informação de outra forma ou remover por enquanto para simplificar.\r\n-                    companyCard.innerHTML = `\r\n-                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                        </div>\r\n-                    `;\r\n-                    companyListDiv.appendChild(companyCard);\r\n-                });\r\n-\r\n-                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n-                    button.addEventListener('click', async (e) => {\r\n-                        const companyId = e.target.dataset.companyId;\r\n-                        const token = localStorage.getItem('authToken');\r\n-                        try {\r\n-                            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n-                                headers: {\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                }\r\n-                            });\r\n-                            \r\n-                            // MUDANÇA: A resposta agora é desestruturada em 'company' e 'users'.\r\n-                            const { company, users } = await response.json();\r\n-                            \r\n-                            if (!response.ok) throw new Error(company.message); // Usa a mensagem de erro do objeto company\r\n-                            \r\n-                            // MUDANÇA: Passamos os dois objetos para a função do modal.\r\n-                            openCompanyDetailsModal(company, users);\r\n-\r\n-                        } catch (error) {\r\n-                            showToast(error.message, 'error');\r\n-                        }\r\n-                    });\r\n-                });\r\n-\r\n-                // O listener do 'enter-company-btn' precisa ser atualizado também para funcionar com a nova lógica\r\n-                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-                    button.addEventListener('click', async (e) => {\r\n-                        const companyId = e.target.dataset.companyId;\r\n-                        const token = localStorage.getItem('authToken');\r\n-                        try {\r\n-                            // Precisamos buscar os usuários da empresa para poder entrar como o primeiro\r\n-                            const companyDetailsResponse = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n-                                headers: { 'Authorization': `Bearer ${token}` }\r\n-                            });\r\n-                            const { company, users } = await companyDetailsResponse.json();\r\n-\r\n-                            if (!companyDetailsResponse.ok) throw new Error(company.message);\r\n-                            \r\n-                            if (users.length === 0) {\r\n-                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n-                                return;\r\n-                            }\r\n-\r\n-                            // Entramos como o primeiro usuário da lista\r\n-                            const userId = users[0]._id; \r\n-                            \r\n-                            const impersonateResponse = await fetch(`${API_BASE_URL}/api/admin/impersonate`, {\r\n-                                method: 'POST',\r\n-                                headers: {\r\n-                                    'Content-Type': 'application/json',\r\n-                                    'Authorization': `Bearer ${token}`\r\n-                                },\r\n-                                body: JSON.stringify({ companyId, userId })\r\n-                            });\r\n-                            const data = await impersonateResponse.json();\r\n-                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n-                            \r\n-                            showToast(`Entrando na empresa ${company.nomeEmpresa}...`, 'success');\r\n-                            localStorage.setItem('superAdminToken', token);\r\n-                            localStorage.setItem('authToken', data.token);\r\n-                            currentLoggedInCompany = company;\r\n-                            currentLoggedInUser = data.user;\r\n-                            loggedInViaAdmin = true;\r\n-                            showMainApp();\r\n-                        } catch (error) {\r\n-                            showToast(error.message, 'error');\r\n-                        }\r\n-                    });\r\n-                });\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    }\r\n-\r\n-    if (subscriptionActionBtn) {\r\n-        subscriptionActionBtn.addEventListener('click', async () => {\r\n-            // Desabilita o botão para evitar múltiplos cliques\r\n-            subscriptionActionBtn.disabled = true;\r\n-            subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> Gerando link de pagamento...';\r\n-\r\n-            try {\r\n-                const token = localStorage.getItem('authToken');\r\n-                if (!token) {\r\n-                    // Se não houver token, o usuário não está logado\r\n-                    showToast('Sessão expirada. Por favor, faça o login novamente.', 'error');\r\n-                    showInitialLogin(); // Redireciona para a tela de login\r\n-                    return;\r\n-                }\r\n-\r\n-                // 1. Chamamos a nossa API para criar a preferência de assinatura\r\n-                const response = await fetch(`${API_BASE_URL}/api/payments/create-subscription`, {\r\n-                    method: 'POST',\r\n-                    headers: {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}` // O token é essencial para autenticação!\r\n-                    }\r\n-                });\r\n-\r\n-                const result = await response.json();\r\n-\r\n-                if (!response.ok) {\r\n-                    // Se a API retornar um erro, nós o mostramos na tela\r\n-                    throw new Error(result.message || 'Falha ao criar o link de assinatura.');\r\n-                }\r\n-\r\n-                // 2. Se tudo deu certo, redirecionamos o usuário para a página de pagamento\r\n-                if (result.init_point) {\r\n-                    window.location.href = result.init_point;\r\n-                } else {\r\n-                    throw new Error('Link de pagamento não recebido.');\r\n-                }\r\n-\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-                // Reabilita o botão em caso de erro para o usuário tentar novamente\r\n-                subscriptionActionBtn.disabled = false;\r\n-                subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    createCompanyBtn.addEventListener('click', () => {\r\n-        openAddCompanyModal();\r\n-    });\r\n-\r\n-    // --- Lógica Principal do App de Boletos ---\r\n-    function initializeCalendarDate() {\r\n-        const today = new Date();\r\n-        currentMonth = today.getMonth();\r\n-        currentYear = today.getFullYear();\r\n-        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n-    }\r\n-\r\n-    async function updateBillsOrganizer() {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n-            showInitialLogin(); // Redireciona para o login se não houver token\r\n-            return;\r\n-        }\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            // O endpoint continua o mesmo, mas o que acontece no backend é muito mais eficiente agora.\r\n-            const response = await fetch(`${API_BASE_URL}/api/boletos`, {\r\n-                method: 'GET',\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-\r\n-            if (!response.ok) {\r\n-                const errorData = await response.json();\r\n-                throw new Error(errorData.message || \"Erro ao buscar boletos.\");\r\n-            }\r\n-            \r\n-            // A resposta da nova API já vem no formato de uma lista de boletos,\r\n-            // com os dados do usuário \"populados\".\r\n-            userBoletos = await response.json();\r\n-            \r\n-            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-            totalBillsSpan.textContent = totalParcels;\r\n-\r\n-            // As funções de renderização e resumo são chamadas como antes.\r\n-            updateMonthlySummary();\r\n-            \r\n-            // A lógica para alternar entre calendário e lista diária continua a mesma.\r\n-            if (window.innerWidth >= 1024) {\r\n-                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n-                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n-                renderCalendar();\r\n-            } else {\r\n-                document.getElementById('billsOrganizer').classList.add('hidden');\r\n-                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n-                renderDailyBills();\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Se a busca falhar (ex: token expirado), deslogamos o usuário\r\n-            showInitialLogin();\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    }\r\n-\r\n-    function updateMonthlySummary() {\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n-            .filter(parcel => {\r\n-                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-            });\r\n-        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const totalNaoPago = totalMes - totalPago;\r\n-        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-            .filter(parcel => {\r\n-                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                return dueDate < today && !parcel.paid;\r\n-            });\r\n-        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n-            {\r\n-                style: 'currency',\r\n-                currency: 'BRL'\r\n-            });\r\n-        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n-        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n-    }\r\n-\r\n-    function renderCalendar() {\r\n-        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-        const calendarDays = document.getElementById('calendarDays');\r\n-        calendarDays.innerHTML = '';\r\n-        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-        for (let i = 0; i < firstDayOfMonth; i++) {\r\n-            const emptyCell = document.createElement('div');\r\n-            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n-            calendarDays.appendChild(emptyCell);\r\n-        }\r\n-        for (let day = 1; day <= daysInMonth; day++) {\r\n-            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-            const dayCell = document.createElement('div');\r\n-            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n-            dayCell.dataset.date = dateStr;\r\n-            const dayHeader = document.createElement('div');\r\n-            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-            dayHeader.textContent = day;\r\n-            dayCell.appendChild(dayHeader);\r\n-            dayCell.addEventListener('click', (e) => {\r\n-                if (e.target.closest('.bill-card')) return;\r\n-                const clickedDate = e.currentTarget.dataset.date;\r\n-                clearBillForm();\r\n-                document.getElementById('dueDate').value = clickedDate;\r\n-                addBillModal.classList.remove('hidden');\r\n-            });\r\n-            userBoletos.forEach(bill => {\r\n-                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                    const parcelElement = document.createElement('div');\r\n-                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n-                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n-                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                    dayCell.appendChild(parcelElement);\r\n-                });\r\n-            });\r\n-            calendarDays.appendChild(dayCell);\r\n-        }\r\n-    }\r\n-\r\n-    function renderDailyBills() {\r\n-        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n-    }\r\n-\r\n-    function clearBillForm() {\r\n-        billForm.reset();\r\n-        installmentsPreview.classList.add('hidden');\r\n-        installmentsList.innerHTML = '';\r\n-        currentBill = {};\r\n-    }\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    billForm.addEventListener('submit', function (e) {\r\n-        e.preventDefault();\r\n-        const billName = document.getElementById('billName').value;\r\n-        const dueDate = document.getElementById('dueDate').value;\r\n-        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n-        const installments = parseInt(document.getElementById('installments').value);\r\n-        const description = document.getElementById('description').value;\r\n-        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-        const barcode = document.getElementById('barcode').value;\r\n-        if (!billName || !dueDate || !totalAmount || !installments) {\r\n-            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-            return;\r\n-        }\r\n-        currentBill = {\r\n-            name: billName,\r\n-            parcels: []\r\n-        };\r\n-        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-        installmentsList.innerHTML = '';\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        currentBill.parcels.push({\r\n-            id: `${Date.now()}-${i}`,\r\n-            number: i + 1,\r\n-            amount: parcelAmount,\r\n-            dueDate: dateForInput,\r\n-            paid: false,\r\n-            description: description,\r\n-            barcode: barcode\r\n-        });\r\n-\r\n-        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n-            day: '2-digit',\r\n-            month: '2-digit',\r\n-            year: 'numeric'\r\n-        });\r\n-        \r\n-        const parcelItem = document.createElement('div');\r\n-        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n-        \r\n-        parcelItem.innerHTML = `\r\n-            <div class=\"flex items-center space-x-4\">\r\n-                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n-                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n-            </div>\r\n-            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n-        `;\r\n-        \r\n-        installmentsList.appendChild(parcelItem);\r\n-    }\r\n-        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-            input.addEventListener('input', (e) => {\r\n-                const index = parseInt(e.target.dataset.parcelIndex);\r\n-                const newAmount = parseFloat(e.target.value) || 0;\r\n-                if (!isNaN(newAmount)) {\r\n-                    currentBill.parcels[index].amount = newAmount;\r\n-                    updatePreviewTotal();\r\n-                }\r\n-            });\r\n-            input.addEventListener('blur', (e) => {\r\n-                const newAmount = parseFloat(e.target.value) || 0;\r\n-                e.target.value = newAmount.toFixed(2);\r\n-            });\r\n-        });\r\n-        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-            input.addEventListener('change', (e) => {\r\n-                const index = parseInt(e.target.dataset.parcelIndex);\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            });\r\n-        });\r\n-        installmentsPreview.classList.remove('hidden');\r\n-        updatePreviewTotal();\r\n-    });\r\n-\r\n-    function updatePreviewTotal() {\r\n-        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n-        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-    }\r\n-    addToOrganizer.addEventListener('click', async function () {\r\n-        const token = localStorage.getItem('authToken');\r\n-        if (!token) {\r\n-            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n-            return;\r\n-        }\r\n-        if (!currentBill || !currentBill.name) {\r\n-            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n-            return;\r\n-        }\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/boletos`,\r\n-                {\r\n-                    method: 'POST',\r\n-                    headers:\r\n-                    {\r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    },\r\n-                    body: JSON.stringify(currentBill)\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n-            showToast(data.message, 'success');\r\n-            addBillModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    // --- Lógica do Modal de Edição de Boletos ---\r\n-    function openBillModal(bill, parcel) {\r\n-        // MUDANÇA: Usamos bill._id para o parentId e o parcel já terá o seu próprio _id.\r\n-        selectedParcel = { ...parcel, parentId: bill._id };\r\n-        \r\n-        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n-        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n-        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n-        modalBillBarcodeInput.value = parcel.barcode || '';\r\n-        modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n-            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n-        } else {\r\n-            showFullScreenBarcodeBtn.classList.add('hidden');\r\n-        }\r\n-        billModal.classList.remove('hidden');\r\n-    }\r\n-\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    billModal.addEventListener('click', (e) => {\r\n-        if (e.target === billModal) billModal.classList.add('hidden');\r\n-    });\r\n-\r\n-    saveBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n-        const updatedData = {\r\n-            paid: document.getElementById('modalBillPaid').checked,\r\n-            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n-            dueDate: document.getElementById('modalBillDate').value,\r\n-            description: document.getElementById('modalBillDescription').value,\r\n-            barcode: document.getElementById('modalBillBarcode').value\r\n-        };\r\n-        showLoader();\r\n-\r\n-        try {\r\n-            const response = await fetch(url, { // Usamos a nova URL\r\n-                method: 'PATCH',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                body: JSON.stringify(updatedData)\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Parcela atualizada com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    });\r\n-\r\n-    deleteBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel) return;\r\n-        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        \r\n-        // MUDANÇA: Usamos selectedParcel._id para identificar a parcela\r\n-        const url = `${API_BASE_URL}/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel._id}`;\r\n-\r\n-        try {\r\n-            const response = await fetch(url, { // Usamos a nova URL\r\n-                method: 'DELETE',\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Parcela excluída com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    deleteEntireBillBtn.addEventListener('click', async () => {\r\n-        if (!selectedParcel || !selectedParcel.parentId) {\r\n-            showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n-            return;\r\n-        }\r\n-        \r\n-        if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n-            return;\r\n-        }\r\n-        \r\n-        const token = localStorage.getItem('authToken');\r\n-        // MUDANÇA: O ID do boleto vem de selectedParcel.parentId, que agora já é o _id correto.\r\n-        const boletoId = selectedParcel.parentId; \r\n-        \r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/boletos/${boletoId}`, {\r\n-                method: 'DELETE',\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            \r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            showToast('Boleto completo excluído com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            updateBillsOrganizer();\r\n-            \r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n-        const token = localStorage.getItem('authToken');\r\n-        showLoader();\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}`, {\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${token}`\r\n-                }\r\n-            });\r\n-            \r\n-            // A resposta da API é um objeto { company, users }\r\n-            const data = await response.json(); \r\n-\r\n-            if (!response.ok) {\r\n-                // A mensagem de erro pode estar em 'data.message'\r\n-                throw new Error(data.message || 'Não foi possível buscar os detalhes da empresa.');\r\n-            }\r\n-\r\n-            // MUDANÇA CRÍTICA: Em vez de passar o objeto 'data' inteiro,\r\n-            // passamos as suas propriedades 'company' e 'users' corretamente.\r\n-            openCompanyDetailsModal(data.company, data.users);\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally{\r\n-            hideLoader()\r\n-        }\r\n-    }\r\n-\r\n-    // --- Lógica do Modal de Detalhes da Empresa ---\r\n-    function openCompanyDetailsModal(company, users) {\r\n-        // Guarda a referência da empresa selecionada\r\n-        selectedCompanyForAdmin = company;\r\n-\r\n-        // Preenche os campos de input e texto\r\n-        document.getElementById('modalCompanyNameInput').value = company.nomeEmpresa;\r\n-        modalCompanyCnpj.textContent = company.cnpj ? formatCnpj(company.cnpj) : '';\r\n-        modalCompanyPasswordInput.value = ''; // Limpa o campo de senha por segurança\r\n-        modalCompanyUsers.innerHTML = '';\r\n-        \r\n-        // Renderiza a lista de usuários\r\n-        if (users && users.length > 0) {\r\n-            const assignableRoles = isAdminLoggedIn ?\r\n-                ['Proprietário', 'Gerente', 'Funcionário'] :\r\n-                ['Gerente', 'Funcionário'];\r\n-\r\n-            users.forEach(user => {\r\n-                const userItem = document.createElement('div');\r\n-                userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n-                const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n-                let roleDisplay = '';\r\n-\r\n-                if (isEditable) {\r\n-                    const optionsHTML = assignableRoles.map(role => {\r\n-                        if (!isAdminLoggedIn && role === 'Proprietário') return '';\r\n-                        return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n-                    }).join('');\r\n-                    roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${optionsHTML}</select>`;\r\n-                } else {\r\n-                    roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n-                }\r\n-\r\n-                userItem.innerHTML = `\r\n-                    <div class=\"flex items-center space-x-3\">\r\n-                        <span class=\"text-white\">${user.username}</span>\r\n-                        ${roleDisplay}\r\n-                    </div>\r\n-                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                `;\r\n-                modalCompanyUsers.appendChild(userItem);\r\n-            });\r\n-        } else {\r\n-            modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-        }\r\n-\r\n-        // --- LÓGICA PARA PREENCHER DADOS DA ASSINATURA ---\r\n-        const subStatusEl = document.getElementById('subscriptionStatus');\r\n-        const subEndDateEl = document.getElementById('subscriptionEndDate');\r\n-\r\n-        if (company.subscription && company.subscription.status) {\r\n-            let statusText = '';\r\n-            let statusColorClass = '';\r\n-\r\n-            switch (company.subscription.status) {\r\n-                case 'active':\r\n-                    statusText = 'Ativa';\r\n-                    statusColorClass = 'text-green-400';\r\n-                    break;\r\n-                case 'inactive':\r\n-                    statusText = 'Inativa';\r\n-                    statusColorClass = 'text-red-400';\r\n-                    break;\r\n-                case 'past_due':\r\n-                    statusText = 'Vencida';\r\n-                    statusColorClass = 'text-orange-400';\r\n-                    break;\r\n-                case 'trial':\r\n-                    statusText = 'Período de Teste';\r\n-                    statusColorClass = 'text-blue-400';\r\n-                    break;\r\n-                default:\r\n-                    statusText = 'Desconhecido';\r\n-                    statusColorClass = 'text-gray-400';\r\n-            }\r\n-            subStatusEl.textContent = statusText;\r\n-            subStatusEl.className = `ml-2 font-bold ${statusColorClass}`;\r\n-\r\n-            if (company.subscription.endDate) {\r\n-                subEndDateEl.textContent = new Date(company.subscription.endDate).toLocaleDateString('pt-BR', {\r\n-                    day: '2-digit', month: '2-digit', year: 'numeric'\r\n-                });\r\n-            } else {\r\n-                subEndDateEl.textContent = 'N/A';\r\n-            }\r\n-        } else {\r\n-            subStatusEl.textContent = 'Não configurada';\r\n-            subEndDateEl.textContent = 'N/A';\r\n-            subStatusEl.className = 'ml-2 font-bold text-gray-400';\r\n-        }\r\n-        \r\n-        // Adiciona novamente os listeners para os botões dentro do modal\r\n-        document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-            button.addEventListener('click', (e) => handleRemoveUser(company._id, e.target.dataset.userId));\r\n-        });\r\n-        document.querySelectorAll('.role-select').forEach(select => {\r\n-            select.addEventListener('change', (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                // Aqui você pode chamar uma função para atualizar o papel do usuário\r\n-            });\r\n-        });\r\n-\r\n-        // Mostra o modal\r\n-        companyDetailsModal.classList.remove('hidden');\r\n-    }\r\n-\r\n-    async function handleRemoveUser(companyId, userId) {\r\n-        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${companyId}/users/${userId}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    }\r\n-\r\n-    addUserBtn.addEventListener('click', () => {\r\n-        openAddUserModal();\r\n-    });\r\n-\r\n-    deleteCompanyBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n-            return;\r\n-        }\r\n-        const token = localStorage.getItem('authToken');\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`,\r\n-                {\r\n-                    method: 'DELETE',\r\n-                    headers:\r\n-                    {\r\n-                        'Authorization': `Bearer ${token}`\r\n-                    }\r\n-                });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast(data.message, 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList();\r\n-        }\r\n-        catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n-        if (!selectedCompanyForAdmin) return;\r\n-\r\n-        const token = localStorage.getItem('authToken');\r\n-        const updatedData = {}; // Objeto vazio para guardar apenas o que mudou\r\n-\r\n-        // Pegamos os valores dos campos\r\n-        const newName = document.getElementById('modalCompanyNameInput').value;\r\n-        const newPassword = modalCompanyPasswordInput.value;\r\n-\r\n-        // MUDANÇA: Verificamos se o nome foi alterado e adicionamo-lo ao payload\r\n-        if (newName && newName.trim() !== '' && newName.trim() !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-            updatedData.nomeEmpresa = newName.trim();\r\n-        }\r\n-\r\n-        // A lógica da senha continua, mas agora também é adicionada ao mesmo payload\r\n-        if (newPassword && newPassword.length > 0) {\r\n-            updatedData.newPassword = newPassword;\r\n-        }\r\n-\r\n-        // Se nada foi alterado, informamos o usuário e paramos\r\n-        if (Object.keys(updatedData).length === 0) {\r\n-            showToast(\"Nenhuma alteração para salvar.\", \"info\");\r\n-            return;\r\n-        }\r\n-\r\n-        try {\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${selectedCompanyForAdmin._id}`, {\r\n-                method: 'PATCH',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                    'Authorization': `Bearer ${token}`\r\n-                },\r\n-                body: JSON.stringify(updatedData) // Enviamos o objeto com as alterações\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n-            companyDetailsModal.classList.add('hidden');\r\n-            renderCompanyList(); // Atualizamos a lista de empresas para refletir o novo nome\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-\r\n-    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    companyDetailsModal.addEventListener('click', (e) => {\r\n-        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n-    });\r\n-    // --- Inicialização ---\r\n-    initializeCalendarDate();\r\n-    initializeApp();\r\n-\r\n-    // Função para abrir e preencher o modal\r\n-    async function openCompanyInfoModal() {\r\n-        try {\r\n-            const token = localStorage.getItem('authToken');\r\n-            const response = await fetch(`${API_BASE_URL}/api/companies/${currentLoggedInCompany._id}`, {\r\n-                headers: { 'Authorization': `Bearer ${token}` }\r\n-            });\r\n-            const data = await response.json();\r\n-            if (!response.ok) throw new Error(data.message);\r\n-            \r\n-            currentCompanyDetails = data.company;\r\n-            document.getElementById('companyInfoCnpj').textContent = formatCnpj(currentCompanyDetails.cnpj);\r\n-            document.getElementById('companyInfoName').value = currentCompanyDetails.nomeEmpresa;\r\n-            document.getElementById('companyInfoEmail').value = currentCompanyDetails.email || '';\r\n-            document.getElementById('companyInfoTelefone').value = currentCompanyDetails.telefoneFixo || '';\r\n-            document.getElementById('companyInfoWhatsapp').value = currentCompanyDetails.telefoneWhatsapp || '';\r\n-\r\n-            // MUDANÇA: Aplicamos as máscaras AQUI, depois de o modal estar preenchido e prestes a ser exibido.\r\n-            const telefoneFixoInput = document.getElementById('companyInfoTelefone');\r\n-            if (telefoneFixoInput) {\r\n-                IMask(telefoneFixoInput, { mask: '(00) 0000-0000' });\r\n-            }\r\n-            const whatsappInput = document.getElementById('companyInfoWhatsapp');\r\n-            if (whatsappInput) {\r\n-                IMask(whatsappInput, { mask: '(00) 00000-0000' });\r\n-            }\r\n-\r\n             companyInfoModal.classList.remove('hidden');\r\n \r\n         } catch (error) {\r\n             showToast('Erro ao carregar detalhes da empresa: ' + error.message, 'error');\r\n"
                },
                {
                    "date": 1752609405020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1643,27 +1643,26 @@\n             if (whatsappInput) {\r\n                 IMask(whatsappInput, { mask: '(00) 00000-0000' });\r\n             }\r\n \r\n-            const endDateElement = document.getElementById('companyInfoSubscriptionEndDate');\r\n+            const subInfoElement = document.getElementById('headerSubscriptionInfo');\r\n+            const subEndDateElement = document.getElementById('headerSubscriptionEndDate');\r\n+\r\n             const subscriptionStatus = currentCompanyDetails.subscription?.status;\r\n             const subscriptionEndDate = currentCompanyDetails.subscription?.endDate;\r\n \r\n-            if (endDateElement && subscriptionStatus === 'active' && subscriptionEndDate) {\r\n-                // Formata a data para o padrão brasileiro (dd/mm/aaaa)\r\n+            if (subInfoElement && subEndDateElement && subscriptionStatus === 'active' && subscriptionEndDate) {\r\n                 const formattedDate = new Date(subscriptionEndDate).toLocaleDateString('pt-BR', {\r\n                     day: '2-digit',\r\n                     month: '2-digit',\r\n                     year: 'numeric'\r\n                 });\r\n-                endDateElement.textContent = formattedDate;\r\n-                // Garante que a cor seja verde para assinaturas ativas\r\n-                endDateElement.className = 'mt-1 text-lg font-semibold text-green-400';\r\n-            } else if (endDateElement) {\r\n-                // Caso a assinatura esteja inativa ou sem data, exibe 'N/A'\r\n-                endDateElement.textContent = 'Inativa';\r\n-                // Muda a cor para cinza/vermelho para indicar inatividade\r\n-                endDateElement.className = 'mt-1 text-lg font-semibold text-red-400';\r\n+                subEndDateElement.textContent = formattedDate;\r\n+                // Mostra a seção da assinatura no cabeçalho\r\n+                subInfoElement.classList.remove('hidden');\r\n+            } else if (subInfoElement) {\r\n+                // Se a assinatura não estiver ativa, mantém a seção oculta\r\n+                subInfoElement.classList.add('hidden');\r\n             }\r\n \r\n             companyInfoModal.classList.remove('hidden');\r\n \r\n"
                },
                {
                    "date": 1752613267946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,8 +89,10 @@\n     const INACTIVITY_TIMEOUT = 30 * 60 * 1000;\r\n     const subscriptionModal = document.getElementById('subscriptionModal');\r\n     const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n     const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+    const togglePasswordBtn = document.getElementById('togglePasswordBtn');\r\n+    const passwordInput = document.getElementById('mainUserPasswordInput');\r\n \r\n     // --- Variáveis de Dados e Estado ---\r\n     let currentLoggedInCompany = null;\r\n     let currentLoggedInUser = null;\r\n@@ -231,8 +233,17 @@\n         fetchCompanyDetailsAndOpenModal(companyId);\r\n     }\r\n };\r\n \r\n+togglePasswordBtn.addEventListener('click', () => {\r\n+    // Alterna o tipo do input\r\n+    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';\r\n+    passwordInput.setAttribute('type', type);\r\n+    // Alterna o ícone do olho\r\n+    togglePasswordBtn.querySelector('i').classList.toggle('fa-eye');\r\n+    togglePasswordBtn.querySelector('i').classList.toggle('fa-eye-slash');\r\n+});\r\n+\r\n // Listener EXCLUSIVO para o link de Permissões\r\n     menuPermissoes.addEventListener('click', async (e) => {\r\n         e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n"
                },
                {
                    "date": 1752614305281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,17 +233,25 @@\n         fetchCompanyDetailsAndOpenModal(companyId);\r\n     }\r\n };\r\n \r\n-togglePasswordBtn.addEventListener('click', () => {\r\n-    // Alterna o tipo do input\r\n-    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';\r\n-    passwordInput.setAttribute('type', type);\r\n-    // Alterna o ícone do olho\r\n-    togglePasswordBtn.querySelector('i').classList.toggle('fa-eye');\r\n-    togglePasswordBtn.querySelector('i').classList.toggle('fa-eye-slash');\r\n-});\r\n+const togglePasswordBtn = document.getElementById('togglePasswordBtn');\r\n \r\n+if (togglePasswordBtn) { // <--- ESTA VERIFICAÇÃO RESOLVE O PROBLEMA\r\n+    const passwordInput = document.getElementById('mainUserPasswordInput');\r\n+    \r\n+    togglePasswordBtn.addEventListener('click', () => {\r\n+        // Alterna o tipo do input\r\n+        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';\r\n+        passwordInput.setAttribute('type', type);\r\n+        \r\n+        // Alterna o ícone do olho\r\n+        const icon = togglePasswordBtn.querySelector('i');\r\n+        icon.classList.toggle('fa-eye');\r\n+        icon.classList.toggle('fa-eye-slash');\r\n+    });\r\n+}\r\n+\r\n // Listener EXCLUSIVO para o link de Permissões\r\n     menuPermissoes.addEventListener('click', async (e) => {\r\n         e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n"
                },
                {
                    "date": 1752614323689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,10 +233,8 @@\n         fetchCompanyDetailsAndOpenModal(companyId);\r\n     }\r\n };\r\n \r\n-const togglePasswordBtn = document.getElementById('togglePasswordBtn');\r\n-\r\n if (togglePasswordBtn) { // <--- ESTA VERIFICAÇÃO RESOLVE O PROBLEMA\r\n     const passwordInput = document.getElementById('mainUserPasswordInput');\r\n     \r\n     togglePasswordBtn.addEventListener('click', () => {\r\n"
                },
                {
                    "date": 1752615663111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,205 @@\n     let currentCompanyDetails = null;\r\n     let inactivityTimer; // Variável para guardar o nosso cronómetro\r\n \r\n \r\n+    function initializeIndexPage() {\r\n+\r\n+        // --- CONSTANTES E ELEMENTOS DO DOM (apenas do Index.html) ---\r\n+        const API_BASE_URL = 'http://localhost:5000';\r\n+\r\n+        // Elementos do Menu e Navegação\r\n+        const mobileMenuButton = document.getElementById('mobile-menu-button');\r\n+        const mobileMenu = document.getElementById('mobile-menu');\r\n+        const desktopMenuItems = document.getElementById('desktop-menu-items');\r\n+        const mobileMenuItems = document.getElementById('mobile-menu-items');\r\n+        const navLoginLink = document.getElementById('nav-login-link');\r\n+        const mobileNavLoginLink = document.getElementById('mobile-nav-login-link');\r\n+\r\n+        // Elementos do Formulário de Login Principal\r\n+        const loginSectionContent = document.getElementById('login-section-content');\r\n+        const mainLoginForm = document.getElementById('mainLoginForm');\r\n+        const mainLoginSubmitBtn = document.getElementById('mainLoginSubmitBtn');\r\n+        const mainLoginFormFeedback = document.getElementById('mainLoginFormFeedback');\r\n+        const mainCnpjInput = document.getElementById('mainCnpjInput');\r\n+        const mainUsernameInput = document.getElementById('mainUsernameInput');\r\n+        const mainUserPasswordInput = document.getElementById('mainUserPasswordInput');\r\n+        const togglePasswordBtn = document.getElementById('togglePasswordBtn');\r\n+\r\n+        // Elementos do Login em Duas Etapas\r\n+        const loginStep1 = document.getElementById('login-step-1');\r\n+        const loginStep2 = document.getElementById('login-step-2');\r\n+        const nextStepBtn = document.getElementById('nextStepBtn');\r\n+        const backToStep1Btn = document.getElementById('backToStep1Btn');\r\n+\r\n+        // Elementos do Formulário de Contato\r\n+        const contactForm = document.getElementById('contactForm');\r\n+        const contactSubmitBtn = document.getElementById('contactSubmitBtn');\r\n+        const contactFormFeedback = document.getElementById('contactFormFeedback');\r\n+\r\n+        \r\n+        // --- FUNÇÃO AUXILIAR: ATUALIZAR UI PARA USUÁRIO LOGADO ---\r\n+        function updateUIForLoggedInUser(user) {\r\n+            if (desktopMenuItems && navLoginLink) {\r\n+                if (!document.getElementById('nav-logout-btn')) {\r\n+                    navLoginLink.textContent = 'Acessar Painel';\r\n+                    navLoginLink.href = 'OrgBoletos.html';\r\n+                    const logoutButton = document.createElement('button');\r\n+                    logoutButton.id = 'nav-logout-btn';\r\n+                    logoutButton.className = 'bg-red-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-red-700 transition duration-300';\r\n+                    logoutButton.textContent = 'Sair';\r\n+                    desktopMenuItems.appendChild(logoutButton);\r\n+                }\r\n+            }\r\n+            if (mobileMenuItems && mobileNavLoginLink) {\r\n+                if (!document.getElementById('mobile-nav-logout-btn')) {\r\n+                    mobileNavLoginLink.textContent = 'Acessar Painel';\r\n+                    mobileNavLoginLink.href = 'OrgBoletos.html';\r\n+                    const mobileLogoutButton = document.createElement('button');\r\n+                    mobileLogoutButton.id = 'mobile-nav-logout-btn';\r\n+                    mobileLogoutButton.className = 'w-full text-left bg-red-600 text-white block px-3 py-2 rounded-md text-base font-medium mt-2';\r\n+                    mobileLogoutButton.textContent = 'Sair';\r\n+                    mobileMenuItems.appendChild(mobileLogoutButton);\r\n+                }\r\n+            }\r\n+            if (loginSectionContent) {\r\n+                loginSectionContent.innerHTML = `\r\n+                    <h3 class=\"text-2xl font-bold text-white mb-4 text-center\">Bem-vindo(a) de volta, ${user.username}!</h3>\r\n+                    <p class=\"text-center text-gray-300 mb-6\">Você já está autenticado.</p>\r\n+                    <a href=\"OrgBoletos.html\" class=\"w-full bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-3 px-4 rounded-lg transition duration-300 flex items-center justify-center\">\r\n+                        Ir para o Painel de Boletos <i class=\"fas fa-arrow-right ml-2\"></i>\r\n+                    </a>\r\n+                `;\r\n+            }\r\n+            document.querySelectorAll('#nav-logout-btn, #mobile-nav-logout-btn').forEach(btn => {\r\n+                btn.addEventListener('click', (e) => {\r\n+                    e.preventDefault();\r\n+                    localStorage.removeItem('authToken');\r\n+                    localStorage.removeItem('superAdminToken');\r\n+                    window.location.reload();\r\n+                });\r\n+            });\r\n+        }\r\n+\r\n+        \r\n+        // --- EVENT LISTENERS (AÇÕES DO USUÁRIO) ---\r\n+\r\n+        // Listener para o menu mobile\r\n+        mobileMenuButton.addEventListener('click', () => mobileMenu.classList.toggle('hidden'));\r\n+\r\n+        // Listener para o login em duas etapas: Avançar\r\n+        nextStepBtn.addEventListener('click', () => {\r\n+            if (mainCnpjInput.value) {\r\n+                loginStep1.classList.add('hidden');\r\n+                loginStep2.classList.remove('hidden');\r\n+                mainUsernameInput.focus();\r\n+            } else {\r\n+                mainLoginFormFeedback.className = 'mt-4 text-center text-sm text-yellow-400';\r\n+                mainLoginFormFeedback.textContent = 'Por favor, preencha o CNPJ para continuar.';\r\n+            }\r\n+        });\r\n+\r\n+        // Listener para o login em duas etapas: Voltar\r\n+        backToStep1Btn.addEventListener('click', () => {\r\n+            loginStep2.classList.add('hidden');\r\n+            loginStep1.classList.remove('hidden');\r\n+            mainCnpjInput.focus();\r\n+        });\r\n+\r\n+        // Listener para o botão de ver/ocultar senha\r\n+        togglePasswordBtn.addEventListener('click', () => {\r\n+            const type = mainUserPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';\r\n+            mainUserPasswordInput.setAttribute('type', type);\r\n+            const icon = togglePasswordBtn.querySelector('i');\r\n+            icon.classList.toggle('fa-eye');\r\n+            icon.classList.toggle('fa-eye-slash');\r\n+        });\r\n+\r\n+        // Listener para o envio do formulário de login\r\n+        mainLoginForm.addEventListener('submit', async function(e) {\r\n+            e.preventDefault();\r\n+            mainLoginSubmitBtn.disabled = true;\r\n+            mainLoginSubmitBtn.innerHTML = 'Verificando... <i class=\"fas fa-spinner fa-spin ml-2\"></i>';\r\n+            mainLoginFormFeedback.textContent = '';\r\n+            const formData = {\r\n+                cnpj: mainCnpjInput.value,\r\n+                username: mainUsernameInput.value,\r\n+                password: mainUserPasswordInput.value,\r\n+            };\r\n+            try {\r\n+                const response = await fetch(`${API_BASE_URL}/api/auth/login/direct`, {\r\n+                    method: 'POST',\r\n+                    headers: { 'Content-Type': 'application/json' },\r\n+                    body: JSON.stringify(formData),\r\n+                });\r\n+                const result = await response.json();\r\n+                if (!response.ok) { throw new Error(result.message || 'Ocorreu um erro.'); }\r\n+                localStorage.setItem('authToken', result.token);\r\n+                window.location.href = 'OrgBoletos.html';\r\n+            } catch (error) {\r\n+                mainLoginFormFeedback.className = 'mt-4 text-center text-sm text-red-400';\r\n+                mainLoginFormFeedback.textContent = error.message;\r\n+            } finally {\r\n+                mainLoginSubmitBtn.disabled = false;\r\n+                mainLoginSubmitBtn.innerHTML = 'Entrar no Sistema <i class=\"fas fa-sign-in-alt ml-2\"></i>';\r\n+            }\r\n+        });\r\n+\r\n+        // Listener para o formulário de contato\r\n+        contactForm.addEventListener('submit', async function(e) {\r\n+            e.preventDefault();\r\n+            contactSubmitBtn.disabled = true;\r\n+            contactSubmitBtn.innerHTML = 'Enviando... <i class=\"fas fa-spinner fa-spin ml-2\"></i>';\r\n+            contactFormFeedback.textContent = '';\r\n+            const formData = {\r\n+                name: document.getElementById('contactName').value,\r\n+                email: document.getElementById('contactEmail').value,\r\n+                subject: document.getElementById('contactSubject').value,\r\n+                message: document.getElementById('contactMessage').value,\r\n+            };\r\n+            try {\r\n+                const response = await fetch(`${API_BASE_URL}/api/contact/send`, {\r\n+                    method: 'POST',\r\n+                    headers: { 'Content-Type': 'application/json' },\r\n+                    body: JSON.stringify(formData),\r\n+                });\r\n+                const result = await response.json();\r\n+                if (!response.ok) { throw new Error(result.message || 'Ocorreu um erro.'); }\r\n+                contactFormFeedback.className = 'mt-4 text-center text-sm text-green-400';\r\n+                contactFormFeedback.textContent = result.message;\r\n+                contactForm.reset();\r\n+            } catch (error) {\r\n+                contactFormFeedback.className = 'mt-4 text-center text-sm text-red-400';\r\n+                contactFormFeedback.textContent = error.message;\r\n+            } finally {\r\n+                contactSubmitBtn.disabled = false;\r\n+                contactSubmitBtn.innerHTML = 'Enviar Mensagem <i class=\"fas fa-paper-plane ml-2\"></i>';\r\n+            }\r\n+        });\r\n+\r\n+        // --- INICIALIZAÇÃO DA PÁGINA ---\r\n+        // Verifica se já existe uma sessão ativa ao carregar a página\r\n+        (async function checkInitialSession() {\r\n+            const token = localStorage.getItem('authToken');\r\n+            if (!token) return;\r\n+            try {\r\n+                const response = await fetch(`${API_BASE_URL}/api/auth/me`, { headers: { 'Authorization': `Bearer ${token}` } });\r\n+                if (!response.ok) { localStorage.removeItem('authToken'); return; }\r\n+                const data = await response.json();\r\n+                if(data.user) {\r\n+                    updateUIForLoggedInUser(data.user);\r\n+                }\r\n+            } catch (error) { \r\n+                console.error(\"Não foi possível verificar a sessão:\", error); \r\n+            }\r\n+        })(); // A '()' no final executa a função imediatamente\r\n+\r\n+        // Aplica a máscara de input no campo de CNPJ\r\n+        IMask(mainCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+\r\n+\r\n         // --- LÓGICA DE INATIVIDADE E LOGOUT AUTOMÁTICO ---\r\n     function logoutDueToInactivity() {\r\n         // Primeiro, limpamos o cronómetro para não tentar fazer logout de novo\r\n         clearInactivityTimer(); \r\n@@ -211,46 +408,46 @@\n     });\r\n \r\n \r\n \r\n-// --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n-settingsBtn.addEventListener('click', (event) => {\r\n-    event.stopPropagation();\r\n-    settingsDropdown.classList.toggle('hidden');\r\n-});\r\n+    // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n+    settingsBtn.addEventListener('click', (event) => {\r\n+        event.stopPropagation();\r\n+        settingsDropdown.classList.toggle('hidden');\r\n+    });\r\n \r\n-window.addEventListener('click', () => {\r\n-    if (!settingsDropdown.classList.contains('hidden')) {\r\n+    window.addEventListener('click', () => {\r\n+        if (!settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n+    // Função auxiliar para os links de Empresa e Usuários\r\n+    const openManagementModal = (e) => {\r\n+        e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n+        const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n+        if (companyId) {\r\n+            fetchCompanyDetailsAndOpenModal(companyId);\r\n+        }\r\n+    };\r\n \r\n-// Função auxiliar para os links de Empresa e Usuários\r\n-const openManagementModal = (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    const companyId = currentLoggedInCompany ? currentLoggedInCompany._id : null;\r\n-    if (companyId) {\r\n-        fetchCompanyDetailsAndOpenModal(companyId);\r\n+    if (togglePasswordBtn) { // <--- ESTA VERIFICAÇÃO RESOLVE O PROBLEMA\r\n+        const passwordInput = document.getElementById('mainUserPasswordInput');\r\n+        \r\n+        togglePasswordBtn.addEventListener('click', () => {\r\n+            // Alterna o tipo do input\r\n+            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';\r\n+            passwordInput.setAttribute('type', type);\r\n+            \r\n+            // Alterna o ícone do olho\r\n+            const icon = togglePasswordBtn.querySelector('i');\r\n+            icon.classList.toggle('fa-eye');\r\n+            icon.classList.toggle('fa-eye-slash');\r\n+        });\r\n     }\r\n-};\r\n \r\n-if (togglePasswordBtn) { // <--- ESTA VERIFICAÇÃO RESOLVE O PROBLEMA\r\n-    const passwordInput = document.getElementById('mainUserPasswordInput');\r\n-    \r\n-    togglePasswordBtn.addEventListener('click', () => {\r\n-        // Alterna o tipo do input\r\n-        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';\r\n-        passwordInput.setAttribute('type', type);\r\n-        \r\n-        // Alterna o ícone do olho\r\n-        const icon = togglePasswordBtn.querySelector('i');\r\n-        icon.classList.toggle('fa-eye');\r\n-        icon.classList.toggle('fa-eye-slash');\r\n-    });\r\n-}\r\n-\r\n-// Listener EXCLUSIVO para o link de Permissões\r\n+    // Listener EXCLUSIVO para o link de Permissões\r\n     menuPermissoes.addEventListener('click', async (e) => {\r\n         e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n         showLoader();\r\n@@ -292,29 +489,29 @@\n         document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n         document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n     }\r\n \r\n-// Atualizamos o listener do menu para usar a nova função\r\n-menuPermissoes.addEventListener('click', async (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    \r\n-    try {\r\n-        const token = localStorage.getItem('authToken');\r\n-        const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n-            headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n-        const permissions = await response.json();\r\n-        if (!response.ok) throw new Error(permissions.message);\r\n+    // Atualizamos o listener do menu para usar a nova função\r\n+    menuPermissoes.addEventListener('click', async (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        \r\n+        try {\r\n+            const token = localStorage.getItem('authToken');\r\n+            const response = await fetch(`${API_BASE_URL}/api/permissions`, {\r\n+                headers: { 'Authorization': `Bearer ${token}` }\r\n+            });\r\n+            const permissions = await response.json();\r\n+            if (!response.ok) throw new Error(permissions.message);\r\n \r\n-        // Chamamos a função para preencher o modal com os dados\r\n-        populatePermissionsModal(permissions);\r\n+            // Chamamos a função para preencher o modal com os dados\r\n+            populatePermissionsModal(permissions);\r\n \r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n-    }\r\n-});\r\n+            permissionsModal.classList.remove('hidden');\r\n+        } catch (error) {\r\n+            showToast('Erro ao carregar permissões: ' + error.message, 'error');\r\n+        }\r\n+    });\r\n \r\n \r\n     // Adicionamos o listener para o novo botão Salvar\r\n     document.getElementById('savePermissionsBtn').addEventListener('click', async () => {\r\n"
                },
                {
                    "date": 1752616301350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,208 +103,10 @@\n     let selectedParcel = null;\r\n     let userBoletos = [];\r\n     let currentMonth, currentYear;\r\n     let currentCompanyDetails = null;\r\n-    let inactivityTimer; // Variável para guardar o nosso cronómetro\r\n+    let inactivityTimer; // Variável para guardar o nosso cronómetro    \r\n \r\n-\r\n-    function initializeIndexPage() {\r\n-\r\n-        // --- CONSTANTES E ELEMENTOS DO DOM (apenas do Index.html) ---\r\n-        const API_BASE_URL = 'http://localhost:5000';\r\n-\r\n-        // Elementos do Menu e Navegação\r\n-        const mobileMenuButton = document.getElementById('mobile-menu-button');\r\n-        const mobileMenu = document.getElementById('mobile-menu');\r\n-        const desktopMenuItems = document.getElementById('desktop-menu-items');\r\n-        const mobileMenuItems = document.getElementById('mobile-menu-items');\r\n-        const navLoginLink = document.getElementById('nav-login-link');\r\n-        const mobileNavLoginLink = document.getElementById('mobile-nav-login-link');\r\n-\r\n-        // Elementos do Formulário de Login Principal\r\n-        const loginSectionContent = document.getElementById('login-section-content');\r\n-        const mainLoginForm = document.getElementById('mainLoginForm');\r\n-        const mainLoginSubmitBtn = document.getElementById('mainLoginSubmitBtn');\r\n-        const mainLoginFormFeedback = document.getElementById('mainLoginFormFeedback');\r\n-        const mainCnpjInput = document.getElementById('mainCnpjInput');\r\n-        const mainUsernameInput = document.getElementById('mainUsernameInput');\r\n-        const mainUserPasswordInput = document.getElementById('mainUserPasswordInput');\r\n-        const togglePasswordBtn = document.getElementById('togglePasswordBtn');\r\n-\r\n-        // Elementos do Login em Duas Etapas\r\n-        const loginStep1 = document.getElementById('login-step-1');\r\n-        const loginStep2 = document.getElementById('login-step-2');\r\n-        const nextStepBtn = document.getElementById('nextStepBtn');\r\n-        const backToStep1Btn = document.getElementById('backToStep1Btn');\r\n-\r\n-        // Elementos do Formulário de Contato\r\n-        const contactForm = document.getElementById('contactForm');\r\n-        const contactSubmitBtn = document.getElementById('contactSubmitBtn');\r\n-        const contactFormFeedback = document.getElementById('contactFormFeedback');\r\n-\r\n-        \r\n-        // --- FUNÇÃO AUXILIAR: ATUALIZAR UI PARA USUÁRIO LOGADO ---\r\n-        function updateUIForLoggedInUser(user) {\r\n-            if (desktopMenuItems && navLoginLink) {\r\n-                if (!document.getElementById('nav-logout-btn')) {\r\n-                    navLoginLink.textContent = 'Acessar Painel';\r\n-                    navLoginLink.href = 'OrgBoletos.html';\r\n-                    const logoutButton = document.createElement('button');\r\n-                    logoutButton.id = 'nav-logout-btn';\r\n-                    logoutButton.className = 'bg-red-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-red-700 transition duration-300';\r\n-                    logoutButton.textContent = 'Sair';\r\n-                    desktopMenuItems.appendChild(logoutButton);\r\n-                }\r\n-            }\r\n-            if (mobileMenuItems && mobileNavLoginLink) {\r\n-                if (!document.getElementById('mobile-nav-logout-btn')) {\r\n-                    mobileNavLoginLink.textContent = 'Acessar Painel';\r\n-                    mobileNavLoginLink.href = 'OrgBoletos.html';\r\n-                    const mobileLogoutButton = document.createElement('button');\r\n-                    mobileLogoutButton.id = 'mobile-nav-logout-btn';\r\n-                    mobileLogoutButton.className = 'w-full text-left bg-red-600 text-white block px-3 py-2 rounded-md text-base font-medium mt-2';\r\n-                    mobileLogoutButton.textContent = 'Sair';\r\n-                    mobileMenuItems.appendChild(mobileLogoutButton);\r\n-                }\r\n-            }\r\n-            if (loginSectionContent) {\r\n-                loginSectionContent.innerHTML = `\r\n-                    <h3 class=\"text-2xl font-bold text-white mb-4 text-center\">Bem-vindo(a) de volta, ${user.username}!</h3>\r\n-                    <p class=\"text-center text-gray-300 mb-6\">Você já está autenticado.</p>\r\n-                    <a href=\"OrgBoletos.html\" class=\"w-full bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-3 px-4 rounded-lg transition duration-300 flex items-center justify-center\">\r\n-                        Ir para o Painel de Boletos <i class=\"fas fa-arrow-right ml-2\"></i>\r\n-                    </a>\r\n-                `;\r\n-            }\r\n-            document.querySelectorAll('#nav-logout-btn, #mobile-nav-logout-btn').forEach(btn => {\r\n-                btn.addEventListener('click', (e) => {\r\n-                    e.preventDefault();\r\n-                    localStorage.removeItem('authToken');\r\n-                    localStorage.removeItem('superAdminToken');\r\n-                    window.location.reload();\r\n-                });\r\n-            });\r\n-        }\r\n-\r\n-        \r\n-        // --- EVENT LISTENERS (AÇÕES DO USUÁRIO) ---\r\n-\r\n-        // Listener para o menu mobile\r\n-        mobileMenuButton.addEventListener('click', () => mobileMenu.classList.toggle('hidden'));\r\n-\r\n-        // Listener para o login em duas etapas: Avançar\r\n-        nextStepBtn.addEventListener('click', () => {\r\n-            if (mainCnpjInput.value) {\r\n-                loginStep1.classList.add('hidden');\r\n-                loginStep2.classList.remove('hidden');\r\n-                mainUsernameInput.focus();\r\n-            } else {\r\n-                mainLoginFormFeedback.className = 'mt-4 text-center text-sm text-yellow-400';\r\n-                mainLoginFormFeedback.textContent = 'Por favor, preencha o CNPJ para continuar.';\r\n-            }\r\n-        });\r\n-\r\n-        // Listener para o login em duas etapas: Voltar\r\n-        backToStep1Btn.addEventListener('click', () => {\r\n-            loginStep2.classList.add('hidden');\r\n-            loginStep1.classList.remove('hidden');\r\n-            mainCnpjInput.focus();\r\n-        });\r\n-\r\n-        // Listener para o botão de ver/ocultar senha\r\n-        togglePasswordBtn.addEventListener('click', () => {\r\n-            const type = mainUserPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';\r\n-            mainUserPasswordInput.setAttribute('type', type);\r\n-            const icon = togglePasswordBtn.querySelector('i');\r\n-            icon.classList.toggle('fa-eye');\r\n-            icon.classList.toggle('fa-eye-slash');\r\n-        });\r\n-\r\n-        // Listener para o envio do formulário de login\r\n-        mainLoginForm.addEventListener('submit', async function(e) {\r\n-            e.preventDefault();\r\n-            mainLoginSubmitBtn.disabled = true;\r\n-            mainLoginSubmitBtn.innerHTML = 'Verificando... <i class=\"fas fa-spinner fa-spin ml-2\"></i>';\r\n-            mainLoginFormFeedback.textContent = '';\r\n-            const formData = {\r\n-                cnpj: mainCnpjInput.value,\r\n-                username: mainUsernameInput.value,\r\n-                password: mainUserPasswordInput.value,\r\n-            };\r\n-            try {\r\n-                const response = await fetch(`${API_BASE_URL}/api/auth/login/direct`, {\r\n-                    method: 'POST',\r\n-                    headers: { 'Content-Type': 'application/json' },\r\n-                    body: JSON.stringify(formData),\r\n-                });\r\n-                const result = await response.json();\r\n-                if (!response.ok) { throw new Error(result.message || 'Ocorreu um erro.'); }\r\n-                localStorage.setItem('authToken', result.token);\r\n-                window.location.href = 'OrgBoletos.html';\r\n-            } catch (error) {\r\n-                mainLoginFormFeedback.className = 'mt-4 text-center text-sm text-red-400';\r\n-                mainLoginFormFeedback.textContent = error.message;\r\n-            } finally {\r\n-                mainLoginSubmitBtn.disabled = false;\r\n-                mainLoginSubmitBtn.innerHTML = 'Entrar no Sistema <i class=\"fas fa-sign-in-alt ml-2\"></i>';\r\n-            }\r\n-        });\r\n-\r\n-        // Listener para o formulário de contato\r\n-        contactForm.addEventListener('submit', async function(e) {\r\n-            e.preventDefault();\r\n-            contactSubmitBtn.disabled = true;\r\n-            contactSubmitBtn.innerHTML = 'Enviando... <i class=\"fas fa-spinner fa-spin ml-2\"></i>';\r\n-            contactFormFeedback.textContent = '';\r\n-            const formData = {\r\n-                name: document.getElementById('contactName').value,\r\n-                email: document.getElementById('contactEmail').value,\r\n-                subject: document.getElementById('contactSubject').value,\r\n-                message: document.getElementById('contactMessage').value,\r\n-            };\r\n-            try {\r\n-                const response = await fetch(`${API_BASE_URL}/api/contact/send`, {\r\n-                    method: 'POST',\r\n-                    headers: { 'Content-Type': 'application/json' },\r\n-                    body: JSON.stringify(formData),\r\n-                });\r\n-                const result = await response.json();\r\n-                if (!response.ok) { throw new Error(result.message || 'Ocorreu um erro.'); }\r\n-                contactFormFeedback.className = 'mt-4 text-center text-sm text-green-400';\r\n-                contactFormFeedback.textContent = result.message;\r\n-                contactForm.reset();\r\n-            } catch (error) {\r\n-                contactFormFeedback.className = 'mt-4 text-center text-sm text-red-400';\r\n-                contactFormFeedback.textContent = error.message;\r\n-            } finally {\r\n-                contactSubmitBtn.disabled = false;\r\n-                contactSubmitBtn.innerHTML = 'Enviar Mensagem <i class=\"fas fa-paper-plane ml-2\"></i>';\r\n-            }\r\n-        });\r\n-\r\n-        // --- INICIALIZAÇÃO DA PÁGINA ---\r\n-        // Verifica se já existe uma sessão ativa ao carregar a página\r\n-        (async function checkInitialSession() {\r\n-            const token = localStorage.getItem('authToken');\r\n-            if (!token) return;\r\n-            try {\r\n-                const response = await fetch(`${API_BASE_URL}/api/auth/me`, { headers: { 'Authorization': `Bearer ${token}` } });\r\n-                if (!response.ok) { localStorage.removeItem('authToken'); return; }\r\n-                const data = await response.json();\r\n-                if(data.user) {\r\n-                    updateUIForLoggedInUser(data.user);\r\n-                }\r\n-            } catch (error) { \r\n-                console.error(\"Não foi possível verificar a sessão:\", error); \r\n-            }\r\n-        })(); // A '()' no final executa a função imediatamente\r\n-\r\n-        // Aplica a máscara de input no campo de CNPJ\r\n-        IMask(mainCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-\r\n-\r\n         // --- LÓGICA DE INATIVIDADE E LOGOUT AUTOMÁTICO ---\r\n     function logoutDueToInactivity() {\r\n         // Primeiro, limpamos o cronómetro para não tentar fazer logout de novo\r\n         clearInactivityTimer(); \r\n"
                }
            ],
            "date": 1752239476873,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', function() {\r\n    // --- Elementos HTML (Declarações completas) ---\r\n    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n    const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n    const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n    const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n    const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n    const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n    const cnpjInput = document.getElementById('cnpjInput');\r\n    const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n    const adminLoginForm = document.getElementById('adminLoginForm');\r\n    const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n    const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n    const companyListDiv = document.getElementById('companyList');\r\n    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n    const userLoginScreen = document.getElementById('userLoginScreen');\r\n    const userLoginForm = document.getElementById('userLoginForm');\r\n    const userInput = document.getElementById('userInput');\r\n    const userPasswordInput = document.getElementById('userPasswordInput');\r\n    const registerUserBtn = document.getElementById('registerUserBtn');\r\n    const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n    const welcomeUserText = document.getElementById('welcomeUserText');\r\n    const mainAppContent = document.getElementById('mainAppContent');\r\n    const toastMessage = document.getElementById('toastMessage');\r\n    const logoutBtn = document.getElementById('logoutBtn');\r\n    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n    const addBillModal = document.getElementById('addBillModal');\r\n    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n    const closeCompanyModalBtn = document.getElementById('closeCompanyModal');\r\n    const modalCompanyName = document.getElementById('modalCompanyName');\r\n    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n    const addUserBtn = document.getElementById('addUserBtn');\r\n    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n    const billModal = document.getElementById('billModal');\r\n    const closeModalBtn = document.getElementById('closeModal');\r\n    const saveBillBtn = document.getElementById('saveBill');\r\n    const deleteBillBtn = document.getElementById('deleteBill');\r\n    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n    const quickUserAddModal = document.getElementById('quickUserAddModal');\r\n    const closeQuickUserAddModal = document.getElementById('closeQuickUserAddModal');\r\n    const cancelQuickUserAdd = document.getElementById('cancelQuickUserAdd');\r\n    const quickUserAddForm = document.getElementById('quickUserAddForm');\r\n    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n    const settingsBtn = document.getElementById('settingsBtn');\r\n    const settingsDropdown = document.getElementById('settingsDropdown');\r\n    const menuEmpresa = document.getElementById('menuEmpresa');\r\n    const menuUsuarios = document.getElementById('menuUsuarios');\r\n    const menuPermissoes = document.getElementById('menuPermissoes');\r\n    const billForm = document.getElementById('billForm');\r\n    const installmentsPreview = document.getElementById('installmentsPreview');\r\n    const installmentsList = document.getElementById('installmentsList');\r\n    const addToOrganizer = document.getElementById('addToOrganizer');\r\n    const totalBillsSpan = document.getElementById('totalBills');\r\n    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n    const clearFormBtn = document.getElementById('clearFormBtn');\r\n    const prevMonthBtn = document.getElementById('prevMonth');\r\n    const nextMonthBtn = document.getElementById('nextMonth');\r\n\r\n    // --- Variáveis de Dados e Estado ---\r\n    let currentLoggedInCompany = null;\r\n    let currentLoggedInUser = null;\r\n    let isAdminLoggedIn = false;\r\n    let loggedInViaAdmin = false;\r\n    let selectedCompanyForAdmin = null;\r\n    let currentBill = {};\r\n    let selectedParcel = null;\r\n    let userBoletos = [];\r\n    let currentMonth, currentYear;\r\n\r\n    \r\n    // --- Lógica para o Modal de Adicionar Boletos ---\r\n    openAddBillModalBtn.addEventListener('click', () => {\r\n        clearBillForm();\r\n        addBillModal.classList.remove('hidden');\r\n    });\r\n    closeAddBillModalBtn.addEventListener('click', () => {\r\n        addBillModal.classList.add('hidden');\r\n    });\r\n    addBillModal.addEventListener('click', (e) => {\r\n        if (e.target === addBillModal) {\r\n            addBillModal.classList.add('hidden');\r\n        }\r\n    });\r\n    // --- Lógica para o Modal de Código de Barras em Tela Cheia ---\r\n    showFullScreenBarcodeBtn.addEventListener('click', () => {\r\n        const originalBarcode = document.getElementById('modalBillBarcodeInput').value || '';\r\n        if (!originalBarcode) return;\r\n        const cleanBarcode = originalBarcode.replace(/\\D/g, '');\r\n        if (cleanBarcode.length > 0 && cleanBarcode.length % 2 === 0) {\r\n            try {\r\n                JsBarcode(\"#fullScreenBarcodeImage\", cleanBarcode,\r\n                    {\r\n                        format: \"ITF\",\r\n                        width: 1.5,\r\n                        height: 80,\r\n                        displayValue: true,\r\n                        fontSize: 20,\r\n                        lineColor: \"#000\",\r\n                        background: \"#FFF\"\r\n                    });\r\n                barcodeFullScreenModal.classList.remove('hidden');\r\n            }\r\n            catch (e) {\r\n                showToast(\"Erro ao gerar código de barras.\", \"error\");\r\n            }\r\n        }\r\n        else {\r\n            showToast(\"Código de barras inválido (deve ter quantidade par de números).\", \"error\");\r\n        }\r\n    });\r\n    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n    barcodeFullScreenModal.addEventListener('click', (e) => {\r\n        if (e.target === barcodeFullScreenModal) barcodeFullScreenModal.classList.add('hidden');\r\n    });\r\n    // --- Lógica para o Menu de Configurações (Engrenagem) ---\r\n    settingsBtn.addEventListener('click', (event) => {\r\n        event.stopPropagation(); // Impede que o clique no próprio botão feche o menu imediatamente\r\n        settingsDropdown.classList.toggle('hidden');\r\n    });\r\n    // Adiciona um listener na janela inteira para fechar o dropdown se o usuário clicar fora dele\r\n    window.addEventListener('click', () => {\r\n        if (!settingsDropdown.classList.contains('hidden')) {\r\n            settingsDropdown.classList.add('hidden');\r\n        }\r\n    });\r\n    // A lógica para o item de menu continua aqui\r\n    menuCadastroUsuario.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        settingsDropdown.classList.add('hidden');\r\n        let companyId = isAdminLoggedIn ? (selectedCompanyForAdmin ? selectedCompanyForAdmin._id : null) : (currentLoggedInCompany ? currentLoggedInCompany._id : null);\r\n        if (companyId) {\r\n            fetchCompanyDetailsAndOpenModal(companyId);\r\n        }\r\n        else if (currentLoggedInUser.role === 'Proprietário') {\r\n            quickUserAddModal.classList.remove('hidden');\r\n            quickUserAddForm.reset();\r\n        }\r\n    });\r\n    async function fetchCompanyDetailsAndOpenModal(companyId) {\r\n        const token = localStorage.getItem('authToken');\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n                {\r\n                    headers:\r\n                    {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                });\r\n            const companyDetails = await response.json();\r\n            if (!response.ok) throw new Error(companyDetails.message);\r\n            openCompanyDetailsModal(companyDetails);\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    }\r\n    // --- Lógica para o Modal de Cadastro Rápido de Usuário ---\r\n    function closeQuickAddModal() {\r\n        quickUserAddModal.classList.add('hidden');\r\n    }\r\n    closeQuickUserAddModal.addEventListener('click', closeQuickAddModal);\r\n    cancelQuickUserAdd.addEventListener('click', closeQuickAddModal);\r\n    quickUserAddForm.addEventListener('submit', async (e) => {\r\n        e.preventDefault();\r\n        const username = document.getElementById('quickAddUsername').value;\r\n        const password = document.getElementById('quickAddPassword').value;\r\n        if (!currentLoggedInCompany) {\r\n            showToast('Erro: Empresa não identificada.', 'error');\r\n            return;\r\n        }\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n                {\r\n                    method: 'POST',\r\n                    headers:\r\n                    {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`\r\n                    },\r\n                    body: JSON.stringify(\r\n                        {\r\n                            username,\r\n                            password,\r\n                            companyId: currentLoggedInCompany._id\r\n                        })\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message);\r\n            showToast(data.message, 'success');\r\n            closeQuickAddModal();\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n    // --- Funções de Utilitário e de Tela ---\r\n    function showToast(message, type = 'success') {\r\n        toastMessage.textContent = message;\r\n        toastMessage.className = `fixed top-4 right-4 text-white px-4 py-2 rounded-md shadow-lg flex items-center fade-in z-50`;\r\n        if (type === 'success') toastMessage.classList.add('bg-green-500');\r\n        else if (type === 'error') toastMessage.classList.add('bg-red-500');\r\n        else if (type === 'info') toastMessage.classList.add('bg-blue-500');\r\n        toastMessage.classList.remove('hidden');\r\n        setTimeout(() => {\r\n            toastMessage.classList.add('opacity-0', 'transition-opacity', 'duration-300');\r\n            setTimeout(() => {\r\n                toastMessage.classList.add('hidden');\r\n                toastMessage.classList.remove('opacity-0', 'transition-opacity', 'duration-300');\r\n            }, 300);\r\n        }, 3000);\r\n    }\r\n\r\n    function hideAllScreens() {\r\n        initialLoginScreen.classList.add('hidden');\r\n        cnpjLoginScreen.classList.add('hidden');\r\n        adminLoginScreen.classList.add('hidden');\r\n        userLoginScreen.classList.add('hidden');\r\n        adminDashboardScreen.classList.add('hidden');\r\n        mainAppContent.classList.add('hidden');\r\n        companyDetailsModal.classList.add('hidden');\r\n        addBillModal.classList.add('hidden');\r\n        billModal.classList.add('hidden');\r\n        barcodeFullScreenModal.classList.add('hidden');\r\n        quickUserAddModal.classList.add('hidden');\r\n    }\r\n\r\n    function showInitialLogin() {\r\n        hideAllScreens();\r\n        initialLoginScreen.classList.remove('hidden');\r\n        localStorage.removeItem('authToken');\r\n        currentLoggedInCompany = null;\r\n        currentLoggedInUser = null;\r\n        isAdminLoggedIn = false;\r\n        loggedInViaAdmin = false;\r\n    }\r\n\r\n    function showCnpjLogin() {\r\n        hideAllScreens();\r\n        cnpjLoginForm.reset();\r\n        cnpjLoginScreen.classList.remove('hidden');\r\n    }\r\n\r\n    function showAdminLogin() {\r\n        hideAllScreens();\r\n        adminLoginForm.reset();\r\n        adminLoginScreen.classList.remove('hidden');\r\n    }\r\n\r\n    function showUserLogin(companyName) {\r\n        hideAllScreens();\r\n        userLoginForm.reset();\r\n        welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n        userLoginScreen.classList.remove('hidden');\r\n    }\r\n\r\n    function showMainApp() {\r\n        hideAllScreens();\r\n        mainAppContent.classList.remove('hidden');\r\n        if (loggedInViaAdmin) {\r\n            backToAdminBtn.classList.remove('hidden');\r\n        }\r\n        else {\r\n            backToAdminBtn.classList.add('hidden');\r\n        }\r\n        if (currentLoggedInUser && currentLoggedInUser.role === 'Proprietário') {\r\n            settingsMenuContainer.classList.remove('hidden');\r\n        }\r\n        else {\r\n            settingsMenuContainer.classList.add('hidden');\r\n        }\r\n        updateBillsOrganizer();\r\n    }\r\n\r\n    function showAdminDashboard() {\r\n        hideAllScreens();\r\n        adminDashboardScreen.classList.remove('hidden');\r\n        renderCompanyList();\r\n    }\r\n\r\n    function formatCnpj(value) {\r\n        value = value.replace(/\\D/g, '');\r\n        if (value.length > 14) value = value.slice(0, 14);\r\n        if (value.length > 12) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n        if (value.length > 8) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})$/, '$1.$2.$3/$4');\r\n        if (value.length > 5) return value.replace(/^(\\d{2})(\\d{3})(\\d{3})$/, '$1.$2.$3');\r\n        if (value.length > 2) return value.replace(/^(\\d{2})(\\d{3})$/, '$1.$2');\r\n        return value;\r\n    }\r\n    // --- Lógica de Navegação do Calendário ---\r\n    prevMonthBtn.addEventListener('click', () => {\r\n        currentMonth--;\r\n        if (currentMonth < 0) {\r\n            currentMonth = 11;\r\n            currentYear--;\r\n        }\r\n        renderCalendar();\r\n        updateMonthlySummary();\r\n    });\r\n    nextMonthBtn.addEventListener('click', () => {\r\n        currentMonth++;\r\n        if (currentMonth > 11) {\r\n            currentMonth = 0;\r\n            currentYear++;\r\n        }\r\n        renderCalendar();\r\n        updateMonthlySummary();\r\n    });\r\n    // --- Lógica de Autenticação e Outras Funções ---\r\n    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n    cnpjInput.addEventListener('input', (e) => e.target.value = formatCnpj(e.target.value));\r\n    logoutBtn.addEventListener('click', showInitialLogin);\r\n    adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n    cnpjLoginForm.addEventListener('submit', async function (e) {\r\n        e.preventDefault();\r\n        const cnpj = cnpjInput.value;\r\n        const password = cnpjPasswordInput.value;\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/auth/login/company',\r\n                {\r\n                    method: 'POST',\r\n                    headers:\r\n                    {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(\r\n                        {\r\n                            cnpj,\r\n                            password\r\n                        }),\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message || 'Erro ao tentar fazer login.');\r\n            localStorage.setItem('authToken', data.token);\r\n            currentLoggedInCompany = data.company;\r\n            loggedInViaAdmin = false;\r\n            showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n    adminLoginForm.addEventListener('submit', async function (e) {\r\n        e.preventDefault();\r\n        const username = adminUsernameInput.value;\r\n        const password = adminPasswordInput.value;\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n                {\r\n                    method: 'POST',\r\n                    headers:\r\n                    {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(\r\n                        {\r\n                            username,\r\n                            password\r\n                        })\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message);\r\n            localStorage.setItem('authToken', data.token);\r\n            isAdminLoggedIn = true;\r\n            showToast('Login de Administrador bem-sucedido!', 'success');\r\n            showAdminDashboard();\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n    userLoginForm.addEventListener('submit', async function (e) {\r\n        e.preventDefault();\r\n        const username = userInput.value;\r\n        const password = userPasswordInput.value;\r\n        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n            showToast('Erro: ID da empresa não encontrado. Faça o login da empresa novamente.', 'error');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/auth/login/user',\r\n                {\r\n                    method: 'POST',\r\n                    headers:\r\n                    {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(\r\n                        {\r\n                            username,\r\n                            password,\r\n                            companyId: currentLoggedInCompany._id\r\n                        })\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message);\r\n            showToast(data.message, 'success');\r\n            localStorage.setItem('authToken', data.token);\r\n            currentLoggedInUser = data.user;\r\n            showMainApp();\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n    registerUserBtn.addEventListener('click', async function () {\r\n        const username = userInput.value;\r\n        const password = userPasswordInput.value;\r\n        if (!username || !password) {\r\n            showToast('Por favor, preencha o nome de usuário e a senha.', 'error');\r\n            return;\r\n        }\r\n        if (!currentLoggedInCompany || !currentLoggedInCompany._id) {\r\n            showToast('Erro: Nenhuma empresa selecionada. Faça o login da empresa novamente.', 'error');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n                {\r\n                    method: 'POST',\r\n                    headers:\r\n                    {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(\r\n                        {\r\n                            username,\r\n                            password,\r\n                            companyId: currentLoggedInCompany._id\r\n                        })\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message);\r\n            showToast(data.message, 'success');\r\n            userLoginForm.reset();\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n    backToAdminBtn.addEventListener('click', async () => {\r\n        showToast(\"Retornando ao Painel de Administrador...\", \"info\");\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/auth/login/admin',\r\n                {\r\n                    method: 'POST',\r\n                    headers:\r\n                    {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(\r\n                        {\r\n                            username: 'Admin',\r\n                            password: '@350239'\r\n                        })\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) {\r\n                showInitialLogin();\r\n                throw new Error(data.message);\r\n            }\r\n            localStorage.setItem('authToken', data.token);\r\n            currentLoggedInUser = null;\r\n            currentLoggedInCompany = null;\r\n            loggedInViaAdmin = false;\r\n            isAdminLoggedIn = true;\r\n            showAdminDashboard();\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n    // --- Funções do Admin Dashboard ---\r\n    async function renderCompanyList() {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) return;\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/companies',\r\n                {\r\n                    headers:\r\n                    {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                });\r\n            if (!response.ok) throw new Error('Falha ao buscar empresas.');\r\n            const companies = await response.json();\r\n            companyListDiv.innerHTML = '';\r\n            if (companies.length === 0) {\r\n                noCompaniesMessage.classList.remove('hidden');\r\n            }\r\n            else {\r\n                noCompaniesMessage.classList.add('hidden');\r\n                companies.forEach(company => {\r\n                    const companyCard = document.createElement('div');\r\n                    companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n                    companyCard.innerHTML = `\r\n\r\n                        <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n\r\n                        <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n\r\n                        <p class=\"text-gray-400 text-sm mt-2\">${company.usuarios.length} usuários cadastrados</p>\r\n\r\n                        <div class=\"mt-4 flex justify-end space-x-2\">\r\n\r\n                            <button class=\"view-company-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n\r\n                            <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n\r\n                        </div>\r\n\r\n                    `;\r\n                    companyListDiv.appendChild(companyCard);\r\n                });\r\n                document.querySelectorAll('.view-company-details-btn').forEach(button => {\r\n                    button.addEventListener('click', async (e) => {\r\n                        const companyId = e.target.dataset.companyId;\r\n                        const token = localStorage.getItem('authToken');\r\n                        try {\r\n                            const response = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n                                {\r\n                                    headers:\r\n                                    {\r\n                                        'Authorization': `Bearer ${token}`\r\n                                    }\r\n                                });\r\n                            const companyDetails = await response.json();\r\n                            if (!response.ok) throw new Error(companyDetails.message);\r\n                            openCompanyDetailsModal(companyDetails);\r\n                        }\r\n                        catch (error) {\r\n                            showToast(error.message, 'error');\r\n                        }\r\n                    });\r\n                });\r\n                document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n                    button.addEventListener('click', async (e) => {\r\n                        const companyId = e.target.dataset.companyId;\r\n                        const token = localStorage.getItem('authToken');\r\n                        try {\r\n                            const companyResponse = await fetch(`http://localhost:5000/api/companies/${companyId}`,\r\n                                {\r\n                                    headers:\r\n                                    {\r\n                                        'Authorization': `Bearer ${token}`\r\n                                    }\r\n                                });\r\n                            const companyDetails = await companyResponse.json();\r\n                            if (!companyResponse.ok) throw new Error(companyDetails.message);\r\n                            if (companyDetails.usuarios.length === 0) {\r\n                                showToast(\"Esta empresa não tem usuários para entrar.\", \"info\");\r\n                                return;\r\n                            }\r\n                            const userId = companyDetails.usuarios[0]._id;\r\n                            const impersonateResponse = await fetch('http://localhost:5000/api/admin/impersonate',\r\n                                {\r\n                                    method: 'POST',\r\n                                    headers:\r\n                                    {\r\n                                        'Content-Type': 'application/json',\r\n                                        'Authorization': `Bearer ${token}`\r\n                                    },\r\n                                    body: JSON.stringify(\r\n                                        {\r\n                                            companyId,\r\n                                            userId\r\n                                        })\r\n                                });\r\n                            const data = await impersonateResponse.json();\r\n                            if (!impersonateResponse.ok) throw new Error(data.message);\r\n                            showToast(`Entrando na empresa ${data.company.nomeEmpresa}...`, 'success');\r\n                            localStorage.setItem('authToken', data.token);\r\n                            currentLoggedInCompany = data.company;\r\n                            currentLoggedInUser = data.user;\r\n                            loggedInViaAdmin = true;\r\n                            showMainApp();\r\n                        }\r\n                        catch (error) {\r\n                            showToast(error.message, 'error');\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    }\r\n    createCompanyBtn.addEventListener('click', async () => {\r\n        const nomeEmpresa = prompt(\"Digite o nome da nova empresa:\");\r\n        if (!nomeEmpresa) return;\r\n        const cnpj = prompt(\"Digite o CNPJ da nova empresa:\");\r\n        if (!cnpj) return;\r\n        const senhaEmpresa = prompt(\"Digite uma senha para a nova empresa:\");\r\n        if (!senhaEmpresa) return;\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            showToast(\"Erro de autenticação. Faça o login de administrador novamente.\", \"error\");\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/companies/register',\r\n                {\r\n                    method: 'POST',\r\n                    headers:\r\n                    {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`\r\n                    },\r\n                    body: JSON.stringify(\r\n                        {\r\n                            nomeEmpresa,\r\n                            cnpj,\r\n                            senhaEmpresa\r\n                        })\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message || \"Não foi possível criar a empresa.\");\r\n            showToast(data.message, 'success');\r\n            renderCompanyList();\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n    // --- Lógica Principal do App de Boletos ---\r\n    function initializeCalendarDate() {\r\n        const today = new Date();\r\n        currentMonth = today.getMonth();\r\n        currentYear = today.getFullYear();\r\n        currentDailyViewDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n    }\r\n    async function updateBillsOrganizer() {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            showToast('Sessão inválida. Por favor, faça o login.', 'error');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/boletos',\r\n                {\r\n                    method: 'GET',\r\n                    headers:\r\n                    {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                });\r\n            if (!response.ok) throw new Error((await response.json()).message || \"Erro ao buscar boletos.\");\r\n            userBoletos = await response.json();\r\n            const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n            totalBillsSpan.textContent = totalParcels;\r\n            updateMonthlySummary();\r\n            if (window.innerWidth >= 1024) {\r\n                document.getElementById('billsOrganizer').classList.remove('hidden');\r\n                document.getElementById('dailyBillsViewer').classList.add('hidden');\r\n                renderCalendar();\r\n            }\r\n            else {\r\n                document.getElementById('billsOrganizer').classList.add('hidden');\r\n                document.getElementById('dailyBillsViewer').classList.remove('hidden');\r\n                renderDailyBills();\r\n            }\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    }\r\n\r\n    function updateMonthlySummary() {\r\n        const today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n            .filter(parcel => {\r\n                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n            });\r\n        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n        const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n        const totalNaoPago = totalMes - totalPago;\r\n        const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n            .filter(parcel => {\r\n                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n                return dueDate < today && !parcel.paid;\r\n            });\r\n        const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n        const formatCurrency = (value) => value.toLocaleString('pt-BR',\r\n            {\r\n                style: 'currency',\r\n                currency: 'BRL'\r\n            });\r\n        document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n        document.getElementById('summaryPaid').textContent = formatCurrency(totalPago);\r\n        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPago);\r\n    }\r\n\r\n    function renderCalendar() {\r\n        const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n        document.getElementById('currentMonthYear').textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n        const calendarDays = document.getElementById('calendarDays');\r\n        calendarDays.innerHTML = '';\r\n        const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n        for (let i = 0; i < firstDayOfMonth; i++) {\r\n            const emptyCell = document.createElement('div');\r\n            emptyCell.className = 'day-cell empty p-1 border border-gray-800';\r\n            calendarDays.appendChild(emptyCell);\r\n        }\r\n        for (let day = 1; day <= daysInMonth; day++) {\r\n            const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n            const dayCell = document.createElement('div');\r\n            dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors';\r\n            dayCell.dataset.date = dateStr;\r\n            const dayHeader = document.createElement('div');\r\n            dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n            dayHeader.textContent = day;\r\n            dayCell.appendChild(dayHeader);\r\n            dayCell.addEventListener('click', (e) => {\r\n                if (e.target.closest('.bill-card')) return;\r\n                const clickedDate = e.currentTarget.dataset.date;\r\n                clearBillForm();\r\n                document.getElementById('dueDate').value = clickedDate;\r\n                addBillModal.classList.remove('hidden');\r\n            });\r\n            userBoletos.forEach(bill => {\r\n                bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n                    const parcelElement = document.createElement('div');\r\n                    parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n                    parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n                    parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n                    dayCell.appendChild(parcelElement);\r\n                });\r\n            });\r\n            calendarDays.appendChild(dayCell);\r\n        }\r\n    }\r\n\r\n    function renderDailyBills() {\r\n        dailyBillsList.innerHTML = '<div class=\"text-center text-gray-500 p-4\">Funcionalidade de lista diária a ser implementada.</div>';\r\n    }\r\n\r\n    function clearBillForm() {\r\n        billForm.reset();\r\n        installmentsPreview.classList.add('hidden');\r\n        installmentsList.innerHTML = '';\r\n        currentBill = {};\r\n    }\r\n    clearFormBtn.addEventListener('click', clearBillForm);\r\n    billForm.addEventListener('submit', function (e) {\r\n        e.preventDefault();\r\n        const billName = document.getElementById('billName').value;\r\n        const dueDate = document.getElementById('dueDate').value;\r\n        const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n        const installments = parseInt(document.getElementById('installments').value);\r\n        const description = document.getElementById('description').value;\r\n        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n        const barcode = document.getElementById('barcode').value;\r\n        if (!billName || !dueDate || !totalAmount || !installments) {\r\n            showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n            return;\r\n        }\r\n        currentBill = {\r\n            name: billName,\r\n            parcels: []\r\n        };\r\n        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n        installmentsList.innerHTML = '';\r\n    for (let i = 0; i < installments; i++) {\r\n        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n\r\n        currentBill.parcels.push({\r\n            id: `${Date.now()}-${i}`,\r\n            number: i + 1,\r\n            amount: parcelAmount,\r\n            dueDate: dateForInput,\r\n            paid: false,\r\n            description: description,\r\n            barcode: barcode\r\n        });\r\n\r\n        const formattedDate = parcelDate.toLocaleDateString('pt-BR', {\r\n            day: '2-digit',\r\n            month: '2-digit',\r\n            year: 'numeric'\r\n        });\r\n        \r\n        const parcelItem = document.createElement('div');\r\n        parcelItem.className = 'bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center';\r\n        \r\n        parcelItem.innerHTML = `\r\n            <div class=\"flex items-center space-x-4\">\r\n                <span class=\"font-medium text-gray-200 w-20\">Parcela ${i + 1}</span>\r\n                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n            </div>\r\n            <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-32 text-right font-bold text-lg\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n        `;\r\n        \r\n        installmentsList.appendChild(parcelItem);\r\n    }\r\n        document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n            input.addEventListener('input', (e) => {\r\n                const index = parseInt(e.target.dataset.parcelIndex);\r\n                const newAmount = parseFloat(e.target.value) || 0;\r\n                if (!isNaN(newAmount)) {\r\n                    currentBill.parcels[index].amount = newAmount;\r\n                    updatePreviewTotal();\r\n                }\r\n            });\r\n            input.addEventListener('blur', (e) => {\r\n                const newAmount = parseFloat(e.target.value) || 0;\r\n                e.target.value = newAmount.toFixed(2);\r\n            });\r\n        });\r\n        document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n            input.addEventListener('change', (e) => {\r\n                const index = parseInt(e.target.dataset.parcelIndex);\r\n                currentBill.parcels[index].dueDate = e.target.value;\r\n            });\r\n        });\r\n        installmentsPreview.classList.remove('hidden');\r\n        updatePreviewTotal();\r\n    });\r\n\r\n    function updatePreviewTotal() {\r\n        if (!currentBill.parcels || currentBill.parcels.length === 0) return;\r\n        const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n        parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n    }\r\n    addToOrganizer.addEventListener('click', async function () {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            showToast('Erro de autenticação. Por favor, faça o login novamente.', 'error');\r\n            return;\r\n        }\r\n        if (!currentBill || !currentBill.name) {\r\n            showToast('Calcule as parcelas antes de adicionar.', 'error');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/boletos',\r\n                {\r\n                    method: 'POST',\r\n                    headers:\r\n                    {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`\r\n                    },\r\n                    body: JSON.stringify(currentBill)\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message || \"Erro ao salvar boleto.\");\r\n            showToast(data.message, 'success');\r\n            addBillModal.classList.add('hidden');\r\n            updateBillsOrganizer();\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n    // --- Lógica do Modal de Edição de Boletos ---\r\n    function openBillModal(bill, parcel) {\r\n        selectedParcel = {\r\n            ...parcel,\r\n            parentId: bill.id\r\n        };\r\n        document.getElementById('modalBillName').textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n        document.getElementById('modalBillAmount').value = parcel.amount.toFixed(2);\r\n        document.getElementById('modalBillDate').value = parcel.dueDate;\r\n        document.getElementById('modalBillDescription').value = parcel.description || '';\r\n        modalBillBarcodeInput.value = parcel.barcode || '';\r\n        modalBillPaidCheckbox.checked = parcel.paid;\r\n        if (parcel.barcode && parcel.barcode.trim() !== '') {\r\n            showFullScreenBarcodeBtn.classList.remove('hidden');\r\n        }\r\n        else {\r\n            showFullScreenBarcodeBtn.classList.add('hidden');\r\n        }\r\n        billModal.classList.remove('hidden');\r\n    }\r\n    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n    billModal.addEventListener('click', (e) => {\r\n        if (e.target === billModal) billModal.classList.add('hidden');\r\n    });\r\n    saveBillBtn.addEventListener('click', async () => {\r\n        if (!selectedParcel) return;\r\n        const token = localStorage.getItem('authToken');\r\n        const updatedData = {\r\n            paid: document.getElementById('modalBillPaid').checked,\r\n            amount: parseFloat(document.getElementById('modalBillAmount').value),\r\n            dueDate: document.getElementById('modalBillDate').value,\r\n            description: document.getElementById('modalBillDescription').value,\r\n            barcode: document.getElementById('modalBillBarcode').value\r\n        };\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n                {\r\n                    method: 'PATCH',\r\n                    headers:\r\n                    {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`\r\n                    },\r\n                    body: JSON.stringify(updatedData)\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message);\r\n            showToast('Parcela atualizada com sucesso!', 'success');\r\n            billModal.classList.add('hidden');\r\n            updateBillsOrganizer();\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n    deleteBillBtn.addEventListener('click', async () => {\r\n        if (!selectedParcel) return;\r\n        if (!confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n        const token = localStorage.getItem('authToken');\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/boletos/${selectedParcel.parentId}/parcels/${selectedParcel.id}`,\r\n                {\r\n                    method: 'DELETE',\r\n                    headers:\r\n                    {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message);\r\n            showToast('Parcela excluída com sucesso!', 'success');\r\n            billModal.classList.add('hidden');\r\n            updateBillsOrganizer();\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\ndeleteEntireBillBtn.addEventListener('click', async () => {\r\n    if (!selectedParcel || !selectedParcel.parentId) {\r\n        showToast(\"Nenhum boleto selecionado.\", \"error\");\r\n        return;\r\n    }\r\n    \r\n    if (!confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas? Esta ação não pode ser desfeita.\")) {\r\n        return;\r\n    }\r\n    \r\n    const token = localStorage.getItem('authToken');\r\n    const boletoId = selectedParcel.parentId;\r\n    \r\n    try {\r\n        const response = await fetch(`http://localhost:5000/api/boletos/${boletoId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        });\r\n        \r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            throw new Error(data.message);\r\n        }\r\n        \r\n        showToast('Boleto completo excluído com sucesso!', 'success');\r\n        billModal.classList.add('hidden');\r\n        updateBillsOrganizer();\r\n        \r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    }\r\n});\r\n    // --- Lógica do Modal de Detalhes da Empresa ---\r\nfunction openCompanyDetailsModal(company) {\r\n    selectedCompanyForAdmin = company;\r\n    modalCompanyName.textContent = company.nomeEmpresa;\r\n    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n    modalCompanyPasswordInput.value = '';\r\n\r\n    modalCompanyUsers.innerHTML = '';\r\n    if (company.usuarios.length === 0) {\r\n        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n    } else {\r\n        // Define a lista de papéis disponíveis baseado em quem está logado\r\n        const assignableRoles = isAdminLoggedIn ?\r\n            ['Proprietário', 'Gerente', 'Funcionário'] :\r\n            ['Gerente', 'Funcionário'];\r\n\r\n        company.usuarios.forEach(user => {\r\n            const userItem = document.createElement('div');\r\n            userItem.className = 'bg-gray-700 rounded p-2 flex justify-between items-center mb-2';\r\n\r\n            let roleDisplay = '';\r\n\r\n            // Se o Super Admin estiver logado, TODOS os usuários são editáveis.\r\n            const isEditable = isAdminLoggedIn || user.role !== 'Proprietário';\r\n\r\n            if (isEditable) {\r\n                const optionsHTML = assignableRoles.map(role => {\r\n                    // Impede que um Proprietário crie outro Proprietário no dropdown\r\n                    if (!isAdminLoggedIn && role === 'Proprietário') {\r\n                        return '';\r\n                    }\r\n                    return `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`;\r\n                }).join('');\r\n\r\n                let finalOptions = optionsHTML;\r\n                // Garante que a opção 'Proprietário' apareça para um usuário que já é proprietário\r\n                if (isAdminLoggedIn && user.role === 'Proprietário' && !assignableRoles.includes('Proprietário')) {\r\n                    finalOptions = `<option value=\"Proprietário\" selected>Proprietário</option>` + optionsHTML;\r\n                }\r\n\r\n                roleDisplay = `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm\" data-user-id=\"${user._id}\">${finalOptions}</select>`;\r\n            } else {\r\n                // Mostra um texto fixo para o Proprietário quando não é o Super Admin que está vendo.\r\n                roleDisplay = `<span class=\"bg-yellow-500 text-yellow-900 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">Proprietário</span>`;\r\n            }\r\n\r\n            userItem.innerHTML = `\r\n                <div class=\"flex items-center space-x-3\">\r\n                    <span class=\"text-white\">${user.username}</span>\r\n                    ${roleDisplay}\r\n                </div>\r\n                <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n            `;\r\n            modalCompanyUsers.appendChild(userItem);\r\n        });\r\n    }\r\n\r\n    // Anexa os listeners aos botões e selects criados\r\n    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n        button.addEventListener('click', (e) => {\r\n            const userId = e.target.dataset.userId;\r\n            const companyId = selectedCompanyForAdmin._id;\r\n            handleRemoveUser(companyId, userId);\r\n        });\r\n    });\r\n\r\n    document.querySelectorAll('.role-select').forEach(select => {\r\n        select.addEventListener('change', async (e) => {\r\n            const userId = e.target.dataset.userId;\r\n            const newRole = e.target.value;\r\n            const token = localStorage.getItem('authToken');\r\n            const companyId = selectedCompanyForAdmin._id;\r\n\r\n            try {\r\n                const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}/role`, {\r\n                    method: 'PATCH',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`\r\n                    },\r\n                    body: JSON.stringify({\r\n                        role: newRole\r\n                    })\r\n                });\r\n\r\n                const data = await response.json();\r\n                if (!response.ok) {\r\n                    throw new Error(data.message);\r\n                }\r\n\r\n                showToast(data.message, 'success');\r\n                // Atualiza o estado local para refletir a mudança sem precisar recarregar\r\n                selectedCompanyForAdmin.usuarios.find(u => u._id === userId).role = newRole;\r\n\r\n            } catch (error) {\r\n                showToast(error.message, 'error');\r\n                // Em caso de erro, recarrega o modal para reverter a mudança visual na tela\r\n                fetchCompanyDetailsAndOpenModal(companyId);\r\n            }\r\n        });\r\n    });\r\n\r\n    companyDetailsModal.classList.remove('hidden');\r\n}\r\n    async function handleRemoveUser(companyId, userId) {\r\n        if (!confirm(\"Tem certeza que deseja remover este usuário?\")) return;\r\n        const token = localStorage.getItem('authToken');\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/companies/${companyId}/users/${userId}`,\r\n                {\r\n                    method: 'DELETE',\r\n                    headers:\r\n                    {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message);\r\n            showToast(data.message, 'success');\r\n            companyDetailsModal.classList.add('hidden');\r\n            renderCompanyList();\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    }\r\n    addUserBtn.addEventListener('click', async () => {\r\n        if (!selectedCompanyForAdmin) return;\r\n        const username = prompt(\"Digite o nome do novo usuário:\");\r\n        if (!username) return;\r\n        const password = prompt(`Digite a senha para o usuário \"${username}\":`);\r\n        if (!password) return;\r\n        const token = localStorage.getItem('authToken');\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/auth/register/user',\r\n                {\r\n                    method: 'POST',\r\n                    headers:\r\n                    {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`\r\n                    },\r\n                    body: JSON.stringify(\r\n                        {\r\n                            username,\r\n                            password,\r\n                            companyId: selectedCompanyForAdmin._id\r\n                        })\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message);\r\n            showToast(data.message, 'success');\r\n            companyDetailsModal.classList.add('hidden');\r\n            renderCompanyList();\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n    deleteCompanyBtn.addEventListener('click', async () => {\r\n        if (!selectedCompanyForAdmin) return;\r\n        const confirmation = prompt(`Atenção! Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n        if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n            showToast(\"A exclusão foi cancelada.\", \"info\");\r\n            return;\r\n        }\r\n        const token = localStorage.getItem('authToken');\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n                {\r\n                    method: 'DELETE',\r\n                    headers:\r\n                    {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message);\r\n            showToast(data.message, 'success');\r\n            companyDetailsModal.classList.add('hidden');\r\n            renderCompanyList();\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n    saveCompanyDetailsBtn.addEventListener('click', async () => {\r\n        if (!selectedCompanyForAdmin) return;\r\n        const newPassword = modalCompanyPasswordInput.value;\r\n        if (!newPassword) {\r\n            showToast(\"Digite uma nova senha para alterar.\", \"info\");\r\n            return;\r\n        }\r\n        const token = localStorage.getItem('authToken');\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/companies/${selectedCompanyForAdmin._id}`,\r\n                {\r\n                    method: 'PATCH',\r\n                    headers:\r\n                    {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`\r\n                    },\r\n                    body: JSON.stringify(\r\n                        {\r\n                            newPassword: newPassword\r\n                        })\r\n                });\r\n            const data = await response.json();\r\n            if (!response.ok) throw new Error(data.message);\r\n            showToast('Dados da empresa atualizados com sucesso!', 'success');\r\n            companyDetailsModal.classList.add('hidden');\r\n        }\r\n        catch (error) {\r\n            showToast(error.message, 'error');\r\n        }\r\n    });\r\n    closeCompanyModalBtn.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n    companyDetailsModal.addEventListener('click', (e) => {\r\n        if (e.target === companyDetailsModal) companyDetailsModal.classList.add('hidden');\r\n    });\r\n    // --- Inicialização ---\r\n    initializeCalendarDate();\r\n    showInitialLogin();\r\n});"
        }
    ]
}