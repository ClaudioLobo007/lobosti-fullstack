{
    "sourceFile": "Servidor/routes/nfe.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752697936422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752698742311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,47 +10,33 @@\n router.get('/:chave', protect, async (req, res) => {\r\n     try {\r\n         const chaveNfe = req.params.chave;\r\n         const apiKey = process.env.NFE_API_KEY;\r\n-\r\n         if (!chaveNfe || chaveNfe.length !== 44) {\r\n             return res.status(400).json({ message: 'Chave de NFe inválida. A chave deve conter 44 dígitos.' });\r\n         }\r\n-\r\n-        // URL da API da NFE.io para consultar uma NFe\r\n-        const apiUrl = `https://api.nfe.io/v1/nfe/${chaveNfe}`;\r\n-\r\n+        const apiUrl = `https://api.nfe.io/v1/nfe/${chaveNfe}?apiKey=${apiKey}`;\r\n         const response = await fetch(apiUrl, {\r\n             method: 'GET',\r\n             headers: {\r\n-                'Authorization': apiKey,\r\n                 'Content-Type': 'application/json'\r\n             }\r\n         });\r\n-\r\n-        const nfeData = await response.json();\r\n-\r\n+        const responseBody = await response.text();\r\n         if (!response.ok) {\r\n-            // Se a NFE.io retornar um erro, nós o repassamos.\r\n-            throw new Error(nfeData.message || 'NFe não encontrada ou erro no serviço externo.');\r\n+            throw new Error(responseBody || `Erro ${response.status} ao consultar a NFE.`);\r\n         }\r\n-\r\n-        // Extrai e formata os dados que nos interessam do JSON retornado pela NFE.io\r\n-        // NOTA: Os caminhos (ex: nfeData.issuer.name) são exemplos. Precisaremos de os ajustar\r\n-        // com base na resposta real da API da NFE.io.\r\n+        const nfeData = JSON.parse(responseBody);\r\n         const dadosParaBoleto = {\r\n             nome: `NFe - ${nfeData.issuer?.name || 'Fornecedor Desconhecido'}`,\r\n             valorTotal: nfeData.totalAmount || 0.00,\r\n             vencimento: nfeData.payment?.dueDate || new Date().toISOString().split('T')[0],\r\n-            // ... podemos extrair outros dados se necessário\r\n         };\r\n \r\n-        // Envia os dados simplificados de volta para o frontend\r\n         res.status(200).json(dadosParaBoleto);\r\n \r\n     } catch (error) {\r\n-        console.error(\"Erro ao buscar NFe:\", error);\r\n+        console.error(\"Erro ao buscar NFe:\", error.message);\r\n         res.status(500).json({ message: error.message || 'Erro interno ao consultar a NFe.' });\r\n     }\r\n });\r\n-\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752699174424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,12 @@\n             }\r\n         });\r\n         const responseBody = await response.text();\r\n         if (!response.ok) {\r\n+            // Se o erro for 404, repassamos o 404 para o nosso frontend.\r\n+            if (response.status === 404) {\r\n+                return res.status(404).json({ message: 'NFe não encontrada no serviço.' });\r\n+            }\r\n             throw new Error(responseBody || `Erro ${response.status} ao consultar a NFE.`);\r\n         }\r\n         const nfeData = JSON.parse(responseBody);\r\n         const dadosParaBoleto = {\r\n"
                },
                {
                    "date": 1752700698967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,31 +10,40 @@\n router.get('/:chave', protect, async (req, res) => {\r\n     try {\r\n         const chaveNfe = req.params.chave;\r\n         const apiKey = process.env.NFE_API_KEY;\r\n+\r\n         if (!chaveNfe || chaveNfe.length !== 44) {\r\n             return res.status(400).json({ message: 'Chave de NFe inválida. A chave deve conter 44 dígitos.' });\r\n         }\r\n+\r\n         const apiUrl = `https://api.nfe.io/v1/nfe/${chaveNfe}?apiKey=${apiKey}`;\r\n+\r\n         const response = await fetch(apiUrl, {\r\n             method: 'GET',\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n+            headers: { 'Content-Type': 'application/json' }\r\n         });\r\n+        \r\n         const responseBody = await response.text();\r\n+\r\n         if (!response.ok) {\r\n-            // Se o erro for 404, repassamos o 404 para o nosso frontend.\r\n-            if (response.status === 404) {\r\n-                return res.status(404).json({ message: 'NFe não encontrada no serviço.' });\r\n+            if (response.status === 404 || response.status === 403) {\r\n+                return res.status(404).json({ message: 'NFe não encontrada ou não disponível para consulta.' });\r\n             }\r\n-            throw new Error(responseBody || `Erro ${response.status} ao consultar a NFE.`);\r\n+            throw new Error(responseBody || `Erro ${response.status} ao consultar a NFe.`);\r\n         }\r\n+        \r\n         const nfeData = JSON.parse(responseBody);\r\n+\r\n         const dadosParaBoleto = {\r\n-            nome: `NFe - ${nfeData.issuer?.name || 'Fornecedor Desconhecido'}`,\r\n-            valorTotal: nfeData.totalAmount || 0.00,\r\n-            vencimento: nfeData.payment?.dueDate || new Date().toISOString().split('T')[0],\r\n+            // Prioriza o Nome Fantasia, se não houver, usa a Razão Social.\r\n+            nome: `NFe - ${nfeData.issuer?.tradeName || nfeData.issuer?.name || 'Fornecedor Desconhecido'}`,\r\n+            \r\n+            // Prioriza o valor líquido da fatura, se não houver, usa o valor total da nota.\r\n+            valorTotal: nfeData.billing?.bill?.netAmount || nfeData.totals?.icms?.invoiceAmount || 0.00,\r\n+            \r\n+            // Prioriza a data de vencimento da primeira duplicata, se não houver, usa a data de emissão.\r\n+            vencimento: nfeData.billing?.duplicates?.[0]?.expirationOn?.split('T')[0] || nfeData.issuedOn?.split('T')[0]\r\n         };\r\n \r\n         res.status(200).json(dadosParaBoleto);\r\n \r\n@@ -42,5 +51,6 @@\n         console.error(\"Erro ao buscar NFe:\", error.message);\r\n         res.status(500).json({ message: error.message || 'Erro interno ao consultar a NFe.' });\r\n     }\r\n });\r\n+\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752770893688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+const fetch = require('node-fetch'); // O 'fetch' no backend precisa de ser importado\r\n+const { protect } = require('../middleware/authMiddleware');\r\n+\r\n+// Rota: GET /api/nfe/:chave\r\n+// Recebe uma chave de 44 dígitos e busca os dados na API da NFE.io\r\n+router.get('/:chave', protect, async (req, res) => {\r\n+    try {\r\n+        const chaveNfe = req.params.chave;\r\n+        const apiKey = process.env.NFE_API_KEY;\r\n+\r\n+        if (!chaveNfe || chaveNfe.length !== 44) {\r\n+            return res.status(400).json({ message: 'Chave de NFe inválida. A chave deve conter 44 dígitos.' });\r\n+        }\r\n+\r\n+        const apiUrl = `https://api.nfe.io/v1/nfe/${chaveNfe}?apiKey=${apiKey}`;\r\n+\r\n+        const response = await fetch(apiUrl, {\r\n+            method: 'GET',\r\n+            headers: { 'Content-Type': 'application/json' }\r\n+        });\r\n+        \r\n+        const responseBody = await response.text();\r\n+\r\n+        if (!response.ok) {\r\n+            if (response.status === 404 || response.status === 403) {\r\n+                return res.status(404).json({ message: 'NFe não encontrada ou não disponível para consulta.' });\r\n+            }\r\n+            throw new Error(responseBody || `Erro ${response.status} ao consultar a NFe.`);\r\n+        }\r\n+        \r\n+        const nfeData = JSON.parse(responseBody);\r\n+\r\n+        const dadosParaBoleto = {\r\n+            // Prioriza o Nome Fantasia, se não houver, usa a Razão Social.\r\n+            nome: `NFe - ${nfeData.issuer?.tradeName || nfeData.issuer?.name || 'Fornecedor Desconhecido'}`,\r\n+            \r\n+            // Prioriza o valor líquido da fatura, se não houver, usa o valor total da nota.\r\n+            valorTotal: nfeData.billing?.bill?.netAmount || nfeData.totals?.icms?.invoiceAmount || 0.00,\r\n+            \r\n+            // Prioriza a data de vencimento da primeira duplicata, se não houver, usa a data de emissão.\r\n+            vencimento: nfeData.billing?.duplicates?.[0]?.expirationOn?.split('T')[0] || nfeData.issuedOn?.split('T')[0]\r\n+        };\r\n+\r\n+        res.status(200).json(dadosParaBoleto);\r\n+\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao buscar NFe:\", error.message);\r\n+        res.status(500).json({ message: error.message || 'Erro interno ao consultar a NFe.' });\r\n+    }\r\n+});\r\n+\r\n+module.exports = router;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1752697936422,
            "name": "Commit-0",
            "content": "// Dentro de Servidor/routes/nfe.js\r\n\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst fetch = require('node-fetch'); // O 'fetch' no backend precisa de ser importado\r\nconst { protect } = require('../middleware/authMiddleware');\r\n\r\n// Rota: GET /api/nfe/:chave\r\n// Recebe uma chave de 44 dígitos e busca os dados na API da NFE.io\r\nrouter.get('/:chave', protect, async (req, res) => {\r\n    try {\r\n        const chaveNfe = req.params.chave;\r\n        const apiKey = process.env.NFE_API_KEY;\r\n\r\n        if (!chaveNfe || chaveNfe.length !== 44) {\r\n            return res.status(400).json({ message: 'Chave de NFe inválida. A chave deve conter 44 dígitos.' });\r\n        }\r\n\r\n        // URL da API da NFE.io para consultar uma NFe\r\n        const apiUrl = `https://api.nfe.io/v1/nfe/${chaveNfe}`;\r\n\r\n        const response = await fetch(apiUrl, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': apiKey,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        const nfeData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            // Se a NFE.io retornar um erro, nós o repassamos.\r\n            throw new Error(nfeData.message || 'NFe não encontrada ou erro no serviço externo.');\r\n        }\r\n\r\n        // Extrai e formata os dados que nos interessam do JSON retornado pela NFE.io\r\n        // NOTA: Os caminhos (ex: nfeData.issuer.name) são exemplos. Precisaremos de os ajustar\r\n        // com base na resposta real da API da NFE.io.\r\n        const dadosParaBoleto = {\r\n            nome: `NFe - ${nfeData.issuer?.name || 'Fornecedor Desconhecido'}`,\r\n            valorTotal: nfeData.totalAmount || 0.00,\r\n            vencimento: nfeData.payment?.dueDate || new Date().toISOString().split('T')[0],\r\n            // ... podemos extrair outros dados se necessário\r\n        };\r\n\r\n        // Envia os dados simplificados de volta para o frontend\r\n        res.status(200).json(dadosParaBoleto);\r\n\r\n    } catch (error) {\r\n        console.error(\"Erro ao buscar NFe:\", error);\r\n        res.status(500).json({ message: error.message || 'Erro interno ao consultar a NFe.' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"
        }
    ]
}