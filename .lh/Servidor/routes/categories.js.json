{
    "sourceFile": "Servidor/routes/categories.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1752941891648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753534125690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,31 @@\n-// Crie este novo ficheiro: Servidor/routes/categories.js\r\n-\r\n const express = require('express');\r\n const router = express.Router();\r\n-const { protect } = require('../middleware/authMiddleware');\r\n-const Category = require('../models/Category');\r\n-const Boleto = require('../models/Boleto');\r\n \r\n+const CategorySchema = require('../models/Category').schema;\r\n+const BoletoSchema = require('../models/Boleto').schema;\r\n+\r\n // Rota para LER todas as categorias de uma empresa\r\n-router.get('/', protect, async (req, res) => {\r\n+router.get('/', async (req, res) => {\r\n     try {\r\n-        const categories = await Category.find({ company: req.user.companyId }).sort({ name: 1 });\r\n+        const Category = req.tenantDb.model('Category', CategorySchema);\r\n+        const categories = await Category.find({}).sort({ name: 1 });\r\n         res.status(200).json(categories);\r\n     } catch (error) {\r\n         res.status(500).json({ message: 'Erro ao buscar categorias.' });\r\n     }\r\n });\r\n \r\n // Rota para CRIAR uma nova categoria\r\n-router.post('/', protect, async (req, res) => {\r\n+router.post('/', async (req, res) => {\r\n     try {\r\n+        // A lógica de permissão (req.user.role) continua a mesma\r\n         if (req.user.role !== 'Proprietário') {\r\n             return res.status(403).json({ message: 'Apenas proprietários podem criar categorias.' });\r\n         }\r\n+        const Category = req.tenantDb.model('Category', CategorySchema);\r\n         const { name } = req.body;\r\n-        const newCategory = await Category.create({ name, company: req.user.companyId });\r\n+        const newCategory = await Category.create({ name });\r\n         res.status(201).json(newCategory);\r\n     } catch (error) {\r\n         if (error.code === 11000) {\r\n             return res.status(400).json({ message: 'Uma categoria com este nome já existe.' });\r\n@@ -33,16 +34,17 @@\n     }\r\n });\r\n \r\n // Rota para ATUALIZAR uma categoria\r\n-router.patch('/:id', protect, async (req, res) => {\r\n+router.patch('/:id', async (req, res) => {\r\n     try {\r\n         if (req.user.role !== 'Proprietário') {\r\n             return res.status(403).json({ message: 'Apenas proprietários podem editar categorias.' });\r\n         }\r\n+        const Category = req.tenantDb.model('Category', CategorySchema);\r\n         const { name } = req.body;\r\n         const updatedCategory = await Category.findOneAndUpdate(\r\n-            { _id: req.params.id, company: req.user.companyId },\r\n+            { _id: req.params.id },\r\n             { name },\r\n             { new: true }\r\n         );\r\n         res.status(200).json(updatedCategory);\r\n@@ -51,16 +53,19 @@\n     }\r\n });\r\n \r\n // Rota para APAGAR uma categoria\r\n-router.delete('/:id', protect, async (req, res) => {\r\n+router.delete('/:id', async (req, res) => {\r\n     try {\r\n         if (req.user.role !== 'Proprietário') {\r\n             return res.status(403).json({ message: 'Apenas proprietários podem apagar categorias.' });\r\n         }\r\n+        const Category = req.tenantDb.model('Category', CategorySchema);\r\n+        const Boleto = req.tenantDb.model('Boleto', BoletoSchema);\r\n+\r\n         // Antes de apagar, remove a categoria de todos os boletos que a usam\r\n         await Boleto.updateMany({ category: req.params.id }, { $set: { category: null } });\r\n-        await Category.findOneAndDelete({ _id: req.params.id, company: req.user.companyId });\r\n+        await Category.findOneAndDelete({ _id: req.params.id });\r\n         res.status(200).json({ message: 'Categoria apagada com sucesso.' });\r\n     } catch (error) {\r\n         res.status(500).json({ message: 'Erro ao apagar categoria.' });\r\n     }\r\n"
                },
                {
                    "date": 1754506027134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const express = require('express');\r\n const router = express.Router();\r\n \r\n-const CategorySchema = require('../models/Category').schema;\r\n-const BoletoSchema = require('../models/Boleto').schema;\r\n+const { schema: CategorySchema } = require('../models/Category');\r\n+const { schema: BoletoSchema } = require('../models/Boleto');\r\n \r\n // Rota para LER todas as categorias de uma empresa\r\n router.get('/', async (req, res) => {\r\n     try {\r\n"
                }
            ],
            "date": 1752941891648,
            "name": "Commit-0",
            "content": "// Crie este novo ficheiro: Servidor/routes/categories.js\r\n\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst { protect } = require('../middleware/authMiddleware');\r\nconst Category = require('../models/Category');\r\nconst Boleto = require('../models/Boleto');\r\n\r\n// Rota para LER todas as categorias de uma empresa\r\nrouter.get('/', protect, async (req, res) => {\r\n    try {\r\n        const categories = await Category.find({ company: req.user.companyId }).sort({ name: 1 });\r\n        res.status(200).json(categories);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao buscar categorias.' });\r\n    }\r\n});\r\n\r\n// Rota para CRIAR uma nova categoria\r\nrouter.post('/', protect, async (req, res) => {\r\n    try {\r\n        if (req.user.role !== 'Proprietário') {\r\n            return res.status(403).json({ message: 'Apenas proprietários podem criar categorias.' });\r\n        }\r\n        const { name } = req.body;\r\n        const newCategory = await Category.create({ name, company: req.user.companyId });\r\n        res.status(201).json(newCategory);\r\n    } catch (error) {\r\n        if (error.code === 11000) {\r\n            return res.status(400).json({ message: 'Uma categoria com este nome já existe.' });\r\n        }\r\n        res.status(500).json({ message: 'Erro ao criar categoria.' });\r\n    }\r\n});\r\n\r\n// Rota para ATUALIZAR uma categoria\r\nrouter.patch('/:id', protect, async (req, res) => {\r\n    try {\r\n        if (req.user.role !== 'Proprietário') {\r\n            return res.status(403).json({ message: 'Apenas proprietários podem editar categorias.' });\r\n        }\r\n        const { name } = req.body;\r\n        const updatedCategory = await Category.findOneAndUpdate(\r\n            { _id: req.params.id, company: req.user.companyId },\r\n            { name },\r\n            { new: true }\r\n        );\r\n        res.status(200).json(updatedCategory);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao atualizar categoria.' });\r\n    }\r\n});\r\n\r\n// Rota para APAGAR uma categoria\r\nrouter.delete('/:id', protect, async (req, res) => {\r\n    try {\r\n        if (req.user.role !== 'Proprietário') {\r\n            return res.status(403).json({ message: 'Apenas proprietários podem apagar categorias.' });\r\n        }\r\n        // Antes de apagar, remove a categoria de todos os boletos que a usam\r\n        await Boleto.updateMany({ category: req.params.id }, { $set: { category: null } });\r\n        await Category.findOneAndDelete({ _id: req.params.id, company: req.user.companyId });\r\n        res.status(200).json({ message: 'Categoria apagada com sucesso.' });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao apagar categoria.' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"
        }
    ]
}