{
    "sourceFile": "Servidor/routes/permissions.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1752253892004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752335331376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,30 +2,39 @@\n const router = express.Router();\r\n const Company = require('../models/Company');\r\n const { protect } = require('../middleware/authMiddleware');\r\n \r\n-// GET para ler as permissões\r\n+// GET para ler as permissões atuais da empresa\r\n router.get('/', protect, async (req, res) => {\r\n     try {\r\n         const company = await Company.findById(req.user.companyId);\r\n+        if (!company) return res.status(404).json({ message: \"Empresa não encontrada.\" });\r\n         res.status(200).json(company.permissions);\r\n     } catch (error) {\r\n         res.status(500).json({ message: 'Erro ao buscar permissões.' });\r\n     }\r\n });\r\n \r\n-// PATCH para atualizar as permissões\r\n+// MUDANÇA: Rota PATCH agora aceita o objeto de permissões completo\r\n router.patch('/', protect, async (req, res) => {\r\n+    // Apenas o 'Proprietário' pode alterar permissões\r\n     if (req.user.role !== 'Proprietário') {\r\n         return res.status(403).json({ message: 'Apenas proprietários podem alterar permissões.' });\r\n     }\r\n     try {\r\n-        const { roleToUpdate, permissions } = req.body;\r\n+        // Recebemos o objeto de permissões completo no corpo da requisição\r\n+        const newPermissions = req.body;\r\n+        \r\n         const company = await Company.findById(req.user.companyId);\r\n-        company.permissions[roleToUpdate] = { ...company.permissions[roleToUpdate], ...permissions };\r\n+        if (!company) return res.status(404).json({ message: \"Empresa não encontrada.\" });\r\n+\r\n+        // Substituímos o objeto de permissões antigo pelo novo\r\n+        company.permissions = newPermissions;\r\n         await company.save();\r\n-        res.status(200).json({ message: `Permissões para '${roleToUpdate}' atualizadas.` });\r\n+        \r\n+        res.status(200).json({ message: `Permissões da empresa atualizadas com sucesso.` });\r\n     } catch (error) {\r\n+        console.error(\"Erro ao salvar permissões: \", error);\r\n         res.status(500).json({ message: 'Erro ao atualizar permissões.' });\r\n     }\r\n });\r\n \r\n"
                },
                {
                    "date": 1753533718353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,26 @@\n const express = require('express');\r\n const router = express.Router();\r\n-const Company = require('../models/Company');\r\n-const { protect } = require('../middleware/authMiddleware');\r\n+const MasterCompany = require('../models/MasterCompany');\r\n \r\n-// GET para ler as permissões atuais da empresa\r\n-router.get('/', protect, async (req, res) => {\r\n+router.get('/', async (req, res) => {\r\n     try {\r\n-        const company = await Company.findById(req.user.companyId);\r\n+        const company = await MasterCompany.findById(req.user.companyId);\r\n         if (!company) return res.status(404).json({ message: \"Empresa não encontrada.\" });\r\n         res.status(200).json(company.permissions);\r\n     } catch (error) {\r\n         res.status(500).json({ message: 'Erro ao buscar permissões.' });\r\n     }\r\n });\r\n \r\n-// MUDANÇA: Rota PATCH agora aceita o objeto de permissões completo\r\n-router.patch('/', protect, async (req, res) => {\r\n-    // Apenas o 'Proprietário' pode alterar permissões\r\n-    if (req.user.role !== 'Proprietário') {\r\n-        return res.status(403).json({ message: 'Apenas proprietários podem alterar permissões.' });\r\n-    }\r\n+router.patch('/', async (req, res) => {\r\n+    // A verificação de 'Proprietário' será feita na rota /me, mas podemos manter aqui como dupla garantia\r\n+    // if (req.user.role !== 'Proprietário') { ... } \r\n     try {\r\n-        // Recebemos o objeto de permissões completo no corpo da requisição\r\n         const newPermissions = req.body;\r\n-        \r\n-        const company = await Company.findById(req.user.companyId);\r\n+        const company = await MasterCompany.findById(req.user.companyId);\r\n         if (!company) return res.status(404).json({ message: \"Empresa não encontrada.\" });\r\n \r\n-        // Substituímos o objeto de permissões antigo pelo novo\r\n         company.permissions = newPermissions;\r\n         await company.save();\r\n         \r\n         res.status(200).json({ message: `Permissões da empresa atualizadas com sucesso.` });\r\n"
                },
                {
                    "date": 1753545199540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,41 @@\n const express = require('express');\r\n const router = express.Router();\r\n-const MasterCompany = require('../models/MasterCompany');\r\n \r\n+// CORREÇÃO: Importamos o ESQUEMA, e não o modelo pré-compilado\r\n+const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n+\r\n+\r\n+// Rota para LER as permissões atuais da empresa\r\n router.get('/', async (req, res) => {\r\n     try {\r\n+        // CORREÇÃO: Compilamos o modelo usando a conexão Mestre ativa\r\n+        const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n+\r\n         const company = await MasterCompany.findById(req.user.companyId);\r\n-        if (!company) return res.status(404).json({ message: \"Empresa não encontrada.\" });\r\n+        if (!company) {\r\n+            return res.status(404).json({ message: \"Empresa não encontrada.\" });\r\n+        }\r\n         res.status(200).json(company.permissions);\r\n     } catch (error) {\r\n+        console.error(\"Erro ao buscar permissões:\", error);\r\n         res.status(500).json({ message: 'Erro ao buscar permissões.' });\r\n     }\r\n });\r\n \r\n+// Rota para ATUALIZAR as permissões\r\n router.patch('/', async (req, res) => {\r\n-    // A verificação de 'Proprietário' será feita na rota /me, mas podemos manter aqui como dupla garantia\r\n-    // if (req.user.role !== 'Proprietário') { ... } \r\n+    // A verificação de 'Proprietário' é feita pelo frontend, mas podemos adicionar aqui se necessário\r\n+    \r\n     try {\r\n+        // CORREÇÃO: Compilamos o modelo usando a conexão Mestre ativa\r\n+        const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n+        \r\n         const newPermissions = req.body;\r\n         const company = await MasterCompany.findById(req.user.companyId);\r\n-        if (!company) return res.status(404).json({ message: \"Empresa não encontrada.\" });\r\n+        if (!company) {\r\n+            return res.status(404).json({ message: \"Empresa não encontrada.\" });\r\n+        }\r\n \r\n         company.permissions = newPermissions;\r\n         await company.save();\r\n         \r\n"
                },
                {
                    "date": 1753884889735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,12 +23,17 @@\n });\r\n \r\n // Rota para ATUALIZAR as permissões\r\n router.patch('/', async (req, res) => {\r\n-    // A verificação de 'Proprietário' é feita pelo frontend, mas podemos adicionar aqui se necessário\r\n     \r\n+    // --- INÍCIO DA CORREÇÃO DE SEGURANÇA ---\r\n+    if (req.user.role !== 'Proprietário') {\r\n+        return res.status(403).json({ message: 'Acesso negado. Apenas o proprietário da empresa pode alterar as permissões.' });\r\n+    }\r\n+    // --- FIM DA CORREÇÃO DE SEGURANÇA ---\r\n+\r\n     try {\r\n-        // CORREÇÃO: Compilamos o modelo usando a conexão Mestre ativa\r\n+        // O restante do seu código, que já está correto, permanece aqui.\r\n         const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n         \r\n         const newPermissions = req.body;\r\n         const company = await MasterCompany.findById(req.user.companyId);\r\n"
                },
                {
                    "date": 1754504311714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n const express = require('express');\r\n const router = express.Router();\r\n-\r\n-// CORREÇÃO: Importamos o ESQUEMA, e não o modelo pré-compilado\r\n const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n+const { authorize } = require('../middleware/authMiddleware');\r\n \r\n \r\n // Rota para LER as permissões atuais da empresa\r\n router.get('/', async (req, res) => {\r\n@@ -22,16 +21,9 @@\n     }\r\n });\r\n \r\n // Rota para ATUALIZAR as permissões\r\n-router.patch('/', async (req, res) => {\r\n-    \r\n-    // --- INÍCIO DA CORREÇÃO DE SEGURANÇA ---\r\n-    if (req.user.role !== 'Proprietário') {\r\n-        return res.status(403).json({ message: 'Acesso negado. Apenas o proprietário da empresa pode alterar as permissões.' });\r\n-    }\r\n-    // --- FIM DA CORREÇÃO DE SEGURANÇA ---\r\n-\r\n+router.patch('/', authorize('Proprietário'), async (req, res) => {\r\n     try {\r\n         // O restante do seu código, que já está correto, permanece aqui.\r\n         const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n         \r\n"
                },
                {
                    "date": 1754506120747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const express = require('express');\r\n const router = express.Router();\r\n-const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n+const { schema: MasterCompanySchema } = require('../models/MasterCompany');\r\n const { authorize } = require('../middleware/authMiddleware');\r\n \r\n \r\n // Rota para LER as permissões atuais da empresa\r\n"
                }
            ],
            "date": 1752253892004,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst Company = require('../models/Company');\r\nconst { protect } = require('../middleware/authMiddleware');\r\n\r\n// GET para ler as permissões\r\nrouter.get('/', protect, async (req, res) => {\r\n    try {\r\n        const company = await Company.findById(req.user.companyId);\r\n        res.status(200).json(company.permissions);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao buscar permissões.' });\r\n    }\r\n});\r\n\r\n// PATCH para atualizar as permissões\r\nrouter.patch('/', protect, async (req, res) => {\r\n    if (req.user.role !== 'Proprietário') {\r\n        return res.status(403).json({ message: 'Apenas proprietários podem alterar permissões.' });\r\n    }\r\n    try {\r\n        const { roleToUpdate, permissions } = req.body;\r\n        const company = await Company.findById(req.user.companyId);\r\n        company.permissions[roleToUpdate] = { ...company.permissions[roleToUpdate], ...permissions };\r\n        await company.save();\r\n        res.status(200).json({ message: `Permissões para '${roleToUpdate}' atualizadas.` });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao atualizar permissões.' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"
        }
    ]
}