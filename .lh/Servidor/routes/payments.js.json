{
    "sourceFile": "Servidor/routes/payments.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 51,
            "patches": [
                {
                    "date": 1752529411292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752530762405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,5 +47,60 @@\n         res.status(500).json({ message: 'Não foi possível gerar o link de pagamento.' });\r\n     }\r\n });\r\n \r\n+// Rota para receber notificações (webhooks) do Mercado Pago\r\n+router.post('/webhook', async (req, res) => {\r\n+    // A query 'type' ou 'topic' nos diz sobre o que é a notificação.\r\n+    const notification = req.body;\r\n+\r\n+    console.log('Webhook recebido:', notification);\r\n+\r\n+    try {\r\n+        // Verificamos se a notificação é sobre uma assinatura (preapproval)\r\n+        if (notification.type === 'preapproval') {\r\n+            const subscriptionId = notification.data.id;\r\n+\r\n+            // Buscamos os dados da assinatura no Mercado Pago\r\n+            const subscription = await mercadopago.preapproval.findById(subscriptionId);\r\n+\r\n+            if (subscription) {\r\n+                // Pegamos o e-mail do pagador que está na assinatura\r\n+                const payerEmail = subscription.body.payer_email;\r\n+                const subscriptionStatus = subscription.body.status;\r\n+\r\n+                console.log(`Status da assinatura ${subscriptionId}: ${subscriptionStatus}`);\r\n+\r\n+                // Procuramos a empresa em nosso banco de dados usando o e-mail\r\n+                const company = await Company.findOne({ email: payerEmail });\r\n+\r\n+                if (company) {\r\n+                    // Se a assinatura foi autorizada/paga\r\n+                    if (subscriptionStatus === 'authorized') {\r\n+                        company.subscription.status = 'active';\r\n+                        // A data de expiração é calculada com base na data de autorização\r\n+                        // e a recorrência do plano (1 mês).\r\n+                        const nextPaymentDate = new Date(subscription.body.next_payment_date);\r\n+                        company.subscription.endDate = nextPaymentDate;\r\n+\r\n+                        await company.save();\r\n+                        console.log(`Assinatura da empresa ${company.nomeEmpresa} foi ativada com sucesso.`);\r\n+                    } else {\r\n+                        // Se o status for outro (ex: 'paused', 'cancelled'), podemos atualizar para 'inactive'\r\n+                        company.subscription.status = 'inactive';\r\n+                        await company.save();\r\n+                        console.log(`Status da assinatura da empresa ${company.nomeEmpresa} atualizado para ${subscriptionStatus}.`);\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+        \r\n+        // Respondemos ao Mercado Pago com status 200 para confirmar o recebimento\r\n+        res.sendStatus(200);\r\n+\r\n+    } catch (error) {\r\n+        console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n+        res.sendStatus(500); // Informa ao MP que algo deu errado\r\n+    }\r\n+});\r\n+\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752532159840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,20 @@\n const express = require('express');\r\n const router = express.Router();\r\n-const mercadopago = require('mercadopago');\r\n+\r\n+// MUDANÇA 1: Importamos as classes que vamos usar do Mercado Pago\r\n+const { MercadoPagoConfig, PreApproval } = require('mercadopago');\r\n+\r\n const { protect } = require('../middleware/authMiddleware');\r\n const Company = require('../models/Company');\r\n \r\n-// Configura o Mercado Pago com o seu Access Token\r\n-mercadopago.configure({\r\n-    access_token: process.env.MERCADO_PAGO_ACCESS_TOKEN,\r\n+// MUDANÇA 2: Criamos um \"cliente\" com a sua chave de acesso\r\n+const client = new MercadoPagoConfig({\r\n+    accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN\r\n });\r\n \r\n // Rota para criar o link de assinatura\r\n router.post('/create-subscription', protect, async (req, res) => {\r\n-    // Apenas o Proprietário pode criar uma assinatura para a sua empresa\r\n     if (req.user.role !== 'Proprietário') {\r\n         return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n     }\r\n \r\n@@ -22,26 +24,27 @@\n         if (!company) {\r\n             return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n         }\r\n \r\n-        // Define os detalhes do plano de assinatura\r\n         const plan = {\r\n             reason: 'Assinatura Mensal - Organizador de Boletos',\r\n             auto_recurring: {\r\n                 frequency: 1,\r\n                 frequency_type: 'months',\r\n                 transaction_amount: 0.90, // Defina o valor da sua mensalidade aqui\r\n                 currency_id: 'BRL'\r\n             },\r\n-            back_url: 'https://seusite.com/success', // URL para onde o cliente volta após o sucesso\r\n+            back_url: 'https://seusite.com/success',\r\n             payer_email: company.email\r\n         };\r\n \r\n-        // Cria a preferência de pagamento no Mercado Pago\r\n-        const response = await mercadopago.preapproval.create(plan);\r\n+        // MUDANÇA 3: Criamos uma instância do serviço de Assinatura (PreApproval)\r\n+        const preapproval = new PreApproval(client);\r\n+\r\n+        // MUDANÇA 4: A chamada agora é feita pela instância e os dados vão dentro de um 'body'\r\n+        const response = await preapproval.create({ body: plan });\r\n         \r\n-        // Retorna o link de checkout para o frontend\r\n-        res.status(200).json({ init_point: response.body.init_point });\r\n+        res.status(200).json({ init_point: response.init_point });\r\n \r\n     } catch (error) {\r\n         console.error('Erro ao criar assinatura no Mercado Pago:', error);\r\n         res.status(500).json({ message: 'Não foi possível gerar o link de pagamento.' });\r\n@@ -49,58 +52,44 @@\n });\r\n \r\n // Rota para receber notificações (webhooks) do Mercado Pago\r\n router.post('/webhook', async (req, res) => {\r\n-    // A query 'type' ou 'topic' nos diz sobre o que é a notificação.\r\n     const notification = req.body;\r\n-\r\n     console.log('Webhook recebido:', notification);\r\n \r\n     try {\r\n-        // Verificamos se a notificação é sobre uma assinatura (preapproval)\r\n         if (notification.type === 'preapproval') {\r\n             const subscriptionId = notification.data.id;\r\n \r\n-            // Buscamos os dados da assinatura no Mercado Pago\r\n-            const subscription = await mercadopago.preapproval.findById(subscriptionId);\r\n+            // MUDANÇA 5: Usamos a mesma estrutura para buscar os dados da assinatura\r\n+            const preapproval = new PreApproval(client);\r\n+            const subscription = await preapproval.get({ id: subscriptionId });\r\n \r\n             if (subscription) {\r\n-                // Pegamos o e-mail do pagador que está na assinatura\r\n-                const payerEmail = subscription.body.payer_email;\r\n-                const subscriptionStatus = subscription.body.status;\r\n-\r\n+                const payerEmail = subscription.payer_email;\r\n+                const subscriptionStatus = subscription.status;\r\n                 console.log(`Status da assinatura ${subscriptionId}: ${subscriptionStatus}`);\r\n \r\n-                // Procuramos a empresa em nosso banco de dados usando o e-mail\r\n                 const company = await Company.findOne({ email: payerEmail });\r\n-\r\n                 if (company) {\r\n-                    // Se a assinatura foi autorizada/paga\r\n                     if (subscriptionStatus === 'authorized') {\r\n                         company.subscription.status = 'active';\r\n-                        // A data de expiração é calculada com base na data de autorização\r\n-                        // e a recorrência do plano (1 mês).\r\n-                        const nextPaymentDate = new Date(subscription.body.next_payment_date);\r\n-                        company.subscription.endDate = nextPaymentDate;\r\n-\r\n+                        company.subscription.endDate = new Date(subscription.next_payment_date);\r\n                         await company.save();\r\n                         console.log(`Assinatura da empresa ${company.nomeEmpresa} foi ativada com sucesso.`);\r\n                     } else {\r\n-                        // Se o status for outro (ex: 'paused', 'cancelled'), podemos atualizar para 'inactive'\r\n                         company.subscription.status = 'inactive';\r\n                         await company.save();\r\n                         console.log(`Status da assinatura da empresa ${company.nomeEmpresa} atualizado para ${subscriptionStatus}.`);\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n-        \r\n-        // Respondemos ao Mercado Pago com status 200 para confirmar o recebimento\r\n         res.sendStatus(200);\r\n-\r\n     } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n-        res.sendStatus(500); // Informa ao MP que algo deu errado\r\n+        res.sendStatus(500);\r\n     }\r\n });\r\n \r\n+\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752536521174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n                 frequency_type: 'months',\r\n                 transaction_amount: 0.90, // Defina o valor da sua mensalidade aqui\r\n                 currency_id: 'BRL'\r\n             },\r\n-            back_url: 'https://seusite.com/success',\r\n+            back_url: 'http://127.0.0.1:5500/',\r\n             payer_email: company.email\r\n         };\r\n \r\n         // MUDANÇA 3: Criamos uma instância do serviço de Assinatura (PreApproval)\r\n"
                },
                {
                    "date": 1752538705186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     const notification = req.body;\r\n     console.log('Webhook recebido:', notification);\r\n \r\n     try {\r\n-        if (notification.type === 'preapproval') {\r\n+        if (notification.type === 'subscription_preapproval') {\r\n             const subscriptionId = notification.data.id;\r\n \r\n             // MUDANÇA 5: Usamos a mesma estrutura para buscar os dados da assinatura\r\n             const preapproval = new PreApproval(client);\r\n"
                },
                {
                    "date": 1752539094670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,10 +67,14 @@\n             if (subscription) {\r\n                 const payerEmail = subscription.payer_email;\r\n                 const subscriptionStatus = subscription.status;\r\n                 console.log(`Status da assinatura ${subscriptionId}: ${subscriptionStatus}`);\r\n+                console.log(`[DEBUG] Procurando no banco de dados por uma empresa com o e-mail: ${payerEmail}`);\r\n \r\n                 const company = await Company.findOne({ email: payerEmail });\r\n+                if (!company) {\r\n+                    console.log(`[DEBUG] NENHUMA empresa foi encontrada com o e-mail ${payerEmail}. A atualização não será feita.`);\r\n+                }\r\n                 if (company) {\r\n                     if (subscriptionStatus === 'authorized') {\r\n                         company.subscription.status = 'active';\r\n                         company.subscription.endDate = new Date(subscription.next_payment_date);\r\n"
                },
                {
                    "date": 1752539552484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,14 @@\n         const preapproval = new PreApproval(client);\r\n \r\n         // MUDANÇA 4: A chamada agora é feita pela instância e os dados vão dentro de um 'body'\r\n         const response = await preapproval.create({ body: plan });\r\n+\r\n+        if (response.id) {\r\n+            company.subscription.mercadopagoPreapprovalId = response.id;\r\n+            await company.save();\r\n+            console.log(`[INFO] ID de Pre-Approval ${response.id} salvo para a empresa ${company.nomeEmpresa}`);\r\n+        }\r\n         \r\n         res.status(200).json({ init_point: response.init_point });\r\n \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1752539607441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,36 +63,34 @@\n     console.log('Webhook recebido:', notification);\r\n \r\n     try {\r\n         if (notification.type === 'subscription_preapproval') {\r\n-            const subscriptionId = notification.data.id;\r\n+            const preapprovalId = notification.data.id; // Este é o ID da assinatura\r\n \r\n-            // MUDANÇA 5: Usamos a mesma estrutura para buscar os dados da assinatura\r\n+            // ===== MUDANÇA PRINCIPAL - AGORA BUSCAMOS PELO ID =====\r\n+            const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+            // ======================================================\r\n+\r\n+            if (!company) {\r\n+                console.log(`[AVISO] Webhook recebido para pre-approval ID ${preapprovalId}, mas nenhuma empresa correspondente foi encontrada.`);\r\n+                return res.sendStatus(200); // Retorna 200 para o MP não continuar enviando\r\n+            }\r\n+\r\n+            // Agora que temos a empresa, buscamos o status atualizado da assinatura\r\n             const preapproval = new PreApproval(client);\r\n-            const subscription = await preapproval.get({ id: subscriptionId });\r\n+            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+            const subscriptionStatus = subscriptionDetails.status;\r\n+            \r\n+            console.log(`Status da assinatura ${preapprovalId} para a empresa ${company.nomeEmpresa}: ${subscriptionStatus}`);\r\n \r\n-            if (subscription) {\r\n-                const payerEmail = subscription.payer_email;\r\n-                const subscriptionStatus = subscription.status;\r\n-                console.log(`Status da assinatura ${subscriptionId}: ${subscriptionStatus}`);\r\n-                console.log(`[DEBUG] Procurando no banco de dados por uma empresa com o e-mail: ${payerEmail}`);\r\n-\r\n-                const company = await Company.findOne({ email: payerEmail });\r\n-                if (!company) {\r\n-                    console.log(`[DEBUG] NENHUMA empresa foi encontrada com o e-mail ${payerEmail}. A atualização não será feita.`);\r\n-                }\r\n-                if (company) {\r\n-                    if (subscriptionStatus === 'authorized') {\r\n-                        company.subscription.status = 'active';\r\n-                        company.subscription.endDate = new Date(subscription.next_payment_date);\r\n-                        await company.save();\r\n-                        console.log(`Assinatura da empresa ${company.nomeEmpresa} foi ativada com sucesso.`);\r\n-                    } else {\r\n-                        company.subscription.status = 'inactive';\r\n-                        await company.save();\r\n-                        console.log(`Status da assinatura da empresa ${company.nomeEmpresa} atualizado para ${subscriptionStatus}.`);\r\n-                    }\r\n-                }\r\n+            if (subscriptionStatus === 'authorized') {\r\n+                company.subscription.status = 'active';\r\n+                company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                await company.save();\r\n+                console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ativada no banco de dados!`);\r\n+            } else {\r\n+                // Se o status for outro, podemos apenas logar ou tratar como necessário\r\n+                console.log(`---> INFO: Status da assinatura da empresa ${company.nomeEmpresa} é ${subscriptionStatus}. Nenhuma ação necessária.`);\r\n             }\r\n         }\r\n         res.sendStatus(200);\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1752539845580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n             reason: 'Assinatura Mensal - Organizador de Boletos',\r\n             auto_recurring: {\r\n                 frequency: 1,\r\n                 frequency_type: 'months',\r\n-                transaction_amount: 0.90, // Defina o valor da sua mensalidade aqui\r\n+                transaction_amount: 40.00, // Defina o valor da sua mensalidade aqui\r\n                 currency_id: 'BRL'\r\n             },\r\n             back_url: 'http://127.0.0.1:5500/',\r\n             payer_email: company.email\r\n"
                },
                {
                    "date": 1752581110156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,34 +63,43 @@\n     console.log('Webhook recebido:', notification);\r\n \r\n     try {\r\n         if (notification.type === 'subscription_preapproval') {\r\n-            const preapprovalId = notification.data.id; // Este é o ID da assinatura\r\n-\r\n-            // ===== MUDANÇA PRINCIPAL - AGORA BUSCAMOS PELO ID =====\r\n+            const preapprovalId = notification.data.id;\r\n             const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-            // ======================================================\r\n \r\n             if (!company) {\r\n                 console.log(`[AVISO] Webhook recebido para pre-approval ID ${preapprovalId}, mas nenhuma empresa correspondente foi encontrada.`);\r\n-                return res.sendStatus(200); // Retorna 200 para o MP não continuar enviando\r\n+                return res.sendStatus(200);\r\n             }\r\n \r\n-            // Agora que temos a empresa, buscamos o status atualizado da assinatura\r\n             const preapproval = new PreApproval(client);\r\n             const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n             const subscriptionStatus = subscriptionDetails.status;\r\n             \r\n             console.log(`Status da assinatura ${preapprovalId} para a empresa ${company.nomeEmpresa}: ${subscriptionStatus}`);\r\n \r\n+            // --- LÓGICA MELHORADA ---\r\n             if (subscriptionStatus === 'authorized') {\r\n+                // Cenário de Ativação ou Renovação bem-sucedida\r\n                 company.subscription.status = 'active';\r\n                 company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n                 await company.save();\r\n-                console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ativada no banco de dados!`);\r\n+                console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA.`);\r\n+\r\n+            } else if (subscriptionStatus === 'cancelled') {\r\n+                // Cenário de Cancelamento pelo usuário\r\n+                company.subscription.status = 'inactive';\r\n+                // Opcional: Você pode querer zerar a data de expiração\r\n+                // company.subscription.endDate = null; \r\n+                await company.save();\r\n+                console.log(`---> AVISO: Assinatura da empresa ${company.nomeEmpresa} foi CANCELADA.`);\r\n+\r\n             } else {\r\n-                // Se o status for outro, podemos apenas logar ou tratar como necessário\r\n-                console.log(`---> INFO: Status da assinatura da empresa ${company.nomeEmpresa} é ${subscriptionStatus}. Nenhuma ação necessária.`);\r\n+                // Outros status (paused, pending, etc.)\r\n+                // Por enquanto, podemos apenas logar, mas no futuro podemos tratar\r\n+                // o status 'paused' (pausado por falta de pagamento), por exemplo.\r\n+                console.log(`---> INFO: Status da assinatura da empresa ${company.nomeEmpresa} é ${subscriptionStatus}. Nenhuma ação de banco de dados foi tomada.`);\r\n             }\r\n         }\r\n         res.sendStatus(200);\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1752581662783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,107 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+// MUDANÇA 1: Importamos as classes que vamos usar do Mercado Pago\r\n+const { MercadoPagoConfig, PreApproval } = require('mercadopago');\r\n+\r\n+const { protect } = require('../middleware/authMiddleware');\r\n+const Company = require('../models/Company');\r\n+\r\n+// MUDANÇA 2: Criamos um \"cliente\" com a sua chave de acesso\r\n+const client = new MercadoPagoConfig({\r\n+    accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN\r\n+});\r\n+\r\n+// Rota para criar o link de assinatura\r\n+router.post('/create-subscription', protect, async (req, res) => {\r\n+    if (req.user.role !== 'Proprietário') {\r\n+        return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n+    }\r\n+\r\n+    try {\r\n+        const companyId = req.user.companyId;\r\n+        const company = await Company.findById(companyId);\r\n+        if (!company) {\r\n+            return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n+        }\r\n+\r\n+        const plan = {\r\n+            reason: 'Assinatura Mensal - Organizador de Boletos',\r\n+            auto_recurring: {\r\n+                frequency: 1,\r\n+                frequency_type: 'months',\r\n+                transaction_amount: 40.00, // Defina o valor da sua mensalidade aqui\r\n+                currency_id: 'BRL'\r\n+            },\r\n+            back_url: 'http://127.0.0.1:5500/',\r\n+            payer_email: company.email\r\n+        };\r\n+\r\n+        // MUDANÇA 3: Criamos uma instância do serviço de Assinatura (PreApproval)\r\n+        const preapproval = new PreApproval(client);\r\n+\r\n+        // MUDANÇA 4: A chamada agora é feita pela instância e os dados vão dentro de um 'body'\r\n+        const response = await preapproval.create({ body: plan });\r\n+\r\n+        if (response.id) {\r\n+            company.subscription.mercadopagoPreapprovalId = response.id;\r\n+            await company.save();\r\n+            console.log(`[INFO] ID de Pre-Approval ${response.id} salvo para a empresa ${company.nomeEmpresa}`);\r\n+        }\r\n+        \r\n+        res.status(200).json({ init_point: response.init_point });\r\n+\r\n+    } catch (error) {\r\n+        console.error('Erro ao criar assinatura no Mercado Pago:', error);\r\n+        res.status(500).json({ message: 'Não foi possível gerar o link de pagamento.' });\r\n+    }\r\n+});\r\n+\r\n+// Rota para receber notificações (webhooks) do Mercado Pago\r\n+router.post('/webhook', async (req, res) => {\r\n+    const notification = req.body;\r\n+    console.log('Webhook recebido:', notification);\r\n+\r\n+    try {\r\n+        if (notification.type === 'subscription_preapproval') {\r\n+            const preapprovalId = notification.data.id;\r\n+            const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+\r\n+            if (!company) {\r\n+                console.log(`[AVISO] Webhook recebido para pre-approval ID ${preapprovalId}, mas nenhuma empresa correspondente foi encontrada.`);\r\n+                return res.sendStatus(200);\r\n+            }\r\n+\r\n+            const preapproval = new PreApproval(client);\r\n+            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+            const subscriptionStatus = subscriptionDetails.status;\r\n+            \r\n+            console.log(`Status da assinatura ${preapprovalId} para a empresa ${company.nomeEmpresa}: ${subscriptionStatus}`);\r\n+\r\n+            // --- LÓGICA MELHORADA ---\r\n+            if (subscriptionStatus === 'authorized') {\r\n+                // Cenário de Ativação ou Renovação bem-sucedida\r\n+                company.subscription.status = 'active';\r\n+                company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                await company.save();\r\n+                console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA.`);\r\n+\r\n+            } else if (subscriptionStatus === 'cancelled') {\r\n+                console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA. O acesso continua válido até ${company.subscription.endDate.toLocaleDateString('pt-BR')}.`);\r\n+\r\n+            } else {\r\n+                // Outros status (paused, pending, etc.)\r\n+                // Por enquanto, podemos apenas logar, mas no futuro podemos tratar\r\n+                // o status 'paused' (pausado por falta de pagamento), por exemplo.\r\n+                console.log(`---> INFO: Status da assinatura da empresa ${company.nomeEmpresa} é ${subscriptionStatus}. Nenhuma ação de banco de dados foi tomada.`);\r\n+            }\r\n+        }\r\n+        res.sendStatus(200);\r\n+    } catch (error) {\r\n+        console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n+        res.sendStatus(500);\r\n+    }\r\n+});\r\n+\r\n+\r\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752582424898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n const { MercadoPagoConfig, PreApproval } = require('mercadopago');\r\n \r\n const { protect } = require('../middleware/authMiddleware');\r\n const Company = require('../models/Company');\r\n+const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n \r\n // MUDANÇA 2: Criamos um \"cliente\" com a sua chave de acesso\r\n const client = new MercadoPagoConfig({\r\n     accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN\r\n@@ -62,155 +63,59 @@\n     const notification = req.body;\r\n     console.log('Webhook recebido:', notification);\r\n \r\n     try {\r\n+        // --- LÓGICA PARA ASSINATURAS (ativação, renovação, cancelamento) ---\r\n         if (notification.type === 'subscription_preapproval') {\r\n             const preapprovalId = notification.data.id;\r\n             const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n \r\n-            if (!company) {\r\n-                console.log(`[AVISO] Webhook recebido para pre-approval ID ${preapprovalId}, mas nenhuma empresa correspondente foi encontrada.`);\r\n-                return res.sendStatus(200);\r\n-            }\r\n+            if (company) {\r\n+                const preapproval = new PreApproval(client);\r\n+                const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+                const subscriptionStatus = subscriptionDetails.status;\r\n+                \r\n+                console.log(`Status da assinatura ${preapprovalId} para ${company.nomeEmpresa}: ${subscriptionStatus}`);\r\n \r\n-            const preapproval = new PreApproval(client);\r\n-            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-            const subscriptionStatus = subscriptionDetails.status;\r\n-            \r\n-            console.log(`Status da assinatura ${preapprovalId} para a empresa ${company.nomeEmpresa}: ${subscriptionStatus}`);\r\n-\r\n-            // --- LÓGICA MELHORADA ---\r\n-            if (subscriptionStatus === 'authorized') {\r\n-                // Cenário de Ativação ou Renovação bem-sucedida\r\n-                company.subscription.status = 'active';\r\n-                company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-                await company.save();\r\n-                console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA.`);\r\n-\r\n-            } else if (subscriptionStatus === 'cancelled') {\r\n-                console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA. O acesso continua válido até ${company.subscription.endDate.toLocaleDateString('pt-BR')}.`);\r\n-\r\n-            } else {\r\n-                // Outros status (paused, pending, etc.)\r\n-                // Por enquanto, podemos apenas logar, mas no futuro podemos tratar\r\n-                // o status 'paused' (pausado por falta de pagamento), por exemplo.\r\n-                console.log(`---> INFO: Status da assinatura da empresa ${company.nomeEmpresa} é ${subscriptionStatus}. Nenhuma ação de banco de dados foi tomada.`);\r\n+                if (subscriptionStatus === 'authorized') {\r\n+                    company.subscription.status = 'active';\r\n+                    company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                    await company.save();\r\n+                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA.`);\r\n+                } else if (subscriptionStatus === 'cancelled') {\r\n+                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA.`);\r\n+                }\r\n             }\r\n         }\r\n-        res.sendStatus(200);\r\n-    } catch (error) {\r\n-        console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n-        res.sendStatus(500);\r\n-    }\r\n-});\r\n \r\n+        // --- NOVA LÓGICA PARA PAGAMENTOS (reembolsos, chargebacks) ---\r\n+        if (notification.type === 'payment') {\r\n+            const paymentId = notification.data.id;\r\n \r\n-module.exports = router;\n-const express = require('express');\r\n-const router = express.Router();\r\n+            const payment = new Payment(client);\r\n+            const paymentDetails = await payment.get({ id: paymentId });\r\n \r\n-// MUDANÇA 1: Importamos as classes que vamos usar do Mercado Pago\r\n-const { MercadoPagoConfig, PreApproval } = require('mercadopago');\r\n+            // Verificamos se o pagamento foi reembolsado ou contestado\r\n+            if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n+                const preapprovalId = paymentDetails.preapproval_id;\r\n \r\n-const { protect } = require('../middleware/authMiddleware');\r\n-const Company = require('../models/Company');\r\n+                if (preapprovalId) {\r\n+                    // Encontramos a empresa pelo ID da assinatura que está associada a este pagamento\r\n+                    const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n \r\n-// MUDANÇA 2: Criamos um \"cliente\" com a sua chave de acesso\r\n-const client = new MercadoPagoConfig({\r\n-    accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN\r\n-});\r\n-\r\n-// Rota para criar o link de assinatura\r\n-router.post('/create-subscription', protect, async (req, res) => {\r\n-    if (req.user.role !== 'Proprietário') {\r\n-        return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n-    }\r\n-\r\n-    try {\r\n-        const companyId = req.user.companyId;\r\n-        const company = await Company.findById(companyId);\r\n-        if (!company) {\r\n-            return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n+                    if (company) {\r\n+                        // Desativa a assinatura imediatamente\r\n+                        company.subscription.status = 'inactive';\r\n+                        await company.save();\r\n+                        console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso/chargeback.`);\r\n+                    }\r\n+                }\r\n+            }\r\n         }\r\n \r\n-        const plan = {\r\n-            reason: 'Assinatura Mensal - Organizador de Boletos',\r\n-            auto_recurring: {\r\n-                frequency: 1,\r\n-                frequency_type: 'months',\r\n-                transaction_amount: 40.00, // Defina o valor da sua mensalidade aqui\r\n-                currency_id: 'BRL'\r\n-            },\r\n-            back_url: 'http://127.0.0.1:5500/',\r\n-            payer_email: company.email\r\n-        };\r\n+        res.sendStatus(200); // Envia resposta de sucesso para o Mercado Pago\r\n \r\n-        // MUDANÇA 3: Criamos uma instância do serviço de Assinatura (PreApproval)\r\n-        const preapproval = new PreApproval(client);\r\n-\r\n-        // MUDANÇA 4: A chamada agora é feita pela instância e os dados vão dentro de um 'body'\r\n-        const response = await preapproval.create({ body: plan });\r\n-\r\n-        if (response.id) {\r\n-            company.subscription.mercadopagoPreapprovalId = response.id;\r\n-            await company.save();\r\n-            console.log(`[INFO] ID de Pre-Approval ${response.id} salvo para a empresa ${company.nomeEmpresa}`);\r\n-        }\r\n-        \r\n-        res.status(200).json({ init_point: response.init_point });\r\n-\r\n     } catch (error) {\r\n-        console.error('Erro ao criar assinatura no Mercado Pago:', error);\r\n-        res.status(500).json({ message: 'Não foi possível gerar o link de pagamento.' });\r\n-    }\r\n-});\r\n-\r\n-// Rota para receber notificações (webhooks) do Mercado Pago\r\n-router.post('/webhook', async (req, res) => {\r\n-    const notification = req.body;\r\n-    console.log('Webhook recebido:', notification);\r\n-\r\n-    try {\r\n-        if (notification.type === 'subscription_preapproval') {\r\n-            const preapprovalId = notification.data.id;\r\n-            const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-\r\n-            if (!company) {\r\n-                console.log(`[AVISO] Webhook recebido para pre-approval ID ${preapprovalId}, mas nenhuma empresa correspondente foi encontrada.`);\r\n-                return res.sendStatus(200);\r\n-            }\r\n-\r\n-            const preapproval = new PreApproval(client);\r\n-            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-            const subscriptionStatus = subscriptionDetails.status;\r\n-            \r\n-            console.log(`Status da assinatura ${preapprovalId} para a empresa ${company.nomeEmpresa}: ${subscriptionStatus}`);\r\n-\r\n-            // --- LÓGICA MELHORADA ---\r\n-            if (subscriptionStatus === 'authorized') {\r\n-                // Cenário de Ativação ou Renovação bem-sucedida\r\n-                company.subscription.status = 'active';\r\n-                company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-                await company.save();\r\n-                console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA.`);\r\n-\r\n-            } else if (subscriptionStatus === 'cancelled') {\r\n-                // Cenário de Cancelamento pelo usuário\r\n-                company.subscription.status = 'inactive';\r\n-                // Opcional: Você pode querer zerar a data de expiração\r\n-                // company.subscription.endDate = null; \r\n-                await company.save();\r\n-                console.log(`---> AVISO: Assinatura da empresa ${company.nomeEmpresa} foi CANCELADA.`);\r\n-\r\n-            } else {\r\n-                // Outros status (paused, pending, etc.)\r\n-                // Por enquanto, podemos apenas logar, mas no futuro podemos tratar\r\n-                // o status 'paused' (pausado por falta de pagamento), por exemplo.\r\n-                console.log(`---> INFO: Status da assinatura da empresa ${company.nomeEmpresa} é ${subscriptionStatus}. Nenhuma ação de banco de dados foi tomada.`);\r\n-            }\r\n-        }\r\n-        res.sendStatus(200);\r\n-    } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n         res.sendStatus(500);\r\n     }\r\n });\r\n"
                },
                {
                    "date": 1752582517647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n const express = require('express');\r\n const router = express.Router();\r\n \r\n // MUDANÇA 1: Importamos as classes que vamos usar do Mercado Pago\r\n-const { MercadoPagoConfig, PreApproval } = require('mercadopago');\r\n+const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n \r\n const { protect } = require('../middleware/authMiddleware');\r\n const Company = require('../models/Company');\r\n-const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n \r\n // MUDANÇA 2: Criamos um \"cliente\" com a sua chave de acesso\r\n const client = new MercadoPagoConfig({\r\n     accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN\r\n"
                },
                {
                    "date": 1752582947468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n \r\n             // Verificamos se o pagamento foi reembolsado ou contestado\r\n-            if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n+            if (paymentDetails.status === 'subscription_authorized_payment' || paymentDetails.status === 'charged_back') {\r\n                 const preapprovalId = paymentDetails.preapproval_id;\r\n \r\n                 if (preapprovalId) {\r\n                     // Encontramos a empresa pelo ID da assinatura que está associada a este pagamento\r\n"
                },
                {
                    "date": 1752583214010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,61 +59,61 @@\n \r\n // Rota para receber notificações (webhooks) do Mercado Pago\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n-    console.log('Webhook recebido:', notification);\r\n+    console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n-        // --- LÓGICA PARA ASSINATURAS (ativação, renovação, cancelamento) ---\r\n-        if (notification.type === 'subscription_preapproval') {\r\n-            const preapprovalId = notification.data.id;\r\n-            const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-\r\n-            if (company) {\r\n-                const preapproval = new PreApproval(client);\r\n-                const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-                const subscriptionStatus = subscriptionDetails.status;\r\n-                \r\n-                console.log(`Status da assinatura ${preapprovalId} para ${company.nomeEmpresa}: ${subscriptionStatus}`);\r\n-\r\n-                if (subscriptionStatus === 'authorized') {\r\n-                    company.subscription.status = 'active';\r\n-                    company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-                    await company.save();\r\n-                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA.`);\r\n-                } else if (subscriptionStatus === 'cancelled') {\r\n-                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA.`);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        // --- NOVA LÓGICA PARA PAGAMENTOS (reembolsos, chargebacks) ---\r\n+        // Lógica principal para quando um PAGAMENTO é atualizado (aprovado, reembolsado, etc.)\r\n         if (notification.type === 'payment') {\r\n             const paymentId = notification.data.id;\r\n-\r\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n \r\n-            // Verificamos se o pagamento foi reembolsado ou contestado\r\n-            if (paymentDetails.status === 'subscription_authorized_payment' || paymentDetails.status === 'charged_back') {\r\n-                const preapprovalId = paymentDetails.preapproval_id;\r\n+            // O preapproval_id é o que liga este pagamento à assinatura do cliente\r\n+            const preapprovalId = paymentDetails.preapproval_id;\r\n \r\n-                if (preapprovalId) {\r\n-                    // Encontramos a empresa pelo ID da assinatura que está associada a este pagamento\r\n-                    const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+            if (preapprovalId) {\r\n+                const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n \r\n-                    if (company) {\r\n-                        // Desativa a assinatura imediatamente\r\n+                if (company) {\r\n+                    if (paymentDetails.status === 'approved') {\r\n+                        // PAGAMENTO APROVADO! Vamos ativar/renovar a assinatura.\r\n+                        // Para pegar a data de vencimento correta, buscamos os detalhes da assinatura.\r\n+                        const preapproval = new PreApproval(client);\r\n+                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+\r\n+                        company.subscription.status = 'active';\r\n+                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                        await company.save();\r\n+                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA via pagamento aprovado.`);\r\n+\r\n+                    } else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n+                        // PAGAMENTO REEMBOLSADO! Desativamos a assinatura.\r\n                         company.subscription.status = 'inactive';\r\n                         await company.save();\r\n                         console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso/chargeback.`);\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n \r\n-        res.sendStatus(200); // Envia resposta de sucesso para o Mercado Pago\r\n+        // Lógica secundária para quando o status da ASSINATURA em si muda (ex: cancelamento)\r\n+        if (notification.type === 'subscription_preapproval') {\r\n+            const preapprovalId = notification.data.id;\r\n+            const preapproval = new PreApproval(client);\r\n+            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n \r\n+            if (subscriptionDetails.status === 'cancelled') {\r\n+                 const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+                 if (company) {\r\n+                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA. O acesso continua até o fim do período pago.`);\r\n+                 }\r\n+            }\r\n+        }\r\n+\r\n+        res.sendStatus(200);\r\n+\r\n     } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n         res.sendStatus(500);\r\n     }\r\n"
                },
                {
                    "date": 1752583306892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,61 +59,61 @@\n \r\n // Rota para receber notificações (webhooks) do Mercado Pago\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n-    console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n+    console.log('Webhook recebido:', notification);\r\n \r\n     try {\r\n-        // Lógica principal para quando um PAGAMENTO é atualizado (aprovado, reembolsado, etc.)\r\n+        // --- LÓGICA PARA ASSINATURAS (ativação, renovação, cancelamento) ---\r\n+        if (notification.type === 'subscription_preapproval') {\r\n+            const preapprovalId = notification.data.id;\r\n+            const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+\r\n+            if (company) {\r\n+                const preapproval = new PreApproval(client);\r\n+                const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+                const subscriptionStatus = subscriptionDetails.status;\r\n+                \r\n+                console.log(`Status da assinatura ${preapprovalId} para ${company.nomeEmpresa}: ${subscriptionStatus}`);\r\n+\r\n+                if (subscriptionStatus === 'authorized') {\r\n+                    company.subscription.status = 'active';\r\n+                    company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                    await company.save();\r\n+                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA.`);\r\n+                } else if (subscriptionStatus === 'cancelled') {\r\n+                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA.`);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        // --- NOVA LÓGICA PARA PAGAMENTOS (reembolsos, chargebacks) ---\r\n         if (notification.type === 'payment') {\r\n             const paymentId = notification.data.id;\r\n+\r\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n \r\n-            // O preapproval_id é o que liga este pagamento à assinatura do cliente\r\n-            const preapprovalId = paymentDetails.preapproval_id;\r\n+            // Verificamos se o pagamento foi reembolsado ou contestado\r\n+            if (paymentDetails.status === 'subscription_authorized_payment' || paymentDetails.status === 'charged_back') {\r\n+                const preapprovalId = paymentDetails.preapproval_id;\r\n \r\n-            if (preapprovalId) {\r\n-                const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+                if (preapprovalId) {\r\n+                    // Encontramos a empresa pelo ID da assinatura que está associada a este pagamento\r\n+                    const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n \r\n-                if (company) {\r\n-                    if (paymentDetails.status === 'approved') {\r\n-                        // PAGAMENTO APROVADO! Vamos ativar/renovar a assinatura.\r\n-                        // Para pegar a data de vencimento correta, buscamos os detalhes da assinatura.\r\n-                        const preapproval = new PreApproval(client);\r\n-                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-\r\n-                        company.subscription.status = 'active';\r\n-                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-                        await company.save();\r\n-                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA via pagamento aprovado.`);\r\n-\r\n-                    } else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n-                        // PAGAMENTO REEMBOLSADO! Desativamos a assinatura.\r\n+                    if (company) {\r\n+                        // Desativa a assinatura imediatamente\r\n                         company.subscription.status = 'inactive';\r\n                         await company.save();\r\n                         console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso/chargeback.`);\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n \r\n-        // Lógica secundária para quando o status da ASSINATURA em si muda (ex: cancelamento)\r\n-        if (notification.type === 'subscription_preapproval') {\r\n-            const preapprovalId = notification.data.id;\r\n-            const preapproval = new PreApproval(client);\r\n-            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+        res.sendStatus(200); // Envia resposta de sucesso para o Mercado Pago\r\n \r\n-            if (subscriptionDetails.status === 'cancelled') {\r\n-                 const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-                 if (company) {\r\n-                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA. O acesso continua até o fim do período pago.`);\r\n-                 }\r\n-            }\r\n-        }\r\n-\r\n-        res.sendStatus(200);\r\n-\r\n     } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n         res.sendStatus(500);\r\n     }\r\n"
                },
                {
                    "date": 1752583727036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,61 +59,61 @@\n \r\n // Rota para receber notificações (webhooks) do Mercado Pago\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n-    console.log('Webhook recebido:', notification);\r\n+    console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n-        // --- LÓGICA PARA ASSINATURAS (ativação, renovação, cancelamento) ---\r\n-        if (notification.type === 'subscription_preapproval') {\r\n-            const preapprovalId = notification.data.id;\r\n-            const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-\r\n-            if (company) {\r\n-                const preapproval = new PreApproval(client);\r\n-                const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-                const subscriptionStatus = subscriptionDetails.status;\r\n-                \r\n-                console.log(`Status da assinatura ${preapprovalId} para ${company.nomeEmpresa}: ${subscriptionStatus}`);\r\n-\r\n-                if (subscriptionStatus === 'authorized') {\r\n-                    company.subscription.status = 'active';\r\n-                    company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-                    await company.save();\r\n-                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA.`);\r\n-                } else if (subscriptionStatus === 'cancelled') {\r\n-                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA.`);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        // --- NOVA LÓGICA PARA PAGAMENTOS (reembolsos, chargebacks) ---\r\n+        // Lógica principal para quando um PAGAMENTO é atualizado (aprovado, reembolsado, etc.)\r\n         if (notification.type === 'payment') {\r\n             const paymentId = notification.data.id;\r\n-\r\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n \r\n-            // Verificamos se o pagamento foi reembolsado ou contestado\r\n-            if (paymentDetails.status === 'subscription_authorized_payment' || paymentDetails.status === 'charged_back') {\r\n-                const preapprovalId = paymentDetails.preapproval_id;\r\n+            // O preapproval_id é o que liga este pagamento à assinatura do cliente\r\n+            const preapprovalId = paymentDetails.preapproval_id;\r\n \r\n-                if (preapprovalId) {\r\n-                    // Encontramos a empresa pelo ID da assinatura que está associada a este pagamento\r\n-                    const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+            if (preapprovalId) {\r\n+                const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n \r\n-                    if (company) {\r\n-                        // Desativa a assinatura imediatamente\r\n+                if (company) {\r\n+                    if (paymentDetails.status === 'approved') {\r\n+                        // PAGAMENTO APROVADO! Vamos ativar/renovar a assinatura.\r\n+                        // Para pegar a data de vencimento correta, buscamos os detalhes da assinatura.\r\n+                        const preapproval = new PreApproval(client);\r\n+                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+\r\n+                        company.subscription.status = 'active';\r\n+                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                        await company.save();\r\n+                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA via pagamento aprovado.`);\r\n+\r\n+                    } else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n+                        // PAGAMENTO REEMBOLSADO! Desativamos a assinatura.\r\n                         company.subscription.status = 'inactive';\r\n                         await company.save();\r\n                         console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso/chargeback.`);\r\n                     }\r\n                 }\r\n             }\r\n         }\r\n \r\n-        res.sendStatus(200); // Envia resposta de sucesso para o Mercado Pago\r\n+        // Lógica secundária para quando o status da ASSINATURA em si muda (ex: cancelamento)\r\n+        if (notification.type === 'subscription_preapproval') {\r\n+            const preapprovalId = notification.data.id;\r\n+            const preapproval = new PreApproval(client);\r\n+            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n \r\n+            if (subscriptionDetails.status === 'cancelled') {\r\n+                 const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+                 if (company) {\r\n+                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA. O acesso continua até o fim do período pago.`);\r\n+                 }\r\n+            }\r\n+        }\r\n+\r\n+        res.sendStatus(200);\r\n+\r\n     } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n         res.sendStatus(500);\r\n     }\r\n"
                },
                {
                    "date": 1752583973429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,58 +62,61 @@\n     const notification = req.body;\r\n     console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n-        // Lógica principal para quando um PAGAMENTO é atualizado (aprovado, reembolsado, etc.)\r\n-        if (notification.type === 'payment') {\r\n-            const paymentId = notification.data.id;\r\n+        let preapprovalId = null;\r\n+\r\n+        // PASSO 1: Extrair o ID da assinatura, não importa o tipo do webhook\r\n+        if (notification.type === 'subscription_preapproval') {\r\n+            preapprovalId = notification.data.id;\r\n+        } else if (notification.type === 'payment') {\r\n+            // Para webhooks de pagamento, precisamos buscar os detalhes para encontrar o ID da assinatura\r\n             const payment = new Payment(client);\r\n-            const paymentDetails = await payment.get({ id: paymentId });\r\n+            const paymentDetails = await payment.get({ id: notification.data.id });\r\n+            preapprovalId = paymentDetails.preapproval_id;\r\n+        }\r\n \r\n-            // O preapproval_id é o que liga este pagamento à assinatura do cliente\r\n-            const preapprovalId = paymentDetails.preapproval_id;\r\n+        // Se, após as verificações, não tivermos um ID de assinatura, não há o que fazer.\r\n+        if (!preapprovalId) {\r\n+            console.log('[INFO] Webhook não continha um ID de assinatura relevante. Nenhuma ação tomada.');\r\n+            return res.sendStatus(200);\r\n+        }\r\n \r\n-            if (preapprovalId) {\r\n-                const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+        console.log(`[INFO] Processando evento para a assinatura ID: ${preapprovalId}`);\r\n \r\n-                if (company) {\r\n-                    if (paymentDetails.status === 'approved') {\r\n-                        // PAGAMENTO APROVADO! Vamos ativar/renovar a assinatura.\r\n-                        // Para pegar a data de vencimento correta, buscamos os detalhes da assinatura.\r\n-                        const preapproval = new PreApproval(client);\r\n-                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+        // PASSO 2: Buscar o status MAIS RECENTE e OFICIAL da assinatura no Mercado Pago\r\n+        const preapproval = new PreApproval(client);\r\n+        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+        const currentMpStatus = subscriptionDetails.status;\r\n \r\n-                        company.subscription.status = 'active';\r\n-                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-                        await company.save();\r\n-                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA via pagamento aprovado.`);\r\n+        // PASSO 3: Encontrar a empresa em nosso banco de dados usando o ID\r\n+        const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n \r\n-                    } else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n-                        // PAGAMENTO REEMBOLSADO! Desativamos a assinatura.\r\n-                        company.subscription.status = 'inactive';\r\n-                        await company.save();\r\n-                        console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso/chargeback.`);\r\n-                    }\r\n-                }\r\n-            }\r\n+        if (!company) {\r\n+            console.log(`[AVISO] Nenhuma empresa encontrada para a assinatura ID ${preapprovalId}.`);\r\n+            return res.sendStatus(200);\r\n         }\r\n \r\n-        // Lógica secundária para quando o status da ASSINATURA em si muda (ex: cancelamento)\r\n-        if (notification.type === 'subscription_preapproval') {\r\n-            const preapprovalId = notification.data.id;\r\n-            const preapproval = new PreApproval(client);\r\n-            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+        console.log(`[INFO] Status no Mercado Pago: '${currentMpStatus}'. Status atual no nosso BD: '${company.subscription.status}'`);\r\n \r\n-            if (subscriptionDetails.status === 'cancelled') {\r\n-                 const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-                 if (company) {\r\n-                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA. O acesso continua até o fim do período pago.`);\r\n-                 }\r\n-            }\r\n+        // PASSO 4: ATUALIZAR nosso banco de dados APENAS se for necessário\r\n+        if (currentMpStatus === 'authorized' && company.subscription.status !== 'active') {\r\n+            company.subscription.status = 'active';\r\n+            company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+            await company.save();\r\n+            console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n+\r\n+        } else if ((currentMpStatus === 'paused' || currentMpStatus === 'cancelled') && company.subscription.status === 'active') {\r\n+            company.subscription.status = 'inactive';\r\n+            await company.save();\r\n+            console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA (status MP: ${currentMpStatus}).`);\r\n+        \r\n+        } else {\r\n+            console.log(`[INFO] O status da assinatura não requer uma atualização no banco de dados neste momento.`);\r\n         }\r\n \r\n         res.sendStatus(200);\r\n-\r\n+        \r\n     } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n         res.sendStatus(500);\r\n     }\r\n"
                },
                {
                    "date": 1752587319807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,61 +62,60 @@\n     const notification = req.body;\r\n     console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n-        let preapprovalId = null;\r\n-\r\n-        // PASSO 1: Extrair o ID da assinatura, não importa o tipo do webhook\r\n-        if (notification.type === 'subscription_preapproval') {\r\n-            preapprovalId = notification.data.id;\r\n-        } else if (notification.type === 'payment') {\r\n-            // Para webhooks de pagamento, precisamos buscar os detalhes para encontrar o ID da assinatura\r\n+        if (notification.type === 'payment') {\r\n+            const paymentId = notification.data.id;\r\n             const payment = new Payment(client);\r\n-            const paymentDetails = await payment.get({ id: notification.data.id });\r\n-            preapprovalId = paymentDetails.preapproval_id;\r\n-        }\r\n+            const paymentDetails = await payment.get({ id: paymentId });\r\n \r\n-        // Se, após as verificações, não tivermos um ID de assinatura, não há o que fazer.\r\n-        if (!preapprovalId) {\r\n-            console.log('[INFO] Webhook não continha um ID de assinatura relevante. Nenhuma ação tomada.');\r\n-            return res.sendStatus(200);\r\n-        }\r\n+            if (paymentDetails.status === 'approved') {\r\n+                // LÓGICA DE ATIVAÇÃO\r\n+                const preapprovalId = paymentDetails.preapproval_id;\r\n+                if (preapprovalId) {\r\n+                    const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+                    if (company) {\r\n+                        company.subscription.status = 'active';\r\n+                        \r\n+                        const preapproval = new PreApproval(client);\r\n+                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n \r\n-        console.log(`[INFO] Processando evento para a assinatura ID: ${preapprovalId}`);\r\n+                        // ADICIONA o ID do pagamento à lista da empresa\r\n+                        company.subscription.mercadopagoPaymentIds.push(paymentId);\r\n+                        \r\n+                        await company.save();\r\n+                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA. Payment ID ${paymentId} salvo.`);\r\n+                    }\r\n+                }\r\n+            } else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n+                // LÓGICA DE REEMBOLSO\r\n+                // AGORA buscamos a empresa pelo ID do pagamento que foi reembolsado\r\n+                const company = await Company.findOne({ 'subscription.mercadopagoPaymentIds': paymentId });\r\n+                if (company) {\r\n+                    company.subscription.status = 'inactive';\r\n+                    await company.save();\r\n+                    console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso do Payment ID ${paymentId}.`);\r\n+                } else {\r\n+                    console.log(`[AVISO] Reembolso recebido para o Payment ID ${paymentId}, mas nenhuma empresa correspondente foi encontrada.`);\r\n+                }\r\n+            }\r\n+        } else if (notification.type === 'subscription_preapproval') {\r\n+            // LÓGICA DE CANCELAMENTO (continua igual)\r\n+            const preapprovalId = notification.data.id;\r\n+            const preapproval = new PreApproval(client);\r\n+            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n \r\n-        // PASSO 2: Buscar o status MAIS RECENTE e OFICIAL da assinatura no Mercado Pago\r\n-        const preapproval = new PreApproval(client);\r\n-        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-        const currentMpStatus = subscriptionDetails.status;\r\n-\r\n-        // PASSO 3: Encontrar a empresa em nosso banco de dados usando o ID\r\n-        const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-\r\n-        if (!company) {\r\n-            console.log(`[AVISO] Nenhuma empresa encontrada para a assinatura ID ${preapprovalId}.`);\r\n-            return res.sendStatus(200);\r\n+            if (subscriptionDetails.status === 'cancelled') {\r\n+                 const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+                 if (company) {\r\n+                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA.`);\r\n+                 }\r\n+            }\r\n         }\r\n-\r\n-        console.log(`[INFO] Status no Mercado Pago: '${currentMpStatus}'. Status atual no nosso BD: '${company.subscription.status}'`);\r\n-\r\n-        // PASSO 4: ATUALIZAR nosso banco de dados APENAS se for necessário\r\n-        if (currentMpStatus === 'authorized' && company.subscription.status !== 'active') {\r\n-            company.subscription.status = 'active';\r\n-            company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-            await company.save();\r\n-            console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n-\r\n-        } else if ((currentMpStatus === 'paused' || currentMpStatus === 'cancelled') && company.subscription.status === 'active') {\r\n-            company.subscription.status = 'inactive';\r\n-            await company.save();\r\n-            console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA (status MP: ${currentMpStatus}).`);\r\n         \r\n-        } else {\r\n-            console.log(`[INFO] O status da assinatura não requer uma atualização no banco de dados neste momento.`);\r\n-        }\r\n+        res.sendStatus(200);\r\n \r\n-        res.sendStatus(200);\r\n-        \r\n     } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n         res.sendStatus(500);\r\n     }\r\n"
                },
                {
                    "date": 1752587889770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,63 +62,72 @@\n     const notification = req.body;\r\n     console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n+        // --- LÓGICA PARA NOTIFICAÇÕES DE PAGAMENTO (ATIVAÇÃO E REEMBOLSO) ---\r\n         if (notification.type === 'payment') {\r\n             const paymentId = notification.data.id;\r\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n+            \r\n+            console.log(`[PAGAMENTO] Processando pagamento ID ${paymentId} com status '${paymentDetails.status}'.`);\r\n \r\n+            // Cenário 1: O pagamento foi aprovado com sucesso\r\n             if (paymentDetails.status === 'approved') {\r\n-                // LÓGICA DE ATIVAÇÃO\r\n                 const preapprovalId = paymentDetails.preapproval_id;\r\n                 if (preapprovalId) {\r\n                     const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-                    if (company) {\r\n-                        company.subscription.status = 'active';\r\n-                        \r\n+                    \r\n+                    // Só atualizamos se a empresa for encontrada e a assinatura não estiver ativa ainda\r\n+                    if (company && company.subscription.status !== 'active') {\r\n                         const preapproval = new PreApproval(client);\r\n                         const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+                        \r\n+                        company.subscription.status = 'active';\r\n                         company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-\r\n-                        // ADICIONA o ID do pagamento à lista da empresa\r\n+                        \r\n+                        // Adiciona o ID do pagamento à lista da empresa para futuros reembolsos\r\n                         company.subscription.mercadopagoPaymentIds.push(paymentId);\r\n                         \r\n                         await company.save();\r\n-                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/RENOVADA. Payment ID ${paymentId} salvo.`);\r\n+                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n                     }\r\n                 }\r\n-            } else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n-                // LÓGICA DE REEMBOLSO\r\n-                // AGORA buscamos a empresa pelo ID do pagamento que foi reembolsado\r\n+            } \r\n+            // Cenário 2: O pagamento foi reembolsado ou contestado\r\n+            else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n+                // Buscamos a empresa pelo ID do pagamento que foi reembolsado\r\n                 const company = await Company.findOne({ 'subscription.mercadopagoPaymentIds': paymentId });\r\n                 if (company) {\r\n-                    company.subscription.status = 'inactive';\r\n+                    company.subscription.status = 'inactive'; // Desativa o acesso imediatamente\r\n                     await company.save();\r\n-                    console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso do Payment ID ${paymentId}.`);\r\n-                } else {\r\n-                    console.log(`[AVISO] Reembolso recebido para o Payment ID ${paymentId}, mas nenhuma empresa correspondente foi encontrada.`);\r\n+                    console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso.`);\r\n                 }\r\n             }\r\n-        } else if (notification.type === 'subscription_preapproval') {\r\n-            // LÓGICA DE CANCELAMENTO (continua igual)\r\n+        }\r\n+\r\n+        // --- LÓGICA PARA NOTIFICAÇÕES DE ASSINATURA (CANCELAMENTO DA RENOVAÇÃO) ---\r\n+        if (notification.type === 'subscription_preapproval') {\r\n             const preapprovalId = notification.data.id;\r\n             const preapproval = new PreApproval(client);\r\n             const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n \r\n+            // Cenário 3: O cliente cancelou a renovação futura\r\n             if (subscriptionDetails.status === 'cancelled') {\r\n                  const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n                  if (company) {\r\n-                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA.`);\r\n+                    // Não mudamos o status, apenas registramos o evento. O acesso continua até o fim do período pago.\r\n+                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA. O acesso continua válido.`);\r\n                  }\r\n             }\r\n         }\r\n         \r\n+        // Se a notificação foi processada com sucesso, enviamos a resposta OK para o Mercado Pago\r\n         res.sendStatus(200);\r\n \r\n     } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n-        res.sendStatus(500);\r\n+        res.sendStatus(500); // Informa ao MP que houve um erro e ele pode tentar reenviar\r\n     }\r\n });\r\n \r\n \r\n"
                },
                {
                    "date": 1752588204377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,72 +62,56 @@\n     const notification = req.body;\r\n     console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n-        // --- LÓGICA PARA NOTIFICAÇÕES DE PAGAMENTO (ATIVAÇÃO E REEMBOLSO) ---\r\n         if (notification.type === 'payment') {\r\n             const paymentId = notification.data.id;\r\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n             \r\n             console.log(`[PAGAMENTO] Processando pagamento ID ${paymentId} com status '${paymentDetails.status}'.`);\r\n \r\n-            // Cenário 1: O pagamento foi aprovado com sucesso\r\n             if (paymentDetails.status === 'approved') {\r\n                 const preapprovalId = paymentDetails.preapproval_id;\r\n+\r\n+                // ===== LOG DE DEPURAÇÃO CRÍTICO =====\r\n+                console.log(`[DEPURAÇÃO] ID da assinatura extraído do pagamento: ${preapprovalId}`);\r\n+                console.log(`[DEPURAÇÃO] Procurando no banco por uma empresa com este ID...`);\r\n+                // ===================================\r\n+\r\n                 if (preapprovalId) {\r\n                     const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n                     \r\n-                    // Só atualizamos se a empresa for encontrada e a assinatura não estiver ativa ainda\r\n-                    if (company && company.subscription.status !== 'active') {\r\n-                        const preapproval = new PreApproval(client);\r\n-                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-                        \r\n-                        company.subscription.status = 'active';\r\n-                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-                        \r\n-                        // Adiciona o ID do pagamento à lista da empresa para futuros reembolsos\r\n-                        company.subscription.mercadopagoPaymentIds.push(paymentId);\r\n-                        \r\n-                        await company.save();\r\n-                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n+                    if (company) {\r\n+                        console.log(`[DEPURAÇÃO] Empresa encontrada: ${company.nomeEmpresa}`);\r\n+                        if (company.subscription.status !== 'active') {\r\n+                            const preapproval = new PreApproval(client);\r\n+                            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+                            \r\n+                            company.subscription.status = 'active';\r\n+                            company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                            company.subscription.mercadopagoPaymentIds.push(paymentId);\r\n+                            \r\n+                            await company.save();\r\n+                            console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n+                        } else {\r\n+                             console.log(`[INFO] A assinatura da empresa ${company.nomeEmpresa} já está ativa.`);\r\n+                        }\r\n+                    } else {\r\n+                        console.log(`[ERRO] Nenhuma empresa foi encontrada no banco de dados com o ID de assinatura: ${preapprovalId}`);\r\n                     }\r\n                 }\r\n             } \r\n-            // Cenário 2: O pagamento foi reembolsado ou contestado\r\n-            else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n-                // Buscamos a empresa pelo ID do pagamento que foi reembolsado\r\n-                const company = await Company.findOne({ 'subscription.mercadopagoPaymentIds': paymentId });\r\n-                if (company) {\r\n-                    company.subscription.status = 'inactive'; // Desativa o acesso imediatamente\r\n-                    await company.save();\r\n-                    console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso.`);\r\n-                }\r\n-            }\r\n+            // ... (o resto da lógica de reembolso continua aqui) ...\r\n         }\r\n \r\n-        // --- LÓGICA PARA NOTIFICAÇÕES DE ASSINATURA (CANCELAMENTO DA RENOVAÇÃO) ---\r\n-        if (notification.type === 'subscription_preapproval') {\r\n-            const preapprovalId = notification.data.id;\r\n-            const preapproval = new PreApproval(client);\r\n-            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-\r\n-            // Cenário 3: O cliente cancelou a renovação futura\r\n-            if (subscriptionDetails.status === 'cancelled') {\r\n-                 const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-                 if (company) {\r\n-                    // Não mudamos o status, apenas registramos o evento. O acesso continua até o fim do período pago.\r\n-                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA. O acesso continua válido.`);\r\n-                 }\r\n-            }\r\n-        }\r\n+        // ... (o resto da lógica de cancelamento continua aqui) ...\r\n         \r\n-        // Se a notificação foi processada com sucesso, enviamos a resposta OK para o Mercado Pago\r\n         res.sendStatus(200);\r\n \r\n     } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n-        res.sendStatus(500); // Informa ao MP que houve um erro e ele pode tentar reenviar\r\n+        res.sendStatus(500);\r\n     }\r\n });\r\n \r\n \r\n"
                },
                {
                    "date": 1752588297278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,59 +59,85 @@\n \r\n // Rota para receber notificações (webhooks) do Mercado Pago\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n+    // Log inicial para sabermos que o webhook chegou\r\n     console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n+        // --- LÓGICA PARA NOTIFICAÇÕES DE PAGAMENTO (ATIVAÇÃO E REEMBOLSO) ---\r\n         if (notification.type === 'payment') {\r\n             const paymentId = notification.data.id;\r\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n             \r\n             console.log(`[PAGAMENTO] Processando pagamento ID ${paymentId} com status '${paymentDetails.status}'.`);\r\n \r\n+            // Cenário 1: O pagamento foi aprovado com sucesso\r\n             if (paymentDetails.status === 'approved') {\r\n                 const preapprovalId = paymentDetails.preapproval_id;\r\n-\r\n-                // ===== LOG DE DEPURAÇÃO CRÍTICO =====\r\n-                console.log(`[DEPURAÇÃO] ID da assinatura extraído do pagamento: ${preapprovalId}`);\r\n-                console.log(`[DEPURAÇÃO] Procurando no banco por uma empresa com este ID...`);\r\n-                // ===================================\r\n-\r\n                 if (preapprovalId) {\r\n                     const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n                     \r\n                     if (company) {\r\n                         console.log(`[DEPURAÇÃO] Empresa encontrada: ${company.nomeEmpresa}`);\r\n+                        // Apenas atualizamos se a assinatura não estiver ativa, para evitar ações duplicadas\r\n                         if (company.subscription.status !== 'active') {\r\n                             const preapproval = new PreApproval(client);\r\n                             const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n                             \r\n                             company.subscription.status = 'active';\r\n                             company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                            \r\n+                            // Adiciona o ID do pagamento à lista da empresa para futuros reembolsos\r\n                             company.subscription.mercadopagoPaymentIds.push(paymentId);\r\n                             \r\n                             await company.save();\r\n                             console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n                         } else {\r\n-                             console.log(`[INFO] A assinatura da empresa ${company.nomeEmpresa} já está ativa.`);\r\n+                             console.log(`[INFO] A assinatura da empresa ${company.nomeEmpresa} já estava ativa.`);\r\n                         }\r\n                     } else {\r\n-                        console.log(`[ERRO] Nenhuma empresa foi encontrada no banco de dados com o ID de assinatura: ${preapprovalId}`);\r\n+                        console.log(`[ERRO] Pagamento aprovado para a assinatura ${preapprovalId}, mas nenhuma empresa foi encontrada no banco.`);\r\n                     }\r\n                 }\r\n             } \r\n-            // ... (o resto da lógica de reembolso continua aqui) ...\r\n+            // Cenário 2: O pagamento foi reembolsado ou contestado\r\n+            else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n+                // Buscamos a empresa pelo ID do pagamento que foi reembolsado\r\n+                const company = await Company.findOne({ 'subscription.mercadopagoPaymentIds': paymentId });\r\n+                if (company) {\r\n+                    company.subscription.status = 'inactive';\r\n+                    await company.save();\r\n+                    console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso.`);\r\n+                } else {\r\n+                    console.log(`[AVISO] Reembolso recebido para o Payment ID ${paymentId}, mas nenhuma empresa correspondente foi encontrada.`);\r\n+                }\r\n+            }\r\n         }\r\n \r\n-        // ... (o resto da lógica de cancelamento continua aqui) ...\r\n+        // --- LÓGICA PARA NOTIFICAÇÕES DE ASSINATURA (CANCELAMENTO DA RENOVAÇÃO) ---\r\n+        if (notification.type === 'subscription_preapproval') {\r\n+            const preapprovalId = notification.data.id;\r\n+            const preapproval = new PreApproval(client);\r\n+            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+\r\n+            // Cenário 3: O cliente cancelou a renovação futura\r\n+            if (subscriptionDetails.status === 'cancelled') {\r\n+                 const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+                 if (company) {\r\n+                    // Não mudamos o status, apenas registramos o evento. O acesso continua até o fim do período pago.\r\n+                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA. O acesso continua válido até a data de expiração.`);\r\n+                 }\r\n+            }\r\n+        }\r\n         \r\n+        // Se tudo correu bem, enviamos a resposta OK para o Mercado Pago\r\n         res.sendStatus(200);\r\n \r\n     } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n-        res.sendStatus(500);\r\n+        res.sendStatus(500); // Informa ao MP que houve um erro e ele pode tentar reenviar\r\n     }\r\n });\r\n \r\n \r\n"
                },
                {
                    "date": 1752588680520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,10 @@\n             console.log(`[PAGAMENTO] Processando pagamento ID ${paymentId} com status '${paymentDetails.status}'.`);\r\n \r\n             // Cenário 1: O pagamento foi aprovado com sucesso\r\n             if (paymentDetails.status === 'approved') {\r\n+                console.log('[OBJETO COMPLETO] Detalhes do Pagamento Aprovado:');\r\n+                console.log(JSON.stringify(paymentDetails, null, 2));\r\n                 const preapprovalId = paymentDetails.preapproval_id;\r\n                 if (preapprovalId) {\r\n                     const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n                     \r\n"
                },
                {
                    "date": 1752589007548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n             // Cenário 1: O pagamento foi aprovado com sucesso\r\n             if (paymentDetails.status === 'approved') {\r\n                 console.log('[OBJETO COMPLETO] Detalhes do Pagamento Aprovado:');\r\n                 console.log(JSON.stringify(paymentDetails, null, 2));\r\n-                const preapprovalId = paymentDetails.preapproval_id;\r\n+                const preapprovalId = paymentDetails.point_of_interaction.transaction_data.subscription_id;\r\n                 if (preapprovalId) {\r\n                     const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n                     \r\n                     if (company) {\r\n"
                },
                {
                    "date": 1753535153132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n // MUDANÇA 1: Importamos as classes que vamos usar do Mercado Pago\r\n const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n \r\n const { protect } = require('../middleware/authMiddleware');\r\n-const Company = require('../models/Company');\r\n+const Company = require('../models/--');\r\n \r\n // MUDANÇA 2: Criamos um \"cliente\" com a sua chave de acesso\r\n const client = new MercadoPagoConfig({\r\n     accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN\r\n"
                },
                {
                    "date": 1753535395795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,29 @@\n const express = require('express');\r\n const router = express.Router();\r\n+const mongoose = require('mongoose'); // Importa o mongoose para a conexão do webhook\r\n \r\n-// MUDANÇA 1: Importamos as classes que vamos usar do Mercado Pago\r\n+// SDK do Mercado Pago\r\n const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n \r\n+// CORREÇÃO: Importa o modelo correto do banco Mestre\r\n+const MasterCompany = require('../models/MasterCompany');\r\n const { protect } = require('../middleware/authMiddleware');\r\n-const Company = require('../models/--');\r\n \r\n-// MUDANÇA 2: Criamos um \"cliente\" com a sua chave de acesso\r\n+// Cliente do Mercado Pago\r\n const client = new MercadoPagoConfig({\r\n     accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN\r\n });\r\n \r\n // Rota para criar o link de assinatura\r\n+// Esta rota é protegida e já recebe a conexão com o banco Mestre (req.masterDb)\r\n router.post('/create-subscription', protect, async (req, res) => {\r\n-    if (req.user.role !== 'Proprietário') {\r\n-        return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n-    }\r\n+    // A verificação de 'Proprietário' precisará ser feita na rota /me e passada adiante\r\n+    // if (req.user.role !== 'Proprietário') { ... }\r\n \r\n     try {\r\n         const companyId = req.user.companyId;\r\n-        const company = await Company.findById(companyId);\r\n+        const company = await MasterCompany.findById(companyId);\r\n         if (!company) {\r\n             return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n         }\r\n \r\n@@ -29,25 +31,21 @@\n             reason: 'Assinatura Mensal - Organizador de Boletos',\r\n             auto_recurring: {\r\n                 frequency: 1,\r\n                 frequency_type: 'months',\r\n-                transaction_amount: 40.00, // Defina o valor da sua mensalidade aqui\r\n+                transaction_amount: 40.00,\r\n                 currency_id: 'BRL'\r\n             },\r\n-            back_url: 'http://127.0.0.1:5500/',\r\n-            payer_email: company.email\r\n+            back_url: 'http://127.0.0.1:5500/', // Lembre-se de mudar para o seu URL de produção\r\n+            payer_email: company.email || '' // Usa o e-mail do cadastro da empresa\r\n         };\r\n \r\n-        // MUDANÇA 3: Criamos uma instância do serviço de Assinatura (PreApproval)\r\n         const preapproval = new PreApproval(client);\r\n-\r\n-        // MUDANÇA 4: A chamada agora é feita pela instância e os dados vão dentro de um 'body'\r\n         const response = await preapproval.create({ body: plan });\r\n \r\n         if (response.id) {\r\n             company.subscription.mercadopagoPreapprovalId = response.id;\r\n             await company.save();\r\n-            console.log(`[INFO] ID de Pre-Approval ${response.id} salvo para a empresa ${company.nomeEmpresa}`);\r\n         }\r\n         \r\n         res.status(200).json({ init_point: response.init_point });\r\n \r\n@@ -57,89 +55,45 @@\n     }\r\n });\r\n \r\n // Rota para receber notificações (webhooks) do Mercado Pago\r\n+// Esta rota é PÚBLICA e não passa pelos nossos middlewares, então precisa de sua própria lógica de conexão.\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n-    // Log inicial para sabermos que o webhook chegou\r\n     console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n-        // --- LÓGICA PARA NOTIFICAÇÕES DE PAGAMENTO (ATIVAÇÃO E REEMBOLSO) ---\r\n         if (notification.type === 'payment') {\r\n             const paymentId = notification.data.id;\r\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n             \r\n-            console.log(`[PAGAMENTO] Processando pagamento ID ${paymentId} com status '${paymentDetails.status}'.`);\r\n-\r\n-            // Cenário 1: O pagamento foi aprovado com sucesso\r\n             if (paymentDetails.status === 'approved') {\r\n-                console.log('[OBJETO COMPLETO] Detalhes do Pagamento Aprovado:');\r\n-                console.log(JSON.stringify(paymentDetails, null, 2));\r\n-                const preapprovalId = paymentDetails.point_of_interaction.transaction_data.subscription_id;\r\n+                const preapprovalId = paymentDetails.point_of_interaction?.transaction_data?.subscription_id;\r\n                 if (preapprovalId) {\r\n-                    const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+                    const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n                     \r\n-                    if (company) {\r\n-                        console.log(`[DEPURAÇÃO] Empresa encontrada: ${company.nomeEmpresa}`);\r\n-                        // Apenas atualizamos se a assinatura não estiver ativa, para evitar ações duplicadas\r\n-                        if (company.subscription.status !== 'active') {\r\n-                            const preapproval = new PreApproval(client);\r\n-                            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-                            \r\n-                            company.subscription.status = 'active';\r\n-                            company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-                            \r\n-                            // Adiciona o ID do pagamento à lista da empresa para futuros reembolsos\r\n-                            company.subscription.mercadopagoPaymentIds.push(paymentId);\r\n-                            \r\n-                            await company.save();\r\n-                            console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n-                        } else {\r\n-                             console.log(`[INFO] A assinatura da empresa ${company.nomeEmpresa} já estava ativa.`);\r\n-                        }\r\n-                    } else {\r\n-                        console.log(`[ERRO] Pagamento aprovado para a assinatura ${preapprovalId}, mas nenhuma empresa foi encontrada no banco.`);\r\n+                    if (company && company.subscription.status !== 'active') {\r\n+                        const preapproval = new PreApproval(client);\r\n+                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+                        \r\n+                        company.subscription.status = 'active';\r\n+                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                        await company.save();\r\n+                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n                     }\r\n                 }\r\n             } \r\n-            // Cenário 2: O pagamento foi reembolsado ou contestado\r\n             else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n-                // Buscamos a empresa pelo ID do pagamento que foi reembolsado\r\n-                const company = await Company.findOne({ 'subscription.mercadopagoPaymentIds': paymentId });\r\n-                if (company) {\r\n-                    company.subscription.status = 'inactive';\r\n-                    await company.save();\r\n-                    console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso.`);\r\n-                } else {\r\n-                    console.log(`[AVISO] Reembolso recebido para o Payment ID ${paymentId}, mas nenhuma empresa correspondente foi encontrada.`);\r\n-                }\r\n+                // A lógica de reembolso precisaria ser adaptada, pois não guardamos mais os paymentIds no MasterCompany\r\n             }\r\n         }\r\n-\r\n-        // --- LÓGICA PARA NOTIFICAÇÕES DE ASSINATURA (CANCELAMENTO DA RENOVAÇÃO) ---\r\n-        if (notification.type === 'subscription_preapproval') {\r\n-            const preapprovalId = notification.data.id;\r\n-            const preapproval = new PreApproval(client);\r\n-            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-\r\n-            // Cenário 3: O cliente cancelou a renovação futura\r\n-            if (subscriptionDetails.status === 'cancelled') {\r\n-                 const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-                 if (company) {\r\n-                    // Não mudamos o status, apenas registramos o evento. O acesso continua até o fim do período pago.\r\n-                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA. O acesso continua válido até a data de expiração.`);\r\n-                 }\r\n-            }\r\n-        }\r\n         \r\n-        // Se tudo correu bem, enviamos a resposta OK para o Mercado Pago\r\n         res.sendStatus(200);\r\n \r\n     } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n-        res.sendStatus(500); // Informa ao MP que houve um erro e ele pode tentar reenviar\r\n+        res.sendStatus(500);\r\n     }\r\n });\r\n \r\n \r\n"
                },
                {
                    "date": 1753550129846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,30 @@\n const express = require('express');\r\n const router = express.Router();\r\n-const mongoose = require('mongoose'); // Importa o mongoose para a conexão do webhook\r\n-\r\n-// SDK do Mercado Pago\r\n const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n \r\n-// CORREÇÃO: Importa o modelo correto do banco Mestre\r\n-const MasterCompany = require('../models/MasterCompany');\r\n-const { protect } = require('../middleware/authMiddleware');\r\n+// Importamos o schema e a função para obter a conexão Mestre\r\n+const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n+const { getMasterConnection } = require('../config/db'); // Necessário para o webhook\r\n \r\n // Cliente do Mercado Pago\r\n const client = new MercadoPagoConfig({\r\n     accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN\r\n });\r\n \r\n+\r\n // Rota para criar o link de assinatura\r\n // Esta rota é protegida e já recebe a conexão com o banco Mestre (req.masterDb)\r\n-router.post('/create-subscription', protect, async (req, res) => {\r\n-    // A verificação de 'Proprietário' precisará ser feita na rota /me e passada adiante\r\n-    // if (req.user.role !== 'Proprietário') { ... }\r\n-\r\n+router.post('/create-subscription', async (req, res) => {\r\n     try {\r\n+        if (req.user.role !== 'Proprietário') {\r\n+            return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n+        }\r\n+        \r\n         const companyId = req.user.companyId;\r\n+        // Compilamos o modelo usando a conexão Mestre ativa\r\n+        const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n+        \r\n         const company = await MasterCompany.findById(companyId);\r\n         if (!company) {\r\n             return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n         }\r\n@@ -34,10 +36,10 @@\n                 frequency_type: 'months',\r\n                 transaction_amount: 40.00,\r\n                 currency_id: 'BRL'\r\n             },\r\n-            back_url: 'http://127.0.0.1:5500/', // Lembre-se de mudar para o seu URL de produção\r\n-            payer_email: company.email || '' // Usa o e-mail do cadastro da empresa\r\n+            back_url: 'http://127.0.0.1:5500/OrgBoletos.html', // URL de retorno\r\n+            payer_email: company.email || '' \r\n         };\r\n \r\n         const preapproval = new PreApproval(client);\r\n         const response = await preapproval.create({ body: plan });\r\n@@ -54,22 +56,26 @@\n         res.status(500).json({ message: 'Não foi possível gerar o link de pagamento.' });\r\n     }\r\n });\r\n \r\n+\r\n // Rota para receber notificações (webhooks) do Mercado Pago\r\n-// Esta rota é PÚBLICA e não passa pelos nossos middlewares, então precisa de sua própria lógica de conexão.\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n     console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n+        // Como esta rota é pública, obtemos a conexão Mestre e o modelo diretamente\r\n+        const masterDb = getMasterConnection();\r\n+        const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n+\r\n         if (notification.type === 'payment') {\r\n             const paymentId = notification.data.id;\r\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n             \r\n             if (paymentDetails.status === 'approved') {\r\n-                const preapprovalId = paymentDetails.point_of_interaction?.transaction_data?.subscription_id;\r\n+                const preapprovalId = paymentDetails.preapproval_id;\r\n                 if (preapprovalId) {\r\n                     const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n                     \r\n                     if (company && company.subscription.status !== 'active') {\r\n@@ -82,11 +88,8 @@\n                         console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n                     }\r\n                 }\r\n             } \r\n-            else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n-                // A lógica de reembolso precisaria ser adaptada, pois não guardamos mais os paymentIds no MasterCompany\r\n-            }\r\n         }\r\n         \r\n         res.sendStatus(200);\r\n \r\n"
                },
                {
                    "date": 1753550464140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,34 +63,64 @@\n     const notification = req.body;\r\n     console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n-        // Como esta rota é pública, obtemos a conexão Mestre e o modelo diretamente\r\n-        const masterDb = getMasterConnection();\r\n-        const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n-\r\n         if (notification.type === 'payment') {\r\n             const paymentId = notification.data.id;\r\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n             \r\n+            console.log(`[PAGAMENTO] Processando pagamento ID ${paymentId} com status '${paymentDetails.status}'.`);\r\n+\r\n             if (paymentDetails.status === 'approved') {\r\n+                // --- CORREÇÃO PRINCIPAL AQUI ---\r\n+                // O ID da assinatura (preapproval) vem neste campo, e não no 'point_of_interaction'.\r\n                 const preapprovalId = paymentDetails.preapproval_id;\r\n+                \r\n                 if (preapprovalId) {\r\n-                    const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+                    const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n                     \r\n-                    if (company && company.subscription.status !== 'active') {\r\n-                        const preapproval = new PreApproval(client);\r\n-                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-                        \r\n-                        company.subscription.status = 'active';\r\n-                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-                        await company.save();\r\n-                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n+                    if (company) {\r\n+                        if (company.subscription.status !== 'active') {\r\n+                            const preapproval = new PreApproval(client);\r\n+                            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+                            \r\n+                            company.subscription.status = 'active';\r\n+                            company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                            company.subscription.mercadopagoPaymentIds.push(paymentId);\r\n+                            \r\n+                            await company.save();\r\n+                            console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n+                        } else {\r\n+                             console.log(`[INFO] A assinatura da empresa ${company.nomeEmpresa} já estava ativa.`);\r\n+                        }\r\n+                    } else {\r\n+                        console.log(`[ERRO] Pagamento aprovado para a assinatura ${preapprovalId}, mas nenhuma empresa foi encontrada.`);\r\n                     }\r\n                 }\r\n             } \r\n+            else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n+                const company = await Company.findOne({ 'subscription.mercadopagoPaymentIds': paymentId });\r\n+                if (company) {\r\n+                    company.subscription.status = 'inactive';\r\n+                    await company.save();\r\n+                    console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso.`);\r\n+                }\r\n+            }\r\n         }\r\n+\r\n+        if (notification.type === 'subscription_preapproval') {\r\n+            const preapprovalId = notification.data.id;\r\n+            const preapproval = new PreApproval(client);\r\n+            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+\r\n+            if (subscriptionDetails.status === 'cancelled') {\r\n+                 const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+                 if (company) {\r\n+                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA.`);\r\n+                 }\r\n+            }\r\n+        }\r\n         \r\n         res.sendStatus(200);\r\n \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1753550926371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n+\r\n+// Importamos o schema e a função para obter a conexão Mestre\r\n+const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n+const { getMasterConnection } = require('../config/db');\r\n+\r\n+// Cliente do Mercado Pago\r\n+const client = new MercadoPagoConfig({ accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN });\r\n+\r\n+\r\n+// Rota para criar o link de assinatura\r\n+router.post('/create-subscription', async (req, res) => {\r\n+    try {\r\n+        if (req.user.role !== 'Proprietário') {\r\n+            return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n+        }\r\n+        \r\n+        const companyId = req.user.companyId;\r\n+        const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n+        \r\n+        const company = await MasterCompany.findById(companyId);\r\n+        if (!company) {\r\n+            return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n+        }\r\n+\r\n+        const plan = {\r\n+            reason: 'Assinatura Mensal - Organizador de Boletos',\r\n+            auto_recurring: {\r\n+                frequency: 1,\r\n+                frequency_type: 'months',\r\n+                transaction_amount: 40.00,\r\n+                currency_id: 'BRL'\r\n+            },\r\n+            back_url: 'http://127.0.0.1:5500/OrgBoletos.html',\r\n+            payer_email: company.email || ''\r\n+        };\r\n+\r\n+        const preapproval = new PreApproval(client);\r\n+        const response = await preapproval.create({ body: plan });\r\n+\r\n+        if (response.id) {\r\n+            company.subscription.mercadopagoPreapprovalId = response.id;\r\n+            await company.save();\r\n+        }\r\n+        \r\n+        res.status(200).json({ init_point: response.init_point });\r\n+\r\n+    } catch (error) {\r\n+        console.error('Erro ao criar assinatura no Mercado Pago:', error);\r\n+        res.status(500).json({ message: 'Não foi possível gerar o link de pagamento.' });\r\n+    }\r\n+});\r\n+\r\n+\r\n+// Rota para receber notificações (webhooks) do Mercado Pago\r\n+router.post('/webhook', async (req, res) => {\r\n+    const notification = req.body;\r\n+    console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n+\r\n+    try {\r\n+        // Como esta rota é pública, obtemos a conexão Mestre e o modelo diretamente\r\n+        const masterDb = getMasterConnection();\r\n+        const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n+\r\n+        if (notification.type === 'payment') {\r\n+            const paymentId = notification.data.id;\r\n+            const payment = new Payment(client);\r\n+            const paymentDetails = await payment.get({ id: paymentId });\r\n+            \r\n+            if (paymentDetails.status === 'approved') {\r\n+                const preapprovalId = paymentDetails.preapproval_id; // Campo correto para ID da assinatura\r\n+                if (preapprovalId) {\r\n+                    const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+                    \r\n+                    if (company && company.subscription.status !== 'active') {\r\n+                        const preapproval = new PreApproval(client);\r\n+                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+                        \r\n+                        company.subscription.status = 'active';\r\n+                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                        await company.save();\r\n+                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n+                    }\r\n+                }\r\n+            } \r\n+        }\r\n+        \r\n+        res.sendStatus(200);\r\n+\r\n+    } catch (error) {\r\n+        console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n+        res.sendStatus(500);\r\n+    }\r\n+});\r\n+\r\n+\r\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753551042250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n+\r\n+// Importamos o schema do Mestre e a função para obter a conexão Mestre\r\n+const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n+const { getMasterConnection } = require('../config/db');\r\n+\r\n+// Cliente do Mercado Pago\r\n+const client = new MercadoPagoConfig({ accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN });\r\n+\r\n+\r\n+// Rota para criar o link de assinatura\r\n+router.post('/create-subscription', async (req, res) => {\r\n+    try {\r\n+        // Apenas o proprietário pode criar a assinatura\r\n+        if (req.user.role !== 'Proprietário') {\r\n+            return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n+        }\r\n+        \r\n+        const companyId = req.user.companyId;\r\n+        // Compilamos o modelo usando a conexão Mestre ativa que vem do middleware\r\n+        const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n+        \r\n+        const company = await MasterCompany.findById(companyId);\r\n+        if (!company) {\r\n+            return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n+        }\r\n+\r\n+        const plan = {\r\n+            reason: 'Assinatura Mensal - Organizador de Boletos',\r\n+            auto_recurring: {\r\n+                frequency: 1,\r\n+                frequency_type: 'months',\r\n+                transaction_amount: 40.00,\r\n+                currency_id: 'BRL'\r\n+            },\r\n+            back_url: 'http://127.0.0.1:5500/OrgBoletos.html', // URL de retorno\r\n+            payer_email: company.email || ''\r\n+        };\r\n+\r\n+        const preapproval = new PreApproval(client);\r\n+        const response = await preapproval.create({ body: plan });\r\n+\r\n+        if (response.id) {\r\n+            company.subscription.mercadopagoPreapprovalId = response.id;\r\n+            await company.save();\r\n+        }\r\n+        \r\n+        res.status(200).json({ init_point: response.init_point });\r\n+\r\n+    } catch (error) {\r\n+        console.error('Erro ao criar assinatura no Mercado Pago:', error);\r\n+        res.status(500).json({ message: 'Não foi possível gerar o link de pagamento.' });\r\n+    }\r\n+});\r\n+\r\n+\r\n+// Rota para receber notificações (webhooks) do Mercado Pago\r\n+router.post('/webhook', async (req, res) => {\r\n+    const notification = req.body;\r\n+    console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n+\r\n+    try {\r\n+        // Como esta rota é pública, obtemos a conexão Mestre e o modelo diretamente\r\n+        const masterDb = getMasterConnection();\r\n+        const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n+\r\n+        if (notification.type === 'payment') {\r\n+            const paymentId = notification.data.id;\r\n+            const payment = new Payment(client);\r\n+            const paymentDetails = await payment.get({ id: paymentId });\r\n+            \r\n+            if (paymentDetails.status === 'approved') {\r\n+                const preapprovalId = paymentDetails.preapproval_id; // Campo correto\r\n+                if (preapprovalId) {\r\n+                    // Busca a empresa no banco Mestre\r\n+                    const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+                    \r\n+                    if (company && company.subscription.status !== 'active') {\r\n+                        const preapproval = new PreApproval(client);\r\n+                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+                        \r\n+                        // Ativa a assinatura\r\n+                        company.subscription.status = 'active';\r\n+                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                        await company.save();\r\n+                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n+                    }\r\n+                }\r\n+            } \r\n+        }\r\n+        \r\n+        res.sendStatus(200);\r\n+\r\n+    } catch (error) {\r\n+        console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n+        res.sendStatus(500);\r\n+    }\r\n+});\r\n+\r\n+\r\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753552773441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n+\r\n+// Importamos o schema do Mestre e a função para obter a conexão Mestre\r\n+const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n+const { getMasterConnection } = require('../config/db');\r\n+const { protect } = require('../middleware/authMiddleware');\r\n+\r\n+// Cliente do Mercado Pago\r\n+const client = new MercadoPagoConfig({ accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN });\r\n+\r\n+\r\n+// Rota para criar o link de assinatura\r\n+router.post('/create-subscription', protect, async (req, res) => {\r\n+    try {\r\n+        if (req.user.role !== 'Proprietário') {\r\n+            return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n+        }\r\n+        \r\n+        const companyId = req.user.companyId;\r\n+        // Compilamos o modelo usando a conexão Mestre ativa que vem do middleware\r\n+        const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n+        \r\n+        const company = await MasterCompany.findById(companyId);\r\n+        if (!company) {\r\n+            return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n+        }\r\n+\r\n+        const plan = {\r\n+            reason: 'Assinatura Mensal - Organizador de Boletos',\r\n+            auto_recurring: {\r\n+                frequency: 1,\r\n+                frequency_type: 'months',\r\n+                transaction_amount: 40.00,\r\n+                currency_id: 'BRL'\r\n+            },\r\n+            back_url: 'http://127.0.0.1:5500/OrgBoletos.html', // URL de retorno\r\n+            payer_email: company.email || ''\r\n+        };\r\n+\r\n+        const preapproval = new PreApproval(client);\r\n+        const response = await preapproval.create({ body: plan });\r\n+\r\n+        if (response.id) {\r\n+            company.subscription.mercadopagoPreapprovalId = response.id;\r\n+            await company.save();\r\n+        }\r\n+        \r\n+        res.status(200).json({ init_point: response.init_point });\r\n+\r\n+    } catch (error) {\r\n+        console.error('Erro ao criar assinatura no Mercado Pago:', error);\r\n+        res.status(500).json({ message: 'Não foi possível gerar o link de pagamento.' });\r\n+    }\r\n+});\r\n+\r\n+\r\n+// Rota para receber notificações (webhooks) do Mercado Pago\r\n+router.post('/webhook', async (req, res) => {\r\n+    const notification = req.body;\r\n+    console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n+\r\n+    try {\r\n+        // Como esta rota é pública, obtemos a conexão Mestre e o modelo diretamente\r\n+        const masterDb = getMasterConnection();\r\n+        const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n+\r\n+        if (notification.type === 'payment') {\r\n+            const paymentId = notification.data.id;\r\n+            const payment = new Payment(client);\r\n+            const paymentDetails = await payment.get({ id: paymentId });\r\n+            \r\n+            if (paymentDetails.status === 'approved') {\r\n+                const preapprovalId = paymentDetails.preapproval_id; // Campo correto\r\n+                if (preapprovalId) {\r\n+                    // Busca a empresa no banco Mestre\r\n+                    const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+                    \r\n+                    if (company && company.subscription.status !== 'active') {\r\n+                        const preapproval = new PreApproval(client);\r\n+                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+                        \r\n+                        // Ativa a assinatura\r\n+                        company.subscription.status = 'active';\r\n+                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                        await company.save();\r\n+                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n+                    }\r\n+                }\r\n+            } \r\n+        }\r\n+        \r\n+        res.sendStatus(200);\r\n+\r\n+    } catch (error) {\r\n+        console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n+        res.sendStatus(500);\r\n+    }\r\n+});\r\n+\r\n+\r\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753552923151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,340 +99,5 @@\n     }\r\n });\r\n \r\n \r\n-module.exports = router;\n-const express = require('express');\r\n-const router = express.Router();\r\n-const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n-\r\n-// Importamos o schema do Mestre e a função para obter a conexão Mestre\r\n-const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n-const { getMasterConnection } = require('../config/db');\r\n-\r\n-// Cliente do Mercado Pago\r\n-const client = new MercadoPagoConfig({ accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN });\r\n-\r\n-\r\n-// Rota para criar o link de assinatura\r\n-router.post('/create-subscription', async (req, res) => {\r\n-    try {\r\n-        // Apenas o proprietário pode criar a assinatura\r\n-        if (req.user.role !== 'Proprietário') {\r\n-            return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n-        }\r\n-        \r\n-        const companyId = req.user.companyId;\r\n-        // Compilamos o modelo usando a conexão Mestre ativa que vem do middleware\r\n-        const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n-        \r\n-        const company = await MasterCompany.findById(companyId);\r\n-        if (!company) {\r\n-            return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n-        }\r\n-\r\n-        const plan = {\r\n-            reason: 'Assinatura Mensal - Organizador de Boletos',\r\n-            auto_recurring: {\r\n-                frequency: 1,\r\n-                frequency_type: 'months',\r\n-                transaction_amount: 40.00,\r\n-                currency_id: 'BRL'\r\n-            },\r\n-            back_url: 'http://127.0.0.1:5500/OrgBoletos.html', // URL de retorno\r\n-            payer_email: company.email || ''\r\n-        };\r\n-\r\n-        const preapproval = new PreApproval(client);\r\n-        const response = await preapproval.create({ body: plan });\r\n-\r\n-        if (response.id) {\r\n-            company.subscription.mercadopagoPreapprovalId = response.id;\r\n-            await company.save();\r\n-        }\r\n-        \r\n-        res.status(200).json({ init_point: response.init_point });\r\n-\r\n-    } catch (error) {\r\n-        console.error('Erro ao criar assinatura no Mercado Pago:', error);\r\n-        res.status(500).json({ message: 'Não foi possível gerar o link de pagamento.' });\r\n-    }\r\n-});\r\n-\r\n-\r\n-// Rota para receber notificações (webhooks) do Mercado Pago\r\n-router.post('/webhook', async (req, res) => {\r\n-    const notification = req.body;\r\n-    console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n-\r\n-    try {\r\n-        // Como esta rota é pública, obtemos a conexão Mestre e o modelo diretamente\r\n-        const masterDb = getMasterConnection();\r\n-        const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n-\r\n-        if (notification.type === 'payment') {\r\n-            const paymentId = notification.data.id;\r\n-            const payment = new Payment(client);\r\n-            const paymentDetails = await payment.get({ id: paymentId });\r\n-            \r\n-            if (paymentDetails.status === 'approved') {\r\n-                const preapprovalId = paymentDetails.preapproval_id; // Campo correto\r\n-                if (preapprovalId) {\r\n-                    // Busca a empresa no banco Mestre\r\n-                    const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-                    \r\n-                    if (company && company.subscription.status !== 'active') {\r\n-                        const preapproval = new PreApproval(client);\r\n-                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-                        \r\n-                        // Ativa a assinatura\r\n-                        company.subscription.status = 'active';\r\n-                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-                        await company.save();\r\n-                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n-                    }\r\n-                }\r\n-            } \r\n-        }\r\n-        \r\n-        res.sendStatus(200);\r\n-\r\n-    } catch (error) {\r\n-        console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n-        res.sendStatus(500);\r\n-    }\r\n-});\r\n-\r\n-\r\n-module.exports = router;\n-const express = require('express');\r\n-const router = express.Router();\r\n-const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n-\r\n-// Importamos o schema e a função para obter a conexão Mestre\r\n-const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n-const { getMasterConnection } = require('../config/db');\r\n-\r\n-// Cliente do Mercado Pago\r\n-const client = new MercadoPagoConfig({ accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN });\r\n-\r\n-\r\n-// Rota para criar o link de assinatura\r\n-router.post('/create-subscription', async (req, res) => {\r\n-    try {\r\n-        if (req.user.role !== 'Proprietário') {\r\n-            return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n-        }\r\n-        \r\n-        const companyId = req.user.companyId;\r\n-        const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n-        \r\n-        const company = await MasterCompany.findById(companyId);\r\n-        if (!company) {\r\n-            return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n-        }\r\n-\r\n-        const plan = {\r\n-            reason: 'Assinatura Mensal - Organizador de Boletos',\r\n-            auto_recurring: {\r\n-                frequency: 1,\r\n-                frequency_type: 'months',\r\n-                transaction_amount: 40.00,\r\n-                currency_id: 'BRL'\r\n-            },\r\n-            back_url: 'http://127.0.0.1:5500/OrgBoletos.html',\r\n-            payer_email: company.email || ''\r\n-        };\r\n-\r\n-        const preapproval = new PreApproval(client);\r\n-        const response = await preapproval.create({ body: plan });\r\n-\r\n-        if (response.id) {\r\n-            company.subscription.mercadopagoPreapprovalId = response.id;\r\n-            await company.save();\r\n-        }\r\n-        \r\n-        res.status(200).json({ init_point: response.init_point });\r\n-\r\n-    } catch (error) {\r\n-        console.error('Erro ao criar assinatura no Mercado Pago:', error);\r\n-        res.status(500).json({ message: 'Não foi possível gerar o link de pagamento.' });\r\n-    }\r\n-});\r\n-\r\n-\r\n-// Rota para receber notificações (webhooks) do Mercado Pago\r\n-router.post('/webhook', async (req, res) => {\r\n-    const notification = req.body;\r\n-    console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n-\r\n-    try {\r\n-        // Como esta rota é pública, obtemos a conexão Mestre e o modelo diretamente\r\n-        const masterDb = getMasterConnection();\r\n-        const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n-\r\n-        if (notification.type === 'payment') {\r\n-            const paymentId = notification.data.id;\r\n-            const payment = new Payment(client);\r\n-            const paymentDetails = await payment.get({ id: paymentId });\r\n-            \r\n-            if (paymentDetails.status === 'approved') {\r\n-                const preapprovalId = paymentDetails.preapproval_id; // Campo correto para ID da assinatura\r\n-                if (preapprovalId) {\r\n-                    const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-                    \r\n-                    if (company && company.subscription.status !== 'active') {\r\n-                        const preapproval = new PreApproval(client);\r\n-                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-                        \r\n-                        company.subscription.status = 'active';\r\n-                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-                        await company.save();\r\n-                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n-                    }\r\n-                }\r\n-            } \r\n-        }\r\n-        \r\n-        res.sendStatus(200);\r\n-\r\n-    } catch (error) {\r\n-        console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n-        res.sendStatus(500);\r\n-    }\r\n-});\r\n-\r\n-\r\n-module.exports = router;\n-const express = require('express');\r\n-const router = express.Router();\r\n-const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n-\r\n-// Importamos o schema e a função para obter a conexão Mestre\r\n-const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n-const { getMasterConnection } = require('../config/db'); // Necessário para o webhook\r\n-\r\n-// Cliente do Mercado Pago\r\n-const client = new MercadoPagoConfig({\r\n-    accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN\r\n-});\r\n-\r\n-\r\n-// Rota para criar o link de assinatura\r\n-// Esta rota é protegida e já recebe a conexão com o banco Mestre (req.masterDb)\r\n-router.post('/create-subscription', async (req, res) => {\r\n-    try {\r\n-        if (req.user.role !== 'Proprietário') {\r\n-            return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n-        }\r\n-        \r\n-        const companyId = req.user.companyId;\r\n-        // Compilamos o modelo usando a conexão Mestre ativa\r\n-        const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n-        \r\n-        const company = await MasterCompany.findById(companyId);\r\n-        if (!company) {\r\n-            return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n-        }\r\n-\r\n-        const plan = {\r\n-            reason: 'Assinatura Mensal - Organizador de Boletos',\r\n-            auto_recurring: {\r\n-                frequency: 1,\r\n-                frequency_type: 'months',\r\n-                transaction_amount: 40.00,\r\n-                currency_id: 'BRL'\r\n-            },\r\n-            back_url: 'http://127.0.0.1:5500/OrgBoletos.html', // URL de retorno\r\n-            payer_email: company.email || '' \r\n-        };\r\n-\r\n-        const preapproval = new PreApproval(client);\r\n-        const response = await preapproval.create({ body: plan });\r\n-\r\n-        if (response.id) {\r\n-            company.subscription.mercadopagoPreapprovalId = response.id;\r\n-            await company.save();\r\n-        }\r\n-        \r\n-        res.status(200).json({ init_point: response.init_point });\r\n-\r\n-    } catch (error) {\r\n-        console.error('Erro ao criar assinatura no Mercado Pago:', error);\r\n-        res.status(500).json({ message: 'Não foi possível gerar o link de pagamento.' });\r\n-    }\r\n-});\r\n-\r\n-\r\n-// Rota para receber notificações (webhooks) do Mercado Pago\r\n-router.post('/webhook', async (req, res) => {\r\n-    const notification = req.body;\r\n-    console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n-\r\n-    try {\r\n-        if (notification.type === 'payment') {\r\n-            const paymentId = notification.data.id;\r\n-            const payment = new Payment(client);\r\n-            const paymentDetails = await payment.get({ id: paymentId });\r\n-            \r\n-            console.log(`[PAGAMENTO] Processando pagamento ID ${paymentId} com status '${paymentDetails.status}'.`);\r\n-\r\n-            if (paymentDetails.status === 'approved') {\r\n-                // --- CORREÇÃO PRINCIPAL AQUI ---\r\n-                // O ID da assinatura (preapproval) vem neste campo, e não no 'point_of_interaction'.\r\n-                const preapprovalId = paymentDetails.preapproval_id;\r\n-                \r\n-                if (preapprovalId) {\r\n-                    const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-                    \r\n-                    if (company) {\r\n-                        if (company.subscription.status !== 'active') {\r\n-                            const preapproval = new PreApproval(client);\r\n-                            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-                            \r\n-                            company.subscription.status = 'active';\r\n-                            company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n-                            company.subscription.mercadopagoPaymentIds.push(paymentId);\r\n-                            \r\n-                            await company.save();\r\n-                            console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n-                        } else {\r\n-                             console.log(`[INFO] A assinatura da empresa ${company.nomeEmpresa} já estava ativa.`);\r\n-                        }\r\n-                    } else {\r\n-                        console.log(`[ERRO] Pagamento aprovado para a assinatura ${preapprovalId}, mas nenhuma empresa foi encontrada.`);\r\n-                    }\r\n-                }\r\n-            } \r\n-            else if (paymentDetails.status === 'refunded' || paymentDetails.status === 'charged_back') {\r\n-                const company = await Company.findOne({ 'subscription.mercadopagoPaymentIds': paymentId });\r\n-                if (company) {\r\n-                    company.subscription.status = 'inactive';\r\n-                    await company.save();\r\n-                    console.log(`---> ALERTA: Assinatura da empresa ${company.nomeEmpresa} foi DESATIVADA devido a reembolso.`);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (notification.type === 'subscription_preapproval') {\r\n-            const preapprovalId = notification.data.id;\r\n-            const preapproval = new PreApproval(client);\r\n-            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-\r\n-            if (subscriptionDetails.status === 'cancelled') {\r\n-                 const company = await Company.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-                 if (company) {\r\n-                    console.log(`---> AVISO: A renovação da assinatura da empresa ${company.nomeEmpresa} foi CANCELADA.`);\r\n-                 }\r\n-            }\r\n-        }\r\n-        \r\n-        res.sendStatus(200);\r\n-\r\n-    } catch (error) {\r\n-        console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n-        res.sendStatus(500);\r\n-    }\r\n-});\r\n-\r\n-\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753556793754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,17 +10,16 @@\n // Cliente do Mercado Pago\r\n const client = new MercadoPagoConfig({ accessToken: process.env.MERCADO_PAGO_ACCESS_TOKEN });\r\n \r\n \r\n-// Rota para criar o link de assinatura\r\n+// Rota para criar o link de assinatura (protegida)\r\n router.post('/create-subscription', protect, async (req, res) => {\r\n     try {\r\n         if (req.user.role !== 'Proprietário') {\r\n             return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n         }\r\n         \r\n         const companyId = req.user.companyId;\r\n-        // Compilamos o modelo usando a conexão Mestre ativa que vem do middleware\r\n         const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n         \r\n         const company = await MasterCompany.findById(companyId);\r\n         if (!company) {\r\n@@ -34,9 +33,9 @@\n                 frequency_type: 'months',\r\n                 transaction_amount: 40.00,\r\n                 currency_id: 'BRL'\r\n             },\r\n-            back_url: 'http://127.0.0.1:5500/OrgBoletos.html', // URL de retorno\r\n+            back_url: 'http://127.0.0.1:5500/OrgBoletos.html',\r\n             payer_email: company.email || ''\r\n         };\r\n \r\n         const preapproval = new PreApproval(client);\r\n@@ -55,15 +54,14 @@\n     }\r\n });\r\n \r\n \r\n-// Rota para receber notificações (webhooks) do Mercado Pago\r\n+// Rota para receber notificações (webhooks) do Mercado Pago (pública)\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n     console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n-        // Como esta rota é pública, obtemos a conexão Mestre e o modelo diretamente\r\n         const masterDb = getMasterConnection();\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n \r\n         if (notification.type === 'payment') {\r\n@@ -71,18 +69,16 @@\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n             \r\n             if (paymentDetails.status === 'approved') {\r\n-                const preapprovalId = paymentDetails.preapproval_id; // Campo correto\r\n+                const preapprovalId = paymentDetails.preapproval_id;\r\n                 if (preapprovalId) {\r\n-                    // Busca a empresa no banco Mestre\r\n                     const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n                     \r\n                     if (company && company.subscription.status !== 'active') {\r\n                         const preapproval = new PreApproval(client);\r\n                         const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n                         \r\n-                        // Ativa a assinatura\r\n                         company.subscription.status = 'active';\r\n                         company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n                         await company.save();\r\n                         console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n"
                },
                {
                    "date": 1753559413115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,9 @@\n \r\n \r\n // Rota para receber notificações (webhooks) do Mercado Pago (pública)\r\n router.post('/webhook', async (req, res) => {\r\n+    console.log('[DEBUG] Chegou na rota POST /webhook de payments.js');\r\n     const notification = req.body;\r\n     console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n"
                },
                {
                    "date": 1753559727748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,39 +56,51 @@\n \r\n \r\n // Rota para receber notificações (webhooks) do Mercado Pago (pública)\r\n router.post('/webhook', async (req, res) => {\r\n-    console.log('[DEBUG] Chegou na rota POST /webhook de payments.js');\r\n     const notification = req.body;\r\n     console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n         const masterDb = getMasterConnection();\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n \r\n-        if (notification.type === 'payment') {\r\n-            const paymentId = notification.data.id;\r\n-            const payment = new Payment(client);\r\n-            const paymentDetails = await payment.get({ id: paymentId });\r\n-            \r\n-            if (paymentDetails.status === 'approved') {\r\n-                const preapprovalId = paymentDetails.preapproval_id;\r\n+        // MUDANÇA AQUI: Adicione a verificação para 'preapproval' ou 'subscription_authorized_payment'\r\n+        if (notification.type === 'payment' || notification.type === 'preapproval' || notification.type === 'subscription_authorized_payment') {\r\n+            let preapprovalId;\r\n+            let paymentDetailsStatus;\r\n+\r\n+            if (notification.type === 'payment') {\r\n+                const paymentId = notification.data.id;\r\n+                const payment = new Payment(client);\r\n+                const paymentDetails = await payment.get({ id: paymentId });\r\n+                paymentDetailsStatus = paymentDetails.status;\r\n+                preapprovalId = paymentDetails.preapproval_id; // Pega o ID da pré-aprovação do pagamento\r\n+            } else if (notification.type === 'preapproval' || notification.type === 'subscription_authorized_payment') {\r\n+                // Para notificações diretas de pré-aprovação\r\n+                const preapproval = new PreApproval(client);\r\n+                const subscriptionDetails = await preapproval.get({ id: notification.data.id });\r\n+                paymentDetailsStatus = subscriptionDetails.status; // Pode ser 'authorized', 'pending', etc.\r\n+                preapprovalId = subscriptionDetails.id; // O ID da pré-aprovação é o próprio data.id da notificação\r\n+            }\r\n+\r\n+            if (paymentDetailsStatus === 'approved' || paymentDetailsStatus === 'authorized') { // Adicione 'authorized' para pré-aprovação\r\n                 if (preapprovalId) {\r\n                     const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-                    \r\n+\r\n                     if (company && company.subscription.status !== 'active') {\r\n-                        const preapproval = new PreApproval(client);\r\n-                        const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-                        \r\n+                        // Pega os detalhes atualizados da assinatura para a data de expiração\r\n+                        const subscriptionDetails = await new PreApproval(client).get({ id: preapprovalId });\r\n+\r\n                         company.subscription.status = 'active';\r\n-                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date);\r\n+                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date); // Use next_payment_date\r\n                         await company.save();\r\n                         console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n                     }\r\n                 }\r\n-            } \r\n+            }\r\n         }\r\n-        \r\n+\r\n         res.sendStatus(200);\r\n \r\n     } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n"
                },
                {
                    "date": 1753559832246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,9 @@\n             }\r\n \r\n             if (paymentDetailsStatus === 'approved' || paymentDetailsStatus === 'authorized') { // Adicione 'authorized' para pré-aprovação\r\n                 if (preapprovalId) {\r\n+                    console.log(`[WEBHOOK DEBUG] Preapproval ID encontrado: ${preapprovalId}`);\r\n                     const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n \r\n                     if (company && company.subscription.status !== 'active') {\r\n                         // Pega os detalhes atualizados da assinatura para a data de expiração\r\n"
                },
                {
                    "date": 1753559950525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n \r\n         if (response.id) {\r\n             company.subscription.mercadopagoPreapprovalId = response.id;\r\n             await company.save();\r\n+            console.log(`[MP DEBUG] Preapproval ID ${response.id} salvo para a empresa ${company.nomeEmpresa}`);\r\n         }\r\n         \r\n         res.status(200).json({ init_point: response.init_point });\r\n \r\n@@ -63,45 +64,72 @@\n     try {\r\n         const masterDb = getMasterConnection();\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n \r\n-        // MUDANÇA AQUI: Adicione a verificação para 'preapproval' ou 'subscription_authorized_payment'\r\n-        if (notification.type === 'payment' || notification.type === 'preapproval' || notification.type === 'subscription_authorized_payment') {\r\n-            let preapprovalId;\r\n-            let paymentDetailsStatus;\r\n+        let preapprovalId = null;\r\n+        let notificationStatus = null; // Para guardar o status relevante da notificação/detalhes\r\n+        let nextPaymentDate = null;\r\n \r\n-            if (notification.type === 'payment') {\r\n-                const paymentId = notification.data.id;\r\n-                const payment = new Payment(client);\r\n-                const paymentDetails = await payment.get({ id: paymentId });\r\n-                paymentDetailsStatus = paymentDetails.status;\r\n-                preapprovalId = paymentDetails.preapproval_id; // Pega o ID da pré-aprovação do pagamento\r\n-            } else if (notification.type === 'preapproval' || notification.type === 'subscription_authorized_payment') {\r\n-                // Para notificações diretas de pré-aprovação\r\n-                const preapproval = new PreApproval(client);\r\n-                const subscriptionDetails = await preapproval.get({ id: notification.data.id });\r\n-                paymentDetailsStatus = subscriptionDetails.status; // Pode ser 'authorized', 'pending', etc.\r\n-                preapprovalId = subscriptionDetails.id; // O ID da pré-aprovação é o próprio data.id da notificação\r\n+        // Lógica para determinar o preapprovalId e status com base no tipo de notificação\r\n+        if (notification.type === 'payment') {\r\n+            // Notificação de um pagamento avulso (pode ser parte de uma recorrência)\r\n+            const paymentId = notification.data.id;\r\n+            console(`[MP WEBHOOK] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`);\r\n+            const payment = new Payment(client);\r\n+            const paymentDetails = await payment.get({ id: paymentId });\r\n+            notificationStatus = paymentDetails.status;\r\n+            preapprovalId = paymentDetails.preapproval_id; // Pega o ID da pré-aprovação do pagamento\r\n+            \r\n+            // Se for um pagamento recorrente, tentamos pegar a próxima data de pagamento\r\n+            if (preapprovalId) {\r\n+                const preapprovalDetails = await new PreApproval(client).get({ id: preapprovalId });\r\n+                nextPaymentDate = preapprovalDetails.next_payment_date;\r\n             }\r\n \r\n-            if (paymentDetailsStatus === 'approved' || paymentDetailsStatus === 'authorized') { // Adicione 'authorized' para pré-aprovação\r\n-                if (preapprovalId) {\r\n-                    console.log(`[WEBHOOK DEBUG] Preapproval ID encontrado: ${preapprovalId}`);\r\n-                    const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+            console.log(`[MP WEBHOOK] Detalhes do pagamento ${paymentId}: Status -> ${notificationStatus}, Preapproval ID -> ${preapprovalId}`);\r\n \r\n-                    if (company && company.subscription.status !== 'active') {\r\n-                        // Pega os detalhes atualizados da assinatura para a data de expiração\r\n-                        const subscriptionDetails = await new PreApproval(client).get({ id: preapprovalId });\r\n+        } else if (notification.type === 'preapproval' || notification.type === 'subscription_authorized_payment') {\r\n+            // Notificação direta de uma pré-aprovação (assinatura)\r\n+            preapprovalId = notification.data.id;\r\n+            console.log(`[MP WEBHOOK] Tipo 'preapproval' ou 'subscription_authorized_payment' recebido. ID da pré-aprovação: ${preapprovalId}`);\r\n+            \r\n+            const preapproval = new PreApproval(client);\r\n+            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n+            notificationStatus = subscriptionDetails.status; // Pode ser 'authorized', 'pending', 'active', etc.\r\n+            nextPaymentDate = subscriptionDetails.next_payment_date;\r\n \r\n-                        company.subscription.status = 'active';\r\n-                        company.subscription.endDate = new Date(subscriptionDetails.next_payment_date); // Use next_payment_date\r\n-                        await company.save();\r\n-                        console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA.`);\r\n-                    }\r\n+            console.log(`[MP WEBHOOK] Detalhes da pré-aprovação ${preapprovalId}: Status -> ${notificationStatus}, Próximo pagamento -> ${nextPaymentDate}`);\r\n+\r\n+        } else {\r\n+            console.log(`[MP WEBHOOK] Tipo de notificação desconhecido ou não relevante: ${notification.type}`);\r\n+            return res.sendStatus(200); // Retorna 200 OK para o Mercado Pago, mas não processa\r\n+        }\r\n+\r\n+        // --- Lógica principal de atualização da assinatura ---\r\n+        if (preapprovalId && (notificationStatus === 'approved' || notificationStatus === 'authorized' || notificationStatus === 'active')) {\r\n+            console.log(`[MP WEBHOOK] Processando Preapproval ID: ${preapprovalId} com status relevante: ${notificationStatus}`);\r\n+            const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+            \r\n+            if (company) {\r\n+                console.log(`[MP WEBHOOK] Empresa encontrada: ${company.nomeEmpresa}. Status atual da assinatura: ${company.subscription.status}`);\r\n+                \r\n+                // Apenas atualiza se o status atual não for 'active' OU se a data de término for anterior à próxima data de pagamento\r\n+                // Isso evita atualizações desnecessárias e garante que a data final seja a mais recente.\r\n+                if (company.subscription.status !== 'active' || (nextPaymentDate && new Date(company.subscription.endDate) < new Date(nextPaymentDate))) {\r\n+                    company.subscription.status = 'active';\r\n+                    company.subscription.endDate = nextPaymentDate ? new Date(nextPaymentDate) : new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // Garante uma data se nextPaymentDate for nulo\r\n+                    await company.save();\r\n+                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/ATUALIZADA. Nova data de término: ${company.subscription.endDate}`);\r\n+                } else {\r\n+                    console.log(`[MP WEBHOOK] Assinatura da empresa ${company.nomeEmpresa} já está ativa e atualizada. Nenhuma ação necessária.`);\r\n                 }\r\n+            } else {\r\n+                console.log(`[MP WEBHOOK] Empresa NÃO encontrada para o preapprovalId: ${preapprovalId}.`);\r\n             }\r\n+        } else {\r\n+            console.log(`[MP WEBHOOK] Notificação ignorada. Preapproval ID ausente ou status (${notificationStatus}) não indica aprovação/ativação.`);\r\n         }\r\n-\r\n+        \r\n         res.sendStatus(200);\r\n \r\n     } catch (error) {\r\n         console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n"
                },
                {
                    "date": 1753560123445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,16 +14,18 @@\n // Rota para criar o link de assinatura (protegida)\r\n router.post('/create-subscription', protect, async (req, res) => {\r\n     try {\r\n         if (req.user.role !== 'Proprietário') {\r\n+            console.log(`[MP DEBUG] Tentativa de criar assinatura por não-proprietário: ${req.user.username} (${req.user.role})`);\r\n             return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n         }\r\n         \r\n         const companyId = req.user.companyId;\r\n         const MasterCompany = req.masterDb.model('MasterCompany', MasterCompanySchema);\r\n         \r\n         const company = await MasterCompany.findById(companyId);\r\n         if (!company) {\r\n+            console.log(`[MP DEBUG] Empresa não encontrada para Company ID: ${companyId}`);\r\n             return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n         }\r\n \r\n         const plan = {\r\n@@ -34,18 +36,23 @@\n                 transaction_amount: 40.00,\r\n                 currency_id: 'BRL'\r\n             },\r\n             back_url: 'http://127.0.0.1:5500/OrgBoletos.html',\r\n-            payer_email: company.email || ''\r\n+            payer_email: company.email || '' // Usa o email da empresa ou string vazia\r\n         };\r\n \r\n         const preapproval = new PreApproval(client);\r\n+        console.log(`[MP DEBUG] Tentando criar PreApproval no Mercado Pago para ${company.nomeEmpresa}...`);\r\n         const response = await preapproval.create({ body: plan });\r\n \r\n         if (response.id) {\r\n             company.subscription.mercadopagoPreapprovalId = response.id;\r\n+            // Se o status da assinatura for 'inactive' ou null, defina-o como 'pending' após a criação do link\r\n+            if (!company.subscription.status || company.subscription.status === 'inactive') {\r\n+                 company.subscription.status = 'pending_approval'; // Novo status para indicar que o link foi gerado e aguarda aprovação\r\n+            }\r\n             await company.save();\r\n-            console.log(`[MP DEBUG] Preapproval ID ${response.id} salvo para a empresa ${company.nomeEmpresa}`);\r\n+            console.log(`[MP DEBUG] Preapproval ID ${response.id} salvo para a empresa ${company.nomeEmpresa}. Status da assinatura atualizado para: ${company.subscription.status}`);\r\n         }\r\n         \r\n         res.status(200).json({ init_point: response.init_point });\r\n \r\n@@ -58,76 +65,111 @@\n \r\n // Rota para receber notificações (webhooks) do Mercado Pago (pública)\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n-    console.log('Webhook recebido:', JSON.stringify(notification, null, 2));\r\n+    console.log('[MP WEBHOOK] Webhook recebido:', JSON.stringify(notification, null, 2));\r\n \r\n     try {\r\n         const masterDb = getMasterConnection();\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n \r\n         let preapprovalId = null;\r\n         let notificationStatus = null; // Para guardar o status relevante da notificação/detalhes\r\n         let nextPaymentDate = null;\r\n+        let webhookProcessed = false; // Flag para indicar se o webhook foi processado\r\n \r\n-        // Lógica para determinar o preapprovalId e status com base no tipo de notificação\r\n+        console.log(`[MP WEBHOOK DEBUG] Tipo de Notificação: ${notification.type}, Data ID: ${notification.data.id}`);\r\n+\r\n+        // Lógica para determinar o preapprovalId, status e próxima data de pagamento com base no tipo de notificação\r\n         if (notification.type === 'payment') {\r\n-            // Notificação de um pagamento avulso (pode ser parte de uma recorrência)\r\n+            // Notificação de um pagamento (pode ser o primeiro pagamento da recorrência ou pagamentos subsequentes)\r\n             const paymentId = notification.data.id;\r\n-            console(`[MP WEBHOOK] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`);\r\n+            console.log(`[MP WEBHOOK DEBUG] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`);\r\n+            \r\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n             notificationStatus = paymentDetails.status;\r\n             preapprovalId = paymentDetails.preapproval_id; // Pega o ID da pré-aprovação do pagamento\r\n-            \r\n-            // Se for um pagamento recorrente, tentamos pegar a próxima data de pagamento\r\n-            if (preapprovalId) {\r\n-                const preapprovalDetails = await new PreApproval(client).get({ id: preapprovalId });\r\n-                nextPaymentDate = preapprovalDetails.next_payment_date;\r\n+\r\n+            console.log(`[MP WEBHOOK DEBUG] Detalhes do pagamento ${paymentId}: Status -> ${notificationStatus}, Preapproval ID -> ${preapprovalId}`);\r\n+\r\n+            // Se for um pagamento recorrente e aprovado, tenta buscar a data do próximo pagamento da pré-aprovação\r\n+            if (preapprovalId && notificationStatus === 'approved') {\r\n+                try {\r\n+                    const preapprovalDetails = await new PreApproval(client).get({ id: preapprovalId });\r\n+                    nextPaymentDate = preapprovalDetails.next_payment_date;\r\n+                    console.log(`[MP WEBHOOK DEBUG] Preapproval Details (via payment): Status -> ${preapprovalDetails.status}, Próximo pagamento -> ${nextPaymentDate}`);\r\n+                } catch (preapprovalError) {\r\n+                    console.error(`[MP WEBHOOK ERROR] Erro ao buscar detalhes da pré-aprovação ${preapprovalId} após pagamento:`, preapprovalError);\r\n+                }\r\n             }\r\n+            webhookProcessed = true;\r\n \r\n-            console.log(`[MP WEBHOOK] Detalhes do pagamento ${paymentId}: Status -> ${notificationStatus}, Preapproval ID -> ${preapprovalId}`);\r\n-\r\n         } else if (notification.type === 'preapproval' || notification.type === 'subscription_authorized_payment') {\r\n             // Notificação direta de uma pré-aprovação (assinatura)\r\n             preapprovalId = notification.data.id;\r\n-            console.log(`[MP WEBHOOK] Tipo 'preapproval' ou 'subscription_authorized_payment' recebido. ID da pré-aprovação: ${preapprovalId}`);\r\n+            console.log(`[MP WEBHOOK DEBUG] Tipo 'preapproval' ou 'subscription_authorized_payment' recebido. ID da pré-aprovação: ${preapprovalId}`);\r\n             \r\n             const preapproval = new PreApproval(client);\r\n             const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n             notificationStatus = subscriptionDetails.status; // Pode ser 'authorized', 'pending', 'active', etc.\r\n             nextPaymentDate = subscriptionDetails.next_payment_date;\r\n \r\n-            console.log(`[MP WEBHOOK] Detalhes da pré-aprovação ${preapprovalId}: Status -> ${notificationStatus}, Próximo pagamento -> ${nextPaymentDate}`);\r\n+            console.log(`[MP WEBHOOK DEBUG] Detalhes da pré-aprovação ${preapprovalId}: Status -> ${notificationStatus}, Próximo pagamento -> ${nextPaymentDate}`);\r\n+            webhookProcessed = true;\r\n \r\n         } else {\r\n-            console.log(`[MP WEBHOOK] Tipo de notificação desconhecido ou não relevante: ${notification.type}`);\r\n-            return res.sendStatus(200); // Retorna 200 OK para o Mercado Pago, mas não processa\r\n+            console.log(`[MP WEBHOOK DEBUG] Tipo de notificação desconhecido ou não relevante para ativação de assinatura: ${notification.type}`);\r\n+            // Nenhuma ação necessária, apenas retorna 200 OK para o Mercado Pago\r\n+            return res.sendStatus(200); \r\n         }\r\n \r\n         // --- Lógica principal de atualização da assinatura ---\r\n-        if (preapprovalId && (notificationStatus === 'approved' || notificationStatus === 'authorized' || notificationStatus === 'active')) {\r\n+        // Procede APENAS se um preapprovalId foi identificado E o status indica sucesso/ativação\r\n+        if (webhookProcessed && preapprovalId && (notificationStatus === 'approved' || notificationStatus === 'authorized' || notificationStatus === 'active')) {\r\n             console.log(`[MP WEBHOOK] Processando Preapproval ID: ${preapprovalId} com status relevante: ${notificationStatus}`);\r\n             const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n             \r\n             if (company) {\r\n                 console.log(`[MP WEBHOOK] Empresa encontrada: ${company.nomeEmpresa}. Status atual da assinatura: ${company.subscription.status}`);\r\n                 \r\n-                // Apenas atualiza se o status atual não for 'active' OU se a data de término for anterior à próxima data de pagamento\r\n-                // Isso evita atualizações desnecessárias e garante que a data final seja a mais recente.\r\n-                if (company.subscription.status !== 'active' || (nextPaymentDate && new Date(company.subscription.endDate) < new Date(nextPaymentDate))) {\r\n+                const currentEndDate = company.subscription.endDate;\r\n+                let shouldUpdate = false;\r\n+\r\n+                // Verifica se o status precisa ser alterado para 'active'\r\n+                if (company.subscription.status !== 'active') {\r\n+                    shouldUpdate = true;\r\n+                    console.log(`[MP WEBHOOK] Status da assinatura de ${company.nomeEmpresa} mudando de '${company.subscription.status}' para 'active'.`);\r\n+                }\r\n+\r\n+                // Verifica se a data de término precisa ser atualizada\r\n+                // (Se houver uma nextPaymentDate E ela for posterior à data atual de término)\r\n+                if (nextPaymentDate && (!currentEndDate || new Date(nextPaymentDate) > new Date(currentEndDate))) {\r\n+                    shouldUpdate = true;\r\n+                    console.log(`[MP WEBHOOK] Data de término da assinatura de ${company.nomeEmpresa} será atualizada para ${nextPaymentDate}.`);\r\n+                } else if (!nextPaymentDate && notificationStatus === 'active') {\r\n+                    // Caso não haja nextPaymentDate, mas o status seja 'active', garante uma data futura (ex: 30 dias)\r\n+                    // Isso é um fallback, idealmente next_payment_date sempre viria.\r\n+                    if (!currentEndDate || new Date(currentEndDate) < new Date()) {\r\n+                        shouldUpdate = true;\r\n+                        nextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // Adiciona 30 dias a partir de agora\r\n+                        console.log(`[MP WEBHOOK] Definindo data de término padrão (30 dias) para ${company.nomeEmpresa} pois nextPaymentDate não foi fornecido.`);\r\n+                    }\r\n+                }\r\n+\r\n+                if (shouldUpdate) {\r\n                     company.subscription.status = 'active';\r\n-                    company.subscription.endDate = nextPaymentDate ? new Date(nextPaymentDate) : new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // Garante uma data se nextPaymentDate for nulo\r\n+                    company.subscription.endDate = nextPaymentDate ? new Date(nextPaymentDate) : company.subscription.endDate; // Usa a nova data ou mantém a existente\r\n                     await company.save();\r\n-                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} foi ATIVADA/ATUALIZADA. Nova data de término: ${company.subscription.endDate}`);\r\n+                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} ATIVADA/ATUALIZADA. Novo status: '${company.subscription.status}', Nova data de término: '${company.subscription.endDate ? company.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}'`);\r\n                 } else {\r\n-                    console.log(`[MP WEBHOOK] Assinatura da empresa ${company.nomeEmpresa} já está ativa e atualizada. Nenhuma ação necessária.`);\r\n+                    console.log(`[MP WEBHOOK] Assinatura da empresa ${company.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação necessária.`);\r\n                 }\r\n             } else {\r\n-                console.log(`[MP WEBHOOK] Empresa NÃO encontrada para o preapprovalId: ${preapprovalId}.`);\r\n+                console.log(`[MP WEBHOOK] Empresa NÃO encontrada para o preapprovalId: ${preapprovalId}. Verifique se o ID está salvo corretamente.`);\r\n             }\r\n-        } else {\r\n-            console.log(`[MP WEBHOOK] Notificação ignorada. Preapproval ID ausente ou status (${notificationStatus}) não indica aprovação/ativação.`);\r\n+        } else if (webhookProcessed) {\r\n+            console.log(`[MP WEBHOOK] Notificação processada, mas não resultou em ativação. Preapproval ID: ${preapprovalId}, Status: ${notificationStatus}`);\r\n         }\r\n         \r\n         res.sendStatus(200);\r\n \r\n"
                },
                {
                    "date": 1753560532039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,11 +45,11 @@\n         const response = await preapproval.create({ body: plan });\r\n \r\n         if (response.id) {\r\n             company.subscription.mercadopagoPreapprovalId = response.id;\r\n-            // Se o status da assinatura for 'inactive' ou null, defina-o como 'pending' após a criação do link\r\n+            // Se o status da assinatura for 'inactive' ou null, defina-o como 'pending_approval' após a criação do link\r\n             if (!company.subscription.status || company.subscription.status === 'inactive') {\r\n-                 company.subscription.status = 'pending_approval'; // Novo status para indicar que o link foi gerado e aguarda aprovação\r\n+                 company.subscription.status = 'pending_approval';\r\n             }\r\n             await company.save();\r\n             console.log(`[MP DEBUG] Preapproval ID ${response.id} salvo para a empresa ${company.nomeEmpresa}. Status da assinatura atualizado para: ${company.subscription.status}`);\r\n         }\r\n"
                },
                {
                    "date": 1753560739644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n                 transaction_amount: 40.00,\r\n                 currency_id: 'BRL'\r\n             },\r\n             back_url: 'http://127.0.0.1:5500/OrgBoletos.html',\r\n-            payer_email: company.email || '' // Usa o email da empresa ou string vazia\r\n+            payer_email: company.email || ''\r\n         };\r\n \r\n         const preapproval = new PreApproval(client);\r\n         console.log(`[MP DEBUG] Tentando criar PreApproval no Mercado Pago para ${company.nomeEmpresa}...`);\r\n@@ -47,9 +47,9 @@\n         if (response.id) {\r\n             company.subscription.mercadopagoPreapprovalId = response.id;\r\n             // Se o status da assinatura for 'inactive' ou null, defina-o como 'pending_approval' após a criação do link\r\n             if (!company.subscription.status || company.subscription.status === 'inactive') {\r\n-                 company.subscription.status = 'pending_approval';\r\n+                 company.subscription.status = 'pending_approval'; //\r\n             }\r\n             await company.save();\r\n             console.log(`[MP DEBUG] Preapproval ID ${response.id} salvo para a empresa ${company.nomeEmpresa}. Status da assinatura atualizado para: ${company.subscription.status}`);\r\n         }\r\n@@ -66,8 +66,9 @@\n // Rota para receber notificações (webhooks) do Mercado Pago (pública)\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n     console.log('[MP WEBHOOK] Webhook recebido:', JSON.stringify(notification, null, 2));\r\n+    console.log(`[MP WEBHOOK DEBUG] Tipo de Notificação: ${notification.type}, Data ID: ${notification.data.id}`); //\r\n \r\n     try {\r\n         const masterDb = getMasterConnection();\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n@@ -76,106 +77,107 @@\n         let notificationStatus = null; // Para guardar o status relevante da notificação/detalhes\r\n         let nextPaymentDate = null;\r\n         let webhookProcessed = false; // Flag para indicar se o webhook foi processado\r\n \r\n-        console.log(`[MP WEBHOOK DEBUG] Tipo de Notificação: ${notification.type}, Data ID: ${notification.data.id}`);\r\n-\r\n         // Lógica para determinar o preapprovalId, status e próxima data de pagamento com base no tipo de notificação\r\n         if (notification.type === 'payment') {\r\n             // Notificação de um pagamento (pode ser o primeiro pagamento da recorrência ou pagamentos subsequentes)\r\n             const paymentId = notification.data.id;\r\n-            console.log(`[MP WEBHOOK DEBUG] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`);\r\n+            console.log(`[MP WEBHOOK DEBUG] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`); //\r\n             \r\n             const payment = new Payment(client);\r\n             const paymentDetails = await payment.get({ id: paymentId });\r\n             notificationStatus = paymentDetails.status;\r\n             preapprovalId = paymentDetails.preapproval_id; // Pega o ID da pré-aprovação do pagamento\r\n \r\n-            console.log(`[MP WEBHOOK DEBUG] Detalhes do pagamento ${paymentId}: Status -> ${notificationStatus}, Preapproval ID -> ${preapprovalId}`);\r\n+            console.log(`[MP WEBHOOK DEBUG] Detalhes do pagamento ${paymentId}: Status -> ${notificationStatus}, Preapproval ID -> ${preapprovalId}`); //\r\n \r\n             // Se for um pagamento recorrente e aprovado, tenta buscar a data do próximo pagamento da pré-aprovação\r\n             if (preapprovalId && notificationStatus === 'approved') {\r\n+                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Payment approved. Attempting to fetch preapproval details for ID: ${preapprovalId}`); //\r\n                 try {\r\n                     const preapprovalDetails = await new PreApproval(client).get({ id: preapprovalId });\r\n                     nextPaymentDate = preapprovalDetails.next_payment_date;\r\n-                    console.log(`[MP WEBHOOK DEBUG] Preapproval Details (via payment): Status -> ${preapprovalDetails.status}, Próximo pagamento -> ${nextPaymentDate}`);\r\n+                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Preapproval Details (via payment): Status -> ${preapprovalDetails.status}, Próximo pagamento -> ${nextPaymentDate}`); //\r\n                 } catch (preapprovalError) {\r\n-                    console.error(`[MP WEBHOOK ERROR] Erro ao buscar detalhes da pré-aprovação ${preapprovalId} após pagamento:`, preapprovalError);\r\n+                    console.error(`[MP WEBHOOK ERROR] Erro ao buscar detalhes da pré-aprovação ${preapprovalId} após pagamento:`, preapprovalError); //\r\n                 }\r\n+            } else {\r\n+                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Payment not approved or preapprovalId missing. Status: ${notificationStatus}, Preapproval ID: ${preapprovalId}`); //\r\n             }\r\n             webhookProcessed = true;\r\n \r\n         } else if (notification.type === 'preapproval' || notification.type === 'subscription_authorized_payment') {\r\n             // Notificação direta de uma pré-aprovação (assinatura)\r\n             preapprovalId = notification.data.id;\r\n-            console.log(`[MP WEBHOOK DEBUG] Tipo 'preapproval' ou 'subscription_authorized_payment' recebido. ID da pré-aprovação: ${preapprovalId}`);\r\n+            console.log(`[MP WEBHOOK DEBUG] Tipo 'preapproval' ou 'subscription_authorized_payment' recebido. ID da pré-aprovação: ${preapprovalId}`); //\r\n             \r\n             const preapproval = new PreApproval(client);\r\n             const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n             notificationStatus = subscriptionDetails.status; // Pode ser 'authorized', 'pending', 'active', etc.\r\n             nextPaymentDate = subscriptionDetails.next_payment_date;\r\n \r\n-            console.log(`[MP WEBHOOK DEBUG] Detalhes da pré-aprovação ${preapprovalId}: Status -> ${notificationStatus}, Próximo pagamento -> ${nextPaymentDate}`);\r\n+            console.log(`[MP WEBHOOK DEBUG] Detalhes da pré-aprovação ${preapprovalId}: Status -> ${notificationStatus}, Próximo pagamento -> ${nextPaymentDate}`); //\r\n             webhookProcessed = true;\r\n \r\n         } else {\r\n-            console.log(`[MP WEBHOOK DEBUG] Tipo de notificação desconhecido ou não relevante para ativação de assinatura: ${notification.type}`);\r\n+            console.log(`[MP WEBHOOK DEBUG] Tipo de notificação desconhecido ou não relevante para ativação de assinatura: ${notification.type}`); //\r\n             // Nenhuma ação necessária, apenas retorna 200 OK para o Mercado Pago\r\n             return res.sendStatus(200); \r\n         }\r\n \r\n         // --- Lógica principal de atualização da assinatura ---\r\n         // Procede APENAS se um preapprovalId foi identificado E o status indica sucesso/ativação\r\n         if (webhookProcessed && preapprovalId && (notificationStatus === 'approved' || notificationStatus === 'authorized' || notificationStatus === 'active')) {\r\n-            console.log(`[MP WEBHOOK] Processando Preapproval ID: ${preapprovalId} com status relevante: ${notificationStatus}`);\r\n+            console.log(`[MP WEBHOOK] Processando Preapproval ID: ${preapprovalId} com status relevante: ${notificationStatus}`); //\r\n             const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n             \r\n             if (company) {\r\n-                console.log(`[MP WEBHOOK] Empresa encontrada: ${company.nomeEmpresa}. Status atual da assinatura: ${company.subscription.status}`);\r\n+                console.log(`[MP WEBHOOK] Empresa encontrada: ${company.nomeEmpresa}. Status atual da assinatura: ${company.subscription.status}`); //\r\n                 \r\n                 const currentEndDate = company.subscription.endDate;\r\n                 let shouldUpdate = false;\r\n \r\n                 // Verifica se o status precisa ser alterado para 'active'\r\n                 if (company.subscription.status !== 'active') {\r\n                     shouldUpdate = true;\r\n-                    console.log(`[MP WEBHOOK] Status da assinatura de ${company.nomeEmpresa} mudando de '${company.subscription.status}' para 'active'.`);\r\n+                    console.log(`[MP WEBHOOK] Status da assinatura de ${company.nomeEmpresa} mudando de '${company.subscription.status}' para 'active'.`); //\r\n                 }\r\n \r\n                 // Verifica se a data de término precisa ser atualizada\r\n                 // (Se houver uma nextPaymentDate E ela for posterior à data atual de término)\r\n                 if (nextPaymentDate && (!currentEndDate || new Date(nextPaymentDate) > new Date(currentEndDate))) {\r\n                     shouldUpdate = true;\r\n-                    console.log(`[MP WEBHOOK] Data de término da assinatura de ${company.nomeEmpresa} será atualizada para ${nextPaymentDate}.`);\r\n+                    console.log(`[MP WEBHOOK] Data de término da assinatura de ${company.nomeEmpresa} será atualizada para ${nextPaymentDate}.`); //\r\n                 } else if (!nextPaymentDate && notificationStatus === 'active') {\r\n                     // Caso não haja nextPaymentDate, mas o status seja 'active', garante uma data futura (ex: 30 dias)\r\n                     // Isso é um fallback, idealmente next_payment_date sempre viria.\r\n                     if (!currentEndDate || new Date(currentEndDate) < new Date()) {\r\n                         shouldUpdate = true;\r\n                         nextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // Adiciona 30 dias a partir de agora\r\n-                        console.log(`[MP WEBHOOK] Definindo data de término padrão (30 dias) para ${company.nomeEmpresa} pois nextPaymentDate não foi fornecido.`);\r\n+                        console.log(`[MP WEBHOOK] Definindo data de término padrão (30 dias) para ${company.nomeEmpresa} pois nextPaymentDate não foi fornecido.`); //\r\n                     }\r\n                 }\r\n \r\n                 if (shouldUpdate) {\r\n                     company.subscription.status = 'active';\r\n                     company.subscription.endDate = nextPaymentDate ? new Date(nextPaymentDate) : company.subscription.endDate; // Usa a nova data ou mantém a existente\r\n                     await company.save();\r\n-                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} ATIVADA/ATUALIZADA. Novo status: '${company.subscription.status}', Nova data de término: '${company.subscription.endDate ? company.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}'`);\r\n+                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} ATIVADA/ATUALIZADA. Novo status: '${company.subscription.status}', Nova data de término: '${company.subscription.endDate ? company.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}'`); //\r\n                 } else {\r\n-                    console.log(`[MP WEBHOOK] Assinatura da empresa ${company.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação necessária.`);\r\n+                    console.log(`[MP WEBHOOK] Assinatura da empresa ${company.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação necessária.`); //\r\n                 }\r\n             } else {\r\n-                console.log(`[MP WEBHOOK] Empresa NÃO encontrada para o preapprovalId: ${preapprovalId}. Verifique se o ID está salvo corretamente.`);\r\n+                console.log(`[MP WEBHOOK] Empresa NÃO encontrada para o preapprovalId: ${preapprovalId}. Verifique se o ID está salvo corretamente.`); //\r\n             }\r\n         } else if (webhookProcessed) {\r\n-            console.log(`[MP WEBHOOK] Notificação processada, mas não resultou em ativação. Preapproval ID: ${preapprovalId}, Status: ${notificationStatus}`);\r\n+            console.log(`[MP WEBHOOK] Notificação processada, mas não resultou em ativação. Preapproval ID: ${preapprovalId}, Status: ${notificationStatus}`); //\r\n         }\r\n         \r\n         res.sendStatus(200);\r\n \r\n     } catch (error) {\r\n-        console.error('Erro ao processar webhook do Mercado Pago:', error);\r\n+        console.error('Erro ao processar webhook do Mercado Pago:', error); //\r\n         res.sendStatus(500);\r\n     }\r\n });\r\n \r\n"
                },
                {
                    "date": 1753560985410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n                 transaction_amount: 40.00,\r\n                 currency_id: 'BRL'\r\n             },\r\n             back_url: 'http://127.0.0.1:5500/OrgBoletos.html',\r\n-            payer_email: company.email || ''\r\n+            payer_email: company.email || '' // Usa o email da empresa ou string vazia\r\n         };\r\n \r\n         const preapproval = new PreApproval(client);\r\n         console.log(`[MP DEBUG] Tentando criar PreApproval no Mercado Pago para ${company.nomeEmpresa}...`);\r\n@@ -66,118 +66,120 @@\n // Rota para receber notificações (webhooks) do Mercado Pago (pública)\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n     console.log('[MP WEBHOOK] Webhook recebido:', JSON.stringify(notification, null, 2));\r\n-    console.log(`[MP WEBHOOK DEBUG] Tipo de Notificação: ${notification.type}, Data ID: ${notification.data.id}`); //\r\n+    console.log(`[MP WEBHOOK DEBUG] Tipo de Notificação: ${notification.type}, Data ID: ${notification.data.id}`);\r\n \r\n     try {\r\n         const masterDb = getMasterConnection();\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n \r\n-        let preapprovalId = null;\r\n-        let notificationStatus = null; // Para guardar o status relevante da notificação/detalhes\r\n-        let nextPaymentDate = null;\r\n-        let webhookProcessed = false; // Flag para indicar se o webhook foi processado\r\n+        let preapprovalIdFromWebhook = null; // ID da pré-aprovação vindo da notificação\r\n+        let statusFromMercadoPago = null;    // Status retornado diretamente da API do MP ao consultar\r\n+        let effectiveNextPaymentDate = null; // Próxima data de pagamento efetiva\r\n+        let webhookHandled = false;          // Flag para saber se o webhook foi processado pela lógica abaixo\r\n \r\n-        // Lógica para determinar o preapprovalId, status e próxima data de pagamento com base no tipo de notificação\r\n+        // Processa diferentes tipos de notificação\r\n         if (notification.type === 'payment') {\r\n-            // Notificação de um pagamento (pode ser o primeiro pagamento da recorrência ou pagamentos subsequentes)\r\n             const paymentId = notification.data.id;\r\n-            console.log(`[MP WEBHOOK DEBUG] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`); //\r\n+            console.log(`[MP WEBHOOK DEBUG - PAYMENT] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`);\r\n             \r\n-            const payment = new Payment(client);\r\n-            const paymentDetails = await payment.get({ id: paymentId });\r\n-            notificationStatus = paymentDetails.status;\r\n-            preapprovalId = paymentDetails.preapproval_id; // Pega o ID da pré-aprovação do pagamento\r\n+            try {\r\n+                const payment = new Payment(client);\r\n+                const paymentDetails = await payment.get({ id: paymentId });\r\n+                statusFromMercadoPago = paymentDetails.status;\r\n+                preapprovalIdFromWebhook = paymentDetails.preapproval_id; // Este é o ID da pré-aprovação associado ao pagamento\r\n+                \r\n+                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes do pagamento ${paymentId}: Status -> ${statusFromMercadoPago}, Preapproval ID -> ${preapprovalIdFromWebhook}`);\r\n \r\n-            console.log(`[MP WEBHOOK DEBUG] Detalhes do pagamento ${paymentId}: Status -> ${notificationStatus}, Preapproval ID -> ${preapprovalId}`); //\r\n-\r\n-            // Se for um pagamento recorrente e aprovado, tenta buscar a data do próximo pagamento da pré-aprovação\r\n-            if (preapprovalId && notificationStatus === 'approved') {\r\n-                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Payment approved. Attempting to fetch preapproval details for ID: ${preapprovalId}`); //\r\n-                try {\r\n-                    const preapprovalDetails = await new PreApproval(client).get({ id: preapprovalId });\r\n-                    nextPaymentDate = preapprovalDetails.next_payment_date;\r\n-                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Preapproval Details (via payment): Status -> ${preapprovalDetails.status}, Próximo pagamento -> ${nextPaymentDate}`); //\r\n-                } catch (preapprovalError) {\r\n-                    console.error(`[MP WEBHOOK ERROR] Erro ao buscar detalhes da pré-aprovação ${preapprovalId} após pagamento:`, preapprovalError); //\r\n+                if (preapprovalIdFromWebhook && statusFromMercadoPago === 'approved') {\r\n+                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento APROVADO. Buscando detalhes da pré-aprovação ${preapprovalIdFromWebhook}...`);\r\n+                    const preapprovalDetails = await new PreApproval(client).get({ id: preapprovalIdFromWebhook });\r\n+                    effectiveNextPaymentDate = preapprovalDetails.next_payment_date;\r\n+                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes da Pré-aprovação: Status -> ${preapprovalDetails.status}, Próximo pagamento -> ${effectiveNextPaymentDate}`);\r\n+                    statusFromMercadoPago = preapprovalDetails.status; // Atualiza o status para o da pré-aprovação, que pode ser 'active' ou 'authorized'\r\n+                } else {\r\n+                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento não aprovado ou Preapproval ID ausente para ID ${paymentId}. Status: ${statusFromMercadoPago}`);\r\n                 }\r\n-            } else {\r\n-                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Payment not approved or preapprovalId missing. Status: ${notificationStatus}, Preapproval ID: ${preapprovalId}`); //\r\n+            } catch (error) {\r\n+                console.error(`[MP WEBHOOK ERROR - PAYMENT] Erro ao buscar detalhes do pagamento ${paymentId} ou pré-aprovação:`, error);\r\n             }\r\n-            webhookProcessed = true;\r\n+            webhookHandled = true;\r\n \r\n         } else if (notification.type === 'preapproval' || notification.type === 'subscription_authorized_payment') {\r\n-            // Notificação direta de uma pré-aprovação (assinatura)\r\n-            preapprovalId = notification.data.id;\r\n-            console.log(`[MP WEBHOOK DEBUG] Tipo 'preapproval' ou 'subscription_authorized_payment' recebido. ID da pré-aprovação: ${preapprovalId}`); //\r\n+            preapprovalIdFromWebhook = notification.data.id;\r\n+            console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Tipo 'preapproval' ou 'subscription_authorized_payment' recebido. ID da pré-aprovação: ${preapprovalIdFromWebhook}`);\r\n             \r\n-            const preapproval = new PreApproval(client);\r\n-            const subscriptionDetails = await preapproval.get({ id: preapprovalId });\r\n-            notificationStatus = subscriptionDetails.status; // Pode ser 'authorized', 'pending', 'active', etc.\r\n-            nextPaymentDate = subscriptionDetails.next_payment_date;\r\n-\r\n-            console.log(`[MP WEBHOOK DEBUG] Detalhes da pré-aprovação ${preapprovalId}: Status -> ${notificationStatus}, Próximo pagamento -> ${nextPaymentDate}`); //\r\n-            webhookProcessed = true;\r\n-\r\n+            try {\r\n+                const preapproval = new PreApproval(client);\r\n+                const subscriptionDetails = await preapproval.get({ id: preapprovalIdFromWebhook });\r\n+                statusFromMercadoPago = subscriptionDetails.status;\r\n+                effectiveNextPaymentDate = subscriptionDetails.next_payment_date;\r\n+                console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Detalhes da Pré-aprovação ${preapprovalIdFromWebhook}: Status -> ${statusFromMercadoPago}, Próximo pagamento -> ${effectiveNextPaymentDate}`);\r\n+            } catch (error) {\r\n+                console.error(`[MP WEBHOOK ERROR - PREAPPROVAL] Erro ao buscar detalhes da pré-aprovação ${preapprovalIdFromWebhook}:`, error);\r\n+            }\r\n+            webhookHandled = true;\r\n         } else {\r\n-            console.log(`[MP WEBHOOK DEBUG] Tipo de notificação desconhecido ou não relevante para ativação de assinatura: ${notification.type}`); //\r\n-            // Nenhuma ação necessária, apenas retorna 200 OK para o Mercado Pago\r\n+            console.log(`[MP WEBHOOK DEBUG] Tipo de notificação desconhecido ou não relevante: ${notification.type}`);\r\n             return res.sendStatus(200); \r\n         }\r\n \r\n         // --- Lógica principal de atualização da assinatura ---\r\n-        // Procede APENAS se um preapprovalId foi identificado E o status indica sucesso/ativação\r\n-        if (webhookProcessed && preapprovalId && (notificationStatus === 'approved' || notificationStatus === 'authorized' || notificationStatus === 'active')) {\r\n-            console.log(`[MP WEBHOOK] Processando Preapproval ID: ${preapprovalId} com status relevante: ${notificationStatus}`); //\r\n-            const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+        // Procede APENAS se o webhook foi processado e identificou um preapprovalId\r\n+        // e o status do Mercado Pago indica sucesso/ativação.\r\n+        if (webhookHandled && preapprovalIdFromWebhook && (statusFromMercadoPago === 'approved' || statusFromMercadoPago === 'authorized' || statusFromMercadoPago === 'active')) {\r\n+            console.log(`[MP WEBHOOK] Tentando atualizar assinatura para Preapproval ID: ${preapprovalIdFromWebhook} com status relevante: ${statusFromMercadoPago}`);\r\n+            const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalIdFromWebhook });\r\n             \r\n             if (company) {\r\n-                console.log(`[MP WEBHOOK] Empresa encontrada: ${company.nomeEmpresa}. Status atual da assinatura: ${company.subscription.status}`); //\r\n+                console.log(`[MP WEBHOOK] Empresa encontrada: ${company.nomeEmpresa}. Status atual da assinatura no DB: ${company.subscription.status}`);\r\n                 \r\n-                const currentEndDate = company.subscription.endDate;\r\n+                const currentDbEndDate = company.subscription.endDate;\r\n                 let shouldUpdate = false;\r\n \r\n-                // Verifica se o status precisa ser alterado para 'active'\r\n+                // Condição para mudar o status para 'active'\r\n                 if (company.subscription.status !== 'active') {\r\n                     shouldUpdate = true;\r\n-                    console.log(`[MP WEBHOOK] Status da assinatura de ${company.nomeEmpresa} mudando de '${company.subscription.status}' para 'active'.`); //\r\n+                    console.log(`[MP WEBHOOK] Status da assinatura de ${company.nomeEmpresa} mudará para 'active'.`);\r\n                 }\r\n \r\n-                // Verifica se a data de término precisa ser atualizada\r\n-                // (Se houver uma nextPaymentDate E ela for posterior à data atual de término)\r\n-                if (nextPaymentDate && (!currentEndDate || new Date(nextPaymentDate) > new Date(currentEndDate))) {\r\n+                // Condição para atualizar a data de término\r\n+                // Apenas atualiza se effectiveNextPaymentDate existir E for posterior à data atual no DB\r\n+                if (effectiveNextPaymentDate && (!currentDbEndDate || new Date(effectiveNextPaymentDate) > new Date(currentDbEndDate))) {\r\n                     shouldUpdate = true;\r\n-                    console.log(`[MP WEBHOOK] Data de término da assinatura de ${company.nomeEmpresa} será atualizada para ${nextPaymentDate}.`); //\r\n-                } else if (!nextPaymentDate && notificationStatus === 'active') {\r\n-                    // Caso não haja nextPaymentDate, mas o status seja 'active', garante uma data futura (ex: 30 dias)\r\n-                    // Isso é um fallback, idealmente next_payment_date sempre viria.\r\n-                    if (!currentEndDate || new Date(currentEndDate) < new Date()) {\r\n+                    console.log(`[MP WEBHOOK] Data de término da assinatura de ${company.nomeEmpresa} será atualizada para ${effectiveNextPaymentDate}.`);\r\n+                } else if (!effectiveNextPaymentDate && statusFromMercadoPago === 'active') {\r\n+                    // Fallback: Se o Mercado Pago diz que está 'active' mas não deu nextPaymentDate, e a data no DB está vencida/nula\r\n+                    if (!currentDbEndDate || new Date(currentDbEndDate) < new Date()) {\r\n                         shouldUpdate = true;\r\n-                        nextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // Adiciona 30 dias a partir de agora\r\n-                        console.log(`[MP WEBHOOK] Definindo data de término padrão (30 dias) para ${company.nomeEmpresa} pois nextPaymentDate não foi fornecido.`); //\r\n+                        effectiveNextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // Define 30 dias a partir de agora\r\n+                        console.log(`[MP WEBHOOK] Definindo data de término padrão (30 dias) para ${company.nomeEmpresa} como fallback.`);\r\n                     }\r\n                 }\r\n \r\n                 if (shouldUpdate) {\r\n                     company.subscription.status = 'active';\r\n-                    company.subscription.endDate = nextPaymentDate ? new Date(nextPaymentDate) : company.subscription.endDate; // Usa a nova data ou mantém a existente\r\n+                    company.subscription.endDate = effectiveNextPaymentDate ? new Date(effectiveNextPaymentDate) : company.subscription.endDate; \r\n                     await company.save();\r\n-                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} ATIVADA/ATUALIZADA. Novo status: '${company.subscription.status}', Nova data de término: '${company.subscription.endDate ? company.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}'`); //\r\n+                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} ATIVADA/ATUALIZADA.`);\r\n+                    console.log(`[MP WEBHOOK DEBUG] Novo Status salvo no DB: ${company.subscription.status}`);\r\n+                    console.log(`[MP WEBHOOK DEBUG] Nova Data de Término salva no DB: ${company.subscription.endDate ? company.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}`);\r\n                 } else {\r\n-                    console.log(`[MP WEBHOOK] Assinatura da empresa ${company.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação necessária.`); //\r\n+                    console.log(`[MP WEBHOOK] Assinatura da empresa ${company.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação no DB.`);\r\n                 }\r\n             } else {\r\n-                console.log(`[MP WEBHOOK] Empresa NÃO encontrada para o preapprovalId: ${preapprovalId}. Verifique se o ID está salvo corretamente.`); //\r\n+                console.log(`[MP WEBHOOK] Empresa NÃO encontrada no DB para o mercadopagoPreapprovalId: ${preapprovalIdFromWebhook}.`);\r\n             }\r\n-        } else if (webhookProcessed) {\r\n-            console.log(`[MP WEBHOOK] Notificação processada, mas não resultou em ativação. Preapproval ID: ${preapprovalId}, Status: ${notificationStatus}`); //\r\n+        } else if (webhookHandled) {\r\n+            console.log(`[MP WEBHOOK] Notificação processada, mas NÃO resultou em ativação (status não relevante ou preapprovalId ausente).`);\r\n+            console.log(`[MP WEBHOOK] Preapproval ID: ${preapprovalIdFromWebhook}, Status: ${statusFromMercadoPago}`);\r\n         }\r\n         \r\n         res.sendStatus(200);\r\n \r\n     } catch (error) {\r\n-        console.error('Erro ao processar webhook do Mercado Pago:', error); //\r\n+        console.error('Erro geral no processamento do webhook do Mercado Pago:', error);\r\n         res.sendStatus(500);\r\n     }\r\n });\r\n \r\n"
                },
                {
                    "date": 1753562516391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,108 +72,138 @@\n     try {\r\n         const masterDb = getMasterConnection();\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n \r\n-        let preapprovalIdFromWebhook = null; // ID da pré-aprovação vindo da notificação\r\n-        let statusFromMercadoPago = null;    // Status retornado diretamente da API do MP ao consultar\r\n-        let effectiveNextPaymentDate = null; // Próxima data de pagamento efetiva\r\n-        let webhookHandled = false;          // Flag para saber se o webhook foi processado pela lógica abaixo\r\n+        let preapprovalIdFromNotification = null; // O ID da pré-aprovação se estiver diretamente na notificação\r\n+        let paymentIdFromNotification = null; // O ID do pagamento se for uma notificação de payment\r\n \r\n-        // Processa diferentes tipos de notificação\r\n-        if (notification.type === 'payment') {\r\n-            const paymentId = notification.data.id;\r\n-            console.log(`[MP WEBHOOK DEBUG - PAYMENT] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`);\r\n-            \r\n+        // 1. Tentar extrair o preapprovalId ou paymentId da notificação\r\n+        if (notification.type === 'payment' && notification.data && notification.data.id) {\r\n+            paymentIdFromNotification = notification.data.id;\r\n+            console.log(`[MP WEBHOOK DEBUG] Identificado webhook de pagamento. ID do pagamento: ${paymentIdFromNotification}`);\r\n+        } else if ((notification.type === 'preapproval' || notification.type === 'subscription_authorized_payment') && notification.data && notification.data.id) {\r\n+            // Para 'preapproval' e 'subscription_authorized_payment', o data.id é o preapprovalId ou o ID do authorized_payment\r\n+            // Vamos assumir que data.id é o preapprovalId para o tipo 'preapproval'.\r\n+            // Para 'subscription_authorized_payment', como vimos, data.id NÃO é o preapprovalId.\r\n+            // Precisaremos buscar a empresa pelo preapprovalId salvo.\r\n+            preapprovalIdFromNotification = notification.data.id; \r\n+            console.log(`[MP WEBHOOK DEBUG] Identificado webhook de pré-aprovação/autorização. ID: ${preapprovalIdFromNotification}`);\r\n+        } else {\r\n+            console.log(`[MP WEBHOOK DEBUG] Tipo de notificação não relevante ou ID não encontrado: ${notification.type}`);\r\n+            return res.sendStatus(200);\r\n+        }\r\n+\r\n+        let companyToUpdate = null;\r\n+        let finalPreapprovalId = null;\r\n+        let finalStatusFromMP = null;\r\n+        let finalNextPaymentDate = null;\r\n+\r\n+        // 2. Se for um webhook de pagamento, buscar detalhes do pagamento e o preapproval_id associado\r\n+        if (paymentIdFromNotification) {\r\n             try {\r\n                 const payment = new Payment(client);\r\n-                const paymentDetails = await payment.get({ id: paymentId });\r\n-                statusFromMercadoPago = paymentDetails.status;\r\n-                preapprovalIdFromWebhook = paymentDetails.preapproval_id; // Este é o ID da pré-aprovação associado ao pagamento\r\n-                \r\n-                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes do pagamento ${paymentId}: Status -> ${statusFromMercadoPago}, Preapproval ID -> ${preapprovalIdFromWebhook}`);\r\n+                const paymentDetails = await payment.get({ id: paymentIdFromNotification });\r\n+                finalStatusFromMP = paymentDetails.status;\r\n+                finalPreapprovalId = paymentDetails.preapproval_id; // Este é o link crucial para a assinatura\r\n+                console.log(`[MP WEBHOOK DEBUG] Detalhes do Pagamento ${paymentIdFromNotification}: Status -> ${finalStatusFromMP}, Preapproval ID -> ${finalPreapprovalId}`);\r\n \r\n-                if (preapprovalIdFromWebhook && statusFromMercadoPago === 'approved') {\r\n-                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento APROVADO. Buscando detalhes da pré-aprovação ${preapprovalIdFromWebhook}...`);\r\n-                    const preapprovalDetails = await new PreApproval(client).get({ id: preapprovalIdFromWebhook });\r\n-                    effectiveNextPaymentDate = preapprovalDetails.next_payment_date;\r\n-                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes da Pré-aprovação: Status -> ${preapprovalDetails.status}, Próximo pagamento -> ${effectiveNextPaymentDate}`);\r\n-                    statusFromMercadoPago = preapprovalDetails.status; // Atualiza o status para o da pré-aprovação, que pode ser 'active' ou 'authorized'\r\n-                } else {\r\n-                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento não aprovado ou Preapproval ID ausente para ID ${paymentId}. Status: ${statusFromMercadoPago}`);\r\n+                // Se o pagamento foi aprovado E conseguimos o preapprovalId, buscamos os detalhes da pré-aprovação para a data\r\n+                if (finalPreapprovalId && finalStatusFromMP === 'approved') {\r\n+                    const preapproval = new PreApproval(client);\r\n+                    const preapprovalDetails = await preapproval.get({ id: finalPreapprovalId });\r\n+                    finalNextPaymentDate = preapprovalDetails.next_payment_date;\r\n+                    finalStatusFromMP = preapprovalDetails.status; // Atualiza para o status da pré-aprovação (pode ser 'active')\r\n+                    console.log(`[MP WEBHOOK DEBUG] Detalhes da Pré-aprovação ${finalPreapprovalId} (via pagamento): Status -> ${finalStatusFromMP}, Próximo pagamento -> ${finalNextPaymentDate}`);\r\n                 }\r\n             } catch (error) {\r\n-                console.error(`[MP WEBHOOK ERROR - PAYMENT] Erro ao buscar detalhes do pagamento ${paymentId} ou pré-aprovação:`, error);\r\n+                console.error(`[MP WEBHOOK ERROR] Erro ao buscar detalhes do pagamento ${paymentIdFromNotification}:`, error);\r\n+                // Continua o fluxo mesmo com erro, pode ser que a empresa seja encontrada pelo preapprovalId salva no DB\r\n             }\r\n-            webhookHandled = true;\r\n-\r\n-        } else if (notification.type === 'preapproval' || notification.type === 'subscription_authorized_payment') {\r\n-            preapprovalIdFromWebhook = notification.data.id;\r\n-            console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Tipo 'preapproval' ou 'subscription_authorized_payment' recebido. ID da pré-aprovação: ${preapprovalIdFromWebhook}`);\r\n-            \r\n-            try {\r\n+        } \r\n+        \r\n+        // 3. Se for uma notificação direta de pré-aprovação, buscar seus detalhes (e tentar pegar o Preapproval ID real)\r\n+        // Isso é para o tipo 'preapproval'. Para 'subscription_authorized_payment' ele falhará ao buscar por ID, mas continuaremos a procurar no DB.\r\n+        else if (preapprovalIdFromNotification) { // Isso cobre 'preapproval' diretamente e 'subscription_authorized_payment' (onde data.id não é preapprovalId)\r\n+             try {\r\n                 const preapproval = new PreApproval(client);\r\n-                const subscriptionDetails = await preapproval.get({ id: preapprovalIdFromWebhook });\r\n-                statusFromMercadoPago = subscriptionDetails.status;\r\n-                effectiveNextPaymentDate = subscriptionDetails.next_payment_date;\r\n-                console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Detalhes da Pré-aprovação ${preapprovalIdFromWebhook}: Status -> ${statusFromMercadoPago}, Próximo pagamento -> ${effectiveNextPaymentDate}`);\r\n+                const preapprovalDetails = await preapproval.get({ id: preapprovalIdFromNotification });\r\n+                finalStatusFromMP = preapprovalDetails.status;\r\n+                finalNextPaymentDate = preapprovalDetails.next_payment_date;\r\n+                finalPreapprovalId = preapprovalDetails.id; // Garante que pegamos o ID correto da API do MP\r\n+                console.log(`[MP WEBHOOK DEBUG] Detalhes da Pré-aprovação ${finalPreapprovalId} (via notificação direta): Status -> ${finalStatusFromMP}, Próximo pagamento -> ${finalNextPaymentDate}`);\r\n             } catch (error) {\r\n-                console.error(`[MP WEBHOOK ERROR - PREAPPROVAL] Erro ao buscar detalhes da pré-aprovação ${preapprovalIdFromWebhook}:`, error);\r\n+                console.error(`[MP WEBHOOK ERROR] Erro ao buscar detalhes da pré-aprovação ${preapprovalIdFromNotification} (direta):`, error);\r\n+                // Se a notificação for 'subscription_authorized_payment', este 'get' falhará (status 400).\r\n+                // Precisamos então encontrar a empresa pelo preapprovalId salvo.\r\n+                finalPreapprovalId = preapprovalIdFromNotification; // Mantém o ID da notificação para tentar a busca no DB\r\n             }\r\n-            webhookHandled = true;\r\n-        } else {\r\n-            console.log(`[MP WEBHOOK DEBUG] Tipo de notificação desconhecido ou não relevante: ${notification.type}`);\r\n-            return res.sendStatus(200); \r\n         }\r\n \r\n-        // --- Lógica principal de atualização da assinatura ---\r\n-        // Procede APENAS se o webhook foi processado e identificou um preapprovalId\r\n-        // e o status do Mercado Pago indica sucesso/ativação.\r\n-        if (webhookHandled && preapprovalIdFromWebhook && (statusFromMercadoPago === 'approved' || statusFromMercadoPago === 'authorized' || statusFromMercadoPago === 'active')) {\r\n-            console.log(`[MP WEBHOOK] Tentando atualizar assinatura para Preapproval ID: ${preapprovalIdFromWebhook} com status relevante: ${statusFromMercadoPago}`);\r\n-            const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalIdFromWebhook });\r\n+\r\n+        // 4. Encontrar a empresa no seu DB usando o mercadopagoPreapprovalId\r\n+        if (finalPreapprovalId) {\r\n+            companyToUpdate = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': finalPreapprovalId });\r\n+            if (!companyToUpdate) {\r\n+                // Se não encontrou pelo finalPreapprovalId, talvez a notificação tenha um ID \"temporário\" ou não seja o que salvamos.\r\n+                // Tenta buscar a empresa pelo 'mercadopagoPreapprovalId' da **última assinatura criada** para o caso de um webhook de 'payment.created'\r\n+                // vir sem preapproval_id no paymentDetails e a notificação de 'subscription_authorized_payment' ter um ID diferente.\r\n+                // Esta é uma medida de segurança, mas a correta é a do passo 2.\r\n+                console.log(`[MP WEBHOOK DEBUG] Empresa não encontrada pelo finalPreapprovalId: ${finalPreapprovalId}. Tentando buscar por notificações recentes...`);\r\n+                // Este passo é complexo e menos confiável. Idealmente, o preapprovalId viria.\r\n+                // Por agora, vamos pular este fallback complexo e focar no primary flow.\r\n+            }\r\n+        } else if (paymentIdFromNotification) {\r\n+            // Última tentativa: se é um webhook de pagamento e não temos preapprovalId,\r\n+            // vamos buscar a empresa que está em pending_approval e tem o application_id da notificação.\r\n+            // (Assumindo que o application_id do Mercado Pago corresponde à sua integração).\r\n+            // Isso é um chute, dependendo de como você configurou a sua aplicação MP.\r\n+            // NOTA: Esta lógica é um PALPITE, pois não temos o application_id salvo no seu MasterCompany.\r\n+            // O IDEAL É TER SEMPRE o 'preapproval_id' vindo no paymentDetails.\r\n+            console.log(`[MP WEBHOOK DEBUG] No preapprovalId. Tentando encontrar empresa pelo paymentId ou action: ${paymentIdFromNotification}`);\r\n+            // Removendo lógica complexa de busca por `action` ou `application_id` por enquanto.\r\n+            // O foco é garantir que `finalPreapprovalId` seja preenchido.\r\n+        }\r\n+\r\n+\r\n+        // 5. Se a empresa foi encontrada e o status do Mercado Pago é de sucesso\r\n+        if (companyToUpdate && (finalStatusFromMP === 'approved' || finalStatusFromMP === 'authorized' || finalStatusFromMP === 'active')) {\r\n+            console.log(`[MP WEBHOOK] Processando atualização para empresa ${companyToUpdate.nomeEmpresa}. Status MP: ${finalStatusFromMP}, Próximo pagamento: ${finalNextPaymentDate}`);\r\n             \r\n-            if (company) {\r\n-                console.log(`[MP WEBHOOK] Empresa encontrada: ${company.nomeEmpresa}. Status atual da assinatura no DB: ${company.subscription.status}`);\r\n-                \r\n-                const currentDbEndDate = company.subscription.endDate;\r\n-                let shouldUpdate = false;\r\n+            let shouldUpdate = false;\r\n \r\n-                // Condição para mudar o status para 'active'\r\n-                if (company.subscription.status !== 'active') {\r\n-                    shouldUpdate = true;\r\n-                    console.log(`[MP WEBHOOK] Status da assinatura de ${company.nomeEmpresa} mudará para 'active'.`);\r\n-                }\r\n+            // Condição para mudar o status para 'active'\r\n+            if (companyToUpdate.subscription.status !== 'active') {\r\n+                shouldUpdate = true;\r\n+                console.log(`[MP WEBHOOK] Status DB '${companyToUpdate.subscription.status}' mudará para 'active'.`);\r\n+            }\r\n \r\n-                // Condição para atualizar a data de término\r\n-                // Apenas atualiza se effectiveNextPaymentDate existir E for posterior à data atual no DB\r\n-                if (effectiveNextPaymentDate && (!currentDbEndDate || new Date(effectiveNextPaymentDate) > new Date(currentDbEndDate))) {\r\n+            // Condição para atualizar a data de término\r\n+            // (Apenas se finalNextPaymentDate existir E for posterior à data atual no DB)\r\n+            if (finalNextPaymentDate && (!companyToUpdate.subscription.endDate || new Date(finalNextPaymentDate) > new Date(companyToUpdate.subscription.endDate))) {\r\n+                shouldUpdate = true;\r\n+                console.log(`[MP WEBHOOK] Data de término DB '${companyToUpdate.subscription.endDate}' mudará para '${finalNextPaymentDate}'.`);\r\n+            } else if (!finalNextPaymentDate && finalStatusFromMP === 'active') {\r\n+                // Fallback: Se MP diz 'active' mas não deu nextPaymentDate, e DB está vencida/nula\r\n+                if (!companyToUpdate.subscription.endDate || new Date(companyToUpdate.subscription.endDate) < new Date()) {\r\n                     shouldUpdate = true;\r\n-                    console.log(`[MP WEBHOOK] Data de término da assinatura de ${company.nomeEmpresa} será atualizada para ${effectiveNextPaymentDate}.`);\r\n-                } else if (!effectiveNextPaymentDate && statusFromMercadoPago === 'active') {\r\n-                    // Fallback: Se o Mercado Pago diz que está 'active' mas não deu nextPaymentDate, e a data no DB está vencida/nula\r\n-                    if (!currentDbEndDate || new Date(currentDbEndDate) < new Date()) {\r\n-                        shouldUpdate = true;\r\n-                        effectiveNextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // Define 30 dias a partir de agora\r\n-                        console.log(`[MP WEBHOOK] Definindo data de término padrão (30 dias) para ${company.nomeEmpresa} como fallback.`);\r\n-                    }\r\n+                    finalNextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 dias a partir de agora\r\n+                    console.log(`[MP WEBHOOK] Definindo fallback de 30 dias para endDate. `);\r\n                 }\r\n-\r\n-                if (shouldUpdate) {\r\n-                    company.subscription.status = 'active';\r\n-                    company.subscription.endDate = effectiveNextPaymentDate ? new Date(effectiveNextPaymentDate) : company.subscription.endDate; \r\n-                    await company.save();\r\n-                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} ATIVADA/ATUALIZADA.`);\r\n-                    console.log(`[MP WEBHOOK DEBUG] Novo Status salvo no DB: ${company.subscription.status}`);\r\n-                    console.log(`[MP WEBHOOK DEBUG] Nova Data de Término salva no DB: ${company.subscription.endDate ? company.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}`);\r\n-                } else {\r\n-                    console.log(`[MP WEBHOOK] Assinatura da empresa ${company.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação no DB.`);\r\n-                }\r\n+            }\r\n+            \r\n+            if (shouldUpdate) {\r\n+                companyToUpdate.subscription.status = 'active';\r\n+                companyToUpdate.subscription.endDate = finalNextPaymentDate ? new Date(finalNextPaymentDate) : companyToUpdate.subscription.endDate; \r\n+                await companyToUpdate.save();\r\n+                console.log(`---> SUCESSO: Assinatura da empresa ${companyToUpdate.nomeEmpresa} ATIVADA/ATUALIZADA.`);\r\n+                console.log(`[MP WEBHOOK DEBUG] Novo Status salvo no DB: ${companyToUpdate.subscription.status}`);\r\n+                console.log(`[MP WEBHOOK DEBUG] Nova Data de Término salva no DB: ${companyToUpdate.subscription.endDate ? companyToUpdate.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}`);\r\n             } else {\r\n-                console.log(`[MP WEBHOOK] Empresa NÃO encontrada no DB para o mercadopagoPreapprovalId: ${preapprovalIdFromWebhook}.`);\r\n+                console.log(`[MP WEBHOOK] Assinatura da empresa ${companyToUpdate.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação no DB.`);\r\n             }\r\n-        } else if (webhookHandled) {\r\n-            console.log(`[MP WEBHOOK] Notificação processada, mas NÃO resultou em ativação (status não relevante ou preapprovalId ausente).`);\r\n-            console.log(`[MP WEBHOOK] Preapproval ID: ${preapprovalIdFromWebhook}, Status: ${statusFromMercadoPago}`);\r\n+        } else {\r\n+            console.log(`[MP WEBHOOK] Notificação finalizou sem ativar assinatura.`);\r\n+            console.log(`[MP WEBHOOK] Final Preapproval ID: ${finalPreapprovalId}, Final Status from MP: ${finalStatusFromMP}, Company Found: ${!!companyToUpdate}`);\r\n         }\r\n         \r\n         res.sendStatus(200);\r\n \r\n"
                },
                {
                    "date": 1753562745730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,138 +72,145 @@\n     try {\r\n         const masterDb = getMasterConnection();\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n \r\n-        let preapprovalIdFromNotification = null; // O ID da pré-aprovação se estiver diretamente na notificação\r\n-        let paymentIdFromNotification = null; // O ID do pagamento se for uma notificação de payment\r\n+        let finalPreapprovalId = null; // O ID da pré-aprovação que usaremos para buscar a empresa\r\n+        let finalStatusFromMP = null;    // Status retornado diretamente da API do MP ao consultar\r\n+        let finalNextPaymentDate = null; // Próxima data de pagamento efetiva\r\n+        let webhookHandledSuccessfully = false; // Flag para indicar se o webhook foi processado com sucesso\r\n \r\n-        // 1. Tentar extrair o preapprovalId ou paymentId da notificação\r\n+        // Lógica para extrair informações com base no tipo de notificação\r\n         if (notification.type === 'payment' && notification.data && notification.data.id) {\r\n-            paymentIdFromNotification = notification.data.id;\r\n-            console.log(`[MP WEBHOOK DEBUG] Identificado webhook de pagamento. ID do pagamento: ${paymentIdFromNotification}`);\r\n-        } else if ((notification.type === 'preapproval' || notification.type === 'subscription_authorized_payment') && notification.data && notification.data.id) {\r\n-            // Para 'preapproval' e 'subscription_authorized_payment', o data.id é o preapprovalId ou o ID do authorized_payment\r\n-            // Vamos assumir que data.id é o preapprovalId para o tipo 'preapproval'.\r\n-            // Para 'subscription_authorized_payment', como vimos, data.id NÃO é o preapprovalId.\r\n-            // Precisaremos buscar a empresa pelo preapprovalId salvo.\r\n-            preapprovalIdFromNotification = notification.data.id; \r\n-            console.log(`[MP WEBHOOK DEBUG] Identificado webhook de pré-aprovação/autorização. ID: ${preapprovalIdFromNotification}`);\r\n-        } else {\r\n-            console.log(`[MP WEBHOOK DEBUG] Tipo de notificação não relevante ou ID não encontrado: ${notification.type}`);\r\n-            return res.sendStatus(200);\r\n-        }\r\n-\r\n-        let companyToUpdate = null;\r\n-        let finalPreapprovalId = null;\r\n-        let finalStatusFromMP = null;\r\n-        let finalNextPaymentDate = null;\r\n-\r\n-        // 2. Se for um webhook de pagamento, buscar detalhes do pagamento e o preapproval_id associado\r\n-        if (paymentIdFromNotification) {\r\n+            const paymentId = notification.data.id;\r\n+            console.log(`[MP WEBHOOK DEBUG - PAYMENT] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`);\r\n+            \r\n             try {\r\n                 const payment = new Payment(client);\r\n-                const paymentDetails = await payment.get({ id: paymentIdFromNotification });\r\n+                const paymentDetails = await payment.get({ id: paymentId });\r\n+                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes COMPLETOS do Pagamento ${paymentId}: ${JSON.stringify(paymentDetails, null, 2)}`); // Log completo do paymentDetails\r\n+                \r\n                 finalStatusFromMP = paymentDetails.status;\r\n-                finalPreapprovalId = paymentDetails.preapproval_id; // Este é o link crucial para a assinatura\r\n-                console.log(`[MP WEBHOOK DEBUG] Detalhes do Pagamento ${paymentIdFromNotification}: Status -> ${finalStatusFromMP}, Preapproval ID -> ${finalPreapprovalId}`);\r\n+                // O preapproval_id pode vir em paymentDetails.preapproval_id ou ser buscado se o paymentDetails\r\n+                // for um objeto mais complexo que o básico.\r\n+                finalPreapprovalId = paymentDetails.preapproval_id || paymentDetails.collector_id; // Tentando com collector_id como fallback, ou outro campo\r\n+                \r\n+                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Status do Pagamento: ${finalStatusFromMP}, Preapproval ID (do Payment): ${finalPreapprovalId}`);\r\n \r\n-                // Se o pagamento foi aprovado E conseguimos o preapprovalId, buscamos os detalhes da pré-aprovação para a data\r\n                 if (finalPreapprovalId && finalStatusFromMP === 'approved') {\r\n+                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento APROVADO. Buscando detalhes da pré-aprovação ${finalPreapprovalId}...`);\r\n                     const preapproval = new PreApproval(client);\r\n                     const preapprovalDetails = await preapproval.get({ id: finalPreapprovalId });\r\n                     finalNextPaymentDate = preapprovalDetails.next_payment_date;\r\n-                    finalStatusFromMP = preapprovalDetails.status; // Atualiza para o status da pré-aprovação (pode ser 'active')\r\n-                    console.log(`[MP WEBHOOK DEBUG] Detalhes da Pré-aprovação ${finalPreapprovalId} (via pagamento): Status -> ${finalStatusFromMP}, Próximo pagamento -> ${finalNextPaymentDate}`);\r\n+                    // O status final será o da pré-aprovação, que pode ser 'active' após o primeiro pagamento\r\n+                    finalStatusFromMP = preapprovalDetails.status; \r\n+                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes da Pré-aprovação ${finalPreapprovalId} (via payment): Status -> ${finalStatusFromMP}, Próximo pagamento -> ${finalNextPaymentDate}`);\r\n                 }\r\n+                webhookHandledSuccessfully = true;\r\n+\r\n             } catch (error) {\r\n-                console.error(`[MP WEBHOOK ERROR] Erro ao buscar detalhes do pagamento ${paymentIdFromNotification}:`, error);\r\n-                // Continua o fluxo mesmo com erro, pode ser que a empresa seja encontrada pelo preapprovalId salva no DB\r\n+                console.error(`[MP WEBHOOK ERROR - PAYMENT] Erro ao buscar detalhes do pagamento ${paymentId} ou pré-aprovação associada:`, error);\r\n             }\r\n-        } \r\n-        \r\n-        // 3. Se for uma notificação direta de pré-aprovação, buscar seus detalhes (e tentar pegar o Preapproval ID real)\r\n-        // Isso é para o tipo 'preapproval'. Para 'subscription_authorized_payment' ele falhará ao buscar por ID, mas continuaremos a procurar no DB.\r\n-        else if (preapprovalIdFromNotification) { // Isso cobre 'preapproval' diretamente e 'subscription_authorized_payment' (onde data.id não é preapprovalId)\r\n-             try {\r\n+\r\n+        } else if (notification.type === 'preapproval' && notification.data && notification.data.id) {\r\n+            finalPreapprovalId = notification.data.id; // Para o tipo 'preapproval', o data.id é o preapprovalId\r\n+            console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Tipo 'preapproval' recebido. ID da pré-aprovação: ${finalPreapprovalId}`);\r\n+            \r\n+            try {\r\n                 const preapproval = new PreApproval(client);\r\n-                const preapprovalDetails = await preapproval.get({ id: preapprovalIdFromNotification });\r\n-                finalStatusFromMP = preapprovalDetails.status;\r\n-                finalNextPaymentDate = preapprovalDetails.next_payment_date;\r\n-                finalPreapprovalId = preapprovalDetails.id; // Garante que pegamos o ID correto da API do MP\r\n-                console.log(`[MP WEBHOOK DEBUG] Detalhes da Pré-aprovação ${finalPreapprovalId} (via notificação direta): Status -> ${finalStatusFromMP}, Próximo pagamento -> ${finalNextPaymentDate}`);\r\n+                const subscriptionDetails = await preapproval.get({ id: finalPreapprovalId });\r\n+                finalStatusFromMP = subscriptionDetails.status;\r\n+                finalNextPaymentDate = subscriptionDetails.next_payment_date;\r\n+                console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Detalhes da Pré-aprovação ${finalPreapprovalId} (via notificação direta): Status -> ${finalStatusFromMP}, Próximo pagamento -> ${finalNextPaymentDate}`);\r\n+                webhookHandledSuccessfully = true;\r\n             } catch (error) {\r\n-                console.error(`[MP WEBHOOK ERROR] Erro ao buscar detalhes da pré-aprovação ${preapprovalIdFromNotification} (direta):`, error);\r\n-                // Se a notificação for 'subscription_authorized_payment', este 'get' falhará (status 400).\r\n-                // Precisamos então encontrar a empresa pelo preapprovalId salvo.\r\n-                finalPreapprovalId = preapprovalIdFromNotification; // Mantém o ID da notificação para tentar a busca no DB\r\n+                console.error(`[MP WEBHOOK ERROR - PREAPPROVAL] Erro ao buscar detalhes da pré-aprovação ${finalPreapprovalId}:`, error);\r\n             }\r\n-        }\r\n \r\n+        } else if (notification.type === 'subscription_authorized_payment' && notification.data && notification.data.id) {\r\n+            // Este webhook indica que uma assinatura foi autorizada.\r\n+            // O data.id aqui NÃO é o preapprovalId, mas sim o ID de um payment autorizado.\r\n+            // Precisamos encontrar a pré-aprovação associada a este authorized_payment.\r\n+            const authorizedPaymentId = notification.data.id;\r\n+            console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Tipo 'subscription_authorized_payment' recebido. Authorized Payment ID: ${authorizedPaymentId}`);\r\n \r\n-        // 4. Encontrar a empresa no seu DB usando o mercadopagoPreapprovalId\r\n-        if (finalPreapprovalId) {\r\n-            companyToUpdate = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': finalPreapprovalId });\r\n-            if (!companyToUpdate) {\r\n-                // Se não encontrou pelo finalPreapprovalId, talvez a notificação tenha um ID \"temporário\" ou não seja o que salvamos.\r\n-                // Tenta buscar a empresa pelo 'mercadopagoPreapprovalId' da **última assinatura criada** para o caso de um webhook de 'payment.created'\r\n-                // vir sem preapproval_id no paymentDetails e a notificação de 'subscription_authorized_payment' ter um ID diferente.\r\n-                // Esta é uma medida de segurança, mas a correta é a do passo 2.\r\n-                console.log(`[MP WEBHOOK DEBUG] Empresa não encontrada pelo finalPreapprovalId: ${finalPreapprovalId}. Tentando buscar por notificações recentes...`);\r\n-                // Este passo é complexo e menos confiável. Idealmente, o preapprovalId viria.\r\n-                // Por agora, vamos pular este fallback complexo e focar no primary flow.\r\n+            try {\r\n+                // Tenta buscar o paymentDetails para obter o preapproval_id\r\n+                const payment = new Payment(client);\r\n+                const paymentDetails = await payment.get({ id: authorizedPaymentId });\r\n+                console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Detalhes do Authorized Payment ${authorizedPaymentId}: ${JSON.stringify(paymentDetails, null, 2)}`);\r\n+\r\n+                finalPreapprovalId = paymentDetails.preapproval_id; // Deve estar aqui\r\n+                finalStatusFromMP = paymentDetails.status; // Status do pagamento autorizado\r\n+                \r\n+                if (finalPreapprovalId) {\r\n+                    const preapproval = new PreApproval(client);\r\n+                    const preapprovalDetails = await preapproval.get({ id: finalPreapprovalId });\r\n+                    finalNextPaymentDate = preapprovalDetails.next_payment_date;\r\n+                    finalStatusFromMP = preapprovalDetails.status; // Usar o status da pré-aprovação para a lógica final\r\n+                    console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Preapproval ID ${finalPreapprovalId} encontrado via authorized_payment. Status MP: ${finalStatusFromMP}, Próximo Pagamento: ${finalNextPaymentDate}`);\r\n+                }\r\n+                webhookHandledSuccessfully = true;\r\n+\r\n+            } catch (error) {\r\n+                console.error(`[MP WEBHOOK ERROR - SUBSCRIPTION_AUTHORIZED_PAYMENT] Erro ao buscar detalhes do authorized_payment ${authorizedPaymentId} ou preapproval associado:`, error);\r\n             }\r\n-        } else if (paymentIdFromNotification) {\r\n-            // Última tentativa: se é um webhook de pagamento e não temos preapprovalId,\r\n-            // vamos buscar a empresa que está em pending_approval e tem o application_id da notificação.\r\n-            // (Assumindo que o application_id do Mercado Pago corresponde à sua integração).\r\n-            // Isso é um chute, dependendo de como você configurou a sua aplicação MP.\r\n-            // NOTA: Esta lógica é um PALPITE, pois não temos o application_id salvo no seu MasterCompany.\r\n-            // O IDEAL É TER SEMPRE o 'preapproval_id' vindo no paymentDetails.\r\n-            console.log(`[MP WEBHOOK DEBUG] No preapprovalId. Tentando encontrar empresa pelo paymentId ou action: ${paymentIdFromNotification}`);\r\n-            // Removendo lógica complexa de busca por `action` ou `application_id` por enquanto.\r\n-            // O foco é garantir que `finalPreapprovalId` seja preenchido.\r\n+\r\n+        } else {\r\n+            console.log(`[MP WEBHOOK DEBUG] Tipo de notificação não tratado ou sem 'data.id': ${notification.type}`);\r\n+            return res.sendStatus(200); \r\n         }\r\n \r\n-\r\n-        // 5. Se a empresa foi encontrada e o status do Mercado Pago é de sucesso\r\n-        if (companyToUpdate && (finalStatusFromMP === 'approved' || finalStatusFromMP === 'authorized' || finalStatusFromMP === 'active')) {\r\n-            console.log(`[MP WEBHOOK] Processando atualização para empresa ${companyToUpdate.nomeEmpresa}. Status MP: ${finalStatusFromMP}, Próximo pagamento: ${finalNextPaymentDate}`);\r\n+        // --- Lógica principal de atualização da assinatura ---\r\n+        // Procede APENAS se o webhook foi processado com sucesso e identificou um preapprovalId\r\n+        // e o status do Mercado Pago indica sucesso/ativação.\r\n+        if (webhookHandledSuccessfully && finalPreapprovalId && (finalStatusFromMP === 'approved' || finalStatusFromMP === 'authorized' || finalStatusFromMP === 'active')) {\r\n+            console.log(`[MP WEBHOOK] Tentando atualizar assinatura para Preapproval ID: ${finalPreapprovalId} com status relevante: ${finalStatusFromMP}`);\r\n+            const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': finalPreapprovalId });\r\n             \r\n-            let shouldUpdate = false;\r\n+            if (company) {\r\n+                console.log(`[MP WEBHOOK] Empresa encontrada: ${company.nomeEmpresa}. Status atual da assinatura no DB: ${company.subscription.status}`);\r\n+                \r\n+                const currentDbEndDate = company.subscription.endDate;\r\n+                let shouldUpdate = false;\r\n \r\n-            // Condição para mudar o status para 'active'\r\n-            if (companyToUpdate.subscription.status !== 'active') {\r\n-                shouldUpdate = true;\r\n-                console.log(`[MP WEBHOOK] Status DB '${companyToUpdate.subscription.status}' mudará para 'active'.`);\r\n-            }\r\n+                // Condição para mudar o status para 'active'\r\n+                if (company.subscription.status !== 'active') {\r\n+                    shouldUpdate = true;\r\n+                    console.log(`[MP WEBHOOK] Status da assinatura de ${company.nomeEmpresa} mudará para 'active'.`);\r\n+                }\r\n \r\n-            // Condição para atualizar a data de término\r\n-            // (Apenas se finalNextPaymentDate existir E for posterior à data atual no DB)\r\n-            if (finalNextPaymentDate && (!companyToUpdate.subscription.endDate || new Date(finalNextPaymentDate) > new Date(companyToUpdate.subscription.endDate))) {\r\n-                shouldUpdate = true;\r\n-                console.log(`[MP WEBHOOK] Data de término DB '${companyToUpdate.subscription.endDate}' mudará para '${finalNextPaymentDate}'.`);\r\n-            } else if (!finalNextPaymentDate && finalStatusFromMP === 'active') {\r\n-                // Fallback: Se MP diz 'active' mas não deu nextPaymentDate, e DB está vencida/nula\r\n-                if (!companyToUpdate.subscription.endDate || new Date(companyToUpdate.subscription.endDate) < new Date()) {\r\n+                // Condição para atualizar a data de término\r\n+                // (Apenas se finalNextPaymentDate existir E for posterior à data atual no DB)\r\n+                if (finalNextPaymentDate && (!currentDbEndDate || new Date(finalNextPaymentDate) > new Date(currentDbEndDate))) {\r\n                     shouldUpdate = true;\r\n-                    finalNextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 dias a partir de agora\r\n-                    console.log(`[MP WEBHOOK] Definindo fallback de 30 dias para endDate. `);\r\n+                    console.log(`[MP WEBHOOK] Data de término da assinatura de ${company.nomeEmpresa} será atualizada para ${finalNextPaymentDate}.`);\r\n+                } else if (!finalNextPaymentDate && finalStatusFromMP === 'active') {\r\n+                    // Fallback: Se MP diz 'active' mas não deu nextPaymentDate, e DB está vencida/nula\r\n+                    if (!currentDbEndDate || new Date(currentDbEndDate) < new Date()) {\r\n+                        shouldUpdate = true;\r\n+                        finalNextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 dias a partir de agora\r\n+                        console.log(`[MP WEBHOOK] Definindo data de término padrão (30 dias) para ${company.nomeEmpresa} como fallback.`);\r\n+                    }\r\n                 }\r\n-            }\r\n-            \r\n-            if (shouldUpdate) {\r\n-                companyToUpdate.subscription.status = 'active';\r\n-                companyToUpdate.subscription.endDate = finalNextPaymentDate ? new Date(finalNextPaymentDate) : companyToUpdate.subscription.endDate; \r\n-                await companyToUpdate.save();\r\n-                console.log(`---> SUCESSO: Assinatura da empresa ${companyToUpdate.nomeEmpresa} ATIVADA/ATUALIZADA.`);\r\n-                console.log(`[MP WEBHOOK DEBUG] Novo Status salvo no DB: ${companyToUpdate.subscription.status}`);\r\n-                console.log(`[MP WEBHOOK DEBUG] Nova Data de Término salva no DB: ${companyToUpdate.subscription.endDate ? companyToUpdate.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}`);\r\n+\r\n+                if (shouldUpdate) {\r\n+                    company.subscription.status = 'active';\r\n+                    company.subscription.endDate = finalNextPaymentDate ? new Date(finalNextPaymentDate) : company.subscription.endDate; \r\n+                    await company.save();\r\n+                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} ATIVADA/ATUALIZADA.`);\r\n+                    console.log(`[MP WEBHOOK DEBUG] Novo Status salvo no DB: ${company.subscription.status}`);\r\n+                    console.log(`[MP WEBHOOK DEBUG] Nova Data de Término salva no DB: ${company.subscription.endDate ? company.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}`);\r\n+                } else {\r\n+                    console.log(`[MP WEBHOOK] Assinatura da empresa ${company.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação no DB.`);\r\n+                }\r\n             } else {\r\n-                console.log(`[MP WEBHOOK] Assinatura da empresa ${companyToUpdate.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação no DB.`);\r\n+                console.log(`[MP WEBHOOK] Empresa NÃO encontrada no DB para o mercadopagoPreapprovalId: ${finalPreapprovalId}.`);\r\n             }\r\n+        } else if (webhookHandledSuccessfully) {\r\n+            console.log(`[MP WEBHOOK] Notificação processada, mas NÃO resultou em ativação (status não relevante ou preapprovalId ausente).`);\r\n+            console.log(`[MP WEBHOOK] Final Preapproval ID: ${finalPreapprovalId}, Final Status from MP: ${finalStatusFromMP}`);\r\n         } else {\r\n-            console.log(`[MP WEBHOOK] Notificação finalizou sem ativar assinatura.`);\r\n-            console.log(`[MP WEBHOOK] Final Preapproval ID: ${finalPreapprovalId}, Final Status from MP: ${finalStatusFromMP}, Company Found: ${!!companyToUpdate}`);\r\n+            console.log(`[MP WEBHOOK] Nenhuma lógica específica de webhook foi acionada para esta notificação.`);\r\n         }\r\n         \r\n         res.sendStatus(200);\r\n \r\n"
                },
                {
                    "date": 1753563720692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,145 +72,143 @@\n     try {\r\n         const masterDb = getMasterConnection();\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n \r\n-        let finalPreapprovalId = null; // O ID da pré-aprovação que usaremos para buscar a empresa\r\n-        let finalStatusFromMP = null;    // Status retornado diretamente da API do MP ao consultar\r\n-        let finalNextPaymentDate = null; // Próxima data de pagamento efetiva\r\n-        let webhookHandledSuccessfully = false; // Flag para indicar se o webhook foi processado com sucesso\r\n+        let preapprovalIdToLookUp = null; // O ID da pré-aprovação que usaremos para buscar a empresa\r\n+        let statusFromMercadoPago = null;    // Status retornado diretamente da API do MP ao consultar\r\n+        let nextPaymentDate = null;          // Próxima data de pagamento efetiva\r\n+        let isRelevantNotification = false;  // Flag para indicar se a notificação é relevante para a ativação\r\n \r\n-        // Lógica para extrair informações com base no tipo de notificação\r\n+        // --- Passo 1: Extrair o preapprovalId, status e nextPaymentDate de forma robusta ---\r\n         if (notification.type === 'payment' && notification.data && notification.data.id) {\r\n             const paymentId = notification.data.id;\r\n             console.log(`[MP WEBHOOK DEBUG - PAYMENT] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`);\r\n             \r\n             try {\r\n                 const payment = new Payment(client);\r\n                 const paymentDetails = await payment.get({ id: paymentId });\r\n-                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes COMPLETOS do Pagamento ${paymentId}: ${JSON.stringify(paymentDetails, null, 2)}`); // Log completo do paymentDetails\r\n+                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes COMPLETOS do Pagamento ${paymentId}: ${JSON.stringify(paymentDetails, null, 2)}`);\r\n                 \r\n-                finalStatusFromMP = paymentDetails.status;\r\n-                // O preapproval_id pode vir em paymentDetails.preapproval_id ou ser buscado se o paymentDetails\r\n-                // for um objeto mais complexo que o básico.\r\n-                finalPreapprovalId = paymentDetails.preapproval_id || paymentDetails.collector_id; // Tentando com collector_id como fallback, ou outro campo\r\n+                statusFromMercadoPago = paymentDetails.status;\r\n+                // AQUI É A GRANDE MUDANÇA: PEGAR O subscription_id DO POINT_OF_INTERACTION\r\n+                preapprovalIdToLookUp = paymentDetails.point_of_interaction?.transaction_data?.subscription_id;\r\n                 \r\n-                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Status do Pagamento: ${finalStatusFromMP}, Preapproval ID (do Payment): ${finalPreapprovalId}`);\r\n+                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Status do Pagamento: ${statusFromMercadoPago}, Preapproval ID (do Point of Interaction): ${preapprovalIdToLookUp}`);\r\n \r\n-                if (finalPreapprovalId && finalStatusFromMP === 'approved') {\r\n-                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento APROVADO. Buscando detalhes da pré-aprovação ${finalPreapprovalId}...`);\r\n+                if (preapprovalIdToLookUp && statusFromMercadoPago === 'approved') {\r\n+                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento APROVADO. Buscando detalhes da pré-aprovação ${preapprovalIdToLookUp}...`);\r\n                     const preapproval = new PreApproval(client);\r\n-                    const preapprovalDetails = await preapproval.get({ id: finalPreapprovalId });\r\n-                    finalNextPaymentDate = preapprovalDetails.next_payment_date;\r\n-                    // O status final será o da pré-aprovação, que pode ser 'active' após o primeiro pagamento\r\n-                    finalStatusFromMP = preapprovalDetails.status; \r\n-                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes da Pré-aprovação ${finalPreapprovalId} (via payment): Status -> ${finalStatusFromMP}, Próximo pagamento -> ${finalNextPaymentDate}`);\r\n+                    const preapprovalDetails = await preapproval.get({ id: preapprovalIdToLookUp });\r\n+                    nextPaymentDate = preapprovalDetails.next_payment_date;\r\n+                    statusFromMercadoPago = preapprovalDetails.status; // Atualiza para o status da pré-aprovação (pode ser 'active')\r\n+                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes da Pré-aprovação ${preapprovalIdToLookUp} (via payment): Status -> ${statusFromMercadoPago}, Próximo pagamento -> ${nextPaymentDate}`);\r\n+                    isRelevantNotification = true;\r\n+                } else {\r\n+                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento não aprovado ou Preapproval ID ausente no POI para ID ${paymentId}. Status: ${statusFromMercadoPago}`);\r\n                 }\r\n-                webhookHandledSuccessfully = true;\r\n-\r\n             } catch (error) {\r\n                 console.error(`[MP WEBHOOK ERROR - PAYMENT] Erro ao buscar detalhes do pagamento ${paymentId} ou pré-aprovação associada:`, error);\r\n             }\r\n \r\n         } else if (notification.type === 'preapproval' && notification.data && notification.data.id) {\r\n-            finalPreapprovalId = notification.data.id; // Para o tipo 'preapproval', o data.id é o preapprovalId\r\n-            console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Tipo 'preapproval' recebido. ID da pré-aprovação: ${finalPreapprovalId}`);\r\n+            preapprovalIdToLookUp = notification.data.id; // Para o tipo 'preapproval', o data.id é o preapprovalId\r\n+            console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Tipo 'preapproval' recebido. ID da pré-aprovação: ${preapprovalIdToLookUp}`);\r\n             \r\n             try {\r\n                 const preapproval = new PreApproval(client);\r\n-                const subscriptionDetails = await preapproval.get({ id: finalPreapprovalId });\r\n-                finalStatusFromMP = subscriptionDetails.status;\r\n-                finalNextPaymentDate = subscriptionDetails.next_payment_date;\r\n-                console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Detalhes da Pré-aprovação ${finalPreapprovalId} (via notificação direta): Status -> ${finalStatusFromMP}, Próximo pagamento -> ${finalNextPaymentDate}`);\r\n-                webhookHandledSuccessfully = true;\r\n+                const subscriptionDetails = await preapproval.get({ id: preapprovalIdToLookUp });\r\n+                statusFromMercadoPago = subscriptionDetails.status;\r\n+                nextPaymentDate = subscriptionDetails.next_payment_date;\r\n+                console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Detalhes da Pré-aprovação ${preapprovalIdToLookUp} (via notificação direta): Status -> ${statusFromMercadoPago}, Próximo pagamento -> ${nextPaymentDate}`);\r\n+                isRelevantNotification = true;\r\n             } catch (error) {\r\n-                console.error(`[MP WEBHOOK ERROR - PREAPPROVAL] Erro ao buscar detalhes da pré-aprovação ${finalPreapprovalId}:`, error);\r\n+                console.error(`[MP WEBHOOK ERROR - PREAPPROVAL] Erro ao buscar detalhes da pré-aprovação ${preapprovalIdToLookUp}:`, error);\r\n+                // Se der erro aqui, significa que o ID da notificação pode não ser um preapprovalId válido.\r\n+                // Mas a notificação é relevante, então a flag continua true e tentaremos buscar a empresa no DB depois.\r\n             }\r\n \r\n         } else if (notification.type === 'subscription_authorized_payment' && notification.data && notification.data.id) {\r\n-            // Este webhook indica que uma assinatura foi autorizada.\r\n-            // O data.id aqui NÃO é o preapprovalId, mas sim o ID de um payment autorizado.\r\n-            // Precisamos encontrar a pré-aprovação associada a este authorized_payment.\r\n-            const authorizedPaymentId = notification.data.id;\r\n+            const authorizedPaymentId = notification.data.id; // Este é o ID do authorized_payment\r\n             console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Tipo 'subscription_authorized_payment' recebido. Authorized Payment ID: ${authorizedPaymentId}`);\r\n \r\n             try {\r\n-                // Tenta buscar o paymentDetails para obter o preapproval_id\r\n+                // Tenta buscar o paymentDetails para obter o preapproval_id associado\r\n                 const payment = new Payment(client);\r\n                 const paymentDetails = await payment.get({ id: authorizedPaymentId });\r\n                 console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Detalhes do Authorized Payment ${authorizedPaymentId}: ${JSON.stringify(paymentDetails, null, 2)}`);\r\n \r\n-                finalPreapprovalId = paymentDetails.preapproval_id; // Deve estar aqui\r\n-                finalStatusFromMP = paymentDetails.status; // Status do pagamento autorizado\r\n+                preapprovalIdToLookUp = paymentDetails.point_of_interaction?.transaction_data?.subscription_id; // Pegar o subscription_id!\r\n+                statusFromMercadoPago = paymentDetails.status; // Status do pagamento autorizado\r\n                 \r\n-                if (finalPreapprovalId) {\r\n+                if (preapprovalIdToLookUp) {\r\n+                    console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Preapproval ID ${preapprovalIdToLookUp} encontrado via authorized_payment.`);\r\n                     const preapproval = new PreApproval(client);\r\n-                    const preapprovalDetails = await preapproval.get({ id: finalPreapprovalId });\r\n-                    finalNextPaymentDate = preapprovalDetails.next_payment_date;\r\n-                    finalStatusFromMP = preapprovalDetails.status; // Usar o status da pré-aprovação para a lógica final\r\n-                    console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Preapproval ID ${finalPreapprovalId} encontrado via authorized_payment. Status MP: ${finalStatusFromMP}, Próximo Pagamento: ${finalNextPaymentDate}`);\r\n+                    const preapprovalDetails = await preapproval.get({ id: preapprovalIdToLookUp });\r\n+                    nextPaymentDate = preapprovalDetails.next_payment_date;\r\n+                    statusFromMercadoPago = preapprovalDetails.status; // Usar o status da pré-aprovação para a lógica final\r\n+                    console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Preapproval ID ${preapprovalIdToLookUp} encontrado via authorized_payment. Status MP: ${statusFromMercadoPago}, Próximo Pagamento: ${nextPaymentDate}`);\r\n                 }\r\n-                webhookHandledSuccessfully = true;\r\n+                isRelevantNotification = true;\r\n \r\n             } catch (error) {\r\n                 console.error(`[MP WEBHOOK ERROR - SUBSCRIPTION_AUTHORIZED_PAYMENT] Erro ao buscar detalhes do authorized_payment ${authorizedPaymentId} ou preapproval associado:`, error);\r\n             }\r\n \r\n         } else {\r\n-            console.log(`[MP WEBHOOK DEBUG] Tipo de notificação não tratado ou sem 'data.id': ${notification.type}`);\r\n+            console.log(`[MP WEBHOOK DEBUG] Tipo de notificação não tratado ou sem 'data.id': ${notification.type}. Ignorando.`);\r\n             return res.sendStatus(200); \r\n         }\r\n \r\n-        // --- Lógica principal de atualização da assinatura ---\r\n-        // Procede APENAS se o webhook foi processado com sucesso e identificou um preapprovalId\r\n-        // e o status do Mercado Pago indica sucesso/ativação.\r\n-        if (webhookHandledSuccessfully && finalPreapprovalId && (finalStatusFromMP === 'approved' || finalStatusFromMP === 'authorized' || finalStatusFromMP === 'active')) {\r\n-            console.log(`[MP WEBHOOK] Tentando atualizar assinatura para Preapproval ID: ${finalPreapprovalId} com status relevante: ${finalStatusFromMP}`);\r\n-            const company = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': finalPreapprovalId });\r\n+        // --- Passo 2: Encontrar a empresa no seu DB usando o mercadopagoPreapprovalId ---\r\n+        let companyToUpdate = null;\r\n+        if (preapprovalIdToLookUp) {\r\n+            companyToUpdate = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalIdToLookUp });\r\n+            if (!companyToUpdate) {\r\n+                console.log(`[MP WEBHOOK] Empresa NÃO encontrada no DB para o mercadopagoPreapprovalId: ${preapprovalIdToLookUp}. Isso pode ocorrer se o ID na notificação não corresponder ao ID salvo.`);\r\n+            }\r\n+        } else {\r\n+            console.log(`[MP WEBHOOK] Não foi possível obter um Preapproval ID da notificação para buscar a empresa no DB.`);\r\n+        }\r\n+\r\n+        // --- Passo 3: Se a empresa foi encontrada e o status do Mercado Pago é de sucesso ---\r\n+        if (companyToUpdate && (statusFromMercadoPago === 'approved' || statusFromMercadoPago === 'authorized' || statusFromMercadoPago === 'active')) {\r\n+            console.log(`[MP WEBHOOK] Tentando atualizar assinatura para empresa ${companyToUpdate.nomeEmpresa}. Status MP: ${statusFromMercadoPago}, Próximo pagamento: ${nextPaymentDate}`);\r\n             \r\n-            if (company) {\r\n-                console.log(`[MP WEBHOOK] Empresa encontrada: ${company.nomeEmpresa}. Status atual da assinatura no DB: ${company.subscription.status}`);\r\n-                \r\n-                const currentDbEndDate = company.subscription.endDate;\r\n-                let shouldUpdate = false;\r\n+            const currentDbEndDate = companyToUpdate.subscription.endDate;\r\n+            let shouldUpdate = false;\r\n \r\n-                // Condição para mudar o status para 'active'\r\n-                if (company.subscription.status !== 'active') {\r\n-                    shouldUpdate = true;\r\n-                    console.log(`[MP WEBHOOK] Status da assinatura de ${company.nomeEmpresa} mudará para 'active'.`);\r\n-                }\r\n+            // Condição para mudar o status para 'active'\r\n+            if (companyToUpdate.subscription.status !== 'active') {\r\n+                shouldUpdate = true;\r\n+                console.log(`[MP WEBHOOK] Status da assinatura de ${companyToUpdate.nomeEmpresa} mudará para 'active'.`);\r\n+            }\r\n \r\n-                // Condição para atualizar a data de término\r\n-                // (Apenas se finalNextPaymentDate existir E for posterior à data atual no DB)\r\n-                if (finalNextPaymentDate && (!currentDbEndDate || new Date(finalNextPaymentDate) > new Date(currentDbEndDate))) {\r\n+            // Condição para atualizar a data de término\r\n+            if (nextPaymentDate && (!currentDbEndDate || new Date(nextPaymentDate) > new Date(currentDbEndDate))) {\r\n+                shouldUpdate = true;\r\n+                console.log(`[MP WEBHOOK] Data de término da assinatura de ${companyToUpdate.nomeEmpresa} será atualizada para ${nextPaymentDate}.`);\r\n+            } else if (!nextPaymentDate && statusFromMercadoPago === 'active') {\r\n+                // Fallback: Se MP diz 'active' mas não deu nextPaymentDate, e DB está vencida/nula\r\n+                if (!currentDbEndDate || new Date(currentDbEndDate) < new Date()) {\r\n                     shouldUpdate = true;\r\n-                    console.log(`[MP WEBHOOK] Data de término da assinatura de ${company.nomeEmpresa} será atualizada para ${finalNextPaymentDate}.`);\r\n-                } else if (!finalNextPaymentDate && finalStatusFromMP === 'active') {\r\n-                    // Fallback: Se MP diz 'active' mas não deu nextPaymentDate, e DB está vencida/nula\r\n-                    if (!currentDbEndDate || new Date(currentDbEndDate) < new Date()) {\r\n-                        shouldUpdate = true;\r\n-                        finalNextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 dias a partir de agora\r\n-                        console.log(`[MP WEBHOOK] Definindo data de término padrão (30 dias) para ${company.nomeEmpresa} como fallback.`);\r\n-                    }\r\n+                    nextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 dias a partir de agora\r\n+                    console.log(`[MP WEBHOOK] Definindo data de término padrão (30 dias) para ${companyToUpdate.nomeEmpresa} como fallback.`);\r\n                 }\r\n+            }\r\n \r\n-                if (shouldUpdate) {\r\n-                    company.subscription.status = 'active';\r\n-                    company.subscription.endDate = finalNextPaymentDate ? new Date(finalNextPaymentDate) : company.subscription.endDate; \r\n-                    await company.save();\r\n-                    console.log(`---> SUCESSO: Assinatura da empresa ${company.nomeEmpresa} ATIVADA/ATUALIZADA.`);\r\n-                    console.log(`[MP WEBHOOK DEBUG] Novo Status salvo no DB: ${company.subscription.status}`);\r\n-                    console.log(`[MP WEBHOOK DEBUG] Nova Data de Término salva no DB: ${company.subscription.endDate ? company.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}`);\r\n-                } else {\r\n-                    console.log(`[MP WEBHOOK] Assinatura da empresa ${company.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação no DB.`);\r\n-                }\r\n+            if (shouldUpdate) {\r\n+                companyToUpdate.subscription.status = 'active';\r\n+                companyToUpdate.subscription.endDate = nextPaymentDate ? new Date(nextPaymentDate) : companyToUpdate.subscription.endDate; \r\n+                await companyToUpdate.save();\r\n+                console.log(`---> SUCESSO: Assinatura da empresa ${companyToUpdate.nomeEmpresa} ATIVADA/ATUALIZADA.`);\r\n+                console.log(`[MP WEBHOOK DEBUG] Novo Status salvo no DB: ${companyToUpdate.subscription.status}`);\r\n+                console.log(`[MP WEBHOOK DEBUG] Nova Data de Término salva no DB: ${companyToUpdate.subscription.endDate ? companyToUpdate.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}`);\r\n             } else {\r\n-                console.log(`[MP WEBHOOK] Empresa NÃO encontrada no DB para o mercadopagoPreapprovalId: ${finalPreapprovalId}.`);\r\n+                console.log(`[MP WEBHOOK] Assinatura da empresa ${companyToUpdate.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação no DB.`);\r\n             }\r\n-        } else if (webhookHandledSuccessfully) {\r\n-            console.log(`[MP WEBHOOK] Notificação processada, mas NÃO resultou em ativação (status não relevante ou preapprovalId ausente).`);\r\n-            console.log(`[MP WEBHOOK] Final Preapproval ID: ${finalPreapprovalId}, Final Status from MP: ${finalStatusFromMP}`);\r\n         } else {\r\n-            console.log(`[MP WEBHOOK] Nenhuma lógica específica de webhook foi acionada para esta notificação.`);\r\n+            console.log(`[MP WEBHOOK] Notificação processada, mas NÃO resultou em ativação (condições não atendidas ou empresa não encontrada).`);\r\n+            console.log(`[MP WEBHOOK] Final Preapproval ID: ${preapprovalIdToLookUp}, Status MP: ${statusFromMercadoPago}, Empresa encontrada no DB: ${!!companyToUpdate}`);\r\n         }\r\n         \r\n         res.sendStatus(200);\r\n \r\n"
                },
                {
                    "date": 1753564023376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,10 @@\n             console.log(`[MP WEBHOOK] Não foi possível obter um Preapproval ID da notificação para buscar a empresa no DB.`);\r\n         }\r\n \r\n         // --- Passo 3: Se a empresa foi encontrada e o status do Mercado Pago é de sucesso ---\r\n-        if (companyToUpdate && (statusFromMercadoPago === 'approved' || statusFromMercadoPago === 'authorized' || statusFromMercadoPago === 'active')) {\r\n+        // Adicionando 'pending' para teste. REMOVER em produção.\r\n+        if (companyToUpdate && (statusFromMercadoPago === 'approved' || statusFromMercadoPago === 'authorized' || statusFromMercadoPago === 'active' || statusFromMercadoPago === 'pending')) { // PARA TESTE: Adicionado 'pending'\r\n             console.log(`[MP WEBHOOK] Tentando atualizar assinatura para empresa ${companyToUpdate.nomeEmpresa}. Status MP: ${statusFromMercadoPago}, Próximo pagamento: ${nextPaymentDate}`);\r\n             \r\n             const currentDbEndDate = companyToUpdate.subscription.endDate;\r\n             let shouldUpdate = false;\r\n"
                },
                {
                    "date": 1753707854882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,134 +65,123 @@\n \r\n // Rota para receber notificações (webhooks) do Mercado Pago (pública)\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n-    console.log('[MP WEBHOOK] Webhook recebido:', JSON.stringify(notification, null, 2));\r\n-    console.log(`[MP WEBHOOK DEBUG] Tipo de Notificação: ${notification.type}, Data ID: ${notification.data.id}`);\r\n+    // console.log('[MP WEBHOOK] Webhook recebido:', JSON.stringify(notification, null, 2));\r\n+    // console.log(`[MP WEBHOOK DEBUG] Tipo de Notificação: ${notification.type}, Data ID: ${notification.data.id}`);\r\n \r\n     try {\r\n         const masterDb = getMasterConnection();\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n \r\n-        let preapprovalIdToLookUp = null; // O ID da pré-aprovação que usaremos para buscar a empresa\r\n-        let statusFromMercadoPago = null;    // Status retornado diretamente da API do MP ao consultar\r\n-        let nextPaymentDate = null;          // Próxima data de pagamento efetiva\r\n-        let isRelevantNotification = false;  // Flag para indicar se a notificação é relevante para a ativação\r\n+        let preapprovalIdToLookUp = null;\r\n+        let statusFromMercadoPago = null;\r\n+        let nextPaymentDate = null;\r\n+        let isRelevantNotification = false;\r\n \r\n-        // --- Passo 1: Extrair o preapprovalId, status e nextPaymentDate de forma robusta ---\r\n         if (notification.type === 'payment' && notification.data && notification.data.id) {\r\n             const paymentId = notification.data.id;\r\n-            console.log(`[MP WEBHOOK DEBUG - PAYMENT] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`);\r\n+            // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`);\r\n             \r\n             try {\r\n                 const payment = new Payment(client);\r\n                 const paymentDetails = await payment.get({ id: paymentId });\r\n-                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes COMPLETOS do Pagamento ${paymentId}: ${JSON.stringify(paymentDetails, null, 2)}`);\r\n+                // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes COMPLETOS do Pagamento ${paymentId}: ${JSON.stringify(paymentDetails, null, 2)}`);\r\n                 \r\n                 statusFromMercadoPago = paymentDetails.status;\r\n-                // AQUI É A GRANDE MUDANÇA: PEGAR O subscription_id DO POINT_OF_INTERACTION\r\n                 preapprovalIdToLookUp = paymentDetails.point_of_interaction?.transaction_data?.subscription_id;\r\n                 \r\n-                console.log(`[MP WEBHOOK DEBUG - PAYMENT] Status do Pagamento: ${statusFromMercadoPago}, Preapproval ID (do Point of Interaction): ${preapprovalIdToLookUp}`);\r\n+                // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Status do Pagamento: ${statusFromMercadoPago}, Preapproval ID (do Point of Interaction): ${preapprovalIdToLookUp}`);\r\n \r\n                 if (preapprovalIdToLookUp && statusFromMercadoPago === 'approved') {\r\n-                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento APROVADO. Buscando detalhes da pré-aprovação ${preapprovalIdToLookUp}...`);\r\n+                    // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento APROVADO. Buscando detalhes da pré-aprovação ${preapprovalIdToLookUp}...`);\r\n                     const preapproval = new PreApproval(client);\r\n                     const preapprovalDetails = await preapproval.get({ id: preapprovalIdToLookUp });\r\n                     nextPaymentDate = preapprovalDetails.next_payment_date;\r\n-                    statusFromMercadoPago = preapprovalDetails.status; // Atualiza para o status da pré-aprovação (pode ser 'active')\r\n-                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes da Pré-aprovação ${preapprovalIdToLookUp} (via payment): Status -> ${statusFromMercadoPago}, Próximo pagamento -> ${nextPaymentDate}`);\r\n+                    statusFromMercadoPago = preapprovalDetails.status;\r\n+                    // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes da Pré-aprovação ${preapprovalIdToLookUp} (via payment): Status -> ${statusFromMercadoPago}, Próximo pagamento -> ${nextPaymentDate}`);\r\n                     isRelevantNotification = true;\r\n                 } else {\r\n-                    console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento não aprovado ou Preapproval ID ausente no POI para ID ${paymentId}. Status: ${statusFromMercadoPago}`);\r\n+                    // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento não aprovado ou Preapproval ID ausente no POI para ID ${paymentId}. Status: ${statusFromMercadoPago}`);\r\n                 }\r\n             } catch (error) {\r\n                 console.error(`[MP WEBHOOK ERROR - PAYMENT] Erro ao buscar detalhes do pagamento ${paymentId} ou pré-aprovação associada:`, error);\r\n             }\r\n \r\n         } else if (notification.type === 'preapproval' && notification.data && notification.data.id) {\r\n-            preapprovalIdToLookUp = notification.data.id; // Para o tipo 'preapproval', o data.id é o preapprovalId\r\n-            console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Tipo 'preapproval' recebido. ID da pré-aprovação: ${preapprovalIdToLookUp}`);\r\n+            preapprovalIdToLookUp = notification.data.id;\r\n+            // console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Tipo 'preapproval' recebido. ID da pré-aprovação: ${preapprovalIdToLookUp}`);\r\n             \r\n             try {\r\n                 const preapproval = new PreApproval(client);\r\n                 const subscriptionDetails = await preapproval.get({ id: preapprovalIdToLookUp });\r\n                 statusFromMercadoPago = subscriptionDetails.status;\r\n                 nextPaymentDate = subscriptionDetails.next_payment_date;\r\n-                console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Detalhes da Pré-aprovação ${preapprovalIdToLookUp} (via notificação direta): Status -> ${statusFromMercadoPago}, Próximo pagamento -> ${nextPaymentDate}`);\r\n+                // console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Detalhes da Pré-aprovação ${preapprovalIdToLookUp} (via notificação direta): Status -> ${statusFromMercadoPago}, Próximo pagamento -> ${nextPaymentDate}`);\r\n                 isRelevantNotification = true;\r\n             } catch (error) {\r\n                 console.error(`[MP WEBHOOK ERROR - PREAPPROVAL] Erro ao buscar detalhes da pré-aprovação ${preapprovalIdToLookUp}:`, error);\r\n-                // Se der erro aqui, significa que o ID da notificação pode não ser um preapprovalId válido.\r\n-                // Mas a notificação é relevante, então a flag continua true e tentaremos buscar a empresa no DB depois.\r\n             }\r\n \r\n         } else if (notification.type === 'subscription_authorized_payment' && notification.data && notification.data.id) {\r\n-            const authorizedPaymentId = notification.data.id; // Este é o ID do authorized_payment\r\n-            console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Tipo 'subscription_authorized_payment' recebido. Authorized Payment ID: ${authorizedPaymentId}`);\r\n+            const authorizedPaymentId = notification.data.id;\r\n+            // console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Tipo 'subscription_authorized_payment' recebido. Authorized Payment ID: ${authorizedPaymentId}`);\r\n \r\n             try {\r\n-                // Tenta buscar o paymentDetails para obter o preapproval_id associado\r\n                 const payment = new Payment(client);\r\n                 const paymentDetails = await payment.get({ id: authorizedPaymentId });\r\n-                console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Detalhes do Authorized Payment ${authorizedPaymentId}: ${JSON.stringify(paymentDetails, null, 2)}`);\r\n+                // console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Detalhes do Authorized Payment ${authorizedPaymentId}: ${JSON.stringify(paymentDetails, null, 2)}`);\r\n \r\n-                preapprovalIdToLookUp = paymentDetails.point_of_interaction?.transaction_data?.subscription_id; // Pegar o subscription_id!\r\n-                statusFromMercadoPago = paymentDetails.status; // Status do pagamento autorizado\r\n+                preapprovalIdToLookUp = paymentDetails.point_of_interaction?.transaction_data?.subscription_id;\r\n+                statusFromMercadoPago = paymentDetails.status;\r\n                 \r\n                 if (preapprovalIdToLookUp) {\r\n-                    console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Preapproval ID ${preapprovalIdToLookUp} encontrado via authorized_payment.`);\r\n+                    // console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Preapproval ID ${preapprovalIdToLookUp} encontrado via authorized_payment.`);\r\n                     const preapproval = new PreApproval(client);\r\n                     const preapprovalDetails = await preapproval.get({ id: preapprovalIdToLookUp });\r\n                     nextPaymentDate = preapprovalDetails.next_payment_date;\r\n-                    statusFromMercadoPago = preapprovalDetails.status; // Usar o status da pré-aprovação para a lógica final\r\n-                    console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Preapproval ID ${preapprovalIdToLookUp} encontrado via authorized_payment. Status MP: ${statusFromMercadoPago}, Próximo Pagamento: ${nextPaymentDate}`);\r\n+                    statusFromMercadoPago = preapprovalDetails.status;\r\n+                    // console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Preapproval ID ${preapprovalIdToLookUp} encontrado via authorized_payment. Status MP: ${statusFromMercadoPago}, Próximo Pagamento: ${nextPaymentDate}`);\r\n                 }\r\n                 isRelevantNotification = true;\r\n \r\n             } catch (error) {\r\n                 console.error(`[MP WEBHOOK ERROR - SUBSCRIPTION_AUTHORIZED_PAYMENT] Erro ao buscar detalhes do authorized_payment ${authorizedPaymentId} ou preapproval associado:`, error);\r\n             }\r\n \r\n         } else {\r\n-            console.log(`[MP WEBHOOK DEBUG] Tipo de notificação não tratado ou sem 'data.id': ${notification.type}. Ignorando.`);\r\n+            // console.log(`[MP WEBHOOK DEBUG] Tipo de notificação não tratado ou sem 'data.id': ${notification.type}. Ignorando.`);\r\n             return res.sendStatus(200); \r\n         }\r\n-\r\n-        // --- Passo 2: Encontrar a empresa no seu DB usando o mercadopagoPreapprovalId ---\r\n+        \r\n         let companyToUpdate = null;\r\n         if (preapprovalIdToLookUp) {\r\n             companyToUpdate = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalIdToLookUp });\r\n             if (!companyToUpdate) {\r\n-                console.log(`[MP WEBHOOK] Empresa NÃO encontrada no DB para o mercadopagoPreapprovalId: ${preapprovalIdToLookUp}. Isso pode ocorrer se o ID na notificação não corresponder ao ID salvo.`);\r\n+                // console.log(`[MP WEBHOOK] Empresa NÃO encontrada no DB para o mercadopagoPreapprovalId: ${preapprovalIdToLookUp}. Isso pode ocorrer se o ID na notificação não corresponder ao ID salvo.`);\r\n             }\r\n         } else {\r\n-            console.log(`[MP WEBHOOK] Não foi possível obter um Preapproval ID da notificação para buscar a empresa no DB.`);\r\n+            // console.log(`[MP WEBHOOK] Não foi possível obter um Preapproval ID da notificação para buscar a empresa no DB.`);\r\n         }\r\n-\r\n-        // --- Passo 3: Se a empresa foi encontrada e o status do Mercado Pago é de sucesso ---\r\n-        // Adicionando 'pending' para teste. REMOVER em produção.\r\n-        if (companyToUpdate && (statusFromMercadoPago === 'approved' || statusFromMercadoPago === 'authorized' || statusFromMercadoPago === 'active' || statusFromMercadoPago === 'pending')) { // PARA TESTE: Adicionado 'pending'\r\n-            console.log(`[MP WEBHOOK] Tentando atualizar assinatura para empresa ${companyToUpdate.nomeEmpresa}. Status MP: ${statusFromMercadoPago}, Próximo pagamento: ${nextPaymentDate}`);\r\n+        \r\n+        if (companyToUpdate && (statusFromMercadoPago === 'approved' || statusFromMercadoPago === 'authorized' || statusFromMercadoPago === 'active' || statusFromMercadoPago === 'pending')) {\r\n+            // console.log(`[MP WEBHOOK] Tentando atualizar assinatura para empresa ${companyToUpdate.nomeEmpresa}. Status MP: ${statusFromMercadoPago}, Próximo pagamento: ${nextPaymentDate}`);\r\n             \r\n             const currentDbEndDate = companyToUpdate.subscription.endDate;\r\n             let shouldUpdate = false;\r\n-\r\n-            // Condição para mudar o status para 'active'\r\n+            \r\n             if (companyToUpdate.subscription.status !== 'active') {\r\n                 shouldUpdate = true;\r\n-                console.log(`[MP WEBHOOK] Status da assinatura de ${companyToUpdate.nomeEmpresa} mudará para 'active'.`);\r\n+                // console.log(`[MP WEBHOOK] Status da assinatura de ${companyToUpdate.nomeEmpresa} mudará para 'active'.`);\r\n             }\r\n-\r\n-            // Condição para atualizar a data de término\r\n+            \r\n             if (nextPaymentDate && (!currentDbEndDate || new Date(nextPaymentDate) > new Date(currentDbEndDate))) {\r\n                 shouldUpdate = true;\r\n-                console.log(`[MP WEBHOOK] Data de término da assinatura de ${companyToUpdate.nomeEmpresa} será atualizada para ${nextPaymentDate}.`);\r\n+                // console.log(`[MP WEBHOOK] Data de término da assinatura de ${companyToUpdate.nomeEmpresa} será atualizada para ${nextPaymentDate}.`);\r\n             } else if (!nextPaymentDate && statusFromMercadoPago === 'active') {\r\n-                // Fallback: Se MP diz 'active' mas não deu nextPaymentDate, e DB está vencida/nula\r\n                 if (!currentDbEndDate || new Date(currentDbEndDate) < new Date()) {\r\n                     shouldUpdate = true;\r\n-                    nextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 dias a partir de agora\r\n+                    nextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\r\n                     console.log(`[MP WEBHOOK] Definindo data de término padrão (30 dias) para ${companyToUpdate.nomeEmpresa} como fallback.`);\r\n                 }\r\n             }\r\n \r\n@@ -200,16 +189,16 @@\n                 companyToUpdate.subscription.status = 'active';\r\n                 companyToUpdate.subscription.endDate = nextPaymentDate ? new Date(nextPaymentDate) : companyToUpdate.subscription.endDate; \r\n                 await companyToUpdate.save();\r\n                 console.log(`---> SUCESSO: Assinatura da empresa ${companyToUpdate.nomeEmpresa} ATIVADA/ATUALIZADA.`);\r\n-                console.log(`[MP WEBHOOK DEBUG] Novo Status salvo no DB: ${companyToUpdate.subscription.status}`);\r\n-                console.log(`[MP WEBHOOK DEBUG] Nova Data de Término salva no DB: ${companyToUpdate.subscription.endDate ? companyToUpdate.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}`);\r\n+                // console.log(`[MP WEBHOOK DEBUG] Novo Status salvo no DB: ${companyToUpdate.subscription.status}`);\r\n+                // console.log(`[MP WEBHOOK DEBUG] Nova Data de Término salva no DB: ${companyToUpdate.subscription.endDate ? companyToUpdate.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}`);\r\n             } else {\r\n                 console.log(`[MP WEBHOOK] Assinatura da empresa ${companyToUpdate.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação no DB.`);\r\n             }\r\n         } else {\r\n-            console.log(`[MP WEBHOOK] Notificação processada, mas NÃO resultou em ativação (condições não atendidas ou empresa não encontrada).`);\r\n-            console.log(`[MP WEBHOOK] Final Preapproval ID: ${preapprovalIdToLookUp}, Status MP: ${statusFromMercadoPago}, Empresa encontrada no DB: ${!!companyToUpdate}`);\r\n+            // console.log(`[MP WEBHOOK] Notificação processada, mas NÃO resultou em ativação (condições não atendidas ou empresa não encontrada).`);\r\n+            // console.log(`[MP WEBHOOK] Final Preapproval ID: ${preapprovalIdToLookUp}, Status MP: ${statusFromMercadoPago}, Empresa encontrada no DB: ${!!companyToUpdate}`);\r\n         }\r\n         \r\n         res.sendStatus(200);\r\n \r\n@@ -218,6 +207,5 @@\n         res.sendStatus(500);\r\n     }\r\n });\r\n \r\n-\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753708369004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,140 +65,113 @@\n \r\n // Rota para receber notificações (webhooks) do Mercado Pago (pública)\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n-    // console.log('[MP WEBHOOK] Webhook recebido:', JSON.stringify(notification, null, 2));\r\n-    // console.log(`[MP WEBHOOK DEBUG] Tipo de Notificação: ${notification.type}, Data ID: ${notification.data.id}`);\r\n \r\n     try {\r\n         const masterDb = getMasterConnection();\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n+        const payment = new Payment(client);\r\n \r\n+        // =============================================================================\r\n+        //  NOVA LÓGICA PARA REEMBOLSOS E CHARGEBACKS\r\n+        // =============================================================================\r\n+        if (notification.type === 'payment' && (notification.action === 'refunded' || notification.action === 'chargebacked')) {\r\n+            const paymentId = notification.data.id;\r\n+            \r\n+            try {\r\n+                const paymentDetails = await payment.get({ id: paymentId });\r\n+                const preapprovalId = paymentDetails.point_of_interaction?.transaction_data?.subscription_id;\r\n+\r\n+                if (preapprovalId) {\r\n+                    // Encontramos a assinatura, agora vamos encontrar a empresa e cancelar\r\n+                    const companyToCancel = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n+\r\n+                    if (companyToCancel) {\r\n+                        companyToCancel.subscription.status = 'inactive';\r\n+                        // Opcional: Você pode limpar a data de expiração também\r\n+                        // companyToCancel.subscription.endDate = undefined;\r\n+                        await companyToCancel.save();\r\n+                        console.log(`---> SUCESSO: Assinatura da empresa ${companyToCancel.nomeEmpresa} cancelada devido a reembolso/chargeback.`);\r\n+                    }\r\n+                }\r\n+            } catch (error) {\r\n+                 // Este erro é esperado se o pagamento foi removido (caso de reembolso)\r\n+                if (error.status === 404) {\r\n+                    console.log(`[MP WEBHOOK] Recebido reembolso para um pagamento que não foi encontrado (ID: ${paymentId}). A lógica de cancelamento por ID de pagamento precisa ser implementada se necessário.`);\r\n+                } else {\r\n+                    console.error('[MP WEBHOOK ERROR - REFUND] Erro ao processar reembolso:', error);\r\n+                }\r\n+            }\r\n+            \r\n+            // Respondemos 200 OK para o Mercado Pago e paramos a execução aqui\r\n+            return res.sendStatus(200);\r\n+        }\r\n+        // =============================================================================\r\n+        //  FIM DA NOVA LÓGICA\r\n+        // =============================================================================\r\n+\r\n+\r\n+        // Lógica existente para ativação de assinatura (continua igual)\r\n         let preapprovalIdToLookUp = null;\r\n         let statusFromMercadoPago = null;\r\n         let nextPaymentDate = null;\r\n-        let isRelevantNotification = false;\r\n \r\n         if (notification.type === 'payment' && notification.data && notification.data.id) {\r\n             const paymentId = notification.data.id;\r\n-            // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`);\r\n-            \r\n             try {\r\n-                const payment = new Payment(client);\r\n                 const paymentDetails = await payment.get({ id: paymentId });\r\n-                // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes COMPLETOS do Pagamento ${paymentId}: ${JSON.stringify(paymentDetails, null, 2)}`);\r\n-                \r\n                 statusFromMercadoPago = paymentDetails.status;\r\n                 preapprovalIdToLookUp = paymentDetails.point_of_interaction?.transaction_data?.subscription_id;\r\n-                \r\n-                // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Status do Pagamento: ${statusFromMercadoPago}, Preapproval ID (do Point of Interaction): ${preapprovalIdToLookUp}`);\r\n-\r\n                 if (preapprovalIdToLookUp && statusFromMercadoPago === 'approved') {\r\n-                    // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento APROVADO. Buscando detalhes da pré-aprovação ${preapprovalIdToLookUp}...`);\r\n                     const preapproval = new PreApproval(client);\r\n                     const preapprovalDetails = await preapproval.get({ id: preapprovalIdToLookUp });\r\n                     nextPaymentDate = preapprovalDetails.next_payment_date;\r\n                     statusFromMercadoPago = preapprovalDetails.status;\r\n-                    // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes da Pré-aprovação ${preapprovalIdToLookUp} (via payment): Status -> ${statusFromMercadoPago}, Próximo pagamento -> ${nextPaymentDate}`);\r\n-                    isRelevantNotification = true;\r\n-                } else {\r\n-                    // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento não aprovado ou Preapproval ID ausente no POI para ID ${paymentId}. Status: ${statusFromMercadoPago}`);\r\n                 }\r\n             } catch (error) {\r\n                 console.error(`[MP WEBHOOK ERROR - PAYMENT] Erro ao buscar detalhes do pagamento ${paymentId} ou pré-aprovação associada:`, error);\r\n             }\r\n-\r\n         } else if (notification.type === 'preapproval' && notification.data && notification.data.id) {\r\n             preapprovalIdToLookUp = notification.data.id;\r\n-            // console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Tipo 'preapproval' recebido. ID da pré-aprovação: ${preapprovalIdToLookUp}`);\r\n-            \r\n             try {\r\n                 const preapproval = new PreApproval(client);\r\n                 const subscriptionDetails = await preapproval.get({ id: preapprovalIdToLookUp });\r\n                 statusFromMercadoPago = subscriptionDetails.status;\r\n                 nextPaymentDate = subscriptionDetails.next_payment_date;\r\n-                // console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Detalhes da Pré-aprovação ${preapprovalIdToLookUp} (via notificação direta): Status -> ${statusFromMercadoPago}, Próximo pagamento -> ${nextPaymentDate}`);\r\n-                isRelevantNotification = true;\r\n             } catch (error) {\r\n                 console.error(`[MP WEBHOOK ERROR - PREAPPROVAL] Erro ao buscar detalhes da pré-aprovação ${preapprovalIdToLookUp}:`, error);\r\n             }\r\n-\r\n-        } else if (notification.type === 'subscription_authorized_payment' && notification.data && notification.data.id) {\r\n-            const authorizedPaymentId = notification.data.id;\r\n-            // console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Tipo 'subscription_authorized_payment' recebido. Authorized Payment ID: ${authorizedPaymentId}`);\r\n-\r\n-            try {\r\n-                const payment = new Payment(client);\r\n-                const paymentDetails = await payment.get({ id: authorizedPaymentId });\r\n-                // console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Detalhes do Authorized Payment ${authorizedPaymentId}: ${JSON.stringify(paymentDetails, null, 2)}`);\r\n-\r\n-                preapprovalIdToLookUp = paymentDetails.point_of_interaction?.transaction_data?.subscription_id;\r\n-                statusFromMercadoPago = paymentDetails.status;\r\n-                \r\n-                if (preapprovalIdToLookUp) {\r\n-                    // console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Preapproval ID ${preapprovalIdToLookUp} encontrado via authorized_payment.`);\r\n-                    const preapproval = new PreApproval(client);\r\n-                    const preapprovalDetails = await preapproval.get({ id: preapprovalIdToLookUp });\r\n-                    nextPaymentDate = preapprovalDetails.next_payment_date;\r\n-                    statusFromMercadoPago = preapprovalDetails.status;\r\n-                    // console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Preapproval ID ${preapprovalIdToLookUp} encontrado via authorized_payment. Status MP: ${statusFromMercadoPago}, Próximo Pagamento: ${nextPaymentDate}`);\r\n-                }\r\n-                isRelevantNotification = true;\r\n-\r\n-            } catch (error) {\r\n-                console.error(`[MP WEBHOOK ERROR - SUBSCRIPTION_AUTHORIZED_PAYMENT] Erro ao buscar detalhes do authorized_payment ${authorizedPaymentId} ou preapproval associado:`, error);\r\n-            }\r\n-\r\n-        } else {\r\n-            // console.log(`[MP WEBHOOK DEBUG] Tipo de notificação não tratado ou sem 'data.id': ${notification.type}. Ignorando.`);\r\n-            return res.sendStatus(200); \r\n         }\r\n-        \r\n+        // ... (o restante da lógica de ativação continua aqui, sem alterações)\r\n         let companyToUpdate = null;\r\n         if (preapprovalIdToLookUp) {\r\n             companyToUpdate = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalIdToLookUp });\r\n-            if (!companyToUpdate) {\r\n-                // console.log(`[MP WEBHOOK] Empresa NÃO encontrada no DB para o mercadopagoPreapprovalId: ${preapprovalIdToLookUp}. Isso pode ocorrer se o ID na notificação não corresponder ao ID salvo.`);\r\n-            }\r\n-        } else {\r\n-            // console.log(`[MP WEBHOOK] Não foi possível obter um Preapproval ID da notificação para buscar a empresa no DB.`);\r\n         }\r\n         \r\n-        if (companyToUpdate && (statusFromMercadoPago === 'approved' || statusFromMercadoPago === 'authorized' || statusFromMercadoPago === 'active' || statusFromMercadoPago === 'pending')) {\r\n-            // console.log(`[MP WEBHOOK] Tentando atualizar assinatura para empresa ${companyToUpdate.nomeEmpresa}. Status MP: ${statusFromMercadoPago}, Próximo pagamento: ${nextPaymentDate}`);\r\n-            \r\n+        if (companyToUpdate && (statusFromMercadoPago === 'approved' || statusFromMercadoPago === 'authorized' || statusFromMercadoPago === 'active')) {\r\n             const currentDbEndDate = companyToUpdate.subscription.endDate;\r\n             let shouldUpdate = false;\r\n             \r\n             if (companyToUpdate.subscription.status !== 'active') {\r\n                 shouldUpdate = true;\r\n-                // console.log(`[MP WEBHOOK] Status da assinatura de ${companyToUpdate.nomeEmpresa} mudará para 'active'.`);\r\n             }\r\n             \r\n             if (nextPaymentDate && (!currentDbEndDate || new Date(nextPaymentDate) > new Date(currentDbEndDate))) {\r\n                 shouldUpdate = true;\r\n-                // console.log(`[MP WEBHOOK] Data de término da assinatura de ${companyToUpdate.nomeEmpresa} será atualizada para ${nextPaymentDate}.`);\r\n             } else if (!nextPaymentDate && statusFromMercadoPago === 'active') {\r\n                 if (!currentDbEndDate || new Date(currentDbEndDate) < new Date()) {\r\n                     shouldUpdate = true;\r\n                     nextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\r\n-                    console.log(`[MP WEBHOOK] Definindo data de término padrão (30 dias) para ${companyToUpdate.nomeEmpresa} como fallback.`);\r\n                 }\r\n             }\r\n \r\n             if (shouldUpdate) {\r\n                 companyToUpdate.subscription.status = 'active';\r\n                 companyToUpdate.subscription.endDate = nextPaymentDate ? new Date(nextPaymentDate) : companyToUpdate.subscription.endDate; \r\n                 await companyToUpdate.save();\r\n                 console.log(`---> SUCESSO: Assinatura da empresa ${companyToUpdate.nomeEmpresa} ATIVADA/ATUALIZADA.`);\r\n-                // console.log(`[MP WEBHOOK DEBUG] Novo Status salvo no DB: ${companyToUpdate.subscription.status}`);\r\n-                // console.log(`[MP WEBHOOK DEBUG] Nova Data de Término salva no DB: ${companyToUpdate.subscription.endDate ? companyToUpdate.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}`);\r\n-            } else {\r\n-                console.log(`[MP WEBHOOK] Assinatura da empresa ${companyToUpdate.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação no DB.`);\r\n             }\r\n-        } else {\r\n-            // console.log(`[MP WEBHOOK] Notificação processada, mas NÃO resultou em ativação (condições não atendidas ou empresa não encontrada).`);\r\n-            // console.log(`[MP WEBHOOK] Final Preapproval ID: ${preapprovalIdToLookUp}, Status MP: ${statusFromMercadoPago}, Empresa encontrada no DB: ${!!companyToUpdate}`);\r\n         }\r\n         \r\n         res.sendStatus(200);\r\n \r\n"
                },
                {
                    "date": 1753709890633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,113 +65,140 @@\n \r\n // Rota para receber notificações (webhooks) do Mercado Pago (pública)\r\n router.post('/webhook', async (req, res) => {\r\n     const notification = req.body;\r\n+    // console.log('[MP WEBHOOK] Webhook recebido:', JSON.stringify(notification, null, 2));\r\n+    // console.log(`[MP WEBHOOK DEBUG] Tipo de Notificação: ${notification.type}, Data ID: ${notification.data.id}`);\r\n \r\n     try {\r\n         const masterDb = getMasterConnection();\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n-        const payment = new Payment(client);\r\n \r\n-        // =============================================================================\r\n-        //  NOVA LÓGICA PARA REEMBOLSOS E CHARGEBACKS\r\n-        // =============================================================================\r\n-        if (notification.type === 'payment' && (notification.action === 'refunded' || notification.action === 'chargebacked')) {\r\n-            const paymentId = notification.data.id;\r\n-            \r\n-            try {\r\n-                const paymentDetails = await payment.get({ id: paymentId });\r\n-                const preapprovalId = paymentDetails.point_of_interaction?.transaction_data?.subscription_id;\r\n-\r\n-                if (preapprovalId) {\r\n-                    // Encontramos a assinatura, agora vamos encontrar a empresa e cancelar\r\n-                    const companyToCancel = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalId });\r\n-\r\n-                    if (companyToCancel) {\r\n-                        companyToCancel.subscription.status = 'inactive';\r\n-                        // Opcional: Você pode limpar a data de expiração também\r\n-                        // companyToCancel.subscription.endDate = undefined;\r\n-                        await companyToCancel.save();\r\n-                        console.log(`---> SUCESSO: Assinatura da empresa ${companyToCancel.nomeEmpresa} cancelada devido a reembolso/chargeback.`);\r\n-                    }\r\n-                }\r\n-            } catch (error) {\r\n-                 // Este erro é esperado se o pagamento foi removido (caso de reembolso)\r\n-                if (error.status === 404) {\r\n-                    console.log(`[MP WEBHOOK] Recebido reembolso para um pagamento que não foi encontrado (ID: ${paymentId}). A lógica de cancelamento por ID de pagamento precisa ser implementada se necessário.`);\r\n-                } else {\r\n-                    console.error('[MP WEBHOOK ERROR - REFUND] Erro ao processar reembolso:', error);\r\n-                }\r\n-            }\r\n-            \r\n-            // Respondemos 200 OK para o Mercado Pago e paramos a execução aqui\r\n-            return res.sendStatus(200);\r\n-        }\r\n-        // =============================================================================\r\n-        //  FIM DA NOVA LÓGICA\r\n-        // =============================================================================\r\n-\r\n-\r\n-        // Lógica existente para ativação de assinatura (continua igual)\r\n         let preapprovalIdToLookUp = null;\r\n         let statusFromMercadoPago = null;\r\n         let nextPaymentDate = null;\r\n+        let isRelevantNotification = false;\r\n \r\n         if (notification.type === 'payment' && notification.data && notification.data.id) {\r\n             const paymentId = notification.data.id;\r\n+            // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Tipo 'payment' recebido. ID do pagamento: ${paymentId}`);\r\n+            \r\n             try {\r\n+                const payment = new Payment(client);\r\n                 const paymentDetails = await payment.get({ id: paymentId });\r\n+                // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes COMPLETOS do Pagamento ${paymentId}: ${JSON.stringify(paymentDetails, null, 2)}`);\r\n+                \r\n                 statusFromMercadoPago = paymentDetails.status;\r\n                 preapprovalIdToLookUp = paymentDetails.point_of_interaction?.transaction_data?.subscription_id;\r\n+                \r\n+                // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Status do Pagamento: ${statusFromMercadoPago}, Preapproval ID (do Point of Interaction): ${preapprovalIdToLookUp}`);\r\n+\r\n                 if (preapprovalIdToLookUp && statusFromMercadoPago === 'approved') {\r\n+                    // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento APROVADO. Buscando detalhes da pré-aprovação ${preapprovalIdToLookUp}...`);\r\n                     const preapproval = new PreApproval(client);\r\n                     const preapprovalDetails = await preapproval.get({ id: preapprovalIdToLookUp });\r\n                     nextPaymentDate = preapprovalDetails.next_payment_date;\r\n                     statusFromMercadoPago = preapprovalDetails.status;\r\n+                    // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Detalhes da Pré-aprovação ${preapprovalIdToLookUp} (via payment): Status -> ${statusFromMercadoPago}, Próximo pagamento -> ${nextPaymentDate}`);\r\n+                    isRelevantNotification = true;\r\n+                } else {\r\n+                    // console.log(`[MP WEBHOOK DEBUG - PAYMENT] Pagamento não aprovado ou Preapproval ID ausente no POI para ID ${paymentId}. Status: ${statusFromMercadoPago}`);\r\n                 }\r\n             } catch (error) {\r\n                 console.error(`[MP WEBHOOK ERROR - PAYMENT] Erro ao buscar detalhes do pagamento ${paymentId} ou pré-aprovação associada:`, error);\r\n             }\r\n+\r\n         } else if (notification.type === 'preapproval' && notification.data && notification.data.id) {\r\n             preapprovalIdToLookUp = notification.data.id;\r\n+            // console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Tipo 'preapproval' recebido. ID da pré-aprovação: ${preapprovalIdToLookUp}`);\r\n+            \r\n             try {\r\n                 const preapproval = new PreApproval(client);\r\n                 const subscriptionDetails = await preapproval.get({ id: preapprovalIdToLookUp });\r\n                 statusFromMercadoPago = subscriptionDetails.status;\r\n                 nextPaymentDate = subscriptionDetails.next_payment_date;\r\n+                // console.log(`[MP WEBHOOK DEBUG - PREAPPROVAL] Detalhes da Pré-aprovação ${preapprovalIdToLookUp} (via notificação direta): Status -> ${statusFromMercadoPago}, Próximo pagamento -> ${nextPaymentDate}`);\r\n+                isRelevantNotification = true;\r\n             } catch (error) {\r\n                 console.error(`[MP WEBHOOK ERROR - PREAPPROVAL] Erro ao buscar detalhes da pré-aprovação ${preapprovalIdToLookUp}:`, error);\r\n             }\r\n+\r\n+        } else if (notification.type === 'subscription_authorized_payment' && notification.data && notification.data.id) {\r\n+            const authorizedPaymentId = notification.data.id;\r\n+            // console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Tipo 'subscription_authorized_payment' recebido. Authorized Payment ID: ${authorizedPaymentId}`);\r\n+\r\n+            try {\r\n+                const payment = new Payment(client);\r\n+                const paymentDetails = await payment.get({ id: authorizedPaymentId });\r\n+                // console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Detalhes do Authorized Payment ${authorizedPaymentId}: ${JSON.stringify(paymentDetails, null, 2)}`);\r\n+\r\n+                preapprovalIdToLookUp = paymentDetails.point_of_interaction?.transaction_data?.subscription_id;\r\n+                statusFromMercadoPago = paymentDetails.status;\r\n+                \r\n+                if (preapprovalIdToLookUp) {\r\n+                    // console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Preapproval ID ${preapprovalIdToLookUp} encontrado via authorized_payment.`);\r\n+                    const preapproval = new PreApproval(client);\r\n+                    const preapprovalDetails = await preapproval.get({ id: preapprovalIdToLookUp });\r\n+                    nextPaymentDate = preapprovalDetails.next_payment_date;\r\n+                    statusFromMercadoPago = preapprovalDetails.status;\r\n+                    // console.log(`[MP WEBHOOK DEBUG - SUBSCRIPTION_AUTHORIZED_PAYMENT] Preapproval ID ${preapprovalIdToLookUp} encontrado via authorized_payment. Status MP: ${statusFromMercadoPago}, Próximo Pagamento: ${nextPaymentDate}`);\r\n+                }\r\n+                isRelevantNotification = true;\r\n+\r\n+            } catch (error) {\r\n+                console.error(`[MP WEBHOOK ERROR - SUBSCRIPTION_AUTHORIZED_PAYMENT] Erro ao buscar detalhes do authorized_payment ${authorizedPaymentId} ou preapproval associado:`, error);\r\n+            }\r\n+\r\n+        } else {\r\n+            // console.log(`[MP WEBHOOK DEBUG] Tipo de notificação não tratado ou sem 'data.id': ${notification.type}. Ignorando.`);\r\n+            return res.sendStatus(200); \r\n         }\r\n-        // ... (o restante da lógica de ativação continua aqui, sem alterações)\r\n+        \r\n         let companyToUpdate = null;\r\n         if (preapprovalIdToLookUp) {\r\n             companyToUpdate = await MasterCompany.findOne({ 'subscription.mercadopagoPreapprovalId': preapprovalIdToLookUp });\r\n+            if (!companyToUpdate) {\r\n+                // console.log(`[MP WEBHOOK] Empresa NÃO encontrada no DB para o mercadopagoPreapprovalId: ${preapprovalIdToLookUp}. Isso pode ocorrer se o ID na notificação não corresponder ao ID salvo.`);\r\n+            }\r\n+        } else {\r\n+            // console.log(`[MP WEBHOOK] Não foi possível obter um Preapproval ID da notificação para buscar a empresa no DB.`);\r\n         }\r\n         \r\n-        if (companyToUpdate && (statusFromMercadoPago === 'approved' || statusFromMercadoPago === 'authorized' || statusFromMercadoPago === 'active')) {\r\n+        if (companyToUpdate && (statusFromMercadoPago === 'approved' || statusFromMercadoPago === 'authorized' || statusFromMercadoPago === 'active' || statusFromMercadoPago === 'pending')) {\r\n+            // console.log(`[MP WEBHOOK] Tentando atualizar assinatura para empresa ${companyToUpdate.nomeEmpresa}. Status MP: ${statusFromMercadoPago}, Próximo pagamento: ${nextPaymentDate}`);\r\n+            \r\n             const currentDbEndDate = companyToUpdate.subscription.endDate;\r\n             let shouldUpdate = false;\r\n             \r\n             if (companyToUpdate.subscription.status !== 'active') {\r\n                 shouldUpdate = true;\r\n+                // console.log(`[MP WEBHOOK] Status da assinatura de ${companyToUpdate.nomeEmpresa} mudará para 'active'.`);\r\n             }\r\n             \r\n             if (nextPaymentDate && (!currentDbEndDate || new Date(nextPaymentDate) > new Date(currentDbEndDate))) {\r\n                 shouldUpdate = true;\r\n+                // console.log(`[MP WEBHOOK] Data de término da assinatura de ${companyToUpdate.nomeEmpresa} será atualizada para ${nextPaymentDate}.`);\r\n             } else if (!nextPaymentDate && statusFromMercadoPago === 'active') {\r\n                 if (!currentDbEndDate || new Date(currentDbEndDate) < new Date()) {\r\n                     shouldUpdate = true;\r\n                     nextPaymentDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\r\n+                    console.log(`[MP WEBHOOK] Definindo data de término padrão (30 dias) para ${companyToUpdate.nomeEmpresa} como fallback.`);\r\n                 }\r\n             }\r\n \r\n             if (shouldUpdate) {\r\n                 companyToUpdate.subscription.status = 'active';\r\n                 companyToUpdate.subscription.endDate = nextPaymentDate ? new Date(nextPaymentDate) : companyToUpdate.subscription.endDate; \r\n                 await companyToUpdate.save();\r\n                 console.log(`---> SUCESSO: Assinatura da empresa ${companyToUpdate.nomeEmpresa} ATIVADA/ATUALIZADA.`);\r\n+                // console.log(`[MP WEBHOOK DEBUG] Novo Status salvo no DB: ${companyToUpdate.subscription.status}`);\r\n+                // console.log(`[MP WEBHOOK DEBUG] Nova Data de Término salva no DB: ${companyToUpdate.subscription.endDate ? companyToUpdate.subscription.endDate.toLocaleDateString('pt-BR') : 'N/A'}`);\r\n+            } else {\r\n+                console.log(`[MP WEBHOOK] Assinatura da empresa ${companyToUpdate.nomeEmpresa} já está ativa e atualizada ou não precisa de alteração. Nenhuma ação no DB.`);\r\n             }\r\n+        } else {\r\n+            // console.log(`[MP WEBHOOK] Notificação processada, mas NÃO resultou em ativação (condições não atendidas ou empresa não encontrada).`);\r\n+            // console.log(`[MP WEBHOOK] Final Preapproval ID: ${preapprovalIdToLookUp}, Status MP: ${statusFromMercadoPago}, Empresa encontrada no DB: ${!!companyToUpdate}`);\r\n         }\r\n         \r\n         res.sendStatus(200);\r\n \r\n"
                },
                {
                    "date": 1754506102915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const router = express.Router();\r\n const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n \r\n // Importamos o schema do Mestre e a função para obter a conexão Mestre\r\n-const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n+const { schema: MasterCompanySchema} = require('../models/MasterCompany');\r\n const { getMasterConnection } = require('../config/db');\r\n const { protect } = require('../middleware/authMiddleware');\r\n \r\n // Cliente do Mercado Pago\r\n"
                },
                {
                    "date": 1754506126966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const router = express.Router();\r\n const { MercadoPagoConfig, PreApproval, Payment } = require('mercadopago');\r\n \r\n // Importamos o schema do Mestre e a função para obter a conexão Mestre\r\n-const { schema: MasterCompanySchema} = require('../models/MasterCompany');\r\n+const { schema: MasterCompanySchema } = require('../models/MasterCompany');\r\n const { getMasterConnection } = require('../config/db');\r\n const { protect } = require('../middleware/authMiddleware');\r\n \r\n // Cliente do Mercado Pago\r\n"
                },
                {
                    "date": 1754666093286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n                 frequency_type: 'months',\r\n                 transaction_amount: 40.00,\r\n                 currency_id: 'BRL'\r\n             },\r\n-            back_url: 'http://127.0.0.1:5500/OrgBoletos.html',\r\n+            back_url: 'http://127.0.0.1:5500/orgboletos.html',\r\n             payer_email: company.email || '' // Usa o email da empresa ou string vazia\r\n         };\r\n \r\n         const preapproval = new PreApproval(client);\r\n"
                },
                {
                    "date": 1754667227938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n                 frequency_type: 'months',\r\n                 transaction_amount: 40.00,\r\n                 currency_id: 'BRL'\r\n             },\r\n-            back_url: 'http://127.0.0.1:5500/orgboletos.html',\r\n+            back_url: `${process.env.FRONTEND_BASE_URL}/orgboletos.html`,\r\n             payer_email: company.email || '' // Usa o email da empresa ou string vazia\r\n         };\r\n \r\n         const preapproval = new PreApproval(client);\r\n"
                }
            ],
            "date": 1752529411292,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst mercadopago = require('mercadopago');\r\nconst { protect } = require('../middleware/authMiddleware');\r\nconst Company = require('../models/Company');\r\n\r\n// Configura o Mercado Pago com o seu Access Token\r\nmercadopago.configure({\r\n    access_token: process.env.MERCADO_PAGO_ACCESS_TOKEN,\r\n});\r\n\r\n// Rota para criar o link de assinatura\r\nrouter.post('/create-subscription', protect, async (req, res) => {\r\n    // Apenas o Proprietário pode criar uma assinatura para a sua empresa\r\n    if (req.user.role !== 'Proprietário') {\r\n        return res.status(403).json({ message: 'Apenas o proprietário da empresa pode iniciar uma assinatura.' });\r\n    }\r\n\r\n    try {\r\n        const companyId = req.user.companyId;\r\n        const company = await Company.findById(companyId);\r\n        if (!company) {\r\n            return res.status(404).json({ message: 'Empresa não encontrada.' });\r\n        }\r\n\r\n        // Define os detalhes do plano de assinatura\r\n        const plan = {\r\n            reason: 'Assinatura Mensal - Organizador de Boletos',\r\n            auto_recurring: {\r\n                frequency: 1,\r\n                frequency_type: 'months',\r\n                transaction_amount: 0.90, // Defina o valor da sua mensalidade aqui\r\n                currency_id: 'BRL'\r\n            },\r\n            back_url: 'https://seusite.com/success', // URL para onde o cliente volta após o sucesso\r\n            payer_email: company.email\r\n        };\r\n\r\n        // Cria a preferência de pagamento no Mercado Pago\r\n        const response = await mercadopago.preapproval.create(plan);\r\n        \r\n        // Retorna o link de checkout para o frontend\r\n        res.status(200).json({ init_point: response.body.init_point });\r\n\r\n    } catch (error) {\r\n        console.error('Erro ao criar assinatura no Mercado Pago:', error);\r\n        res.status(500).json({ message: 'Não foi possível gerar o link de pagamento.' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"
        }
    ]
}