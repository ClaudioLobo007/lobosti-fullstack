{
    "sourceFile": "Servidor/middleware/tenantMiddleware.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1753535938812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753536428139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,15 @@\n const { getTenantConnection } = require('../config/db');\r\n \r\n const tenantMiddleware = async (req, res, next) => {\r\n     try {\r\n-        // O 'protect' middleware já rodou, então temos req.user\r\n+        // NOVO: Se o usuário for SuperAdmin, ele não tem um banco de dados de empresa.\r\n+        // Simplesmente pulamos este middleware e continuamos para a próxima etapa.\r\n+        if (req.user && req.user.role === 'SuperAdmin') {\r\n+            return next();\r\n+        }\r\n+\r\n+        // O código antigo para usuários normais continua abaixo\r\n         if (!req.user || !req.user.companyId) {\r\n             return res.status(401).json({ message: 'Informações de usuário ou empresa ausentes no token.' });\r\n         }\r\n \r\n@@ -12,11 +18,9 @@\n         if (!company || !company.dbName) {\r\n             return res.status(404).json({ message: 'Empresa não encontrada no registro mestre.' });\r\n         }\r\n \r\n-        // Obtém a conexão para o banco da empresa\r\n         req.tenantDb = await getTenantConnection(company.dbName);\r\n-        // Anexa os dados da empresa (permissões, etc.) para uso nas rotas\r\n         req.company = company;\r\n         next();\r\n \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1753537702878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,27 @@\n-const MasterCompany = require('../models/MasterCompany');\r\n-const { getTenantConnection } = require('../config/db');\r\n+const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n \r\n+// CORREÇÃO: Importamos a função para OBTER a conexão mestre, além da de tenant\r\n+const { getTenantConnection, getMasterConnection } = require('../config/db');\r\n+\r\n const tenantMiddleware = async (req, res, next) => {\r\n     try {\r\n-        // NOVO: Se o usuário for SuperAdmin, ele não tem um banco de dados de empresa.\r\n-        // Simplesmente pulamos este middleware e continuamos para a próxima etapa.\r\n         if (req.user && req.user.role === 'SuperAdmin') {\r\n             return next();\r\n         }\r\n-\r\n-        // O código antigo para usuários normais continua abaixo\r\n+        \r\n         if (!req.user || !req.user.companyId) {\r\n             return res.status(401).json({ message: 'Informações de usuário ou empresa ausentes no token.' });\r\n         }\r\n \r\n+        // --- CORREÇÃO PRINCIPAL AQUI ---\r\n+        // 1. Obtém a conexão Mestre que já está ativa.\r\n+        const masterDb = getMasterConnection();\r\n+        // 2. Compila o modelo MasterCompany usando essa conexão.\r\n+        const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n+        // --- FIM DA CORREÇÃO ---\r\n+\r\n+        // 3. Agora a busca será feita na conexão correta, sem timeout.\r\n         const company = await MasterCompany.findById(req.user.companyId);\r\n         if (!company || !company.dbName) {\r\n             return res.status(404).json({ message: 'Empresa não encontrada no registro mestre.' });\r\n         }\r\n"
                },
                {
                    "date": 1753813621466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,38 @@\n const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n-\r\n-// CORREÇÃO: Importamos a função para OBTER a conexão mestre, além da de tenant\r\n const { getTenantConnection, getMasterConnection } = require('../config/db');\r\n \r\n const tenantMiddleware = async (req, res, next) => {\r\n     try {\r\n-        if (req.user && req.user.role === 'SuperAdmin') {\r\n+        const masterDb = getMasterConnection();\r\n+        const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n+        let companyId;\r\n+\r\n+        // CASO 1: SuperAdmin a criar um utilizador para uma empresa\r\n+        // A companyId virá no corpo do pedido (body)\r\n+        if (req.user.role === 'SuperAdmin' && req.body.companyId) {\r\n+            companyId = req.body.companyId;\r\n+\r\n+        // CASO 2: Utilizador normal (ou admin a representar)\r\n+        // A companyId vem do token de autenticação\r\n+        } else if (req.user && req.user.companyId) {\r\n+            companyId = req.user.companyId;\r\n+\r\n+        // CASO 3: SuperAdmin a agir sem especificar uma empresa (ex: listar todas as empresas)\r\n+        } else if (req.user.role === 'SuperAdmin') {\r\n+            // Para o SuperAdmin, o tenantDb não é estritamente necessário em todas as rotas.\r\n+            // A rota específica será responsável por obter a conexão se precisar.\r\n             return next();\r\n+        } else {\r\n+            return res.status(401).json({ message: 'Informações da empresa não encontradas.' });\r\n         }\r\n-        \r\n-        if (!req.user || !req.user.companyId) {\r\n-            return res.status(401).json({ message: 'Informações de usuário ou empresa ausentes no token.' });\r\n-        }\r\n \r\n-        // --- CORREÇÃO PRINCIPAL AQUI ---\r\n-        // 1. Obtém a conexão Mestre que já está ativa.\r\n-        const masterDb = getMasterConnection();\r\n-        // 2. Compila o modelo MasterCompany usando essa conexão.\r\n-        const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n-        // --- FIM DA CORREÇÃO ---\r\n-\r\n-        // 3. Agora a busca será feita na conexão correta, sem timeout.\r\n-        const company = await MasterCompany.findById(req.user.companyId);\r\n+        const company = await MasterCompany.findById(companyId);\r\n         if (!company || !company.dbName) {\r\n             return res.status(404).json({ message: 'Empresa não encontrada no registro mestre.' });\r\n         }\r\n \r\n+        // Anexa a conexão e os dados da empresa ao pedido\r\n         req.tenantDb = await getTenantConnection(company.dbName);\r\n         req.company = company;\r\n         next();\r\n \r\n"
                },
                {
                    "date": 1753813882879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,32 @@\n const MasterCompanySchema = require('../models/MasterCompany').schema;\r\n+\r\n+// CORREÇÃO: Importamos a função para OBTER a conexão mestre, além da de tenant\r\n const { getTenantConnection, getMasterConnection } = require('../config/db');\r\n \r\n const tenantMiddleware = async (req, res, next) => {\r\n     try {\r\n+        if (req.user && req.user.role === 'SuperAdmin') {\r\n+            return next();\r\n+        }\r\n+        \r\n+        if (!req.user || !req.user.companyId) {\r\n+            return res.status(401).json({ message: 'Informações de usuário ou empresa ausentes no token.' });\r\n+        }\r\n+\r\n+        // --- CORREÇÃO PRINCIPAL AQUI ---\r\n+        // 1. Obtém a conexão Mestre que já está ativa.\r\n         const masterDb = getMasterConnection();\r\n+        // 2. Compila o modelo MasterCompany usando essa conexão.\r\n         const MasterCompany = masterDb.model('MasterCompany', MasterCompanySchema);\r\n-        let companyId;\r\n+        // --- FIM DA CORREÇÃO ---\r\n \r\n-        // CASO 1: SuperAdmin a criar um utilizador para uma empresa\r\n-        // A companyId virá no corpo do pedido (body)\r\n-        if (req.user.role === 'SuperAdmin' && req.body.companyId) {\r\n-            companyId = req.body.companyId;\r\n-\r\n-        // CASO 2: Utilizador normal (ou admin a representar)\r\n-        // A companyId vem do token de autenticação\r\n-        } else if (req.user && req.user.companyId) {\r\n-            companyId = req.user.companyId;\r\n-\r\n-        // CASO 3: SuperAdmin a agir sem especificar uma empresa (ex: listar todas as empresas)\r\n-        } else if (req.user.role === 'SuperAdmin') {\r\n-            // Para o SuperAdmin, o tenantDb não é estritamente necessário em todas as rotas.\r\n-            // A rota específica será responsável por obter a conexão se precisar.\r\n-            return next();\r\n-        } else {\r\n-            return res.status(401).json({ message: 'Informações da empresa não encontradas.' });\r\n-        }\r\n-\r\n-        const company = await MasterCompany.findById(companyId);\r\n+        // 3. Agora a busca será feita na conexão correta, sem timeout.\r\n+        const company = await MasterCompany.findById(req.user.companyId);\r\n         if (!company || !company.dbName) {\r\n             return res.status(404).json({ message: 'Empresa não encontrada no registro mestre.' });\r\n         }\r\n \r\n-        // Anexa a conexão e os dados da empresa ao pedido\r\n         req.tenantDb = await getTenantConnection(company.dbName);\r\n         req.company = company;\r\n         next();\r\n \r\n"
                }
            ],
            "date": 1753535938812,
            "name": "Commit-0",
            "content": "const MasterCompany = require('../models/MasterCompany');\r\nconst { getTenantConnection } = require('../config/db');\r\n\r\nconst tenantMiddleware = async (req, res, next) => {\r\n    try {\r\n        // O 'protect' middleware já rodou, então temos req.user\r\n        if (!req.user || !req.user.companyId) {\r\n            return res.status(401).json({ message: 'Informações de usuário ou empresa ausentes no token.' });\r\n        }\r\n\r\n        const company = await MasterCompany.findById(req.user.companyId);\r\n        if (!company || !company.dbName) {\r\n            return res.status(404).json({ message: 'Empresa não encontrada no registro mestre.' });\r\n        }\r\n\r\n        // Obtém a conexão para o banco da empresa\r\n        req.tenantDb = await getTenantConnection(company.dbName);\r\n        // Anexa os dados da empresa (permissões, etc.) para uso nas rotas\r\n        req.company = company;\r\n        next();\r\n\r\n    } catch (error) {\r\n        console.error(\"Erro no middleware de tenant:\", error);\r\n        return res.status(500).json({ message: 'Erro ao processar a requisição da empresa.' });\r\n    }\r\n};\r\n\r\nmodule.exports = { tenantMiddleware };"
        }
    ]
}