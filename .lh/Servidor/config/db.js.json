{
    "sourceFile": "Servidor/config/db.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1753535607270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753537290372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,37 @@\n const mongoose = require('mongoose');\r\n require('dotenv').config();\r\n \r\n-// Conexão Principal com o Banco MESTRE\r\n const masterDbUri = process.env.MONGODB_URI;\r\n-const masterConnection = mongoose.createConnection(masterDbUri);\r\n \r\n-masterConnection.on('connected', () => {\r\n-    console.log('Conectado ao MongoDB Mestre com sucesso!');\r\n-});\r\n-masterConnection.on('error', (err) => {\r\n-    console.error('Falha ao conectar ao MongoDB Mestre:', err);\r\n-});\r\n-\r\n-// Lógica para Conexões Dinâmicas com os Bancos das Empresas (Tenants)\r\n+let masterConnection;\r\n const tenantConnections = {};\r\n \r\n+// Função principal para conectar ao banco Mestre\r\n+const connectToMasterDB = async () => {\r\n+    try {\r\n+        // Usamos .asPromise() para garantir que podemos esperar a conexão ser concluída\r\n+        masterConnection = await mongoose.createConnection(masterDbUri).asPromise();\r\n+        console.log('Conectado ao MongoDB Mestre com sucesso!');\r\n+    } catch (error) {\r\n+        console.error('Falha CRÍTICA ao conectar ao MongoDB Mestre:', error);\r\n+        // Se não conseguirmos conectar ao banco principal, o servidor não deve iniciar.\r\n+        process.exit(1);\r\n+    }\r\n+};\r\n+\r\n+// Função para obter a conexão Mestre já estabelecida\r\n+const getMasterConnection = () => masterConnection;\r\n+\r\n+// Função para obter/criar conexões das empresas (nenhuma mudança aqui)\r\n async function getTenantConnection(dbName) {\r\n     if (tenantConnections[dbName] && tenantConnections[dbName].readyState === 1) {\r\n         return tenantConnections[dbName];\r\n\\ No newline at end of file\n     }\r\n-\r\n     const tenantDbUri = masterDbUri.replace(/\\/[^/]+$/, `/${dbName}`);\r\n-    const newConnection = mongoose.createConnection(tenantDbUri);\r\n-\r\n-    newConnection.on('connected', () => {\r\n-        console.log(`Conectado ao banco de dados da empresa: ${dbName}`);\r\n-    });\r\n-    newConnection.on('error', (err) => {\r\n-        console.error(`Falha ao conectar ao banco de dados ${dbName}:`, err);\r\n-    });\r\n-\r\n+    const newConnection = await mongoose.createConnection(tenantDbUri).asPromise();\r\n+    console.log(`Conectado ao banco de dados da empresa: ${dbName}`);\r\n     tenantConnections[dbName] = newConnection;\r\n     return newConnection;\r\n }\r\n \r\n-// Exporta as funções e conexões para serem usadas em outros lugares\r\n-module.exports = { masterConnection, getTenantConnection };\n+module.exports = { connectToMasterDB, getMasterConnection, getTenantConnection };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754502149334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,5 +33,18 @@\n     tenantConnections[dbName] = newConnection;\r\n     return newConnection;\r\n }\r\n \r\n-module.exports = { connectToMasterDB, getMasterConnection, getTenantConnection };\n\\ No newline at end of file\n+const closeAllConnections = async () => {\r\n+    // Inicia um array de promessas com o fecho da conexão mestre\r\n+    const closePromises = [masterConnection.close()];\r\n+\r\n+    // Adiciona uma promessa de fecho para cada conexão de tenant ativa\r\n+    for (const dbName in tenantConnections) {\r\n+        closePromises.push(tenantConnections[dbName].close());\r\n+    }\r\n+\r\n+    // Espera que todas as conexões sejam fechadas em paralelo\r\n+    await Promise.all(closePromises);\r\n+};\r\n+\r\n+module.exports = { connectToMasterDB, getMasterConnection, getTenantConnection, closeAllConnections };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754502305906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,18 +33,7 @@\n     tenantConnections[dbName] = newConnection;\r\n     return newConnection;\r\n }\r\n \r\n-const closeAllConnections = async () => {\r\n-    // Inicia um array de promessas com o fecho da conexão mestre\r\n-    const closePromises = [masterConnection.close()];\r\n \r\n-    // Adiciona uma promessa de fecho para cada conexão de tenant ativa\r\n-    for (const dbName in tenantConnections) {\r\n-        closePromises.push(tenantConnections[dbName].close());\r\n-    }\r\n \r\n-    // Espera que todas as conexões sejam fechadas em paralelo\r\n-    await Promise.all(closePromises);\r\n-};\r\n-\r\n-module.exports = { connectToMasterDB, getMasterConnection, getTenantConnection, closeAllConnections };\n\\ No newline at end of file\n+module.exports = { connectToMasterDB, getMasterConnection, getTenantConnection };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754502445351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,7 +33,20 @@\n     tenantConnections[dbName] = newConnection;\r\n     return newConnection;\r\n }\r\n \r\n+// NOVA FUNÇÃO para fechar todas as conexões\r\n+const closeAllConnections = async () => {\r\n+    // Inicia um array de promessas com o fecho da conexão mestre\r\n\\ No newline at end of file\n+    const closePromises = [masterConnection.close()];\r\n \r\n+    // Adiciona uma promessa de fecho para cada conexão de tenant ativa\r\n+    for (const dbName in tenantConnections) {\r\n+        closePromises.push(tenantConnections[dbName].close());\r\n+    }\r\n \r\n-module.exports = { connectToMasterDB, getMasterConnection, getTenantConnection };\n+    // Espera que todas as conexões sejam fechadas em paralelo\r\n+    await Promise.all(closePromises);\r\n+};\r\n+\r\n+// ATUALIZE a linha module.exports para incluir a nova função\r\n+module.exports = { connectToMasterDB, getMasterConnection, getTenantConnection, closeAllConnections };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754507614797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,25 +5,26 @@\n \r\n let masterConnection;\r\n const tenantConnections = {};\r\n \r\n-// Função principal para conectar ao banco Mestre\r\n const connectToMasterDB = async () => {\r\n     try {\r\n-        // Usamos .asPromise() para garantir que podemos esperar a conexão ser concluída\r\n         masterConnection = await mongoose.createConnection(masterDbUri).asPromise();\r\n         console.log('Conectado ao MongoDB Mestre com sucesso!');\r\n     } catch (error) {\r\n         console.error('Falha CRÍTICA ao conectar ao MongoDB Mestre:', error);\r\n-        // Se não conseguirmos conectar ao banco principal, o servidor não deve iniciar.\r\n         process.exit(1);\r\n     }\r\n };\r\n \r\n-// Função para obter a conexão Mestre já estabelecida\r\n const getMasterConnection = () => masterConnection;\r\n \r\n-// Função para obter/criar conexões das empresas (nenhuma mudança aqui)\r\n+// --- NOVA FUNÇÃO ADICIONADA ---\r\n+// Permite que o nosso ambiente de teste defina a conexão mestre\r\n+const setMasterConnection = (connection) => {\r\n+    masterConnection = connection;\r\n+};\r\n+\r\n async function getTenantConnection(dbName) {\r\n     if (tenantConnections[dbName] && tenantConnections[dbName].readyState === 1) {\r\n         return tenantConnections[dbName];\r\n     }\r\n@@ -33,20 +34,20 @@\n     tenantConnections[dbName] = newConnection;\r\n     return newConnection;\r\n }\r\n \r\n-// NOVA FUNÇÃO para fechar todas as conexões\r\n const closeAllConnections = async () => {\r\n-    // Inicia um array de promessas com o fecho da conexão mestre\r\n-    const closePromises = [masterConnection.close()];\r\n-\r\n-    // Adiciona uma promessa de fecho para cada conexão de tenant ativa\r\n-    for (const dbName in tenantConnections) {\r\n-        closePromises.push(tenantConnections[dbName].close());\r\n+    // Adicionamos uma verificação para garantir que as conexões existem antes de as fechar\r\n+    if (masterConnection) {\r\n+        await masterConnection.close();\r\n     }\r\n-\r\n-    // Espera que todas as conexões sejam fechadas em paralelo\r\n-    await Promise.all(closePromises);\r\n+    await Promise.all(Object.values(tenantConnections).map(conn => conn.close()));\r\n\\ No newline at end of file\n };\r\n \r\n-// ATUALIZE a linha module.exports para incluir a nova função\r\n-module.exports = { connectToMasterDB, getMasterConnection, getTenantConnection, closeAllConnections };\n+\r\n+module.exports = { \r\n+    connectToMasterDB, \r\n+    getMasterConnection, \r\n+    getTenantConnection, \r\n+    closeAllConnections,\r\n+    setMasterConnection // Exportamos a nova função\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754507826312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,6 +48,7 @@\n     connectToMasterDB, \r\n     getMasterConnection, \r\n     getTenantConnection, \r\n     closeAllConnections,\r\n-    setMasterConnection // Exportamos a nova função\r\n+    setMasterConnection,\r\n+    tenantConnections // <-- Adicione esta linha\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754508157325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,9 @@\n };\r\n \r\n const getMasterConnection = () => masterConnection;\r\n \r\n-// --- NOVA FUNÇÃO ADICIONADA ---\r\n-// Permite que o nosso ambiente de teste defina a conexão mestre\r\n+// Função para o ambiente de teste definir a conexão mestre\r\n const setMasterConnection = (connection) => {\r\n     masterConnection = connection;\r\n };\r\n \r\n@@ -29,26 +28,25 @@\n         return tenantConnections[dbName];\r\n     }\r\n     const tenantDbUri = masterDbUri.replace(/\\/[^/]+$/, `/${dbName}`);\r\n     const newConnection = await mongoose.createConnection(tenantDbUri).asPromise();\r\n-    console.log(`Conectado ao banco de dados da empresa: ${dbName}`);\r\n+    // console.log(`Conectado ao banco de dados da empresa: ${dbName}`); // Comentado para limpar o log de teste\r\n     tenantConnections[dbName] = newConnection;\r\n     return newConnection;\r\n }\r\n \r\n const closeAllConnections = async () => {\r\n-    // Adicionamos uma verificação para garantir que as conexões existem antes de as fechar\r\n     if (masterConnection) {\r\n         await masterConnection.close();\r\n     }\r\n     await Promise.all(Object.values(tenantConnections).map(conn => conn.close()));\r\n };\r\n \r\n-\r\n+// Assegure-se de que está a exportar a variável 'tenantConnections'\r\n module.exports = { \r\n     connectToMasterDB, \r\n     getMasterConnection, \r\n     getTenantConnection, \r\n     closeAllConnections,\r\n     setMasterConnection,\r\n-    tenantConnections // <-- Adicione esta linha\r\n+    tenantConnections \r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754508255617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \r\n const masterDbUri = process.env.MONGODB_URI;\r\n \r\n let masterConnection;\r\n-const tenantConnections = {};\r\n+let tenantConnections = {}; // Garantimos que começa como um objeto vazio\r\n \r\n const connectToMasterDB = async () => {\r\n     try {\r\n         masterConnection = await mongoose.createConnection(masterDbUri).asPromise();\r\n@@ -17,9 +17,8 @@\n };\r\n \r\n const getMasterConnection = () => masterConnection;\r\n \r\n-// Função para o ambiente de teste definir a conexão mestre\r\n const setMasterConnection = (connection) => {\r\n     masterConnection = connection;\r\n };\r\n \r\n@@ -28,25 +27,31 @@\n         return tenantConnections[dbName];\r\n     }\r\n     const tenantDbUri = masterDbUri.replace(/\\/[^/]+$/, `/${dbName}`);\r\n     const newConnection = await mongoose.createConnection(tenantDbUri).asPromise();\r\n-    // console.log(`Conectado ao banco de dados da empresa: ${dbName}`); // Comentado para limpar o log de teste\r\n     tenantConnections[dbName] = newConnection;\r\n     return newConnection;\r\n }\r\n \r\n+// NOVO: Função para limpar o nosso cache de conexões em memória\r\n+const clearTenantConnections = () => {\r\n+    tenantConnections = {};\r\n+};\r\n+\r\n const closeAllConnections = async () => {\r\n+    const promises = [];\r\n     if (masterConnection) {\r\n-        await masterConnection.close();\r\n+        promises.push(masterConnection.close());\r\n     }\r\n-    await Promise.all(Object.values(tenantConnections).map(conn => conn.close()));\r\n+    Object.values(tenantConnections).forEach(conn => promises.push(conn.close()));\r\n+    await Promise.all(promises);\r\n+    clearTenantConnections();\r\n };\r\n \r\n-// Assegure-se de que está a exportar a variável 'tenantConnections'\r\n module.exports = { \r\n     connectToMasterDB, \r\n     getMasterConnection, \r\n     getTenantConnection, \r\n     closeAllConnections,\r\n     setMasterConnection,\r\n-    tenantConnections \r\n+    clearTenantConnections // Exportamos a nova função\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754508665222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n const mongoose = require('mongoose');\r\n require('dotenv').config();\r\n \r\n+// Esta variável SÓ será usada para a conexão real da aplicação.\r\n const masterDbUri = process.env.MONGODB_URI;\r\n \r\n let masterConnection;\r\n-let tenantConnections = {}; // Garantimos que começa como um objeto vazio\r\n+let tenantConnections = {};\r\n \r\n const connectToMasterDB = async () => {\r\n     try {\r\n         masterConnection = await mongoose.createConnection(masterDbUri).asPromise();\r\n@@ -21,19 +22,31 @@\n const setMasterConnection = (connection) => {\r\n     masterConnection = connection;\r\n };\r\n \r\n+// A CORREÇÃO CRÍTICA ESTÁ NESTA FUNÇÃO\r\n async function getTenantConnection(dbName) {\r\n     if (tenantConnections[dbName] && tenantConnections[dbName].readyState === 1) {\r\n         return tenantConnections[dbName];\r\n     }\r\n-    const tenantDbUri = masterDbUri.replace(/\\/[^/]+$/, `/${dbName}`);\r\n+\r\n+    // --- INÍCIO DA CORREÇÃO ---\r\n+    // Em vez de usar a variável de ambiente, derivamos o endereço da conexão MESTRE ATIVA.\r\n+    // Isto garante que nos testes, ele aponte para o servidor em memória.\r\n+    const host = masterConnection.host;\r\n+    const port = masterConnection.port;\r\n+    const user = masterConnection.user;\r\n+    const pass = masterConnection.pass;\r\n+    const auth = user && pass ? `${user}:${pass}@` : '';\r\n+\r\n+    const tenantDbUri = `mongodb://${auth}${host}:${port}/${dbName}`;\r\n+    // --- FIM DA CORREÇÃO ---\r\n+\r\n     const newConnection = await mongoose.createConnection(tenantDbUri).asPromise();\r\n     tenantConnections[dbName] = newConnection;\r\n     return newConnection;\r\n }\r\n \r\n-// NOVO: Função para limpar o nosso cache de conexões em memória\r\n const clearTenantConnections = () => {\r\n     tenantConnections = {};\r\n };\r\n \r\n@@ -52,6 +65,6 @@\n     getMasterConnection, \r\n     getTenantConnection, \r\n     closeAllConnections,\r\n     setMasterConnection,\r\n-    clearTenantConnections // Exportamos a nova função\r\n+    clearTenantConnections\r\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1753535607270,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\r\nrequire('dotenv').config();\r\n\r\n// Conexão Principal com o Banco MESTRE\r\nconst masterDbUri = process.env.MONGODB_URI;\r\nconst masterConnection = mongoose.createConnection(masterDbUri);\r\n\r\nmasterConnection.on('connected', () => {\r\n    console.log('Conectado ao MongoDB Mestre com sucesso!');\r\n});\r\nmasterConnection.on('error', (err) => {\r\n    console.error('Falha ao conectar ao MongoDB Mestre:', err);\r\n});\r\n\r\n// Lógica para Conexões Dinâmicas com os Bancos das Empresas (Tenants)\r\nconst tenantConnections = {};\r\n\r\nasync function getTenantConnection(dbName) {\r\n    if (tenantConnections[dbName] && tenantConnections[dbName].readyState === 1) {\r\n        return tenantConnections[dbName];\r\n    }\r\n\r\n    const tenantDbUri = masterDbUri.replace(/\\/[^/]+$/, `/${dbName}`);\r\n    const newConnection = mongoose.createConnection(tenantDbUri);\r\n\r\n    newConnection.on('connected', () => {\r\n        console.log(`Conectado ao banco de dados da empresa: ${dbName}`);\r\n    });\r\n    newConnection.on('error', (err) => {\r\n        console.error(`Falha ao conectar ao banco de dados ${dbName}:`, err);\r\n    });\r\n\r\n    tenantConnections[dbName] = newConnection;\r\n    return newConnection;\r\n}\r\n\r\n// Exporta as funções e conexões para serem usadas em outros lugares\r\nmodule.exports = { masterConnection, getTenantConnection };"
        }
    ]
}