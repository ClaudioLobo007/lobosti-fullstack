{
    "sourceFile": "Servidor/tests/setup.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1754507391524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754507625381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,31 @@\n-// D:\\SCripts\\SiteLobos\\Servidor\\tests\\setup.js\r\n-\r\n const { MongoMemoryServer } = require('mongodb-memory-server');\r\n const mongoose = require('mongoose');\r\n+// Importamos as funções do nosso ficheiro de configuração da base de dados\r\n+const { setMasterConnection, closeAllConnections } = require('../config/db');\r\n \r\n let mongoServer;\r\n \r\n-// Esta função é executada UMA VEZ antes de todos os testes começarem.\r\n beforeAll(async () => {\r\n   mongoServer = await MongoMemoryServer.create();\r\n   const uri = mongoServer.getUri();\r\n-  await mongoose.connect(uri);\r\n+\r\n+  // Conectamos o Mongoose à base de dados em memória\r\n+  const masterConnection = await mongoose.createConnection(uri).asPromise();\r\n+  \r\n+  // USAMOS A NOSSA NOVA FUNÇÃO:\r\n+  // \"Avisamos\" a nossa aplicação que esta é a conexão principal a ser usada.\r\n+  setMasterConnection(masterConnection);\r\n });\r\n \r\n-// Esta função é executada UMA VEZ depois de todos os testes terminarem.\r\n afterAll(async () => {\r\n-  await mongoose.disconnect();\r\n+  // Usamos a função de limpeza da nossa aplicação para um desligamento limpo\r\n+  await closeAllConnections();\r\n   await mongoServer.stop();\r\n });\r\n \r\n-// Esta função é executada ANTES de CADA teste individual.\r\n beforeEach(async () => {\r\n+  // A lógica para limpar a base de dados entre os testes continua a mesma\r\n   const collections = mongoose.connection.collections;\r\n   for (const key in collections) {\r\n     await collections[key].deleteMany({});\r\n   }\r\n"
                },
                {
                    "date": 1754507837015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,40 @@\n+// D:\\SCripts\\SiteLobos\\Servidor\\tests\\setup.js\r\n+\r\n const { MongoMemoryServer } = require('mongodb-memory-server');\r\n const mongoose = require('mongoose');\r\n-// Importamos as funções do nosso ficheiro de configuração da base de dados\r\n-const { setMasterConnection, closeAllConnections } = require('../config/db');\r\n+const { setMasterConnection, closeAllConnections, tenantConnections } = require('../config/db');\r\n \r\n let mongoServer;\r\n \r\n beforeAll(async () => {\r\n   mongoServer = await MongoMemoryServer.create();\r\n   const uri = mongoServer.getUri();\r\n-\r\n-  // Conectamos o Mongoose à base de dados em memória\r\n   const masterConnection = await mongoose.createConnection(uri).asPromise();\r\n-  \r\n-  // USAMOS A NOSSA NOVA FUNÇÃO:\r\n-  // \"Avisamos\" a nossa aplicação que esta é a conexão principal a ser usada.\r\n   setMasterConnection(masterConnection);\r\n });\r\n \r\n afterAll(async () => {\r\n-  // Usamos a função de limpeza da nossa aplicação para um desligamento limpo\r\n   await closeAllConnections();\r\n   await mongoServer.stop();\r\n });\r\n \r\n+// A nossa função de limpeza foi melhorada!\r\n beforeEach(async () => {\r\n-  // A lógica para limpar a base de dados entre os testes continua a mesma\r\n-  const collections = mongoose.connection.collections;\r\n-  for (const key in collections) {\r\n-    await collections[key].deleteMany({});\r\n+  // 1. Limpa a base de dados mestre\r\n+  const masterCollections = mongoose.connection.collections;\r\n+  for (const key in masterCollections) {\r\n+    await masterCollections[key].deleteMany({});\r\n   }\r\n+\r\n+  // 2. Limpa todas as bases de dados de tenants que foram abertas\r\n+  const tenantPromises = [];\r\n+  for (const key in tenantConnections) {\r\n+    const tenantDb = tenantConnections[key];\r\n+    // Adiciona a promessa de apagar a base de dados ao array\r\n+    tenantPromises.push(tenantDb.dropDatabase());\r\n+    // Remove a conexão do cache\r\n+    delete tenantConnections[key];\r\n+  }\r\n+  // Espera que todas as bases de dados de tenants sejam apagadas\r\n+  await Promise.all(tenantPromises);\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754508126269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,40 +1,44 @@\n-// D:\\SCripts\\SiteLobos\\Servidor\\tests\\setup.js\r\n-\r\n const { MongoMemoryServer } = require('mongodb-memory-server');\r\n const mongoose = require('mongoose');\r\n+// Importamos tudo o que precisamos do nosso ficheiro de configuração\r\n const { setMasterConnection, closeAllConnections, tenantConnections } = require('../config/db');\r\n \r\n let mongoServer;\r\n \r\n+// É executado uma vez, antes de todos os testes\r\n beforeAll(async () => {\r\n   mongoServer = await MongoMemoryServer.create();\r\n   const uri = mongoServer.getUri();\r\n   const masterConnection = await mongoose.createConnection(uri).asPromise();\r\n+  \r\n+  // Define a conexão principal que a aplicação vai usar\r\n   setMasterConnection(masterConnection);\r\n });\r\n \r\n+// É executado uma vez, depois de todos os testes\r\n afterAll(async () => {\r\n+  // Usa a nossa função de limpeza para fechar todas as conexões\r\n   await closeAllConnections();\r\n   await mongoServer.stop();\r\n });\r\n \r\n-// A nossa função de limpeza foi melhorada!\r\n+// É executado ANTES DE CADA TESTE INDIVIDUAL\r\n beforeEach(async () => {\r\n-  // 1. Limpa a base de dados mestre\r\n+  // Limpa a base de dados MESTRE\r\n   const masterCollections = mongoose.connection.collections;\r\n   for (const key in masterCollections) {\r\n     await masterCollections[key].deleteMany({});\r\n   }\r\n \r\n-  // 2. Limpa todas as bases de dados de tenants que foram abertas\r\n+  // Limpa TODAS as bases de dados de TENANTS\r\n   const tenantPromises = [];\r\n   for (const key in tenantConnections) {\r\n     const tenantDb = tenantConnections[key];\r\n-    // Adiciona a promessa de apagar a base de dados ao array\r\n+    // Adiciona a promessa para apagar a base de dados\r\n     tenantPromises.push(tenantDb.dropDatabase());\r\n-    // Remove a conexão do cache\r\n+    // Remove a conexão do nosso cache interno\r\n     delete tenantConnections[key];\r\n   }\r\n-  // Espera que todas as bases de dados de tenants sejam apagadas\r\n+  // Espera que todas as bases de dados sejam apagadas\r\n   await Promise.all(tenantPromises);\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754508263699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,42 @@\n const { MongoMemoryServer } = require('mongodb-memory-server');\r\n const mongoose = require('mongoose');\r\n-// Importamos tudo o que precisamos do nosso ficheiro de configuração\r\n-const { setMasterConnection, closeAllConnections, tenantConnections } = require('../config/db');\r\n+const { setMasterConnection, closeAllConnections, clearTenantConnections } = require('../config/db');\r\n \r\n let mongoServer;\r\n \r\n-// É executado uma vez, antes de todos os testes\r\n beforeAll(async () => {\r\n   mongoServer = await MongoMemoryServer.create();\r\n   const uri = mongoServer.getUri();\r\n   const masterConnection = await mongoose.createConnection(uri).asPromise();\r\n-  \r\n-  // Define a conexão principal que a aplicação vai usar\r\n   setMasterConnection(masterConnection);\r\n });\r\n \r\n-// É executado uma vez, depois de todos os testes\r\n afterAll(async () => {\r\n-  // Usa a nossa função de limpeza para fechar todas as conexões\r\n   await closeAllConnections();\r\n   await mongoServer.stop();\r\n });\r\n \r\n-// É executado ANTES DE CADA TESTE INDIVIDUAL\r\n+// A LÓGICA DE LIMPEZA DEFINITIVA\r\n beforeEach(async () => {\r\n-  // Limpa a base de dados MESTRE\r\n+  // 1. Limpa a base de dados MESTRE\r\n   const masterCollections = mongoose.connection.collections;\r\n   for (const key in masterCollections) {\r\n     await masterCollections[key].deleteMany({});\r\n   }\r\n \r\n-  // Limpa TODAS as bases de dados de TENANTS\r\n-  const tenantPromises = [];\r\n-  for (const key in tenantConnections) {\r\n-    const tenantDb = tenantConnections[key];\r\n-    // Adiciona a promessa para apagar a base de dados\r\n-    tenantPromises.push(tenantDb.dropDatabase());\r\n-    // Remove a conexão do nosso cache interno\r\n-    delete tenantConnections[key];\r\n-  }\r\n-  // Espera que todas as bases de dados sejam apagadas\r\n-  await Promise.all(tenantPromises);\r\n+  // 2. Limpa o CACHE de conexões da nossa aplicação\r\n+  clearTenantConnections();\r\n+\r\n+  // 3. ENCONTRA E APAGA TODAS AS BASES DE DADOS DE TENANTS DIRETAMENTE NO SERVIDOR\r\n+  const db = mongoose.connection.db;\r\n+  const dbs = await db.admin().listDatabases();\r\n+\r\n+  const dropPromises = dbs.databases\r\n+    .filter(dbInfo => dbInfo.name.startsWith('empresa_')) // Filtra apenas as DBs de tenant\r\n+    .map(dbInfo => {\r\n+      // Para cada DB de tenant, cria uma referência temporária e a apaga\r\n+      return mongoose.connection.useDb(dbInfo.name).dropDatabase();\r\n+    });\r\n+\r\n+  await Promise.all(dropPromises);\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754508370431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,48 @@\n const { MongoMemoryServer } = require('mongodb-memory-server');\r\n const mongoose = require('mongoose');\r\n-const { setMasterConnection, closeAllConnections, clearTenantConnections } = require('../config/db');\r\n+// Importamos as funções do nosso ficheiro de configuração da base de dados\r\n+const { setMasterConnection, closeAllConnections, clearTenantConnections, getMasterConnection } = require('../config/db');\r\n \r\n let mongoServer;\r\n \r\n+// beforeAll continua igual, está correto.\r\n beforeAll(async () => {\r\n   mongoServer = await MongoMemoryServer.create();\r\n   const uri = mongoServer.getUri();\r\n-  const masterConnection = await mongoose.createConnection(uri).asPromise();\r\n-  setMasterConnection(masterConnection);\r\n+  const testMasterConnection = await mongoose.createConnection(uri).asPromise();\r\n+  setMasterConnection(testMasterConnection);\r\n });\r\n \r\n+// afterAll continua igual, está correto.\r\n afterAll(async () => {\r\n   await closeAllConnections();\r\n   await mongoServer.stop();\r\n });\r\n \r\n-// A LÓGICA DE LIMPEZA DEFINITIVA\r\n+// A CORREÇÃO FINAL ESTÁ AQUI, NO beforeEach\r\n beforeEach(async () => {\r\n-  // 1. Limpa a base de dados MESTRE\r\n-  const masterCollections = mongoose.connection.collections;\r\n+  // 1. Obtém a conexão mestre que a NOSSA APLICAÇÃO está a usar.\r\n+  const masterDb = getMasterConnection();\r\n+\r\n+  // 2. Limpa as coleções da base de dados mestre.\r\n+  const masterCollections = masterDb.collections;\r\n   for (const key in masterCollections) {\r\n     await masterCollections[key].deleteMany({});\r\n   }\r\n \r\n-  // 2. Limpa o CACHE de conexões da nossa aplicação\r\n+  // 3. Limpa o cache de conexões de tenant da nossa aplicação.\r\n   clearTenantConnections();\r\n \r\n-  // 3. ENCONTRA E APAGA TODAS AS BASES DE DADOS DE TENANTS DIRETAMENTE NO SERVIDOR\r\n-  const db = mongoose.connection.db;\r\n-  const dbs = await db.admin().listDatabases();\r\n-\r\n-  const dropPromises = dbs.databases\r\n-    .filter(dbInfo => dbInfo.name.startsWith('empresa_')) // Filtra apenas as DBs de tenant\r\n-    .map(dbInfo => {\r\n-      // Para cada DB de tenant, cria uma referência temporária e a apaga\r\n-      return mongoose.connection.useDb(dbInfo.name).dropDatabase();\r\n-    });\r\n-\r\n+  // 4. Usa a conexão mestre CORRETA para encontrar e apagar as bases de dados de tenants.\r\n+  const adminDb = masterDb.db.admin();\r\n+  const { databases } = await adminDb.listDatabases();\r\n+  \r\n+  const dropPromises = databases\r\n+      .filter(db => db.name.startsWith('empresa_')) // Filtra apenas as DBs de tenant\r\n+      .map(db => {\r\n+          // Usa a conexão mestre para se referir a outra base de dados e apagá-la.\r\n+          return masterDb.useDb(db.name).dropDatabase();\r\n+      });\r\n+      \r\n   await Promise.all(dropPromises);\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754508996467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,48 @@\n+// D:\\SCripts\\SiteLobos\\Servidor\\tests\\setup.js\r\n+\r\n const { MongoMemoryServer } = require('mongodb-memory-server');\r\n const mongoose = require('mongoose');\r\n-// Importamos as funções do nosso ficheiro de configuração da base de dados\r\n const { setMasterConnection, closeAllConnections, clearTenantConnections, getMasterConnection } = require('../config/db');\r\n+// 1. Importamos a nossa nova função de semeadura\r\n+const { seedDatabase } = require('./seed');\r\n \r\n let mongoServer;\r\n \r\n-// beforeAll continua igual, está correto.\r\n beforeAll(async () => {\r\n   mongoServer = await MongoMemoryServer.create();\r\n   const uri = mongoServer.getUri();\r\n   const testMasterConnection = await mongoose.createConnection(uri).asPromise();\r\n   setMasterConnection(testMasterConnection);\r\n+\r\n+  // 2. Semeamos a base de dados com os dados iniciais!\r\n+  await seedDatabase();\r\n });\r\n \r\n-// afterAll continua igual, está correto.\r\n afterAll(async () => {\r\n   await closeAllConnections();\r\n   await mongoServer.stop();\r\n });\r\n \r\n-// A CORREÇÃO FINAL ESTÁ AQUI, NO beforeEach\r\n beforeEach(async () => {\r\n-  // 1. Obtém a conexão mestre que a NOSSA APLICAÇÃO está a usar.\r\n+  // A lógica de limpeza continua a mesma, mas agora ela irá apagar\r\n+  // os templates e o seeder irá recriá-los antes do próximo teste.\r\n   const masterDb = getMasterConnection();\r\n-\r\n-  // 2. Limpa as coleções da base de dados mestre.\r\n+  \r\n   const masterCollections = masterDb.collections;\r\n+  // Apaga tudo, MENOS os templates, para poupar tempo.\r\n   for (const key in masterCollections) {\r\n-    await masterCollections[key].deleteMany({});\r\n+    if (key !== 'emailtemplates') { // O nome da coleção é o nome do modelo em minúsculas e no plural\r\n+      await masterCollections[key].deleteMany({});\r\n+    }\r\n   }\r\n \r\n-  // 3. Limpa o cache de conexões de tenant da nossa aplicação.\r\n   clearTenantConnections();\r\n-\r\n-  // 4. Usa a conexão mestre CORRETA para encontrar e apagar as bases de dados de tenants.\r\n+  \r\n   const adminDb = masterDb.db.admin();\r\n   const { databases } = await adminDb.listDatabases();\r\n-  \r\n   const dropPromises = databases\r\n-      .filter(db => db.name.startsWith('empresa_')) // Filtra apenas as DBs de tenant\r\n-      .map(db => {\r\n-          // Usa a conexão mestre para se referir a outra base de dados e apagá-la.\r\n-          return masterDb.useDb(db.name).dropDatabase();\r\n-      });\r\n+      .filter(db => db.name.startsWith('empresa_'))\r\n+      .map(db => masterDb.useDb(db.name).dropDatabase());\r\n       \r\n   await Promise.all(dropPromises);\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754509236200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n-// D:\\SCripts\\SiteLobos\\Servidor\\tests\\setup.js\r\n-\r\n+jest.setTimeout(30000);\r\n const { MongoMemoryServer } = require('mongodb-memory-server');\r\n const mongoose = require('mongoose');\r\n const { setMasterConnection, closeAllConnections, clearTenantConnections, getMasterConnection } = require('../config/db');\r\n // 1. Importamos a nossa nova função de semeadura\r\n"
                },
                {
                    "date": 1754509372823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n-jest.setTimeout(30000);\r\n+// D:\\SCripts\\SiteLobos\\Servidor\\tests\\setup.js\r\n+\r\n+jest.setTimeout(30000); // Mantemos o timeout aumentado\r\n+\r\n const { MongoMemoryServer } = require('mongodb-memory-server');\r\n const mongoose = require('mongoose');\r\n const { setMasterConnection, closeAllConnections, clearTenantConnections, getMasterConnection } = require('../config/db');\r\n-// 1. Importamos a nossa nova função de semeadura\r\n const { seedDatabase } = require('./seed');\r\n \r\n let mongoServer;\r\n \r\n@@ -12,26 +14,24 @@\n   const uri = mongoServer.getUri();\r\n   const testMasterConnection = await mongoose.createConnection(uri).asPromise();\r\n   setMasterConnection(testMasterConnection);\r\n \r\n-  // 2. Semeamos a base de dados com os dados iniciais!\r\n-  await seedDatabase();\r\n+  // A MUDANÇA ESTÁ AQUI: Passamos a conexão para a função de semeadura.\r\n+  await seedDatabase(testMasterConnection);\r\n });\r\n \r\n+// O resto do ficheiro (afterAll, beforeEach) pode continuar exatamente igual.\r\n afterAll(async () => {\r\n   await closeAllConnections();\r\n   await mongoServer.stop();\r\n });\r\n \r\n beforeEach(async () => {\r\n-  // A lógica de limpeza continua a mesma, mas agora ela irá apagar\r\n-  // os templates e o seeder irá recriá-los antes do próximo teste.\r\n   const masterDb = getMasterConnection();\r\n   \r\n   const masterCollections = masterDb.collections;\r\n-  // Apaga tudo, MENOS os templates, para poupar tempo.\r\n   for (const key in masterCollections) {\r\n-    if (key !== 'emailtemplates') { // O nome da coleção é o nome do modelo em minúsculas e no plural\r\n+    if (key !== 'emailtemplates') {\r\n       await masterCollections[key].deleteMany({});\r\n     }\r\n   }\r\n \r\n"
                }
            ],
            "date": 1754507391524,
            "name": "Commit-0",
            "content": "// D:\\SCripts\\SiteLobos\\Servidor\\tests\\setup.js\r\n\r\nconst { MongoMemoryServer } = require('mongodb-memory-server');\r\nconst mongoose = require('mongoose');\r\n\r\nlet mongoServer;\r\n\r\n// Esta função é executada UMA VEZ antes de todos os testes começarem.\r\nbeforeAll(async () => {\r\n  mongoServer = await MongoMemoryServer.create();\r\n  const uri = mongoServer.getUri();\r\n  await mongoose.connect(uri);\r\n});\r\n\r\n// Esta função é executada UMA VEZ depois de todos os testes terminarem.\r\nafterAll(async () => {\r\n  await mongoose.disconnect();\r\n  await mongoServer.stop();\r\n});\r\n\r\n// Esta função é executada ANTES de CADA teste individual.\r\nbeforeEach(async () => {\r\n  const collections = mongoose.connection.collections;\r\n  for (const key in collections) {\r\n    await collections[key].deleteMany({});\r\n  }\r\n});"
        }
    ]
}