{
    "sourceFile": "Servidor/services/emailServices.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752345425315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752346351406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,20 @@\n-// Em servidor/services/emailService.js\r\n-\r\n const nodemailer = require('nodemailer');\r\n require('dotenv').config();\r\n \r\n-// 1. Configura o \"transportador\" com as credenciais do seu serviço de e-mail\r\n+// Configura o \"transportador\" com as credenciais do seu .env\r\n const transporter = nodemailer.createTransport({\r\n-    host: process.env.EMAIL_HOST,       // ex: 'smtp-relay.brevo.com'\r\n-    port: process.env.EMAIL_PORT,       // ex: 587\r\n-    secure: false, // true para porta 465, false para outras\r\n+    host: process.env.EMAIL_HOST,\r\n+    port: process.env.EMAIL_PORT,\r\n+    secure: true, // Para a porta 465 do Gmail, secure é true\r\n     auth: {\r\n-        user: process.env.EMAIL_USER,   // seu e-mail de login no serviço\r\n-        pass: process.env.EMAIL_PASS,   // sua senha ou chave de API do serviço\r\n+        user: process.env.EMAIL_USER,\r\n+        pass: process.env.EMAIL_PASS,\r\n     },\r\n });\r\n \r\n-// 2. Cria a função para enviar o e-mail de relatório\r\n+// Função para enviar o e-mail de relatório\r\n async function sendOverdueReportEmail(toEmail, companyName, overdueCount) {\r\n-    // Monta o conteúdo do e-mail em HTML para ficar mais bonito\r\n     const emailHtml = `\r\n         <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n             <h2>Lembrete de Boletos Vencidos</h2>\r\n             <p>Olá, ${companyName},</p>\r\n@@ -30,19 +27,21 @@\n         </div>\r\n     `;\r\n \r\n     const mailOptions = {\r\n-        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`, // Seu e-mail verificado\r\n+        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n         to: toEmail,\r\n         subject: `Aviso de Boletos Vencidos - ${companyName}`,\r\n         html: emailHtml,\r\n     };\r\n \r\n     try {\r\n         await transporter.sendMail(mailOptions);\r\n-        console.log(`E-mail de relatório enviado com sucesso para ${toEmail}`);\r\n+        console.log(`E-mail de teste enviado com sucesso para ${toEmail}`);\r\n     } catch (error) {\r\n-        console.error(`Erro ao enviar e-mail para ${toEmail}:`, error);\r\n+        console.error(`Erro ao enviar e-mail de teste para ${toEmail}:`, error);\r\n+        // Lançar o erro para que a rota que chamou saiba que falhou\r\n+        throw error;\r\n     }\r\n }\r\n \r\n module.exports = { sendOverdueReportEmail };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1752345425315,
            "name": "Commit-0",
            "content": "// Em servidor/services/emailService.js\r\n\r\nconst nodemailer = require('nodemailer');\r\nrequire('dotenv').config();\r\n\r\n// 1. Configura o \"transportador\" com as credenciais do seu serviço de e-mail\r\nconst transporter = nodemailer.createTransport({\r\n    host: process.env.EMAIL_HOST,       // ex: 'smtp-relay.brevo.com'\r\n    port: process.env.EMAIL_PORT,       // ex: 587\r\n    secure: false, // true para porta 465, false para outras\r\n    auth: {\r\n        user: process.env.EMAIL_USER,   // seu e-mail de login no serviço\r\n        pass: process.env.EMAIL_PASS,   // sua senha ou chave de API do serviço\r\n    },\r\n});\r\n\r\n// 2. Cria a função para enviar o e-mail de relatório\r\nasync function sendOverdueReportEmail(toEmail, companyName, overdueCount) {\r\n    // Monta o conteúdo do e-mail em HTML para ficar mais bonito\r\n    const emailHtml = `\r\n        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n            <h2>Lembrete de Boletos Vencidos</h2>\r\n            <p>Olá, ${companyName},</p>\r\n            <p>Este é um lembrete do seu Organizador de Boletos.</p>\r\n            <p>Verificamos que atualmente existem <strong>${overdueCount} boleto(s) vencido(s)</strong> e não pago(s) em sua empresa.</p>\r\n            <p>Por favor, acesse a plataforma para regularizar as pendências.</p>\r\n            <br>\r\n            <p>Atenciosamente,</p>\r\n            <p><strong>Equipe do Organizador de Boletos</strong></p>\r\n        </div>\r\n    `;\r\n\r\n    const mailOptions = {\r\n        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`, // Seu e-mail verificado\r\n        to: toEmail,\r\n        subject: `Aviso de Boletos Vencidos - ${companyName}`,\r\n        html: emailHtml,\r\n    };\r\n\r\n    try {\r\n        await transporter.sendMail(mailOptions);\r\n        console.log(`E-mail de relatório enviado com sucesso para ${toEmail}`);\r\n    } catch (error) {\r\n        console.error(`Erro ao enviar e-mail para ${toEmail}:`, error);\r\n    }\r\n}\r\n\r\nmodule.exports = { sendOverdueReportEmail };"
        }
    ]
}