{
    "sourceFile": "Servidor/services/emailService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1752347453360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752498819493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+const nodemailer = require('nodemailer');\r\n+require('dotenv').config();\r\n+\r\n+// Configura o \"transportador\" com as credenciais do seu .env\r\n+const transporter = nodemailer.createTransport({\r\n+    host: process.env.EMAIL_HOST,\r\n+    port: process.env.EMAIL_PORT,\r\n+    secure: false, // Para a porta 465 do Gmail, secure é true\r\n+    auth: {\r\n+        user: process.env.EMAIL_USER,\r\n+        pass: process.env.EMAIL_PASS,\r\n+    },\r\n+});\r\n+\r\n+// Função para enviar o e-mail de relatório\r\n+async function sendOverdueReportEmail(toEmail, companyName, overdueCount) {\r\n+    const emailHtml = `\r\n+        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n+            <h2>Lembrete de Boletos Vencidos</h2>\r\n+            <p>Olá, ${companyName},</p>\r\n+            <p>Este é um lembrete do seu Organizador de Boletos.</p>\r\n+            <p>Verificamos que atualmente existem <strong>${overdueCount} boleto(s) vencido(s)</strong> e não pago(s) em sua empresa.</p>\r\n+            <p>Por favor, acesse a plataforma para regularizar as pendências.</p>\r\n+            <br>\r\n+            <p>Atenciosamente,</p>\r\n+            <p><strong>Equipe do Organizador de Boletos</strong></p>\r\n+        </div>\r\n+    `;\r\n+\r\n+    const mailOptions = {\r\n+        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n+        to: toEmail,\r\n+        subject: `Aviso de Boletos Vencidos - ${companyName}`,\r\n+        html: emailHtml,\r\n+    };\r\n+\r\n+    try {\r\n+        await transporter.sendMail(mailOptions);\r\n+        console.log(`E-mail de teste enviado com sucesso para ${toEmail}`);\r\n+    } catch (error) {\r\n+        console.error(`Erro ao enviar e-mail de teste para ${toEmail}:`, error);\r\n+        // Lançar o erro para que a rota que chamou saiba que falhou\r\n+        throw error;\r\n+    }\r\n+}\r\n+\r\n+// NOVA FUNÇÃO para enviar o e-mail do formulário de contato\r\n+async function sendContactFormEmail(fromName, fromEmail, subject, message) {\r\n+    // O e-mail será enviado PARA o endereço que definirmos no .env\r\n+    const toEmail = process.env.CONTACT_FORM_RECIPIENT;\r\n+\r\n+    // Monta o conteúdo do e-mail\r\n+    const emailHtml = `\r\n+        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n+            <h2>Nova Mensagem de Contato do Site</h2>\r\n+            <p>Você recebeu uma nova mensagem através do formulário de contato do site LobosTI.</p>\r\n+            <hr>\r\n+            <p><strong>Nome:</strong> ${fromName}</p>\r\n+            <p><strong>E-mail do Remetente:</strong> ${fromEmail}</p>\r\n+            <p><strong>Assunto:</strong> ${subject}</p>\r\n+            <p><strong>Mensagem:</strong></p>\r\n+            <p style=\"padding: 10px; border-left: 3px solid #ccc;\">${message.replace(/\\n/g, '<br>')}</p>\r\n+            <hr>\r\n+        </div>\r\n+    `;\r\n+\r\n+    const mailOptions = {\r\n+        from: `\"Site LobosTI\" <${process.env.EMAIL_FROM}>`,\r\n+        to: toEmail,\r\n+        subject: `Nova Mensagem de Contato: ${subject}`,\r\n+        html: emailHtml,\r\n+        replyTo: fromEmail\r\n+    };\r\n+\r\n+    try {\r\n+        await transporter.sendMail(mailOptions);\r\n+        console.log(`E-mail de contato de ${fromName} enviado com sucesso para ${toEmail}`);\r\n+    } catch (error) {\r\n+        console.error(`Erro ao enviar e-mail de contato:`, error);\r\n+        throw error;\r\n+    }\r\n+}\r\n+\r\n+module.exports = { sendOverdueReportEmail, sendContactFormEmail };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752685568656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n // Configura o \"transportador\" com as credenciais do seu .env\r\n const transporter = nodemailer.createTransport({\r\n     host: process.env.EMAIL_HOST,\r\n     port: process.env.EMAIL_PORT,\r\n-    secure: false, // Para a porta 465 do Gmail, secure é true\r\n+    secure: process.env.EMAIL_SECURE === 'true', \r\n     auth: {\r\n         user: process.env.EMAIL_USER,\r\n         pass: process.env.EMAIL_PASS,\r\n     },\r\n@@ -80,52 +80,5 @@\n         throw error;\r\n     }\r\n }\r\n \r\n-module.exports = { sendOverdueReportEmail, sendContactFormEmail };\n-const nodemailer = require('nodemailer');\r\n-require('dotenv').config();\r\n-\r\n-// Configura o \"transportador\" com as credenciais do seu .env\r\n-const transporter = nodemailer.createTransport({\r\n-    host: process.env.EMAIL_HOST,\r\n-    port: process.env.EMAIL_PORT,\r\n-    secure: false, // Para a porta 465 do Gmail, secure é true\r\n-    auth: {\r\n-        user: process.env.EMAIL_USER,\r\n-        pass: process.env.EMAIL_PASS,\r\n-    },\r\n-});\r\n-\r\n-// Função para enviar o e-mail de relatório\r\n-async function sendOverdueReportEmail(toEmail, companyName, overdueCount) {\r\n-    const emailHtml = `\r\n-        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n-            <h2>Lembrete de Boletos Vencidos</h2>\r\n-            <p>Olá, ${companyName},</p>\r\n-            <p>Este é um lembrete do seu Organizador de Boletos.</p>\r\n-            <p>Verificamos que atualmente existem <strong>${overdueCount} boleto(s) vencido(s)</strong> e não pago(s) em sua empresa.</p>\r\n-            <p>Por favor, acesse a plataforma para regularizar as pendências.</p>\r\n-            <br>\r\n-            <p>Atenciosamente,</p>\r\n-            <p><strong>Equipe do Organizador de Boletos</strong></p>\r\n-        </div>\r\n-    `;\r\n-\r\n-    const mailOptions = {\r\n-        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n-        to: toEmail,\r\n-        subject: `Aviso de Boletos Vencidos - ${companyName}`,\r\n-        html: emailHtml,\r\n-    };\r\n-\r\n-    try {\r\n-        await transporter.sendMail(mailOptions);\r\n-        console.log(`E-mail de teste enviado com sucesso para ${toEmail}`);\r\n-    } catch (error) {\r\n-        console.error(`Erro ao enviar e-mail de teste para ${toEmail}:`, error);\r\n-        // Lançar o erro para que a rota que chamou saiba que falhou\r\n-        throw error;\r\n-    }\r\n-}\r\n-\r\n-module.exports = { sendOverdueReportEmail };\n\\ No newline at end of file\n+module.exports = { sendOverdueReportEmail, sendContactFormEmail };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752783920237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n const nodemailer = require('nodemailer');\r\n require('dotenv').config();\r\n \r\n-// Configura o \"transportador\" com as credenciais do seu .env\r\n const transporter = nodemailer.createTransport({\r\n     host: process.env.EMAIL_HOST,\r\n     port: process.env.EMAIL_PORT,\r\n     secure: process.env.EMAIL_SECURE === 'true', \r\n@@ -11,36 +10,54 @@\n         pass: process.env.EMAIL_PASS,\r\n     },\r\n });\r\n \r\n-// Função para enviar o e-mail de relatório\r\n-async function sendOverdueReportEmail(toEmail, companyName, overdueCount) {\r\n+/**\r\n+ * Envia um e-mail com o relatório detalhado de parcelas vencidas.\r\n+ * @param {string} toEmail - O e-mail do destinatário.\r\n+ * @param {string} companyName - O nome da empresa do destinatário.\r\n+ * @param {Array} overdueParcels - Uma lista de objetos contendo os detalhes de cada parcela vencida.\r\n+ */\r\n+async function sendOverdueReportEmail(toEmail, companyName, overdueParcels) {\r\n+    // Cria um bloco HTML para cada parcela vencida\r\n+    const parcelsHtmlList = overdueParcels.map(item => `\r\n+        <div style=\"border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; border-radius: 5px;\">\r\n+            <strong>Nome:</strong> ${item.billName}<br>\r\n+            ${item.nfeNumber ? `<strong>Cód. NF:</strong> ${item.nfeNumber}<br>` : ''}\r\n+            <strong>Parcela:</strong> ${item.parcelNumber}<br>\r\n+            <strong>Valor:</strong> ${item.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}<br>\r\n+            <strong>Vencimento:</strong> ${new Date(item.dueDate + 'T00:00:00').toLocaleDateString('pt-BR')}\r\n+        </div>\r\n+    `).join('');\r\n+\r\n     const emailHtml = `\r\n         <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n             <h2>Lembrete de Boletos Vencidos</h2>\r\n             <p>Olá, ${companyName},</p>\r\n             <p>Este é um lembrete do seu Organizador de Boletos.</p>\r\n-            <p>Verificamos que atualmente existem <strong>${overdueCount} boleto(s) vencido(s)</strong> e não pago(s) em sua empresa.</p>\r\n+            <p>Verificamos que existem <strong>${overdueParcels.length} boleto(s) vencido(s)</strong> e não pago(s) em sua empresa. Seguem os detalhes:</p>\r\n+            <hr style=\"margin: 20px 0;\">\r\n+            ${parcelsHtmlList}\r\n+            <hr style=\"margin: 20px 0;\">\r\n             <p>Por favor, acesse a plataforma para regularizar as pendências.</p>\r\n             <br>\r\n             <p>Atenciosamente,</p>\r\n-            <p><strong>Equipe do Organizador de Boletos</strong></p>\r\n+            <p><strong>Equipe LobosTI</strong></p>\r\n         </div>\r\n     `;\r\n \r\n     const mailOptions = {\r\n         from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n         to: toEmail,\r\n-        subject: `Aviso de Boletos Vencidos - ${companyName}`,\r\n+        subject: `Aviso: Você possui ${overdueParcels.length} boletos vencidos - ${companyName}`,\r\n         html: emailHtml,\r\n     };\r\n \r\n     try {\r\n         await transporter.sendMail(mailOptions);\r\n-        console.log(`E-mail de teste enviado com sucesso para ${toEmail}`);\r\n+        console.log(`E-mail de relatório enviado com sucesso para ${toEmail}`);\r\n     } catch (error) {\r\n-        console.error(`Erro ao enviar e-mail de teste para ${toEmail}:`, error);\r\n-        // Lançar o erro para que a rota que chamou saiba que falhou\r\n+        console.error(`Erro ao enviar e-mail de relatório para ${toEmail}:`, error);\r\n         throw error;\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1752784287767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,35 +11,63 @@\n     },\r\n });\r\n \r\n /**\r\n- * Envia um e-mail com o relatório detalhado de parcelas vencidas.\r\n+ * Envia um e-mail com o relatório diário de parcelas vencidas e a vencer.\r\n  * @param {string} toEmail - O e-mail do destinatário.\r\n  * @param {string} companyName - O nome da empresa do destinatário.\r\n- * @param {Array} overdueParcels - Uma lista de objetos contendo os detalhes de cada parcela vencida.\r\n+ * @param {Array} overdueParcels - Uma lista de parcelas vencidas.\r\n+ * @param {Array} dueTomorrowParcels - Uma lista de parcelas que vencem amanhã.\r\n  */\r\n-async function sendOverdueReportEmail(toEmail, companyName, overdueParcels) {\r\n-    // Cria um bloco HTML para cada parcela vencida\r\n-    const parcelsHtmlList = overdueParcels.map(item => `\r\n-        <div style=\"border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; border-radius: 5px;\">\r\n-            <strong>Nome:</strong> ${item.billName}<br>\r\n-            ${item.nfeNumber ? `<strong>Cód. NF:</strong> ${item.nfeNumber}<br>` : ''}\r\n-            <strong>Parcela:</strong> ${item.parcelNumber}<br>\r\n-            <strong>Valor:</strong> ${item.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}<br>\r\n-            <strong>Vencimento:</strong> ${new Date(item.dueDate + 'T00:00:00').toLocaleDateString('pt-BR')}\r\n-        </div>\r\n-    `).join('');\r\n+async function sendDailyReportEmail(toEmail, companyName, overdueParcels, dueTomorrowParcels) {\r\n+    \r\n+    let parcelsHtml = '';\r\n \r\n+    // Cria a secção de parcelas VENCIDAS, se houver alguma.\r\n+    if (overdueParcels.length > 0) {\r\n+        const overdueHtmlList = overdueParcels.map(item => `\r\n+            <div style=\"border: 1px solid #e74c3c; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #fbe9e7;\">\r\n+                <strong>Nome:</strong> ${item.billName}<br>\r\n+                ${item.nfeNumber ? `<strong>Cód. NF:</strong> ${item.nfeNumber}<br>` : ''}\r\n+                <strong>Parcela:</strong> ${item.parcelNumber}<br>\r\n+                <strong>Valor:</strong> ${item.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}<br>\r\n+                <strong>Vencimento:</strong> ${new Date(item.dueDate + 'T00:00:00').toLocaleDateString('pt-BR')}\r\n+            </div>\r\n+        `).join('');\r\n+        \r\n+        parcelsHtml += `\r\n+            <h3 style=\"color: #c0392b;\">🚨 Parcelas Vencidas</h3>\r\n+            ${overdueHtmlList}\r\n+        `;\r\n+    }\r\n+\r\n+    // Cria a secção de parcelas A VENCER AMANHÃ, se houver alguma.\r\n+    if (dueTomorrowParcels.length > 0) {\r\n+        const dueTomorrowHtmlList = dueTomorrowParcels.map(item => `\r\n+            <div style=\"border: 1px solid #f39c12; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #fff8e1;\">\r\n+                <strong>Nome:</strong> ${item.billName}<br>\r\n+                ${item.nfeNumber ? `<strong>Cód. NF:</strong> ${item.nfeNumber}<br>` : ''}\r\n+                <strong>Parcela:</strong> ${item.parcelNumber}<br>\r\n+                <strong>Valor:</strong> ${item.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}<br>\r\n+                <strong>Vencimento:</strong> ${new Date(item.dueDate + 'T00:00:00').toLocaleDateString('pt-BR')}\r\n+            </div>\r\n+        `).join('');\r\n+\r\n+        parcelsHtml += `\r\n+            <h3 style=\"color: #d35400; margin-top: 25px;\">🔔 A Vencer Amanhã</h3>\r\n+            ${dueTomorrowHtmlList}\r\n+        `;\r\n+    }\r\n+\r\n     const emailHtml = `\r\n         <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n-            <h2>Lembrete de Boletos Vencidos</h2>\r\n+            <h2>Relatório Diário de Boletos</h2>\r\n             <p>Olá, ${companyName},</p>\r\n-            <p>Este é um lembrete do seu Organizador de Boletos.</p>\r\n-            <p>Verificamos que existem <strong>${overdueParcels.length} boleto(s) vencido(s)</strong> e não pago(s) em sua empresa. Seguem os detalhes:</p>\r\n+            <p>Este é o seu resumo diário do Organizador de Boletos.</p>\r\n             <hr style=\"margin: 20px 0;\">\r\n-            ${parcelsHtmlList}\r\n+            ${parcelsHtml}\r\n             <hr style=\"margin: 20px 0;\">\r\n-            <p>Por favor, acesse a plataforma para regularizar as pendências.</p>\r\n+            <p>Por favor, acesse a plataforma para mais detalhes.</p>\r\n             <br>\r\n             <p>Atenciosamente,</p>\r\n             <p><strong>Equipe LobosTI</strong></p>\r\n         </div>\r\n@@ -47,15 +75,15 @@\n \r\n     const mailOptions = {\r\n         from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n         to: toEmail,\r\n-        subject: `Aviso: Você possui ${overdueParcels.length} boletos vencidos - ${companyName}`,\r\n+        subject: `Relatório Diário de Boletos - ${companyName}`,\r\n         html: emailHtml,\r\n     };\r\n \r\n     try {\r\n         await transporter.sendMail(mailOptions);\r\n-        console.log(`E-mail de relatório enviado com sucesso para ${toEmail}`);\r\n+        console.log(`E-mail de relatório diário enviado com sucesso para ${toEmail}`);\r\n     } catch (error) {\r\n         console.error(`Erro ao enviar e-mail de relatório para ${toEmail}:`, error);\r\n         throw error;\r\n     }\r\n"
                },
                {
                    "date": 1752784443153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,5 +125,5 @@\n         throw error;\r\n     }\r\n }\r\n \r\n-module.exports = { sendOverdueReportEmail, sendContactFormEmail };\n\\ No newline at end of file\n+module.exports = { sendDailyReportEmail, sendContactFormEmail };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752786443408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,22 +11,22 @@\n     },\r\n });\r\n \r\n /**\r\n- * Envia um e-mail com o relatório diário de parcelas vencidas e a vencer.\r\n+ * Envia um e-mail com o relatório diário de parcelas vencidas e a vencer no dia.\r\n  * @param {string} toEmail - O e-mail do destinatário.\r\n  * @param {string} companyName - O nome da empresa do destinatário.\r\n- * @param {Array} overdueParcels - Uma lista de parcelas vencidas.\r\n- * @param {Array} dueTomorrowParcels - Uma lista de parcelas que vencem amanhã.\r\n+ * @param {Array} overdueParcels - Uma lista de parcelas vencidas (data < hoje).\r\n+ * @param {Array} dueTodayParcels - Uma lista de parcelas que vencem hoje (data = hoje).\r\n  */\r\n-async function sendDailyReportEmail(toEmail, companyName, overdueParcels, dueTomorrowParcels) {\r\n+async function sendDailyReportEmail(toEmail, companyName, overdueParcels, dueTodayParcels) {\r\n     \r\n     let parcelsHtml = '';\r\n \r\n-    // Cria a secção de parcelas VENCIDAS, se houver alguma.\r\n+    // Secção para parcelas VENCIDAS (em vermelho)\r\n     if (overdueParcels.length > 0) {\r\n         const overdueHtmlList = overdueParcels.map(item => `\r\n-            <div style=\"border: 1px solid #e74c3c; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #fbe9e7;\">\r\n+            <div style=\"border: 1px solid #c0392b; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #f2dede;\">\r\n                 <strong>Nome:</strong> ${item.billName}<br>\r\n                 ${item.nfeNumber ? `<strong>Cód. NF:</strong> ${item.nfeNumber}<br>` : ''}\r\n                 <strong>Parcela:</strong> ${item.parcelNumber}<br>\r\n                 <strong>Valor:</strong> ${item.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}<br>\r\n@@ -39,12 +39,12 @@\n             ${overdueHtmlList}\r\n         `;\r\n     }\r\n \r\n-    // Cria a secção de parcelas A VENCER AMANHÃ, se houver alguma.\r\n-    if (dueTomorrowParcels.length > 0) {\r\n-        const dueTomorrowHtmlList = dueTomorrowParcels.map(item => `\r\n-            <div style=\"border: 1px solid #f39c12; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #fff8e1;\">\r\n+    // Secção para parcelas A VENCER HOJE (em azul)\r\n+    if (dueTodayParcels.length > 0) {\r\n+        const dueTodayHtmlList = dueTodayParcels.map(item => `\r\n+            <div style=\"border: 1px solid #2980b9; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #eaf2f8;\">\r\n                 <strong>Nome:</strong> ${item.billName}<br>\r\n                 ${item.nfeNumber ? `<strong>Cód. NF:</strong> ${item.nfeNumber}<br>` : ''}\r\n                 <strong>Parcela:</strong> ${item.parcelNumber}<br>\r\n                 <strong>Valor:</strong> ${item.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}<br>\r\n@@ -52,10 +52,10 @@\n             </div>\r\n         `).join('');\r\n \r\n         parcelsHtml += `\r\n-            <h3 style=\"color: #d35400; margin-top: 25px;\">🔔 A Vencer Amanhã</h3>\r\n-            ${dueTomorrowHtmlList}\r\n+            <h3 style=\"color: #2980b9; margin-top: 25px;\">🔵 A Vencer Hoje</h3>\r\n+            ${dueTodayHtmlList}\r\n         `;\r\n     }\r\n \r\n     const emailHtml = `\r\n"
                },
                {
                    "date": 1752931549628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,5 +125,42 @@\n         throw error;\r\n     }\r\n }\r\n \r\n-module.exports = { sendDailyReportEmail, sendContactFormEmail };\n\\ No newline at end of file\n+async function sendPasswordResetEmail(toEmail, token) {\r\n+    // O link deve apontar para a sua página de frontend que ainda vamos criar\r\n+    const resetUrl = `http://127.0.0.1:5500/reset-password.html?token=${token}`;\r\n+\r\n+    const emailHtml = `\r\n+        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n+            <h2>Recuperação de Senha</h2>\r\n+            <p>Você solicitou a recuperação da sua senha para o Organizador de Boletos.</p>\r\n+            <p>Por favor, clique no link abaixo para definir uma nova senha. Este link é válido por 1 hora.</p>\r\n+            <p style=\"text-align: center;\">\r\n+                <a href=\"${resetUrl}\" style=\"background-color: #4f46e5; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\r\n+                    Definir Nova Senha\r\n+                </a>\r\n+            </p>\r\n+            <p>Se você não solicitou esta alteração, por favor, ignore este e-mail.</p>\r\n+            <br>\r\n+            <p>Atenciosamente,</p>\r\n+            <p><strong>Equipe LobosTI</strong></p>\r\n+        </div>\r\n+    `;\r\n+\r\n+    const mailOptions = {\r\n+        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n+        to: toEmail,\r\n+        subject: 'Recuperação de Senha - Organizador de Boletos',\r\n+        html: emailHtml,\r\n+    };\r\n+\r\n+    try {\r\n+        await transporter.sendMail(mailOptions);\r\n+        console.log(`E-mail de recuperação de senha enviado com sucesso para ${toEmail}`);\r\n+    } catch (error) {\r\n+        console.error(`Erro ao enviar e-mail de recuperação para ${toEmail}:`, error);\r\n+        throw error;\r\n+    }\r\n+}\r\n+\r\n+module.exports = { sendDailyReportEmail, sendContactFormEmail, sendPasswordResetEmail };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753739051731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,5 +162,43 @@\n         throw error;\r\n     }\r\n }\r\n \r\n-module.exports = { sendDailyReportEmail, sendContactFormEmail, sendPasswordResetEmail };\n\\ No newline at end of file\n+// Confirmação de email\r\n+async function sendVerificationEmail(toEmail, companyName, token) {\r\n+    // Este link deve apontar para uma página do seu frontend que ainda vamos criar\r\n+    const verificationUrl = `http://127.0.0.1:5500/verify-email.html?token=${token}`;\r\n+\r\n+    const emailHtml = `\r\n+        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n+            <h2>Confirme o seu E-mail - Organizador de Boletos</h2>\r\n+            <p>Olá, ${companyName},</p>\r\n+            <p>Obrigado por se registar! Por favor, clique no link abaixo para verificar o seu endereço de e-mail e ativar a sua conta. Este link é válido por 24 horas.</p>\r\n+            <p style=\"text-align: center;\">\r\n+                <a href=\"${verificationUrl}\" style=\"background-color: #4f46e5; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\r\n+                    Verificar Meu E-mail\r\n+                </a>\r\n+            </p>\r\n+            <p>Se você não criou esta conta, por favor, ignore este e-mail.</p>\r\n+            <br>\r\n+            <p>Atenciosamente,</p>\r\n+            <p><strong>Equipe LobosTI</strong></p>\r\n+        </div>\r\n+    `;\r\n+\r\n+    const mailOptions = {\r\n+        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n+        to: toEmail,\r\n+        subject: `Ative a sua conta no Organizador de Boletos`,\r\n+        html: emailHtml,\r\n+    };\r\n+\r\n+    try {\r\n+        await transporter.sendMail(mailOptions);\r\n+        console.log(`E-mail de verificação enviado com sucesso para ${toEmail}`);\r\n+    } catch (error) {\r\n+        console.error(`Erro ao enviar e-mail de verificação para ${toEmail}:`, error);\r\n+        throw error;\r\n+    }\r\n+}\r\n+\r\n+module.exports = { sendDailyReportEmail, sendContactFormEmail, sendPasswordResetEmail, sendVerificationEmail };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754144673317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,10 @@\n const nodemailer = require('nodemailer');\r\n+const mongoose = require('mongoose');\r\n+const EmailTemplateSchema = require('../models/EmailTemplate').schema;\r\n require('dotenv').config();\r\n \r\n+// Configuração do Nodemailer (inalterada)\r\n const transporter = nodemailer.createTransport({\r\n     host: process.env.EMAIL_HOST,\r\n     port: process.env.EMAIL_PORT,\r\n     secure: process.env.EMAIL_SECURE === 'true', \r\n@@ -10,17 +13,87 @@\n         pass: process.env.EMAIL_PASS,\r\n     },\r\n });\r\n \r\n+// =================================================================================\r\n+// Função Auxiliar Principal\r\n+// =================================================================================\r\n+\r\n /**\r\n- * Envia um e-mail com o relatório diário de parcelas vencidas e a vencer no dia.\r\n+ * Busca um template no DB, substitui placeholders e envia o e-mail.\r\n+ * @param {string} templateName - O nome único do template (ex: 'passwordReset').\r\n  * @param {string} toEmail - O e-mail do destinatário.\r\n- * @param {string} companyName - O nome da empresa do destinatário.\r\n- * @param {Array} overdueParcels - Uma lista de parcelas vencidas (data < hoje).\r\n- * @param {Array} dueTodayParcels - Uma lista de parcelas que vencem hoje (data = hoje).\r\n+ * @param {object} placeholders - Um objeto com os valores a serem substituídos (ex: { resetLink: '...' }).\r\n  */\r\n+async function sendEmailFromTemplate(templateName, toEmail, placeholders = {}) {\r\n+    try {\r\n+        const EmailTemplate = mongoose.connection.model('EmailTemplate', EmailTemplateSchema);\r\n+        const template = await EmailTemplate.findOne({ name: templateName });\r\n+\r\n+        if (!template) {\r\n+            console.error(`ERRO CRÍTICO: Template de e-mail '${templateName}' não foi encontrado na base de dados.`);\r\n+            return;\r\n+        }\r\n+\r\n+        let subject = template.subject;\r\n+        let body = template.body;\r\n+\r\n+        // Substitui todos os placeholders no corpo e no assunto do e-mail\r\n+        for (const key in placeholders) {\r\n+            const regex = new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, 'g');\r\n+            subject = subject.replace(regex, placeholders[key]);\r\n+            body = body.replace(regex, placeholders[key]);\r\n+        }\r\n+\r\n+        const mailOptions = {\r\n+            from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n+            to: toEmail,\r\n+            subject: subject,\r\n+            html: body,\r\n+        };\r\n+\r\n+        await transporter.sendMail(mailOptions);\r\n+        console.log(`E-mail do template '${templateName}' enviado com sucesso para ${toEmail}`);\r\n+\r\n+    } catch (error) {\r\n+        console.error(`Erro ao enviar e-mail do template '${templateName}' para ${toEmail}:`, error);\r\n+        throw error;\r\n+    }\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// Funções Refatoradas que Usam Templates\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Envia o e-mail de verificação de conta usando um template do DB.\r\n+ */\r\n+async function sendVerificationEmail(toEmail, companyName, token) {\r\n+    const verificationLink = `http://127.0.0.1:5500/verify-email.html?token=${token}`;\r\n+    const placeholders = {\r\n+        companyName: companyName,\r\n+        verificationLink: verificationLink,\r\n+    };\r\n+    await sendEmailFromTemplate('emailVerification', toEmail, placeholders);\r\n+}\r\n+\r\n+/**\r\n+ * Envia o e-mail de recuperação de senha usando um template do DB.\r\n+ */\r\n+async function sendPasswordResetEmail(toEmail, token) {\r\n+    const resetLink = `http://127.0.0.1:5500/reset-password.html?token=${token}`;\r\n+    const placeholders = {\r\n+        resetLink: resetLink,\r\n+    };\r\n+    await sendEmailFromTemplate('passwordReset', toEmail, placeholders);\r\n+}\r\n+\r\n+/**\r\n+ * Envia o relatório diário usando um template do DB para o layout principal.\r\n+ */\r\n async function sendDailyReportEmail(toEmail, companyName, overdueParcels, dueTodayParcels) {\r\n-    \r\n+    // A lógica para gerar o HTML das parcelas (que é dinâmico) continua aqui.\r\n     let parcelsHtml = '';\r\n \r\n     // Secção para parcelas VENCIDAS (em vermelho)\r\n     if (overdueParcels.length > 0) {\r\n@@ -57,45 +130,30 @@\n             ${dueTodayHtmlList}\r\n         `;\r\n     }\r\n \r\n-    const emailHtml = `\r\n-        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n-            <h2>Relatório Diário de Boletos</h2>\r\n-            <p>Olá, ${companyName},</p>\r\n-            <p>Este é o seu resumo diário do Organizador de Boletos.</p>\r\n-            <hr style=\"margin: 20px 0;\">\r\n-            ${parcelsHtml}\r\n-            <hr style=\"margin: 20px 0;\">\r\n-            <p>Por favor, acesse a plataforma para mais detalhes.</p>\r\n-            <br>\r\n-            <p>Atenciosamente,</p>\r\n-            <p><strong>Equipe LobosTI</strong></p>\r\n-        </div>\r\n-    `;\r\n-\r\n-    const mailOptions = {\r\n-        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n-        to: toEmail,\r\n-        subject: `Relatório Diário de Boletos - ${companyName}`,\r\n-        html: emailHtml,\r\n+    // Preparamos os placeholders para injetar no template principal\r\n+    const placeholders = {\r\n+        companyName: companyName,\r\n+        parcelsHtml: parcelsHtml, // O HTML gerado acima será injetado aqui\r\n     };\r\n \r\n-    try {\r\n-        await transporter.sendMail(mailOptions);\r\n-        console.log(`E-mail de relatório diário enviado com sucesso para ${toEmail}`);\r\n-    } catch (error) {\r\n-        console.error(`Erro ao enviar e-mail de relatório para ${toEmail}:`, error);\r\n-        throw error;\r\n-    }\r\n+    // Chamamos a função auxiliar com o nome do template do relatório\r\n+    await sendEmailFromTemplate('dailyReport', toEmail, placeholders);\r\n }\r\n \r\n-// NOVA FUNÇÃO para enviar o e-mail do formulário de contato\r\n+\r\n+// =================================================================================\r\n+// Função que Não Usa Template Editável\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Envia o e-mail do formulário de contato.\r\n+ * Esta função foi mantida como estava, pois é uma notificação interna para o admin.\r\n+ */\r\n async function sendContactFormEmail(fromName, fromEmail, subject, message) {\r\n-    // O e-mail será enviado PARA o endereço que definirmos no .env\r\n     const toEmail = process.env.CONTACT_FORM_RECIPIENT;\r\n \r\n-    // Monta o conteúdo do e-mail\r\n     const emailHtml = `\r\n         <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n             <h2>Nova Mensagem de Contato do Site</h2>\r\n             <p>Você recebeu uma nova mensagem através do formulário de contato do site LobosTI.</p>\r\n@@ -125,80 +183,14 @@\n         throw error;\r\n     }\r\n }\r\n \r\n-async function sendPasswordResetEmail(toEmail, token) {\r\n-    // O link deve apontar para a sua página de frontend que ainda vamos criar\r\n-    const resetUrl = `http://127.0.0.1:5500/reset-password.html?token=${token}`;\r\n \r\n-    const emailHtml = `\r\n-        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n-            <h2>Recuperação de Senha</h2>\r\n-            <p>Você solicitou a recuperação da sua senha para o Organizador de Boletos.</p>\r\n-            <p>Por favor, clique no link abaixo para definir uma nova senha. Este link é válido por 1 hora.</p>\r\n-            <p style=\"text-align: center;\">\r\n-                <a href=\"${resetUrl}\" style=\"background-color: #4f46e5; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\r\n-                    Definir Nova Senha\r\n-                </a>\r\n-            </p>\r\n-            <p>Se você não solicitou esta alteração, por favor, ignore este e-mail.</p>\r\n-            <br>\r\n-            <p>Atenciosamente,</p>\r\n-            <p><strong>Equipe LobosTI</strong></p>\r\n-        </div>\r\n-    `;\r\n-\r\n-    const mailOptions = {\r\n-        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n-        to: toEmail,\r\n-        subject: 'Recuperação de Senha - Organizador de Boletos',\r\n-        html: emailHtml,\r\n-    };\r\n-\r\n-    try {\r\n-        await transporter.sendMail(mailOptions);\r\n-        console.log(`E-mail de recuperação de senha enviado com sucesso para ${toEmail}`);\r\n-    } catch (error) {\r\n-        console.error(`Erro ao enviar e-mail de recuperação para ${toEmail}:`, error);\r\n-        throw error;\r\n-    }\r\n-}\r\n-\r\n-// Confirmação de email\r\n-async function sendVerificationEmail(toEmail, companyName, token) {\r\n-    // Este link deve apontar para uma página do seu frontend que ainda vamos criar\r\n-    const verificationUrl = `http://127.0.0.1:5500/verify-email.html?token=${token}`;\r\n-\r\n-    const emailHtml = `\r\n-        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n-            <h2>Confirme o seu E-mail - Organizador de Boletos</h2>\r\n-            <p>Olá, ${companyName},</p>\r\n-            <p>Obrigado por se registar! Por favor, clique no link abaixo para verificar o seu endereço de e-mail e ativar a sua conta. Este link é válido por 24 horas.</p>\r\n-            <p style=\"text-align: center;\">\r\n-                <a href=\"${verificationUrl}\" style=\"background-color: #4f46e5; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\r\n-                    Verificar Meu E-mail\r\n-                </a>\r\n-            </p>\r\n-            <p>Se você não criou esta conta, por favor, ignore este e-mail.</p>\r\n-            <br>\r\n-            <p>Atenciosamente,</p>\r\n-            <p><strong>Equipe LobosTI</strong></p>\r\n-        </div>\r\n-    `;\r\n-\r\n-    const mailOptions = {\r\n-        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n-        to: toEmail,\r\n-        subject: `Ative a sua conta no Organizador de Boletos`,\r\n-        html: emailHtml,\r\n-    };\r\n-\r\n-    try {\r\n-        await transporter.sendMail(mailOptions);\r\n-        console.log(`E-mail de verificação enviado com sucesso para ${toEmail}`);\r\n-    } catch (error) {\r\n-        console.error(`Erro ao enviar e-mail de verificação para ${toEmail}:`, error);\r\n-        throw error;\r\n-    }\r\n-}\r\n-\r\n-module.exports = { sendDailyReportEmail, sendContactFormEmail, sendPasswordResetEmail, sendVerificationEmail };\n\\ No newline at end of file\n+// =================================================================================\r\n+// Exportações\r\n+// =================================================================================\r\n+module.exports = {\r\n+    sendDailyReportEmail,\r\n+    sendContactFormEmail,\r\n+    sendPasswordResetEmail,\r\n+    sendVerificationEmail\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754164863703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+const nodemailer = require('nodemailer');\r\n+const mongoose = require('mongoose');\r\n+const EmailTemplateSchema = require('../models/EmailTemplate').schema;\r\n+require('dotenv').config();\r\n+\r\n+// Configuração do Nodemailer (inalterada)\r\n+const transporter = nodemailer.createTransport({\r\n+    host: process.env.EMAIL_HOST,\r\n+    port: process.env.EMAIL_PORT,\r\n+    secure: process.env.EMAIL_SECURE === 'true', \r\n+    auth: {\r\n+        user: process.env.EMAIL_USER,\r\n+        pass: process.env.EMAIL_PASS,\r\n+    },\r\n+});\r\n+\r\n+// =================================================================================\r\n+// Função Auxiliar Principal\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Busca um template no DB, substitui placeholders e envia o e-mail.\r\n+ * @param {string} templateName - O nome único do template (ex: 'passwordReset').\r\n+ * @param {string} toEmail - O e-mail do destinatário.\r\n+ * @param {object} placeholders - Um objeto com os valores a serem substituídos (ex: { resetLink: '...' }).\r\n+ */\r\n+async function sendEmailFromTemplate(templateName, toEmail, placeholders = {}) {\r\n+    try {\r\n+        const EmailTemplate = mongoose.connection.model('EmailTemplate', EmailTemplateSchema);\r\n+        const template = await EmailTemplate.findOne({ name: templateName });\r\n+\r\n+        if (!template) {\r\n+            console.error(`ERRO CRÍTICO: Template de e-mail '${templateName}' não foi encontrado na base de dados.`);\r\n+            return;\r\n+        }\r\n+\r\n+        let subject = template.subject;\r\n+        let body = template.body;\r\n+\r\n+        // Substitui todos os placeholders no corpo e no assunto do e-mail\r\n+        for (const key in placeholders) {\r\n+            const regex = new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, 'g');\r\n+            subject = subject.replace(regex, placeholders[key]);\r\n+            body = body.replace(regex, placeholders[key]);\r\n+        }\r\n+\r\n+        const mailOptions = {\r\n+            from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n+            to: toEmail,\r\n+            subject: subject,\r\n+            html: body,\r\n+        };\r\n+\r\n+        await transporter.sendMail(mailOptions);\r\n+        console.log(`E-mail do template '${templateName}' enviado com sucesso para ${toEmail}`);\r\n+\r\n+    } catch (error) {\r\n+        console.error(`Erro ao enviar e-mail do template '${templateName}' para ${toEmail}:`, error);\r\n+        throw error;\r\n+    }\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// Funções Refatoradas que Usam Templates\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Envia o e-mail de verificação de conta usando um template do DB.\r\n+ */\r\n+async function sendVerificationEmail(toEmail, companyName, token) {\r\n+    const verificationLink = `http://127.0.0.1:5500/verify-email.html?token=${token}`;\r\n+    const placeholders = {\r\n+        companyName: companyName,\r\n+        verificationLink: verificationLink,\r\n+    };\r\n+    await sendEmailFromTemplate('emailVerification', toEmail, placeholders);\r\n+}\r\n+\r\n+/**\r\n+ * Envia o e-mail de recuperação de senha usando um template do DB.\r\n+ */\r\n+async function sendPasswordResetEmail(toEmail, token) {\r\n+    const resetLink = `http://127.0.0.1:5500/reset-password.html?token=${token}`;\r\n+    const placeholders = {\r\n+        resetLink: resetLink,\r\n+    };\r\n+    await sendEmailFromTemplate('passwordReset', toEmail, placeholders);\r\n+}\r\n+\r\n+/**\r\n+ * Envia o relatório diário usando um template do DB para o layout principal.\r\n+ */\r\n+async function sendDailyReportEmail(toEmail, companyName, overdueParcels, dueTodayParcels) {\r\n+    // A lógica para gerar o HTML das parcelas (que é dinâmico) continua aqui.\r\n+    let parcelsHtml = '';\r\n+\r\n+    // Secção para parcelas VENCIDAS (em vermelho)\r\n+    if (overdueParcels.length > 0) {\r\n+        const overdueHtmlList = overdueParcels.map(item => `\r\n+            <div style=\"border: 1px solid #c0392b; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #f2dede;\">\r\n+                <strong>Nome:</strong> ${item.billName}<br>\r\n+                ${item.nfeNumber ? `<strong>Cód. NF:</strong> ${item.nfeNumber}<br>` : ''}\r\n+                <strong>Parcela:</strong> ${item.parcelNumber}<br>\r\n+                <strong>Valor:</strong> ${item.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}<br>\r\n+                <strong>Vencimento:</strong> ${new Date(item.dueDate + 'T00:00:00').toLocaleDateString('pt-BR')}\r\n+            </div>\r\n+        `).join('');\r\n+        \r\n+        parcelsHtml += `\r\n+            <h3 style=\"color: #c0392b;\">🚨 Parcelas Vencidas</h3>\r\n+            ${overdueHtmlList}\r\n+        `;\r\n+    }\r\n+\r\n+    // Secção para parcelas A VENCER HOJE (em azul)\r\n+    if (dueTodayParcels.length > 0) {\r\n+        const dueTodayHtmlList = dueTodayParcels.map(item => `\r\n+            <div style=\"border: 1px solid #2980b9; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #eaf2f8;\">\r\n+                <strong>Nome:</strong> ${item.billName}<br>\r\n+                ${item.nfeNumber ? `<strong>Cód. NF:</strong> ${item.nfeNumber}<br>` : ''}\r\n+                <strong>Parcela:</strong> ${item.parcelNumber}<br>\r\n+                <strong>Valor:</strong> ${item.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}<br>\r\n+                <strong>Vencimento:</strong> ${new Date(item.dueDate + 'T00:00:00').toLocaleDateString('pt-BR')}\r\n+            </div>\r\n+        `).join('');\r\n+\r\n+        parcelsHtml += `\r\n+            <h3 style=\"color: #2980b9; margin-top: 25px;\">🔵 A Vencer Hoje</h3>\r\n+            ${dueTodayHtmlList}\r\n+        `;\r\n+    }\r\n+\r\n+    // Preparamos os placeholders para injetar no template principal\r\n+    const placeholders = {\r\n+        companyName: companyName,\r\n+        parcelsHtml: parcelsHtml, // O HTML gerado acima será injetado aqui\r\n+    };\r\n+\r\n+    // Chamamos a função auxiliar com o nome do template do relatório\r\n+    await sendEmailFromTemplate('dailyReport', toEmail, placeholders);\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// Função que Não Usa Template Editável\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Envia o e-mail do formulário de contato.\r\n+ * Esta função foi mantida como estava, pois é uma notificação interna para o admin.\r\n+ */\r\n+async function sendContactFormEmail(fromName, fromEmail, subject, message) {\r\n+    const toEmail = process.env.CONTACT_FORM_RECIPIENT;\r\n+\r\n+    const emailHtml = `\r\n+        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n+            <h2>Nova Mensagem de Contato do Site</h2>\r\n+            <p>Você recebeu uma nova mensagem através do formulário de contato do site LobosTI.</p>\r\n+            <hr>\r\n+            <p><strong>Nome:</strong> ${fromName}</p>\r\n+            <p><strong>E-mail do Remetente:</strong> ${fromEmail}</p>\r\n+            <p><strong>Assunto:</strong> ${subject}</p>\r\n+            <p><strong>Mensagem:</strong></p>\r\n+            <p style=\"padding: 10px; border-left: 3px solid #ccc;\">${message.replace(/\\n/g, '<br>')}</p>\r\n+            <hr>\r\n+        </div>\r\n+    `;\r\n+\r\n+    const mailOptions = {\r\n+        from: `\"Site LobosTI\" <${process.env.EMAIL_FROM}>`,\r\n+        to: toEmail,\r\n+        subject: `Nova Mensagem de Contato: ${subject}`,\r\n+        html: emailHtml,\r\n+        replyTo: fromEmail\r\n+    };\r\n+\r\n+    try {\r\n+        await transporter.sendMail(mailOptions);\r\n+        console.log(`E-mail de contato de ${fromName} enviado com sucesso para ${toEmail}`);\r\n+    } catch (error) {\r\n+        console.error(`Erro ao enviar e-mail de contato:`, error);\r\n+        throw error;\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Envia um e-mail genérico com assunto e corpo definidos.\r\n+ * @param {string} toEmail - O e-mail do destinatário.\r\n+ * @param {string} subject - O assunto do e-mail.\r\n+ * @param {string} body - O corpo do e-mail (pode ser HTML).\r\n+ */\r\n+async function sendGenericEmail(toEmail, subject, body) {\r\n+    const mailOptions = {\r\n+        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n+        to: toEmail,\r\n+        subject: subject,\r\n+        html: body,\r\n+    };\r\n+\r\n+    try {\r\n+        await transporter.sendMail(mailOptions);\r\n+        console.log(`E-mail genérico com assunto \"${subject}\" enviado para ${toEmail}`);\r\n+    } catch (error) {\r\n+        console.error(`Erro ao enviar e-mail genérico para ${toEmail}:`, error);\r\n+        throw error; // Propaga o erro para a rota saber que falhou\r\n+    }\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// Exportações\r\n+// =================================================================================\r\n+module.exports = {\r\n+    sendDailyReportEmail,\r\n+    sendContactFormEmail,\r\n+    sendPasswordResetEmail,\r\n+    sendVerificationEmail,\r\n+    sendGenericEmail\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754318689903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n /**\r\n  * Envia o e-mail de verificação de conta usando um template do DB.\r\n  */\r\n async function sendVerificationEmail(toEmail, companyName, token) {\r\n-    const verificationLink = `http://127.0.0.1:5500/verify-email.html?token=${token}`;\r\n+    const verificationLink = `${process.env.FRONTEND_BASE_URL}/verify-email.html?token=${token}`;\r\n     const placeholders = {\r\n         companyName: companyName,\r\n         verificationLink: verificationLink,\r\n     };\r\n@@ -80,9 +80,9 @@\n /**\r\n  * Envia o e-mail de recuperação de senha usando um template do DB.\r\n  */\r\n async function sendPasswordResetEmail(toEmail, token) {\r\n-    const resetLink = `http://127.0.0.1:5500/reset-password.html?token=${token}`;\r\n+    const resetLink = `${process.env.FRONTEND_BASE_URL}/reset-password.html?token=${token}`;\r\n     const placeholders = {\r\n         resetLink: resetLink,\r\n     };\r\n     await sendEmailFromTemplate('passwordReset', toEmail, placeholders);\r\n@@ -216,201 +216,5 @@\n     sendContactFormEmail,\r\n     sendPasswordResetEmail,\r\n     sendVerificationEmail,\r\n     sendGenericEmail\r\n-};\n-const nodemailer = require('nodemailer');\r\n-const mongoose = require('mongoose');\r\n-const EmailTemplateSchema = require('../models/EmailTemplate').schema;\r\n-require('dotenv').config();\r\n-\r\n-// Configuração do Nodemailer (inalterada)\r\n-const transporter = nodemailer.createTransport({\r\n-    host: process.env.EMAIL_HOST,\r\n-    port: process.env.EMAIL_PORT,\r\n-    secure: process.env.EMAIL_SECURE === 'true', \r\n-    auth: {\r\n-        user: process.env.EMAIL_USER,\r\n-        pass: process.env.EMAIL_PASS,\r\n-    },\r\n-});\r\n-\r\n-// =================================================================================\r\n-// Função Auxiliar Principal\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Busca um template no DB, substitui placeholders e envia o e-mail.\r\n- * @param {string} templateName - O nome único do template (ex: 'passwordReset').\r\n- * @param {string} toEmail - O e-mail do destinatário.\r\n- * @param {object} placeholders - Um objeto com os valores a serem substituídos (ex: { resetLink: '...' }).\r\n- */\r\n-async function sendEmailFromTemplate(templateName, toEmail, placeholders = {}) {\r\n-    try {\r\n-        const EmailTemplate = mongoose.connection.model('EmailTemplate', EmailTemplateSchema);\r\n-        const template = await EmailTemplate.findOne({ name: templateName });\r\n-\r\n-        if (!template) {\r\n-            console.error(`ERRO CRÍTICO: Template de e-mail '${templateName}' não foi encontrado na base de dados.`);\r\n-            return;\r\n-        }\r\n-\r\n-        let subject = template.subject;\r\n-        let body = template.body;\r\n-\r\n-        // Substitui todos os placeholders no corpo e no assunto do e-mail\r\n-        for (const key in placeholders) {\r\n-            const regex = new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, 'g');\r\n-            subject = subject.replace(regex, placeholders[key]);\r\n-            body = body.replace(regex, placeholders[key]);\r\n-        }\r\n-\r\n-        const mailOptions = {\r\n-            from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n-            to: toEmail,\r\n-            subject: subject,\r\n-            html: body,\r\n-        };\r\n-\r\n-        await transporter.sendMail(mailOptions);\r\n-        console.log(`E-mail do template '${templateName}' enviado com sucesso para ${toEmail}`);\r\n-\r\n-    } catch (error) {\r\n-        console.error(`Erro ao enviar e-mail do template '${templateName}' para ${toEmail}:`, error);\r\n-        throw error;\r\n-    }\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// Funções Refatoradas que Usam Templates\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Envia o e-mail de verificação de conta usando um template do DB.\r\n- */\r\n-async function sendVerificationEmail(toEmail, companyName, token) {\r\n-    const verificationLink = `http://127.0.0.1:5500/verify-email.html?token=${token}`;\r\n-    const placeholders = {\r\n-        companyName: companyName,\r\n-        verificationLink: verificationLink,\r\n-    };\r\n-    await sendEmailFromTemplate('emailVerification', toEmail, placeholders);\r\n-}\r\n-\r\n-/**\r\n- * Envia o e-mail de recuperação de senha usando um template do DB.\r\n- */\r\n-async function sendPasswordResetEmail(toEmail, token) {\r\n-    const resetLink = `http://127.0.0.1:5500/reset-password.html?token=${token}`;\r\n-    const placeholders = {\r\n-        resetLink: resetLink,\r\n-    };\r\n-    await sendEmailFromTemplate('passwordReset', toEmail, placeholders);\r\n-}\r\n-\r\n-/**\r\n- * Envia o relatório diário usando um template do DB para o layout principal.\r\n- */\r\n-async function sendDailyReportEmail(toEmail, companyName, overdueParcels, dueTodayParcels) {\r\n-    // A lógica para gerar o HTML das parcelas (que é dinâmico) continua aqui.\r\n-    let parcelsHtml = '';\r\n-\r\n-    // Secção para parcelas VENCIDAS (em vermelho)\r\n-    if (overdueParcels.length > 0) {\r\n-        const overdueHtmlList = overdueParcels.map(item => `\r\n-            <div style=\"border: 1px solid #c0392b; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #f2dede;\">\r\n-                <strong>Nome:</strong> ${item.billName}<br>\r\n-                ${item.nfeNumber ? `<strong>Cód. NF:</strong> ${item.nfeNumber}<br>` : ''}\r\n-                <strong>Parcela:</strong> ${item.parcelNumber}<br>\r\n-                <strong>Valor:</strong> ${item.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}<br>\r\n-                <strong>Vencimento:</strong> ${new Date(item.dueDate + 'T00:00:00').toLocaleDateString('pt-BR')}\r\n-            </div>\r\n-        `).join('');\r\n-        \r\n-        parcelsHtml += `\r\n-            <h3 style=\"color: #c0392b;\">🚨 Parcelas Vencidas</h3>\r\n-            ${overdueHtmlList}\r\n-        `;\r\n-    }\r\n-\r\n-    // Secção para parcelas A VENCER HOJE (em azul)\r\n-    if (dueTodayParcels.length > 0) {\r\n-        const dueTodayHtmlList = dueTodayParcels.map(item => `\r\n-            <div style=\"border: 1px solid #2980b9; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #eaf2f8;\">\r\n-                <strong>Nome:</strong> ${item.billName}<br>\r\n-                ${item.nfeNumber ? `<strong>Cód. NF:</strong> ${item.nfeNumber}<br>` : ''}\r\n-                <strong>Parcela:</strong> ${item.parcelNumber}<br>\r\n-                <strong>Valor:</strong> ${item.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}<br>\r\n-                <strong>Vencimento:</strong> ${new Date(item.dueDate + 'T00:00:00').toLocaleDateString('pt-BR')}\r\n-            </div>\r\n-        `).join('');\r\n-\r\n-        parcelsHtml += `\r\n-            <h3 style=\"color: #2980b9; margin-top: 25px;\">🔵 A Vencer Hoje</h3>\r\n-            ${dueTodayHtmlList}\r\n-        `;\r\n-    }\r\n-\r\n-    // Preparamos os placeholders para injetar no template principal\r\n-    const placeholders = {\r\n-        companyName: companyName,\r\n-        parcelsHtml: parcelsHtml, // O HTML gerado acima será injetado aqui\r\n-    };\r\n-\r\n-    // Chamamos a função auxiliar com o nome do template do relatório\r\n-    await sendEmailFromTemplate('dailyReport', toEmail, placeholders);\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// Função que Não Usa Template Editável\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Envia o e-mail do formulário de contato.\r\n- * Esta função foi mantida como estava, pois é uma notificação interna para o admin.\r\n- */\r\n-async function sendContactFormEmail(fromName, fromEmail, subject, message) {\r\n-    const toEmail = process.env.CONTACT_FORM_RECIPIENT;\r\n-\r\n-    const emailHtml = `\r\n-        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n-            <h2>Nova Mensagem de Contato do Site</h2>\r\n-            <p>Você recebeu uma nova mensagem através do formulário de contato do site LobosTI.</p>\r\n-            <hr>\r\n-            <p><strong>Nome:</strong> ${fromName}</p>\r\n-            <p><strong>E-mail do Remetente:</strong> ${fromEmail}</p>\r\n-            <p><strong>Assunto:</strong> ${subject}</p>\r\n-            <p><strong>Mensagem:</strong></p>\r\n-            <p style=\"padding: 10px; border-left: 3px solid #ccc;\">${message.replace(/\\n/g, '<br>')}</p>\r\n-            <hr>\r\n-        </div>\r\n-    `;\r\n-\r\n-    const mailOptions = {\r\n-        from: `\"Site LobosTI\" <${process.env.EMAIL_FROM}>`,\r\n-        to: toEmail,\r\n-        subject: `Nova Mensagem de Contato: ${subject}`,\r\n-        html: emailHtml,\r\n-        replyTo: fromEmail\r\n-    };\r\n-\r\n-    try {\r\n-        await transporter.sendMail(mailOptions);\r\n-        console.log(`E-mail de contato de ${fromName} enviado com sucesso para ${toEmail}`);\r\n-    } catch (error) {\r\n-        console.error(`Erro ao enviar e-mail de contato:`, error);\r\n-        throw error;\r\n-    }\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// Exportações\r\n-// =================================================================================\r\n-module.exports = {\r\n-    sendDailyReportEmail,\r\n-    sendContactFormEmail,\r\n-    sendPasswordResetEmail,\r\n-    sendVerificationEmail\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754319372473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n const mongoose = require('mongoose');\r\n const EmailTemplateSchema = require('../models/EmailTemplate').schema;\r\n require('dotenv').config();\r\n \r\n-// Configuração do Nodemailer (inalterada)\r\n const transporter = nodemailer.createTransport({\r\n     host: process.env.EMAIL_HOST,\r\n     port: process.env.EMAIL_PORT,\r\n     secure: process.env.EMAIL_SECURE === 'true', \r\n@@ -13,32 +12,23 @@\n         pass: process.env.EMAIL_PASS,\r\n     },\r\n });\r\n \r\n-// =================================================================================\r\n-// Função Auxiliar Principal\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Busca um template no DB, substitui placeholders e envia o e-mail.\r\n- * @param {string} templateName - O nome único do template (ex: 'passwordReset').\r\n- * @param {string} toEmail - O e-mail do destinatário.\r\n- * @param {object} placeholders - Um objeto com os valores a serem substituídos (ex: { resetLink: '...' }).\r\n- */\r\n-async function sendEmailFromTemplate(templateName, toEmail, placeholders = {}) {\r\n+// A função agora recebe a conexão 'masterDb' como primeiro argumento\r\n+async function sendEmailFromTemplate(masterDb, templateName, toEmail, placeholders = {}) {\r\n     try {\r\n-        const EmailTemplate = mongoose.connection.model('EmailTemplate', EmailTemplateSchema);\r\n+        // Usa a conexão fornecida em vez da conexão global\r\n+        const EmailTemplate = masterDb.model('EmailTemplate', EmailTemplateSchema);\r\n         const template = await EmailTemplate.findOne({ name: templateName });\r\n \r\n         if (!template) {\r\n-            console.error(`ERRO CRÍTICO: Template de e-mail '${templateName}' não foi encontrado na base de dados.`);\r\n+            console.error(`ERRO CRÍTICO: Template de e-mail '${templateName}' não foi encontrado.`);\r\n             return;\r\n         }\r\n \r\n         let subject = template.subject;\r\n         let body = template.body;\r\n \r\n-        // Substitui todos os placeholders no corpo e no assunto do e-mail\r\n         for (const key in placeholders) {\r\n             const regex = new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, 'g');\r\n             subject = subject.replace(regex, placeholders[key]);\r\n             body = body.replace(regex, placeholders[key]);\r\n@@ -59,34 +49,19 @@\n         throw error;\r\n     }\r\n }\r\n \r\n-\r\n-// =================================================================================\r\n-// Funções Refatoradas que Usam Templates\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Envia o e-mail de verificação de conta usando um template do DB.\r\n- */\r\n-async function sendVerificationEmail(toEmail, companyName, token) {\r\n+// As funções exportadas agora também recebem 'masterDb' e passam-no para a frente\r\n+async function sendVerificationEmail(masterDb, toEmail, companyName, token) {\r\n     const verificationLink = `${process.env.FRONTEND_BASE_URL}/verify-email.html?token=${token}`;\r\n-    const placeholders = {\r\n-        companyName: companyName,\r\n-        verificationLink: verificationLink,\r\n-    };\r\n-    await sendEmailFromTemplate('emailVerification', toEmail, placeholders);\r\n+    const placeholders = { companyName, verificationLink };\r\n+    await sendEmailFromTemplate(masterDb, 'emailVerification', toEmail, placeholders);\r\n }\r\n \r\n-/**\r\n- * Envia o e-mail de recuperação de senha usando um template do DB.\r\n- */\r\n-async function sendPasswordResetEmail(toEmail, token) {\r\n+async function sendPasswordResetEmail(masterDb, toEmail, token) {\r\n     const resetLink = `${process.env.FRONTEND_BASE_URL}/reset-password.html?token=${token}`;\r\n-    const placeholders = {\r\n-        resetLink: resetLink,\r\n-    };\r\n-    await sendEmailFromTemplate('passwordReset', toEmail, placeholders);\r\n+    const placeholders = { resetLink };\r\n+    await sendEmailFromTemplate(masterDb, 'passwordReset', toEmail, placeholders);\r\n }\r\n \r\n /**\r\n  * Envia o relatório diário usando um template do DB para o layout principal.\r\n"
                },
                {
                    "date": 1754319434817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,16 +105,10 @@\n             ${dueTodayHtmlList}\r\n         `;\r\n     }\r\n \r\n-    // Preparamos os placeholders para injetar no template principal\r\n-    const placeholders = {\r\n-        companyName: companyName,\r\n-        parcelsHtml: parcelsHtml, // O HTML gerado acima será injetado aqui\r\n-    };\r\n-\r\n-    // Chamamos a função auxiliar com o nome do template do relatório\r\n-    await sendEmailFromTemplate('dailyReport', toEmail, placeholders);\r\n+    const placeholders = { companyName, parcelsHtml };\r\n+    await sendEmailFromTemplate(masterDb, 'dailyReport', toEmail, placeholders);\r\n }\r\n \r\n \r\n // =================================================================================\r\n"
                },
                {
                    "date": 1754319566880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n const mongoose = require('mongoose');\r\n const EmailTemplateSchema = require('../models/EmailTemplate').schema;\r\n require('dotenv').config();\r\n \r\n+// Configuração do Nodemailer (inalterada)\r\n const transporter = nodemailer.createTransport({\r\n     host: process.env.EMAIL_HOST,\r\n     port: process.env.EMAIL_PORT,\r\n     secure: process.env.EMAIL_SECURE === 'true', \r\n@@ -12,23 +13,32 @@\n         pass: process.env.EMAIL_PASS,\r\n     },\r\n });\r\n \r\n-// A função agora recebe a conexão 'masterDb' como primeiro argumento\r\n-async function sendEmailFromTemplate(masterDb, templateName, toEmail, placeholders = {}) {\r\n+// =================================================================================\r\n+// Função Auxiliar Principal\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Busca um template no DB, substitui placeholders e envia o e-mail.\r\n+ * @param {string} templateName - O nome único do template (ex: 'passwordReset').\r\n+ * @param {string} toEmail - O e-mail do destinatário.\r\n+ * @param {object} placeholders - Um objeto com os valores a serem substituídos (ex: { resetLink: '...' }).\r\n+ */\r\n+async function sendEmailFromTemplate(templateName, toEmail, placeholders = {}) {\r\n     try {\r\n-        // Usa a conexão fornecida em vez da conexão global\r\n-        const EmailTemplate = masterDb.model('EmailTemplate', EmailTemplateSchema);\r\n+        const EmailTemplate = mongoose.connection.model('EmailTemplate', EmailTemplateSchema);\r\n         const template = await EmailTemplate.findOne({ name: templateName });\r\n \r\n         if (!template) {\r\n-            console.error(`ERRO CRÍTICO: Template de e-mail '${templateName}' não foi encontrado.`);\r\n+            console.error(`ERRO CRÍTICO: Template de e-mail '${templateName}' não foi encontrado na base de dados.`);\r\n             return;\r\n         }\r\n \r\n         let subject = template.subject;\r\n         let body = template.body;\r\n \r\n+        // Substitui todos os placeholders no corpo e no assunto do e-mail\r\n         for (const key in placeholders) {\r\n             const regex = new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, 'g');\r\n             subject = subject.replace(regex, placeholders[key]);\r\n             body = body.replace(regex, placeholders[key]);\r\n@@ -49,19 +59,34 @@\n         throw error;\r\n     }\r\n }\r\n \r\n-// As funções exportadas agora também recebem 'masterDb' e passam-no para a frente\r\n-async function sendVerificationEmail(masterDb, toEmail, companyName, token) {\r\n+\r\n+// =================================================================================\r\n+// Funções Refatoradas que Usam Templates\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Envia o e-mail de verificação de conta usando um template do DB.\r\n+ */\r\n+async function sendVerificationEmail(toEmail, companyName, token) {\r\n     const verificationLink = `${process.env.FRONTEND_BASE_URL}/verify-email.html?token=${token}`;\r\n-    const placeholders = { companyName, verificationLink };\r\n-    await sendEmailFromTemplate(masterDb, 'emailVerification', toEmail, placeholders);\r\n+    const placeholders = {\r\n+        companyName: companyName,\r\n+        verificationLink: verificationLink,\r\n+    };\r\n+    await sendEmailFromTemplate('emailVerification', toEmail, placeholders);\r\n }\r\n \r\n-async function sendPasswordResetEmail(masterDb, toEmail, token) {\r\n+/**\r\n+ * Envia o e-mail de recuperação de senha usando um template do DB.\r\n+ */\r\n+async function sendPasswordResetEmail(toEmail, token) {\r\n     const resetLink = `${process.env.FRONTEND_BASE_URL}/reset-password.html?token=${token}`;\r\n-    const placeholders = { resetLink };\r\n-    await sendEmailFromTemplate(masterDb, 'passwordReset', toEmail, placeholders);\r\n+    const placeholders = {\r\n+        resetLink: resetLink,\r\n+    };\r\n+    await sendEmailFromTemplate('passwordReset', toEmail, placeholders);\r\n }\r\n \r\n /**\r\n  * Envia o relatório diário usando um template do DB para o layout principal.\r\n@@ -105,10 +130,16 @@\n             ${dueTodayHtmlList}\r\n         `;\r\n     }\r\n \r\n-    const placeholders = { companyName, parcelsHtml };\r\n-    await sendEmailFromTemplate(masterDb, 'dailyReport', toEmail, placeholders);\r\n+    // Preparamos os placeholders para injetar no template principal\r\n+    const placeholders = {\r\n+        companyName: companyName,\r\n+        parcelsHtml: parcelsHtml, // O HTML gerado acima será injetado aqui\r\n+    };\r\n+\r\n+    // Chamamos a função auxiliar com o nome do template do relatório\r\n+    await sendEmailFromTemplate('dailyReport', toEmail, placeholders);\r\n }\r\n \r\n \r\n // =================================================================================\r\n"
                },
                {
                    "date": 1754319849703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,20 +14,22 @@\n     },\r\n });\r\n \r\n // =================================================================================\r\n-// Função Auxiliar Principal\r\n+// Função Auxiliar Principal (Modificada)\r\n // =================================================================================\r\n \r\n /**\r\n  * Busca um template no DB, substitui placeholders e envia o e-mail.\r\n- * @param {string} templateName - O nome único do template (ex: 'passwordReset').\r\n+ * @param {mongoose.Connection} masterDb - A conexão com a base de dados mestre.\r\n+ * @param {string} templateName - O nome único do template.\r\n  * @param {string} toEmail - O e-mail do destinatário.\r\n- * @param {object} placeholders - Um objeto com os valores a serem substituídos (ex: { resetLink: '...' }).\r\n+ * @param {object} placeholders - Um objeto com os valores a serem substituídos.\r\n  */\r\n-async function sendEmailFromTemplate(templateName, toEmail, placeholders = {}) {\r\n+async function sendEmailFromTemplate(masterDb, templateName, toEmail, placeholders = {}) {\r\n     try {\r\n-        const EmailTemplate = mongoose.connection.model('EmailTemplate', EmailTemplateSchema);\r\n+        // CORREÇÃO: Usa a conexão 'masterDb' fornecida em vez da conexão global\r\n+        const EmailTemplate = masterDb.model('EmailTemplate', EmailTemplateSchema);\r\n         const template = await EmailTemplate.findOne({ name: templateName });\r\n \r\n         if (!template) {\r\n             console.error(`ERRO CRÍTICO: Template de e-mail '${templateName}' não foi encontrado na base de dados.`);\r\n@@ -36,9 +38,8 @@\n \r\n         let subject = template.subject;\r\n         let body = template.body;\r\n \r\n-        // Substitui todos os placeholders no corpo e no assunto do e-mail\r\n         for (const key in placeholders) {\r\n             const regex = new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, 'g');\r\n             subject = subject.replace(regex, placeholders[key]);\r\n             body = body.replace(regex, placeholders[key]);\r\n@@ -61,42 +62,26 @@\n }\r\n \r\n \r\n // =================================================================================\r\n-// Funções Refatoradas que Usam Templates\r\n+// Funções que Usam Templates (Modificadas)\r\n // =================================================================================\r\n \r\n-/**\r\n- * Envia o e-mail de verificação de conta usando um template do DB.\r\n- */\r\n-async function sendVerificationEmail(toEmail, companyName, token) {\r\n+async function sendVerificationEmail(masterDb, toEmail, companyName, token) {\r\n     const verificationLink = `${process.env.FRONTEND_BASE_URL}/verify-email.html?token=${token}`;\r\n-    const placeholders = {\r\n-        companyName: companyName,\r\n-        verificationLink: verificationLink,\r\n-    };\r\n-    await sendEmailFromTemplate('emailVerification', toEmail, placeholders);\r\n+    const placeholders = { companyName, verificationLink };\r\n+    await sendEmailFromTemplate(masterDb, 'emailVerification', toEmail, placeholders);\r\n }\r\n \r\n-/**\r\n- * Envia o e-mail de recuperação de senha usando um template do DB.\r\n- */\r\n-async function sendPasswordResetEmail(toEmail, token) {\r\n+async function sendPasswordResetEmail(masterDb, toEmail, token) {\r\n     const resetLink = `${process.env.FRONTEND_BASE_URL}/reset-password.html?token=${token}`;\r\n-    const placeholders = {\r\n-        resetLink: resetLink,\r\n-    };\r\n-    await sendEmailFromTemplate('passwordReset', toEmail, placeholders);\r\n+    const placeholders = { resetLink };\r\n+    await sendEmailFromTemplate(masterDb, 'passwordReset', toEmail, placeholders);\r\n }\r\n \r\n-/**\r\n- * Envia o relatório diário usando um template do DB para o layout principal.\r\n- */\r\n-async function sendDailyReportEmail(toEmail, companyName, overdueParcels, dueTodayParcels) {\r\n-    // A lógica para gerar o HTML das parcelas (que é dinâmico) continua aqui.\r\n+async function sendDailyReportEmail(masterDb, toEmail, companyName, overdueParcels, dueTodayParcels) {\r\n     let parcelsHtml = '';\r\n \r\n-    // Secção para parcelas VENCIDAS (em vermelho)\r\n     if (overdueParcels.length > 0) {\r\n         const overdueHtmlList = overdueParcels.map(item => `\r\n             <div style=\"border: 1px solid #c0392b; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #f2dede;\">\r\n                 <strong>Nome:</strong> ${item.billName}<br>\r\n@@ -112,9 +97,8 @@\n             ${overdueHtmlList}\r\n         `;\r\n     }\r\n \r\n-    // Secção para parcelas A VENCER HOJE (em azul)\r\n     if (dueTodayParcels.length > 0) {\r\n         const dueTodayHtmlList = dueTodayParcels.map(item => `\r\n             <div style=\"border: 1px solid #2980b9; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #eaf2f8;\">\r\n                 <strong>Nome:</strong> ${item.billName}<br>\r\n@@ -130,30 +114,19 @@\n             ${dueTodayHtmlList}\r\n         `;\r\n     }\r\n \r\n-    // Preparamos os placeholders para injetar no template principal\r\n-    const placeholders = {\r\n-        companyName: companyName,\r\n-        parcelsHtml: parcelsHtml, // O HTML gerado acima será injetado aqui\r\n-    };\r\n-\r\n-    // Chamamos a função auxiliar com o nome do template do relatório\r\n-    await sendEmailFromTemplate('dailyReport', toEmail, placeholders);\r\n+    const placeholders = { companyName, parcelsHtml };\r\n+    await sendEmailFromTemplate(masterDb, 'dailyReport', toEmail, placeholders);\r\n }\r\n \r\n \r\n // =================================================================================\r\n-// Função que Não Usa Template Editável\r\n+// Funções que Não Usam a Base de Dados (Inalteradas)\r\n // =================================================================================\r\n \r\n-/**\r\n- * Envia o e-mail do formulário de contato.\r\n- * Esta função foi mantida como estava, pois é uma notificação interna para o admin.\r\n- */\r\n async function sendContactFormEmail(fromName, fromEmail, subject, message) {\r\n     const toEmail = process.env.CONTACT_FORM_RECIPIENT;\r\n-\r\n     const emailHtml = `\r\n         <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n             <h2>Nova Mensagem de Contato do Site</h2>\r\n             <p>Você recebeu uma nova mensagem através do formulário de contato do site LobosTI.</p>\r\n@@ -165,52 +138,20 @@\n             <p style=\"padding: 10px; border-left: 3px solid #ccc;\">${message.replace(/\\n/g, '<br>')}</p>\r\n             <hr>\r\n         </div>\r\n     `;\r\n-\r\n-    const mailOptions = {\r\n-        from: `\"Site LobosTI\" <${process.env.EMAIL_FROM}>`,\r\n-        to: toEmail,\r\n-        subject: `Nova Mensagem de Contato: ${subject}`,\r\n-        html: emailHtml,\r\n-        replyTo: fromEmail\r\n-    };\r\n-\r\n-    try {\r\n-        await transporter.sendMail(mailOptions);\r\n-        console.log(`E-mail de contato de ${fromName} enviado com sucesso para ${toEmail}`);\r\n-    } catch (error) {\r\n-        console.error(`Erro ao enviar e-mail de contato:`, error);\r\n-        throw error;\r\n-    }\r\n+    const mailOptions = { from: `\"Site LobosTI\" <${process.env.EMAIL_FROM}>`, to: toEmail, subject: `Nova Mensagem de Contato: ${subject}`, html: emailHtml, replyTo: fromEmail };\r\n+    await transporter.sendMail(mailOptions);\r\n }\r\n \r\n-/**\r\n- * Envia um e-mail genérico com assunto e corpo definidos.\r\n- * @param {string} toEmail - O e-mail do destinatário.\r\n- * @param {string} subject - O assunto do e-mail.\r\n- * @param {string} body - O corpo do e-mail (pode ser HTML).\r\n- */\r\n async function sendGenericEmail(toEmail, subject, body) {\r\n-    const mailOptions = {\r\n-        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n-        to: toEmail,\r\n-        subject: subject,\r\n-        html: body,\r\n-    };\r\n-\r\n-    try {\r\n-        await transporter.sendMail(mailOptions);\r\n-        console.log(`E-mail genérico com assunto \"${subject}\" enviado para ${toEmail}`);\r\n-    } catch (error) {\r\n-        console.error(`Erro ao enviar e-mail genérico para ${toEmail}:`, error);\r\n-        throw error; // Propaga o erro para a rota saber que falhou\r\n-    }\r\n+    const mailOptions = { from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`, to: toEmail, subject: subject, html: body };\r\n+    await transporter.sendMail(mailOptions);\r\n }\r\n \r\n \r\n // =================================================================================\r\n-// Exportações\r\n+// Exportações (Atualizadas)\r\n // =================================================================================\r\n module.exports = {\r\n     sendDailyReportEmail,\r\n     sendContactFormEmail,\r\n"
                },
                {
                    "date": 1754323881383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,6 +156,7 @@\n     sendDailyReportEmail,\r\n     sendContactFormEmail,\r\n     sendPasswordResetEmail,\r\n     sendVerificationEmail,\r\n-    sendGenericEmail\r\n+    sendGenericEmail,\r\n+    sendEmailFromTemplate\r\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1752347453360,
            "name": "Commit-0",
            "content": "const nodemailer = require('nodemailer');\r\nrequire('dotenv').config();\r\n\r\n// Configura o \"transportador\" com as credenciais do seu .env\r\nconst transporter = nodemailer.createTransport({\r\n    host: process.env.EMAIL_HOST,\r\n    port: process.env.EMAIL_PORT,\r\n    secure: false, // Para a porta 465 do Gmail, secure é true\r\n    auth: {\r\n        user: process.env.EMAIL_USER,\r\n        pass: process.env.EMAIL_PASS,\r\n    },\r\n});\r\n\r\n// Função para enviar o e-mail de relatório\r\nasync function sendOverdueReportEmail(toEmail, companyName, overdueCount) {\r\n    const emailHtml = `\r\n        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\r\n            <h2>Lembrete de Boletos Vencidos</h2>\r\n            <p>Olá, ${companyName},</p>\r\n            <p>Este é um lembrete do seu Organizador de Boletos.</p>\r\n            <p>Verificamos que atualmente existem <strong>${overdueCount} boleto(s) vencido(s)</strong> e não pago(s) em sua empresa.</p>\r\n            <p>Por favor, acesse a plataforma para regularizar as pendências.</p>\r\n            <br>\r\n            <p>Atenciosamente,</p>\r\n            <p><strong>Equipe do Organizador de Boletos</strong></p>\r\n        </div>\r\n    `;\r\n\r\n    const mailOptions = {\r\n        from: `\"Organizador de Boletos\" <${process.env.EMAIL_FROM}>`,\r\n        to: toEmail,\r\n        subject: `Aviso de Boletos Vencidos - ${companyName}`,\r\n        html: emailHtml,\r\n    };\r\n\r\n    try {\r\n        await transporter.sendMail(mailOptions);\r\n        console.log(`E-mail de teste enviado com sucesso para ${toEmail}`);\r\n    } catch (error) {\r\n        console.error(`Erro ao enviar e-mail de teste para ${toEmail}:`, error);\r\n        // Lançar o erro para que a rota que chamou saiba que falhou\r\n        throw error;\r\n    }\r\n}\r\n\r\nmodule.exports = { sendOverdueReportEmail };"
        }
    ]
}