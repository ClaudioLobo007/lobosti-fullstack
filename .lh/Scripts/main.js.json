{
    "sourceFile": "Scripts/main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 378,
            "patches": [
                {
                    "date": 1752672273587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752672778995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -290,16 +290,22 @@\n         const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n         localStorage.setItem('authToken', data.token);\r\n         isAdminLoggedIn = true;\r\n         showToast('Login de Administrador bem-sucedido!', 'success');\r\n-        //showAdminDashboard();\r\n+        await showAdminDashboard();\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n     }\r\n }\r\n \r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList();\r\n+}\r\n+\r\n async function handleUserLogin(e) {\r\n     e.preventDefault();\r\n     showLoader();\r\n     try {\r\n@@ -313,8 +319,98 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { company, users } = await api.getCompanyDetails(companyId);\r\n+                // Aqui você chamaria a função que abre o modal de detalhes,\r\n+                // que também precisaremos de trazer do script antigo.\r\n+                // Ex: openCompanyDetailsModal(company, users);\r\n+                console.log(company, users); // Placeholder\r\n+                showToast('Funcionalidade \"Detalhes\" a ser implementada.', 'info');\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Para representar um usuário, primeiro precisamos de saber quais usuários existem.\r\n+                const { users } = await api.getCompanyDetails(companyId);\r\n+                if (users.length === 0) {\r\n+                    showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                    return;\r\n+                }\r\n+                const userIdToImpersonate = users[0]._id; // Entra como o primeiro usuário por padrão\r\n+\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                // Guarda o token de admin para poder voltar depois\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                // Usa o novo token de representação\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                // Atualiza o estado da aplicação\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n function handleCalculateInstallments(e) {\r\n     e.preventDefault();\r\n     const billName = document.getElementById('billName').value;\r\n     const dueDate = document.getElementById('dueDate').value;\r\n"
                },
                {
                    "date": 1752673160386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,8 +89,23 @@\n const deleteBillBtn = document.getElementById('deleteBill');\r\n const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -262,9 +277,128 @@\n \r\n     await updateBillsOrganizer();\r\n }\r\n \r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n \r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ */\r\n+function openCompanyDetailsModal(company, users) {\r\n+    selectedCompanyForAdmin = company; // Guarda a empresa selecionada no estado da aplicação\r\n+\r\n+    // Preenche os campos do modal com os dados da empresa\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = ''; // Limpa a senha por segurança\r\n+\r\n+    // Preenche as informações de assinatura\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    // Limpa e recria a lista de usuários\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (users && users.length > 0) {\r\n+        users.forEach(user => {\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username} (${user.role})</span>\r\n+                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                </div>\r\n+            `);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n@@ -359,49 +493,41 @@\n         button.addEventListener('click', async (e) => {\r\n             const companyId = e.target.dataset.companyId;\r\n             showLoader();\r\n             try {\r\n+                // Chama a API para obter os detalhes\r\n                 const { company, users } = await api.getCompanyDetails(companyId);\r\n-                // Aqui você chamaria a função que abre o modal de detalhes,\r\n-                // que também precisaremos de trazer do script antigo.\r\n-                // Ex: openCompanyDetailsModal(company, users);\r\n-                console.log(company, users); // Placeholder\r\n-                showToast('Funcionalidade \"Detalhes\" a ser implementada.', 'info');\r\n+                // Chama a nossa nova função para abrir e preencher o modal\r\n+                openCompanyDetailsModal(company, users);\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n             }\r\n         });\r\n     });\r\n \r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n     document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n             const companyId = e.target.dataset.companyId;\r\n             showLoader();\r\n             try {\r\n-                // Para representar um usuário, primeiro precisamos de saber quais usuários existem.\r\n                 const { users } = await api.getCompanyDetails(companyId);\r\n                 if (users.length === 0) {\r\n-                    showToast('Esta empresa não possui usuários para representar.', 'info');\r\n-                    return;\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n                 }\r\n-                const userIdToImpersonate = users[0]._id; // Entra como o primeiro usuário por padrão\r\n-\r\n+                const userIdToImpersonate = users[0]._id;\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n-                // Guarda o token de admin para poder voltar depois\r\n                 localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                // Usa o novo token de representação\r\n                 localStorage.setItem('authToken', data.token);\r\n \r\n-                // Atualiza o estado da aplicação\r\n                 currentLoggedInCompany = data.company;\r\n                 currentLoggedInUser = data.user;\r\n                 loggedInViaAdmin = true;\r\n \r\n                 await showMainApp();\r\n-\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n@@ -565,8 +691,14 @@\n     if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n     if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n     if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n     if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n \r\n     // Ações na App Principal\r\n     logoutBtn.addEventListener('click', showInitialLogin);\r\n     clearFormBtn.addEventListener('click', clearBillForm);\r\n"
                },
                {
                    "date": 1752673458239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,16 @@\n const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n const daysToAddInput = document.getElementById('daysToAddInput');\r\n const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -396,9 +404,41 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n \r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n@@ -642,35 +682,54 @@\n /**\r\n  * Função de inicialização principal da aplicação.\r\n  */\r\n async function initializeApp() {\r\n+    // Define a data atual para o calendário\r\n     const today = new Date();\r\n     currentMonth = today.getMonth();\r\n     currentYear = today.getFullYear();\r\n \r\n+    // Verifica se existe um token\r\n     const token = localStorage.getItem('authToken');\r\n     if (!token) {\r\n         showInitialLogin();\r\n         return;\r\n     }\r\n \r\n     showLoader();\r\n     try {\r\n+        // Valida o token e busca os dados do utilizador e da empresa\r\n         const data = await api.checkSession();\r\n-        // A lógica de verificação de sessão e redirecionamento continua aqui.\r\n+\r\n+        // Se for SuperAdmin, vai para o painel de admin\r\n         if (data.user.role === 'SuperAdmin') {\r\n             isAdminLoggedIn = true;\r\n-            // showAdminDashboard(); // Descomentar quando a função estiver completa\r\n+            await showAdminDashboard();\r\n         } else {\r\n+            // Para outros utilizadores, atualiza o estado e verifica a assinatura\r\n             currentLoggedInUser = data.user;\r\n             currentLoggedInCompany = data.company;\r\n-            // ... aqui entra a verificação de assinatura do checkSubscription ...\r\n-            // Por simplicidade, vamos direto para a app principal por enquanto.\r\n-            await showMainApp();\r\n+\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                // Se a assinatura estiver ativa, mostra a aplicação principal\r\n+                await showMainApp();\r\n+            } else {\r\n+                // Se a assinatura NÃO estiver ativa...\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    // ...e o utilizador for o Proprietário, mostra o modal de renovação/assinatura.\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    // ...para Gerentes e Funcionários, mostra o ecrã de acesso bloqueado.\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n         }\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n+        showInitialLogin(); // Em caso de erro (ex: token inválido), volta ao início\r\n     } finally {\r\n         hideLoader();\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1752673713735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -691,47 +691,39 @@\n     // Verifica se existe um token\r\n     const token = localStorage.getItem('authToken');\r\n     if (!token) {\r\n         showInitialLogin();\r\n+        // Se não há token, também escondemos o ecrã de carregamento principal.\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n         return;\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        // Valida o token e busca os dados do utilizador e da empresa\r\n+    } try {\r\n         const data = await api.checkSession();\r\n \r\n-        // Se for SuperAdmin, vai para o painel de admin\r\n         if (data.user.role === 'SuperAdmin') {\r\n             isAdminLoggedIn = true;\r\n             await showAdminDashboard();\r\n         } else {\r\n-            // Para outros utilizadores, atualiza o estado e verifica a assinatura\r\n             currentLoggedInUser = data.user;\r\n             currentLoggedInCompany = data.company;\r\n \r\n             const subscription = currentLoggedInCompany.subscription;\r\n             const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n \r\n             if (isSubscriptionActive) {\r\n-                // Se a assinatura estiver ativa, mostra a aplicação principal\r\n                 await showMainApp();\r\n             } else {\r\n-                // Se a assinatura NÃO estiver ativa...\r\n                 if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    // ...e o utilizador for o Proprietário, mostra o modal de renovação/assinatura.\r\n                     showSubscriptionModal(currentLoggedInCompany);\r\n                 } else {\r\n-                    // ...para Gerentes e Funcionários, mostra o ecrã de acesso bloqueado.\r\n                     showAccessBlockedModal();\r\n                 }\r\n             }\r\n         }\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n-        showInitialLogin(); // Em caso de erro (ex: token inválido), volta ao início\r\n+        showInitialLogin();\r\n     } finally {\r\n-        hideLoader();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n     }\r\n }\r\n \r\n // =================================================================================\r\n"
                },
                {
                    "date": 1752673884172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,9 +298,9 @@\n \r\n     // Preenche os campos do modal com os dados da empresa\r\n     modalCompanyNameInput.value = company.nomeEmpresa;\r\n     modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = ''; // Limpa a senha por segurança\r\n+    modalCompanyPasswordInput.value = '';\r\n \r\n     // Preenche as informações de assinatura\r\n     adminSubscriptionManagement.classList.remove('hidden');\r\n     if (company.subscription && company.subscription.status) {\r\n@@ -315,19 +315,52 @@\n     // Limpa e recria a lista de usuários\r\n     modalCompanyUsers.innerHTML = '';\r\n     if (users && users.length > 0) {\r\n         users.forEach(user => {\r\n+            // Não se pode remover o próprio proprietário\r\n+            const isOwner = user.role === 'Proprietário';\r\n             modalCompanyUsers.insertAdjacentHTML('beforeend', `\r\n                 <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n                     <span class=\"text-white\">${user.username} (${user.role})</span>\r\n-                    <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    ${isOwner ? '' : `<button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n                 </div>\r\n             `);\r\n         });\r\n     } else {\r\n         modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n     }\r\n \r\n+    // =======================================================================\r\n+    // A CORREÇÃO ESTÁ AQUI\r\n+    // Adicionamos os eventos para os botões \"Remover\" que acabámos de criar\r\n+    // =======================================================================\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza que deseja remover este utilizador? Esta ação não pode ser desfeita.`)) {\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a nossa função da API para apagar o utilizador\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+\r\n+                // Para atualizar a lista, buscamos os dados novamente e reabrimos o modal\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n     companyDetailsModal.classList.remove('hidden');\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1752674011537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,25 +315,21 @@\n     // Limpa e recria a lista de usuários\r\n     modalCompanyUsers.innerHTML = '';\r\n     if (users && users.length > 0) {\r\n         users.forEach(user => {\r\n-            // Não se pode remover o próprio proprietário\r\n-            const isOwner = user.role === 'Proprietário';\r\n+            const shouldHideRemoveButton = user.role === 'Proprietário' && !isAdminLoggedIn;\r\n             modalCompanyUsers.insertAdjacentHTML('beforeend', `\r\n                 <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n                     <span class=\"text-white\">${user.username} (${user.role})</span>\r\n-                    ${isOwner ? '' : `<button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                    ${shouldHideRemoveButton ? '' : `<button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n                 </div>\r\n             `);\r\n         });\r\n     } else {\r\n         modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n     }\r\n \r\n-    // =======================================================================\r\n-    // A CORREÇÃO ESTÁ AQUI\r\n-    // Adicionamos os eventos para os botões \"Remover\" que acabámos de criar\r\n-    // =======================================================================\r\n+    // Adiciona os eventos para os botões \"Remover\" que acabámos de criar\r\n     document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n             const userId = e.target.dataset.userId;\r\n             const companyId = selectedCompanyForAdmin._id;\r\n@@ -343,16 +339,12 @@\n             }\r\n \r\n             showLoader();\r\n             try {\r\n-                // Chama a nossa função da API para apagar o utilizador\r\n                 await api.deleteUserFromCompany(companyId, userId);\r\n                 showToast('Utilizador removido com sucesso!');\r\n-\r\n-                // Para atualizar a lista, buscamos os dados novamente e reabrimos o modal\r\n                 const updatedData = await api.getCompanyDetails(companyId);\r\n                 openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n"
                },
                {
                    "date": 1752674171356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,8 +112,12 @@\n const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -354,9 +358,61 @@\n \r\n     companyDetailsModal.classList.remove('hidden');\r\n }\r\n \r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n \r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault(); // Impede o recarregamento da página\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+    const companyId = selectedCompanyForAdmin?._id;\r\n+\r\n+    if (password !== confirmPassword) {\r\n+        return showToast(\"As senhas não coincidem.\", \"error\");\r\n+    }\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        // Usa a nossa função da API para registar o novo utilizador\r\n+        const data = await api.registerUser(username, password, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        // Atualiza o modal de detalhes da empresa para mostrar o novo utilizador\r\n+        const updatedData = await api.getCompanyDetails(companyId);\r\n+        openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n // --- Handlers para os botões DENTRO do modal ---\r\n \r\n async function handleUpdateCompany() {\r\n     if (!selectedCompanyForAdmin) return;\r\n@@ -773,8 +829,12 @@\n     if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n     if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n     if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n     if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n \r\n     // Ações na App Principal\r\n     logoutBtn.addEventListener('click', showInitialLogin);\r\n     clearFormBtn.addEventListener('click', clearBillForm);\r\n"
                },
                {
                    "date": 1752674364823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,16 +297,14 @@\n  * @param {object} company - O objeto da empresa.\r\n  * @param {Array} users - A lista de usuários da empresa.\r\n  */\r\n function openCompanyDetailsModal(company, users) {\r\n-    selectedCompanyForAdmin = company; // Guarda a empresa selecionada no estado da aplicação\r\n+    selectedCompanyForAdmin = company;\r\n \r\n-    // Preenche os campos do modal com os dados da empresa\r\n     modalCompanyNameInput.value = company.nomeEmpresa;\r\n     modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n     modalCompanyPasswordInput.value = '';\r\n \r\n-    // Preenche as informações de assinatura\r\n     adminSubscriptionManagement.classList.remove('hidden');\r\n     if (company.subscription && company.subscription.status) {\r\n         subscriptionStatus.textContent = company.subscription.status;\r\n         subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n@@ -315,34 +313,41 @@\n         subscriptionStatus.textContent = 'Não configurada';\r\n         subscriptionEndDate.textContent = 'N/A';\r\n     }\r\n \r\n-    // Limpa e recria a lista de usuários\r\n     modalCompanyUsers.innerHTML = '';\r\n     if (users && users.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n         users.forEach(user => {\r\n-            const shouldHideRemoveButton = user.role === 'Proprietário' && !isAdminLoggedIn;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', `\r\n+            // Cria as opções do dropdown, marcando a atual como selecionada\r\n+            const roleOptions = roles.map(role => \r\n+                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+            ).join('');\r\n+\r\n+            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n+            const userHtml = `\r\n                 <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username} (${user.role})</span>\r\n-                    ${shouldHideRemoveButton ? '' : `<button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n                 </div>\r\n-            `);\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n         });\r\n     } else {\r\n         modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n     }\r\n \r\n-    // Adiciona os eventos para os botões \"Remover\" que acabámos de criar\r\n+    // Adiciona o evento para os botões \"Remover\"\r\n     document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n             const userId = e.target.dataset.userId;\r\n             const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza que deseja remover este utilizador? Esta ação não pode ser desfeita.`)) {\r\n-                return;\r\n-            }\r\n-\r\n+            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n             showLoader();\r\n             try {\r\n                 await api.deleteUserFromCompany(companyId, userId);\r\n                 showToast('Utilizador removido com sucesso!');\r\n@@ -354,9 +359,31 @@\n                 hideLoader();\r\n             }\r\n         });\r\n     });\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n \r\n+            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n     companyDetailsModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1752674637875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,13 @@\n const addUserModal = document.getElementById('addUserModal');\r\n const addUserForm = document.getElementById('addUserForm');\r\n const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -512,10 +517,8 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n /**\r\n  * Configura e exibe o modal de assinatura para o Proprietário.\r\n  * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n  */\r\n@@ -544,9 +547,52 @@\n     hideAllScreens();\r\n     accessBlockedModal.classList.remove('hidden');\r\n }\r\n \r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n \r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n@@ -860,9 +906,14 @@\n     if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n     if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n     if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n     if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n \r\n+\r\n     // Ações na App Principal\r\n     logoutBtn.addEventListener('click', showInitialLogin);\r\n     clearFormBtn.addEventListener('click', clearBillForm);\r\n     addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n@@ -890,7 +941,11 @@\n         renderCalendar();\r\n         updateMonthlySummary();\r\n     });\r\n \r\n+    if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n     // Inicia a aplicação\r\n     initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752674868056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -879,8 +879,37 @@\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+    \r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n@@ -910,8 +939,9 @@\n     if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n     if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n     if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n     if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n \r\n \r\n     // Ações na App Principal\r\n     logoutBtn.addEventListener('click', showInitialLogin);\r\n"
                },
                {
                    "date": 1752675476566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -940,8 +940,9 @@\n     if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n     if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n     if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n     if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n \r\n \r\n     // Ações na App Principal\r\n     logoutBtn.addEventListener('click', showInitialLogin);\r\n"
                },
                {
                    "date": 1752675741987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -636,12 +636,32 @@\n async function handleUserLogin(e) {\r\n     e.preventDefault();\r\n     showLoader();\r\n     try {\r\n-        const data = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n-        localStorage.setItem('authToken', data.token);\r\n-        currentLoggedInUser = data.user;\r\n-        await showMainApp();\r\n+        // 1. Faz o login do utilizador para obter um token válido.\r\n+        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n+        localStorage.setItem('authToken', loginData.token);\r\n+        \r\n+        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n+        const sessionData = await api.checkSession();\r\n+        currentLoggedInUser = sessionData.user;\r\n+        currentLoggedInCompany = sessionData.company;\r\n+\r\n+        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            // Se estiver tudo OK, entra na aplicação.\r\n+            await showMainApp();\r\n+        } else {\r\n+            // Caso contrário, direciona para o ecrã correto.\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n"
                },
                {
                    "date": 1752675927795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -996,7 +996,21 @@\n     if (addCompanyCnpjInput) {\r\n     IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n     }\r\n \r\n+    const handleFullLogoutAndRedirect = () => {\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        window.location.href = 'Index.html'; // Redireciona para a página principal\r\n+    };\r\n+\r\n+    if (subscriptionLogoutBtn) {\r\n+        subscriptionLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+    }\r\n+    \r\n+    if (blockedAccessLogoutBtn) {\r\n+        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+    }\r\n+\r\n     // Inicia a aplicação\r\n     initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752676162140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -996,18 +996,22 @@\n     if (addCompanyCnpjInput) {\r\n     IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n     }\r\n \r\n+    const handleRedirectToHome = () => {\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n     const handleFullLogoutAndRedirect = () => {\r\n         localStorage.removeItem('authToken');\r\n         localStorage.removeItem('superAdminToken');\r\n-        window.location.href = 'Index.html'; // Redireciona para a página principal\r\n+        window.location.href = 'Index.html';\r\n     };\r\n \r\n     if (subscriptionLogoutBtn) {\r\n-        subscriptionLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n     }\r\n-    \r\n+\r\n     if (blockedAccessLogoutBtn) {\r\n         blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n     }\r\n \r\n"
                },
                {
                    "date": 1752676437170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,8 +121,20 @@\n const addCompanyForm = document.getElementById('addCompanyForm');\r\n const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+// (Os outros modais já foram declarados anteriormente)\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -591,8 +603,104 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+        \r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+        \r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+        \r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+        \r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n@@ -961,8 +1069,12 @@\n     if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n     if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n     if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n     if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n \r\n \r\n     // Ações na App Principal\r\n     logoutBtn.addEventListener('click', showInitialLogin);\r\n@@ -1014,7 +1126,34 @@\n     if (blockedAccessLogoutBtn) {\r\n         blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n     }\r\n \r\n+    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+    if (settingsBtn) {\r\n+        settingsBtn.addEventListener('click', (e) => {\r\n+            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+            settingsDropdown.classList.toggle('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    // Links dentro do menu dropdown\r\n+    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCompanyInfoModal();\r\n+    });\r\n+\r\n+    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openPermissionsModal();\r\n+    });\r\n+\r\n+    window.addEventListener('click', () => {\r\n+        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n     // Inicia a aplicação\r\n     initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752676598569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,12 @@\n const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n const permissionsModal = document.getElementById('permissionsModal');\r\n const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-// (Os outros modais já foram declarados anteriormente)\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -1036,8 +1039,61 @@\n     // Mostra o painel de administração novamente.\r\n     showAdminDashboard();\r\n }\r\n \r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+        \r\n+        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n+        if (users && users.length > 0) {\r\n+            users.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center mb-2\">\r\n+                        <div>\r\n+                            <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                            <p class=\"text-xs text-gray-400\">${user.role}</p>\r\n+                        </div>\r\n+                        ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        } else {\r\n+            companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum outro utilizador encontrado.</p>';\r\n+        }\r\n+\r\n+        // Adiciona o evento de clique aos novos botões de remover\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                if (!confirm('Tem a certeza que deseja remover este utilizador?')) return;\r\n+                \r\n+                showLoader();\r\n+                try {\r\n+                    await api.deleteUserFromCompany(currentLoggedInCompany._id, userId);\r\n+                    showToast('Utilizador removido com sucesso!');\r\n+                    await openManageUsersModal(); // Recarrega a lista no modal\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n@@ -1153,7 +1209,22 @@\n             settingsDropdown.classList.add('hidden');\r\n         }\r\n     });\r\n \r\n+    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openManageUsersModal();\r\n+    });\r\n+\r\n+    // Botões do modal de gerir utilizadores\r\n+    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+    });\r\n+\r\n     // Inicia a aplicação\r\n     initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752676767823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1047,25 +1047,40 @@\n     showLoader();\r\n     try {\r\n         const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n         \r\n+        // Assegura que o elemento alvo existe antes de o manipular\r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n         companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n+        \r\n+        let otherUsersExist = false;\r\n         if (users && users.length > 0) {\r\n             users.forEach(user => {\r\n                 const isOwner = user.role === 'Proprietário';\r\n+                \r\n+                // Adiciona o HTML para cada utilizador\r\n                 companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center mb-2\">\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n                         <div>\r\n                             <p class=\"font-semibold text-white\">${user.username}</p>\r\n                             <p class=\"text-xs text-gray-400\">${user.role}</p>\r\n                         </div>\r\n                         ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n                     </div>\r\n                 `);\r\n+\r\n+                if (!isOwner) {\r\n+                    otherUsersExist = true;\r\n+                }\r\n             });\r\n-        } else {\r\n-            companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum outro utilizador encontrado.</p>';\r\n         }\r\n+        \r\n+        // Se após o loop, só existir o proprietário, mostra a mensagem.\r\n+        if (!otherUsersExist) {\r\n+             companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center py-4\">Nenhum outro utilizador para gerir.</p>';\r\n+        }\r\n \r\n         // Adiciona o evento de clique aos novos botões de remover\r\n         document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n             button.addEventListener('click', async (e) => {\r\n"
                },
                {
                    "date": 1752676913110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -426,32 +426,44 @@\n  * Lida com a submissão do formulário de novo utilizador.\r\n  * @param {Event} e - O evento de submissão do formulário.\r\n  */\r\n async function handleAddUserSubmit(e) {\r\n-    e.preventDefault(); // Impede o recarregamento da página\r\n+    e.preventDefault();\r\n \r\n     const username = document.getElementById('addUsernameInput').value;\r\n     const password = document.getElementById('addUserPasswordInput').value;\r\n     const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-    const companyId = selectedCompanyForAdmin?._id;\r\n+    \r\n+    // =======================================================================\r\n+    // A CORREÇÃO ESTÁ AQUI\r\n+    // Primeiro, tenta obter a empresa selecionada pelo admin. Se não existir,\r\n+    // usa a empresa do utilizador que está atualmente logado (o Proprietário).\r\n+    // =======================================================================\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n \r\n     if (password !== confirmPassword) {\r\n         return showToast(\"As senhas não coincidem.\", \"error\");\r\n     }\r\n+    // A verificação agora funciona para os dois casos\r\n     if (!companyId) {\r\n         return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n     }\r\n \r\n     showLoader();\r\n     try {\r\n-        // Usa a nossa função da API para registar o novo utilizador\r\n         const data = await api.registerUser(username, password, companyId);\r\n         showToast(data.message, 'success');\r\n         closeAddUserModal();\r\n \r\n-        // Atualiza o modal de detalhes da empresa para mostrar o novo utilizador\r\n-        const updatedData = await api.getCompanyDetails(companyId);\r\n-        openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n+        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n+            await openManageUsersModal();\r\n+        }\r\n \r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n"
                },
                {
                    "date": 1752677550186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1253 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let inactivityTimer;\r\n+\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+const cnpjInput = document.getElementById('cnpjInput');\r\n+const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+const userLoginScreen = document.getElementById('userLoginScreen');\r\n+const userLoginForm = document.getElementById('userLoginForm');\r\n+const welcomeUserText = document.getElementById('welcomeUserText');\r\n+const userInput = document.getElementById('userInput');\r\n+const userPasswordInput = document.getElementById('userPasswordInput');\r\n+const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo financeiro do mês (vencido, total, pago, não pago).\r\n+ */\r\n+function updateMonthlySummary() {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPago = totalMes - totalPago;\r\n+    \r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => new Date(parcel.dueDate + 'T00:00:00') < today && !parcel.paid);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    summaryOverdue.textContent = formatCurrency(totalOverdue);\r\n+    summaryTotal.textContent = formatCurrency(totalMes);\r\n+    summaryPaid.textContent = formatCurrency(totalPago);\r\n+    summaryUnpaid.textContent = formatCurrency(totalNaoPago);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com os boletos do mês atual.\r\n+ */\r\n+function renderCalendar() {\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+        dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+        \r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card')) return;\r\n+            clearBillForm();\r\n+            document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n+            addBillModal.classList.remove('hidden');\r\n+        });\r\n+\r\n+        userBoletos.forEach(bill => {\r\n+            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                const parcelElement = document.createElement('div');\r\n+                parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+                parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        });\r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+function openBillModal(bill, parcel) {\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+    \r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    billForm.reset();\r\n+    installmentsPreview.classList.add('hidden');\r\n+    installmentsList.innerHTML = '';\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        totalBillsSpan.textContent = totalParcels;\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Funções para mostrar os diferentes ecrãs da aplicação.\r\n+ */\r\n+function showInitialLogin() {\r\n+    hideAllScreens();\r\n+    initialLoginScreen.classList.remove('hidden');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    currentLoggedInCompany = null;\r\n+    currentLoggedInUser = null;\r\n+    isAdminLoggedIn = false;\r\n+    loggedInViaAdmin = false;\r\n+}\r\n+\r\n+function showCnpjLogin() {\r\n+    hideAllScreens();\r\n+    cnpjLoginForm.reset();\r\n+    cnpjLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showAdminLogin() {\r\n+    hideAllScreens();\r\n+    adminLoginForm.reset();\r\n+    adminLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showUserLogin(companyName) {\r\n+    hideAllScreens();\r\n+    userLoginForm.reset();\r\n+    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+    userLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    mainAppContent.classList.remove('hidden');\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+    await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ */\r\n+function openCompanyDetailsModal(company, users) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (users && users.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        users.forEach(user => {\r\n+            // Cria as opções do dropdown, marcando a atual como selecionada\r\n+            const roleOptions = roles.map(role => \r\n+                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+            ).join('');\r\n+\r\n+            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona o evento para os botões \"Remover\"\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+    \r\n+    // =======================================================================\r\n+    // A CORREÇÃO ESTÁ AQUI\r\n+    // Primeiro, tenta obter a empresa selecionada pelo admin. Se não existir,\r\n+    // usa a empresa do utilizador que está atualmente logado (o Proprietário).\r\n+    // =======================================================================\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    if (password !== confirmPassword) {\r\n+        return showToast(\"As senhas não coincidem.\", \"error\");\r\n+    }\r\n+    // A verificação agora funciona para os dois casos\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.registerUser(username, password, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n+        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+        \r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+        \r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+        \r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+        \r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+\r\n+async function handleCnpjLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.loginCompany(cnpjInput.value, cnpjPasswordInput.value);\r\n+        localStorage.setItem('authToken', data.token);\r\n+        currentLoggedInCompany = data.company;\r\n+        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAdminLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n+        localStorage.setItem('authToken', data.token);\r\n+        isAdminLoggedIn = true;\r\n+        showToast('Login de Administrador bem-sucedido!', 'success');\r\n+        await showAdminDashboard();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList();\r\n+}\r\n+\r\n+async function handleUserLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        // 1. Faz o login do utilizador para obter um token válido.\r\n+        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n+        localStorage.setItem('authToken', loginData.token);\r\n+        \r\n+        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n+        const sessionData = await api.checkSession();\r\n+        currentLoggedInUser = sessionData.user;\r\n+        currentLoggedInCompany = sessionData.company;\r\n+\r\n+        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            // Se estiver tudo OK, entra na aplicação.\r\n+            await showMainApp();\r\n+        } else {\r\n+            // Caso contrário, direciona para o ecrã correto.\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a API para obter os detalhes\r\n+                const { company, users } = await api.getCompanyDetails(companyId);\r\n+                // Chama a nossa nova função para abrir e preencher o modal\r\n+                openCompanyDetailsModal(company, users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { users } = await api.getCompanyDetails(companyId);\r\n+                if (users.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                }\r\n+                const userIdToImpersonate = users[0]._id;\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+function handleCalculateInstallments(e) {\r\n+    e.preventDefault();\r\n+    const billName = document.getElementById('billName').value;\r\n+    const dueDate = document.getElementById('dueDate').value;\r\n+    const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n+    const installments = parseInt(document.getElementById('installments').value);\r\n+    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+    \r\n+    if (!billName || !dueDate || !totalAmount || !installments) {\r\n+        showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+        return;\r\n+    }\r\n+    \r\n+    currentBill = { name: billName, parcels: [] };\r\n+    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+    installmentsList.innerHTML = '';\r\n+\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput });\r\n+        \r\n+        installmentsList.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"bill-card bg-gray-700 p-3 flex justify-between items-center\">\r\n+                <span>Parcela ${i + 1}</span>\r\n+                <span>${parcelAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</span>\r\n+                <span>Venc: ${parcelDate.toLocaleDateString('pt-BR')}</span>\r\n+            </div>\r\n+        `);\r\n+    }\r\n+    installmentsPreview.classList.remove('hidden');\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${totalAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill);\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        addBillModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+    const updateData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updateData);\r\n+        showToast('Parcela atualizada com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ */\r\n+async function initializeApp() {\r\n+    // Define a data atual para o calendário\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+\r\n+    // Verifica se existe um token\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        showInitialLogin();\r\n+        // Se não há token, também escondemos o ecrã de carregamento principal.\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    } try {\r\n+        const data = await api.checkSession();\r\n+\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+    \r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+        \r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n+        \r\n+        if (users && users.length > 0) {\r\n+            // Passo 1: Cria o HTML para CADA utilizador, sem exceção.\r\n+            users.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <div>\r\n+                            <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                            <p class=\"text-xs text-gray-400\">${user.role}</p>\r\n+                        </div>\r\n+                        ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+            if (users.length === 1 && users[0].role === 'Proprietário') {\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <p class=\"text-gray-400 text-center py-4 mt-4\">Nenhum outro utilizador para gerir.</p>\r\n+                `);\r\n+            }\r\n+        } else {\r\n+             // Caso não haja utilizador nenhum (o que não deve acontecer, mas por segurança)\r\n+             companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center py-4\">Nenhum utilizador encontrado.</p>';\r\n+        }\r\n+\r\n+        // Adiciona o evento de clique aos botões de remover\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                if (!confirm('Tem a certeza que deseja remover este utilizador?')) return;\r\n+                \r\n+                showLoader();\r\n+                try {\r\n+                    await api.deleteUserFromCompany(currentLoggedInCompany._id, userId);\r\n+                    showToast('Utilizador removido com sucesso!');\r\n+                    await openManageUsersModal(); \r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+    // Navegação entre ecrãs de login\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+\r\n+    // Submissão de formulários\r\n+    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n+    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+\r\n+\r\n+    // Ações na App Principal\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+    openAddBillModalBtn.addEventListener('click', () => addBillModal.classList.remove('hidden'));\r\n+    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+    // Ações do Modal de Edição de Boleto\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+    // Navegação do Calendário\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+        if (currentMonth === 11) currentYear--;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+        if (currentMonth === 0) currentYear++;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    const handleRedirectToHome = () => {\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    const handleFullLogoutAndRedirect = () => {\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    if (subscriptionLogoutBtn) {\r\n+        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+    }\r\n+\r\n+    if (blockedAccessLogoutBtn) {\r\n+        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+    }\r\n+\r\n+    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+    if (settingsBtn) {\r\n+        settingsBtn.addEventListener('click', (e) => {\r\n+            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+            settingsDropdown.classList.toggle('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    // Links dentro do menu dropdown\r\n+    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCompanyInfoModal();\r\n+    });\r\n+\r\n+    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openPermissionsModal();\r\n+    });\r\n+\r\n+    window.addEventListener('click', () => {\r\n+        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n+    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openManageUsersModal();\r\n+    });\r\n+\r\n+    // Botões do modal de gerir utilizadores\r\n+    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+    });\r\n+\r\n+    // Inicia a aplicação\r\n+    initializeApp();\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752677674279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1064,1300 +1064,60 @@\n         if (!companyUsersList) return;\r\n \r\n         companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n         \r\n+        // Define os cargos que o Proprietário pode atribuir.\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n         if (users && users.length > 0) {\r\n-            // Passo 1: Cria o HTML para CADA utilizador, sem exceção.\r\n             users.forEach(user => {\r\n                 const isOwner = user.role === 'Proprietário';\r\n+                \r\n+                // Cria as opções do dropdown para Gerente e Funcionário\r\n+                const roleOptions = assignableRoles.map(role => \r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n+                const roleHtml = isOwner \r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n                 companyUsersList.insertAdjacentHTML('beforeend', `\r\n                     <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <div>\r\n-                            <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                            <p class=\"text-xs text-gray-400\">${user.role}</p>\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n                         </div>\r\n-                        ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n                     </div>\r\n                 `);\r\n             });\r\n-            if (users.length === 1 && users[0].role === 'Proprietário') {\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <p class=\"text-gray-400 text-center py-4 mt-4\">Nenhum outro utilizador para gerir.</p>\r\n-                `);\r\n-            }\r\n-        } else {\r\n-             // Caso não haja utilizador nenhum (o que não deve acontecer, mas por segurança)\r\n-             companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center py-4\">Nenhum utilizador encontrado.</p>';\r\n         }\r\n-\r\n+        \r\n         // Adiciona o evento de clique aos botões de remover\r\n         document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n             button.addEventListener('click', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                if (!confirm('Tem a certeza que deseja remover este utilizador?')) return;\r\n-                \r\n-                showLoader();\r\n-                try {\r\n-                    await api.deleteUserFromCompany(currentLoggedInCompany._id, userId);\r\n-                    showToast('Utilizador removido com sucesso!');\r\n-                    await openManageUsersModal(); \r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n+                // ... (a lógica de remover continua a mesma de antes)\r\n             });\r\n         });\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n \r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n+                    e.target.value = originalRole; // Reverte a seleção visual\r\n+                    return;\r\n \r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-    // Navegação entre ecrãs de login\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-\r\n-    // Submissão de formulários\r\n-    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n-    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-\r\n-\r\n-    // Ações na App Principal\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    openAddBillModalBtn.addEventListener('click', () => addBillModal.classList.remove('hidden'));\r\n-    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-    // Ações do Modal de Edição de Boleto\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-    // Navegação do Calendário\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-        if (currentMonth === 11) currentYear--;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-        if (currentMonth === 0) currentYear++;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    const handleRedirectToHome = () => {\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    const handleFullLogoutAndRedirect = () => {\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    if (subscriptionLogoutBtn) {\r\n-        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-    }\r\n-\r\n-    if (blockedAccessLogoutBtn) {\r\n-        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n-    }\r\n-\r\n-    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-    if (settingsBtn) {\r\n-        settingsBtn.addEventListener('click', (e) => {\r\n-            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-            settingsDropdown.classList.toggle('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    // Links dentro do menu dropdown\r\n-    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCompanyInfoModal();\r\n-    });\r\n-\r\n-    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openPermissionsModal();\r\n-    });\r\n-\r\n-    window.addEventListener('click', () => {\r\n-        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n-\r\n-    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openManageUsersModal();\r\n-    });\r\n-\r\n-    // Botões do modal de gerir utilizadores\r\n-    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-    });\r\n-\r\n-    // Inicia a aplicação\r\n-    initializeApp();\r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let inactivityTimer;\r\n-\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-const cnpjInput = document.getElementById('cnpjInput');\r\n-const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-const userLoginScreen = document.getElementById('userLoginScreen');\r\n-const userLoginForm = document.getElementById('userLoginForm');\r\n-const welcomeUserText = document.getElementById('welcomeUserText');\r\n-const userInput = document.getElementById('userInput');\r\n-const userPasswordInput = document.getElementById('userPasswordInput');\r\n-const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo financeiro do mês (vencido, total, pago, não pago).\r\n- */\r\n-function updateMonthlySummary() {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPago = totalMes - totalPago;\r\n-    \r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => new Date(parcel.dueDate + 'T00:00:00') < today && !parcel.paid);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    summaryOverdue.textContent = formatCurrency(totalOverdue);\r\n-    summaryTotal.textContent = formatCurrency(totalMes);\r\n-    summaryPaid.textContent = formatCurrency(totalPago);\r\n-    summaryUnpaid.textContent = formatCurrency(totalNaoPago);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com os boletos do mês atual.\r\n- */\r\n-function renderCalendar() {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-        dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-        \r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card')) return;\r\n-            clearBillForm();\r\n-            document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n-            addBillModal.classList.remove('hidden');\r\n-        });\r\n-\r\n-        userBoletos.forEach(bill => {\r\n-            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                const parcelElement = document.createElement('div');\r\n-                parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n-                parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        });\r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-function openBillModal(bill, parcel) {\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-    \r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    billForm.reset();\r\n-    installmentsPreview.classList.add('hidden');\r\n-    installmentsList.innerHTML = '';\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Funções para mostrar os diferentes ecrãs da aplicação.\r\n- */\r\n-function showInitialLogin() {\r\n-    hideAllScreens();\r\n-    initialLoginScreen.classList.remove('hidden');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    currentLoggedInCompany = null;\r\n-    currentLoggedInUser = null;\r\n-    isAdminLoggedIn = false;\r\n-    loggedInViaAdmin = false;\r\n-}\r\n-\r\n-function showCnpjLogin() {\r\n-    hideAllScreens();\r\n-    cnpjLoginForm.reset();\r\n-    cnpjLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showAdminLogin() {\r\n-    hideAllScreens();\r\n-    adminLoginForm.reset();\r\n-    adminLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showUserLogin(companyName) {\r\n-    hideAllScreens();\r\n-    userLoginForm.reset();\r\n-    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-    userLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    mainAppContent.classList.remove('hidden');\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-    await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- */\r\n-function openCompanyDetailsModal(company, users) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (users && users.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        users.forEach(user => {\r\n-            // Cria as opções do dropdown, marcando a atual como selecionada\r\n-            const roleOptions = roles.map(role => \r\n-                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-            ).join('');\r\n-\r\n-            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona o evento para os botões \"Remover\"\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-    \r\n-    // =======================================================================\r\n-    // A CORREÇÃO ESTÁ AQUI\r\n-    // Primeiro, tenta obter a empresa selecionada pelo admin. Se não existir,\r\n-    // usa a empresa do utilizador que está atualmente logado (o Proprietário).\r\n-    // =======================================================================\r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    if (password !== confirmPassword) {\r\n-        return showToast(\"As senhas não coincidem.\", \"error\");\r\n-    }\r\n-    // A verificação agora funciona para os dois casos\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.registerUser(username, password, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n-        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-        \r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-        \r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-        \r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-        \r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-\r\n-async function handleCnpjLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.loginCompany(cnpjInput.value, cnpjPasswordInput.value);\r\n-        localStorage.setItem('authToken', data.token);\r\n-        currentLoggedInCompany = data.company;\r\n-        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAdminLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n-        localStorage.setItem('authToken', data.token);\r\n-        isAdminLoggedIn = true;\r\n-        showToast('Login de Administrador bem-sucedido!', 'success');\r\n-        await showAdminDashboard();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList();\r\n-}\r\n-\r\n-async function handleUserLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        // 1. Faz o login do utilizador para obter um token válido.\r\n-        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n-        localStorage.setItem('authToken', loginData.token);\r\n-        \r\n-        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n-        const sessionData = await api.checkSession();\r\n-        currentLoggedInUser = sessionData.user;\r\n-        currentLoggedInCompany = sessionData.company;\r\n-\r\n-        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            // Se estiver tudo OK, entra na aplicação.\r\n-            await showMainApp();\r\n-        } else {\r\n-            // Caso contrário, direciona para o ecrã correto.\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a API para obter os detalhes\r\n-                const { company, users } = await api.getCompanyDetails(companyId);\r\n-                // Chama a nossa nova função para abrir e preencher o modal\r\n-                openCompanyDetailsModal(company, users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                const { users } = await api.getCompanyDetails(companyId);\r\n-                if (users.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n                 }\r\n-                const userIdToImpersonate = users[0]._id;\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-function handleCalculateInstallments(e) {\r\n-    e.preventDefault();\r\n-    const billName = document.getElementById('billName').value;\r\n-    const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n-    const installments = parseInt(document.getElementById('installments').value);\r\n-    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-    \r\n-    if (!billName || !dueDate || !totalAmount || !installments) {\r\n-        showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-        return;\r\n-    }\r\n-    \r\n-    currentBill = { name: billName, parcels: [] };\r\n-    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-    installmentsList.innerHTML = '';\r\n-\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput });\r\n-        \r\n-        installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bill-card bg-gray-700 p-3 flex justify-between items-center\">\r\n-                <span>Parcela ${i + 1}</span>\r\n-                <span>${parcelAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</span>\r\n-                <span>Venc: ${parcelDate.toLocaleDateString('pt-BR')}</span>\r\n-            </div>\r\n-        `);\r\n-    }\r\n-    installmentsPreview.classList.remove('hidden');\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${totalAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill);\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        addBillModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-    const updateData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updateData);\r\n-        showToast('Parcela atualizada com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- */\r\n-async function initializeApp() {\r\n-    // Define a data atual para o calendário\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-\r\n-    // Verifica se existe um token\r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        showInitialLogin();\r\n-        // Se não há token, também escondemos o ecrã de carregamento principal.\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    } try {\r\n-        const data = await api.checkSession();\r\n-\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-    \r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-        \r\n-        // Assegura que o elemento alvo existe antes de o manipular\r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n-\r\n-        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n-        \r\n-        let otherUsersExist = false;\r\n-        if (users && users.length > 0) {\r\n-            users.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-                \r\n-                // Adiciona o HTML para cada utilizador\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <div>\r\n-                            <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                            <p class=\"text-xs text-gray-400\">${user.role}</p>\r\n-                        </div>\r\n-                        ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                    </div>\r\n-                `);\r\n-\r\n-                if (!isOwner) {\r\n-                    otherUsersExist = true;\r\n-                }\r\n-            });\r\n-        }\r\n-        \r\n-        // Se após o loop, só existir o proprietário, mostra a mensagem.\r\n-        if (!otherUsersExist) {\r\n-             companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center py-4\">Nenhum outro utilizador para gerir.</p>';\r\n-        }\r\n-\r\n-        // Adiciona o evento de clique aos novos botões de remover\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                if (!confirm('Tem a certeza que deseja remover este utilizador?')) return;\r\n-                \r\n                 showLoader();\r\n                 try {\r\n-                    await api.deleteUserFromCompany(currentLoggedInCompany._id, userId);\r\n-                    showToast('Utilizador removido com sucesso!');\r\n-                    await openManageUsersModal(); // Recarrega a lista no modal\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n                 } catch (error) {\r\n                     showToast(error.message, 'error');\r\n                 } finally {\r\n                     hideLoader();\r\n"
                },
                {
                    "date": 1752680321919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -722,12 +722,12 @@\n async function handleCnpjLogin(e) {\r\n     e.preventDefault();\r\n     showLoader();\r\n     try {\r\n-        const data = await api.loginCompany(cnpjInput.value, cnpjPasswordInput.value);\r\n-        localStorage.setItem('authToken', data.token);\r\n-        currentLoggedInCompany = data.company;\r\n+        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n+        currentLoggedInCompany = data.company; \r\n         showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n@@ -1099,8 +1099,9 @@\n             button.addEventListener('click', async (e) => {\r\n                 // ... (a lógica de remover continua a mesma de antes)\r\n             });\r\n         });\r\n+\r\n         document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n             select.addEventListener('change', async (e) => {\r\n                 const userId = e.target.dataset.userId;\r\n                 const newRole = e.target.value;\r\n"
                },
                {
                    "date": 1752682375577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1265,7 +1265,38 @@\n         manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n         openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n     });\r\n \r\n+    /**\r\n+     * Lida com o clique no botão de criar/renovar assinatura.\r\n+     */\r\n+    async function handleCreateSubscription() {\r\n+        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+        subscriptionActionBtn.disabled = true;\r\n+        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+        try {\r\n+            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+            const data = await api.createSubscriptionLink();\r\n+            \r\n+            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+            if (data.init_point) {\r\n+                window.location.href = data.init_point;\r\n+            } else {\r\n+                throw new Error('Link de pagamento não recebido.');\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+            subscriptionActionBtn.disabled = false;\r\n+            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+        }\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão.\r\n+    if (subscriptionActionBtn) {\r\n+        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+    }\r\n+\r\n     // Inicia a aplicação\r\n     initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752694934538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1313 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let inactivityTimer;\r\n+\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+const cnpjInput = document.getElementById('cnpjInput');\r\n+const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+const userLoginScreen = document.getElementById('userLoginScreen');\r\n+const userLoginForm = document.getElementById('userLoginForm');\r\n+const welcomeUserText = document.getElementById('welcomeUserText');\r\n+const userInput = document.getElementById('userInput');\r\n+const userPasswordInput = document.getElementById('userPasswordInput');\r\n+const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo financeiro do mês (vencido, total, pago, não pago).\r\n+ */\r\n+function updateMonthlySummary() {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPago = totalMes - totalPago;\r\n+    \r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => new Date(parcel.dueDate + 'T00:00:00') < today && !parcel.paid);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    summaryOverdue.textContent = formatCurrency(totalOverdue);\r\n+    summaryTotal.textContent = formatCurrency(totalMes);\r\n+    summaryPaid.textContent = formatCurrency(totalPago);\r\n+    summaryUnpaid.textContent = formatCurrency(totalNaoPago);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com os boletos do mês atual.\r\n+ */\r\n+function renderCalendar() {\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+        dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+        \r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card')) return;\r\n+            clearBillForm();\r\n+            document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n+            addBillModal.classList.remove('hidden');\r\n+        });\r\n+\r\n+        userBoletos.forEach(bill => {\r\n+            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                const parcelElement = document.createElement('div');\r\n+                parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+                parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        });\r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+function openBillModal(bill, parcel) {\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+    \r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    billForm.reset();\r\n+    installmentsPreview.classList.add('hidden');\r\n+    installmentsList.innerHTML = '';\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        totalBillsSpan.textContent = totalParcels;\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Funções para mostrar os diferentes ecrãs da aplicação.\r\n+ */\r\n+function showInitialLogin() {\r\n+    hideAllScreens();\r\n+    initialLoginScreen.classList.remove('hidden');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    currentLoggedInCompany = null;\r\n+    currentLoggedInUser = null;\r\n+    isAdminLoggedIn = false;\r\n+    loggedInViaAdmin = false;\r\n+}\r\n+\r\n+function showCnpjLogin() {\r\n+    hideAllScreens();\r\n+    cnpjLoginForm.reset();\r\n+    cnpjLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showAdminLogin() {\r\n+    hideAllScreens();\r\n+    adminLoginForm.reset();\r\n+    adminLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showUserLogin(companyName) {\r\n+    hideAllScreens();\r\n+    userLoginForm.reset();\r\n+    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+    userLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    mainAppContent.classList.remove('hidden');\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+    await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ */\r\n+function openCompanyDetailsModal(company, users) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (users && users.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        users.forEach(user => {\r\n+            // Cria as opções do dropdown, marcando a atual como selecionada\r\n+            const roleOptions = roles.map(role => \r\n+                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+            ).join('');\r\n+\r\n+            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona o evento para os botões \"Remover\"\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+    \r\n+    // =======================================================================\r\n+    // A CORREÇÃO ESTÁ AQUI\r\n+    // Primeiro, tenta obter a empresa selecionada pelo admin. Se não existir,\r\n+    // usa a empresa do utilizador que está atualmente logado (o Proprietário).\r\n+    // =======================================================================\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    if (password !== confirmPassword) {\r\n+        return showToast(\"As senhas não coincidem.\", \"error\");\r\n+    }\r\n+    // A verificação agora funciona para os dois casos\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.registerUser(username, password, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n+        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+        \r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+        \r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+        \r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+        \r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+\r\n+async function handleCnpjLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n+        currentLoggedInCompany = data.company; \r\n+        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAdminLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n+        localStorage.setItem('authToken', data.token);\r\n+        isAdminLoggedIn = true;\r\n+        showToast('Login de Administrador bem-sucedido!', 'success');\r\n+        await showAdminDashboard();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList();\r\n+}\r\n+\r\n+async function handleUserLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        // 1. Faz o login do utilizador para obter um token válido.\r\n+        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n+        localStorage.setItem('authToken', loginData.token);\r\n+        \r\n+        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n+        const sessionData = await api.checkSession();\r\n+        currentLoggedInUser = sessionData.user;\r\n+        currentLoggedInCompany = sessionData.company;\r\n+\r\n+        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            // Se estiver tudo OK, entra na aplicação.\r\n+            await showMainApp();\r\n+        } else {\r\n+            // Caso contrário, direciona para o ecrã correto.\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a API para obter os detalhes\r\n+                const { company, users } = await api.getCompanyDetails(companyId);\r\n+                // Chama a nossa nova função para abrir e preencher o modal\r\n+                openCompanyDetailsModal(company, users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { users } = await api.getCompanyDetails(companyId);\r\n+                if (users.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                }\r\n+                const userIdToImpersonate = users[0]._id;\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+function handleCalculateInstallments(e) {\r\n+    e.preventDefault();\r\n+    const billName = document.getElementById('billName').value;\r\n+    const dueDate = document.getElementById('dueDate').value;\r\n+    const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n+    const installments = parseInt(document.getElementById('installments').value);\r\n+    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+    \r\n+    if (!billName || !dueDate || !totalAmount || !installments) {\r\n+        showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+        return;\r\n+    }\r\n+    \r\n+    currentBill = { name: billName, parcels: [] };\r\n+    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+    installmentsList.innerHTML = '';\r\n+\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput });\r\n+        \r\n+        installmentsList.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"bill-card bg-gray-700 p-3 flex justify-between items-center\">\r\n+                <span>Parcela ${i + 1}</span>\r\n+                <span>${parcelAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</span>\r\n+                <span>Venc: ${parcelDate.toLocaleDateString('pt-BR')}</span>\r\n+            </div>\r\n+        `);\r\n+    }\r\n+\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${totalAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+    addBillModal.classList.add('hidden');\r\n+    installmentsPreviewModal.classList.remove('hidden');\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill);\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+        clearBillForm();\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+    const updateData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updateData);\r\n+        showToast('Parcela atualizada com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ */\r\n+async function initializeApp() {\r\n+    // Define a data atual para o calendário\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+\r\n+    // Verifica se existe um token\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        showInitialLogin();\r\n+        // Se não há token, também escondemos o ecrã de carregamento principal.\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    } try {\r\n+        const data = await api.checkSession();\r\n+\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+    \r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+        \r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n+        \r\n+        // Define os cargos que o Proprietário pode atribuir.\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+        if (users && users.length > 0) {\r\n+            users.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+                \r\n+                // Cria as opções do dropdown para Gerente e Funcionário\r\n+                const roleOptions = assignableRoles.map(role => \r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n+                const roleHtml = isOwner \r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+        \r\n+        // Adiciona o evento de clique aos botões de remover\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                // ... (a lógica de remover continua a mesma de antes)\r\n+            });\r\n+        });\r\n+\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n+\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n+                    e.target.value = originalRole; // Reverte a seleção visual\r\n+                    return;\r\n+\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+    // Navegação entre ecrãs de login\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+\r\n+    // Submissão de formulários\r\n+    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n+    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+\r\n+\r\n+    // Ações na App Principal\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+    openAddBillModalBtn.addEventListener('click', () => addBillModal.classList.remove('hidden'));\r\n+    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+    // Ações do Modal de Edição de Boleto\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+    // Navegação do Calendário\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+        if (currentMonth === 11) currentYear--;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+        if (currentMonth === 0) currentYear++;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    const handleRedirectToHome = () => {\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    const handleFullLogoutAndRedirect = () => {\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    if (subscriptionLogoutBtn) {\r\n+        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+    }\r\n+\r\n+    if (blockedAccessLogoutBtn) {\r\n+        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+    }\r\n+\r\n+    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+    if (settingsBtn) {\r\n+        settingsBtn.addEventListener('click', (e) => {\r\n+            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+            settingsDropdown.classList.toggle('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    // Links dentro do menu dropdown\r\n+    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCompanyInfoModal();\r\n+    });\r\n+\r\n+    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openPermissionsModal();\r\n+    });\r\n+\r\n+    window.addEventListener('click', () => {\r\n+        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n+    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openManageUsersModal();\r\n+    });\r\n+\r\n+    // Botões do modal de gerir utilizadores\r\n+    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+    });\r\n+\r\n+    /**\r\n+     * Lida com o clique no botão de criar/renovar assinatura.\r\n+     */\r\n+    async function handleCreateSubscription() {\r\n+        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+        subscriptionActionBtn.disabled = true;\r\n+        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+        try {\r\n+            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+            const data = await api.createSubscriptionLink();\r\n+            \r\n+            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+            if (data.init_point) {\r\n+                window.location.href = data.init_point;\r\n+            } else {\r\n+                throw new Error('Link de pagamento não recebido.');\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+            subscriptionActionBtn.disabled = false;\r\n+            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+        }\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão.\r\n+    if (subscriptionActionBtn) {\r\n+        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+    }\r\n+\r\n+    if (closePreviewModalBtn) {\r\n+        closePreviewModalBtn.addEventListener('click', () => {\r\n+            installmentsPreviewModal.classList.add('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    // Inicia a aplicação\r\n+    initializeApp();\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752695110055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,12 +243,9 @@\n /**\r\n  * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n  */\r\n function clearBillForm() {\r\n-    billForm.reset();\r\n-    installmentsPreview.classList.add('hidden');\r\n-    installmentsList.innerHTML = '';\r\n-    currentBill = {};\r\n+    if (billForm) billForm.reset();\r\n }\r\n \r\n /**\r\n  * Atualiza a interface principal com os dados dos boletos.\r\n@@ -1309,1307 +1306,5 @@\n     }\r\n \r\n     // Inicia a aplicação\r\n     initializeApp();\r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let inactivityTimer;\r\n-\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-const cnpjInput = document.getElementById('cnpjInput');\r\n-const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-const userLoginScreen = document.getElementById('userLoginScreen');\r\n-const userLoginForm = document.getElementById('userLoginForm');\r\n-const welcomeUserText = document.getElementById('welcomeUserText');\r\n-const userInput = document.getElementById('userInput');\r\n-const userPasswordInput = document.getElementById('userPasswordInput');\r\n-const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo financeiro do mês (vencido, total, pago, não pago).\r\n- */\r\n-function updateMonthlySummary() {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPago = totalMes - totalPago;\r\n-    \r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => new Date(parcel.dueDate + 'T00:00:00') < today && !parcel.paid);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    summaryOverdue.textContent = formatCurrency(totalOverdue);\r\n-    summaryTotal.textContent = formatCurrency(totalMes);\r\n-    summaryPaid.textContent = formatCurrency(totalPago);\r\n-    summaryUnpaid.textContent = formatCurrency(totalNaoPago);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com os boletos do mês atual.\r\n- */\r\n-function renderCalendar() {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-        dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-        \r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card')) return;\r\n-            clearBillForm();\r\n-            document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n-            addBillModal.classList.remove('hidden');\r\n-        });\r\n-\r\n-        userBoletos.forEach(bill => {\r\n-            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                const parcelElement = document.createElement('div');\r\n-                parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n-                parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        });\r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-function openBillModal(bill, parcel) {\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-    \r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    billForm.reset();\r\n-    installmentsPreview.classList.add('hidden');\r\n-    installmentsList.innerHTML = '';\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Funções para mostrar os diferentes ecrãs da aplicação.\r\n- */\r\n-function showInitialLogin() {\r\n-    hideAllScreens();\r\n-    initialLoginScreen.classList.remove('hidden');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    currentLoggedInCompany = null;\r\n-    currentLoggedInUser = null;\r\n-    isAdminLoggedIn = false;\r\n-    loggedInViaAdmin = false;\r\n-}\r\n-\r\n-function showCnpjLogin() {\r\n-    hideAllScreens();\r\n-    cnpjLoginForm.reset();\r\n-    cnpjLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showAdminLogin() {\r\n-    hideAllScreens();\r\n-    adminLoginForm.reset();\r\n-    adminLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showUserLogin(companyName) {\r\n-    hideAllScreens();\r\n-    userLoginForm.reset();\r\n-    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-    userLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    mainAppContent.classList.remove('hidden');\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-    await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- */\r\n-function openCompanyDetailsModal(company, users) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (users && users.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        users.forEach(user => {\r\n-            // Cria as opções do dropdown, marcando a atual como selecionada\r\n-            const roleOptions = roles.map(role => \r\n-                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-            ).join('');\r\n-\r\n-            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona o evento para os botões \"Remover\"\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-    \r\n-    // =======================================================================\r\n-    // A CORREÇÃO ESTÁ AQUI\r\n-    // Primeiro, tenta obter a empresa selecionada pelo admin. Se não existir,\r\n-    // usa a empresa do utilizador que está atualmente logado (o Proprietário).\r\n-    // =======================================================================\r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    if (password !== confirmPassword) {\r\n-        return showToast(\"As senhas não coincidem.\", \"error\");\r\n-    }\r\n-    // A verificação agora funciona para os dois casos\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.registerUser(username, password, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n-        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-        \r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-        \r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-        \r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-        \r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-\r\n-async function handleCnpjLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n-        currentLoggedInCompany = data.company; \r\n-        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAdminLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n-        localStorage.setItem('authToken', data.token);\r\n-        isAdminLoggedIn = true;\r\n-        showToast('Login de Administrador bem-sucedido!', 'success');\r\n-        await showAdminDashboard();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList();\r\n-}\r\n-\r\n-async function handleUserLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        // 1. Faz o login do utilizador para obter um token válido.\r\n-        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n-        localStorage.setItem('authToken', loginData.token);\r\n-        \r\n-        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n-        const sessionData = await api.checkSession();\r\n-        currentLoggedInUser = sessionData.user;\r\n-        currentLoggedInCompany = sessionData.company;\r\n-\r\n-        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            // Se estiver tudo OK, entra na aplicação.\r\n-            await showMainApp();\r\n-        } else {\r\n-            // Caso contrário, direciona para o ecrã correto.\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a API para obter os detalhes\r\n-                const { company, users } = await api.getCompanyDetails(companyId);\r\n-                // Chama a nossa nova função para abrir e preencher o modal\r\n-                openCompanyDetailsModal(company, users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                const { users } = await api.getCompanyDetails(companyId);\r\n-                if (users.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n-                }\r\n-                const userIdToImpersonate = users[0]._id;\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-function handleCalculateInstallments(e) {\r\n-    e.preventDefault();\r\n-    const billName = document.getElementById('billName').value;\r\n-    const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n-    const installments = parseInt(document.getElementById('installments').value);\r\n-    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-    \r\n-    if (!billName || !dueDate || !totalAmount || !installments) {\r\n-        showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-        return;\r\n-    }\r\n-    \r\n-    currentBill = { name: billName, parcels: [] };\r\n-    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-    installmentsList.innerHTML = '';\r\n-\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput });\r\n-        \r\n-        installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bill-card bg-gray-700 p-3 flex justify-between items-center\">\r\n-                <span>Parcela ${i + 1}</span>\r\n-                <span>${parcelAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</span>\r\n-                <span>Venc: ${parcelDate.toLocaleDateString('pt-BR')}</span>\r\n-            </div>\r\n-        `);\r\n-    }\r\n-    installmentsPreview.classList.remove('hidden');\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${totalAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill);\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        addBillModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-    const updateData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updateData);\r\n-        showToast('Parcela atualizada com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- */\r\n-async function initializeApp() {\r\n-    // Define a data atual para o calendário\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-\r\n-    // Verifica se existe um token\r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        showInitialLogin();\r\n-        // Se não há token, também escondemos o ecrã de carregamento principal.\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    } try {\r\n-        const data = await api.checkSession();\r\n-\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-    \r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-        \r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n-\r\n-        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n-        \r\n-        // Define os cargos que o Proprietário pode atribuir.\r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        if (users && users.length > 0) {\r\n-            users.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-                \r\n-                // Cria as opções do dropdown para Gerente e Funcionário\r\n-                const roleOptions = assignableRoles.map(role => \r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n-                const roleHtml = isOwner \r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-        \r\n-        // Adiciona o evento de clique aos botões de remover\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                // ... (a lógica de remover continua a mesma de antes)\r\n-            });\r\n-        });\r\n-\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n-\r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n-                    e.target.value = originalRole; // Reverte a seleção visual\r\n-                    return;\r\n-\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-    // Navegação entre ecrãs de login\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-\r\n-    // Submissão de formulários\r\n-    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n-    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-\r\n-\r\n-    // Ações na App Principal\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    openAddBillModalBtn.addEventListener('click', () => addBillModal.classList.remove('hidden'));\r\n-    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-    // Ações do Modal de Edição de Boleto\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-    // Navegação do Calendário\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-        if (currentMonth === 11) currentYear--;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-        if (currentMonth === 0) currentYear++;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    const handleRedirectToHome = () => {\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    const handleFullLogoutAndRedirect = () => {\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    if (subscriptionLogoutBtn) {\r\n-        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-    }\r\n-\r\n-    if (blockedAccessLogoutBtn) {\r\n-        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n-    }\r\n-\r\n-    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-    if (settingsBtn) {\r\n-        settingsBtn.addEventListener('click', (e) => {\r\n-            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-            settingsDropdown.classList.toggle('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    // Links dentro do menu dropdown\r\n-    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCompanyInfoModal();\r\n-    });\r\n-\r\n-    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openPermissionsModal();\r\n-    });\r\n-\r\n-    window.addEventListener('click', () => {\r\n-        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n-\r\n-    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openManageUsersModal();\r\n-    });\r\n-\r\n-    // Botões do modal de gerir utilizadores\r\n-    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-    });\r\n-\r\n-    /**\r\n-     * Lida com o clique no botão de criar/renovar assinatura.\r\n-     */\r\n-    async function handleCreateSubscription() {\r\n-        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-        subscriptionActionBtn.disabled = true;\r\n-        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-        try {\r\n-            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-            const data = await api.createSubscriptionLink();\r\n-            \r\n-            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-            if (data.init_point) {\r\n-                window.location.href = data.init_point;\r\n-            } else {\r\n-                throw new Error('Link de pagamento não recebido.');\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-            subscriptionActionBtn.disabled = false;\r\n-            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-        }\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão.\r\n-    if (subscriptionActionBtn) {\r\n-        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-    }\r\n-\r\n-    // Inicia a aplicação\r\n-    initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752695176336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,12 @@\n /**\r\n  * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n  */\r\n function clearBillForm() {\r\n-    if (billForm) billForm.reset();\r\n+    if (billForm) {\r\n+        billForm.reset();\r\n+    }\r\n+    currentBill = {};\r\n }\r\n \r\n /**\r\n  * Atualiza a interface principal com os dados dos boletos.\r\n"
                },
                {
                    "date": 1752695385182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -878,42 +878,76 @@\n function handleCalculateInstallments(e) {\r\n     e.preventDefault();\r\n     const billName = document.getElementById('billName').value;\r\n     const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n+    const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.')); // Limpa e converte o valor monetário\r\n     const installments = parseInt(document.getElementById('installments').value);\r\n     const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+    const description = document.getElementById('description').value;\r\n+    const barcode = document.getElementById('barcode').value;\r\n     \r\n-    if (!billName || !dueDate || !totalAmount || !installments) {\r\n+    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n         showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n         return;\r\n     }\r\n     \r\n-    currentBill = { name: billName, parcels: [] };\r\n+    currentBill = {\r\n+        name: billName,\r\n+        description: description,\r\n+        barcode: barcode,\r\n+        parcels: []\r\n+    };\r\n+\r\n     const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-    installmentsList.innerHTML = '';\r\n+    installmentsList.innerHTML = ''; \r\n \r\n     for (let i = 0; i < installments; i++) {\r\n         const parcelDate = new Date(dueDate + 'T00:00:00');\r\n         parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n         const dateForInput = parcelDate.toISOString().split('T')[0];\r\n \r\n         currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput });\r\n-        \r\n+\r\n         installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bill-card bg-gray-700 p-3 flex justify-between items-center\">\r\n-                <span>Parcela ${i + 1}</span>\r\n-                <span>${parcelAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</span>\r\n-                <span>Venc: ${parcelDate.toLocaleDateString('pt-BR')}</span>\r\n+            <div class=\"bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center gap-4\">\r\n+                <span class=\"font-medium text-gray-200 w-24\">Parcela ${i + 1}</span>\r\n+                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n+                <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-40 text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n             </div>\r\n         `);\r\n     }\r\n \r\n-    parcelPreviewTotalSpan.textContent = `Total: ${totalAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+    // Adiciona os eventos para os novos inputs\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            const newAmount = parseFloat(e.target.value) || 0;\r\n+            currentBill.parcels[index].amount = newAmount;\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n+\r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            currentBill.parcels[index].dueDate = e.target.value;\r\n+        });\r\n+    });\r\n+\r\n+    updatePreviewTotal();\r\n     addBillModal.classList.add('hidden');\r\n     installmentsPreviewModal.classList.remove('hidden');\r\n }\r\n \r\n+/**\r\n+ * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n+ */\r\n+function updatePreviewTotal() {\r\n+    if (!currentBill.parcels) return;\r\n+    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n async function handleAddToOrganizer() {\r\n     showLoader();\r\n     try {\r\n         await api.createBoleto(currentBill);\r\n"
                },
                {
                    "date": 1752695822684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -878,26 +878,21 @@\n function handleCalculateInstallments(e) {\r\n     e.preventDefault();\r\n     const billName = document.getElementById('billName').value;\r\n     const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.')); // Limpa e converte o valor monetário\r\n+    // Garante que o valor monetário seja lido corretamente, mesmo com R$ e vírgulas\r\n+    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n+    const totalAmount = parseFloat(totalAmountValue);\r\n     const installments = parseInt(document.getElementById('installments').value);\r\n     const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n     const description = document.getElementById('description').value;\r\n     const barcode = document.getElementById('barcode').value;\r\n     \r\n     if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n-        showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-        return;\r\n+        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n     }\r\n     \r\n-    currentBill = {\r\n-        name: billName,\r\n-        description: description,\r\n-        barcode: barcode,\r\n-        parcels: []\r\n-    };\r\n-\r\n+    currentBill = { name: billName, description, barcode, parcels: [] };\r\n     const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n     installmentsList.innerHTML = ''; \r\n \r\n     for (let i = 0; i < installments; i++) {\r\n@@ -905,14 +900,21 @@\n         parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n         const dateForInput = parcelDate.toISOString().split('T')[0];\r\n \r\n         currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput });\r\n-\r\n+        \r\n+        // A MUDANÇA ESTÁ AQUI: Geramos o HTML usando a estrutura de grelha (grid)\r\n         installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bill-card bg-gray-700 rounded-md p-3 border border-gray-600 flex justify-between items-center gap-4\">\r\n-                <span class=\"font-medium text-gray-200 w-24\">Parcela ${i + 1}</span>\r\n-                <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n-                <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-40 text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n+            <div class=\"grid grid-cols-6 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                <div class=\"col-span-2\">\r\n+                    <span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span>\r\n+                </div>\r\n+                <div class=\"col-span-2\">\r\n+                    <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n+                </div>\r\n+                <div class=\"col-span-2\">\r\n+                    <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n+                </div>\r\n             </div>\r\n         `);\r\n     }\r\n \r\n"
                },
                {
                    "date": 1752698272047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,8 +138,10 @@\n const companyUsersList = document.getElementById('companyUsersList');\r\n const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeKeyInput = document.getElementById('nfeKeyInput');\r\n+const fetchNfeBtn = document.getElementById('fetchNfeBtn');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -1174,8 +1176,35 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Busca os dados de uma NFe e preenche o formulário de boletos.\r\n+ */\r\n+async function handleFetchNfe() {\r\n+    const chave = nfeKeyInput.value;\r\n+    if (!chave || chave.length !== 44) {\r\n+        return showToast('Por favor, insira uma chave de NFe válida com 44 dígitos.', 'error');\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        // Usa a nossa nova função da API\r\n+        const dadosBoleto = await api.findNfe(chave);\r\n+\r\n+        // Preenche os campos do formulário com os dados recebidos\r\n+        document.getElementById('billName').value = dadosBoleto.nome;\r\n+        document.getElementById('totalAmount').value = dadosBoleto.valorTotal.toFixed(2).replace('.', ','); // Formata para o padrão brasileiro\r\n+        document.getElementById('dueDate').value = dadosBoleto.vencimento;\r\n+\r\n+        showToast('Dados da NFe carregados com sucesso!', 'success');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n@@ -1343,7 +1372,11 @@\n             installmentsPreviewModal.classList.add('hidden');\r\n         });\r\n     }\r\n \r\n+    if (fetchNfeBtn) {\r\n+        fetchNfeBtn.addEventListener('click', handleFetchNfe);\r\n+    }\r\n+\r\n     // Inicia a aplicação\r\n     initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752771065721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,10 +138,9 @@\n const companyUsersList = document.getElementById('companyUsersList');\r\n const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeKeyInput = document.getElementById('nfeKeyInput');\r\n-const fetchNfeBtn = document.getElementById('fetchNfeBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -1177,34 +1176,56 @@\n     }\r\n }\r\n \r\n /**\r\n- * Busca os dados de uma NFe e preenche o formulário de boletos.\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário.\r\n+ * @param {Event} event - O evento 'change' do input do ficheiro.\r\n  */\r\n-async function handleFetchNfe() {\r\n-    const chave = nfeKeyInput.value;\r\n-    if (!chave || chave.length !== 44) {\r\n-        return showToast('Por favor, insira uma chave de NFe válida com 44 dígitos.', 'error');\r\n+function handleNfeXmlUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) {\r\n+        return;\r\n     }\r\n \r\n-    showLoader();\r\n-    try {\r\n-        // Usa a nossa nova função da API\r\n-        const dadosBoleto = await api.findNfe(chave);\r\n+    const reader = new FileReader();\r\n \r\n-        // Preenche os campos do formulário com os dados recebidos\r\n-        document.getElementById('billName').value = dadosBoleto.nome;\r\n-        document.getElementById('totalAmount').value = dadosBoleto.valorTotal.toFixed(2).replace('.', ','); // Formata para o padrão brasileiro\r\n-        document.getElementById('dueDate').value = dadosBoleto.vencimento;\r\n+    reader.onload = (e) => {\r\n+        try {\r\n+            const xmlString = e.target.result;\r\n+            const parser = new DOMParser();\r\n+            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n \r\n-        showToast('Dados da NFe carregados com sucesso!', 'success');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n+            // Função auxiliar para obter o texto de uma tag\r\n+            const getTagValue = (tagName) => xmlDoc.getElementsByTagName(tagName)[0]?.textContent || '';\r\n+\r\n+            // Extrai os dados das tags do XML\r\n+            const nomeFornecedor = getTagValue(\"xNome\");\r\n+            const valorNFe = getTagValue(\"vNF\");\r\n+            const vencimento = getTagValue(\"dVenc\");\r\n+\r\n+            // Preenche os campos do formulário\r\n+            document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n+            document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2).replace('.', ',');\r\n+            if (vencimento) {\r\n+                document.getElementById('dueDate').value = vencimento;\r\n+            }\r\n+\r\n+            showToast('Dados do XML carregados com sucesso!', 'success');\r\n+\r\n+        } catch (error) {\r\n+            showToast('Erro ao ler o ficheiro XML. Verifique se o ficheiro é uma NFe válida.', 'error');\r\n+            console.error(\"Erro ao processar XML:\", error);\r\n+        }\r\n+    };\r\n+\r\n+    reader.onerror = () => {\r\n+         showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+    };\r\n+\r\n+    reader.readAsText(file);\r\n }\r\n \r\n+\r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n@@ -1372,10 +1393,10 @@\n             installmentsPreviewModal.classList.add('hidden');\r\n         });\r\n     }\r\n \r\n-    if (fetchNfeBtn) {\r\n-        fetchNfeBtn.addEventListener('click', handleFetchNfe);\r\n+    if (nfeXmlInput) {\r\n+        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n     }\r\n \r\n     // Inicia a aplicação\r\n     initializeApp();\r\n"
                },
                {
                    "date": 1752771479557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1176,16 +1176,15 @@\n     }\r\n }\r\n \r\n /**\r\n- * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário.\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n+ * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n  * @param {Event} event - O evento 'change' do input do ficheiro.\r\n  */\r\n function handleNfeXmlUpload(event) {\r\n     const file = event.target.files[0];\r\n-    if (!file) {\r\n-        return;\r\n-    }\r\n+    if (!file) return;\r\n \r\n     const reader = new FileReader();\r\n \r\n     reader.onload = (e) => {\r\n@@ -1193,28 +1192,66 @@\n             const xmlString = e.target.result;\r\n             const parser = new DOMParser();\r\n             const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n \r\n-            // Função auxiliar para obter o texto de uma tag\r\n-            const getTagValue = (tagName) => xmlDoc.getElementsByTagName(tagName)[0]?.textContent || '';\r\n+            const getTagValue = (tagName, parent = xmlDoc) => parent.getElementsByTagName(tagName)[0]?.textContent || '';\r\n \r\n-            // Extrai os dados das tags do XML\r\n-            const nomeFornecedor = getTagValue(\"xNome\");\r\n-            const valorNFe = getTagValue(\"vNF\");\r\n-            const vencimento = getTagValue(\"dVenc\");\r\n+            const nomeFornecedor = getTagValue(\"xNome\", xmlDoc.getElementsByTagName(\"emit\")[0]);\r\n \r\n-            // Preenche os campos do formulário\r\n-            document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n-            document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2).replace('.', ',');\r\n-            if (vencimento) {\r\n-                document.getElementById('dueDate').value = vencimento;\r\n+            // Procura pelas duplicatas (parcelas)\r\n+            const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n+\r\n+            if (duplicatas.length > 0) {\r\n+                // --- CENÁRIO 1: A NFe TEM PARCELAS DEFINIDAS ---\r\n+                \r\n+                currentBill = { name: `NFe - ${nomeFornecedor}`, parcels: [] };\r\n+                \r\n+                for (let i = 0; i < duplicatas.length; i++) {\r\n+                    const dup = duplicatas[i];\r\n+                    currentBill.parcels.push({\r\n+                        number: parseInt(getTagValue(\"nDup\", dup)),\r\n+                        amount: parseFloat(getTagValue(\"vDup\", dup)),\r\n+                        dueDate: getTagValue(\"dVenc\", dup)\r\n+                    });\r\n+                }\r\n+                \r\n+                // Limpa e preenche a lista do modal de pré-visualização\r\n+                installmentsList.innerHTML = '';\r\n+                currentBill.parcels.forEach((parcel, index) => {\r\n+                    installmentsList.insertAdjacentHTML('beforeend', `\r\n+                        <div class=\"grid grid-cols-6 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-2\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                        </div>\r\n+                    `);\r\n+                });\r\n+\r\n+                updatePreviewTotal(); // Atualiza o valor total\r\n+                installmentsPreviewModal.classList.remove('hidden'); // Mostra o modal de pré-visualização\r\n+                \r\n+            } else {\r\n+                // --- CENÁRIO 2: A NFe NÃO TEM PARCELAS (pagamento à vista) ---\r\n+                const valorNFe = getTagValue(\"vNF\");\r\n+                const vencimento = getTagValue(\"dhEmi\").split('T')[0]; // Usa a data de emissão como fallback\r\n+\r\n+                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2).replace('.', ',');\r\n+                if (vencimento) {\r\n+                    document.getElementById('dueDate').value = vencimento;\r\n+                }\r\n+                \r\n+                addBillModal.classList.remove('hidden'); // Abre o modal de criação normal\r\n             }\r\n \r\n             showToast('Dados do XML carregados com sucesso!', 'success');\r\n-\r\n+            \r\n         } catch (error) {\r\n             showToast('Erro ao ler o ficheiro XML. Verifique se o ficheiro é uma NFe válida.', 'error');\r\n             console.error(\"Erro ao processar XML:\", error);\r\n+        } finally {\r\n+            // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n+            event.target.value = '';\r\n         }\r\n     };\r\n \r\n     reader.onerror = () => {\r\n"
                },
                {
                    "date": 1752772392582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -879,64 +879,44 @@\n function handleCalculateInstallments(e) {\r\n     e.preventDefault();\r\n     const billName = document.getElementById('billName').value;\r\n     const dueDate = document.getElementById('dueDate').value;\r\n-    // Garante que o valor monetário seja lido corretamente, mesmo com R$ e vírgulas\r\n     const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n     const totalAmount = parseFloat(totalAmountValue);\r\n     const installments = parseInt(document.getElementById('installments').value);\r\n     const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n     const description = document.getElementById('description').value;\r\n-    const barcode = document.getElementById('barcode').value;\r\n+    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n     \r\n     if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n         return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n     }\r\n     \r\n-    currentBill = { name: billName, description, barcode, parcels: [] };\r\n+    currentBill = { name: billName, description, parcels: [] }; // O barcode principal não é mais necessário aqui\r\n     const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n     installmentsList.innerHTML = ''; \r\n \r\n     for (let i = 0; i < installments; i++) {\r\n         const parcelDate = new Date(dueDate + 'T00:00:00');\r\n         parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n         const dateForInput = parcelDate.toISOString().split('T')[0];\r\n \r\n-        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput });\r\n+        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n+        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n         \r\n-        // A MUDANÇA ESTÁ AQUI: Geramos o HTML usando a estrutura de grelha (grid)\r\n+        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n         installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"grid grid-cols-6 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                <div class=\"col-span-2\">\r\n-                    <span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span>\r\n-                </div>\r\n-                <div class=\"col-span-2\">\r\n-                    <input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\">\r\n-                </div>\r\n-                <div class=\"col-span-2\">\r\n-                    <input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\">\r\n-                </div>\r\n+            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n+                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n             </div>\r\n         `);\r\n     }\r\n \r\n     // Adiciona os eventos para os novos inputs\r\n-    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            const newAmount = parseFloat(e.target.value) || 0;\r\n-            currentBill.parcels[index].amount = newAmount;\r\n-            updatePreviewTotal();\r\n-        });\r\n-    });\r\n-\r\n-    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-        input.addEventListener('change', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            currentBill.parcels[index].dueDate = e.target.value;\r\n-        });\r\n-    });\r\n-\r\n+    addEventListenersToInstallmentInputs();\r\n     updatePreviewTotal();\r\n     addBillModal.classList.add('hidden');\r\n     installmentsPreviewModal.classList.remove('hidden');\r\n }\r\n"
                },
                {
                    "date": 1752772572369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1165,48 +1165,42 @@\n     const file = event.target.files[0];\r\n     if (!file) return;\r\n \r\n     const reader = new FileReader();\r\n-\r\n     reader.onload = (e) => {\r\n         try {\r\n             const xmlString = e.target.result;\r\n             const parser = new DOMParser();\r\n             const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-\r\n             const getTagValue = (tagName, parent = xmlDoc) => parent.getElementsByTagName(tagName)[0]?.textContent || '';\r\n-\r\n             const nomeFornecedor = getTagValue(\"xNome\", xmlDoc.getElementsByTagName(\"emit\")[0]);\r\n-\r\n-            // Procura pelas duplicatas (parcelas)\r\n             const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n \r\n             if (duplicatas.length > 0) {\r\n-                // --- CENÁRIO 1: A NFe TEM PARCELAS DEFINIDAS ---\r\n-                \r\n                 currentBill = { name: `NFe - ${nomeFornecedor}`, parcels: [] };\r\n-                \r\n                 for (let i = 0; i < duplicatas.length; i++) {\r\n                     const dup = duplicatas[i];\r\n                     currentBill.parcels.push({\r\n                         number: parseInt(getTagValue(\"nDup\", dup)),\r\n                         amount: parseFloat(getTagValue(\"vDup\", dup)),\r\n-                        dueDate: getTagValue(\"dVenc\", dup)\r\n+                        dueDate: getTagValue(\"dVenc\", dup),\r\n+                        barcode: '' // Campo de barcode começa vazio\r\n                     });\r\n                 }\r\n                 \r\n-                // Limpa e preenche a lista do modal de pré-visualização\r\n                 installmentsList.innerHTML = '';\r\n                 currentBill.parcels.forEach((parcel, index) => {\r\n                     installmentsList.insertAdjacentHTML('beforeend', `\r\n-                        <div class=\"grid grid-cols-6 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                            <div class=\"col-span-2\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n                             <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n                             <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n                         </div>\r\n                     `);\r\n                 });\r\n \r\n+                addEventListenersToInstallmentInputs();\r\n                 updatePreviewTotal(); // Atualiza o valor total\r\n                 installmentsPreviewModal.classList.remove('hidden'); // Mostra o modal de pré-visualização\r\n                 \r\n             } else {\r\n@@ -1240,9 +1234,34 @@\n \r\n     reader.readAsText(file);\r\n }\r\n \r\n+function addEventListenersToInstallmentInputs() {\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n \r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            currentBill.parcels[index].dueDate = e.target.value;\r\n+        });\r\n+    });\r\n+\r\n+    // Event listener para o novo campo de código de barras\r\n+    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            currentBill.parcels[index].barcode = e.target.value;\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+\r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1752772811558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1234,30 +1234,65 @@\n \r\n     reader.readAsText(file);\r\n }\r\n \r\n+/**\r\n+ * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n+ */\r\n function addEventListenersToInstallmentInputs() {\r\n+    // Listener para o campo de VALOR\r\n     document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n         input.addEventListener('input', (e) => {\r\n             const index = parseInt(e.target.dataset.parcelIndex);\r\n-            currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            }\r\n             updatePreviewTotal();\r\n         });\r\n     });\r\n \r\n+    // Listener para o campo de DATA\r\n     document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n         input.addEventListener('change', (e) => {\r\n             const index = parseInt(e.target.dataset.parcelIndex);\r\n-            currentBill.parcels[index].dueDate = e.target.value;\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            }\r\n         });\r\n     });\r\n \r\n-    // Event listener para o novo campo de código de barras\r\n+    // Listener para o campo de CÓDIGO DE BARRAS\r\n     document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        // Evento para guardar o valor quando é digitado\r\n         input.addEventListener('input', (e) => {\r\n             const index = parseInt(e.target.dataset.parcelIndex);\r\n-            currentBill.parcels[index].barcode = e.target.value;\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].barcode = e.target.value;\r\n+            }\r\n         });\r\n+\r\n+        // =======================================================================\r\n+        // A NOVA LÓGICA ESTÁ AQUI\r\n+        // Evento para saltar para o próximo campo quando 'Enter' for pressionado\r\n+        // =======================================================================\r\n+        input.addEventListener('keydown', (e) => {\r\n+            if (e.key === 'Enter') {\r\n+                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n+\r\n+                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n+                const nextIndex = currentIndex + 1;\r\n+                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n+\r\n+                if (nextInput) {\r\n+                    // Se houver um próximo campo de código de barras, foca nele.\r\n+                    nextInput.focus();\r\n+                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n+                } else {\r\n+                    // Se for o último campo, foca no botão de salvar.\r\n+                    document.getElementById('addToOrganizer').focus();\r\n+                }\r\n+            }\r\n+        });\r\n     });\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1752772823308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1269,12 +1269,8 @@\n                 currentBill.parcels[index].barcode = e.target.value;\r\n             }\r\n         });\r\n \r\n-        // =======================================================================\r\n-        // A NOVA LÓGICA ESTÁ AQUI\r\n-        // Evento para saltar para o próximo campo quando 'Enter' for pressionado\r\n-        // =======================================================================\r\n         input.addEventListener('keydown', (e) => {\r\n             if (e.key === 'Enter') {\r\n                 e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n \r\n"
                },
                {
                    "date": 1752773374019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,8 +139,9 @@\n const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -916,8 +917,9 @@\n \r\n     // Adiciona os eventos para os novos inputs\r\n     addEventListenersToInstallmentInputs();\r\n     updatePreviewTotal();\r\n+    previewBillNameInput.value = currentBill.name;\r\n     addBillModal.classList.add('hidden');\r\n     installmentsPreviewModal.classList.remove('hidden');\r\n }\r\n \r\n@@ -1200,8 +1202,9 @@\n                 });\r\n \r\n                 addEventListenersToInstallmentInputs();\r\n                 updatePreviewTotal(); // Atualiza o valor total\r\n+                previewBillNameInput.value = currentBill.name;\r\n                 installmentsPreviewModal.classList.remove('hidden'); // Mostra o modal de pré-visualização\r\n                 \r\n             } else {\r\n                 // --- CENÁRIO 2: A NFe NÃO TEM PARCELAS (pagamento à vista) ---\r\n@@ -1464,7 +1467,15 @@\n     if (nfeXmlInput) {\r\n         nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n     }\r\n \r\n+    if (previewBillNameInput) {\r\n+        previewBillNameInput.addEventListener('input', (e) => {\r\n+            if (currentBill) {\r\n+                currentBill.name = e.target.value;\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n     // Inicia a aplicação\r\n     initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752773696342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,8 +140,9 @@\n const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -918,8 +919,9 @@\n     // Adiciona os eventos para os novos inputs\r\n     addEventListenersToInstallmentInputs();\r\n     updatePreviewTotal();\r\n     previewBillNameInput.value = currentBill.name;\r\n+    previewNfeNumber.textContent = 'N/A';\r\n     addBillModal.classList.add('hidden');\r\n     installmentsPreviewModal.classList.remove('hidden');\r\n }\r\n \r\n@@ -1174,8 +1176,9 @@\n             const parser = new DOMParser();\r\n             const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n             const getTagValue = (tagName, parent = xmlDoc) => parent.getElementsByTagName(tagName)[0]?.textContent || '';\r\n             const nomeFornecedor = getTagValue(\"xNome\", xmlDoc.getElementsByTagName(\"emit\")[0]);\r\n+            const nfeNumber = getTagValue(\"nNF\");\r\n             const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n \r\n             if (duplicatas.length > 0) {\r\n                 currentBill = { name: `NFe - ${nomeFornecedor}`, parcels: [] };\r\n@@ -1203,8 +1206,9 @@\n \r\n                 addEventListenersToInstallmentInputs();\r\n                 updatePreviewTotal(); // Atualiza o valor total\r\n                 previewBillNameInput.value = currentBill.name;\r\n+                previewNfeNumber.textContent = nfeNumber;\r\n                 installmentsPreviewModal.classList.remove('hidden'); // Mostra o modal de pré-visualização\r\n                 \r\n             } else {\r\n                 // --- CENÁRIO 2: A NFe NÃO TEM PARCELAS (pagamento à vista) ---\r\n"
                },
                {
                    "date": 1752774124928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,10 @@\n const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const nomeFornecedor = getTagValue(\"xNome\", xmlDoc.getElementsByTagName(\"emit\")[0]);\r\n+const nfeNumber = getTagValue(\"nNF\");\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -1180,9 +1182,9 @@\n             const nfeNumber = getTagValue(\"nNF\");\r\n             const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n \r\n             if (duplicatas.length > 0) {\r\n-                currentBill = { name: `NFe - ${nomeFornecedor}`, parcels: [] };\r\n+                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: [] };\r\n                 for (let i = 0; i < duplicatas.length; i++) {\r\n                     const dup = duplicatas[i];\r\n                     currentBill.parcels.push({\r\n                         number: parseInt(getTagValue(\"nDup\", dup)),\r\n"
                },
                {
                    "date": 1752774447337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,10 +238,19 @@\n     modalBillDate.value = parcel.dueDate;\r\n     modalBillDescription.value = parcel.description || '';\r\n     modalBillBarcodeInput.value = parcel.barcode || '';\r\n     modalBillPaidCheckbox.checked = parcel.paid;\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+    \r\n+    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n+    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n+    if (bill.nfeNumber) {\r\n+        nfeNumberEl.textContent = bill.nfeNumber;\r\n+        nfeContainer.classList.remove('hidden');\r\n+    } else {\r\n+        nfeContainer.classList.add('hidden');\r\n+    }\r\n \r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n     billModal.classList.remove('hidden');\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1752775135322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,8 +328,21 @@\n \r\n // Adicionar ao bloco de funções de Lógica e UI\r\n \r\n /**\r\n+ * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n+ * @param {string} tagName - O nome da tag a ser procurada.\r\n+ * @param {Document|Element} parent - O elemento pai onde procurar. O padrão é o documento todo.\r\n+ * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n+ */\r\n+function getTagValue(tagName, parent) {\r\n+    // Se o 'parent' não for fornecido, usamos o 'xmlDoc' que estará no escopo da função que chama.\r\n+    // Esta é uma forma avançada, mas para simplificar, vamos passar o 'parent' sempre.\r\n+    const element = parent.getElementsByTagName(tagName)[0];\r\n+    return element?.textContent || '';\r\n+}\r\n+\r\n+/**\r\n  * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n  * @param {object} company - O objeto da empresa.\r\n  * @param {Array} users - A lista de usuários da empresa.\r\n  */\r\n"
                },
                {
                    "date": 1752775232180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1190,30 +1190,44 @@\n  * @param {Event} event - O evento 'change' do input do ficheiro.\r\n  */\r\n function handleNfeXmlUpload(event) {\r\n     const file = event.target.files[0];\r\n-    if (!file) return;\r\n+    if (!file) {\r\n+        return;\r\n+    }\r\n \r\n     const reader = new FileReader();\r\n+\r\n     reader.onload = (e) => {\r\n         try {\r\n             const xmlString = e.target.result;\r\n             const parser = new DOMParser();\r\n             const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-            const getTagValue = (tagName, parent = xmlDoc) => parent.getElementsByTagName(tagName)[0]?.textContent || '';\r\n-            const nomeFornecedor = getTagValue(\"xNome\", xmlDoc.getElementsByTagName(\"emit\")[0]);\r\n-            const nfeNumber = getTagValue(\"nNF\");\r\n+\r\n+            // Verifica se o XML é válido (procurando pela tag principal)\r\n+            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n+                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n+            }\r\n+\r\n+            // Agora a função getTagValue é chamada corretamente\r\n+            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", xmlDoc);\r\n+            \r\n             const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n \r\n             if (duplicatas.length > 0) {\r\n+                // --- CENÁRIO 1: A NFe TEM PARCELAS DEFINIDAS ---\r\n+                \r\n                 currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: [] };\r\n+                \r\n                 for (let i = 0; i < duplicatas.length; i++) {\r\n                     const dup = duplicatas[i];\r\n                     currentBill.parcels.push({\r\n                         number: parseInt(getTagValue(\"nDup\", dup)),\r\n                         amount: parseFloat(getTagValue(\"vDup\", dup)),\r\n                         dueDate: getTagValue(\"dVenc\", dup),\r\n-                        barcode: '' // Campo de barcode começa vazio\r\n+                        barcode: '' // Campo de barcode começa vazio para preenchimento manual\r\n                     });\r\n                 }\r\n                 \r\n                 installmentsList.innerHTML = '';\r\n@@ -1226,33 +1240,36 @@\n                             <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n                         </div>\r\n                     `);\r\n                 });\r\n-\r\n+                \r\n                 addEventListenersToInstallmentInputs();\r\n-                updatePreviewTotal(); // Atualiza o valor total\r\n+                updatePreviewTotal();\r\n                 previewBillNameInput.value = currentBill.name;\r\n                 previewNfeNumber.textContent = nfeNumber;\r\n-                installmentsPreviewModal.classList.remove('hidden'); // Mostra o modal de pré-visualização\r\n+                installmentsPreviewModal.classList.remove('hidden');\r\n                 \r\n             } else {\r\n                 // --- CENÁRIO 2: A NFe NÃO TEM PARCELAS (pagamento à vista) ---\r\n-                const valorNFe = getTagValue(\"vNF\");\r\n-                const vencimento = getTagValue(\"dhEmi\").split('T')[0]; // Usa a data de emissão como fallback\r\n+                const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+                const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n \r\n+                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n+                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n+\r\n                 document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n                 document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2).replace('.', ',');\r\n                 if (vencimento) {\r\n                     document.getElementById('dueDate').value = vencimento;\r\n                 }\r\n                 \r\n-                addBillModal.classList.remove('hidden'); // Abre o modal de criação normal\r\n+                addBillModal.classList.remove('hidden');\r\n             }\r\n \r\n             showToast('Dados do XML carregados com sucesso!', 'success');\r\n             \r\n         } catch (error) {\r\n-            showToast('Erro ao ler o ficheiro XML. Verifique se o ficheiro é uma NFe válida.', 'error');\r\n+            showToast(error.message, 'error');\r\n             console.error(\"Erro ao processar XML:\", error);\r\n         } finally {\r\n             // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n             event.target.value = '';\r\n"
                },
                {
                    "date": 1752775550711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,15 +330,14 @@\n \r\n /**\r\n  * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n  * @param {string} tagName - O nome da tag a ser procurada.\r\n- * @param {Document|Element} parent - O elemento pai onde procurar. O padrão é o documento todo.\r\n+ * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n  * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n  */\r\n-function getTagValue(tagName, parent) {\r\n-    // Se o 'parent' não for fornecido, usamos o 'xmlDoc' que estará no escopo da função que chama.\r\n-    // Esta é uma forma avançada, mas para simplificar, vamos passar o 'parent' sempre.\r\n-    const element = parent.getElementsByTagName(tagName)[0];\r\n+function getTagValue(tagName, parentElement) {\r\n+    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n+    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n     return element?.textContent || '';\r\n }\r\n \r\n /**\r\n@@ -1202,32 +1201,35 @@\n             const xmlString = e.target.result;\r\n             const parser = new DOMParser();\r\n             const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n \r\n-            // Verifica se o XML é válido (procurando pela tag principal)\r\n+            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n             if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n                 throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n             }\r\n \r\n-            // Agora a função getTagValue é chamada corretamente\r\n+            // Define os nós principais para evitar procuras repetidas\r\n             const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n-            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n-            const nfeNumber = getTagValue(\"nNF\", xmlDoc);\r\n-            \r\n+            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n             const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n \r\n+            // Extrai os dados principais usando a função de ajuda\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+\r\n             if (duplicatas.length > 0) {\r\n-                // --- CENÁRIO 1: A NFe TEM PARCELAS DEFINIDAS ---\r\n+                // --- CENÁRIO 1: NFe com parcelas definidas ---\r\n                 \r\n                 currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: [] };\r\n                 \r\n                 for (let i = 0; i < duplicatas.length; i++) {\r\n                     const dup = duplicatas[i];\r\n                     currentBill.parcels.push({\r\n-                        number: parseInt(getTagValue(\"nDup\", dup)),\r\n-                        amount: parseFloat(getTagValue(\"vDup\", dup)),\r\n+                        number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                        amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n                         dueDate: getTagValue(\"dVenc\", dup),\r\n-                        barcode: '' // Campo de barcode começa vazio para preenchimento manual\r\n+                        barcode: ''\r\n                     });\r\n                 }\r\n                 \r\n                 installmentsList.innerHTML = '';\r\n@@ -1248,12 +1250,9 @@\n                 previewNfeNumber.textContent = nfeNumber;\r\n                 installmentsPreviewModal.classList.remove('hidden');\r\n                 \r\n             } else {\r\n-                // --- CENÁRIO 2: A NFe NÃO TEM PARCELAS (pagamento à vista) ---\r\n-                const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n-                const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-\r\n+                // --- CENÁRIO 2: NFe sem parcelas (à vista) ---\r\n                 const valorNFe = getTagValue(\"vNF\", totalNode);\r\n                 const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n \r\n                 document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n@@ -1270,9 +1269,8 @@\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n             console.error(\"Erro ao processar XML:\", error);\r\n         } finally {\r\n-            // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n             event.target.value = '';\r\n         }\r\n     };\r\n \r\n"
                },
                {
                    "date": 1752775780062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,10 +141,8 @@\n const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const nomeFornecedor = getTagValue(\"xNome\", xmlDoc.getElementsByTagName(\"emit\")[0]);\r\n-const nfeNumber = getTagValue(\"nNF\");\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n"
                },
                {
                    "date": 1752776806711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,10 +212,15 @@\n \r\n         userBoletos.forEach(bill => {\r\n             bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n                 const parcelElement = document.createElement('div');\r\n-                parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n-                parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n+                parcelElement.className = `bill-card text-xs p-2 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n+                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"${bill.nfeNumber}\">COD: ${bill.nfeNumber.substring(22, 28)}</div>` : ''}\r\n+                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n+                `;\r\n+\r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n                 dayCell.appendChild(parcelElement);\r\n             });\r\n         });\r\n"
                },
                {
                    "date": 1752777494297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,9 @@\n                 const parcelElement = document.createElement('div');\r\n                 parcelElement.className = `bill-card text-xs p-2 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"${bill.nfeNumber}\">COD: ${bill.nfeNumber.substring(22, 28)}</div>` : ''}\r\n+                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n                     <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n                 `;\r\n \r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n@@ -1213,13 +1213,11 @@\n             // Define os nós principais para evitar procuras repetidas\r\n             const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n             const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n             const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-            const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n-\r\n-            // Extrai os dados principais usando a função de ajuda\r\n             const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n             const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+            const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n \r\n             if (duplicatas.length > 0) {\r\n                 // --- CENÁRIO 1: NFe com parcelas definidas ---\r\n                 \r\n"
                },
                {
                    "date": 1752777503790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,9 @@\n                 const parcelElement = document.createElement('div');\r\n                 parcelElement.className = `bill-card text-xs p-2 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">Cod: ${bill.nfeNumber}</div>` : ''}\r\n                     <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n                 `;\r\n \r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n"
                },
                {
                    "date": 1752777867614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1337,9 +1337,39 @@\n         });\r\n     });\r\n }\r\n \r\n+/**\r\n+ * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n+ */\r\n+function handleShowFullScreenBarcode() {\r\n+    const barcodeValue = modalBillBarcodeInput.value;\r\n+    if (!barcodeValue) {\r\n+        return showToast('Não há código de barras para mostrar.', 'info');\r\n+    }\r\n \r\n+    // Limpa qualquer código de barras anterior\r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    barcodeImageContainer.innerHTML = '';\r\n+\r\n+    try {\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras no elemento SVG\r\n+        JsBarcode(barcodeImageContainer, barcodeValue, {\r\n+            format: \"ITF\", // Um formato comum para boletos, mas pode ser ajustado\r\n+            lineColor: \"#000000\",\r\n+            width: 2,\r\n+            height: 100,\r\n+            displayValue: true // Mostra os números abaixo das barras\r\n+        });\r\n+        // Mostra o modal de ecrã inteiro\r\n+        barcodeFullScreenModal.classList.remove('hidden');\r\n+    } catch (e) {\r\n+        console.error(\"Erro ao gerar código de barras:\", e);\r\n+        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n+    }\r\n+}\r\n+\r\n+\r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n@@ -1519,7 +1549,13 @@\n             }\r\n         });\r\n     }\r\n \r\n+    // Liga a função ao clique do botão\r\n+    if (showFullScreenBarcodeBtn) {\r\n+        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+    }\r\n+\r\n+\r\n     // Inicia a aplicação\r\n     initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752777971340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1346,23 +1346,31 @@\n     if (!barcodeValue) {\r\n         return showToast('Não há código de barras para mostrar.', 'info');\r\n     }\r\n \r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    if (!barcodeImageContainer) return;\r\n+\r\n     // Limpa qualquer código de barras anterior\r\n-    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n     barcodeImageContainer.innerHTML = '';\r\n \r\n     try {\r\n-        // Usa a biblioteca JsBarcode para desenhar o código de barras no elemento SVG\r\n-        JsBarcode(barcodeImageContainer, barcodeValue, {\r\n-            format: \"ITF\", // Um formato comum para boletos, mas pode ser ajustado\r\n+        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n+        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n+\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n+        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n+            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n             lineColor: \"#000000\",\r\n             width: 2,\r\n             height: 100,\r\n-            displayValue: true // Mostra os números abaixo das barras\r\n+            displayValue: true, // Mostra os números abaixo das barras\r\n+            fontSize: 18\r\n         });\r\n+\r\n         // Mostra o modal de ecrã inteiro\r\n         barcodeFullScreenModal.classList.remove('hidden');\r\n+\r\n     } catch (e) {\r\n         console.error(\"Erro ao gerar código de barras:\", e);\r\n         showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n     }\r\n"
                },
                {
                    "date": 1752793818527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1605 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let inactivityTimer;\r\n+\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+const cnpjInput = document.getElementById('cnpjInput');\r\n+const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+const userLoginScreen = document.getElementById('userLoginScreen');\r\n+const userLoginForm = document.getElementById('userLoginForm');\r\n+const welcomeUserText = document.getElementById('welcomeUserText');\r\n+const userInput = document.getElementById('userInput');\r\n+const userPasswordInput = document.getElementById('userPasswordInput');\r\n+const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo financeiro do mês (vencido, total, pago, não pago).\r\n+ */\r\n+function updateMonthlySummary() {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPago = totalMes - totalPago;\r\n+    \r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => new Date(parcel.dueDate + 'T00:00:00') < today && !parcel.paid);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    summaryOverdue.textContent = formatCurrency(totalOverdue);\r\n+    summaryTotal.textContent = formatCurrency(totalMes);\r\n+    summaryPaid.textContent = formatCurrency(totalPago);\r\n+    summaryUnpaid.textContent = formatCurrency(totalNaoPago);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com os boletos do mês atual.\r\n+ */\r\n+function renderCalendar() {\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+        dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+        \r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card')) return;\r\n+            clearBillForm();\r\n+            document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n+            addBillModal.classList.remove('hidden');\r\n+        });\r\n+\r\n+        userBoletos.forEach(bill => {\r\n+            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                const parcelElement = document.createElement('div');\r\n+                parcelElement.className = `bill-card text-xs p-2 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n+                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">Cod: ${bill.nfeNumber}</div>` : ''}\r\n+                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n+                `;\r\n+\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        });\r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+function openBillModal(bill, parcel) {\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+    \r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+    \r\n+    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n+    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n+    if (bill.nfeNumber) {\r\n+        nfeNumberEl.textContent = bill.nfeNumber;\r\n+        nfeContainer.classList.remove('hidden');\r\n+    } else {\r\n+        nfeContainer.classList.add('hidden');\r\n+    }\r\n+\r\n+    const attachmentContainer = document.getElementById('attachment-container');\r\n+    attachmentContainer.innerHTML = '';\r\n+\r\n+    if (parcel.attachmentUrl) {\r\n+        attachmentContainer.innerHTML = `<a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+    } else {\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+    }\r\n+\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    if (billForm) {\r\n+        billForm.reset();\r\n+    }\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        totalBillsSpan.textContent = totalParcels;\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Funções para mostrar os diferentes ecrãs da aplicação.\r\n+ */\r\n+function showInitialLogin() {\r\n+    hideAllScreens();\r\n+    initialLoginScreen.classList.remove('hidden');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    currentLoggedInCompany = null;\r\n+    currentLoggedInUser = null;\r\n+    isAdminLoggedIn = false;\r\n+    loggedInViaAdmin = false;\r\n+}\r\n+\r\n+function showCnpjLogin() {\r\n+    hideAllScreens();\r\n+    cnpjLoginForm.reset();\r\n+    cnpjLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showAdminLogin() {\r\n+    hideAllScreens();\r\n+    adminLoginForm.reset();\r\n+    adminLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showUserLogin(companyName) {\r\n+    hideAllScreens();\r\n+    userLoginForm.reset();\r\n+    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+    userLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    mainAppContent.classList.remove('hidden');\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+    await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n+ * @param {string} tagName - O nome da tag a ser procurada.\r\n+ * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n+ * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n+ */\r\n+function getTagValue(tagName, parentElement) {\r\n+    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n+    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n+    return element?.textContent || '';\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ */\r\n+function openCompanyDetailsModal(company, users) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (users && users.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        users.forEach(user => {\r\n+            // Cria as opções do dropdown, marcando a atual como selecionada\r\n+            const roleOptions = roles.map(role => \r\n+                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+            ).join('');\r\n+\r\n+            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona o evento para os botões \"Remover\"\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+    \r\n+    // =======================================================================\r\n+    // A CORREÇÃO ESTÁ AQUI\r\n+    // Primeiro, tenta obter a empresa selecionada pelo admin. Se não existir,\r\n+    // usa a empresa do utilizador que está atualmente logado (o Proprietário).\r\n+    // =======================================================================\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    if (password !== confirmPassword) {\r\n+        return showToast(\"As senhas não coincidem.\", \"error\");\r\n+    }\r\n+    // A verificação agora funciona para os dois casos\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.registerUser(username, password, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n+        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+        \r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+        \r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+        \r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+        \r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+\r\n+async function handleCnpjLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n+        currentLoggedInCompany = data.company; \r\n+        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAdminLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n+        localStorage.setItem('authToken', data.token);\r\n+        isAdminLoggedIn = true;\r\n+        showToast('Login de Administrador bem-sucedido!', 'success');\r\n+        await showAdminDashboard();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList();\r\n+}\r\n+\r\n+async function handleUserLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        // 1. Faz o login do utilizador para obter um token válido.\r\n+        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n+        localStorage.setItem('authToken', loginData.token);\r\n+        \r\n+        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n+        const sessionData = await api.checkSession();\r\n+        currentLoggedInUser = sessionData.user;\r\n+        currentLoggedInCompany = sessionData.company;\r\n+\r\n+        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            // Se estiver tudo OK, entra na aplicação.\r\n+            await showMainApp();\r\n+        } else {\r\n+            // Caso contrário, direciona para o ecrã correto.\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a API para obter os detalhes\r\n+                const { company, users } = await api.getCompanyDetails(companyId);\r\n+                // Chama a nossa nova função para abrir e preencher o modal\r\n+                openCompanyDetailsModal(company, users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { users } = await api.getCompanyDetails(companyId);\r\n+                if (users.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                }\r\n+                const userIdToImpersonate = users[0]._id;\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+function handleCalculateInstallments(e) {\r\n+    e.preventDefault();\r\n+    const billName = document.getElementById('billName').value;\r\n+    const dueDate = document.getElementById('dueDate').value;\r\n+    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n+    const totalAmount = parseFloat(totalAmountValue);\r\n+    const installments = parseInt(document.getElementById('installments').value);\r\n+    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+    const description = document.getElementById('description').value;\r\n+    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n+    \r\n+    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n+        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+    }\r\n+    \r\n+    currentBill = { name: billName, description, parcels: [] }; // O barcode principal não é mais necessário aqui\r\n+    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+    installmentsList.innerHTML = ''; \r\n+\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n+        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n+        \r\n+        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n+        installmentsList.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n+                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n+            </div>\r\n+        `);\r\n+    }\r\n+\r\n+    // Adiciona os eventos para os novos inputs\r\n+    addEventListenersToInstallmentInputs();\r\n+    updatePreviewTotal();\r\n+    previewBillNameInput.value = currentBill.name;\r\n+    previewNfeNumber.textContent = 'N/A';\r\n+    addBillModal.classList.add('hidden');\r\n+    installmentsPreviewModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n+ */\r\n+function updatePreviewTotal() {\r\n+    if (!currentBill.parcels) return;\r\n+    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill);\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+        clearBillForm();\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+    const updateData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updateData);\r\n+        showToast('Parcela atualizada com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ */\r\n+async function initializeApp() {\r\n+    // Define a data atual para o calendário\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+\r\n+    // Verifica se existe um token\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        showInitialLogin();\r\n+        // Se não há token, também escondemos o ecrã de carregamento principal.\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    } try {\r\n+        const data = await api.checkSession();\r\n+\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+    \r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+        \r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n+        \r\n+        // Define os cargos que o Proprietário pode atribuir.\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+        if (users && users.length > 0) {\r\n+            users.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+                \r\n+                // Cria as opções do dropdown para Gerente e Funcionário\r\n+                const roleOptions = assignableRoles.map(role => \r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n+                const roleHtml = isOwner \r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+        \r\n+        // Adiciona o evento de clique aos botões de remover\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                // ... (a lógica de remover continua a mesma de antes)\r\n+            });\r\n+        });\r\n+\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n+\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n+                    e.target.value = originalRole; // Reverte a seleção visual\r\n+                    return;\r\n+\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n+ * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n+ * @param {Event} event - O evento 'change' do input do ficheiro.\r\n+ */\r\n+function handleNfeXmlUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) {\r\n+        return;\r\n+    }\r\n+\r\n+    const reader = new FileReader();\r\n+\r\n+    reader.onload = (e) => {\r\n+        try {\r\n+            const xmlString = e.target.result;\r\n+            const parser = new DOMParser();\r\n+            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n+\r\n+            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n+            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n+                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n+            }\r\n+\r\n+            // Define os nós principais para evitar procuras repetidas\r\n+            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n+            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+            const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n+\r\n+            if (duplicatas.length > 0) {\r\n+                // --- CENÁRIO 1: NFe com parcelas definidas ---\r\n+                \r\n+                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: [] };\r\n+                \r\n+                for (let i = 0; i < duplicatas.length; i++) {\r\n+                    const dup = duplicatas[i];\r\n+                    currentBill.parcels.push({\r\n+                        number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                        amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n+                        dueDate: getTagValue(\"dVenc\", dup),\r\n+                        barcode: ''\r\n+                    });\r\n+                }\r\n+                \r\n+                installmentsList.innerHTML = '';\r\n+                currentBill.parcels.forEach((parcel, index) => {\r\n+                    installmentsList.insertAdjacentHTML('beforeend', `\r\n+                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                        </div>\r\n+                    `);\r\n+                });\r\n+                \r\n+                addEventListenersToInstallmentInputs();\r\n+                updatePreviewTotal();\r\n+                previewBillNameInput.value = currentBill.name;\r\n+                previewNfeNumber.textContent = nfeNumber;\r\n+                installmentsPreviewModal.classList.remove('hidden');\r\n+                \r\n+            } else {\r\n+                // --- CENÁRIO 2: NFe sem parcelas (à vista) ---\r\n+                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n+                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n+\r\n+                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2).replace('.', ',');\r\n+                if (vencimento) {\r\n+                    document.getElementById('dueDate').value = vencimento;\r\n+                }\r\n+                \r\n+                addBillModal.classList.remove('hidden');\r\n+            }\r\n+\r\n+            showToast('Dados do XML carregados com sucesso!', 'success');\r\n+            \r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            console.error(\"Erro ao processar XML:\", error);\r\n+        } finally {\r\n+            event.target.value = '';\r\n+        }\r\n+    };\r\n+\r\n+    reader.onerror = () => {\r\n+         showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+    };\r\n+\r\n+    reader.readAsText(file);\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n+ */\r\n+function addEventListenersToInstallmentInputs() {\r\n+    // Listener para o campo de VALOR\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            }\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de DATA\r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de CÓDIGO DE BARRAS\r\n+    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        // Evento para guardar o valor quando é digitado\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].barcode = e.target.value;\r\n+            }\r\n+        });\r\n+\r\n+        input.addEventListener('keydown', (e) => {\r\n+            if (e.key === 'Enter') {\r\n+                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n+\r\n+                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n+                const nextIndex = currentIndex + 1;\r\n+                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n+\r\n+                if (nextInput) {\r\n+                    // Se houver um próximo campo de código de barras, foca nele.\r\n+                    nextInput.focus();\r\n+                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n+                } else {\r\n+                    // Se for o último campo, foca no botão de salvar.\r\n+                    document.getElementById('addToOrganizer').focus();\r\n+                }\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n+ */\r\n+function handleShowFullScreenBarcode() {\r\n+    const barcodeValue = modalBillBarcodeInput.value;\r\n+    if (!barcodeValue) {\r\n+        return showToast('Não há código de barras para mostrar.', 'info');\r\n+    }\r\n+\r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    if (!barcodeImageContainer) return;\r\n+\r\n+    // Limpa qualquer código de barras anterior\r\n+    barcodeImageContainer.innerHTML = '';\r\n+\r\n+    try {\r\n+        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n+        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n+\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n+        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n+            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n+            lineColor: \"#000000\",\r\n+            width: 2,\r\n+            height: 100,\r\n+            displayValue: true, // Mostra os números abaixo das barras\r\n+            fontSize: 18\r\n+        });\r\n+\r\n+        // Mostra o modal de ecrã inteiro\r\n+        barcodeFullScreenModal.classList.remove('hidden');\r\n+\r\n+    } catch (e) {\r\n+        console.error(\"Erro ao gerar código de barras:\", e);\r\n+        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n+    }\r\n+}\r\n+\r\n+async function handleAttachmentUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file || !selectedParcel) return;\r\n+\r\n+    // Cria um objeto FormData para enviar o ficheiro\r\n+    const formData = new FormData();\r\n+    formData.append('comprovante', file);\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n+        showToast(data.message, 'success');\r\n+        \r\n+        // Atualiza a UI para mostrar o link do novo anexo\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+        \r\n+        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+    // Navegação entre ecrãs de login\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+\r\n+    // Submissão de formulários\r\n+    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n+    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+\r\n+\r\n+    // Ações na App Principal\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+    openAddBillModalBtn.addEventListener('click', () => addBillModal.classList.remove('hidden'));\r\n+    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+    // Ações do Modal de Edição de Boleto\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+    // Navegação do Calendário\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+        if (currentMonth === 11) currentYear--;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+        if (currentMonth === 0) currentYear++;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    const handleRedirectToHome = () => {\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    const handleFullLogoutAndRedirect = () => {\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    if (subscriptionLogoutBtn) {\r\n+        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+    }\r\n+\r\n+    if (blockedAccessLogoutBtn) {\r\n+        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+    }\r\n+\r\n+    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+    if (settingsBtn) {\r\n+        settingsBtn.addEventListener('click', (e) => {\r\n+            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+            settingsDropdown.classList.toggle('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    // Links dentro do menu dropdown\r\n+    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCompanyInfoModal();\r\n+    });\r\n+\r\n+    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openPermissionsModal();\r\n+    });\r\n+\r\n+    window.addEventListener('click', () => {\r\n+        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n+    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openManageUsersModal();\r\n+    });\r\n+\r\n+    // Botões do modal de gerir utilizadores\r\n+    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+    });\r\n+\r\n+    /**\r\n+     * Lida com o clique no botão de criar/renovar assinatura.\r\n+     */\r\n+    async function handleCreateSubscription() {\r\n+        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+        subscriptionActionBtn.disabled = true;\r\n+        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+        try {\r\n+            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+            const data = await api.createSubscriptionLink();\r\n+            \r\n+            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+            if (data.init_point) {\r\n+                window.location.href = data.init_point;\r\n+            } else {\r\n+                throw new Error('Link de pagamento não recebido.');\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+            subscriptionActionBtn.disabled = false;\r\n+            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+        }\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão.\r\n+    if (subscriptionActionBtn) {\r\n+        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+    }\r\n+\r\n+    if (closePreviewModalBtn) {\r\n+        closePreviewModalBtn.addEventListener('click', () => {\r\n+            installmentsPreviewModal.classList.add('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    if (nfeXmlInput) {\r\n+        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+    }\r\n+\r\n+    if (previewBillNameInput) {\r\n+        previewBillNameInput.addEventListener('input', (e) => {\r\n+            if (currentBill) {\r\n+                currentBill.name = e.target.value;\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão\r\n+    if (showFullScreenBarcodeBtn) {\r\n+        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+    }\r\n+\r\n+\r\n+    // Inicia a aplicação\r\n+    initializeApp();\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752800142061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,11 +256,20 @@\n     const attachmentContainer = document.getElementById('attachment-container');\r\n     attachmentContainer.innerHTML = '';\r\n \r\n     if (parcel.attachmentUrl) {\r\n-        attachmentContainer.innerHTML = `<a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+        // Se já existe um anexo, mostra o link E O NOVO BOTÃO DE REMOVER\r\n+        attachmentContainer.innerHTML = `\r\n+            <div class=\"flex items-center justify-between\">\r\n+                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>\r\n+                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n+            </div>\r\n+        `;\r\n+        // Adiciona o evento ao novo botão de remover\r\n+        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n     } else {\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        // Se não existe, mostra o botão de upload\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" ... />`;\r\n         document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n     }\r\n \r\n     billModal.classList.remove('hidden');\r\n@@ -1601,1574 +1610,5 @@\n \r\n \r\n     // Inicia a aplicação\r\n     initializeApp();\r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let inactivityTimer;\r\n-\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-const cnpjInput = document.getElementById('cnpjInput');\r\n-const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-const userLoginScreen = document.getElementById('userLoginScreen');\r\n-const userLoginForm = document.getElementById('userLoginForm');\r\n-const welcomeUserText = document.getElementById('welcomeUserText');\r\n-const userInput = document.getElementById('userInput');\r\n-const userPasswordInput = document.getElementById('userPasswordInput');\r\n-const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo financeiro do mês (vencido, total, pago, não pago).\r\n- */\r\n-function updateMonthlySummary() {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPago = totalMes - totalPago;\r\n-    \r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => new Date(parcel.dueDate + 'T00:00:00') < today && !parcel.paid);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    summaryOverdue.textContent = formatCurrency(totalOverdue);\r\n-    summaryTotal.textContent = formatCurrency(totalMes);\r\n-    summaryPaid.textContent = formatCurrency(totalPago);\r\n-    summaryUnpaid.textContent = formatCurrency(totalNaoPago);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com os boletos do mês atual.\r\n- */\r\n-function renderCalendar() {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-        dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-        \r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card')) return;\r\n-            clearBillForm();\r\n-            document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n-            addBillModal.classList.remove('hidden');\r\n-        });\r\n-\r\n-        userBoletos.forEach(bill => {\r\n-            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                const parcelElement = document.createElement('div');\r\n-                parcelElement.className = `bill-card text-xs p-2 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">Cod: ${bill.nfeNumber}</div>` : ''}\r\n-                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n-                `;\r\n-\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        });\r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-function openBillModal(bill, parcel) {\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-    \r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-    \r\n-    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n-    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n-    if (bill.nfeNumber) {\r\n-        nfeNumberEl.textContent = bill.nfeNumber;\r\n-        nfeContainer.classList.remove('hidden');\r\n-    } else {\r\n-        nfeContainer.classList.add('hidden');\r\n-    }\r\n-\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    if (billForm) {\r\n-        billForm.reset();\r\n-    }\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Funções para mostrar os diferentes ecrãs da aplicação.\r\n- */\r\n-function showInitialLogin() {\r\n-    hideAllScreens();\r\n-    initialLoginScreen.classList.remove('hidden');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    currentLoggedInCompany = null;\r\n-    currentLoggedInUser = null;\r\n-    isAdminLoggedIn = false;\r\n-    loggedInViaAdmin = false;\r\n-}\r\n-\r\n-function showCnpjLogin() {\r\n-    hideAllScreens();\r\n-    cnpjLoginForm.reset();\r\n-    cnpjLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showAdminLogin() {\r\n-    hideAllScreens();\r\n-    adminLoginForm.reset();\r\n-    adminLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showUserLogin(companyName) {\r\n-    hideAllScreens();\r\n-    userLoginForm.reset();\r\n-    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-    userLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    mainAppContent.classList.remove('hidden');\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-    await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n- * @param {string} tagName - O nome da tag a ser procurada.\r\n- * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n- * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n- */\r\n-function getTagValue(tagName, parentElement) {\r\n-    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n-    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n-    return element?.textContent || '';\r\n-}\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- */\r\n-function openCompanyDetailsModal(company, users) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (users && users.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        users.forEach(user => {\r\n-            // Cria as opções do dropdown, marcando a atual como selecionada\r\n-            const roleOptions = roles.map(role => \r\n-                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-            ).join('');\r\n-\r\n-            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona o evento para os botões \"Remover\"\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-    \r\n-    // =======================================================================\r\n-    // A CORREÇÃO ESTÁ AQUI\r\n-    // Primeiro, tenta obter a empresa selecionada pelo admin. Se não existir,\r\n-    // usa a empresa do utilizador que está atualmente logado (o Proprietário).\r\n-    // =======================================================================\r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    if (password !== confirmPassword) {\r\n-        return showToast(\"As senhas não coincidem.\", \"error\");\r\n-    }\r\n-    // A verificação agora funciona para os dois casos\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.registerUser(username, password, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n-        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-        \r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-        \r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-        \r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-        \r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-\r\n-async function handleCnpjLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n-        currentLoggedInCompany = data.company; \r\n-        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAdminLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n-        localStorage.setItem('authToken', data.token);\r\n-        isAdminLoggedIn = true;\r\n-        showToast('Login de Administrador bem-sucedido!', 'success');\r\n-        await showAdminDashboard();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList();\r\n-}\r\n-\r\n-async function handleUserLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        // 1. Faz o login do utilizador para obter um token válido.\r\n-        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n-        localStorage.setItem('authToken', loginData.token);\r\n-        \r\n-        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n-        const sessionData = await api.checkSession();\r\n-        currentLoggedInUser = sessionData.user;\r\n-        currentLoggedInCompany = sessionData.company;\r\n-\r\n-        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            // Se estiver tudo OK, entra na aplicação.\r\n-            await showMainApp();\r\n-        } else {\r\n-            // Caso contrário, direciona para o ecrã correto.\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a API para obter os detalhes\r\n-                const { company, users } = await api.getCompanyDetails(companyId);\r\n-                // Chama a nossa nova função para abrir e preencher o modal\r\n-                openCompanyDetailsModal(company, users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                const { users } = await api.getCompanyDetails(companyId);\r\n-                if (users.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n-                }\r\n-                const userIdToImpersonate = users[0]._id;\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-function handleCalculateInstallments(e) {\r\n-    e.preventDefault();\r\n-    const billName = document.getElementById('billName').value;\r\n-    const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n-    const totalAmount = parseFloat(totalAmountValue);\r\n-    const installments = parseInt(document.getElementById('installments').value);\r\n-    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-    const description = document.getElementById('description').value;\r\n-    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n-    \r\n-    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n-        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-    }\r\n-    \r\n-    currentBill = { name: billName, description, parcels: [] }; // O barcode principal não é mais necessário aqui\r\n-    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-    installmentsList.innerHTML = ''; \r\n-\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n-        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n-        \r\n-        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n-        installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n-                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n-            </div>\r\n-        `);\r\n-    }\r\n-\r\n-    // Adiciona os eventos para os novos inputs\r\n-    addEventListenersToInstallmentInputs();\r\n-    updatePreviewTotal();\r\n-    previewBillNameInput.value = currentBill.name;\r\n-    previewNfeNumber.textContent = 'N/A';\r\n-    addBillModal.classList.add('hidden');\r\n-    installmentsPreviewModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n- */\r\n-function updatePreviewTotal() {\r\n-    if (!currentBill.parcels) return;\r\n-    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill);\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-        clearBillForm();\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-    const updateData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updateData);\r\n-        showToast('Parcela atualizada com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- */\r\n-async function initializeApp() {\r\n-    // Define a data atual para o calendário\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-\r\n-    // Verifica se existe um token\r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        showInitialLogin();\r\n-        // Se não há token, também escondemos o ecrã de carregamento principal.\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    } try {\r\n-        const data = await api.checkSession();\r\n-\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-    \r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-        \r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n-\r\n-        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n-        \r\n-        // Define os cargos que o Proprietário pode atribuir.\r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        if (users && users.length > 0) {\r\n-            users.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-                \r\n-                // Cria as opções do dropdown para Gerente e Funcionário\r\n-                const roleOptions = assignableRoles.map(role => \r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n-                const roleHtml = isOwner \r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-        \r\n-        // Adiciona o evento de clique aos botões de remover\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                // ... (a lógica de remover continua a mesma de antes)\r\n-            });\r\n-        });\r\n-\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n-\r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n-                    e.target.value = originalRole; // Reverte a seleção visual\r\n-                    return;\r\n-\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n- * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n- * @param {Event} event - O evento 'change' do input do ficheiro.\r\n- */\r\n-function handleNfeXmlUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) {\r\n-        return;\r\n-    }\r\n-\r\n-    const reader = new FileReader();\r\n-\r\n-    reader.onload = (e) => {\r\n-        try {\r\n-            const xmlString = e.target.result;\r\n-            const parser = new DOMParser();\r\n-            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-\r\n-            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n-            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n-                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n-            }\r\n-\r\n-            // Define os nós principais para evitar procuras repetidas\r\n-            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n-            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n-            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n-            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n-            const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n-\r\n-            if (duplicatas.length > 0) {\r\n-                // --- CENÁRIO 1: NFe com parcelas definidas ---\r\n-                \r\n-                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: [] };\r\n-                \r\n-                for (let i = 0; i < duplicatas.length; i++) {\r\n-                    const dup = duplicatas[i];\r\n-                    currentBill.parcels.push({\r\n-                        number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n-                        amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n-                        dueDate: getTagValue(\"dVenc\", dup),\r\n-                        barcode: ''\r\n-                    });\r\n-                }\r\n-                \r\n-                installmentsList.innerHTML = '';\r\n-                currentBill.parcels.forEach((parcel, index) => {\r\n-                    installmentsList.insertAdjacentHTML('beforeend', `\r\n-                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                        </div>\r\n-                    `);\r\n-                });\r\n-                \r\n-                addEventListenersToInstallmentInputs();\r\n-                updatePreviewTotal();\r\n-                previewBillNameInput.value = currentBill.name;\r\n-                previewNfeNumber.textContent = nfeNumber;\r\n-                installmentsPreviewModal.classList.remove('hidden');\r\n-                \r\n-            } else {\r\n-                // --- CENÁRIO 2: NFe sem parcelas (à vista) ---\r\n-                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n-                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n-\r\n-                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n-                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2).replace('.', ',');\r\n-                if (vencimento) {\r\n-                    document.getElementById('dueDate').value = vencimento;\r\n-                }\r\n-                \r\n-                addBillModal.classList.remove('hidden');\r\n-            }\r\n-\r\n-            showToast('Dados do XML carregados com sucesso!', 'success');\r\n-            \r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            console.error(\"Erro ao processar XML:\", error);\r\n-        } finally {\r\n-            event.target.value = '';\r\n-        }\r\n-    };\r\n-\r\n-    reader.onerror = () => {\r\n-         showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n-    };\r\n-\r\n-    reader.readAsText(file);\r\n-}\r\n-\r\n-/**\r\n- * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n- */\r\n-function addEventListenersToInstallmentInputs() {\r\n-    // Listener para o campo de VALOR\r\n-    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n-            }\r\n-            updatePreviewTotal();\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de DATA\r\n-    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-        input.addEventListener('change', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de CÓDIGO DE BARRAS\r\n-    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n-        // Evento para guardar o valor quando é digitado\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].barcode = e.target.value;\r\n-            }\r\n-        });\r\n-\r\n-        input.addEventListener('keydown', (e) => {\r\n-            if (e.key === 'Enter') {\r\n-                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n-\r\n-                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n-                const nextIndex = currentIndex + 1;\r\n-                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n-\r\n-                if (nextInput) {\r\n-                    // Se houver um próximo campo de código de barras, foca nele.\r\n-                    nextInput.focus();\r\n-                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n-                } else {\r\n-                    // Se for o último campo, foca no botão de salvar.\r\n-                    document.getElementById('addToOrganizer').focus();\r\n-                }\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n- */\r\n-function handleShowFullScreenBarcode() {\r\n-    const barcodeValue = modalBillBarcodeInput.value;\r\n-    if (!barcodeValue) {\r\n-        return showToast('Não há código de barras para mostrar.', 'info');\r\n-    }\r\n-\r\n-    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n-    if (!barcodeImageContainer) return;\r\n-\r\n-    // Limpa qualquer código de barras anterior\r\n-    barcodeImageContainer.innerHTML = '';\r\n-\r\n-    try {\r\n-        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n-        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n-\r\n-        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n-        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n-            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n-            lineColor: \"#000000\",\r\n-            width: 2,\r\n-            height: 100,\r\n-            displayValue: true, // Mostra os números abaixo das barras\r\n-            fontSize: 18\r\n-        });\r\n-\r\n-        // Mostra o modal de ecrã inteiro\r\n-        barcodeFullScreenModal.classList.remove('hidden');\r\n-\r\n-    } catch (e) {\r\n-        console.error(\"Erro ao gerar código de barras:\", e);\r\n-        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n-    }\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-    // Navegação entre ecrãs de login\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-\r\n-    // Submissão de formulários\r\n-    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n-    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-\r\n-\r\n-    // Ações na App Principal\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    openAddBillModalBtn.addEventListener('click', () => addBillModal.classList.remove('hidden'));\r\n-    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-    // Ações do Modal de Edição de Boleto\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-    // Navegação do Calendário\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-        if (currentMonth === 11) currentYear--;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-        if (currentMonth === 0) currentYear++;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    const handleRedirectToHome = () => {\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    const handleFullLogoutAndRedirect = () => {\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    if (subscriptionLogoutBtn) {\r\n-        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-    }\r\n-\r\n-    if (blockedAccessLogoutBtn) {\r\n-        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n-    }\r\n-\r\n-    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-    if (settingsBtn) {\r\n-        settingsBtn.addEventListener('click', (e) => {\r\n-            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-            settingsDropdown.classList.toggle('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    // Links dentro do menu dropdown\r\n-    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCompanyInfoModal();\r\n-    });\r\n-\r\n-    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openPermissionsModal();\r\n-    });\r\n-\r\n-    window.addEventListener('click', () => {\r\n-        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n-\r\n-    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openManageUsersModal();\r\n-    });\r\n-\r\n-    // Botões do modal de gerir utilizadores\r\n-    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-    });\r\n-\r\n-    /**\r\n-     * Lida com o clique no botão de criar/renovar assinatura.\r\n-     */\r\n-    async function handleCreateSubscription() {\r\n-        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-        subscriptionActionBtn.disabled = true;\r\n-        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-        try {\r\n-            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-            const data = await api.createSubscriptionLink();\r\n-            \r\n-            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-            if (data.init_point) {\r\n-                window.location.href = data.init_point;\r\n-            } else {\r\n-                throw new Error('Link de pagamento não recebido.');\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-            subscriptionActionBtn.disabled = false;\r\n-            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-        }\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão.\r\n-    if (subscriptionActionBtn) {\r\n-        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-    }\r\n-\r\n-    if (closePreviewModalBtn) {\r\n-        closePreviewModalBtn.addEventListener('click', () => {\r\n-            installmentsPreviewModal.classList.add('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    if (nfeXmlInput) {\r\n-        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-    }\r\n-\r\n-    if (previewBillNameInput) {\r\n-        previewBillNameInput.addEventListener('input', (e) => {\r\n-            if (currentBill) {\r\n-                currentBill.name = e.target.value;\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão\r\n-    if (showFullScreenBarcodeBtn) {\r\n-        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-    }\r\n-\r\n-\r\n-    // Inicia a aplicação\r\n-    initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752800189652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1420,9 +1420,32 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+async function handleRemoveAttachment() {\r\n+    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n+        return;\r\n+    }\r\n \r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast(data.message, 'success');\r\n+        \r\n+        // Atualiza a UI para mostrar novamente o botão de upload\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" ... />`; // Recria o input de upload\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+\r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1752800799285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,22 +229,28 @@\n }\r\n \r\n /**\r\n  * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai.\r\n+ * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n  * @param {object} parcel - O objeto da parcela específica.\r\n  */\r\n function openBillModal(bill, parcel) {\r\n+    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n     selectedParcel = { ...parcel, parentId: bill._id };\r\n     \r\n+    // Preenche todos os campos do modal com os dados da parcela clicada\r\n     modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n     modalBillAmount.value = parcel.amount.toFixed(2);\r\n     modalBillDate.value = parcel.dueDate;\r\n     modalBillDescription.value = parcel.description || '';\r\n     modalBillBarcodeInput.value = parcel.barcode || '';\r\n     modalBillPaidCheckbox.checked = parcel.paid;\r\n+    \r\n+    // Mostra o botão de gerar código de barras apenas se houver um código\r\n     showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n     \r\n+    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n     const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n     const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n     if (bill.nfeNumber) {\r\n         nfeNumberEl.textContent = bill.nfeNumber;\r\n@@ -252,27 +258,32 @@\n     } else {\r\n         nfeContainer.classList.add('hidden');\r\n     }\r\n \r\n+    // Lógica dinâmica para a secção de anexos\r\n     const attachmentContainer = document.getElementById('attachment-container');\r\n-    attachmentContainer.innerHTML = '';\r\n+    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n \r\n     if (parcel.attachmentUrl) {\r\n-        // Se já existe um anexo, mostra o link E O NOVO BOTÃO DE REMOVER\r\n+        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n         attachmentContainer.innerHTML = `\r\n             <div class=\"flex items-center justify-between\">\r\n-                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>\r\n+                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n+                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n+                </a>\r\n                 <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n             </div>\r\n         `;\r\n-        // Adiciona o evento ao novo botão de remover\r\n+        // Adiciona o evento de clique ao novo botão de remover\r\n         document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n     } else {\r\n-        // Se não existe, mostra o botão de upload\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" ... />`;\r\n+        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        // Adiciona o evento de 'change' ao novo input de upload\r\n         document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n     }\r\n \r\n+    // No final de tudo, exibe o modal\r\n     billModal.classList.remove('hidden');\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1752800903425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1431,28 +1431,38 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Lida com o clique no botão para remover um anexo de comprovativo.\r\n+ * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n+ */\r\n async function handleRemoveAttachment() {\r\n+    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n     if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n         return;\r\n     }\r\n \r\n-    showLoader();\r\n+    showLoader(); // Mostra o ícone de carregamento\r\n     try {\r\n+        // Chama a nossa função da API para apagar o anexo\r\n         const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast(data.message, 'success');\r\n+        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n         \r\n-        // Atualiza a UI para mostrar novamente o botão de upload\r\n+        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n         const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" ... />`; // Recria o input de upload\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        \r\n+        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n         document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n \r\n+        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n         await updateBillsOrganizer();\r\n+\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n-        hideLoader();\r\n+        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n     }\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1752875242727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,10 @@\n const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n"
                },
                {
                    "date": 1752875328708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1716 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let inactivityTimer;\r\n+\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+const cnpjInput = document.getElementById('cnpjInput');\r\n+const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+const userLoginScreen = document.getElementById('userLoginScreen');\r\n+const userLoginForm = document.getElementById('userLoginForm');\r\n+const welcomeUserText = document.getElementById('welcomeUserText');\r\n+const userInput = document.getElementById('userInput');\r\n+const userPasswordInput = document.getElementById('userPasswordInput');\r\n+const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo financeiro do mês (vencido, total, pago, não pago).\r\n+ */\r\n+function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n+\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPago = totalMes - totalPago;\r\n+    \r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => new Date(parcel.dueDate + 'T00:00:00') < today && !parcel.paid);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    summaryOverdue.textContent = formatCurrency(totalOverdue);\r\n+    summaryTotal.textContent = formatCurrency(totalMes);\r\n+    summaryPaid.textContent = formatCurrency(totalPago);\r\n+    summaryUnpaid.textContent = formatCurrency(totalNaoPago);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com os boletos do mês atual.\r\n+ */\r\n+function renderCalendar(boletosToRender = userBoletos) {\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+        dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+        \r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card')) return;\r\n+            clearBillForm();\r\n+            document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n+            addBillModal.classList.remove('hidden');\r\n+        });\r\n+\r\n+        userBoletos.forEach(bill => {\r\n+            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                const parcelElement = document.createElement('div');\r\n+                parcelElement.className = `bill-card text-xs p-2 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n+                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">Cod: ${bill.nfeNumber}</div>` : ''}\r\n+                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n+                `;\r\n+\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        });\r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+function openBillModal(bill, parcel) {\r\n+    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+    \r\n+    // Preenche todos os campos do modal com os dados da parcela clicada\r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+    \r\n+    // Mostra o botão de gerar código de barras apenas se houver um código\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+    \r\n+    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n+    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n+    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n+    if (bill.nfeNumber) {\r\n+        nfeNumberEl.textContent = bill.nfeNumber;\r\n+        nfeContainer.classList.remove('hidden');\r\n+    } else {\r\n+        nfeContainer.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Lógica dinâmica para a secção de anexos\r\n+    const attachmentContainer = document.getElementById('attachment-container');\r\n+    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n+\r\n+    if (parcel.attachmentUrl) {\r\n+        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n+        attachmentContainer.innerHTML = `\r\n+            <div class=\"flex items-center justify-between\">\r\n+                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n+                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n+                </a>\r\n+                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n+            </div>\r\n+        `;\r\n+        // Adiciona o evento de clique ao novo botão de remover\r\n+        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n+    } else {\r\n+        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        // Adiciona o evento de 'change' ao novo input de upload\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+    }\r\n+\r\n+    // No final de tudo, exibe o modal\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    if (billForm) {\r\n+        billForm.reset();\r\n+    }\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        totalBillsSpan.textContent = totalParcels;\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Funções para mostrar os diferentes ecrãs da aplicação.\r\n+ */\r\n+function showInitialLogin() {\r\n+    hideAllScreens();\r\n+    initialLoginScreen.classList.remove('hidden');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    currentLoggedInCompany = null;\r\n+    currentLoggedInUser = null;\r\n+    isAdminLoggedIn = false;\r\n+    loggedInViaAdmin = false;\r\n+}\r\n+\r\n+function showCnpjLogin() {\r\n+    hideAllScreens();\r\n+    cnpjLoginForm.reset();\r\n+    cnpjLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showAdminLogin() {\r\n+    hideAllScreens();\r\n+    adminLoginForm.reset();\r\n+    adminLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showUserLogin(companyName) {\r\n+    hideAllScreens();\r\n+    userLoginForm.reset();\r\n+    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+    userLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    mainAppContent.classList.remove('hidden');\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+    await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n+ * @param {string} tagName - O nome da tag a ser procurada.\r\n+ * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n+ * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n+ */\r\n+function getTagValue(tagName, parentElement) {\r\n+    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n+    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n+    return element?.textContent || '';\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ */\r\n+function openCompanyDetailsModal(company, users) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (users && users.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        users.forEach(user => {\r\n+            // Cria as opções do dropdown, marcando a atual como selecionada\r\n+            const roleOptions = roles.map(role => \r\n+                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+            ).join('');\r\n+\r\n+            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona o evento para os botões \"Remover\"\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+    \r\n+    // =======================================================================\r\n+    // A CORREÇÃO ESTÁ AQUI\r\n+    // Primeiro, tenta obter a empresa selecionada pelo admin. Se não existir,\r\n+    // usa a empresa do utilizador que está atualmente logado (o Proprietário).\r\n+    // =======================================================================\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    if (password !== confirmPassword) {\r\n+        return showToast(\"As senhas não coincidem.\", \"error\");\r\n+    }\r\n+    // A verificação agora funciona para os dois casos\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.registerUser(username, password, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n+        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+        \r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+        \r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+        \r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+        \r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+\r\n+async function handleCnpjLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n+        currentLoggedInCompany = data.company; \r\n+        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAdminLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n+        localStorage.setItem('authToken', data.token);\r\n+        isAdminLoggedIn = true;\r\n+        showToast('Login de Administrador bem-sucedido!', 'success');\r\n+        await showAdminDashboard();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList();\r\n+}\r\n+\r\n+async function handleUserLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        // 1. Faz o login do utilizador para obter um token válido.\r\n+        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n+        localStorage.setItem('authToken', loginData.token);\r\n+        \r\n+        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n+        const sessionData = await api.checkSession();\r\n+        currentLoggedInUser = sessionData.user;\r\n+        currentLoggedInCompany = sessionData.company;\r\n+\r\n+        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            // Se estiver tudo OK, entra na aplicação.\r\n+            await showMainApp();\r\n+        } else {\r\n+            // Caso contrário, direciona para o ecrã correto.\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a API para obter os detalhes\r\n+                const { company, users } = await api.getCompanyDetails(companyId);\r\n+                // Chama a nossa nova função para abrir e preencher o modal\r\n+                openCompanyDetailsModal(company, users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { users } = await api.getCompanyDetails(companyId);\r\n+                if (users.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                }\r\n+                const userIdToImpersonate = users[0]._id;\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+function handleCalculateInstallments(e) {\r\n+    e.preventDefault();\r\n+    const billName = document.getElementById('billName').value;\r\n+    const dueDate = document.getElementById('dueDate').value;\r\n+    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n+    const totalAmount = parseFloat(totalAmountValue);\r\n+    const installments = parseInt(document.getElementById('installments').value);\r\n+    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+    const description = document.getElementById('description').value;\r\n+    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n+    \r\n+    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n+        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+    }\r\n+    \r\n+    currentBill = { name: billName, description, parcels: [] }; // O barcode principal não é mais necessário aqui\r\n+    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+    installmentsList.innerHTML = ''; \r\n+\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n+        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n+        \r\n+        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n+        installmentsList.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n+                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n+            </div>\r\n+        `);\r\n+    }\r\n+\r\n+    // Adiciona os eventos para os novos inputs\r\n+    addEventListenersToInstallmentInputs();\r\n+    updatePreviewTotal();\r\n+    previewBillNameInput.value = currentBill.name;\r\n+    previewNfeNumber.textContent = 'N/A';\r\n+    addBillModal.classList.add('hidden');\r\n+    installmentsPreviewModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n+ */\r\n+function updatePreviewTotal() {\r\n+    if (!currentBill.parcels) return;\r\n+    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill);\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+        clearBillForm();\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+    const updateData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updateData);\r\n+        showToast('Parcela atualizada com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ */\r\n+async function initializeApp() {\r\n+    // Define a data atual para o calendário\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+\r\n+    // Verifica se existe um token\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        showInitialLogin();\r\n+        // Se não há token, também escondemos o ecrã de carregamento principal.\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    } try {\r\n+        const data = await api.checkSession();\r\n+\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+    \r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+        \r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n+        \r\n+        // Define os cargos que o Proprietário pode atribuir.\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+        if (users && users.length > 0) {\r\n+            users.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+                \r\n+                // Cria as opções do dropdown para Gerente e Funcionário\r\n+                const roleOptions = assignableRoles.map(role => \r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n+                const roleHtml = isOwner \r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+        \r\n+        // Adiciona o evento de clique aos botões de remover\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                // ... (a lógica de remover continua a mesma de antes)\r\n+            });\r\n+        });\r\n+\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n+\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n+                    e.target.value = originalRole; // Reverte a seleção visual\r\n+                    return;\r\n+\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n+ * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n+ * @param {Event} event - O evento 'change' do input do ficheiro.\r\n+ */\r\n+function handleNfeXmlUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) {\r\n+        return;\r\n+    }\r\n+\r\n+    const reader = new FileReader();\r\n+\r\n+    reader.onload = (e) => {\r\n+        try {\r\n+            const xmlString = e.target.result;\r\n+            const parser = new DOMParser();\r\n+            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n+\r\n+            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n+            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n+                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n+            }\r\n+\r\n+            // Define os nós principais para evitar procuras repetidas\r\n+            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n+            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+            const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n+\r\n+            if (duplicatas.length > 0) {\r\n+                // --- CENÁRIO 1: NFe com parcelas definidas ---\r\n+                \r\n+                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: [] };\r\n+                \r\n+                for (let i = 0; i < duplicatas.length; i++) {\r\n+                    const dup = duplicatas[i];\r\n+                    currentBill.parcels.push({\r\n+                        number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                        amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n+                        dueDate: getTagValue(\"dVenc\", dup),\r\n+                        barcode: ''\r\n+                    });\r\n+                }\r\n+                \r\n+                installmentsList.innerHTML = '';\r\n+                currentBill.parcels.forEach((parcel, index) => {\r\n+                    installmentsList.insertAdjacentHTML('beforeend', `\r\n+                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                        </div>\r\n+                    `);\r\n+                });\r\n+                \r\n+                addEventListenersToInstallmentInputs();\r\n+                updatePreviewTotal();\r\n+                previewBillNameInput.value = currentBill.name;\r\n+                previewNfeNumber.textContent = nfeNumber;\r\n+                installmentsPreviewModal.classList.remove('hidden');\r\n+                \r\n+            } else {\r\n+                // --- CENÁRIO 2: NFe sem parcelas (à vista) ---\r\n+                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n+                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n+\r\n+                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2).replace('.', ',');\r\n+                if (vencimento) {\r\n+                    document.getElementById('dueDate').value = vencimento;\r\n+                }\r\n+                \r\n+                addBillModal.classList.remove('hidden');\r\n+            }\r\n+\r\n+            showToast('Dados do XML carregados com sucesso!', 'success');\r\n+            \r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            console.error(\"Erro ao processar XML:\", error);\r\n+        } finally {\r\n+            event.target.value = '';\r\n+        }\r\n+    };\r\n+\r\n+    reader.onerror = () => {\r\n+         showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+    };\r\n+\r\n+    reader.readAsText(file);\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n+ */\r\n+function addEventListenersToInstallmentInputs() {\r\n+    // Listener para o campo de VALOR\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            }\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de DATA\r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de CÓDIGO DE BARRAS\r\n+    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        // Evento para guardar o valor quando é digitado\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].barcode = e.target.value;\r\n+            }\r\n+        });\r\n+\r\n+        input.addEventListener('keydown', (e) => {\r\n+            if (e.key === 'Enter') {\r\n+                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n+\r\n+                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n+                const nextIndex = currentIndex + 1;\r\n+                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n+\r\n+                if (nextInput) {\r\n+                    // Se houver um próximo campo de código de barras, foca nele.\r\n+                    nextInput.focus();\r\n+                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n+                } else {\r\n+                    // Se for o último campo, foca no botão de salvar.\r\n+                    document.getElementById('addToOrganizer').focus();\r\n+                }\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n+ */\r\n+function handleShowFullScreenBarcode() {\r\n+    const barcodeValue = modalBillBarcodeInput.value;\r\n+    if (!barcodeValue) {\r\n+        return showToast('Não há código de barras para mostrar.', 'info');\r\n+    }\r\n+\r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    if (!barcodeImageContainer) return;\r\n+\r\n+    // Limpa qualquer código de barras anterior\r\n+    barcodeImageContainer.innerHTML = '';\r\n+\r\n+    try {\r\n+        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n+        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n+\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n+        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n+            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n+            lineColor: \"#000000\",\r\n+            width: 2,\r\n+            height: 100,\r\n+            displayValue: true, // Mostra os números abaixo das barras\r\n+            fontSize: 18\r\n+        });\r\n+\r\n+        // Mostra o modal de ecrã inteiro\r\n+        barcodeFullScreenModal.classList.remove('hidden');\r\n+\r\n+    } catch (e) {\r\n+        console.error(\"Erro ao gerar código de barras:\", e);\r\n+        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n+    }\r\n+}\r\n+\r\n+async function handleAttachmentUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file || !selectedParcel) return;\r\n+\r\n+    // Cria um objeto FormData para enviar o ficheiro\r\n+    const formData = new FormData();\r\n+    formData.append('comprovante', file);\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n+        showToast(data.message, 'success');\r\n+        \r\n+        // Atualiza a UI para mostrar o link do novo anexo\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+        \r\n+        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para remover um anexo de comprovativo.\r\n+ * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n+ */\r\n+async function handleRemoveAttachment() {\r\n+    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n+    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader(); // Mostra o ícone de carregamento\r\n+    try {\r\n+        // Chama a nossa função da API para apagar o anexo\r\n+        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n+        \r\n+        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        \r\n+        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+\r\n+        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n+        await updateBillsOrganizer();\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n+ */\r\n+function applyFiltersAndSearch() {\r\n+    const searchTerm = searchInput.value.toLowerCase();\r\n+    const activeFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n+\r\n+    // Começa com todos os boletos e vai aplicando os filtros\r\n+    let filteredBoletos = userBoletos.filter(bill => {\r\n+        // Filtro de pesquisa (procura no nome do boleto e no número da NFe)\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) || \r\n+                              (bill.nfeNumber && bill.nfeNumber.toLowerCase().includes(searchTerm));\r\n+        if (!matchesSearch) return false;\r\n+\r\n+        // Filtro de status\r\n+        if (activeFilter === 'all') return true;\r\n+\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+\r\n+        // Verifica se QUALQUER parcela do boleto corresponde ao filtro\r\n+        return bill.parcels.some(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeFilter === 'paid') return parcel.paid;\r\n+            if (activeFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            return false;\r\n+        });\r\n+    });\r\n+\r\n+    // ATENÇÃO: Precisamos de uma nova função para renderizar o calendário com os dados filtrados.\r\n+    // Vamos chamar a função original por agora, mas idealmente criaríamos uma nova.\r\n+    renderCalendar(filteredBoletos);\r\n+    updateMonthlySummary(filteredBoletos); // Opcional: atualizar resumos com base no filtro\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+    // Navegação entre ecrãs de login\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+\r\n+    // Submissão de formulários\r\n+    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n+    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+\r\n+\r\n+    // Ações na App Principal\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+    openAddBillModalBtn.addEventListener('click', () => addBillModal.classList.remove('hidden'));\r\n+    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+    // Ações do Modal de Edição de Boleto\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+    // Navegação do Calendário\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+        if (currentMonth === 11) currentYear--;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+        if (currentMonth === 0) currentYear++;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    const handleRedirectToHome = () => {\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    const handleFullLogoutAndRedirect = () => {\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    if (subscriptionLogoutBtn) {\r\n+        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+    }\r\n+\r\n+    if (blockedAccessLogoutBtn) {\r\n+        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+    }\r\n+\r\n+    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+    if (settingsBtn) {\r\n+        settingsBtn.addEventListener('click', (e) => {\r\n+            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+            settingsDropdown.classList.toggle('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    // Links dentro do menu dropdown\r\n+    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCompanyInfoModal();\r\n+    });\r\n+\r\n+    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openPermissionsModal();\r\n+    });\r\n+\r\n+    window.addEventListener('click', () => {\r\n+        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n+    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openManageUsersModal();\r\n+    });\r\n+\r\n+    // Botões do modal de gerir utilizadores\r\n+    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+    });\r\n+\r\n+    /**\r\n+     * Lida com o clique no botão de criar/renovar assinatura.\r\n+     */\r\n+    async function handleCreateSubscription() {\r\n+        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+        subscriptionActionBtn.disabled = true;\r\n+        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+        try {\r\n+            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+            const data = await api.createSubscriptionLink();\r\n+            \r\n+            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+            if (data.init_point) {\r\n+                window.location.href = data.init_point;\r\n+            } else {\r\n+                throw new Error('Link de pagamento não recebido.');\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+            subscriptionActionBtn.disabled = false;\r\n+            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+        }\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão.\r\n+    if (subscriptionActionBtn) {\r\n+        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+    }\r\n+\r\n+    if (closePreviewModalBtn) {\r\n+        closePreviewModalBtn.addEventListener('click', () => {\r\n+            installmentsPreviewModal.classList.add('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    if (nfeXmlInput) {\r\n+        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+    }\r\n+\r\n+    if (previewBillNameInput) {\r\n+        previewBillNameInput.addEventListener('input', (e) => {\r\n+            if (currentBill) {\r\n+                currentBill.name = e.target.value;\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão\r\n+    if (showFullScreenBarcodeBtn) {\r\n+        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+    }\r\n+\r\n+    // Listener para o campo de pesquisa\r\n+    if (searchInput) {\r\n+        searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+    }\r\n+\r\n+    // Listeners para os botões de filtro\r\n+    if (filterButtons) {\r\n+        filterButtons.forEach(button => {\r\n+            button.addEventListener('click', (e) => {\r\n+                // Remove a classe 'active' de todos os botões\r\n+                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+                // Adiciona a classe 'active' apenas ao botão clicado\r\n+                e.currentTarget.classList.add('active');\r\n+                // Aplica o filtro\r\n+                applyFiltersAndSearch();\r\n+            });\r\n+        });\r\n+    }\r\n+\r\n+\r\n+    // Inicia a aplicação\r\n+    initializeApp();\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752875870049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,11 @@\n }\r\n \r\n \r\n /**\r\n- * Renderiza o calendário com os boletos do mês atual.\r\n+ * Renderiza o calendário com uma lista específica de boletos.\r\n+ * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n     const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n     currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n@@ -212,15 +214,17 @@\n             document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n             addBillModal.classList.remove('hidden');\r\n         });\r\n \r\n-        userBoletos.forEach(bill => {\r\n+        // A MUDANÇA ESTÁ AQUI: Usamos 'boletosToRender' em vez de 'userBoletos'\r\n+        boletosToRender.forEach(bill => {\r\n             bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n                 const parcelElement = document.createElement('div');\r\n                 parcelElement.className = `bill-card text-xs p-2 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+                \r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">Cod: ${bill.nfeNumber}</div>` : ''}\r\n+                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n                     <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n                 `;\r\n \r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n@@ -1712,1665 +1716,5 @@\n \r\n \r\n     // Inicia a aplicação\r\n     initializeApp();\r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let inactivityTimer;\r\n-\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-const cnpjInput = document.getElementById('cnpjInput');\r\n-const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-const userLoginScreen = document.getElementById('userLoginScreen');\r\n-const userLoginForm = document.getElementById('userLoginForm');\r\n-const welcomeUserText = document.getElementById('welcomeUserText');\r\n-const userInput = document.getElementById('userInput');\r\n-const userPasswordInput = document.getElementById('userPasswordInput');\r\n-const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo financeiro do mês (vencido, total, pago, não pago).\r\n- */\r\n-function updateMonthlySummary() {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPago = totalMes - totalPago;\r\n-    \r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => new Date(parcel.dueDate + 'T00:00:00') < today && !parcel.paid);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    summaryOverdue.textContent = formatCurrency(totalOverdue);\r\n-    summaryTotal.textContent = formatCurrency(totalMes);\r\n-    summaryPaid.textContent = formatCurrency(totalPago);\r\n-    summaryUnpaid.textContent = formatCurrency(totalNaoPago);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com os boletos do mês atual.\r\n- */\r\n-function renderCalendar() {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-        dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-        \r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card')) return;\r\n-            clearBillForm();\r\n-            document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n-            addBillModal.classList.remove('hidden');\r\n-        });\r\n-\r\n-        userBoletos.forEach(bill => {\r\n-            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                const parcelElement = document.createElement('div');\r\n-                parcelElement.className = `bill-card text-xs p-2 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">Cod: ${bill.nfeNumber}</div>` : ''}\r\n-                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n-                `;\r\n-\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        });\r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-function openBillModal(bill, parcel) {\r\n-    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-    \r\n-    // Preenche todos os campos do modal com os dados da parcela clicada\r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-    \r\n-    // Mostra o botão de gerar código de barras apenas se houver um código\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-    \r\n-    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n-    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n-    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n-    if (bill.nfeNumber) {\r\n-        nfeNumberEl.textContent = bill.nfeNumber;\r\n-        nfeContainer.classList.remove('hidden');\r\n-    } else {\r\n-        nfeContainer.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Lógica dinâmica para a secção de anexos\r\n-    const attachmentContainer = document.getElementById('attachment-container');\r\n-    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n-\r\n-    if (parcel.attachmentUrl) {\r\n-        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n-        attachmentContainer.innerHTML = `\r\n-            <div class=\"flex items-center justify-between\">\r\n-                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n-                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n-                </a>\r\n-                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n-            </div>\r\n-        `;\r\n-        // Adiciona o evento de clique ao novo botão de remover\r\n-        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n-    } else {\r\n-        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-        // Adiciona o evento de 'change' ao novo input de upload\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-    }\r\n-\r\n-    // No final de tudo, exibe o modal\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    if (billForm) {\r\n-        billForm.reset();\r\n-    }\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Funções para mostrar os diferentes ecrãs da aplicação.\r\n- */\r\n-function showInitialLogin() {\r\n-    hideAllScreens();\r\n-    initialLoginScreen.classList.remove('hidden');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    currentLoggedInCompany = null;\r\n-    currentLoggedInUser = null;\r\n-    isAdminLoggedIn = false;\r\n-    loggedInViaAdmin = false;\r\n-}\r\n-\r\n-function showCnpjLogin() {\r\n-    hideAllScreens();\r\n-    cnpjLoginForm.reset();\r\n-    cnpjLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showAdminLogin() {\r\n-    hideAllScreens();\r\n-    adminLoginForm.reset();\r\n-    adminLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showUserLogin(companyName) {\r\n-    hideAllScreens();\r\n-    userLoginForm.reset();\r\n-    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-    userLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    mainAppContent.classList.remove('hidden');\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-    await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n- * @param {string} tagName - O nome da tag a ser procurada.\r\n- * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n- * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n- */\r\n-function getTagValue(tagName, parentElement) {\r\n-    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n-    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n-    return element?.textContent || '';\r\n-}\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- */\r\n-function openCompanyDetailsModal(company, users) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (users && users.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        users.forEach(user => {\r\n-            // Cria as opções do dropdown, marcando a atual como selecionada\r\n-            const roleOptions = roles.map(role => \r\n-                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-            ).join('');\r\n-\r\n-            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona o evento para os botões \"Remover\"\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-    \r\n-    // =======================================================================\r\n-    // A CORREÇÃO ESTÁ AQUI\r\n-    // Primeiro, tenta obter a empresa selecionada pelo admin. Se não existir,\r\n-    // usa a empresa do utilizador que está atualmente logado (o Proprietário).\r\n-    // =======================================================================\r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    if (password !== confirmPassword) {\r\n-        return showToast(\"As senhas não coincidem.\", \"error\");\r\n-    }\r\n-    // A verificação agora funciona para os dois casos\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.registerUser(username, password, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n-        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-        \r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-        \r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-        \r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-        \r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-\r\n-async function handleCnpjLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n-        currentLoggedInCompany = data.company; \r\n-        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAdminLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n-        localStorage.setItem('authToken', data.token);\r\n-        isAdminLoggedIn = true;\r\n-        showToast('Login de Administrador bem-sucedido!', 'success');\r\n-        await showAdminDashboard();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList();\r\n-}\r\n-\r\n-async function handleUserLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        // 1. Faz o login do utilizador para obter um token válido.\r\n-        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n-        localStorage.setItem('authToken', loginData.token);\r\n-        \r\n-        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n-        const sessionData = await api.checkSession();\r\n-        currentLoggedInUser = sessionData.user;\r\n-        currentLoggedInCompany = sessionData.company;\r\n-\r\n-        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            // Se estiver tudo OK, entra na aplicação.\r\n-            await showMainApp();\r\n-        } else {\r\n-            // Caso contrário, direciona para o ecrã correto.\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a API para obter os detalhes\r\n-                const { company, users } = await api.getCompanyDetails(companyId);\r\n-                // Chama a nossa nova função para abrir e preencher o modal\r\n-                openCompanyDetailsModal(company, users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                const { users } = await api.getCompanyDetails(companyId);\r\n-                if (users.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n-                }\r\n-                const userIdToImpersonate = users[0]._id;\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-function handleCalculateInstallments(e) {\r\n-    e.preventDefault();\r\n-    const billName = document.getElementById('billName').value;\r\n-    const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n-    const totalAmount = parseFloat(totalAmountValue);\r\n-    const installments = parseInt(document.getElementById('installments').value);\r\n-    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-    const description = document.getElementById('description').value;\r\n-    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n-    \r\n-    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n-        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-    }\r\n-    \r\n-    currentBill = { name: billName, description, parcels: [] }; // O barcode principal não é mais necessário aqui\r\n-    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-    installmentsList.innerHTML = ''; \r\n-\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n-        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n-        \r\n-        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n-        installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n-                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n-            </div>\r\n-        `);\r\n-    }\r\n-\r\n-    // Adiciona os eventos para os novos inputs\r\n-    addEventListenersToInstallmentInputs();\r\n-    updatePreviewTotal();\r\n-    previewBillNameInput.value = currentBill.name;\r\n-    previewNfeNumber.textContent = 'N/A';\r\n-    addBillModal.classList.add('hidden');\r\n-    installmentsPreviewModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n- */\r\n-function updatePreviewTotal() {\r\n-    if (!currentBill.parcels) return;\r\n-    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill);\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-        clearBillForm();\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-    const updateData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updateData);\r\n-        showToast('Parcela atualizada com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- */\r\n-async function initializeApp() {\r\n-    // Define a data atual para o calendário\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-\r\n-    // Verifica se existe um token\r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        showInitialLogin();\r\n-        // Se não há token, também escondemos o ecrã de carregamento principal.\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    } try {\r\n-        const data = await api.checkSession();\r\n-\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-    \r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-        \r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n-\r\n-        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n-        \r\n-        // Define os cargos que o Proprietário pode atribuir.\r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        if (users && users.length > 0) {\r\n-            users.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-                \r\n-                // Cria as opções do dropdown para Gerente e Funcionário\r\n-                const roleOptions = assignableRoles.map(role => \r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n-                const roleHtml = isOwner \r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-        \r\n-        // Adiciona o evento de clique aos botões de remover\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                // ... (a lógica de remover continua a mesma de antes)\r\n-            });\r\n-        });\r\n-\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n-\r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n-                    e.target.value = originalRole; // Reverte a seleção visual\r\n-                    return;\r\n-\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n- * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n- * @param {Event} event - O evento 'change' do input do ficheiro.\r\n- */\r\n-function handleNfeXmlUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) {\r\n-        return;\r\n-    }\r\n-\r\n-    const reader = new FileReader();\r\n-\r\n-    reader.onload = (e) => {\r\n-        try {\r\n-            const xmlString = e.target.result;\r\n-            const parser = new DOMParser();\r\n-            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-\r\n-            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n-            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n-                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n-            }\r\n-\r\n-            // Define os nós principais para evitar procuras repetidas\r\n-            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n-            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n-            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n-            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n-            const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n-\r\n-            if (duplicatas.length > 0) {\r\n-                // --- CENÁRIO 1: NFe com parcelas definidas ---\r\n-                \r\n-                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: [] };\r\n-                \r\n-                for (let i = 0; i < duplicatas.length; i++) {\r\n-                    const dup = duplicatas[i];\r\n-                    currentBill.parcels.push({\r\n-                        number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n-                        amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n-                        dueDate: getTagValue(\"dVenc\", dup),\r\n-                        barcode: ''\r\n-                    });\r\n-                }\r\n-                \r\n-                installmentsList.innerHTML = '';\r\n-                currentBill.parcels.forEach((parcel, index) => {\r\n-                    installmentsList.insertAdjacentHTML('beforeend', `\r\n-                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                        </div>\r\n-                    `);\r\n-                });\r\n-                \r\n-                addEventListenersToInstallmentInputs();\r\n-                updatePreviewTotal();\r\n-                previewBillNameInput.value = currentBill.name;\r\n-                previewNfeNumber.textContent = nfeNumber;\r\n-                installmentsPreviewModal.classList.remove('hidden');\r\n-                \r\n-            } else {\r\n-                // --- CENÁRIO 2: NFe sem parcelas (à vista) ---\r\n-                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n-                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n-\r\n-                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n-                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2).replace('.', ',');\r\n-                if (vencimento) {\r\n-                    document.getElementById('dueDate').value = vencimento;\r\n-                }\r\n-                \r\n-                addBillModal.classList.remove('hidden');\r\n-            }\r\n-\r\n-            showToast('Dados do XML carregados com sucesso!', 'success');\r\n-            \r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            console.error(\"Erro ao processar XML:\", error);\r\n-        } finally {\r\n-            event.target.value = '';\r\n-        }\r\n-    };\r\n-\r\n-    reader.onerror = () => {\r\n-         showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n-    };\r\n-\r\n-    reader.readAsText(file);\r\n-}\r\n-\r\n-/**\r\n- * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n- */\r\n-function addEventListenersToInstallmentInputs() {\r\n-    // Listener para o campo de VALOR\r\n-    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n-            }\r\n-            updatePreviewTotal();\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de DATA\r\n-    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-        input.addEventListener('change', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de CÓDIGO DE BARRAS\r\n-    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n-        // Evento para guardar o valor quando é digitado\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].barcode = e.target.value;\r\n-            }\r\n-        });\r\n-\r\n-        input.addEventListener('keydown', (e) => {\r\n-            if (e.key === 'Enter') {\r\n-                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n-\r\n-                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n-                const nextIndex = currentIndex + 1;\r\n-                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n-\r\n-                if (nextInput) {\r\n-                    // Se houver um próximo campo de código de barras, foca nele.\r\n-                    nextInput.focus();\r\n-                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n-                } else {\r\n-                    // Se for o último campo, foca no botão de salvar.\r\n-                    document.getElementById('addToOrganizer').focus();\r\n-                }\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n- */\r\n-function handleShowFullScreenBarcode() {\r\n-    const barcodeValue = modalBillBarcodeInput.value;\r\n-    if (!barcodeValue) {\r\n-        return showToast('Não há código de barras para mostrar.', 'info');\r\n-    }\r\n-\r\n-    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n-    if (!barcodeImageContainer) return;\r\n-\r\n-    // Limpa qualquer código de barras anterior\r\n-    barcodeImageContainer.innerHTML = '';\r\n-\r\n-    try {\r\n-        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n-        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n-\r\n-        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n-        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n-            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n-            lineColor: \"#000000\",\r\n-            width: 2,\r\n-            height: 100,\r\n-            displayValue: true, // Mostra os números abaixo das barras\r\n-            fontSize: 18\r\n-        });\r\n-\r\n-        // Mostra o modal de ecrã inteiro\r\n-        barcodeFullScreenModal.classList.remove('hidden');\r\n-\r\n-    } catch (e) {\r\n-        console.error(\"Erro ao gerar código de barras:\", e);\r\n-        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n-    }\r\n-}\r\n-\r\n-async function handleAttachmentUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file || !selectedParcel) return;\r\n-\r\n-    // Cria um objeto FormData para enviar o ficheiro\r\n-    const formData = new FormData();\r\n-    formData.append('comprovante', file);\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n-        showToast(data.message, 'success');\r\n-        \r\n-        // Atualiza a UI para mostrar o link do novo anexo\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n-        \r\n-        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para remover um anexo de comprovativo.\r\n- * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n- */\r\n-async function handleRemoveAttachment() {\r\n-    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n-    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader(); // Mostra o ícone de carregamento\r\n-    try {\r\n-        // Chama a nossa função da API para apagar o anexo\r\n-        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n-        \r\n-        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-        \r\n-        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-\r\n-        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n-        await updateBillsOrganizer();\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n-    }\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-    // Navegação entre ecrãs de login\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-\r\n-    // Submissão de formulários\r\n-    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n-    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-\r\n-\r\n-    // Ações na App Principal\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    openAddBillModalBtn.addEventListener('click', () => addBillModal.classList.remove('hidden'));\r\n-    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-    // Ações do Modal de Edição de Boleto\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-    // Navegação do Calendário\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-        if (currentMonth === 11) currentYear--;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-        if (currentMonth === 0) currentYear++;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    const handleRedirectToHome = () => {\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    const handleFullLogoutAndRedirect = () => {\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    if (subscriptionLogoutBtn) {\r\n-        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-    }\r\n-\r\n-    if (blockedAccessLogoutBtn) {\r\n-        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n-    }\r\n-\r\n-    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-    if (settingsBtn) {\r\n-        settingsBtn.addEventListener('click', (e) => {\r\n-            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-            settingsDropdown.classList.toggle('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    // Links dentro do menu dropdown\r\n-    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCompanyInfoModal();\r\n-    });\r\n-\r\n-    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openPermissionsModal();\r\n-    });\r\n-\r\n-    window.addEventListener('click', () => {\r\n-        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n-\r\n-    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openManageUsersModal();\r\n-    });\r\n-\r\n-    // Botões do modal de gerir utilizadores\r\n-    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-    });\r\n-\r\n-    /**\r\n-     * Lida com o clique no botão de criar/renovar assinatura.\r\n-     */\r\n-    async function handleCreateSubscription() {\r\n-        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-        subscriptionActionBtn.disabled = true;\r\n-        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-        try {\r\n-            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-            const data = await api.createSubscriptionLink();\r\n-            \r\n-            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-            if (data.init_point) {\r\n-                window.location.href = data.init_point;\r\n-            } else {\r\n-                throw new Error('Link de pagamento não recebido.');\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-            subscriptionActionBtn.disabled = false;\r\n-            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-        }\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão.\r\n-    if (subscriptionActionBtn) {\r\n-        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-    }\r\n-\r\n-    if (closePreviewModalBtn) {\r\n-        closePreviewModalBtn.addEventListener('click', () => {\r\n-            installmentsPreviewModal.classList.add('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    if (nfeXmlInput) {\r\n-        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-    }\r\n-\r\n-    if (previewBillNameInput) {\r\n-        previewBillNameInput.addEventListener('input', (e) => {\r\n-            if (currentBill) {\r\n-                currentBill.name = e.target.value;\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão\r\n-    if (showFullScreenBarcodeBtn) {\r\n-        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-    }\r\n-\r\n-\r\n-    // Inicia a aplicação\r\n-    initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752875886721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,34 +150,37 @@\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n /**\r\n- * Atualiza o resumo financeiro do mês (vencido, total, pago, não pago).\r\n+ * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n+ * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n  */\r\n function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n-\r\n+    let totalPaid = 0;\r\n+    let totalUnpaid = 0;\r\n+    let totalOverdue = 0;\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n-    const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+\r\n+    // A MUDANÇA ESTÁ AQUI: Usamos 'boletosForSummary' em vez de 'userBoletos'\r\n+    boletosForSummary.forEach(bill => {\r\n+        bill.parcels.forEach(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (parcel.paid) {\r\n+                totalPaid += parcel.amount;\r\n+            } else {\r\n+                totalUnpaid += parcel.amount;\r\n+                if (dueDate < today) {\r\n+                    totalOverdue += parcel.amount;\r\n+                }\r\n+            }\r\n         });\r\n+    });\r\n \r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPago = totalMes - totalPago;\r\n-    \r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => new Date(parcel.dueDate + 'T00:00:00') < today && !parcel.paid);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    summaryOverdue.textContent = formatCurrency(totalOverdue);\r\n-    summaryTotal.textContent = formatCurrency(totalMes);\r\n-    summaryPaid.textContent = formatCurrency(totalPago);\r\n-    summaryUnpaid.textContent = formatCurrency(totalNaoPago);\r\n+    document.getElementById('summaryPaid').textContent = totalPaid.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+    document.getElementById('summaryUnpaid').textContent = totalUnpaid.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+    document.getElementById('summaryOverdue').textContent = totalOverdue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n }\r\n \r\n \r\n /**\r\n"
                },
                {
                    "date": 1752876405049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,33 +154,46 @@\n  * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n  * Por padrão, usa a lista completa de boletos do utilizador.\r\n  * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n  */\r\n+/**\r\n+ * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n+ */\r\n function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n-    let totalPaid = 0;\r\n-    let totalUnpaid = 0;\r\n-    let totalOverdue = 0;\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n \r\n-    // A MUDANÇA ESTÁ AQUI: Usamos 'boletosForSummary' em vez de 'userBoletos'\r\n-    boletosForSummary.forEach(bill => {\r\n-        bill.parcels.forEach(parcel => {\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            if (parcel.paid) {\r\n-                totalPaid += parcel.amount;\r\n-            } else {\r\n-                totalUnpaid += parcel.amount;\r\n-                if (dueDate < today) {\r\n-                    totalOverdue += parcel.amount;\r\n-                }\r\n-            }\r\n+    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n+    \r\n+    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n+    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n         });\r\n-    });\r\n \r\n-    document.getElementById('summaryPaid').textContent = totalPaid.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-    document.getElementById('summaryUnpaid').textContent = totalUnpaid.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-    document.getElementById('summaryOverdue').textContent = totalOverdue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n+\r\n+    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n+    \r\n+    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    // Atualiza os elementos HTML com os valores corretos\r\n+    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n+    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n+    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n }\r\n \r\n \r\n /**\r\n"
                },
                {
                    "date": 1752930908353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,11 @@\n \r\n     for (let day = 1; day <= daysInMonth; day++) {\r\n         const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n         const dayCell = document.createElement('div');\r\n-        dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        \r\n+        // MUDANÇA 1: Adicionamos a classe 'day-cell-droppable' para o SortableJS\r\n+        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n         dayCell.dataset.date = dateStr;\r\n         \r\n         const dayHeader = document.createElement('div');\r\n         dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n@@ -230,26 +232,28 @@\n             document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n             addBillModal.classList.remove('hidden');\r\n         });\r\n \r\n-        // A MUDANÇA ESTÁ AQUI: Usamos 'boletosToRender' em vez de 'userBoletos'\r\n         boletosToRender.forEach(bill => {\r\n             bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n                 const parcelElement = document.createElement('div');\r\n-                parcelElement.className = `bill-card text-xs p-2 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n+\r\n+                // MUDANÇA 2: Adicionamos a classe e os data-* necessários\r\n+                parcelElement.className = `bill-card bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700' : 'bg-indigo-700'}`;\r\n+                parcelElement.dataset.boletoId = bill._id;\r\n+                parcelElement.dataset.parcelId = parcel._id;\r\n                 \r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n-                `;\r\n+                parcelElement.innerHTML = `...`; // O seu innerHTML do card continua o mesmo\r\n \r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n                 dayCell.appendChild(parcelElement);\r\n             });\r\n         });\r\n         calendarDays.appendChild(dayCell);\r\n     }\r\n+\r\n+    // MUDANÇA 3: Ativamos a funcionalidade de drag-and-drop\r\n+    initializeDragAndDrop();\r\n }\r\n \r\n /**\r\n  * Abre o modal para ver/editar os detalhes de uma parcela.\r\n"
                },
                {
                    "date": 1752930949088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1527,9 +1527,53 @@\n     renderCalendar(filteredBoletos);\r\n     updateMonthlySummary(filteredBoletos); // Opcional: atualizar resumos com base no filtro\r\n }\r\n \r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário.\r\n+ */\r\n+function initializeDragAndDrop() {\r\n+    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n \r\n+    dayCells.forEach(cell => {\r\n+        new Sortable(cell, {\r\n+            group: 'calendar-bills', // Permite mover cards entre células\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50', // Estilo do \"fantasma\" do card ao arrastar\r\n+\r\n+            // A função que é chamada QUANDO você solta um card\r\n+            onEnd: async function (evt) {\r\n+                const item = evt.item; // O card que foi arrastado\r\n+                const toCell = evt.to;   // A célula do dia onde ele foi solto\r\n+\r\n+                const boletoId = item.dataset.boletoId;\r\n+                const parcelId = item.dataset.parcelId;\r\n+                const newDate = toCell.dataset.date;\r\n+\r\n+                if (!boletoId || !parcelId || !newDate) return;\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    // Chamamos a nossa API para atualizar a data de vencimento\r\n+                    await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n+                    showToast('Data da parcela atualizada com sucesso!', 'success');\r\n+                    \r\n+                    // Atualizamos a aplicação inteira para refletir a mudança\r\n+                    await updateBillsOrganizer();\r\n+\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                    // Se der erro, atualizamos a interface para reverter a mudança visual\r\n+                    await updateBillsOrganizer();\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            },\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+\r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1752931098230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n \r\n     // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n-    \r\n+\r\n     // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n     const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n         .filter(parcel => {\r\n             const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n@@ -177,9 +177,9 @@\n     const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n     const totalNaoPagoMes = totalMes - totalPagoMes;\r\n \r\n     // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n-    \r\n+\r\n     // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n     const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n         .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n     const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n@@ -216,9 +216,9 @@\n     for (let day = 1; day <= daysInMonth; day++) {\r\n         const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n         const dayCell = document.createElement('div');\r\n         \r\n-        // MUDANÇA 1: Adicionamos a classe 'day-cell-droppable' para o SortableJS\r\n+        // Adicionamos a classe 'day-cell-droppable' para o SortableJS\r\n         dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n         dayCell.dataset.date = dateStr;\r\n         \r\n         const dayHeader = document.createElement('div');\r\n@@ -226,9 +226,9 @@\n         dayHeader.textContent = day;\r\n         dayCell.appendChild(dayHeader);\r\n \r\n         dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card')) return;\r\n+            if (e.target.closest('.bill-card-draggable')) return; // Usamos a nova classe aqui\r\n             clearBillForm();\r\n             document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n             addBillModal.classList.remove('hidden');\r\n         });\r\n@@ -236,23 +236,26 @@\n         boletosToRender.forEach(bill => {\r\n             bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n                 const parcelElement = document.createElement('div');\r\n \r\n-                // MUDANÇA 2: Adicionamos a classe e os data-* necessários\r\n-                parcelElement.className = `bill-card bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700' : 'bg-indigo-700'}`;\r\n+                // Adicionamos as classes e os data-* necessários para o drag-and-drop\r\n+                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n                 parcelElement.dataset.boletoId = bill._id;\r\n                 parcelElement.dataset.parcelId = parcel._id;\r\n-                \r\n-                parcelElement.innerHTML = `...`; // O seu innerHTML do card continua o mesmo\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n+                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n+                `;\r\n \r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n                 dayCell.appendChild(parcelElement);\r\n             });\r\n         });\r\n         calendarDays.appendChild(dayCell);\r\n     }\r\n \r\n-    // MUDANÇA 3: Ativamos a funcionalidade de drag-and-drop\r\n+    // Ativamos a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n     initializeDragAndDrop();\r\n }\r\n \r\n /**\r\n@@ -262,21 +265,21 @@\n  */\r\n function openBillModal(bill, parcel) {\r\n     // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n     selectedParcel = { ...parcel, parentId: bill._id };\r\n-    \r\n+\r\n     // Preenche todos os campos do modal com os dados da parcela clicada\r\n     modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n     modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n     modalBillAmount.value = parcel.amount.toFixed(2);\r\n     modalBillDate.value = parcel.dueDate;\r\n     modalBillDescription.value = parcel.description || '';\r\n     modalBillBarcodeInput.value = parcel.barcode || '';\r\n     modalBillPaidCheckbox.checked = parcel.paid;\r\n-    \r\n+\r\n     // Mostra o botão de gerar código de barras apenas se houver um código\r\n     showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-    \r\n+\r\n     // Mostra o número da NFe apenas se o boleto tiver um associado\r\n     const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n     const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n     if (bill.nfeNumber) {\r\n@@ -426,9 +429,9 @@\n     if (users && users.length > 0) {\r\n         const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n         users.forEach(user => {\r\n             // Cria as opções do dropdown, marcando a atual como selecionada\r\n-            const roleOptions = roles.map(role => \r\n+            const roleOptions = roles.map(role =>\r\n                 `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n             ).join('');\r\n \r\n             // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n@@ -519,9 +522,9 @@\n \r\n     const username = document.getElementById('addUsernameInput').value;\r\n     const password = document.getElementById('addUserPasswordInput').value;\r\n     const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-    \r\n+\r\n     // =======================================================================\r\n     // A CORREÇÃO ESTÁ AQUI\r\n     // Primeiro, tenta obter a empresa selecionada pelo admin. Se não existir,\r\n     // usa a empresa do utilizador que está atualmente logado (o Proprietário).\r\n@@ -713,9 +716,9 @@\n async function openCompanyInfoModal() {\r\n     showLoader();\r\n     try {\r\n         const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-        \r\n+\r\n         document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n         document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n         document.getElementById('companyInfoEmail').value = company.email || '';\r\n         document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n@@ -738,18 +741,18 @@\n async function openPermissionsModal() {\r\n     showLoader();\r\n     try {\r\n         const permissions = await api.getPermissions();\r\n-        \r\n+\r\n         // Preenche o modal com as permissões atuais\r\n         document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n         document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n         document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-        \r\n+\r\n         document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n         document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n         document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-        \r\n+\r\n         permissionsModal.classList.remove('hidden');\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n@@ -811,9 +814,9 @@\n     e.preventDefault();\r\n     showLoader();\r\n     try {\r\n         const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n-        currentLoggedInCompany = data.company; \r\n+        currentLoggedInCompany = data.company;\r\n         showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n \r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n@@ -850,9 +853,9 @@\n     try {\r\n         // 1. Faz o login do utilizador para obter um token válido.\r\n         const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n         localStorage.setItem('authToken', loginData.token);\r\n-        \r\n+\r\n         // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n         const sessionData = await api.checkSession();\r\n         currentLoggedInUser = sessionData.user;\r\n         currentLoggedInCompany = sessionData.company;\r\n@@ -970,25 +973,25 @@\n     const installments = parseInt(document.getElementById('installments').value);\r\n     const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n     const description = document.getElementById('description').value;\r\n     const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n-    \r\n+\r\n     if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n         return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n     }\r\n-    \r\n+\r\n     currentBill = { name: billName, description, parcels: [] }; // O barcode principal não é mais necessário aqui\r\n     const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-    installmentsList.innerHTML = ''; \r\n+    installmentsList.innerHTML = '';\r\n \r\n     for (let i = 0; i < installments; i++) {\r\n         const parcelDate = new Date(dueDate + 'T00:00:00');\r\n         parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n         const dateForInput = parcelDate.toISOString().split('T')[0];\r\n \r\n         // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n         currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n-        \r\n+\r\n         // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n         installmentsList.insertAdjacentHTML('beforeend', `\r\n             <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n                 <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n@@ -1155,9 +1158,9 @@\n     currentLoggedInUser = null;\r\n     currentLoggedInCompany = null;\r\n     loggedInViaAdmin = false;\r\n     isAdminLoggedIn = true;\r\n-    \r\n+\r\n     // Mostra o painel de administração novamente.\r\n     showAdminDashboard();\r\n }\r\n \r\n@@ -1167,28 +1170,28 @@\n async function openManageUsersModal() {\r\n     showLoader();\r\n     try {\r\n         const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-        \r\n+\r\n         const companyUsersList = document.getElementById('companyUsersList');\r\n         if (!companyUsersList) return;\r\n \r\n         companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n-        \r\n+\r\n         // Define os cargos que o Proprietário pode atribuir.\r\n         const assignableRoles = ['Gerente', 'Funcionário'];\r\n \r\n         if (users && users.length > 0) {\r\n             users.forEach(user => {\r\n                 const isOwner = user.role === 'Proprietário';\r\n-                \r\n+\r\n                 // Cria as opções do dropdown para Gerente e Funcionário\r\n-                const roleOptions = assignableRoles.map(role => \r\n+                const roleOptions = assignableRoles.map(role =>\r\n                     `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n                 ).join('');\r\n \r\n                 // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n-                const roleHtml = isOwner \r\n+                const roleHtml = isOwner\r\n                     ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n                     : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n \r\n                 companyUsersList.insertAdjacentHTML('beforeend', `\r\n@@ -1201,9 +1204,9 @@\n                     </div>\r\n                 `);\r\n             });\r\n         }\r\n-        \r\n+\r\n         // Adiciona o evento de clique aos botões de remover\r\n         document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n             button.addEventListener('click', async (e) => {\r\n                 // ... (a lógica de remover continua a mesma de antes)\r\n@@ -1276,11 +1279,11 @@\n             const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n \r\n             if (duplicatas.length > 0) {\r\n                 // --- CENÁRIO 1: NFe com parcelas definidas ---\r\n-                \r\n+\r\n                 currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: [] };\r\n-                \r\n+\r\n                 for (let i = 0; i < duplicatas.length; i++) {\r\n                     const dup = duplicatas[i];\r\n                     currentBill.parcels.push({\r\n                         number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n@@ -1288,9 +1291,9 @@\n                         dueDate: getTagValue(\"dVenc\", dup),\r\n                         barcode: ''\r\n                     });\r\n                 }\r\n-                \r\n+\r\n                 installmentsList.innerHTML = '';\r\n                 currentBill.parcels.forEach((parcel, index) => {\r\n                     installmentsList.insertAdjacentHTML('beforeend', `\r\n                         <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n@@ -1300,15 +1303,15 @@\n                             <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n                         </div>\r\n                     `);\r\n                 });\r\n-                \r\n+\r\n                 addEventListenersToInstallmentInputs();\r\n                 updatePreviewTotal();\r\n                 previewBillNameInput.value = currentBill.name;\r\n                 previewNfeNumber.textContent = nfeNumber;\r\n                 installmentsPreviewModal.classList.remove('hidden');\r\n-                \r\n+\r\n             } else {\r\n                 // --- CENÁRIO 2: NFe sem parcelas (à vista) ---\r\n                 const valorNFe = getTagValue(\"vNF\", totalNode);\r\n                 const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n@@ -1317,14 +1320,14 @@\n                 document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2).replace('.', ',');\r\n                 if (vencimento) {\r\n                     document.getElementById('dueDate').value = vencimento;\r\n                 }\r\n-                \r\n+\r\n                 addBillModal.classList.remove('hidden');\r\n             }\r\n \r\n             showToast('Dados do XML carregados com sucesso!', 'success');\r\n-            \r\n+\r\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n             console.error(\"Erro ao processar XML:\", error);\r\n         } finally {\r\n@@ -1332,9 +1335,9 @@\n         }\r\n     };\r\n \r\n     reader.onerror = () => {\r\n-         showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n     };\r\n \r\n     reader.readAsText(file);\r\n }\r\n@@ -1444,13 +1447,13 @@\n     showLoader();\r\n     try {\r\n         const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n         showToast(data.message, 'success');\r\n-        \r\n+\r\n         // Atualiza a UI para mostrar o link do novo anexo\r\n         const attachmentContainer = document.getElementById('attachment-container');\r\n         attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n-        \r\n+\r\n         // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n         await updateBillsOrganizer();\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n@@ -1473,13 +1476,13 @@\n     try {\r\n         // Chama a nossa função da API para apagar o anexo\r\n         const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n         showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n-        \r\n+\r\n         // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n         const attachmentContainer = document.getElementById('attachment-container');\r\n         attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-        \r\n+\r\n         // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n         document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n \r\n         // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n@@ -1501,10 +1504,10 @@\n \r\n     // Começa com todos os boletos e vai aplicando os filtros\r\n     let filteredBoletos = userBoletos.filter(bill => {\r\n         // Filtro de pesquisa (procura no nome do boleto e no número da NFe)\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) || \r\n-                              (bill.nfeNumber && bill.nfeNumber.toLowerCase().includes(searchTerm));\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n+            (bill.nfeNumber && bill.nfeNumber.toLowerCase().includes(searchTerm));\r\n         if (!matchesSearch) return false;\r\n \r\n         // Filtro de status\r\n         if (activeFilter === 'all') return true;\r\n@@ -1555,9 +1558,9 @@\n                 try {\r\n                     // Chamamos a nossa API para atualizar a data de vencimento\r\n                     await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n                     showToast('Data da parcela atualizada com sucesso!', 'success');\r\n-                    \r\n+\r\n                     // Atualizamos a aplicação inteira para refletir a mudança\r\n                     await updateBillsOrganizer();\r\n \r\n                 } catch (error) {\r\n@@ -1641,9 +1644,9 @@\n         updateMonthlySummary();\r\n     });\r\n \r\n     if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n     }\r\n \r\n     const handleRedirectToHome = () => {\r\n         window.location.href = 'Index.html';\r\n@@ -1715,9 +1718,9 @@\n \r\n         try {\r\n             // Chama a nossa função da API para obter o link do Mercado Pago.\r\n             const data = await api.createSubscriptionLink();\r\n-            \r\n+\r\n             // Se a API retornar um link (init_point), redireciona o utilizador.\r\n             if (data.init_point) {\r\n                 window.location.href = data.init_point;\r\n             } else {\r\n"
                },
                {
                    "date": 1752932108753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,8 +143,12 @@\n const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n const searchInput = document.getElementById('searchInput');\r\n const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const forgotPasswordLink = document.getElementById('forgotPasswordLink');\r\n+const forgotPasswordModal = document.getElementById('forgotPasswordModal');\r\n+const closeForgotPasswordModal = document.getElementById('closeForgotPasswordModal');\r\n+const forgotPasswordForm = document.getElementById('forgotPasswordForm');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -809,8 +813,23 @@\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n+async function handleForgotPasswordRequest(e) {\r\n+    e.preventDefault();\r\n+    const email = document.getElementById('recoveryEmailInput').value;\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.requestPasswordReset(email);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n+        forgotPasswordModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n async function handleCnpjLogin(e) {\r\n     e.preventDefault();\r\n     showLoader();\r\n     try {\r\n@@ -1780,8 +1799,21 @@\n             });\r\n         });\r\n     }\r\n \r\n+    if (forgotPasswordLink) {\r\n+        forgotPasswordLink.addEventListener('click', (e) => {\r\n+            e.preventDefault();\r\n+            forgotPasswordModal.classList.remove('hidden');\r\n+        });\r\n+    }\r\n+    if (closeForgotPasswordModal) {\r\n+        closeForgotPasswordModal.addEventListener('click', () => forgotPasswordModal.classList.add('hidden'));\r\n+    }\r\n+    if (forgotPasswordForm) {\r\n+        forgotPasswordForm.addEventListener('submit', handleForgotPasswordRequest);\r\n+    }\r\n \r\n+\r\n     // Inicia a aplicação\r\n     initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752933838615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1108,35 +1108,43 @@\n }\r\n \r\n /**\r\n  * Função de inicialização principal da aplicação.\r\n+ * Verifica a sessão, o estado da assinatura e ações do URL.\r\n  */\r\n async function initializeApp() {\r\n     // Define a data atual para o calendário\r\n     const today = new Date();\r\n     currentMonth = today.getMonth();\r\n     currentYear = today.getFullYear();\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n+    const action = urlParams.get('action');\r\n \r\n-    // Verifica se existe um token\r\n+    if (action === 'forgot_password') {\r\n+        // Se a ação for recuperar a senha, abrimos o modal diretamente\r\n+        forgotPasswordModal.classList.remove('hidden');\r\n+        // E escondemos a tela de carregamento para não ficar por cima\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return; // Paramos a execução para não continuar com o login\r\n+    }\r\n+    \r\n     const token = localStorage.getItem('authToken');\r\n     if (!token) {\r\n         showInitialLogin();\r\n-        // Se não há token, também escondemos o ecrã de carregamento principal.\r\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n         return;\r\n-    } try {\r\n+    }\r\n+\r\n+    try {\r\n         const data = await api.checkSession();\r\n-\r\n         if (data.user.role === 'SuperAdmin') {\r\n             isAdminLoggedIn = true;\r\n             await showAdminDashboard();\r\n         } else {\r\n             currentLoggedInUser = data.user;\r\n             currentLoggedInCompany = data.company;\r\n-\r\n             const subscription = currentLoggedInCompany.subscription;\r\n             const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n             if (isSubscriptionActive) {\r\n                 await showMainApp();\r\n             } else {\r\n                 if (currentLoggedInUser.role === 'Proprietário') {\r\n"
                },
                {
                    "date": 1752934090154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1115,17 +1115,22 @@\n     // Define a data atual para o calendário\r\n     const today = new Date();\r\n     currentMonth = today.getMonth();\r\n     currentYear = today.getFullYear();\r\n+\r\n+    // 1. Verificamos se há uma ação no URL ANTES de qualquer outra coisa\r\n     const urlParams = new URLSearchParams(window.location.search);\r\n     const action = urlParams.get('action');\r\n \r\n     if (action === 'forgot_password') {\r\n-        // Se a ação for recuperar a senha, abrimos o modal diretamente\r\n-        forgotPasswordModal.classList.remove('hidden');\r\n-        // E escondemos a tela de carregamento para não ficar por cima\r\n+        // Se a ação for recuperar a senha, mostramos a tela de login de empresa\r\n+        // e depois abrimos o modal de recuperação por cima.\r\n+        showCnpjLogin(); // Mostra a tela de fundo para não ficar um ecrã preto\r\n+        forgotPasswordModal.classList.remove('hidden'); // Abre o modal\r\n+        \r\n+        // Esconde o ecrã de carregamento principal para não ficar por cima\r\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return; // Paramos a execução para não continuar com o login\r\n+        return; // Para a execução para não continuar com a verificação de login\r\n     }\r\n     \r\n     const token = localStorage.getItem('authToken');\r\n     if (!token) {\r\n"
                },
                {
                    "date": 1752942285990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,8 +147,14 @@\n const forgotPasswordLink = document.getElementById('forgotPasswordLink');\r\n const forgotPasswordModal = document.getElementById('forgotPasswordModal');\r\n const closeForgotPasswordModal = document.getElementById('closeForgotPasswordModal');\r\n const forgotPasswordForm = document.getElementById('forgotPasswordForm');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n"
                },
                {
                    "date": 1752942378822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -532,14 +532,8 @@\n \r\n     const username = document.getElementById('addUsernameInput').value;\r\n     const password = document.getElementById('addUserPasswordInput').value;\r\n     const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-\r\n-    // =======================================================================\r\n-    // A CORREÇÃO ESTÁ AQUI\r\n-    // Primeiro, tenta obter a empresa selecionada pelo admin. Se não existir,\r\n-    // usa a empresa do utilizador que está atualmente logado (o Proprietário).\r\n-    // =======================================================================\r\n     const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n \r\n     if (password !== confirmPassword) {\r\n         return showToast(\"As senhas não coincidem.\", \"error\");\r\n@@ -815,8 +809,40 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+async function openCategoriesModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        renderCategoryList(categories);\r\n+        categoriesModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function renderCategoryList(categories) {\r\n+    categoryListDiv.innerHTML = '';\r\n+    if (categories.length === 0) {\r\n+        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n+        return;\r\n+    }\r\n+    categories.forEach(category => {\r\n+        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n+                <span class=\"text-white\">${category.name}</span>\r\n+                <div>\r\n+                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n+                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                </div>\r\n+            </div>\r\n+        `);\r\n+    });\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1752942413414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1857,8 +1857,53 @@\n     if (forgotPasswordForm) {\r\n         forgotPasswordForm.addEventListener('submit', handleForgotPasswordRequest);\r\n     }\r\n \r\n+    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCategoriesModal();\r\n+    });\r\n \r\n+    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+    if (addCategoryForm) {\r\n+        addCategoryForm.addEventListener('submit', async (e) => {\r\n+            e.preventDefault();\r\n+            const name = newCategoryNameInput.value.trim();\r\n+            if (!name) return;\r\n+            try {\r\n+                await api.createCategory(name);\r\n+                newCategoryNameInput.value = '';\r\n+                openCategoriesModal(); // Recarrega a lista\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                openCategoriesModal();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                openCategoriesModal();\r\n+            }\r\n+        }\r\n+    });\r\n+\r\n+\r\n     // Inicia a aplicação\r\n     initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752942767067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,8 +153,9 @@\n const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n const addCategoryForm = document.getElementById('addCategoryForm');\r\n const newCategoryNameInput = document.getElementById('newCategoryName');\r\n const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n@@ -1017,8 +1018,9 @@\n \r\n function handleCalculateInstallments(e) {\r\n     e.preventDefault();\r\n     const billName = document.getElementById('billName').value;\r\n+    const categoryId = billCategorySelect.value;\r\n     const dueDate = document.getElementById('dueDate').value;\r\n     const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n     const totalAmount = parseFloat(totalAmountValue);\r\n     const installments = parseInt(document.getElementById('installments').value);\r\n@@ -1029,9 +1031,14 @@\n     if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n         return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n     }\r\n \r\n-    currentBill = { name: billName, description, parcels: [] }; // O barcode principal não é mais necessário aqui\r\n+    currentBill = { \r\n+        name: billName, \r\n+        description, \r\n+        parcels: [],\r\n+        category: categoryId || null\r\n+    };\r\n     const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n     installmentsList.innerHTML = '';\r\n \r\n     for (let i = 0; i < installments; i++) {\r\n"
                },
                {
                    "date": 1752942975972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -842,8 +842,25 @@\n         `);\r\n     });\r\n }\r\n \r\n+async function openAddBillModal() {\r\n+    clearBillForm();\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            billCategorySelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n+        });\r\n+        addBillModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n@@ -1689,9 +1706,8 @@\n     // Ações na App Principal\r\n     logoutBtn.addEventListener('click', showInitialLogin);\r\n     clearFormBtn.addEventListener('click', clearBillForm);\r\n     addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    openAddBillModalBtn.addEventListener('click', () => addBillModal.classList.remove('hidden'));\r\n     closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n \r\n     // Ações do Modal de Edição de Boleto\r\n     closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n@@ -1718,8 +1734,12 @@\n     if (addCompanyCnpjInput) {\r\n         IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n     }\r\n \r\n+    if (openAddBillModalBtn) {\r\n+        openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+    }\r\n+\r\n     const handleRedirectToHome = () => {\r\n         window.location.href = 'Index.html';\r\n     };\r\n \r\n@@ -1910,7 +1930,9 @@\n         }\r\n     });\r\n \r\n \r\n+\r\n+\r\n     // Inicia a aplicação\r\n     initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752943404402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -848,11 +848,16 @@\n     showLoader();\r\n     try {\r\n         const categories = await api.getCategories();\r\n         billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n+        \r\n         categories.forEach(category => {\r\n-            billCategorySelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n+            const option = document.createElement('option');\r\n+            option.value = category._id;\r\n+            option.textContent = category.name;\r\n+            billCategorySelect.appendChild(option);\r\n         });\r\n+        \r\n         addBillModal.classList.remove('hidden');\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n"
                },
                {
                    "date": 1752943722430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -847,9 +847,9 @@\n     clearBillForm();\r\n     showLoader();\r\n     try {\r\n         const categories = await api.getCategories();\r\n-        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n+        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n         \r\n         categories.forEach(category => {\r\n             const option = document.createElement('option');\r\n             option.value = category._id;\r\n"
                },
                {
                    "date": 1752944129043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,9 @@\n     for (let day = 1; day <= daysInMonth; day++) {\r\n         const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n         const dayCell = document.createElement('div');\r\n         \r\n-        // Adicionamos a classe 'day-cell-droppable' para o SortableJS\r\n+        // Adiciona a classe 'day-cell-droppable' para o SortableJS\r\n         dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n         dayCell.dataset.date = dateStr;\r\n         \r\n         const dayHeader = document.createElement('div');\r\n@@ -237,22 +237,23 @@\n         dayHeader.textContent = day;\r\n         dayCell.appendChild(dayHeader);\r\n \r\n         dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card-draggable')) return; // Usamos a nova classe aqui\r\n-            clearBillForm();\r\n-            document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n-            addBillModal.classList.remove('hidden');\r\n+            if (e.target.closest('.bill-card-draggable')) return;\r\n+            openAddBillModal(e.currentTarget.dataset.date);\r\n         });\r\n \r\n+        // Usa a lista 'boletosToRender' que foi passada para a função\r\n         boletosToRender.forEach(bill => {\r\n             bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n                 const parcelElement = document.createElement('div');\r\n \r\n-                // Adicionamos as classes e os data-* necessários para o drag-and-drop\r\n+                // Adiciona as classes e os atributos de dados para o drag-and-drop\r\n                 parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n                 parcelElement.dataset.boletoId = bill._id;\r\n                 parcelElement.dataset.parcelId = parcel._id;\r\n+                \r\n+                // Gera o conteúdo do card com todas as informações\r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n                     ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n                     <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n@@ -264,9 +265,9 @@\n         });\r\n         calendarDays.appendChild(dayCell);\r\n     }\r\n \r\n-    // Ativamos a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n+    // Ativa a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n     initializeDragAndDrop();\r\n }\r\n \r\n /**\r\n@@ -842,9 +843,14 @@\n         `);\r\n     });\r\n }\r\n \r\n-async function openAddBillModal() {\r\n+/**\r\n+ * Abre o modal para adicionar um novo boleto, buscando as categorias\r\n+ * e opcionalmente pré-preenchendo a data.\r\n+ * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n+ */\r\n+async function openAddBillModal(preselectedDate = null) {\r\n     clearBillForm();\r\n     showLoader();\r\n     try {\r\n         const categories = await api.getCategories();\r\n@@ -855,8 +861,13 @@\n             option.value = category._id;\r\n             option.textContent = category.name;\r\n             billCategorySelect.appendChild(option);\r\n         });\r\n+\r\n+        // Se uma data foi passada como parâmetro, nós a preenchemos\r\n+        if (preselectedDate) {\r\n+            document.getElementById('dueDate').value = preselectedDate;\r\n+        }\r\n         \r\n         addBillModal.classList.remove('hidden');\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n"
                },
                {
                    "date": 1752947182976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,8 +154,9 @@\n const addCategoryForm = document.getElementById('addCategoryForm');\r\n const newCategoryNameInput = document.getElementById('newCategoryName');\r\n const categoryListDiv = document.getElementById('categoryList');\r\n const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n \r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n"
                },
                {
                    "date": 1752947304260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,8 +256,9 @@\n                 // Gera o conteúdo do card com todas as informações\r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n                     ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                    ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n                     <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n                 `;\r\n \r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n"
                },
                {
                    "date": 1752947409883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,9 +276,9 @@\n  * Abre o modal para ver/editar os detalhes de uma parcela.\r\n  * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n  * @param {object} parcel - O objeto da parcela específica.\r\n  */\r\n-function openBillModal(bill, parcel) {\r\n+async function openBillModal(bill, parcel) {\r\n     // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n     selectedParcel = { ...parcel, parentId: bill._id };\r\n \r\n     // Preenche todos os campos do modal com os dados da parcela clicada\r\n@@ -325,13 +325,26 @@\n         // Adiciona o evento de 'change' ao novo input de upload\r\n         document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n     }\r\n \r\n-    // No final de tudo, exibe o modal\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        categories.forEach(cat => {\r\n+            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n+        });\r\n+        if (bill.category) {\r\n+            modalBillCategorySelect.value = bill.category._id;\r\n+        } else {\r\n+            modalBillCategorySelect.value = \"\";\r\n+        }\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+\r\n     billModal.classList.remove('hidden');\r\n }\r\n \r\n-\r\n /**\r\n  * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n  */\r\n function clearBillForm() {\r\n@@ -1129,19 +1142,25 @@\n }\r\n \r\n async function handleSaveChanges() {\r\n     if (!selectedParcel) return;\r\n-    const updateData = {\r\n+    const updatedParcelData = {\r\n         paid: modalBillPaidCheckbox.checked,\r\n         amount: parseFloat(modalBillAmount.value),\r\n         dueDate: modalBillDate.value,\r\n         description: modalBillDescription.value,\r\n         barcode: modalBillBarcodeInput.value,\r\n     };\r\n+    const updatedBillData = {\r\n+        category: modalBillCategorySelect.value || null\r\n+    };\r\n+\r\n     showLoader();\r\n     try {\r\n-        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updateData);\r\n-        showToast('Parcela atualizada com sucesso!', 'success');\r\n+        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n+        await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n+\r\n+        showToast('Alterações salvas com sucesso!', 'success');\r\n         billModal.classList.add('hidden');\r\n         await updateBillsOrganizer();\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n"
                },
                {
                    "date": 1752957751099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1994 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let inactivityTimer;\r\n+\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+const cnpjInput = document.getElementById('cnpjInput');\r\n+const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+const userLoginScreen = document.getElementById('userLoginScreen');\r\n+const userLoginForm = document.getElementById('userLoginForm');\r\n+const welcomeUserText = document.getElementById('welcomeUserText');\r\n+const userInput = document.getElementById('userInput');\r\n+const userPasswordInput = document.getElementById('userPasswordInput');\r\n+const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const forgotPasswordLink = document.getElementById('forgotPasswordLink');\r\n+const forgotPasswordModal = document.getElementById('forgotPasswordModal');\r\n+const closeForgotPasswordModal = document.getElementById('closeForgotPasswordModal');\r\n+const forgotPasswordForm = document.getElementById('forgotPasswordForm');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n+ * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n+ */\r\n+/**\r\n+ * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n+ */\r\n+function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+\r\n+    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n+\r\n+    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n+    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n+\r\n+    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n+\r\n+    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    // Atualiza os elementos HTML com os valores corretos\r\n+    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n+    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n+    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com uma lista específica de boletos.\r\n+ * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n+ */\r\n+function renderCalendar(boletosToRender = userBoletos) {\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+        \r\n+        // Adiciona a classe 'day-cell-droppable' para o SortableJS\r\n+        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+        \r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card-draggable')) return;\r\n+            openAddBillModal(e.currentTarget.dataset.date);\r\n+        });\r\n+\r\n+        // Usa a lista 'boletosToRender' que foi passada para a função\r\n+        boletosToRender.forEach(bill => {\r\n+            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                const parcelElement = document.createElement('div');\r\n+\r\n+                // Adiciona as classes e os atributos de dados para o drag-and-drop\r\n+                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n+                parcelElement.dataset.boletoId = bill._id;\r\n+                parcelElement.dataset.parcelId = parcel._id;\r\n+                \r\n+                // Gera o conteúdo do card com todas as informações\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n+                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                    ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n+                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n+                `;\r\n+\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        });\r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+\r\n+    // Ativa a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n+    initializeDragAndDrop();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+async function openBillModal(bill, parcel) {\r\n+    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+\r\n+    // Preenche todos os campos do modal com os dados da parcela clicada\r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+    // Mostra o botão de gerar código de barras apenas se houver um código\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+\r\n+    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n+    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n+    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n+    if (bill.nfeNumber) {\r\n+        nfeNumberEl.textContent = bill.nfeNumber;\r\n+        nfeContainer.classList.remove('hidden');\r\n+    } else {\r\n+        nfeContainer.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Lógica dinâmica para a secção de anexos\r\n+    const attachmentContainer = document.getElementById('attachment-container');\r\n+    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n+\r\n+    if (parcel.attachmentUrl) {\r\n+        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n+        attachmentContainer.innerHTML = `\r\n+            <div class=\"flex items-center justify-between\">\r\n+                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n+                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n+                </a>\r\n+                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n+            </div>\r\n+        `;\r\n+        // Adiciona o evento de clique ao novo botão de remover\r\n+        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n+    } else {\r\n+        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        // Adiciona o evento de 'change' ao novo input de upload\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+    }\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        categories.forEach(cat => {\r\n+            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n+        });\r\n+        if (bill.category) {\r\n+            modalBillCategorySelect.value = bill.category._id;\r\n+        } else {\r\n+            modalBillCategorySelect.value = \"\";\r\n+        }\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    if (billForm) {\r\n+        billForm.reset();\r\n+    }\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        totalBillsSpan.textContent = totalParcels;\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Funções para mostrar os diferentes ecrãs da aplicação.\r\n+ */\r\n+function showInitialLogin() {\r\n+    hideAllScreens();\r\n+    initialLoginScreen.classList.remove('hidden');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    currentLoggedInCompany = null;\r\n+    currentLoggedInUser = null;\r\n+    isAdminLoggedIn = false;\r\n+    loggedInViaAdmin = false;\r\n+}\r\n+\r\n+function showCnpjLogin() {\r\n+    hideAllScreens();\r\n+    cnpjLoginForm.reset();\r\n+    cnpjLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showAdminLogin() {\r\n+    hideAllScreens();\r\n+    adminLoginForm.reset();\r\n+    adminLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showUserLogin(companyName) {\r\n+    hideAllScreens();\r\n+    userLoginForm.reset();\r\n+    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+    userLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    mainAppContent.classList.remove('hidden');\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+    await populateCategoryFilter();\r\n+    await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n+ * @param {string} tagName - O nome da tag a ser procurada.\r\n+ * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n+ * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n+ */\r\n+function getTagValue(tagName, parentElement) {\r\n+    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n+    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n+    return element?.textContent || '';\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ */\r\n+function openCompanyDetailsModal(company, users) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (users && users.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        users.forEach(user => {\r\n+            // Cria as opções do dropdown, marcando a atual como selecionada\r\n+            const roleOptions = roles.map(role =>\r\n+                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+            ).join('');\r\n+\r\n+            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona o evento para os botões \"Remover\"\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    if (password !== confirmPassword) {\r\n+        return showToast(\"As senhas não coincidem.\", \"error\");\r\n+    }\r\n+    // A verificação agora funciona para os dois casos\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.registerUser(username, password, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n+        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+\r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function openCategoriesModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        renderCategoryList(categories);\r\n+        categoriesModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function renderCategoryList(categories) {\r\n+    categoryListDiv.innerHTML = '';\r\n+    if (categories.length === 0) {\r\n+        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n+        return;\r\n+    }\r\n+    categories.forEach(category => {\r\n+        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n+                <span class=\"text-white\">${category.name}</span>\r\n+                <div>\r\n+                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n+                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                </div>\r\n+            </div>\r\n+        `);\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo boleto, buscando as categorias\r\n+ * e opcionalmente pré-preenchendo a data.\r\n+ * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n+ */\r\n+async function openAddBillModal(preselectedDate = null) {\r\n+    clearBillForm();\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        \r\n+        categories.forEach(category => {\r\n+            const option = document.createElement('option');\r\n+            option.value = category._id;\r\n+            option.textContent = category.name;\r\n+            billCategorySelect.appendChild(option);\r\n+        });\r\n+\r\n+        // Se uma data foi passada como parâmetro, nós a preenchemos\r\n+        if (preselectedDate) {\r\n+            document.getElementById('dueDate').value = preselectedDate;\r\n+        }\r\n+        \r\n+        addBillModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function populateCategoryFilter() {\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n+        // Se der erro, garante que a opção padrão exista\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+\r\n+async function handleForgotPasswordRequest(e) {\r\n+    e.preventDefault();\r\n+    const email = document.getElementById('recoveryEmailInput').value;\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.requestPasswordReset(email);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n+        forgotPasswordModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleCnpjLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n+        currentLoggedInCompany = data.company;\r\n+        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAdminLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n+        localStorage.setItem('authToken', data.token);\r\n+        isAdminLoggedIn = true;\r\n+        showToast('Login de Administrador bem-sucedido!', 'success');\r\n+        await showAdminDashboard();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList();\r\n+}\r\n+\r\n+async function handleUserLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        // 1. Faz o login do utilizador para obter um token válido.\r\n+        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n+        localStorage.setItem('authToken', loginData.token);\r\n+\r\n+        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n+        const sessionData = await api.checkSession();\r\n+        currentLoggedInUser = sessionData.user;\r\n+        currentLoggedInCompany = sessionData.company;\r\n+\r\n+        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            // Se estiver tudo OK, entra na aplicação.\r\n+            await showMainApp();\r\n+        } else {\r\n+            // Caso contrário, direciona para o ecrã correto.\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a API para obter os detalhes\r\n+                const { company, users } = await api.getCompanyDetails(companyId);\r\n+                // Chama a nossa nova função para abrir e preencher o modal\r\n+                openCompanyDetailsModal(company, users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { users } = await api.getCompanyDetails(companyId);\r\n+                if (users.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                }\r\n+                const userIdToImpersonate = users[0]._id;\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+function handleCalculateInstallments(e) {\r\n+    e.preventDefault();\r\n+    const billName = document.getElementById('billName').value;\r\n+    const categoryId = billCategorySelect.value;\r\n+    const dueDate = document.getElementById('dueDate').value;\r\n+    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n+    const totalAmount = parseFloat(totalAmountValue);\r\n+    const installments = parseInt(document.getElementById('installments').value);\r\n+    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+    const description = document.getElementById('description').value;\r\n+    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n+\r\n+    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n+        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+    }\r\n+\r\n+    currentBill = { \r\n+        name: billName, \r\n+        description, \r\n+        parcels: [],\r\n+        category: categoryId || null\r\n+    };\r\n+    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+    installmentsList.innerHTML = '';\r\n+\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n+        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n+\r\n+        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n+        installmentsList.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n+                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n+            </div>\r\n+        `);\r\n+    }\r\n+\r\n+    // Adiciona os eventos para os novos inputs\r\n+    addEventListenersToInstallmentInputs();\r\n+    updatePreviewTotal();\r\n+    previewBillNameInput.value = currentBill.name;\r\n+    previewNfeNumber.textContent = 'N/A';\r\n+    addBillModal.classList.add('hidden');\r\n+    installmentsPreviewModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n+ */\r\n+function updatePreviewTotal() {\r\n+    if (!currentBill.parcels) return;\r\n+    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill);\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+        clearBillForm();\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+    const updatedParcelData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    const updatedBillData = {\r\n+        category: modalBillCategorySelect.value || null\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n+        await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n+\r\n+        showToast('Alterações salvas com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ * Verifica a sessão, o estado da assinatura e ações do URL.\r\n+ */\r\n+async function initializeApp() {\r\n+    // Define a data atual para o calendário\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+\r\n+    // 1. Verificamos se há uma ação no URL ANTES de qualquer outra coisa\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n+    const action = urlParams.get('action');\r\n+\r\n+    if (action === 'forgot_password') {\r\n+        // Se a ação for recuperar a senha, mostramos a tela de login de empresa\r\n+        // e depois abrimos o modal de recuperação por cima.\r\n+        showCnpjLogin(); // Mostra a tela de fundo para não ficar um ecrã preto\r\n+        forgotPasswordModal.classList.remove('hidden'); // Abre o modal\r\n+        \r\n+        // Esconde o ecrã de carregamento principal para não ficar por cima\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return; // Para a execução para não continuar com a verificação de login\r\n+    }\r\n+    \r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        showInitialLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+\r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n+\r\n+        // Define os cargos que o Proprietário pode atribuir.\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+        if (users && users.length > 0) {\r\n+            users.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+\r\n+                // Cria as opções do dropdown para Gerente e Funcionário\r\n+                const roleOptions = assignableRoles.map(role =>\r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n+                const roleHtml = isOwner\r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+\r\n+        // Adiciona o evento de clique aos botões de remover\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                // ... (a lógica de remover continua a mesma de antes)\r\n+            });\r\n+        });\r\n+\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n+\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n+                    e.target.value = originalRole; // Reverte a seleção visual\r\n+                    return;\r\n+\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n+ * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n+ * @param {Event} event - O evento 'change' do input do ficheiro.\r\n+ */\r\n+function handleNfeXmlUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) {\r\n+        return;\r\n+    }\r\n+\r\n+    const reader = new FileReader();\r\n+\r\n+    reader.onload = (e) => {\r\n+        try {\r\n+            const xmlString = e.target.result;\r\n+            const parser = new DOMParser();\r\n+            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n+\r\n+            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n+            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n+                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n+            }\r\n+\r\n+            // Define os nós principais para evitar procuras repetidas\r\n+            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n+            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+            const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n+\r\n+            if (duplicatas.length > 0) {\r\n+                // --- CENÁRIO 1: NFe com parcelas definidas ---\r\n+\r\n+                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: [] };\r\n+\r\n+                for (let i = 0; i < duplicatas.length; i++) {\r\n+                    const dup = duplicatas[i];\r\n+                    currentBill.parcels.push({\r\n+                        number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                        amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n+                        dueDate: getTagValue(\"dVenc\", dup),\r\n+                        barcode: ''\r\n+                    });\r\n+                }\r\n+\r\n+                installmentsList.innerHTML = '';\r\n+                currentBill.parcels.forEach((parcel, index) => {\r\n+                    installmentsList.insertAdjacentHTML('beforeend', `\r\n+                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                        </div>\r\n+                    `);\r\n+                });\r\n+\r\n+                addEventListenersToInstallmentInputs();\r\n+                updatePreviewTotal();\r\n+                previewBillNameInput.value = currentBill.name;\r\n+                previewNfeNumber.textContent = nfeNumber;\r\n+                installmentsPreviewModal.classList.remove('hidden');\r\n+\r\n+            } else {\r\n+                // --- CENÁRIO 2: NFe sem parcelas (à vista) ---\r\n+                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n+                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n+\r\n+                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2).replace('.', ',');\r\n+                if (vencimento) {\r\n+                    document.getElementById('dueDate').value = vencimento;\r\n+                }\r\n+\r\n+                addBillModal.classList.remove('hidden');\r\n+            }\r\n+\r\n+            showToast('Dados do XML carregados com sucesso!', 'success');\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            console.error(\"Erro ao processar XML:\", error);\r\n+        } finally {\r\n+            event.target.value = '';\r\n+        }\r\n+    };\r\n+\r\n+    reader.onerror = () => {\r\n+        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+    };\r\n+\r\n+    reader.readAsText(file);\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n+ */\r\n+function addEventListenersToInstallmentInputs() {\r\n+    // Listener para o campo de VALOR\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            }\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de DATA\r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de CÓDIGO DE BARRAS\r\n+    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        // Evento para guardar o valor quando é digitado\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].barcode = e.target.value;\r\n+            }\r\n+        });\r\n+\r\n+        input.addEventListener('keydown', (e) => {\r\n+            if (e.key === 'Enter') {\r\n+                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n+\r\n+                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n+                const nextIndex = currentIndex + 1;\r\n+                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n+\r\n+                if (nextInput) {\r\n+                    // Se houver um próximo campo de código de barras, foca nele.\r\n+                    nextInput.focus();\r\n+                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n+                } else {\r\n+                    // Se for o último campo, foca no botão de salvar.\r\n+                    document.getElementById('addToOrganizer').focus();\r\n+                }\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n+ */\r\n+function handleShowFullScreenBarcode() {\r\n+    const barcodeValue = modalBillBarcodeInput.value;\r\n+    if (!barcodeValue) {\r\n+        return showToast('Não há código de barras para mostrar.', 'info');\r\n+    }\r\n+\r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    if (!barcodeImageContainer) return;\r\n+\r\n+    // Limpa qualquer código de barras anterior\r\n+    barcodeImageContainer.innerHTML = '';\r\n+\r\n+    try {\r\n+        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n+        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n+\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n+        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n+            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n+            lineColor: \"#000000\",\r\n+            width: 2,\r\n+            height: 100,\r\n+            displayValue: true, // Mostra os números abaixo das barras\r\n+            fontSize: 18\r\n+        });\r\n+\r\n+        // Mostra o modal de ecrã inteiro\r\n+        barcodeFullScreenModal.classList.remove('hidden');\r\n+\r\n+    } catch (e) {\r\n+        console.error(\"Erro ao gerar código de barras:\", e);\r\n+        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n+    }\r\n+}\r\n+\r\n+async function handleAttachmentUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file || !selectedParcel) return;\r\n+\r\n+    // Cria um objeto FormData para enviar o ficheiro\r\n+    const formData = new FormData();\r\n+    formData.append('comprovante', file);\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Atualiza a UI para mostrar o link do novo anexo\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+\r\n+        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para remover um anexo de comprovativo.\r\n+ * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n+ */\r\n+async function handleRemoveAttachment() {\r\n+    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n+    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader(); // Mostra o ícone de carregamento\r\n+    try {\r\n+        // Chama a nossa função da API para apagar o anexo\r\n+        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n+\r\n+        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+\r\n+        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+\r\n+        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n+        await updateBillsOrganizer();\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n+ */\r\n+function applyFiltersAndSearch() {\r\n+    const searchTerm = searchInput.value.toLowerCase();\r\n+    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n+\r\n+    let filteredBoletos = userBoletos.filter(bill => {\r\n+        // Filtro de pesquisa\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) || \r\n+        (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+        if (!matchesSearch) return false;\r\n+\r\n+        // Filtro de categoria\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+        if (!matchesCategory) return false;\r\n+\r\n+        // Filtro de status\r\n+        if (activeStatusFilter === 'all') return true;\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        return bill.parcels.some(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeStatusFilter === 'paid') return parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            return false;\r\n+        });\r\n+    });\r\n+\r\n+    renderCalendar(filteredBoletos);\r\n+    updateMonthlySummary(filteredBoletos);\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário.\r\n+ */\r\n+function initializeDragAndDrop() {\r\n+    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n+\r\n+    dayCells.forEach(cell => {\r\n+        new Sortable(cell, {\r\n+            group: 'calendar-bills', // Permite mover cards entre células\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50', // Estilo do \"fantasma\" do card ao arrastar\r\n+\r\n+            // A função que é chamada QUANDO você solta um card\r\n+            onEnd: async function (evt) {\r\n+                const item = evt.item; // O card que foi arrastado\r\n+                const toCell = evt.to;   // A célula do dia onde ele foi solto\r\n+\r\n+                const boletoId = item.dataset.boletoId;\r\n+                const parcelId = item.dataset.parcelId;\r\n+                const newDate = toCell.dataset.date;\r\n+\r\n+                if (!boletoId || !parcelId || !newDate) return;\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    // Chamamos a nossa API para atualizar a data de vencimento\r\n+                    await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n+                    showToast('Data da parcela atualizada com sucesso!', 'success');\r\n+\r\n+                    // Atualizamos a aplicação inteira para refletir a mudança\r\n+                    await updateBillsOrganizer();\r\n+\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                    // Se der erro, atualizamos a interface para reverter a mudança visual\r\n+                    await updateBillsOrganizer();\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            },\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+    // Navegação entre ecrãs de login\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+\r\n+    // Submissão de formulários\r\n+    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n+    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+\r\n+\r\n+    // Ações na App Principal\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+    // Ações do Modal de Edição de Boleto\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+    // Navegação do Calendário\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+        if (currentMonth === 11) currentYear--;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+        if (currentMonth === 0) currentYear++;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    if (addCompanyCnpjInput) {\r\n+        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    if (openAddBillModalBtn) {\r\n+        openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+    }\r\n+\r\n+    const handleRedirectToHome = () => {\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    const handleFullLogoutAndRedirect = () => {\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    if (subscriptionLogoutBtn) {\r\n+        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+    }\r\n+\r\n+    if (blockedAccessLogoutBtn) {\r\n+        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+    }\r\n+\r\n+    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+    if (settingsBtn) {\r\n+        settingsBtn.addEventListener('click', (e) => {\r\n+            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+            settingsDropdown.classList.toggle('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    // Links dentro do menu dropdown\r\n+    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCompanyInfoModal();\r\n+    });\r\n+\r\n+    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openPermissionsModal();\r\n+    });\r\n+\r\n+    window.addEventListener('click', () => {\r\n+        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n+    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openManageUsersModal();\r\n+    });\r\n+\r\n+    // Botões do modal de gerir utilizadores\r\n+    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+    });\r\n+\r\n+    /**\r\n+     * Lida com o clique no botão de criar/renovar assinatura.\r\n+     */\r\n+    async function handleCreateSubscription() {\r\n+        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+        subscriptionActionBtn.disabled = true;\r\n+        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+        try {\r\n+            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+            const data = await api.createSubscriptionLink();\r\n+\r\n+            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+            if (data.init_point) {\r\n+                window.location.href = data.init_point;\r\n+            } else {\r\n+                throw new Error('Link de pagamento não recebido.');\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+            subscriptionActionBtn.disabled = false;\r\n+            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+        }\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão.\r\n+    if (subscriptionActionBtn) {\r\n+        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+    }\r\n+\r\n+    if (closePreviewModalBtn) {\r\n+        closePreviewModalBtn.addEventListener('click', () => {\r\n+            installmentsPreviewModal.classList.add('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    if (nfeXmlInput) {\r\n+        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+    }\r\n+\r\n+    if (previewBillNameInput) {\r\n+        previewBillNameInput.addEventListener('input', (e) => {\r\n+            if (currentBill) {\r\n+                currentBill.name = e.target.value;\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão\r\n+    if (showFullScreenBarcodeBtn) {\r\n+        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+    }\r\n+\r\n+    // Listener para o campo de pesquisa\r\n+    if (searchInput) {\r\n+        searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+    }\r\n+\r\n+    // Listeners para os botões de filtro\r\n+    if (filterButtons) {\r\n+        filterButtons.forEach(button => {\r\n+            button.addEventListener('click', (e) => {\r\n+                // Remove a classe 'active' de todos os botões\r\n+                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+                // Adiciona a classe 'active' apenas ao botão clicado\r\n+                e.currentTarget.classList.add('active');\r\n+                // Aplica o filtro\r\n+                applyFiltersAndSearch();\r\n+            });\r\n+        });\r\n+    }\r\n+\r\n+    if (forgotPasswordLink) {\r\n+        forgotPasswordLink.addEventListener('click', (e) => {\r\n+            e.preventDefault();\r\n+            forgotPasswordModal.classList.remove('hidden');\r\n+        });\r\n+    }\r\n+    if (closeForgotPasswordModal) {\r\n+        closeForgotPasswordModal.addEventListener('click', () => forgotPasswordModal.classList.add('hidden'));\r\n+    }\r\n+    if (forgotPasswordForm) {\r\n+        forgotPasswordForm.addEventListener('submit', handleForgotPasswordRequest);\r\n+    }\r\n+\r\n+    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCategoriesModal();\r\n+    });\r\n+\r\n+    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+    if (addCategoryForm) {\r\n+        addCategoryForm.addEventListener('submit', async (e) => {\r\n+            e.preventDefault();\r\n+            const name = newCategoryNameInput.value.trim();\r\n+            if (!name) return;\r\n+            try {\r\n+                await api.createCategory(name);\r\n+                newCategoryNameInput.value = '';\r\n+                openCategoriesModal(); // Recarrega a lista\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                openCategoriesModal();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                openCategoriesModal();\r\n+            }\r\n+        }\r\n+    });\r\n+\r\n+    if (categoryFilterSelect) {\r\n+        categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    // Inicia a aplicação\r\n+    initializeApp();\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752958032309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1952,9 +1952,10 @@\n             if (!name) return;\r\n             try {\r\n                 await api.createCategory(name);\r\n                 newCategoryNameInput.value = '';\r\n-                openCategoriesModal(); // Recarrega a lista\r\n+                await openCategoriesModal(); // Recarrega a lista do modal\r\n+                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n             }\r\n         });\r\n@@ -1966,19 +1967,21 @@\n \r\n         if (editBtn) {\r\n             const { id, name } = editBtn.dataset;\r\n             const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() !== name) {\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n                 await api.updateCategory(id, newName.trim());\r\n-                openCategoriesModal();\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA\r\n             }\r\n         }\r\n \r\n         if (deleteBtn) {\r\n             const { id } = deleteBtn.dataset;\r\n             if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n                 await api.deleteCategory(id);\r\n-                openCategoriesModal();\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA\r\n             }\r\n         }\r\n     });\r\n \r\n@@ -1990,1980 +1993,5 @@\n \r\n \r\n     // Inicia a aplicação\r\n     initializeApp();\r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let inactivityTimer;\r\n-\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-const cnpjInput = document.getElementById('cnpjInput');\r\n-const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-const userLoginScreen = document.getElementById('userLoginScreen');\r\n-const userLoginForm = document.getElementById('userLoginForm');\r\n-const welcomeUserText = document.getElementById('welcomeUserText');\r\n-const userInput = document.getElementById('userInput');\r\n-const userPasswordInput = document.getElementById('userPasswordInput');\r\n-const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const forgotPasswordLink = document.getElementById('forgotPasswordLink');\r\n-const forgotPasswordModal = document.getElementById('forgotPasswordModal');\r\n-const closeForgotPasswordModal = document.getElementById('closeForgotPasswordModal');\r\n-const forgotPasswordForm = document.getElementById('forgotPasswordForm');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n- * Por padrão, usa a lista completa de boletos do utilizador.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n- */\r\n-/**\r\n- * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n- */\r\n-function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-\r\n-    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n-\r\n-    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n-    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n-\r\n-    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n-\r\n-    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    // Atualiza os elementos HTML com os valores corretos\r\n-    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n-    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n-    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com uma lista específica de boletos.\r\n- * Por padrão, usa a lista completa de boletos do utilizador.\r\n- * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n- */\r\n-function renderCalendar(boletosToRender = userBoletos) {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-        \r\n-        // Adiciona a classe 'day-cell-droppable' para o SortableJS\r\n-        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-        \r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card-draggable')) return;\r\n-            openAddBillModal(e.currentTarget.dataset.date);\r\n-        });\r\n-\r\n-        // Usa a lista 'boletosToRender' que foi passada para a função\r\n-        boletosToRender.forEach(bill => {\r\n-            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                const parcelElement = document.createElement('div');\r\n-\r\n-                // Adiciona as classes e os atributos de dados para o drag-and-drop\r\n-                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n-                parcelElement.dataset.boletoId = bill._id;\r\n-                parcelElement.dataset.parcelId = parcel._id;\r\n-                \r\n-                // Gera o conteúdo do card com todas as informações\r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                    ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n-                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n-                `;\r\n-\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        });\r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-\r\n-    // Ativa a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n-    initializeDragAndDrop();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-async function openBillModal(bill, parcel) {\r\n-    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-\r\n-    // Preenche todos os campos do modal com os dados da parcela clicada\r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-    // Mostra o botão de gerar código de barras apenas se houver um código\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-\r\n-    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n-    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n-    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n-    if (bill.nfeNumber) {\r\n-        nfeNumberEl.textContent = bill.nfeNumber;\r\n-        nfeContainer.classList.remove('hidden');\r\n-    } else {\r\n-        nfeContainer.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Lógica dinâmica para a secção de anexos\r\n-    const attachmentContainer = document.getElementById('attachment-container');\r\n-    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n-\r\n-    if (parcel.attachmentUrl) {\r\n-        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n-        attachmentContainer.innerHTML = `\r\n-            <div class=\"flex items-center justify-between\">\r\n-                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n-                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n-                </a>\r\n-                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n-            </div>\r\n-        `;\r\n-        // Adiciona o evento de clique ao novo botão de remover\r\n-        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n-    } else {\r\n-        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-        // Adiciona o evento de 'change' ao novo input de upload\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-    }\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-        categories.forEach(cat => {\r\n-            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n-        });\r\n-        if (bill.category) {\r\n-            modalBillCategorySelect.value = bill.category._id;\r\n-        } else {\r\n-            modalBillCategorySelect.value = \"\";\r\n-        }\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    if (billForm) {\r\n-        billForm.reset();\r\n-    }\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Funções para mostrar os diferentes ecrãs da aplicação.\r\n- */\r\n-function showInitialLogin() {\r\n-    hideAllScreens();\r\n-    initialLoginScreen.classList.remove('hidden');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    currentLoggedInCompany = null;\r\n-    currentLoggedInUser = null;\r\n-    isAdminLoggedIn = false;\r\n-    loggedInViaAdmin = false;\r\n-}\r\n-\r\n-function showCnpjLogin() {\r\n-    hideAllScreens();\r\n-    cnpjLoginForm.reset();\r\n-    cnpjLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showAdminLogin() {\r\n-    hideAllScreens();\r\n-    adminLoginForm.reset();\r\n-    adminLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showUserLogin(companyName) {\r\n-    hideAllScreens();\r\n-    userLoginForm.reset();\r\n-    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-    userLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    mainAppContent.classList.remove('hidden');\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-    await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n- * @param {string} tagName - O nome da tag a ser procurada.\r\n- * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n- * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n- */\r\n-function getTagValue(tagName, parentElement) {\r\n-    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n-    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n-    return element?.textContent || '';\r\n-}\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- */\r\n-function openCompanyDetailsModal(company, users) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (users && users.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        users.forEach(user => {\r\n-            // Cria as opções do dropdown, marcando a atual como selecionada\r\n-            const roleOptions = roles.map(role =>\r\n-                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-            ).join('');\r\n-\r\n-            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona o evento para os botões \"Remover\"\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    if (password !== confirmPassword) {\r\n-        return showToast(\"As senhas não coincidem.\", \"error\");\r\n-    }\r\n-    // A verificação agora funciona para os dois casos\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.registerUser(username, password, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n-        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-\r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function openCategoriesModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        renderCategoryList(categories);\r\n-        categoriesModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function renderCategoryList(categories) {\r\n-    categoryListDiv.innerHTML = '';\r\n-    if (categories.length === 0) {\r\n-        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n-        return;\r\n-    }\r\n-    categories.forEach(category => {\r\n-        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n-                <span class=\"text-white\">${category.name}</span>\r\n-                <div>\r\n-                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n-                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n-                </div>\r\n-            </div>\r\n-        `);\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo boleto, buscando as categorias\r\n- * e opcionalmente pré-preenchendo a data.\r\n- * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n- */\r\n-async function openAddBillModal(preselectedDate = null) {\r\n-    clearBillForm();\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-        \r\n-        categories.forEach(category => {\r\n-            const option = document.createElement('option');\r\n-            option.value = category._id;\r\n-            option.textContent = category.name;\r\n-            billCategorySelect.appendChild(option);\r\n-        });\r\n-\r\n-        // Se uma data foi passada como parâmetro, nós a preenchemos\r\n-        if (preselectedDate) {\r\n-            document.getElementById('dueDate').value = preselectedDate;\r\n-        }\r\n-        \r\n-        addBillModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-\r\n-async function handleForgotPasswordRequest(e) {\r\n-    e.preventDefault();\r\n-    const email = document.getElementById('recoveryEmailInput').value;\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.requestPasswordReset(email);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n-        forgotPasswordModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleCnpjLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n-        currentLoggedInCompany = data.company;\r\n-        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAdminLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n-        localStorage.setItem('authToken', data.token);\r\n-        isAdminLoggedIn = true;\r\n-        showToast('Login de Administrador bem-sucedido!', 'success');\r\n-        await showAdminDashboard();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList();\r\n-}\r\n-\r\n-async function handleUserLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        // 1. Faz o login do utilizador para obter um token válido.\r\n-        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n-        localStorage.setItem('authToken', loginData.token);\r\n-\r\n-        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n-        const sessionData = await api.checkSession();\r\n-        currentLoggedInUser = sessionData.user;\r\n-        currentLoggedInCompany = sessionData.company;\r\n-\r\n-        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            // Se estiver tudo OK, entra na aplicação.\r\n-            await showMainApp();\r\n-        } else {\r\n-            // Caso contrário, direciona para o ecrã correto.\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a API para obter os detalhes\r\n-                const { company, users } = await api.getCompanyDetails(companyId);\r\n-                // Chama a nossa nova função para abrir e preencher o modal\r\n-                openCompanyDetailsModal(company, users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                const { users } = await api.getCompanyDetails(companyId);\r\n-                if (users.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n-                }\r\n-                const userIdToImpersonate = users[0]._id;\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-function handleCalculateInstallments(e) {\r\n-    e.preventDefault();\r\n-    const billName = document.getElementById('billName').value;\r\n-    const categoryId = billCategorySelect.value;\r\n-    const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n-    const totalAmount = parseFloat(totalAmountValue);\r\n-    const installments = parseInt(document.getElementById('installments').value);\r\n-    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-    const description = document.getElementById('description').value;\r\n-    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n-\r\n-    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n-        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-    }\r\n-\r\n-    currentBill = { \r\n-        name: billName, \r\n-        description, \r\n-        parcels: [],\r\n-        category: categoryId || null\r\n-    };\r\n-    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-    installmentsList.innerHTML = '';\r\n-\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n-        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n-\r\n-        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n-        installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n-                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n-            </div>\r\n-        `);\r\n-    }\r\n-\r\n-    // Adiciona os eventos para os novos inputs\r\n-    addEventListenersToInstallmentInputs();\r\n-    updatePreviewTotal();\r\n-    previewBillNameInput.value = currentBill.name;\r\n-    previewNfeNumber.textContent = 'N/A';\r\n-    addBillModal.classList.add('hidden');\r\n-    installmentsPreviewModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n- */\r\n-function updatePreviewTotal() {\r\n-    if (!currentBill.parcels) return;\r\n-    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill);\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-        clearBillForm();\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-    const updatedParcelData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    const updatedBillData = {\r\n-        category: modalBillCategorySelect.value || null\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n-        await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n-\r\n-        showToast('Alterações salvas com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- * Verifica a sessão, o estado da assinatura e ações do URL.\r\n- */\r\n-async function initializeApp() {\r\n-    // Define a data atual para o calendário\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-\r\n-    // 1. Verificamos se há uma ação no URL ANTES de qualquer outra coisa\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n-    const action = urlParams.get('action');\r\n-\r\n-    if (action === 'forgot_password') {\r\n-        // Se a ação for recuperar a senha, mostramos a tela de login de empresa\r\n-        // e depois abrimos o modal de recuperação por cima.\r\n-        showCnpjLogin(); // Mostra a tela de fundo para não ficar um ecrã preto\r\n-        forgotPasswordModal.classList.remove('hidden'); // Abre o modal\r\n-        \r\n-        // Esconde o ecrã de carregamento principal para não ficar por cima\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return; // Para a execução para não continuar com a verificação de login\r\n-    }\r\n-    \r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        showInitialLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-\r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n-\r\n-        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n-\r\n-        // Define os cargos que o Proprietário pode atribuir.\r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        if (users && users.length > 0) {\r\n-            users.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-\r\n-                // Cria as opções do dropdown para Gerente e Funcionário\r\n-                const roleOptions = assignableRoles.map(role =>\r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n-                const roleHtml = isOwner\r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-\r\n-        // Adiciona o evento de clique aos botões de remover\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                // ... (a lógica de remover continua a mesma de antes)\r\n-            });\r\n-        });\r\n-\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n-\r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n-                    e.target.value = originalRole; // Reverte a seleção visual\r\n-                    return;\r\n-\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n- * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n- * @param {Event} event - O evento 'change' do input do ficheiro.\r\n- */\r\n-function handleNfeXmlUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) {\r\n-        return;\r\n-    }\r\n-\r\n-    const reader = new FileReader();\r\n-\r\n-    reader.onload = (e) => {\r\n-        try {\r\n-            const xmlString = e.target.result;\r\n-            const parser = new DOMParser();\r\n-            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-\r\n-            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n-            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n-                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n-            }\r\n-\r\n-            // Define os nós principais para evitar procuras repetidas\r\n-            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n-            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n-            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n-            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n-            const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n-\r\n-            if (duplicatas.length > 0) {\r\n-                // --- CENÁRIO 1: NFe com parcelas definidas ---\r\n-\r\n-                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: [] };\r\n-\r\n-                for (let i = 0; i < duplicatas.length; i++) {\r\n-                    const dup = duplicatas[i];\r\n-                    currentBill.parcels.push({\r\n-                        number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n-                        amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n-                        dueDate: getTagValue(\"dVenc\", dup),\r\n-                        barcode: ''\r\n-                    });\r\n-                }\r\n-\r\n-                installmentsList.innerHTML = '';\r\n-                currentBill.parcels.forEach((parcel, index) => {\r\n-                    installmentsList.insertAdjacentHTML('beforeend', `\r\n-                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                        </div>\r\n-                    `);\r\n-                });\r\n-\r\n-                addEventListenersToInstallmentInputs();\r\n-                updatePreviewTotal();\r\n-                previewBillNameInput.value = currentBill.name;\r\n-                previewNfeNumber.textContent = nfeNumber;\r\n-                installmentsPreviewModal.classList.remove('hidden');\r\n-\r\n-            } else {\r\n-                // --- CENÁRIO 2: NFe sem parcelas (à vista) ---\r\n-                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n-                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n-\r\n-                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n-                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2).replace('.', ',');\r\n-                if (vencimento) {\r\n-                    document.getElementById('dueDate').value = vencimento;\r\n-                }\r\n-\r\n-                addBillModal.classList.remove('hidden');\r\n-            }\r\n-\r\n-            showToast('Dados do XML carregados com sucesso!', 'success');\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            console.error(\"Erro ao processar XML:\", error);\r\n-        } finally {\r\n-            event.target.value = '';\r\n-        }\r\n-    };\r\n-\r\n-    reader.onerror = () => {\r\n-        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n-    };\r\n-\r\n-    reader.readAsText(file);\r\n-}\r\n-\r\n-/**\r\n- * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n- */\r\n-function addEventListenersToInstallmentInputs() {\r\n-    // Listener para o campo de VALOR\r\n-    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n-            }\r\n-            updatePreviewTotal();\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de DATA\r\n-    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-        input.addEventListener('change', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de CÓDIGO DE BARRAS\r\n-    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n-        // Evento para guardar o valor quando é digitado\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].barcode = e.target.value;\r\n-            }\r\n-        });\r\n-\r\n-        input.addEventListener('keydown', (e) => {\r\n-            if (e.key === 'Enter') {\r\n-                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n-\r\n-                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n-                const nextIndex = currentIndex + 1;\r\n-                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n-\r\n-                if (nextInput) {\r\n-                    // Se houver um próximo campo de código de barras, foca nele.\r\n-                    nextInput.focus();\r\n-                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n-                } else {\r\n-                    // Se for o último campo, foca no botão de salvar.\r\n-                    document.getElementById('addToOrganizer').focus();\r\n-                }\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n- */\r\n-function handleShowFullScreenBarcode() {\r\n-    const barcodeValue = modalBillBarcodeInput.value;\r\n-    if (!barcodeValue) {\r\n-        return showToast('Não há código de barras para mostrar.', 'info');\r\n-    }\r\n-\r\n-    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n-    if (!barcodeImageContainer) return;\r\n-\r\n-    // Limpa qualquer código de barras anterior\r\n-    barcodeImageContainer.innerHTML = '';\r\n-\r\n-    try {\r\n-        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n-        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n-\r\n-        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n-        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n-            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n-            lineColor: \"#000000\",\r\n-            width: 2,\r\n-            height: 100,\r\n-            displayValue: true, // Mostra os números abaixo das barras\r\n-            fontSize: 18\r\n-        });\r\n-\r\n-        // Mostra o modal de ecrã inteiro\r\n-        barcodeFullScreenModal.classList.remove('hidden');\r\n-\r\n-    } catch (e) {\r\n-        console.error(\"Erro ao gerar código de barras:\", e);\r\n-        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n-    }\r\n-}\r\n-\r\n-async function handleAttachmentUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file || !selectedParcel) return;\r\n-\r\n-    // Cria um objeto FormData para enviar o ficheiro\r\n-    const formData = new FormData();\r\n-    formData.append('comprovante', file);\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Atualiza a UI para mostrar o link do novo anexo\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n-\r\n-        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para remover um anexo de comprovativo.\r\n- * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n- */\r\n-async function handleRemoveAttachment() {\r\n-    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n-    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader(); // Mostra o ícone de carregamento\r\n-    try {\r\n-        // Chama a nossa função da API para apagar o anexo\r\n-        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n-\r\n-        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-\r\n-        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-\r\n-        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n-        await updateBillsOrganizer();\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n- */\r\n-function applyFiltersAndSearch() {\r\n-    const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n-\r\n-    // Começa com todos os boletos e vai aplicando os filtros\r\n-    let filteredBoletos = userBoletos.filter(bill => {\r\n-        // Filtro de pesquisa (procura no nome do boleto e no número da NFe)\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n-            (bill.nfeNumber && bill.nfeNumber.toLowerCase().includes(searchTerm));\r\n-        if (!matchesSearch) return false;\r\n-\r\n-        // Filtro de status\r\n-        if (activeFilter === 'all') return true;\r\n-\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-\r\n-        // Verifica se QUALQUER parcela do boleto corresponde ao filtro\r\n-        return bill.parcels.some(parcel => {\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            if (activeFilter === 'paid') return parcel.paid;\r\n-            if (activeFilter === 'unpaid') return !parcel.paid;\r\n-            if (activeFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n-            return false;\r\n-        });\r\n-    });\r\n-\r\n-    // ATENÇÃO: Precisamos de uma nova função para renderizar o calendário com os dados filtrados.\r\n-    // Vamos chamar a função original por agora, mas idealmente criaríamos uma nova.\r\n-    renderCalendar(filteredBoletos);\r\n-    updateMonthlySummary(filteredBoletos); // Opcional: atualizar resumos com base no filtro\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário.\r\n- */\r\n-function initializeDragAndDrop() {\r\n-    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n-\r\n-    dayCells.forEach(cell => {\r\n-        new Sortable(cell, {\r\n-            group: 'calendar-bills', // Permite mover cards entre células\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50', // Estilo do \"fantasma\" do card ao arrastar\r\n-\r\n-            // A função que é chamada QUANDO você solta um card\r\n-            onEnd: async function (evt) {\r\n-                const item = evt.item; // O card que foi arrastado\r\n-                const toCell = evt.to;   // A célula do dia onde ele foi solto\r\n-\r\n-                const boletoId = item.dataset.boletoId;\r\n-                const parcelId = item.dataset.parcelId;\r\n-                const newDate = toCell.dataset.date;\r\n-\r\n-                if (!boletoId || !parcelId || !newDate) return;\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    // Chamamos a nossa API para atualizar a data de vencimento\r\n-                    await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n-                    showToast('Data da parcela atualizada com sucesso!', 'success');\r\n-\r\n-                    // Atualizamos a aplicação inteira para refletir a mudança\r\n-                    await updateBillsOrganizer();\r\n-\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                    // Se der erro, atualizamos a interface para reverter a mudança visual\r\n-                    await updateBillsOrganizer();\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            },\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-    // Navegação entre ecrãs de login\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-\r\n-    // Submissão de formulários\r\n-    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n-    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-\r\n-\r\n-    // Ações na App Principal\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-    // Ações do Modal de Edição de Boleto\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-    // Navegação do Calendário\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-        if (currentMonth === 11) currentYear--;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-        if (currentMonth === 0) currentYear++;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    if (addCompanyCnpjInput) {\r\n-        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    if (openAddBillModalBtn) {\r\n-        openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-    }\r\n-\r\n-    const handleRedirectToHome = () => {\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    const handleFullLogoutAndRedirect = () => {\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    if (subscriptionLogoutBtn) {\r\n-        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-    }\r\n-\r\n-    if (blockedAccessLogoutBtn) {\r\n-        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n-    }\r\n-\r\n-    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-    if (settingsBtn) {\r\n-        settingsBtn.addEventListener('click', (e) => {\r\n-            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-            settingsDropdown.classList.toggle('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    // Links dentro do menu dropdown\r\n-    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCompanyInfoModal();\r\n-    });\r\n-\r\n-    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openPermissionsModal();\r\n-    });\r\n-\r\n-    window.addEventListener('click', () => {\r\n-        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n-\r\n-    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openManageUsersModal();\r\n-    });\r\n-\r\n-    // Botões do modal de gerir utilizadores\r\n-    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-    });\r\n-\r\n-    /**\r\n-     * Lida com o clique no botão de criar/renovar assinatura.\r\n-     */\r\n-    async function handleCreateSubscription() {\r\n-        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-        subscriptionActionBtn.disabled = true;\r\n-        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-        try {\r\n-            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-            const data = await api.createSubscriptionLink();\r\n-\r\n-            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-            if (data.init_point) {\r\n-                window.location.href = data.init_point;\r\n-            } else {\r\n-                throw new Error('Link de pagamento não recebido.');\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-            subscriptionActionBtn.disabled = false;\r\n-            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-        }\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão.\r\n-    if (subscriptionActionBtn) {\r\n-        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-    }\r\n-\r\n-    if (closePreviewModalBtn) {\r\n-        closePreviewModalBtn.addEventListener('click', () => {\r\n-            installmentsPreviewModal.classList.add('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    if (nfeXmlInput) {\r\n-        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-    }\r\n-\r\n-    if (previewBillNameInput) {\r\n-        previewBillNameInput.addEventListener('input', (e) => {\r\n-            if (currentBill) {\r\n-                currentBill.name = e.target.value;\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão\r\n-    if (showFullScreenBarcodeBtn) {\r\n-        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-    }\r\n-\r\n-    // Listener para o campo de pesquisa\r\n-    if (searchInput) {\r\n-        searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-    }\r\n-\r\n-    // Listeners para os botões de filtro\r\n-    if (filterButtons) {\r\n-        filterButtons.forEach(button => {\r\n-            button.addEventListener('click', (e) => {\r\n-                // Remove a classe 'active' de todos os botões\r\n-                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-                // Adiciona a classe 'active' apenas ao botão clicado\r\n-                e.currentTarget.classList.add('active');\r\n-                // Aplica o filtro\r\n-                applyFiltersAndSearch();\r\n-            });\r\n-        });\r\n-    }\r\n-\r\n-    if (forgotPasswordLink) {\r\n-        forgotPasswordLink.addEventListener('click', (e) => {\r\n-            e.preventDefault();\r\n-            forgotPasswordModal.classList.remove('hidden');\r\n-        });\r\n-    }\r\n-    if (closeForgotPasswordModal) {\r\n-        closeForgotPasswordModal.addEventListener('click', () => forgotPasswordModal.classList.add('hidden'));\r\n-    }\r\n-    if (forgotPasswordForm) {\r\n-        forgotPasswordForm.addEventListener('submit', handleForgotPasswordRequest);\r\n-    }\r\n-\r\n-    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCategoriesModal();\r\n-    });\r\n-\r\n-    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-    if (addCategoryForm) {\r\n-        addCategoryForm.addEventListener('submit', async (e) => {\r\n-            e.preventDefault();\r\n-            const name = newCategoryNameInput.value.trim();\r\n-            if (!name) return;\r\n-            try {\r\n-                await api.createCategory(name);\r\n-                newCategoryNameInput.value = '';\r\n-                openCategoriesModal(); // Recarrega a lista\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                openCategoriesModal();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                openCategoriesModal();\r\n-            }\r\n-        }\r\n-    });\r\n-\r\n-\r\n-\r\n-\r\n-    // Inicia a aplicação\r\n-    initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752958076134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1970,18 +1970,18 @@\n             const newName = prompt(\"Editar nome da categoria:\", name);\r\n             if (newName && newName.trim() && newName.trim() !== name) {\r\n                 await api.updateCategory(id, newName.trim());\r\n                 await openCategoriesModal();\r\n-                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA\r\n+                await populateCategoryFilter();\r\n             }\r\n         }\r\n \r\n         if (deleteBtn) {\r\n             const { id } = deleteBtn.dataset;\r\n             if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n                 await api.deleteCategory(id);\r\n                 await openCategoriesModal();\r\n-                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA\r\n+                await populateCategoryFilter();\r\n             }\r\n         }\r\n     });\r\n \r\n"
                },
                {
                    "date": 1752962251674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1414,27 +1414,49 @@\n             // Define os nós principais para evitar procuras repetidas\r\n             const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n             const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n             const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n+            \r\n             const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n             const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n-            const duplicatas = xmlDoc.getElementsByTagName(\"dup\");\r\n+            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n \r\n+            let parcelsData = [];\r\n+\r\n             if (duplicatas.length > 0) {\r\n-                // --- CENÁRIO 1: NFe com parcelas definidas ---\r\n+                // --- CENÁRIO 1: Encontrou as tags <dup> (padrão) ---\r\n+                parcelsData = duplicatas.map((dup, i) => ({\r\n+                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n+                    dueDate: getTagValue(\"dVenc\", dup)\r\n+                }));\r\n+            } else {\r\n+                // --- CENÁRIO 2: Procura por informações de cobrança no texto ---\r\n+                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n+                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n+                \r\n+                if (cobrancaMatch && cobrancaMatch[1]) {\r\n+                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n+                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n+                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n+                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n \r\n-                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: [] };\r\n-\r\n-                for (let i = 0; i < duplicatas.length; i++) {\r\n-                    const dup = duplicatas[i];\r\n-                    currentBill.parcels.push({\r\n-                        number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n-                        amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n-                        dueDate: getTagValue(\"dVenc\", dup),\r\n-                        barcode: ''\r\n+                    parcelsData = dias.map((dia, i) => {\r\n+                        const vencimento = new Date(dataEmissao);\r\n+                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n+                        return {\r\n+                            number: i + 1,\r\n+                            amount: parcelAmount,\r\n+                            dueDate: vencimento.toISOString().split('T')[0]\r\n+                        };\r\n                     });\r\n                 }\r\n+            }\r\n \r\n+            if (parcelsData.length > 0) {\r\n+                // --- Se encontrou parcelas (por qualquer método), vai para a pré-visualização ---\r\n+                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: parcelsData };\r\n+                \r\n                 installmentsList.innerHTML = '';\r\n                 currentBill.parcels.forEach((parcel, index) => {\r\n                     installmentsList.insertAdjacentHTML('beforeend', `\r\n                         <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n@@ -1444,41 +1466,42 @@\n                             <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n                         </div>\r\n                     `);\r\n                 });\r\n-\r\n+                \r\n                 addEventListenersToInstallmentInputs();\r\n                 updatePreviewTotal();\r\n                 previewBillNameInput.value = currentBill.name;\r\n                 previewNfeNumber.textContent = nfeNumber;\r\n                 installmentsPreviewModal.classList.remove('hidden');\r\n-\r\n+                \r\n             } else {\r\n-                // --- CENÁRIO 2: NFe sem parcelas (à vista) ---\r\n+                // --- CENÁRIO 3: Não encontrou parcelas, preenche o formulário manual ---\r\n                 const valorNFe = getTagValue(\"vNF\", totalNode);\r\n                 const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n \r\n                 document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n-                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2).replace('.', ',');\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n                 if (vencimento) {\r\n                     document.getElementById('dueDate').value = vencimento;\r\n                 }\r\n-\r\n+                \r\n                 addBillModal.classList.remove('hidden');\r\n             }\r\n \r\n             showToast('Dados do XML carregados com sucesso!', 'success');\r\n-\r\n+            \r\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n             console.error(\"Erro ao processar XML:\", error);\r\n         } finally {\r\n+            // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n             event.target.value = '';\r\n         }\r\n     };\r\n \r\n     reader.onerror = () => {\r\n-        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+         showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n     };\r\n \r\n     reader.readAsText(file);\r\n }\r\n"
                },
                {
                    "date": 1753098854146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2021 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let inactivityTimer;\r\n+\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+const cnpjInput = document.getElementById('cnpjInput');\r\n+const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+const userLoginScreen = document.getElementById('userLoginScreen');\r\n+const userLoginForm = document.getElementById('userLoginForm');\r\n+const welcomeUserText = document.getElementById('welcomeUserText');\r\n+const userInput = document.getElementById('userInput');\r\n+const userPasswordInput = document.getElementById('userPasswordInput');\r\n+const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const forgotPasswordLink = document.getElementById('forgotPasswordLink');\r\n+const forgotPasswordModal = document.getElementById('forgotPasswordModal');\r\n+const closeForgotPasswordModal = document.getElementById('closeForgotPasswordModal');\r\n+const forgotPasswordForm = document.getElementById('forgotPasswordForm');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n+ * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n+ */\r\n+/**\r\n+ * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n+ */\r\n+function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+\r\n+    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n+\r\n+    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n+    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n+\r\n+    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n+\r\n+    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    // Atualiza os elementos HTML com os valores corretos\r\n+    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n+    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n+    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com uma lista específica de boletos.\r\n+ * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n+ */\r\n+function renderCalendar(boletosToRender = userBoletos) {\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+\r\n+        // Adiciona a classe 'day-cell-droppable' para o SortableJS\r\n+        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+\r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card-draggable')) return;\r\n+            openAddBillModal(e.currentTarget.dataset.date);\r\n+        });\r\n+\r\n+        // Usa a lista 'boletosToRender' que foi passada para a função\r\n+        boletosToRender.forEach(bill => {\r\n+            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                const parcelElement = document.createElement('div');\r\n+\r\n+                // Adiciona as classes e os atributos de dados para o drag-and-drop\r\n+                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n+                parcelElement.dataset.boletoId = bill._id;\r\n+                parcelElement.dataset.parcelId = parcel._id;\r\n+\r\n+                // Gera o conteúdo do card com todas as informações\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n+                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                    ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n+                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n+                `;\r\n+\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        });\r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+\r\n+    // Ativa a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n+    initializeDragAndDrop();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+async function openBillModal(bill, parcel) {\r\n+    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+\r\n+    // Preenche todos os campos do modal com os dados da parcela clicada\r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+    // Mostra o botão de gerar código de barras apenas se houver um código\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+\r\n+    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n+    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n+    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n+    if (bill.nfeNumber) {\r\n+        nfeNumberEl.textContent = bill.nfeNumber;\r\n+        nfeContainer.classList.remove('hidden');\r\n+    } else {\r\n+        nfeContainer.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Lógica dinâmica para a secção de anexos\r\n+    const attachmentContainer = document.getElementById('attachment-container');\r\n+    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n+\r\n+    if (parcel.attachmentUrl) {\r\n+        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n+        attachmentContainer.innerHTML = `\r\n+            <div class=\"flex items-center justify-between\">\r\n+                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n+                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n+                </a>\r\n+                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n+            </div>\r\n+        `;\r\n+        // Adiciona o evento de clique ao novo botão de remover\r\n+        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n+    } else {\r\n+        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        // Adiciona o evento de 'change' ao novo input de upload\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+    }\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        categories.forEach(cat => {\r\n+            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n+        });\r\n+        if (bill.category) {\r\n+            modalBillCategorySelect.value = bill.category._id;\r\n+        } else {\r\n+            modalBillCategorySelect.value = \"\";\r\n+        }\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    if (billForm) {\r\n+        billForm.reset();\r\n+    }\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        totalBillsSpan.textContent = totalParcels;\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Funções para mostrar os diferentes ecrãs da aplicação.\r\n+ */\r\n+function showInitialLogin() {\r\n+    hideAllScreens();\r\n+    initialLoginScreen.classList.remove('hidden');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    currentLoggedInCompany = null;\r\n+    currentLoggedInUser = null;\r\n+    isAdminLoggedIn = false;\r\n+    loggedInViaAdmin = false;\r\n+}\r\n+\r\n+function showCnpjLogin() {\r\n+    hideAllScreens();\r\n+    cnpjLoginForm.reset();\r\n+    cnpjLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showAdminLogin() {\r\n+    hideAllScreens();\r\n+    adminLoginForm.reset();\r\n+    adminLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showUserLogin(companyName) {\r\n+    hideAllScreens();\r\n+    userLoginForm.reset();\r\n+    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+    userLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    mainAppContent.classList.remove('hidden');\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+    await populateCategoryFilter();\r\n+    await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n+ * @param {string} tagName - O nome da tag a ser procurada.\r\n+ * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n+ * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n+ */\r\n+function getTagValue(tagName, parentElement) {\r\n+    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n+    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n+    return element?.textContent || '';\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ */\r\n+function openCompanyDetailsModal(company, users) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (users && users.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        users.forEach(user => {\r\n+            // Cria as opções do dropdown, marcando a atual como selecionada\r\n+            const roleOptions = roles.map(role =>\r\n+                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+            ).join('');\r\n+\r\n+            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona o evento para os botões \"Remover\"\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    if (password !== confirmPassword) {\r\n+        return showToast(\"As senhas não coincidem.\", \"error\");\r\n+    }\r\n+    // A verificação agora funciona para os dois casos\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.registerUser(username, password, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n+        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+\r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function openCategoriesModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        renderCategoryList(categories);\r\n+        categoriesModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function renderCategoryList(categories) {\r\n+    categoryListDiv.innerHTML = '';\r\n+    if (categories.length === 0) {\r\n+        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n+        return;\r\n+    }\r\n+    categories.forEach(category => {\r\n+        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n+                <span class=\"text-white\">${category.name}</span>\r\n+                <div>\r\n+                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n+                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                </div>\r\n+            </div>\r\n+        `);\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo boleto, buscando as categorias\r\n+ * e opcionalmente pré-preenchendo a data.\r\n+ * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n+ */\r\n+async function openAddBillModal(preselectedDate = null) {\r\n+    clearBillForm();\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+\r\n+        categories.forEach(category => {\r\n+            const option = document.createElement('option');\r\n+            option.value = category._id;\r\n+            option.textContent = category.name;\r\n+            billCategorySelect.appendChild(option);\r\n+        });\r\n+\r\n+        // Se uma data foi passada como parâmetro, nós a preenchemos\r\n+        if (preselectedDate) {\r\n+            document.getElementById('dueDate').value = preselectedDate;\r\n+        }\r\n+\r\n+        addBillModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function populateCategoryFilter() {\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n+        // Se der erro, garante que a opção padrão exista\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+\r\n+async function handleForgotPasswordRequest(e) {\r\n+    e.preventDefault();\r\n+    const email = document.getElementById('recoveryEmailInput').value;\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.requestPasswordReset(email);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n+        forgotPasswordModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleCnpjLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n+        currentLoggedInCompany = data.company;\r\n+        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAdminLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n+        localStorage.setItem('authToken', data.token);\r\n+        isAdminLoggedIn = true;\r\n+        showToast('Login de Administrador bem-sucedido!', 'success');\r\n+        await showAdminDashboard();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList();\r\n+}\r\n+\r\n+async function handleUserLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        // 1. Faz o login do utilizador para obter um token válido.\r\n+        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n+        localStorage.setItem('authToken', loginData.token);\r\n+\r\n+        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n+        const sessionData = await api.checkSession();\r\n+        currentLoggedInUser = sessionData.user;\r\n+        currentLoggedInCompany = sessionData.company;\r\n+\r\n+        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            // Se estiver tudo OK, entra na aplicação.\r\n+            await showMainApp();\r\n+        } else {\r\n+            // Caso contrário, direciona para o ecrã correto.\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a API para obter os detalhes\r\n+                const { company, users } = await api.getCompanyDetails(companyId);\r\n+                // Chama a nossa nova função para abrir e preencher o modal\r\n+                openCompanyDetailsModal(company, users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { users } = await api.getCompanyDetails(companyId);\r\n+                if (users.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                }\r\n+                const userIdToImpersonate = users[0]._id;\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+function handleCalculateInstallments(e) {\r\n+    e.preventDefault();\r\n+    const billName = document.getElementById('billName').value;\r\n+    const categoryId = billCategorySelect.value;\r\n+    const dueDate = document.getElementById('dueDate').value;\r\n+    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n+    const totalAmount = parseFloat(totalAmountValue);\r\n+    const installments = parseInt(document.getElementById('installments').value);\r\n+    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+    const description = document.getElementById('description').value;\r\n+    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n+\r\n+    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n+        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+    }\r\n+\r\n+    currentBill = {\r\n+        name: billName,\r\n+        description,\r\n+        parcels: [],\r\n+        category: categoryId || null\r\n+    };\r\n+    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+    installmentsList.innerHTML = '';\r\n+\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n+        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n+\r\n+        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n+        installmentsList.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n+                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n+            </div>\r\n+        `);\r\n+    }\r\n+\r\n+    // Adiciona os eventos para os novos inputs\r\n+    addEventListenersToInstallmentInputs();\r\n+    updatePreviewTotal();\r\n+    previewBillNameInput.value = currentBill.name;\r\n+    previewNfeNumber.textContent = 'N/A';\r\n+    addBillModal.classList.add('hidden');\r\n+    installmentsPreviewModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n+ */\r\n+function updatePreviewTotal() {\r\n+    if (!currentBill.parcels) return;\r\n+    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill);\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+        clearBillForm();\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+    const updatedParcelData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    const updatedBillData = {\r\n+        category: modalBillCategorySelect.value || null\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n+        await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n+\r\n+        showToast('Alterações salvas com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ * Verifica a sessão, o estado da assinatura e ações do URL.\r\n+ */\r\n+async function initializeApp() {\r\n+    // Define a data atual para o calendário\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+\r\n+    // 1. Verificamos se há uma ação no URL ANTES de qualquer outra coisa\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n+    const action = urlParams.get('action');\r\n+\r\n+    if (action === 'forgot_password') {\r\n+        // Se a ação for recuperar a senha, mostramos a tela de login de empresa\r\n+        // e depois abrimos o modal de recuperação por cima.\r\n+        showCnpjLogin(); // Mostra a tela de fundo para não ficar um ecrã preto\r\n+        forgotPasswordModal.classList.remove('hidden'); // Abre o modal\r\n+\r\n+        // Esconde o ecrã de carregamento principal para não ficar por cima\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return; // Para a execução para não continuar com a verificação de login\r\n+    }\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        showInitialLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+\r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n+\r\n+        // Define os cargos que o Proprietário pode atribuir.\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+        if (users && users.length > 0) {\r\n+            users.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+\r\n+                // Cria as opções do dropdown para Gerente e Funcionário\r\n+                const roleOptions = assignableRoles.map(role =>\r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n+                const roleHtml = isOwner\r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+\r\n+        // Adiciona o evento de clique aos botões de remover\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                // ... (a lógica de remover continua a mesma de antes)\r\n+            });\r\n+        });\r\n+\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n+\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n+                    e.target.value = originalRole; // Reverte a seleção visual\r\n+                    return;\r\n+\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n+ * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n+ * @param {Event} event - O evento 'change' do input do ficheiro.\r\n+ */\r\n+function handleNfeXmlUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) {\r\n+        return;\r\n+    }\r\n+\r\n+    const reader = new FileReader();\r\n+\r\n+    reader.onload = (e) => {\r\n+        try {\r\n+            const xmlString = e.target.result;\r\n+            const parser = new DOMParser();\r\n+            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n+\r\n+            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n+            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n+                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n+            }\r\n+\r\n+            // Define os nós principais para evitar procuras repetidas\r\n+            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n+            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n+\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n+\r\n+            let parcelsData = [];\r\n+\r\n+            if (duplicatas.length > 0) {\r\n+                // --- CENÁRIO 1: Encontrou as tags <dup> (padrão) ---\r\n+                parcelsData = duplicatas.map((dup, i) => ({\r\n+                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n+                    dueDate: getTagValue(\"dVenc\", dup)\r\n+                }));\r\n+            } else {\r\n+                // --- CENÁRIO 2: Procura por informações de cobrança no texto ---\r\n+                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n+                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n+\r\n+                if (cobrancaMatch && cobrancaMatch[1]) {\r\n+                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n+                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n+                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n+                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n+\r\n+                    parcelsData = dias.map((dia, i) => {\r\n+                        const vencimento = new Date(dataEmissao);\r\n+                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n+                        return {\r\n+                            number: i + 1,\r\n+                            amount: parcelAmount,\r\n+                            dueDate: vencimento.toISOString().split('T')[0]\r\n+                        };\r\n+                    });\r\n+                }\r\n+            }\r\n+\r\n+            if (parcelsData.length > 0) {\r\n+                // --- Se encontrou parcelas (por qualquer método), vai para a pré-visualização ---\r\n+                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: parcelsData };\r\n+\r\n+                installmentsList.innerHTML = '';\r\n+                currentBill.parcels.forEach((parcel, index) => {\r\n+                    installmentsList.insertAdjacentHTML('beforeend', `\r\n+                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                        </div>\r\n+                    `);\r\n+                });\r\n+\r\n+                addEventListenersToInstallmentInputs();\r\n+                updatePreviewTotal();\r\n+                previewBillNameInput.value = currentBill.name;\r\n+                previewNfeNumber.textContent = nfeNumber;\r\n+                installmentsPreviewModal.classList.remove('hidden');\r\n+\r\n+            } else {\r\n+                // --- CENÁRIO 3: Não encontrou parcelas, preenche o formulário manual ---\r\n+                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n+                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n+\r\n+                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n+                if (vencimento) {\r\n+                    document.getElementById('dueDate').value = vencimento;\r\n+                }\r\n+\r\n+                addBillModal.classList.remove('hidden');\r\n+            }\r\n+\r\n+            showToast('Dados do XML carregados com sucesso!', 'success');\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            console.error(\"Erro ao processar XML:\", error);\r\n+        } finally {\r\n+            // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n+            event.target.value = '';\r\n+        }\r\n+    };\r\n+\r\n+    reader.onerror = () => {\r\n+        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+    };\r\n+\r\n+    reader.readAsText(file);\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n+ */\r\n+function addEventListenersToInstallmentInputs() {\r\n+    // Listener para o campo de VALOR\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            }\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de DATA\r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de CÓDIGO DE BARRAS\r\n+    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        // Evento para guardar o valor quando é digitado\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].barcode = e.target.value;\r\n+            }\r\n+        });\r\n+\r\n+        input.addEventListener('keydown', (e) => {\r\n+            if (e.key === 'Enter') {\r\n+                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n+\r\n+                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n+                const nextIndex = currentIndex + 1;\r\n+                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n+\r\n+                if (nextInput) {\r\n+                    // Se houver um próximo campo de código de barras, foca nele.\r\n+                    nextInput.focus();\r\n+                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n+                } else {\r\n+                    // Se for o último campo, foca no botão de salvar.\r\n+                    document.getElementById('addToOrganizer').focus();\r\n+                }\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n+ */\r\n+function handleShowFullScreenBarcode() {\r\n+    const barcodeValue = modalBillBarcodeInput.value;\r\n+    if (!barcodeValue) {\r\n+        return showToast('Não há código de barras para mostrar.', 'info');\r\n+    }\r\n+\r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    if (!barcodeImageContainer) return;\r\n+\r\n+    // Limpa qualquer código de barras anterior\r\n+    barcodeImageContainer.innerHTML = '';\r\n+\r\n+    try {\r\n+        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n+        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n+\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n+        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n+            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n+            lineColor: \"#000000\",\r\n+            width: 2,\r\n+            height: 100,\r\n+            displayValue: true, // Mostra os números abaixo das barras\r\n+            fontSize: 18\r\n+        });\r\n+\r\n+        // Mostra o modal de ecrã inteiro\r\n+        barcodeFullScreenModal.classList.remove('hidden');\r\n+\r\n+    } catch (e) {\r\n+        console.error(\"Erro ao gerar código de barras:\", e);\r\n+        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n+    }\r\n+}\r\n+\r\n+async function handleAttachmentUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file || !selectedParcel) return;\r\n+\r\n+    // Cria um objeto FormData para enviar o ficheiro\r\n+    const formData = new FormData();\r\n+    formData.append('comprovante', file);\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Atualiza a UI para mostrar o link do novo anexo\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+\r\n+        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para remover um anexo de comprovativo.\r\n+ * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n+ */\r\n+async function handleRemoveAttachment() {\r\n+    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n+    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader(); // Mostra o ícone de carregamento\r\n+    try {\r\n+        // Chama a nossa função da API para apagar o anexo\r\n+        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n+\r\n+        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+\r\n+        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+\r\n+        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n+        await updateBillsOrganizer();\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n+ */\r\n+function applyFiltersAndSearch() {\r\n+    const searchTerm = searchInput.value.toLowerCase();\r\n+    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n+\r\n+    let filteredBoletos = userBoletos.filter(bill => {\r\n+        // Filtro de pesquisa\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n+            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+        if (!matchesSearch) return false;\r\n+\r\n+        // Filtro de categoria\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+        if (!matchesCategory) return false;\r\n+\r\n+        // Filtro de status\r\n+        if (activeStatusFilter === 'all') return true;\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        return bill.parcels.some(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeStatusFilter === 'paid') return parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            return false;\r\n+        });\r\n+    });\r\n+\r\n+    renderCalendar(filteredBoletos);\r\n+    updateMonthlySummary(filteredBoletos);\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário.\r\n+ */\r\n+function initializeDragAndDrop() {\r\n+    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n+\r\n+    dayCells.forEach(cell => {\r\n+        new Sortable(cell, {\r\n+            group: 'calendar-bills', // Permite mover cards entre células\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50', // Estilo do \"fantasma\" do card ao arrastar\r\n+\r\n+            // A função que é chamada QUANDO você solta um card\r\n+            onEnd: async function (evt) {\r\n+                const item = evt.item; // O card que foi arrastado\r\n+                const toCell = evt.to;   // A célula do dia onde ele foi solto\r\n+\r\n+                const boletoId = item.dataset.boletoId;\r\n+                const parcelId = item.dataset.parcelId;\r\n+                const newDate = toCell.dataset.date;\r\n+\r\n+                if (!boletoId || !parcelId || !newDate) return;\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    // Chamamos a nossa API para atualizar a data de vencimento\r\n+                    await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n+                    showToast('Data da parcela atualizada com sucesso!', 'success');\r\n+\r\n+                    // Atualizamos a aplicação inteira para refletir a mudança\r\n+                    await updateBillsOrganizer();\r\n+\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                    // Se der erro, atualizamos a interface para reverter a mudança visual\r\n+                    await updateBillsOrganizer();\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            },\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+    // Navegação entre ecrãs de login\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+\r\n+    // Submissão de formulários\r\n+    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n+    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+\r\n+\r\n+    // Ações na App Principal\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+    // Ações do Modal de Edição de Boleto\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+    // Navegação do Calendário\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+        if (currentMonth === 11) currentYear--;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+        if (currentMonth === 0) currentYear++;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    if (addCompanyCnpjInput) {\r\n+        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    if (openAddBillModalBtn) {\r\n+        openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+    }\r\n+\r\n+    const handleRedirectToHome = () => {\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    const handleFullLogoutAndRedirect = () => {\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    if (subscriptionLogoutBtn) {\r\n+        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+    }\r\n+\r\n+    if (blockedAccessLogoutBtn) {\r\n+        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+    }\r\n+\r\n+    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+    if (settingsBtn) {\r\n+        settingsBtn.addEventListener('click', (e) => {\r\n+            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+            settingsDropdown.classList.toggle('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    // Links dentro do menu dropdown\r\n+    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCompanyInfoModal();\r\n+    });\r\n+\r\n+    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openPermissionsModal();\r\n+    });\r\n+\r\n+    window.addEventListener('click', () => {\r\n+        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n+    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openManageUsersModal();\r\n+    });\r\n+\r\n+    // Botões do modal de gerir utilizadores\r\n+    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+    });\r\n+\r\n+    /**\r\n+     * Lida com o clique no botão de criar/renovar assinatura.\r\n+     */\r\n+    async function handleCreateSubscription() {\r\n+        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+        subscriptionActionBtn.disabled = true;\r\n+        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+        try {\r\n+            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+            const data = await api.createSubscriptionLink();\r\n+\r\n+            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+            if (data.init_point) {\r\n+                window.location.href = data.init_point;\r\n+            } else {\r\n+                throw new Error('Link de pagamento não recebido.');\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+            subscriptionActionBtn.disabled = false;\r\n+            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+        }\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão.\r\n+    if (subscriptionActionBtn) {\r\n+        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+    }\r\n+\r\n+    if (closePreviewModalBtn) {\r\n+        closePreviewModalBtn.addEventListener('click', () => {\r\n+            installmentsPreviewModal.classList.add('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    if (nfeXmlInput) {\r\n+        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+    }\r\n+\r\n+    if (previewBillNameInput) {\r\n+        previewBillNameInput.addEventListener('input', (e) => {\r\n+            if (currentBill) {\r\n+                currentBill.name = e.target.value;\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão\r\n+    if (showFullScreenBarcodeBtn) {\r\n+        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+    }\r\n+\r\n+    // Listener para o campo de pesquisa\r\n+    if (searchInput) {\r\n+        searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+    }\r\n+\r\n+    // Listeners para os botões de filtro\r\n+    if (filterButtons) {\r\n+        filterButtons.forEach(button => {\r\n+            button.addEventListener('click', (e) => {\r\n+                // Remove a classe 'active' de todos os botões\r\n+                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+                // Adiciona a classe 'active' apenas ao botão clicado\r\n+                e.currentTarget.classList.add('active');\r\n+                // Aplica o filtro\r\n+                applyFiltersAndSearch();\r\n+            });\r\n+        });\r\n+    }\r\n+\r\n+    if (forgotPasswordLink) {\r\n+        forgotPasswordLink.addEventListener('click', (e) => {\r\n+            e.preventDefault();\r\n+            forgotPasswordModal.classList.remove('hidden');\r\n+        });\r\n+    }\r\n+    if (closeForgotPasswordModal) {\r\n+        closeForgotPasswordModal.addEventListener('click', () => forgotPasswordModal.classList.add('hidden'));\r\n+    }\r\n+    if (forgotPasswordForm) {\r\n+        forgotPasswordForm.addEventListener('submit', handleForgotPasswordRequest);\r\n+    }\r\n+\r\n+    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCategoriesModal();\r\n+    });\r\n+\r\n+    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+    if (addCategoryForm) {\r\n+        addCategoryForm.addEventListener('submit', async (e) => {\r\n+            e.preventDefault();\r\n+            const name = newCategoryNameInput.value.trim();\r\n+            if (!name) return;\r\n+            try {\r\n+                await api.createCategory(name);\r\n+                newCategoryNameInput.value = '';\r\n+                await openCategoriesModal(); // Recarrega a lista do modal\r\n+                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+    });\r\n+\r\n+    if (categoryFilterSelect) {\r\n+        categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    // Inicia a aplicação\r\n+    initializeApp();\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753098984546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2028 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let inactivityTimer;\r\n+\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n+const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n+const cnpjInput = document.getElementById('cnpjInput');\r\n+const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n+const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n+const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n+const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n+const userLoginScreen = document.getElementById('userLoginScreen');\r\n+const userLoginForm = document.getElementById('userLoginForm');\r\n+const welcomeUserText = document.getElementById('welcomeUserText');\r\n+const userInput = document.getElementById('userInput');\r\n+const userPasswordInput = document.getElementById('userPasswordInput');\r\n+const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const forgotPasswordLink = document.getElementById('forgotPasswordLink');\r\n+const forgotPasswordModal = document.getElementById('forgotPasswordModal');\r\n+const closeForgotPasswordModal = document.getElementById('closeForgotPasswordModal');\r\n+const forgotPasswordForm = document.getElementById('forgotPasswordForm');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n+ * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n+ */\r\n+/**\r\n+ * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n+ */\r\n+function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+\r\n+    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n+\r\n+    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n+    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n+\r\n+    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n+\r\n+    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    // Atualiza os elementos HTML com os valores corretos\r\n+    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n+    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n+    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com uma lista específica de boletos.\r\n+ * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n+ */\r\n+function renderCalendar(boletosToRender = userBoletos) {\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+\r\n+        // Adiciona a classe 'day-cell-droppable' para o SortableJS\r\n+        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+\r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card-draggable')) return;\r\n+            openAddBillModal(e.currentTarget.dataset.date);\r\n+        });\r\n+\r\n+        // Usa a lista 'boletosToRender' que foi passada para a função\r\n+        boletosToRender.forEach(bill => {\r\n+            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                const parcelElement = document.createElement('div');\r\n+\r\n+                // Adiciona as classes e os atributos de dados para o drag-and-drop\r\n+                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n+                parcelElement.dataset.boletoId = bill._id;\r\n+                parcelElement.dataset.parcelId = parcel._id;\r\n+\r\n+                // Gera o conteúdo do card com todas as informações\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n+                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                    ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n+                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n+                `;\r\n+\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        });\r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+\r\n+    // Ativa a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n+    initializeDragAndDrop();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+async function openBillModal(bill, parcel) {\r\n+    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+\r\n+    // Preenche todos os campos do modal com os dados da parcela clicada\r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+    // Mostra o botão de gerar código de barras apenas se houver um código\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+\r\n+    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n+    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n+    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n+    if (bill.nfeNumber) {\r\n+        nfeNumberEl.textContent = bill.nfeNumber;\r\n+        nfeContainer.classList.remove('hidden');\r\n+    } else {\r\n+        nfeContainer.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Lógica dinâmica para a secção de anexos\r\n+    const attachmentContainer = document.getElementById('attachment-container');\r\n+    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n+\r\n+    if (parcel.attachmentUrl) {\r\n+        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n+        attachmentContainer.innerHTML = `\r\n+            <div class=\"flex items-center justify-between\">\r\n+                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n+                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n+                </a>\r\n+                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n+            </div>\r\n+        `;\r\n+        // Adiciona o evento de clique ao novo botão de remover\r\n+        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n+    } else {\r\n+        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        // Adiciona o evento de 'change' ao novo input de upload\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+    }\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        categories.forEach(cat => {\r\n+            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n+        });\r\n+        if (bill.category) {\r\n+            modalBillCategorySelect.value = bill.category._id;\r\n+        } else {\r\n+            modalBillCategorySelect.value = \"\";\r\n+        }\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    if (billForm) {\r\n+        billForm.reset();\r\n+    }\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        totalBillsSpan.textContent = totalParcels;\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Funções para mostrar os diferentes ecrãs da aplicação.\r\n+ */\r\n+function showInitialLogin() {\r\n+    hideAllScreens();\r\n+    initialLoginScreen.classList.remove('hidden');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    currentLoggedInCompany = null;\r\n+    currentLoggedInUser = null;\r\n+    isAdminLoggedIn = false;\r\n+    loggedInViaAdmin = false;\r\n+}\r\n+\r\n+function showCnpjLogin() {\r\n+    hideAllScreens();\r\n+    cnpjLoginForm.reset();\r\n+    cnpjLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showAdminLogin() {\r\n+    hideAllScreens();\r\n+    adminLoginForm.reset();\r\n+    adminLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+function showUserLogin(companyName) {\r\n+    hideAllScreens();\r\n+    userLoginForm.reset();\r\n+    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n+    userLoginScreen.classList.remove('hidden');\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    mainAppContent.classList.remove('hidden');\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+    await populateCategoryFilter();\r\n+    await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n+ * @param {string} tagName - O nome da tag a ser procurada.\r\n+ * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n+ * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n+ */\r\n+function getTagValue(tagName, parentElement) {\r\n+    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n+    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n+    return element?.textContent || '';\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ */\r\n+function openCompanyDetailsModal(company, users) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (users && users.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        users.forEach(user => {\r\n+            // Cria as opções do dropdown, marcando a atual como selecionada\r\n+            const roleOptions = roles.map(role =>\r\n+                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+            ).join('');\r\n+\r\n+            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona o evento para os botões \"Remover\"\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    if (password !== confirmPassword) {\r\n+        return showToast(\"As senhas não coincidem.\", \"error\");\r\n+    }\r\n+    // A verificação agora funciona para os dois casos\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.registerUser(username, password, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n+        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+\r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function openCategoriesModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        renderCategoryList(categories);\r\n+        categoriesModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function renderCategoryList(categories) {\r\n+    categoryListDiv.innerHTML = '';\r\n+    if (categories.length === 0) {\r\n+        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n+        return;\r\n+    }\r\n+    categories.forEach(category => {\r\n+        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n+                <span class=\"text-white\">${category.name}</span>\r\n+                <div>\r\n+                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n+                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                </div>\r\n+            </div>\r\n+        `);\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo boleto, buscando as categorias\r\n+ * e opcionalmente pré-preenchendo a data.\r\n+ * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n+ */\r\n+async function openAddBillModal(preselectedDate = null) {\r\n+    clearBillForm();\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+\r\n+        categories.forEach(category => {\r\n+            const option = document.createElement('option');\r\n+            option.value = category._id;\r\n+            option.textContent = category.name;\r\n+            billCategorySelect.appendChild(option);\r\n+        });\r\n+\r\n+        // Se uma data foi passada como parâmetro, nós a preenchemos\r\n+        if (preselectedDate) {\r\n+            document.getElementById('dueDate').value = preselectedDate;\r\n+        }\r\n+\r\n+        addBillModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function populateCategoryFilter() {\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n+        // Se der erro, garante que a opção padrão exista\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+\r\n+async function handleForgotPasswordRequest(e) {\r\n+    e.preventDefault();\r\n+    const email = document.getElementById('recoveryEmailInput').value;\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.requestPasswordReset(email);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n+        forgotPasswordModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleCnpjLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n+        currentLoggedInCompany = data.company;\r\n+        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAdminLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n+        localStorage.setItem('authToken', data.token);\r\n+        isAdminLoggedIn = true;\r\n+        showToast('Login de Administrador bem-sucedido!', 'success');\r\n+        await showAdminDashboard();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList();\r\n+}\r\n+\r\n+async function handleUserLogin(e) {\r\n+    e.preventDefault();\r\n+    showLoader();\r\n+    try {\r\n+        // 1. Faz o login do utilizador para obter um token válido.\r\n+        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n+        localStorage.setItem('authToken', loginData.token);\r\n+\r\n+        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n+        const sessionData = await api.checkSession();\r\n+        currentLoggedInUser = sessionData.user;\r\n+        currentLoggedInCompany = sessionData.company;\r\n+\r\n+        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            // Se estiver tudo OK, entra na aplicação.\r\n+            await showMainApp();\r\n+        } else {\r\n+            // Caso contrário, direciona para o ecrã correto.\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a API para obter os detalhes\r\n+                const { company, users } = await api.getCompanyDetails(companyId);\r\n+                // Chama a nossa nova função para abrir e preencher o modal\r\n+                openCompanyDetailsModal(company, users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { users } = await api.getCompanyDetails(companyId);\r\n+                if (users.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                }\r\n+                const userIdToImpersonate = users[0]._id;\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+function handleCalculateInstallments(e) {\r\n+    e.preventDefault();\r\n+    const billName = document.getElementById('billName').value;\r\n+    const categoryId = billCategorySelect.value;\r\n+    const dueDate = document.getElementById('dueDate').value;\r\n+    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n+    const totalAmount = parseFloat(totalAmountValue);\r\n+    const installments = parseInt(document.getElementById('installments').value);\r\n+    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+    const description = document.getElementById('description').value;\r\n+    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n+\r\n+    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n+        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+    }\r\n+\r\n+    currentBill = {\r\n+        name: billName,\r\n+        description,\r\n+        parcels: [],\r\n+        category: categoryId || null\r\n+    };\r\n+    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+    installmentsList.innerHTML = '';\r\n+\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n+        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n+\r\n+        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n+        installmentsList.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n+                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n+            </div>\r\n+        `);\r\n+    }\r\n+\r\n+    // Adiciona os eventos para os novos inputs\r\n+    addEventListenersToInstallmentInputs();\r\n+    updatePreviewTotal();\r\n+    previewBillNameInput.value = currentBill.name;\r\n+    previewNfeNumber.textContent = 'N/A';\r\n+    addBillModal.classList.add('hidden');\r\n+    installmentsPreviewModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n+ */\r\n+function updatePreviewTotal() {\r\n+    if (!currentBill.parcels) return;\r\n+    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill);\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+        clearBillForm();\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+    const updatedParcelData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    const updatedBillData = {\r\n+        category: modalBillCategorySelect.value || null\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n+        await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n+\r\n+        showToast('Alterações salvas com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ * Verifica a sessão, o estado da assinatura e ações especiais do URL.\r\n+ */\r\n+async function initializeApp() {\r\n+    // Define a data atual para o calendário\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+\r\n+    // 1. Verificamos se há uma ação especial no URL ANTES de qualquer outra coisa\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n+    const action = urlParams.get('action');\r\n+    const isAdminLogin = urlParams.get('admin') === 'true';\r\n+\r\n+    if (action === 'forgot_password') {\r\n+        // Se a ação for recuperar a senha, abrimos o modal diretamente\r\n+        showCnpjLogin(); // Mostra uma tela de fundo consistente\r\n+        forgotPasswordModal.classList.remove('hidden');\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return; // Para a execução\r\n+    }\r\n+\r\n+    if (isAdminLogin) {\r\n+        // Se for um acesso de admin pelo URL especial, mostra a tela de login de admin\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return; // Para a execução\r\n+    }\r\n+    \r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        showInitialLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+            \r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+\r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n+\r\n+        // Define os cargos que o Proprietário pode atribuir.\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+        if (users && users.length > 0) {\r\n+            users.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+\r\n+                // Cria as opções do dropdown para Gerente e Funcionário\r\n+                const roleOptions = assignableRoles.map(role =>\r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n+                const roleHtml = isOwner\r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+\r\n+        // Adiciona o evento de clique aos botões de remover\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                // ... (a lógica de remover continua a mesma de antes)\r\n+            });\r\n+        });\r\n+\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n+\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n+                    e.target.value = originalRole; // Reverte a seleção visual\r\n+                    return;\r\n+\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n+ * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n+ * @param {Event} event - O evento 'change' do input do ficheiro.\r\n+ */\r\n+function handleNfeXmlUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) {\r\n+        return;\r\n+    }\r\n+\r\n+    const reader = new FileReader();\r\n+\r\n+    reader.onload = (e) => {\r\n+        try {\r\n+            const xmlString = e.target.result;\r\n+            const parser = new DOMParser();\r\n+            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n+\r\n+            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n+            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n+                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n+            }\r\n+\r\n+            // Define os nós principais para evitar procuras repetidas\r\n+            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n+            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n+\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n+\r\n+            let parcelsData = [];\r\n+\r\n+            if (duplicatas.length > 0) {\r\n+                // --- CENÁRIO 1: Encontrou as tags <dup> (padrão) ---\r\n+                parcelsData = duplicatas.map((dup, i) => ({\r\n+                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n+                    dueDate: getTagValue(\"dVenc\", dup)\r\n+                }));\r\n+            } else {\r\n+                // --- CENÁRIO 2: Procura por informações de cobrança no texto ---\r\n+                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n+                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n+\r\n+                if (cobrancaMatch && cobrancaMatch[1]) {\r\n+                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n+                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n+                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n+                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n+\r\n+                    parcelsData = dias.map((dia, i) => {\r\n+                        const vencimento = new Date(dataEmissao);\r\n+                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n+                        return {\r\n+                            number: i + 1,\r\n+                            amount: parcelAmount,\r\n+                            dueDate: vencimento.toISOString().split('T')[0]\r\n+                        };\r\n+                    });\r\n+                }\r\n+            }\r\n+\r\n+            if (parcelsData.length > 0) {\r\n+                // --- Se encontrou parcelas (por qualquer método), vai para a pré-visualização ---\r\n+                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: parcelsData };\r\n+\r\n+                installmentsList.innerHTML = '';\r\n+                currentBill.parcels.forEach((parcel, index) => {\r\n+                    installmentsList.insertAdjacentHTML('beforeend', `\r\n+                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                        </div>\r\n+                    `);\r\n+                });\r\n+\r\n+                addEventListenersToInstallmentInputs();\r\n+                updatePreviewTotal();\r\n+                previewBillNameInput.value = currentBill.name;\r\n+                previewNfeNumber.textContent = nfeNumber;\r\n+                installmentsPreviewModal.classList.remove('hidden');\r\n+\r\n+            } else {\r\n+                // --- CENÁRIO 3: Não encontrou parcelas, preenche o formulário manual ---\r\n+                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n+                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n+\r\n+                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n+                if (vencimento) {\r\n+                    document.getElementById('dueDate').value = vencimento;\r\n+                }\r\n+\r\n+                addBillModal.classList.remove('hidden');\r\n+            }\r\n+\r\n+            showToast('Dados do XML carregados com sucesso!', 'success');\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            console.error(\"Erro ao processar XML:\", error);\r\n+        } finally {\r\n+            // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n+            event.target.value = '';\r\n+        }\r\n+    };\r\n+\r\n+    reader.onerror = () => {\r\n+        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+    };\r\n+\r\n+    reader.readAsText(file);\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n+ */\r\n+function addEventListenersToInstallmentInputs() {\r\n+    // Listener para o campo de VALOR\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            }\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de DATA\r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de CÓDIGO DE BARRAS\r\n+    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        // Evento para guardar o valor quando é digitado\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].barcode = e.target.value;\r\n+            }\r\n+        });\r\n+\r\n+        input.addEventListener('keydown', (e) => {\r\n+            if (e.key === 'Enter') {\r\n+                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n+\r\n+                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n+                const nextIndex = currentIndex + 1;\r\n+                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n+\r\n+                if (nextInput) {\r\n+                    // Se houver um próximo campo de código de barras, foca nele.\r\n+                    nextInput.focus();\r\n+                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n+                } else {\r\n+                    // Se for o último campo, foca no botão de salvar.\r\n+                    document.getElementById('addToOrganizer').focus();\r\n+                }\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n+ */\r\n+function handleShowFullScreenBarcode() {\r\n+    const barcodeValue = modalBillBarcodeInput.value;\r\n+    if (!barcodeValue) {\r\n+        return showToast('Não há código de barras para mostrar.', 'info');\r\n+    }\r\n+\r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    if (!barcodeImageContainer) return;\r\n+\r\n+    // Limpa qualquer código de barras anterior\r\n+    barcodeImageContainer.innerHTML = '';\r\n+\r\n+    try {\r\n+        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n+        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n+\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n+        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n+            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n+            lineColor: \"#000000\",\r\n+            width: 2,\r\n+            height: 100,\r\n+            displayValue: true, // Mostra os números abaixo das barras\r\n+            fontSize: 18\r\n+        });\r\n+\r\n+        // Mostra o modal de ecrã inteiro\r\n+        barcodeFullScreenModal.classList.remove('hidden');\r\n+\r\n+    } catch (e) {\r\n+        console.error(\"Erro ao gerar código de barras:\", e);\r\n+        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n+    }\r\n+}\r\n+\r\n+async function handleAttachmentUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file || !selectedParcel) return;\r\n+\r\n+    // Cria um objeto FormData para enviar o ficheiro\r\n+    const formData = new FormData();\r\n+    formData.append('comprovante', file);\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Atualiza a UI para mostrar o link do novo anexo\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+\r\n+        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para remover um anexo de comprovativo.\r\n+ * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n+ */\r\n+async function handleRemoveAttachment() {\r\n+    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n+    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader(); // Mostra o ícone de carregamento\r\n+    try {\r\n+        // Chama a nossa função da API para apagar o anexo\r\n+        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n+\r\n+        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+\r\n+        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+\r\n+        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n+        await updateBillsOrganizer();\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n+ */\r\n+function applyFiltersAndSearch() {\r\n+    const searchTerm = searchInput.value.toLowerCase();\r\n+    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n+\r\n+    let filteredBoletos = userBoletos.filter(bill => {\r\n+        // Filtro de pesquisa\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n+            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+        if (!matchesSearch) return false;\r\n+\r\n+        // Filtro de categoria\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+        if (!matchesCategory) return false;\r\n+\r\n+        // Filtro de status\r\n+        if (activeStatusFilter === 'all') return true;\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        return bill.parcels.some(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeStatusFilter === 'paid') return parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            return false;\r\n+        });\r\n+    });\r\n+\r\n+    renderCalendar(filteredBoletos);\r\n+    updateMonthlySummary(filteredBoletos);\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário.\r\n+ */\r\n+function initializeDragAndDrop() {\r\n+    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n+\r\n+    dayCells.forEach(cell => {\r\n+        new Sortable(cell, {\r\n+            group: 'calendar-bills', // Permite mover cards entre células\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50', // Estilo do \"fantasma\" do card ao arrastar\r\n+\r\n+            // A função que é chamada QUANDO você solta um card\r\n+            onEnd: async function (evt) {\r\n+                const item = evt.item; // O card que foi arrastado\r\n+                const toCell = evt.to;   // A célula do dia onde ele foi solto\r\n+\r\n+                const boletoId = item.dataset.boletoId;\r\n+                const parcelId = item.dataset.parcelId;\r\n+                const newDate = toCell.dataset.date;\r\n+\r\n+                if (!boletoId || !parcelId || !newDate) return;\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    // Chamamos a nossa API para atualizar a data de vencimento\r\n+                    await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n+                    showToast('Data da parcela atualizada com sucesso!', 'success');\r\n+\r\n+                    // Atualizamos a aplicação inteira para refletir a mudança\r\n+                    await updateBillsOrganizer();\r\n+\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                    // Se der erro, atualizamos a interface para reverter a mudança visual\r\n+                    await updateBillsOrganizer();\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            },\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+    // Navegação entre ecrãs de login\r\n+    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+\r\n+    // Submissão de formulários\r\n+    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n+    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n+    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+\r\n+\r\n+    // Ações na App Principal\r\n+    logoutBtn.addEventListener('click', showInitialLogin);\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+    // Ações do Modal de Edição de Boleto\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+    // Navegação do Calendário\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+        if (currentMonth === 11) currentYear--;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+        if (currentMonth === 0) currentYear++;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    if (addCompanyCnpjInput) {\r\n+        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    if (openAddBillModalBtn) {\r\n+        openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+    }\r\n+\r\n+    const handleRedirectToHome = () => {\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    const handleFullLogoutAndRedirect = () => {\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    if (subscriptionLogoutBtn) {\r\n+        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+    }\r\n+\r\n+    if (blockedAccessLogoutBtn) {\r\n+        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+    }\r\n+\r\n+    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+    if (settingsBtn) {\r\n+        settingsBtn.addEventListener('click', (e) => {\r\n+            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+            settingsDropdown.classList.toggle('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    // Links dentro do menu dropdown\r\n+    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCompanyInfoModal();\r\n+    });\r\n+\r\n+    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openPermissionsModal();\r\n+    });\r\n+\r\n+    window.addEventListener('click', () => {\r\n+        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n+    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openManageUsersModal();\r\n+    });\r\n+\r\n+    // Botões do modal de gerir utilizadores\r\n+    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+    });\r\n+\r\n+    /**\r\n+     * Lida com o clique no botão de criar/renovar assinatura.\r\n+     */\r\n+    async function handleCreateSubscription() {\r\n+        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+        subscriptionActionBtn.disabled = true;\r\n+        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+        try {\r\n+            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+            const data = await api.createSubscriptionLink();\r\n+\r\n+            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+            if (data.init_point) {\r\n+                window.location.href = data.init_point;\r\n+            } else {\r\n+                throw new Error('Link de pagamento não recebido.');\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+            subscriptionActionBtn.disabled = false;\r\n+            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+        }\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão.\r\n+    if (subscriptionActionBtn) {\r\n+        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+    }\r\n+\r\n+    if (closePreviewModalBtn) {\r\n+        closePreviewModalBtn.addEventListener('click', () => {\r\n+            installmentsPreviewModal.classList.add('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    if (nfeXmlInput) {\r\n+        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+    }\r\n+\r\n+    if (previewBillNameInput) {\r\n+        previewBillNameInput.addEventListener('input', (e) => {\r\n+            if (currentBill) {\r\n+                currentBill.name = e.target.value;\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão\r\n+    if (showFullScreenBarcodeBtn) {\r\n+        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+    }\r\n+\r\n+    // Listener para o campo de pesquisa\r\n+    if (searchInput) {\r\n+        searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+    }\r\n+\r\n+    // Listeners para os botões de filtro\r\n+    if (filterButtons) {\r\n+        filterButtons.forEach(button => {\r\n+            button.addEventListener('click', (e) => {\r\n+                // Remove a classe 'active' de todos os botões\r\n+                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+                // Adiciona a classe 'active' apenas ao botão clicado\r\n+                e.currentTarget.classList.add('active');\r\n+                // Aplica o filtro\r\n+                applyFiltersAndSearch();\r\n+            });\r\n+        });\r\n+    }\r\n+\r\n+    if (forgotPasswordLink) {\r\n+        forgotPasswordLink.addEventListener('click', (e) => {\r\n+            e.preventDefault();\r\n+            forgotPasswordModal.classList.remove('hidden');\r\n+        });\r\n+    }\r\n+    if (closeForgotPasswordModal) {\r\n+        closeForgotPasswordModal.addEventListener('click', () => forgotPasswordModal.classList.add('hidden'));\r\n+    }\r\n+    if (forgotPasswordForm) {\r\n+        forgotPasswordForm.addEventListener('submit', handleForgotPasswordRequest);\r\n+    }\r\n+\r\n+    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCategoriesModal();\r\n+    });\r\n+\r\n+    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+    if (addCategoryForm) {\r\n+        addCategoryForm.addEventListener('submit', async (e) => {\r\n+            e.preventDefault();\r\n+            const name = newCategoryNameInput.value.trim();\r\n+            if (!name) return;\r\n+            try {\r\n+                await api.createCategory(name);\r\n+                newCategoryNameInput.value = '';\r\n+                await openCategoriesModal(); // Recarrega a lista do modal\r\n+                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+    });\r\n+\r\n+    if (categoryFilterSelect) {\r\n+        categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+    // Inicia a aplicação\r\n+    initializeApp();\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753099590109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1752,13 +1752,13 @@\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', () => {\r\n     // Navegação entre ecrãs de login\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    if (showCnpjLoginBtn) showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n+    if (showAdminLoginBtn) showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n+    if (backToInitialLoginBtnCnpj) backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n+    if (backToInitialLoginBtnAdmin) backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n+    if (backToCnpjLoginBtn) backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n \r\n     // Submissão de formulários\r\n     if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n     if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n@@ -1783,8 +1783,9 @@\n     if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n     if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n     if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n     if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+    if (forgotPasswordForm) forgotPasswordForm.addEventListener('submit', handleForgotPasswordRequest);\r\n \r\n \r\n     // Ações na App Principal\r\n     logoutBtn.addEventListener('click', showInitialLogin);\r\n@@ -1963,11 +1964,8 @@\n     }\r\n     if (closeForgotPasswordModal) {\r\n         closeForgotPasswordModal.addEventListener('click', () => forgotPasswordModal.classList.add('hidden'));\r\n     }\r\n-    if (forgotPasswordForm) {\r\n-        forgotPasswordForm.addEventListener('submit', handleForgotPasswordRequest);\r\n-    }\r\n \r\n     if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n         e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n@@ -2024,4046 +2022,5 @@\n \r\n \r\n     // Inicia a aplicação\r\n     initializeApp();\r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let inactivityTimer;\r\n-\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-const cnpjInput = document.getElementById('cnpjInput');\r\n-const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-const userLoginScreen = document.getElementById('userLoginScreen');\r\n-const userLoginForm = document.getElementById('userLoginForm');\r\n-const welcomeUserText = document.getElementById('welcomeUserText');\r\n-const userInput = document.getElementById('userInput');\r\n-const userPasswordInput = document.getElementById('userPasswordInput');\r\n-const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const forgotPasswordLink = document.getElementById('forgotPasswordLink');\r\n-const forgotPasswordModal = document.getElementById('forgotPasswordModal');\r\n-const closeForgotPasswordModal = document.getElementById('closeForgotPasswordModal');\r\n-const forgotPasswordForm = document.getElementById('forgotPasswordForm');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n-\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n- * Por padrão, usa a lista completa de boletos do utilizador.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n- */\r\n-/**\r\n- * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n- */\r\n-function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-\r\n-    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n-\r\n-    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n-    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n-\r\n-    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n-\r\n-    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    // Atualiza os elementos HTML com os valores corretos\r\n-    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n-    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n-    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com uma lista específica de boletos.\r\n- * Por padrão, usa a lista completa de boletos do utilizador.\r\n- * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n- */\r\n-function renderCalendar(boletosToRender = userBoletos) {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-\r\n-        // Adiciona a classe 'day-cell-droppable' para o SortableJS\r\n-        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-\r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card-draggable')) return;\r\n-            openAddBillModal(e.currentTarget.dataset.date);\r\n-        });\r\n-\r\n-        // Usa a lista 'boletosToRender' que foi passada para a função\r\n-        boletosToRender.forEach(bill => {\r\n-            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                const parcelElement = document.createElement('div');\r\n-\r\n-                // Adiciona as classes e os atributos de dados para o drag-and-drop\r\n-                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n-                parcelElement.dataset.boletoId = bill._id;\r\n-                parcelElement.dataset.parcelId = parcel._id;\r\n-\r\n-                // Gera o conteúdo do card com todas as informações\r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                    ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n-                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n-                `;\r\n-\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        });\r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-\r\n-    // Ativa a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n-    initializeDragAndDrop();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-async function openBillModal(bill, parcel) {\r\n-    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-\r\n-    // Preenche todos os campos do modal com os dados da parcela clicada\r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-    // Mostra o botão de gerar código de barras apenas se houver um código\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-\r\n-    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n-    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n-    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n-    if (bill.nfeNumber) {\r\n-        nfeNumberEl.textContent = bill.nfeNumber;\r\n-        nfeContainer.classList.remove('hidden');\r\n-    } else {\r\n-        nfeContainer.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Lógica dinâmica para a secção de anexos\r\n-    const attachmentContainer = document.getElementById('attachment-container');\r\n-    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n-\r\n-    if (parcel.attachmentUrl) {\r\n-        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n-        attachmentContainer.innerHTML = `\r\n-            <div class=\"flex items-center justify-between\">\r\n-                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n-                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n-                </a>\r\n-                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n-            </div>\r\n-        `;\r\n-        // Adiciona o evento de clique ao novo botão de remover\r\n-        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n-    } else {\r\n-        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-        // Adiciona o evento de 'change' ao novo input de upload\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-    }\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-        categories.forEach(cat => {\r\n-            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n-        });\r\n-        if (bill.category) {\r\n-            modalBillCategorySelect.value = bill.category._id;\r\n-        } else {\r\n-            modalBillCategorySelect.value = \"\";\r\n-        }\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    if (billForm) {\r\n-        billForm.reset();\r\n-    }\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Funções para mostrar os diferentes ecrãs da aplicação.\r\n- */\r\n-function showInitialLogin() {\r\n-    hideAllScreens();\r\n-    initialLoginScreen.classList.remove('hidden');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    currentLoggedInCompany = null;\r\n-    currentLoggedInUser = null;\r\n-    isAdminLoggedIn = false;\r\n-    loggedInViaAdmin = false;\r\n-}\r\n-\r\n-function showCnpjLogin() {\r\n-    hideAllScreens();\r\n-    cnpjLoginForm.reset();\r\n-    cnpjLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showAdminLogin() {\r\n-    hideAllScreens();\r\n-    adminLoginForm.reset();\r\n-    adminLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showUserLogin(companyName) {\r\n-    hideAllScreens();\r\n-    userLoginForm.reset();\r\n-    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-    userLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    mainAppContent.classList.remove('hidden');\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-    await populateCategoryFilter();\r\n-    await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n- * @param {string} tagName - O nome da tag a ser procurada.\r\n- * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n- * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n- */\r\n-function getTagValue(tagName, parentElement) {\r\n-    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n-    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n-    return element?.textContent || '';\r\n-}\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- */\r\n-function openCompanyDetailsModal(company, users) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (users && users.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        users.forEach(user => {\r\n-            // Cria as opções do dropdown, marcando a atual como selecionada\r\n-            const roleOptions = roles.map(role =>\r\n-                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-            ).join('');\r\n-\r\n-            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona o evento para os botões \"Remover\"\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    if (password !== confirmPassword) {\r\n-        return showToast(\"As senhas não coincidem.\", \"error\");\r\n-    }\r\n-    // A verificação agora funciona para os dois casos\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.registerUser(username, password, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n-        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-\r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function openCategoriesModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        renderCategoryList(categories);\r\n-        categoriesModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function renderCategoryList(categories) {\r\n-    categoryListDiv.innerHTML = '';\r\n-    if (categories.length === 0) {\r\n-        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n-        return;\r\n-    }\r\n-    categories.forEach(category => {\r\n-        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n-                <span class=\"text-white\">${category.name}</span>\r\n-                <div>\r\n-                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n-                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n-                </div>\r\n-            </div>\r\n-        `);\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo boleto, buscando as categorias\r\n- * e opcionalmente pré-preenchendo a data.\r\n- * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n- */\r\n-async function openAddBillModal(preselectedDate = null) {\r\n-    clearBillForm();\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-\r\n-        categories.forEach(category => {\r\n-            const option = document.createElement('option');\r\n-            option.value = category._id;\r\n-            option.textContent = category.name;\r\n-            billCategorySelect.appendChild(option);\r\n-        });\r\n-\r\n-        // Se uma data foi passada como parâmetro, nós a preenchemos\r\n-        if (preselectedDate) {\r\n-            document.getElementById('dueDate').value = preselectedDate;\r\n-        }\r\n-\r\n-        addBillModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function populateCategoryFilter() {\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n-        // Se der erro, garante que a opção padrão exista\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-\r\n-async function handleForgotPasswordRequest(e) {\r\n-    e.preventDefault();\r\n-    const email = document.getElementById('recoveryEmailInput').value;\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.requestPasswordReset(email);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n-        forgotPasswordModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleCnpjLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n-        currentLoggedInCompany = data.company;\r\n-        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAdminLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n-        localStorage.setItem('authToken', data.token);\r\n-        isAdminLoggedIn = true;\r\n-        showToast('Login de Administrador bem-sucedido!', 'success');\r\n-        await showAdminDashboard();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList();\r\n-}\r\n-\r\n-async function handleUserLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        // 1. Faz o login do utilizador para obter um token válido.\r\n-        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n-        localStorage.setItem('authToken', loginData.token);\r\n-\r\n-        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n-        const sessionData = await api.checkSession();\r\n-        currentLoggedInUser = sessionData.user;\r\n-        currentLoggedInCompany = sessionData.company;\r\n-\r\n-        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            // Se estiver tudo OK, entra na aplicação.\r\n-            await showMainApp();\r\n-        } else {\r\n-            // Caso contrário, direciona para o ecrã correto.\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a API para obter os detalhes\r\n-                const { company, users } = await api.getCompanyDetails(companyId);\r\n-                // Chama a nossa nova função para abrir e preencher o modal\r\n-                openCompanyDetailsModal(company, users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                const { users } = await api.getCompanyDetails(companyId);\r\n-                if (users.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n-                }\r\n-                const userIdToImpersonate = users[0]._id;\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-function handleCalculateInstallments(e) {\r\n-    e.preventDefault();\r\n-    const billName = document.getElementById('billName').value;\r\n-    const categoryId = billCategorySelect.value;\r\n-    const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n-    const totalAmount = parseFloat(totalAmountValue);\r\n-    const installments = parseInt(document.getElementById('installments').value);\r\n-    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-    const description = document.getElementById('description').value;\r\n-    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n-\r\n-    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n-        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-    }\r\n-\r\n-    currentBill = {\r\n-        name: billName,\r\n-        description,\r\n-        parcels: [],\r\n-        category: categoryId || null\r\n-    };\r\n-    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-    installmentsList.innerHTML = '';\r\n-\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n-        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n-\r\n-        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n-        installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n-                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n-            </div>\r\n-        `);\r\n-    }\r\n-\r\n-    // Adiciona os eventos para os novos inputs\r\n-    addEventListenersToInstallmentInputs();\r\n-    updatePreviewTotal();\r\n-    previewBillNameInput.value = currentBill.name;\r\n-    previewNfeNumber.textContent = 'N/A';\r\n-    addBillModal.classList.add('hidden');\r\n-    installmentsPreviewModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n- */\r\n-function updatePreviewTotal() {\r\n-    if (!currentBill.parcels) return;\r\n-    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill);\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-        clearBillForm();\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-    const updatedParcelData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    const updatedBillData = {\r\n-        category: modalBillCategorySelect.value || null\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n-        await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n-\r\n-        showToast('Alterações salvas com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- * Verifica a sessão, o estado da assinatura e ações do URL.\r\n- */\r\n-async function initializeApp() {\r\n-    // Define a data atual para o calendário\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-\r\n-    // 1. Verificamos se há uma ação no URL ANTES de qualquer outra coisa\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n-    const action = urlParams.get('action');\r\n-\r\n-    if (action === 'forgot_password') {\r\n-        // Se a ação for recuperar a senha, mostramos a tela de login de empresa\r\n-        // e depois abrimos o modal de recuperação por cima.\r\n-        showCnpjLogin(); // Mostra a tela de fundo para não ficar um ecrã preto\r\n-        forgotPasswordModal.classList.remove('hidden'); // Abre o modal\r\n-\r\n-        // Esconde o ecrã de carregamento principal para não ficar por cima\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return; // Para a execução para não continuar com a verificação de login\r\n-    }\r\n-\r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        showInitialLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-\r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n-\r\n-        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n-\r\n-        // Define os cargos que o Proprietário pode atribuir.\r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        if (users && users.length > 0) {\r\n-            users.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-\r\n-                // Cria as opções do dropdown para Gerente e Funcionário\r\n-                const roleOptions = assignableRoles.map(role =>\r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n-                const roleHtml = isOwner\r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-\r\n-        // Adiciona o evento de clique aos botões de remover\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                // ... (a lógica de remover continua a mesma de antes)\r\n-            });\r\n-        });\r\n-\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n-\r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n-                    e.target.value = originalRole; // Reverte a seleção visual\r\n-                    return;\r\n-\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n- * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n- * @param {Event} event - O evento 'change' do input do ficheiro.\r\n- */\r\n-function handleNfeXmlUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) {\r\n-        return;\r\n-    }\r\n-\r\n-    const reader = new FileReader();\r\n-\r\n-    reader.onload = (e) => {\r\n-        try {\r\n-            const xmlString = e.target.result;\r\n-            const parser = new DOMParser();\r\n-            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-\r\n-            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n-            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n-                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n-            }\r\n-\r\n-            // Define os nós principais para evitar procuras repetidas\r\n-            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n-            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n-            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-\r\n-            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n-            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n-            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n-\r\n-            let parcelsData = [];\r\n-\r\n-            if (duplicatas.length > 0) {\r\n-                // --- CENÁRIO 1: Encontrou as tags <dup> (padrão) ---\r\n-                parcelsData = duplicatas.map((dup, i) => ({\r\n-                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n-                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n-                    dueDate: getTagValue(\"dVenc\", dup)\r\n-                }));\r\n-            } else {\r\n-                // --- CENÁRIO 2: Procura por informações de cobrança no texto ---\r\n-                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n-                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n-\r\n-                if (cobrancaMatch && cobrancaMatch[1]) {\r\n-                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n-                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n-                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n-                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n-\r\n-                    parcelsData = dias.map((dia, i) => {\r\n-                        const vencimento = new Date(dataEmissao);\r\n-                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n-                        return {\r\n-                            number: i + 1,\r\n-                            amount: parcelAmount,\r\n-                            dueDate: vencimento.toISOString().split('T')[0]\r\n-                        };\r\n-                    });\r\n-                }\r\n-            }\r\n-\r\n-            if (parcelsData.length > 0) {\r\n-                // --- Se encontrou parcelas (por qualquer método), vai para a pré-visualização ---\r\n-                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: parcelsData };\r\n-\r\n-                installmentsList.innerHTML = '';\r\n-                currentBill.parcels.forEach((parcel, index) => {\r\n-                    installmentsList.insertAdjacentHTML('beforeend', `\r\n-                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                        </div>\r\n-                    `);\r\n-                });\r\n-\r\n-                addEventListenersToInstallmentInputs();\r\n-                updatePreviewTotal();\r\n-                previewBillNameInput.value = currentBill.name;\r\n-                previewNfeNumber.textContent = nfeNumber;\r\n-                installmentsPreviewModal.classList.remove('hidden');\r\n-\r\n-            } else {\r\n-                // --- CENÁRIO 3: Não encontrou parcelas, preenche o formulário manual ---\r\n-                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n-                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n-\r\n-                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n-                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n-                if (vencimento) {\r\n-                    document.getElementById('dueDate').value = vencimento;\r\n-                }\r\n-\r\n-                addBillModal.classList.remove('hidden');\r\n-            }\r\n-\r\n-            showToast('Dados do XML carregados com sucesso!', 'success');\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            console.error(\"Erro ao processar XML:\", error);\r\n-        } finally {\r\n-            // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n-            event.target.value = '';\r\n-        }\r\n-    };\r\n-\r\n-    reader.onerror = () => {\r\n-        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n-    };\r\n-\r\n-    reader.readAsText(file);\r\n-}\r\n-\r\n-/**\r\n- * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n- */\r\n-function addEventListenersToInstallmentInputs() {\r\n-    // Listener para o campo de VALOR\r\n-    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n-            }\r\n-            updatePreviewTotal();\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de DATA\r\n-    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-        input.addEventListener('change', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de CÓDIGO DE BARRAS\r\n-    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n-        // Evento para guardar o valor quando é digitado\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].barcode = e.target.value;\r\n-            }\r\n-        });\r\n-\r\n-        input.addEventListener('keydown', (e) => {\r\n-            if (e.key === 'Enter') {\r\n-                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n-\r\n-                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n-                const nextIndex = currentIndex + 1;\r\n-                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n-\r\n-                if (nextInput) {\r\n-                    // Se houver um próximo campo de código de barras, foca nele.\r\n-                    nextInput.focus();\r\n-                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n-                } else {\r\n-                    // Se for o último campo, foca no botão de salvar.\r\n-                    document.getElementById('addToOrganizer').focus();\r\n-                }\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n- */\r\n-function handleShowFullScreenBarcode() {\r\n-    const barcodeValue = modalBillBarcodeInput.value;\r\n-    if (!barcodeValue) {\r\n-        return showToast('Não há código de barras para mostrar.', 'info');\r\n-    }\r\n-\r\n-    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n-    if (!barcodeImageContainer) return;\r\n-\r\n-    // Limpa qualquer código de barras anterior\r\n-    barcodeImageContainer.innerHTML = '';\r\n-\r\n-    try {\r\n-        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n-        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n-\r\n-        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n-        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n-            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n-            lineColor: \"#000000\",\r\n-            width: 2,\r\n-            height: 100,\r\n-            displayValue: true, // Mostra os números abaixo das barras\r\n-            fontSize: 18\r\n-        });\r\n-\r\n-        // Mostra o modal de ecrã inteiro\r\n-        barcodeFullScreenModal.classList.remove('hidden');\r\n-\r\n-    } catch (e) {\r\n-        console.error(\"Erro ao gerar código de barras:\", e);\r\n-        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n-    }\r\n-}\r\n-\r\n-async function handleAttachmentUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file || !selectedParcel) return;\r\n-\r\n-    // Cria um objeto FormData para enviar o ficheiro\r\n-    const formData = new FormData();\r\n-    formData.append('comprovante', file);\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Atualiza a UI para mostrar o link do novo anexo\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n-\r\n-        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para remover um anexo de comprovativo.\r\n- * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n- */\r\n-async function handleRemoveAttachment() {\r\n-    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n-    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader(); // Mostra o ícone de carregamento\r\n-    try {\r\n-        // Chama a nossa função da API para apagar o anexo\r\n-        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n-\r\n-        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-\r\n-        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-\r\n-        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n-        await updateBillsOrganizer();\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n- */\r\n-function applyFiltersAndSearch() {\r\n-    const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n-    const selectedCategoryId = categoryFilterSelect.value;\r\n-\r\n-    let filteredBoletos = userBoletos.filter(bill => {\r\n-        // Filtro de pesquisa\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n-            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        if (!matchesSearch) return false;\r\n-\r\n-        // Filtro de categoria\r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-        if (!matchesCategory) return false;\r\n-\r\n-        // Filtro de status\r\n-        if (activeStatusFilter === 'all') return true;\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        return bill.parcels.some(parcel => {\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n-            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n-            return false;\r\n-        });\r\n-    });\r\n-\r\n-    renderCalendar(filteredBoletos);\r\n-    updateMonthlySummary(filteredBoletos);\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário.\r\n- */\r\n-function initializeDragAndDrop() {\r\n-    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n-\r\n-    dayCells.forEach(cell => {\r\n-        new Sortable(cell, {\r\n-            group: 'calendar-bills', // Permite mover cards entre células\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50', // Estilo do \"fantasma\" do card ao arrastar\r\n-\r\n-            // A função que é chamada QUANDO você solta um card\r\n-            onEnd: async function (evt) {\r\n-                const item = evt.item; // O card que foi arrastado\r\n-                const toCell = evt.to;   // A célula do dia onde ele foi solto\r\n-\r\n-                const boletoId = item.dataset.boletoId;\r\n-                const parcelId = item.dataset.parcelId;\r\n-                const newDate = toCell.dataset.date;\r\n-\r\n-                if (!boletoId || !parcelId || !newDate) return;\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    // Chamamos a nossa API para atualizar a data de vencimento\r\n-                    await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n-                    showToast('Data da parcela atualizada com sucesso!', 'success');\r\n-\r\n-                    // Atualizamos a aplicação inteira para refletir a mudança\r\n-                    await updateBillsOrganizer();\r\n-\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                    // Se der erro, atualizamos a interface para reverter a mudança visual\r\n-                    await updateBillsOrganizer();\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            },\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-    // Navegação entre ecrãs de login\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-\r\n-    // Submissão de formulários\r\n-    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n-    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-\r\n-\r\n-    // Ações na App Principal\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-    // Ações do Modal de Edição de Boleto\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-    // Navegação do Calendário\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-        if (currentMonth === 11) currentYear--;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-        if (currentMonth === 0) currentYear++;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    if (addCompanyCnpjInput) {\r\n-        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    if (openAddBillModalBtn) {\r\n-        openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-    }\r\n-\r\n-    const handleRedirectToHome = () => {\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    const handleFullLogoutAndRedirect = () => {\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    if (subscriptionLogoutBtn) {\r\n-        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-    }\r\n-\r\n-    if (blockedAccessLogoutBtn) {\r\n-        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n-    }\r\n-\r\n-    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-    if (settingsBtn) {\r\n-        settingsBtn.addEventListener('click', (e) => {\r\n-            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-            settingsDropdown.classList.toggle('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    // Links dentro do menu dropdown\r\n-    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCompanyInfoModal();\r\n-    });\r\n-\r\n-    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openPermissionsModal();\r\n-    });\r\n-\r\n-    window.addEventListener('click', () => {\r\n-        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n-\r\n-    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openManageUsersModal();\r\n-    });\r\n-\r\n-    // Botões do modal de gerir utilizadores\r\n-    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-    });\r\n-\r\n-    /**\r\n-     * Lida com o clique no botão de criar/renovar assinatura.\r\n-     */\r\n-    async function handleCreateSubscription() {\r\n-        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-        subscriptionActionBtn.disabled = true;\r\n-        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-        try {\r\n-            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-            const data = await api.createSubscriptionLink();\r\n-\r\n-            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-            if (data.init_point) {\r\n-                window.location.href = data.init_point;\r\n-            } else {\r\n-                throw new Error('Link de pagamento não recebido.');\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-            subscriptionActionBtn.disabled = false;\r\n-            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-        }\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão.\r\n-    if (subscriptionActionBtn) {\r\n-        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-    }\r\n-\r\n-    if (closePreviewModalBtn) {\r\n-        closePreviewModalBtn.addEventListener('click', () => {\r\n-            installmentsPreviewModal.classList.add('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    if (nfeXmlInput) {\r\n-        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-    }\r\n-\r\n-    if (previewBillNameInput) {\r\n-        previewBillNameInput.addEventListener('input', (e) => {\r\n-            if (currentBill) {\r\n-                currentBill.name = e.target.value;\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão\r\n-    if (showFullScreenBarcodeBtn) {\r\n-        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-    }\r\n-\r\n-    // Listener para o campo de pesquisa\r\n-    if (searchInput) {\r\n-        searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-    }\r\n-\r\n-    // Listeners para os botões de filtro\r\n-    if (filterButtons) {\r\n-        filterButtons.forEach(button => {\r\n-            button.addEventListener('click', (e) => {\r\n-                // Remove a classe 'active' de todos os botões\r\n-                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-                // Adiciona a classe 'active' apenas ao botão clicado\r\n-                e.currentTarget.classList.add('active');\r\n-                // Aplica o filtro\r\n-                applyFiltersAndSearch();\r\n-            });\r\n-        });\r\n-    }\r\n-\r\n-    if (forgotPasswordLink) {\r\n-        forgotPasswordLink.addEventListener('click', (e) => {\r\n-            e.preventDefault();\r\n-            forgotPasswordModal.classList.remove('hidden');\r\n-        });\r\n-    }\r\n-    if (closeForgotPasswordModal) {\r\n-        closeForgotPasswordModal.addEventListener('click', () => forgotPasswordModal.classList.add('hidden'));\r\n-    }\r\n-    if (forgotPasswordForm) {\r\n-        forgotPasswordForm.addEventListener('submit', handleForgotPasswordRequest);\r\n-    }\r\n-\r\n-    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCategoriesModal();\r\n-    });\r\n-\r\n-    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-    if (addCategoryForm) {\r\n-        addCategoryForm.addEventListener('submit', async (e) => {\r\n-            e.preventDefault();\r\n-            const name = newCategoryNameInput.value.trim();\r\n-            if (!name) return;\r\n-            try {\r\n-                await api.createCategory(name);\r\n-                newCategoryNameInput.value = '';\r\n-                await openCategoriesModal(); // Recarrega a lista do modal\r\n-                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-    });\r\n-\r\n-    if (categoryFilterSelect) {\r\n-        categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-    }\r\n-\r\n-\r\n-\r\n-\r\n-    // Inicia a aplicação\r\n-    initializeApp();\r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let inactivityTimer;\r\n-\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-const cnpjInput = document.getElementById('cnpjInput');\r\n-const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-const userLoginScreen = document.getElementById('userLoginScreen');\r\n-const userLoginForm = document.getElementById('userLoginForm');\r\n-const welcomeUserText = document.getElementById('welcomeUserText');\r\n-const userInput = document.getElementById('userInput');\r\n-const userPasswordInput = document.getElementById('userPasswordInput');\r\n-const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const forgotPasswordLink = document.getElementById('forgotPasswordLink');\r\n-const forgotPasswordModal = document.getElementById('forgotPasswordModal');\r\n-const closeForgotPasswordModal = document.getElementById('closeForgotPasswordModal');\r\n-const forgotPasswordForm = document.getElementById('forgotPasswordForm');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n-\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n- * Por padrão, usa a lista completa de boletos do utilizador.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n- */\r\n-/**\r\n- * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n- */\r\n-function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-\r\n-    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n-\r\n-    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n-    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n-\r\n-    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n-\r\n-    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    // Atualiza os elementos HTML com os valores corretos\r\n-    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n-    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n-    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com uma lista específica de boletos.\r\n- * Por padrão, usa a lista completa de boletos do utilizador.\r\n- * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n- */\r\n-function renderCalendar(boletosToRender = userBoletos) {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-        \r\n-        // Adiciona a classe 'day-cell-droppable' para o SortableJS\r\n-        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-        \r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card-draggable')) return;\r\n-            openAddBillModal(e.currentTarget.dataset.date);\r\n-        });\r\n-\r\n-        // Usa a lista 'boletosToRender' que foi passada para a função\r\n-        boletosToRender.forEach(bill => {\r\n-            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                const parcelElement = document.createElement('div');\r\n-\r\n-                // Adiciona as classes e os atributos de dados para o drag-and-drop\r\n-                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n-                parcelElement.dataset.boletoId = bill._id;\r\n-                parcelElement.dataset.parcelId = parcel._id;\r\n-                \r\n-                // Gera o conteúdo do card com todas as informações\r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                    ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n-                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n-                `;\r\n-\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        });\r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-\r\n-    // Ativa a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n-    initializeDragAndDrop();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-async function openBillModal(bill, parcel) {\r\n-    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-\r\n-    // Preenche todos os campos do modal com os dados da parcela clicada\r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-    // Mostra o botão de gerar código de barras apenas se houver um código\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-\r\n-    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n-    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n-    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n-    if (bill.nfeNumber) {\r\n-        nfeNumberEl.textContent = bill.nfeNumber;\r\n-        nfeContainer.classList.remove('hidden');\r\n-    } else {\r\n-        nfeContainer.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Lógica dinâmica para a secção de anexos\r\n-    const attachmentContainer = document.getElementById('attachment-container');\r\n-    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n-\r\n-    if (parcel.attachmentUrl) {\r\n-        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n-        attachmentContainer.innerHTML = `\r\n-            <div class=\"flex items-center justify-between\">\r\n-                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n-                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n-                </a>\r\n-                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n-            </div>\r\n-        `;\r\n-        // Adiciona o evento de clique ao novo botão de remover\r\n-        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n-    } else {\r\n-        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-        // Adiciona o evento de 'change' ao novo input de upload\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-    }\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-        categories.forEach(cat => {\r\n-            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n-        });\r\n-        if (bill.category) {\r\n-            modalBillCategorySelect.value = bill.category._id;\r\n-        } else {\r\n-            modalBillCategorySelect.value = \"\";\r\n-        }\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    if (billForm) {\r\n-        billForm.reset();\r\n-    }\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Funções para mostrar os diferentes ecrãs da aplicação.\r\n- */\r\n-function showInitialLogin() {\r\n-    hideAllScreens();\r\n-    initialLoginScreen.classList.remove('hidden');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    currentLoggedInCompany = null;\r\n-    currentLoggedInUser = null;\r\n-    isAdminLoggedIn = false;\r\n-    loggedInViaAdmin = false;\r\n-}\r\n-\r\n-function showCnpjLogin() {\r\n-    hideAllScreens();\r\n-    cnpjLoginForm.reset();\r\n-    cnpjLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showAdminLogin() {\r\n-    hideAllScreens();\r\n-    adminLoginForm.reset();\r\n-    adminLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showUserLogin(companyName) {\r\n-    hideAllScreens();\r\n-    userLoginForm.reset();\r\n-    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-    userLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    mainAppContent.classList.remove('hidden');\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-    await populateCategoryFilter();\r\n-    await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n- * @param {string} tagName - O nome da tag a ser procurada.\r\n- * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n- * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n- */\r\n-function getTagValue(tagName, parentElement) {\r\n-    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n-    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n-    return element?.textContent || '';\r\n-}\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- */\r\n-function openCompanyDetailsModal(company, users) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (users && users.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        users.forEach(user => {\r\n-            // Cria as opções do dropdown, marcando a atual como selecionada\r\n-            const roleOptions = roles.map(role =>\r\n-                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-            ).join('');\r\n-\r\n-            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona o evento para os botões \"Remover\"\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    if (password !== confirmPassword) {\r\n-        return showToast(\"As senhas não coincidem.\", \"error\");\r\n-    }\r\n-    // A verificação agora funciona para os dois casos\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.registerUser(username, password, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n-        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-\r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function openCategoriesModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        renderCategoryList(categories);\r\n-        categoriesModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function renderCategoryList(categories) {\r\n-    categoryListDiv.innerHTML = '';\r\n-    if (categories.length === 0) {\r\n-        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n-        return;\r\n-    }\r\n-    categories.forEach(category => {\r\n-        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n-                <span class=\"text-white\">${category.name}</span>\r\n-                <div>\r\n-                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n-                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n-                </div>\r\n-            </div>\r\n-        `);\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo boleto, buscando as categorias\r\n- * e opcionalmente pré-preenchendo a data.\r\n- * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n- */\r\n-async function openAddBillModal(preselectedDate = null) {\r\n-    clearBillForm();\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-        \r\n-        categories.forEach(category => {\r\n-            const option = document.createElement('option');\r\n-            option.value = category._id;\r\n-            option.textContent = category.name;\r\n-            billCategorySelect.appendChild(option);\r\n-        });\r\n-\r\n-        // Se uma data foi passada como parâmetro, nós a preenchemos\r\n-        if (preselectedDate) {\r\n-            document.getElementById('dueDate').value = preselectedDate;\r\n-        }\r\n-        \r\n-        addBillModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function populateCategoryFilter() {\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n-        // Se der erro, garante que a opção padrão exista\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-\r\n-async function handleForgotPasswordRequest(e) {\r\n-    e.preventDefault();\r\n-    const email = document.getElementById('recoveryEmailInput').value;\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.requestPasswordReset(email);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n-        forgotPasswordModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleCnpjLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n-        currentLoggedInCompany = data.company;\r\n-        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAdminLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n-        localStorage.setItem('authToken', data.token);\r\n-        isAdminLoggedIn = true;\r\n-        showToast('Login de Administrador bem-sucedido!', 'success');\r\n-        await showAdminDashboard();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList();\r\n-}\r\n-\r\n-async function handleUserLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        // 1. Faz o login do utilizador para obter um token válido.\r\n-        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n-        localStorage.setItem('authToken', loginData.token);\r\n-\r\n-        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n-        const sessionData = await api.checkSession();\r\n-        currentLoggedInUser = sessionData.user;\r\n-        currentLoggedInCompany = sessionData.company;\r\n-\r\n-        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            // Se estiver tudo OK, entra na aplicação.\r\n-            await showMainApp();\r\n-        } else {\r\n-            // Caso contrário, direciona para o ecrã correto.\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a API para obter os detalhes\r\n-                const { company, users } = await api.getCompanyDetails(companyId);\r\n-                // Chama a nossa nova função para abrir e preencher o modal\r\n-                openCompanyDetailsModal(company, users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                const { users } = await api.getCompanyDetails(companyId);\r\n-                if (users.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n-                }\r\n-                const userIdToImpersonate = users[0]._id;\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-function handleCalculateInstallments(e) {\r\n-    e.preventDefault();\r\n-    const billName = document.getElementById('billName').value;\r\n-    const categoryId = billCategorySelect.value;\r\n-    const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n-    const totalAmount = parseFloat(totalAmountValue);\r\n-    const installments = parseInt(document.getElementById('installments').value);\r\n-    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-    const description = document.getElementById('description').value;\r\n-    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n-\r\n-    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n-        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-    }\r\n-\r\n-    currentBill = { \r\n-        name: billName, \r\n-        description, \r\n-        parcels: [],\r\n-        category: categoryId || null\r\n-    };\r\n-    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-    installmentsList.innerHTML = '';\r\n-\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n-        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n-\r\n-        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n-        installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n-                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n-            </div>\r\n-        `);\r\n-    }\r\n-\r\n-    // Adiciona os eventos para os novos inputs\r\n-    addEventListenersToInstallmentInputs();\r\n-    updatePreviewTotal();\r\n-    previewBillNameInput.value = currentBill.name;\r\n-    previewNfeNumber.textContent = 'N/A';\r\n-    addBillModal.classList.add('hidden');\r\n-    installmentsPreviewModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n- */\r\n-function updatePreviewTotal() {\r\n-    if (!currentBill.parcels) return;\r\n-    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill);\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-        clearBillForm();\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-    const updatedParcelData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    const updatedBillData = {\r\n-        category: modalBillCategorySelect.value || null\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n-        await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n-\r\n-        showToast('Alterações salvas com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- * Verifica a sessão, o estado da assinatura e ações do URL.\r\n- */\r\n-async function initializeApp() {\r\n-    // Define a data atual para o calendário\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-\r\n-    // 1. Verificamos se há uma ação no URL ANTES de qualquer outra coisa\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n-    const action = urlParams.get('action');\r\n-\r\n-    if (action === 'forgot_password') {\r\n-        // Se a ação for recuperar a senha, mostramos a tela de login de empresa\r\n-        // e depois abrimos o modal de recuperação por cima.\r\n-        showCnpjLogin(); // Mostra a tela de fundo para não ficar um ecrã preto\r\n-        forgotPasswordModal.classList.remove('hidden'); // Abre o modal\r\n-        \r\n-        // Esconde o ecrã de carregamento principal para não ficar por cima\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return; // Para a execução para não continuar com a verificação de login\r\n-    }\r\n-    \r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        showInitialLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-\r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n-\r\n-        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n-\r\n-        // Define os cargos que o Proprietário pode atribuir.\r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        if (users && users.length > 0) {\r\n-            users.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-\r\n-                // Cria as opções do dropdown para Gerente e Funcionário\r\n-                const roleOptions = assignableRoles.map(role =>\r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n-                const roleHtml = isOwner\r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-\r\n-        // Adiciona o evento de clique aos botões de remover\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                // ... (a lógica de remover continua a mesma de antes)\r\n-            });\r\n-        });\r\n-\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n-\r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n-                    e.target.value = originalRole; // Reverte a seleção visual\r\n-                    return;\r\n-\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n- * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n- * @param {Event} event - O evento 'change' do input do ficheiro.\r\n- */\r\n-function handleNfeXmlUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) {\r\n-        return;\r\n-    }\r\n-\r\n-    const reader = new FileReader();\r\n-\r\n-    reader.onload = (e) => {\r\n-        try {\r\n-            const xmlString = e.target.result;\r\n-            const parser = new DOMParser();\r\n-            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-\r\n-            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n-            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n-                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n-            }\r\n-\r\n-            // Define os nós principais para evitar procuras repetidas\r\n-            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n-            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n-            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-            \r\n-            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n-            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n-            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n-\r\n-            let parcelsData = [];\r\n-\r\n-            if (duplicatas.length > 0) {\r\n-                // --- CENÁRIO 1: Encontrou as tags <dup> (padrão) ---\r\n-                parcelsData = duplicatas.map((dup, i) => ({\r\n-                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n-                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n-                    dueDate: getTagValue(\"dVenc\", dup)\r\n-                }));\r\n-            } else {\r\n-                // --- CENÁRIO 2: Procura por informações de cobrança no texto ---\r\n-                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n-                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n-                \r\n-                if (cobrancaMatch && cobrancaMatch[1]) {\r\n-                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n-                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n-                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n-                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n-\r\n-                    parcelsData = dias.map((dia, i) => {\r\n-                        const vencimento = new Date(dataEmissao);\r\n-                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n-                        return {\r\n-                            number: i + 1,\r\n-                            amount: parcelAmount,\r\n-                            dueDate: vencimento.toISOString().split('T')[0]\r\n-                        };\r\n-                    });\r\n-                }\r\n-            }\r\n-\r\n-            if (parcelsData.length > 0) {\r\n-                // --- Se encontrou parcelas (por qualquer método), vai para a pré-visualização ---\r\n-                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: parcelsData };\r\n-                \r\n-                installmentsList.innerHTML = '';\r\n-                currentBill.parcels.forEach((parcel, index) => {\r\n-                    installmentsList.insertAdjacentHTML('beforeend', `\r\n-                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                        </div>\r\n-                    `);\r\n-                });\r\n-                \r\n-                addEventListenersToInstallmentInputs();\r\n-                updatePreviewTotal();\r\n-                previewBillNameInput.value = currentBill.name;\r\n-                previewNfeNumber.textContent = nfeNumber;\r\n-                installmentsPreviewModal.classList.remove('hidden');\r\n-                \r\n-            } else {\r\n-                // --- CENÁRIO 3: Não encontrou parcelas, preenche o formulário manual ---\r\n-                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n-                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n-\r\n-                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n-                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n-                if (vencimento) {\r\n-                    document.getElementById('dueDate').value = vencimento;\r\n-                }\r\n-                \r\n-                addBillModal.classList.remove('hidden');\r\n-            }\r\n-\r\n-            showToast('Dados do XML carregados com sucesso!', 'success');\r\n-            \r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            console.error(\"Erro ao processar XML:\", error);\r\n-        } finally {\r\n-            // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n-            event.target.value = '';\r\n-        }\r\n-    };\r\n-\r\n-    reader.onerror = () => {\r\n-         showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n-    };\r\n-\r\n-    reader.readAsText(file);\r\n-}\r\n-\r\n-/**\r\n- * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n- */\r\n-function addEventListenersToInstallmentInputs() {\r\n-    // Listener para o campo de VALOR\r\n-    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n-            }\r\n-            updatePreviewTotal();\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de DATA\r\n-    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-        input.addEventListener('change', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de CÓDIGO DE BARRAS\r\n-    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n-        // Evento para guardar o valor quando é digitado\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].barcode = e.target.value;\r\n-            }\r\n-        });\r\n-\r\n-        input.addEventListener('keydown', (e) => {\r\n-            if (e.key === 'Enter') {\r\n-                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n-\r\n-                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n-                const nextIndex = currentIndex + 1;\r\n-                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n-\r\n-                if (nextInput) {\r\n-                    // Se houver um próximo campo de código de barras, foca nele.\r\n-                    nextInput.focus();\r\n-                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n-                } else {\r\n-                    // Se for o último campo, foca no botão de salvar.\r\n-                    document.getElementById('addToOrganizer').focus();\r\n-                }\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n- */\r\n-function handleShowFullScreenBarcode() {\r\n-    const barcodeValue = modalBillBarcodeInput.value;\r\n-    if (!barcodeValue) {\r\n-        return showToast('Não há código de barras para mostrar.', 'info');\r\n-    }\r\n-\r\n-    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n-    if (!barcodeImageContainer) return;\r\n-\r\n-    // Limpa qualquer código de barras anterior\r\n-    barcodeImageContainer.innerHTML = '';\r\n-\r\n-    try {\r\n-        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n-        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n-\r\n-        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n-        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n-            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n-            lineColor: \"#000000\",\r\n-            width: 2,\r\n-            height: 100,\r\n-            displayValue: true, // Mostra os números abaixo das barras\r\n-            fontSize: 18\r\n-        });\r\n-\r\n-        // Mostra o modal de ecrã inteiro\r\n-        barcodeFullScreenModal.classList.remove('hidden');\r\n-\r\n-    } catch (e) {\r\n-        console.error(\"Erro ao gerar código de barras:\", e);\r\n-        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n-    }\r\n-}\r\n-\r\n-async function handleAttachmentUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file || !selectedParcel) return;\r\n-\r\n-    // Cria um objeto FormData para enviar o ficheiro\r\n-    const formData = new FormData();\r\n-    formData.append('comprovante', file);\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Atualiza a UI para mostrar o link do novo anexo\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n-\r\n-        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para remover um anexo de comprovativo.\r\n- * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n- */\r\n-async function handleRemoveAttachment() {\r\n-    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n-    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader(); // Mostra o ícone de carregamento\r\n-    try {\r\n-        // Chama a nossa função da API para apagar o anexo\r\n-        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n-\r\n-        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-\r\n-        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-\r\n-        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n-        await updateBillsOrganizer();\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n- */\r\n-function applyFiltersAndSearch() {\r\n-    const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n-    const selectedCategoryId = categoryFilterSelect.value;\r\n-\r\n-    let filteredBoletos = userBoletos.filter(bill => {\r\n-        // Filtro de pesquisa\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) || \r\n-        (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        if (!matchesSearch) return false;\r\n-\r\n-        // Filtro de categoria\r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-        if (!matchesCategory) return false;\r\n-\r\n-        // Filtro de status\r\n-        if (activeStatusFilter === 'all') return true;\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        return bill.parcels.some(parcel => {\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n-            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n-            return false;\r\n-        });\r\n-    });\r\n-\r\n-    renderCalendar(filteredBoletos);\r\n-    updateMonthlySummary(filteredBoletos);\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário.\r\n- */\r\n-function initializeDragAndDrop() {\r\n-    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n-\r\n-    dayCells.forEach(cell => {\r\n-        new Sortable(cell, {\r\n-            group: 'calendar-bills', // Permite mover cards entre células\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50', // Estilo do \"fantasma\" do card ao arrastar\r\n-\r\n-            // A função que é chamada QUANDO você solta um card\r\n-            onEnd: async function (evt) {\r\n-                const item = evt.item; // O card que foi arrastado\r\n-                const toCell = evt.to;   // A célula do dia onde ele foi solto\r\n-\r\n-                const boletoId = item.dataset.boletoId;\r\n-                const parcelId = item.dataset.parcelId;\r\n-                const newDate = toCell.dataset.date;\r\n-\r\n-                if (!boletoId || !parcelId || !newDate) return;\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    // Chamamos a nossa API para atualizar a data de vencimento\r\n-                    await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n-                    showToast('Data da parcela atualizada com sucesso!', 'success');\r\n-\r\n-                    // Atualizamos a aplicação inteira para refletir a mudança\r\n-                    await updateBillsOrganizer();\r\n-\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                    // Se der erro, atualizamos a interface para reverter a mudança visual\r\n-                    await updateBillsOrganizer();\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            },\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-    // Navegação entre ecrãs de login\r\n-    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-\r\n-    // Submissão de formulários\r\n-    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n-    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n-    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-\r\n-\r\n-    // Ações na App Principal\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-    // Ações do Modal de Edição de Boleto\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-    // Navegação do Calendário\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-        if (currentMonth === 11) currentYear--;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-        if (currentMonth === 0) currentYear++;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    if (addCompanyCnpjInput) {\r\n-        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    if (openAddBillModalBtn) {\r\n-        openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-    }\r\n-\r\n-    const handleRedirectToHome = () => {\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    const handleFullLogoutAndRedirect = () => {\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    if (subscriptionLogoutBtn) {\r\n-        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-    }\r\n-\r\n-    if (blockedAccessLogoutBtn) {\r\n-        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n-    }\r\n-\r\n-    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-    if (settingsBtn) {\r\n-        settingsBtn.addEventListener('click', (e) => {\r\n-            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-            settingsDropdown.classList.toggle('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    // Links dentro do menu dropdown\r\n-    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCompanyInfoModal();\r\n-    });\r\n-\r\n-    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openPermissionsModal();\r\n-    });\r\n-\r\n-    window.addEventListener('click', () => {\r\n-        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n-\r\n-    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openManageUsersModal();\r\n-    });\r\n-\r\n-    // Botões do modal de gerir utilizadores\r\n-    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-    });\r\n-\r\n-    /**\r\n-     * Lida com o clique no botão de criar/renovar assinatura.\r\n-     */\r\n-    async function handleCreateSubscription() {\r\n-        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-        subscriptionActionBtn.disabled = true;\r\n-        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-        try {\r\n-            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-            const data = await api.createSubscriptionLink();\r\n-\r\n-            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-            if (data.init_point) {\r\n-                window.location.href = data.init_point;\r\n-            } else {\r\n-                throw new Error('Link de pagamento não recebido.');\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-            subscriptionActionBtn.disabled = false;\r\n-            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-        }\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão.\r\n-    if (subscriptionActionBtn) {\r\n-        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-    }\r\n-\r\n-    if (closePreviewModalBtn) {\r\n-        closePreviewModalBtn.addEventListener('click', () => {\r\n-            installmentsPreviewModal.classList.add('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    if (nfeXmlInput) {\r\n-        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-    }\r\n-\r\n-    if (previewBillNameInput) {\r\n-        previewBillNameInput.addEventListener('input', (e) => {\r\n-            if (currentBill) {\r\n-                currentBill.name = e.target.value;\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão\r\n-    if (showFullScreenBarcodeBtn) {\r\n-        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-    }\r\n-\r\n-    // Listener para o campo de pesquisa\r\n-    if (searchInput) {\r\n-        searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-    }\r\n-\r\n-    // Listeners para os botões de filtro\r\n-    if (filterButtons) {\r\n-        filterButtons.forEach(button => {\r\n-            button.addEventListener('click', (e) => {\r\n-                // Remove a classe 'active' de todos os botões\r\n-                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-                // Adiciona a classe 'active' apenas ao botão clicado\r\n-                e.currentTarget.classList.add('active');\r\n-                // Aplica o filtro\r\n-                applyFiltersAndSearch();\r\n-            });\r\n-        });\r\n-    }\r\n-\r\n-    if (forgotPasswordLink) {\r\n-        forgotPasswordLink.addEventListener('click', (e) => {\r\n-            e.preventDefault();\r\n-            forgotPasswordModal.classList.remove('hidden');\r\n-        });\r\n-    }\r\n-    if (closeForgotPasswordModal) {\r\n-        closeForgotPasswordModal.addEventListener('click', () => forgotPasswordModal.classList.add('hidden'));\r\n-    }\r\n-    if (forgotPasswordForm) {\r\n-        forgotPasswordForm.addEventListener('submit', handleForgotPasswordRequest);\r\n-    }\r\n-\r\n-    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCategoriesModal();\r\n-    });\r\n-\r\n-    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-    if (addCategoryForm) {\r\n-        addCategoryForm.addEventListener('submit', async (e) => {\r\n-            e.preventDefault();\r\n-            const name = newCategoryNameInput.value.trim();\r\n-            if (!name) return;\r\n-            try {\r\n-                await api.createCategory(name);\r\n-                newCategoryNameInput.value = '';\r\n-                await openCategoriesModal(); // Recarrega a lista do modal\r\n-                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-    });\r\n-\r\n-    if (categoryFilterSelect) {\r\n-        categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-    }\r\n-\r\n-\r\n-\r\n-\r\n-    // Inicia a aplicação\r\n-    initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753105838257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -372,41 +372,8 @@\n         showInitialLogin();\r\n     }\r\n }\r\n \r\n-/**\r\n- * Funções para mostrar os diferentes ecrãs da aplicação.\r\n- */\r\n-function showInitialLogin() {\r\n-    hideAllScreens();\r\n-    initialLoginScreen.classList.remove('hidden');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    currentLoggedInCompany = null;\r\n-    currentLoggedInUser = null;\r\n-    isAdminLoggedIn = false;\r\n-    loggedInViaAdmin = false;\r\n-}\r\n-\r\n-function showCnpjLogin() {\r\n-    hideAllScreens();\r\n-    cnpjLoginForm.reset();\r\n-    cnpjLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showAdminLogin() {\r\n-    hideAllScreens();\r\n-    adminLoginForm.reset();\r\n-    adminLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n-function showUserLogin(companyName) {\r\n-    hideAllScreens();\r\n-    userLoginForm.reset();\r\n-    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n-    userLoginScreen.classList.remove('hidden');\r\n-}\r\n-\r\n async function showMainApp() {\r\n     hideAllScreens();\r\n     mainAppContent.classList.remove('hidden');\r\n     openAddBillModalBtn.classList.remove('hidden');\r\n@@ -926,80 +893,14 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n-async function handleCnpjLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.findCompanyByCnpj(cnpjInput.value);\r\n-        currentLoggedInCompany = data.company;\r\n-        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAdminLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n-        localStorage.setItem('authToken', data.token);\r\n-        isAdminLoggedIn = true;\r\n-        showToast('Login de Administrador bem-sucedido!', 'success');\r\n-        await showAdminDashboard();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n async function showAdminDashboard() {\r\n     hideAllScreens();\r\n     adminDashboardScreen.classList.remove('hidden');\r\n     await renderCompanyList();\r\n }\r\n \r\n-async function handleUserLogin(e) {\r\n-    e.preventDefault();\r\n-    showLoader();\r\n-    try {\r\n-        // 1. Faz o login do utilizador para obter um token válido.\r\n-        const loginData = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n-        localStorage.setItem('authToken', loginData.token);\r\n-\r\n-        // 2. AGORA, com o token válido, buscamos os dados completos da sessão (utilizador + empresa).\r\n-        const sessionData = await api.checkSession();\r\n-        currentLoggedInUser = sessionData.user;\r\n-        currentLoggedInCompany = sessionData.company;\r\n-\r\n-        // 3. Verificamos o estado da assinatura (lógica igual à do initializeApp).\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            // Se estiver tudo OK, entra na aplicação.\r\n-            await showMainApp();\r\n-        } else {\r\n-            // Caso contrário, direciona para o ecrã correto.\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n async function renderCompanyList() {\r\n     showLoader();\r\n     try {\r\n         const companies = await api.getCompanies();\r\n@@ -1246,8 +1147,9 @@\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n         return; // Para a execução\r\n     }\r\n     \r\n+    // --- O resto da função continua com a verificação normal de sessão ---\r\n     const token = localStorage.getItem('authToken');\r\n     if (!token) {\r\n         showInitialLogin();\r\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n@@ -1283,8 +1185,14 @@\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n     }\r\n }\r\n \r\n+function logout() {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+}\r\n+\r\n /**\r\n  * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n  */\r\n function handleBackToAdmin() {\r\n@@ -1784,8 +1692,10 @@\n     if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n     if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n     if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n     if (forgotPasswordForm) forgotPasswordForm.addEventListener('submit', handleForgotPasswordRequest);\r\n+    if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n \r\n \r\n     // Ações na App Principal\r\n     logoutBtn.addEventListener('click', showInitialLogin);\r\n"
                },
                {
                    "date": 1753106578220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,27 +29,8 @@\n // =================================================================================\r\n // ELEMENTOS DO DOM - Referências aos elementos HTML\r\n // =================================================================================\r\n \r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\n-const showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-const cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\n-const cnpjInput = document.getElementById('cnpjInput');\r\n-const cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\n-const backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const adminUsernameInput = document.getElementById('adminUsernameInput');\r\n-const adminPasswordInput = document.getElementById('adminPasswordInput');\r\n-const backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\n-const userLoginScreen = document.getElementById('userLoginScreen');\r\n-const userLoginForm = document.getElementById('userLoginForm');\r\n-const welcomeUserText = document.getElementById('welcomeUserText');\r\n-const userInput = document.getElementById('userInput');\r\n-const userPasswordInput = document.getElementById('userPasswordInput');\r\n-const backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\n const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n const companyListDiv = document.getElementById('companyList');\r\n const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n@@ -144,12 +125,8 @@\n const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n const searchInput = document.getElementById('searchInput');\r\n const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const forgotPasswordLink = document.getElementById('forgotPasswordLink');\r\n-const forgotPasswordModal = document.getElementById('forgotPasswordModal');\r\n-const closeForgotPasswordModal = document.getElementById('closeForgotPasswordModal');\r\n-const forgotPasswordForm = document.getElementById('forgotPasswordForm');\r\n const menuCategorias = document.getElementById('menuCategorias');\r\n const categoriesModal = document.getElementById('categoriesModal');\r\n const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n const addCategoryForm = document.getElementById('addCategoryForm');\r\n@@ -1659,19 +1636,9 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', () => {\r\n-    // Navegação entre ecrãs de login\r\n-    if (showCnpjLoginBtn) showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-    if (showAdminLoginBtn) showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n-    if (backToInitialLoginBtnCnpj) backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n-    if (backToInitialLoginBtnAdmin) backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n-    if (backToCnpjLoginBtn) backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n-\r\n     // Submissão de formulários\r\n-    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n-    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n     if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n     if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n     if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n     if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n@@ -1691,9 +1658,8 @@\n     if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n     if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n     if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n     if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-    if (forgotPasswordForm) forgotPasswordForm.addEventListener('submit', handleForgotPasswordRequest);\r\n     if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n     if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n \r\n \r\n@@ -1865,18 +1831,8 @@\n             });\r\n         });\r\n     }\r\n \r\n-    if (forgotPasswordLink) {\r\n-        forgotPasswordLink.addEventListener('click', (e) => {\r\n-            e.preventDefault();\r\n-            forgotPasswordModal.classList.remove('hidden');\r\n-        });\r\n-    }\r\n-    if (closeForgotPasswordModal) {\r\n-        closeForgotPasswordModal.addEventListener('click', () => forgotPasswordModal.classList.add('hidden'));\r\n-    }\r\n-\r\n     if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n         e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n         openCategoriesModal();\r\n"
                },
                {
                    "date": 1753106600666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1638,9 +1638,8 @@\n \r\n document.addEventListener('DOMContentLoaded', () => {\r\n     // Submissão de formulários\r\n     if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n     if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n     if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n     if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n     if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n"
                },
                {
                    "date": 1753106619775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1652,9 +1652,8 @@\n     if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n     if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n     if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n     if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', showInitialLogin);\r\n     if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n     if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n     if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n     if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n"
                },
                {
                    "date": 1753106631891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1661,9 +1661,8 @@\n     if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n \r\n \r\n     // Ações na App Principal\r\n-    logoutBtn.addEventListener('click', showInitialLogin);\r\n     clearFormBtn.addEventListener('click', clearBillForm);\r\n     addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n     closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n \r\n"
                },
                {
                    "date": 1753107185104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1656,9 +1656,14 @@\n     if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n     if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n     if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n     if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-    if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n+    if (logoutBtn) {\r\n+        logoutBtn.addEventListener('click', () => {\r\n+            // Apenas redireciona para a página principal, sem limpar a sessão\r\n+            window.location.href = 'Index.html';\r\n+        });\r\n+    }\r\n     if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n \r\n \r\n     // Ações na App Principal\r\n"
                },
                {
                    "date": 1753107190713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1658,9 +1658,8 @@\n     if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n     if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n     if (logoutBtn) {\r\n         logoutBtn.addEventListener('click', () => {\r\n-            // Apenas redireciona para a página principal, sem limpar a sessão\r\n             window.location.href = 'Index.html';\r\n         });\r\n     }\r\n     if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n"
                },
                {
                    "date": 1753114014910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1714,9 +1714,11 @@\n         subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n     }\r\n \r\n     if (blockedAccessLogoutBtn) {\r\n-        blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+        blockedAccessLogoutBtn.addEventListener('click', () => {\r\n+            window.location.href = 'Index.html';\r\n+        });\r\n     }\r\n \r\n     // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n     if (settingsBtn) {\r\n"
                },
                {
                    "date": 1753279448417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,18 @@\n const billCategorySelect = document.getElementById('billCategorySelect');\r\n const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n \r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n \r\n+const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n+const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n+const calendarView = document.getElementById('calendarView');\r\n+const dashboardView = document.getElementById('dashboardView');\r\n+\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n@@ -358,9 +367,9 @@\n     loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n     backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n     settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n \r\n-    await populateCategoryFilter();\r\n+    await populateCategoryFilter(); // Se tiver essa função\r\n     await updateBillsOrganizer();\r\n }\r\n \r\n // Adicionar ao bloco de funções de Lógica e UI\r\n@@ -622,17 +631,18 @@\n         subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n         subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n         subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n     }\r\n-    subscriptionModal.classList.remove('hidden');\r\n+    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n  * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n  */\r\n function showAccessBlockedModal() {\r\n     hideAllScreens();\r\n-    accessBlockedModal.classList.remove('hidden');\r\n+    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n  * Abre o modal para criar uma nova empresa.\r\n@@ -851,8 +861,35 @@\n         categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Alterna a visualização entre o Calendário e o Dashboard.\r\n+ * @param {'calendar' | 'dashboard'} viewToShow - A visão a ser exibida.\r\n+ */\r\n+function switchView(viewToShow) {\r\n+    // 1. Esconde ambas as seções de conteúdo\r\n+    calendarView.classList.add('hidden');\r\n+    dashboardView.classList.add('hidden');\r\n+\r\n+    // 2. Remove o estilo \"ativo\" de ambos os botões\r\n+    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n+    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n+    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+\r\n+    // 3. Mostra a seção e ativa o botão correto\r\n+    if (viewToShow === 'calendar') {\r\n+        calendarView.classList.remove('hidden');\r\n+        viewCalendarBtn.classList.add('bg-indigo-600');\r\n+        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    } else if (viewToShow === 'dashboard') {\r\n+        dashboardView.classList.remove('hidden');\r\n+        viewDashboardBtn.classList.add('bg-indigo-600');\r\n+        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n@@ -873,9 +910,9 @@\n \r\n async function showAdminDashboard() {\r\n     hideAllScreens();\r\n     adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList();\r\n+    await renderCompanyList(); // Se tiver essa função\r\n }\r\n \r\n async function renderCompanyList() {\r\n     showLoader();\r\n@@ -1096,47 +1133,33 @@\n }\r\n \r\n /**\r\n  * Função de inicialização principal da aplicação.\r\n- * Verifica a sessão, o estado da assinatura e ações especiais do URL.\r\n+ * Verifica a sessão e o estado da assinatura.\r\n  */\r\n async function initializeApp() {\r\n-    // Define a data atual para o calendário\r\n     const today = new Date();\r\n     currentMonth = today.getMonth();\r\n     currentYear = today.getFullYear();\r\n-\r\n-    // 1. Verificamos se há uma ação especial no URL ANTES de qualquer outra coisa\r\n     const urlParams = new URLSearchParams(window.location.search);\r\n     const action = urlParams.get('action');\r\n-    const isAdminLogin = urlParams.get('admin') === 'true';\r\n \r\n     if (action === 'forgot_password') {\r\n-        // Se a ação for recuperar a senha, abrimos o modal diretamente\r\n-        showCnpjLogin(); // Mostra uma tela de fundo consistente\r\n-        forgotPasswordModal.classList.remove('hidden');\r\n+        showAdminLogin(); \r\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return; // Para a execução\r\n+        return; \r\n     }\r\n-\r\n-    if (isAdminLogin) {\r\n-        // Se for um acesso de admin pelo URL especial, mostra a tela de login de admin\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return; // Para a execução\r\n-    }\r\n     \r\n-    // --- O resto da função continua com a verificação normal de sessão ---\r\n     const token = localStorage.getItem('authToken');\r\n+\r\n     if (!token) {\r\n-        showInitialLogin();\r\n+        showAdminLogin();\r\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n         return;\r\n     }\r\n \r\n     try {\r\n         const data = await api.checkSession();\r\n-\r\n         if (data.user.role === 'SuperAdmin') {\r\n             isAdminLoggedIn = true;\r\n             await showAdminDashboard();\r\n         } else {\r\n@@ -1156,9 +1179,11 @@\n             }\r\n         }\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        showAdminLogin();\r\n     } finally {\r\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n     }\r\n }\r\n@@ -1423,8 +1448,17 @@\n             }\r\n         });\r\n     });\r\n \r\n+    /**\r\n+     * Mostra a tela de login de administrador.\r\n+     */\r\n+    function showAdminLogin() {\r\n+        hideAllScreens(); // Função de utils.js\r\n+        if (adminLoginForm) adminLoginForm.reset();\r\n+        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n     // Listener para o campo de CÓDIGO DE BARRAS\r\n     document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n         // Evento para guardar o valor quando é digitado\r\n         input.addEventListener('input', (e) => {\r\n@@ -1886,10 +1920,17 @@\n     if (categoryFilterSelect) {\r\n         categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n     }\r\n \r\n+    if (viewCalendarBtn) {\r\n+        viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+    }\r\n+    if (viewDashboardBtn) {\r\n+        viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+    }\r\n \r\n \r\n \r\n+\r\n     // Inicia a aplicação\r\n     initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753281232831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n let selectedParcel = null;\r\n let userBoletos = [];\r\n let currentMonth, currentYear;\r\n let inactivityTimer;\r\n+let expensesChart = null;\r\n \r\n \r\n // =================================================================================\r\n // ELEMENTOS DO DOM - Referências aos elementos HTML\r\n@@ -866,30 +867,91 @@\n  * Alterna a visualização entre o Calendário e o Dashboard.\r\n  * @param {'calendar' | 'dashboard'} viewToShow - A visão a ser exibida.\r\n  */\r\n function switchView(viewToShow) {\r\n-    // 1. Esconde ambas as seções de conteúdo\r\n+    // 1. Esconde ambas as seções de conteúdo para começar do zero.\r\n     calendarView.classList.add('hidden');\r\n     dashboardView.classList.add('hidden');\r\n \r\n-    // 2. Remove o estilo \"ativo\" de ambos os botões\r\n+    // 2. Reseta o estilo de ambos os botões para o estado \"inativo\".\r\n     viewCalendarBtn.classList.remove('bg-indigo-600');\r\n     viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n     viewDashboardBtn.classList.remove('bg-indigo-600');\r\n     viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n \r\n-    // 3. Mostra a seção e ativa o botão correto\r\n+    // 3. Mostra a seção correta e aplica o estilo \"ativo\" ao botão correspondente.\r\n     if (viewToShow === 'calendar') {\r\n         calendarView.classList.remove('hidden');\r\n+        \r\n+        // Ativa o estilo do botão do calendário\r\n         viewCalendarBtn.classList.add('bg-indigo-600');\r\n         viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n     } else if (viewToShow === 'dashboard') {\r\n         dashboardView.classList.remove('hidden');\r\n+\r\n+        // Ativa o estilo do botão do dashboard\r\n         viewDashboardBtn.classList.add('bg-indigo-600');\r\n         viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        \r\n+        // Chama a função para desenhar/atualizar o gráfico do dashboard\r\n+        renderDashboard(); \r\n     }\r\n }\r\n \r\n+/**\r\n+ * Busca os dados do relatório e renderiza o gráfico de despesas por categoria.\r\n+ */\r\n+async function renderDashboard() {\r\n+    showLoader();\r\n+    try {\r\n+        const reportData = await api.getExpensesByCategory();\r\n+\r\n+        const ctx = document.getElementById('expensesByCategoryChart').getContext('2d');\r\n+\r\n+        const labels = reportData.map(item => item.categoryName);\r\n+        const data = reportData.map(item => item.totalAmount);\r\n+\r\n+        // Se já existir um gráfico, destrói para criar um novo\r\n+        if (expensesChart) {\r\n+            expensesChart.destroy();\r\n+        }\r\n+\r\n+        // Cria o novo gráfico de pizza\r\n+        expensesChart = new Chart(ctx, {\r\n+            type: 'pie',\r\n+            data: {\r\n+                labels: labels,\r\n+                datasets: [{\r\n+                    label: 'Despesas por Categoria',\r\n+                    data: data,\r\n+                    backgroundColor: [\r\n+                        '#4f46e5', '#10b981', '#ef4444', '#f59e0b',\r\n+                        '#3b82f6', '#8b5cf6', '#ec4899', '#6366f1'\r\n+                    ],\r\n+                    borderColor: '#1f2937',\r\n+                    borderWidth: 2\r\n+                }]\r\n+            },\r\n+            options: {\r\n+                responsive: true,\r\n+                plugins: {\r\n+                    legend: {\r\n+                        position: 'top',\r\n+                        labels: {\r\n+                            color: '#d1d5db' // Cor do texto da legenda\r\n+                        }\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n@@ -1143,13 +1205,13 @@\n     const urlParams = new URLSearchParams(window.location.search);\r\n     const action = urlParams.get('action');\r\n \r\n     if (action === 'forgot_password') {\r\n-        showAdminLogin(); \r\n+        showAdminLogin();\r\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return; \r\n+        return;\r\n     }\r\n-    \r\n+\r\n     const token = localStorage.getItem('authToken');\r\n \r\n     if (!token) {\r\n         showAdminLogin();\r\n@@ -1166,9 +1228,9 @@\n             currentLoggedInUser = data.user;\r\n             currentLoggedInCompany = data.company;\r\n             const subscription = currentLoggedInCompany.subscription;\r\n             const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-            \r\n+\r\n             if (isSubscriptionActive) {\r\n                 await showMainApp();\r\n             } else {\r\n                 if (currentLoggedInUser.role === 'Proprietário') {\r\n"
                },
                {
                    "date": 1753281249169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -880,9 +880,9 @@\n \r\n     // 3. Mostra a seção correta e aplica o estilo \"ativo\" ao botão correspondente.\r\n     if (viewToShow === 'calendar') {\r\n         calendarView.classList.remove('hidden');\r\n-        \r\n+\r\n         // Ativa o estilo do botão do calendário\r\n         viewCalendarBtn.classList.add('bg-indigo-600');\r\n         viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n     } else if (viewToShow === 'dashboard') {\r\n@@ -890,11 +890,11 @@\n \r\n         // Ativa o estilo do botão do dashboard\r\n         viewDashboardBtn.classList.add('bg-indigo-600');\r\n         viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        \r\n+\r\n         // Chama a função para desenhar/atualizar o gráfico do dashboard\r\n-        renderDashboard(); \r\n+        renderDashboard();\r\n     }\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1753281805329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -903,15 +903,24 @@\n async function renderDashboard() {\r\n     showLoader();\r\n     try {\r\n         const reportData = await api.getExpensesByCategory();\r\n+        const chartContainer = document.getElementById('expensesByCategoryChart').parentElement; // Pega a div pai\r\n+        \r\n+        // NOVO: Verifica se não há dados\r\n+        if (reportData.length === 0 || reportData.every(item => item.totalAmount === 0)) {\r\n+            // Se não houver dados, exibe uma mensagem\r\n+            chartContainer.innerHTML = '<p class=\"text-center text-gray-400 py-8\">Não há despesas pagas para exibir no relatório. Marque alguns boletos como pagos no calendário.</p>';\r\n+            return; // Para a execução da função aqui\r\n+        }\r\n \r\n+        // Se houver dados, garante que o canvas exista e renderiza o gráfico\r\n+        chartContainer.innerHTML = '<canvas id=\"expensesByCategoryChart\"></canvas>';\r\n         const ctx = document.getElementById('expensesByCategoryChart').getContext('2d');\r\n-\r\n+        \r\n         const labels = reportData.map(item => item.categoryName);\r\n         const data = reportData.map(item => item.totalAmount);\r\n \r\n-        // Se já existir um gráfico, destrói para criar um novo\r\n         if (expensesChart) {\r\n             expensesChart.destroy();\r\n         }\r\n \r\n"
                },
                {
                    "date": 1753282200513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -897,21 +897,29 @@\n     }\r\n }\r\n \r\n /**\r\n- * Busca os dados do relatório e renderiza o gráfico de despesas por categoria.\r\n+ * Busca os dados do relatório e renderiza o gráfico ou uma mensagem de \"sem dados\".\r\n  */\r\n async function renderDashboard() {\r\n     showLoader();\r\n+    const chartContainer = document.getElementById('chartContainer');\r\n+    if (!chartContainer) return hideLoader();\r\n+\r\n     try {\r\n         const reportData = await api.getExpensesByCategory();\r\n-        const chartContainer = document.getElementById('expensesByCategoryChart').parentElement; // Pega a div pai\r\n         \r\n-        // NOVO: Verifica se não há dados\r\n+        // Verifica se a resposta está vazia ou se todos os valores são zero\r\n         if (reportData.length === 0 || reportData.every(item => item.totalAmount === 0)) {\r\n-            // Se não houver dados, exibe uma mensagem\r\n-            chartContainer.innerHTML = '<p class=\"text-center text-gray-400 py-8\">Não há despesas pagas para exibir no relatório. Marque alguns boletos como pagos no calendário.</p>';\r\n-            return; // Para a execução da função aqui\r\n+            // Se não houver dados, exibe uma mensagem clara\r\n+            chartContainer.innerHTML = `\r\n+                <div class=\"text-center text-gray-400 py-8\">\r\n+                    <i class=\"fas fa-chart-pie text-4xl text-gray-600 mb-4\"></i>\r\n+                    <p>Não há despesas pagas para exibir no relatório.</p>\r\n+                    <p class=\"text-sm\">Marque alguns boletos como pagos no calendário para ver os gráficos.</p>\r\n+                </div>\r\n+            `;\r\n+            return; // Para a execução da função\r\n         }\r\n \r\n         // Se houver dados, garante que o canvas exista e renderiza o gráfico\r\n         chartContainer.innerHTML = '<canvas id=\"expensesByCategoryChart\"></canvas>';\r\n@@ -923,39 +931,31 @@\n         if (expensesChart) {\r\n             expensesChart.destroy();\r\n         }\r\n \r\n-        // Cria o novo gráfico de pizza\r\n         expensesChart = new Chart(ctx, {\r\n             type: 'pie',\r\n             data: {\r\n                 labels: labels,\r\n                 datasets: [{\r\n                     label: 'Despesas por Categoria',\r\n                     data: data,\r\n-                    backgroundColor: [\r\n-                        '#4f46e5', '#10b981', '#ef4444', '#f59e0b',\r\n-                        '#3b82f6', '#8b5cf6', '#ec4899', '#6366f1'\r\n-                    ],\r\n+                    backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6', '#ec4899', '#6366f1'],\r\n                     borderColor: '#1f2937',\r\n                     borderWidth: 2\r\n                 }]\r\n             },\r\n             options: {\r\n                 responsive: true,\r\n                 plugins: {\r\n-                    legend: {\r\n-                        position: 'top',\r\n-                        labels: {\r\n-                            color: '#d1d5db' // Cor do texto da legenda\r\n-                        }\r\n-                    }\r\n+                    legend: { position: 'top', labels: { color: '#d1d5db' } }\r\n                 }\r\n             }\r\n         });\r\n \r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n+        chartContainer.innerHTML = `<p class=\"text-center text-red-400\">Ocorreu um erro ao carregar os dados do dashboard.</p>`;\r\n     } finally {\r\n         hideLoader();\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1753282797583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1991,12 +1991,10 @@\n     if (categoryFilterSelect) {\r\n         categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n     }\r\n \r\n-    if (viewCalendarBtn) {\r\n+    if (viewCalendarBtn && viewDashboardBtn) {\r\n         viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-    }\r\n-    if (viewDashboardBtn) {\r\n         viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n     }\r\n \r\n \r\n"
                },
                {
                    "date": 1753287777097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,10 @@\n let selectedParcel = null;\r\n let userBoletos = [];\r\n let currentMonth, currentYear;\r\n let inactivityTimer;\r\n-let expensesChart = null;\r\n+let expensesPieChart = null;\r\n+let expensesBarChart = null;\r\n \r\n \r\n // =================================================================================\r\n // ELEMENTOS DO DOM - Referências aos elementos HTML\r\n@@ -897,70 +898,120 @@\n     }\r\n }\r\n \r\n /**\r\n- * Busca os dados do relatório e renderiza o gráfico ou uma mensagem de \"sem dados\".\r\n+ * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n  */\r\n async function renderDashboard() {\r\n     showLoader();\r\n-    const chartContainer = document.getElementById('chartContainer');\r\n-    if (!chartContainer) return hideLoader();\r\n-\r\n     try {\r\n-        const reportData = await api.getExpensesByCategory();\r\n-        \r\n-        // Verifica se a resposta está vazia ou se todos os valores são zero\r\n-        if (reportData.length === 0 || reportData.every(item => item.totalAmount === 0)) {\r\n-            // Se não houver dados, exibe uma mensagem clara\r\n-            chartContainer.innerHTML = `\r\n-                <div class=\"text-center text-gray-400 py-8\">\r\n-                    <i class=\"fas fa-chart-pie text-4xl text-gray-600 mb-4\"></i>\r\n-                    <p>Não há despesas pagas para exibir no relatório.</p>\r\n-                    <p class=\"text-sm\">Marque alguns boletos como pagos no calendário para ver os gráficos.</p>\r\n-                </div>\r\n-            `;\r\n-            return; // Para a execução da função\r\n-        }\r\n+        // Busca os dados para ambos os gráficos em paralelo para mais eficiência\r\n+        const [pieData, barData] = await Promise.all([\r\n+            api.getExpensesByCategory(),\r\n+            api.getMonthlySummary()\r\n+        ]);\r\n \r\n-        // Se houver dados, garante que o canvas exista e renderiza o gráfico\r\n-        chartContainer.innerHTML = '<canvas id=\"expensesByCategoryChart\"></canvas>';\r\n-        const ctx = document.getElementById('expensesByCategoryChart').getContext('2d');\r\n-        \r\n-        const labels = reportData.map(item => item.categoryName);\r\n-        const data = reportData.map(item => item.totalAmount);\r\n+        renderPieChart(pieData);\r\n+        renderBarChart(barData);\r\n \r\n-        if (expensesChart) {\r\n-            expensesChart.destroy();\r\n-        }\r\n-\r\n-        expensesChart = new Chart(ctx, {\r\n-            type: 'pie',\r\n-            data: {\r\n-                labels: labels,\r\n-                datasets: [{\r\n-                    label: 'Despesas por Categoria',\r\n-                    data: data,\r\n-                    backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6', '#ec4899', '#6366f1'],\r\n-                    borderColor: '#1f2937',\r\n-                    borderWidth: 2\r\n-                }]\r\n-            },\r\n-            options: {\r\n-                responsive: true,\r\n-                plugins: {\r\n-                    legend: { position: 'top', labels: { color: '#d1d5db' } }\r\n-                }\r\n-            }\r\n-        });\r\n-\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n-        chartContainer.innerHTML = `<p class=\"text-center text-red-400\">Ocorreu um erro ao carregar os dados do dashboard.</p>`;\r\n     } finally {\r\n         hideLoader();\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Renderiza o gráfico de pizza de despesas por categoria.\r\n+ */\r\n+function renderPieChart(data) {\r\n+    const container = document.getElementById('chartContainerPie');\r\n+    if (!container) return;\r\n+    \r\n+    if (data.length === 0) {\r\n+        container.innerHTML = `<p class=\"text-center text-gray-400 pt-8\">Sem dados de categorias para exibir.</p>`;\r\n+        return;\r\n+    }\r\n+\r\n+    container.innerHTML = '<canvas id=\"expensesByCategoryChart\"></canvas>';\r\n+    const ctx = document.getElementById('expensesByCategoryChart').getContext('2d');\r\n+    \r\n+    if (expensesPieChart) expensesPieChart.destroy();\r\n+\r\n+    expensesPieChart = new Chart(ctx, {\r\n+        type: 'pie',\r\n+        data: {\r\n+            labels: data.map(item => item.categoryName),\r\n+            datasets: [{\r\n+                data: data.map(item => item.totalAmount),\r\n+                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n+                borderColor: '#1f2937',\r\n+                borderWidth: 2\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n+ */\r\n+function renderBarChart(data) {\r\n+    const container = document.getElementById('chartContainerBar');\r\n+    if (!container) return;\r\n+\r\n+    if (data.length === 0) {\r\n+        container.innerHTML = `<p class=\"text-center text-gray-400 pt-8\">Sem histórico de despesas para exibir.</p>`;\r\n+        return;\r\n+    }\r\n+\r\n+    container.innerHTML = '<canvas id=\"monthlyExpensesChart\"></canvas>';\r\n+    const ctx = document.getElementById('monthlyExpensesChart').getContext('2d');\r\n+\r\n+    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n+    \r\n+    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n+    const values = data.map(item => item.totalAmount);\r\n+\r\n+    if (expensesBarChart) expensesBarChart.destroy();\r\n+    \r\n+    expensesBarChart = new Chart(ctx, {\r\n+        type: 'bar',\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total Pago por Mês',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n+                borderColor: 'rgba(79, 70, 229, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                y: {\r\n+                    beginAtZero: true,\r\n+                    ticks: { color: '#9ca3af' },\r\n+                    grid: { color: 'rgba(156, 163, 175, 0.1)' }\r\n+                },\r\n+                x: {\r\n+                    ticks: { color: '#9ca3af' },\r\n+                    grid: { color: 'rgba(156, 163, 175, 0.1)' }\r\n+                }\r\n+            },\r\n+            plugins: {\r\n+                legend: { display: false }\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753289313419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1791,9 +1791,60 @@\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n-document.addEventListener('DOMContentLoaded', () => {\r\n+document.addEventListener('DOMContentLoaded', async () => {\r\n+    // --- Lógica de inicialização que estava em initializeApp() ---\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        // Se não houver token, redireciona para a página de login\r\n+        window.location.href = 'Index.html'; \r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    // Se for o dono da empresa, mostra o modal para renovar\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n+        // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n+        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        setTimeout(() => {\r\n+            window.location.href = 'Index.html';\r\n+        }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n+    } finally {\r\n+        // Esconde a tela de carregamento inicial\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+\r\n+\r\n     // Submissão de formulários\r\n     if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n     if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n     if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n@@ -2048,9 +2099,5 @@\n         viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n     }\r\n \r\n \r\n-\r\n-\r\n-    // Inicia a aplicação\r\n-    initializeApp();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753290186113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -925,17 +925,17 @@\n  */\r\n function renderPieChart(data) {\r\n     const container = document.getElementById('chartContainerPie');\r\n     if (!container) return;\r\n-    \r\n+\r\n     if (data.length === 0) {\r\n         container.innerHTML = `<p class=\"text-center text-gray-400 pt-8\">Sem dados de categorias para exibir.</p>`;\r\n         return;\r\n     }\r\n \r\n     container.innerHTML = '<canvas id=\"expensesByCategoryChart\"></canvas>';\r\n     const ctx = document.getElementById('expensesByCategoryChart').getContext('2d');\r\n-    \r\n+\r\n     if (expensesPieChart) expensesPieChart.destroy();\r\n \r\n     expensesPieChart = new Chart(ctx, {\r\n         type: 'pie',\r\n@@ -971,14 +971,14 @@\n     container.innerHTML = '<canvas id=\"monthlyExpensesChart\"></canvas>';\r\n     const ctx = document.getElementById('monthlyExpensesChart').getContext('2d');\r\n \r\n     const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n-    \r\n+\r\n     const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n     const values = data.map(item => item.totalAmount);\r\n \r\n     if (expensesBarChart) expensesBarChart.destroy();\r\n-    \r\n+\r\n     expensesBarChart = new Chart(ctx, {\r\n         type: 'bar',\r\n         data: {\r\n             labels: labels,\r\n@@ -1800,9 +1800,9 @@\n \r\n     const token = localStorage.getItem('authToken');\r\n     if (!token) {\r\n         // Se não houver token, redireciona para a página de login\r\n-        window.location.href = 'Index.html'; \r\n+        window.location.href = 'Index.html';\r\n         return;\r\n     }\r\n \r\n     try {\r\n"
                },
                {
                    "date": 1753290220186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -922,22 +922,40 @@\n \r\n /**\r\n  * Renderiza o gráfico de pizza de despesas por categoria.\r\n  */\r\n+/**\r\n+ * Renderiza o gráfico de pizza de despesas por categoria.\r\n+ */\r\n function renderPieChart(data) {\r\n+    // 1. Obtém referências diretas ao canvas e ao seu 'div' pai.\r\n     const container = document.getElementById('chartContainerPie');\r\n-    if (!container) return;\r\n-\r\n+    const canvas = document.getElementById('expensesByCategoryChart');\r\n+    if (!container || !canvas) return;\r\n+    \r\n+    // 2. Se não houver dados, esconde o canvas e mostra uma mensagem.\r\n     if (data.length === 0) {\r\n-        container.innerHTML = `<p class=\"text-center text-gray-400 pt-8\">Sem dados de categorias para exibir.</p>`;\r\n+        canvas.style.display = 'none'; // Esconde o gráfico\r\n+        // Remove mensagens antigas para não duplicar\r\n+        const existingMessage = container.querySelector('.no-data-message');\r\n+        if (existingMessage) existingMessage.remove();\r\n+        // Adiciona a mensagem de \"sem dados\"\r\n+        container.insertAdjacentHTML('beforeend', `<p class=\"no-data-message text-center text-gray-400 pt-8\">Sem dados de categorias para exibir.</p>`);\r\n         return;\r\n     }\r\n \r\n-    container.innerHTML = '<canvas id=\"expensesByCategoryChart\"></canvas>';\r\n-    const ctx = document.getElementById('expensesByCategoryChart').getContext('2d');\r\n+    // 3. Se houver dados, garante que o canvas está visível e remove qualquer mensagem de \"sem dados\".\r\n+    canvas.style.display = 'block';\r\n+    const existingMessage = container.querySelector('.no-data-message');\r\n+    if (existingMessage) existingMessage.remove();\r\n \r\n+    // 4. Obtém o contexto do canvas existente.\r\n+    const ctx = canvas.getContext('2d');\r\n+    \r\n+    // Destrói qualquer instância anterior do gráfico para evitar sobreposições.\r\n     if (expensesPieChart) expensesPieChart.destroy();\r\n \r\n+    // Cria o novo gráfico, exatamente como você já fazia.\r\n     expensesPieChart = new Chart(ctx, {\r\n         type: 'pie',\r\n         data: {\r\n             labels: data.map(item => item.categoryName),\r\n@@ -959,26 +977,34 @@\n /**\r\n  * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n  */\r\n function renderBarChart(data) {\r\n+    // A lógica é exatamente a mesma da função do gráfico de pizza.\r\n     const container = document.getElementById('chartContainerBar');\r\n-    if (!container) return;\r\n+    const canvas = document.getElementById('monthlyExpensesChart');\r\n+    if (!container || !canvas) return;\r\n \r\n     if (data.length === 0) {\r\n-        container.innerHTML = `<p class=\"text-center text-gray-400 pt-8\">Sem histórico de despesas para exibir.</p>`;\r\n+        canvas.style.display = 'none';\r\n+        const existingMessage = container.querySelector('.no-data-message');\r\n+        if (existingMessage) existingMessage.remove();\r\n+        container.insertAdjacentHTML('beforeend', `<p class=\"no-data-message text-center text-gray-400 pt-8\">Sem histórico de despesas para exibir.</p>`);\r\n         return;\r\n     }\r\n+    \r\n+    canvas.style.display = 'block';\r\n+    const existingMessage = container.querySelector('.no-data-message');\r\n+    if (existingMessage) existingMessage.remove();\r\n+    \r\n+    const ctx = canvas.getContext('2d');\r\n \r\n-    container.innerHTML = '<canvas id=\"monthlyExpensesChart\"></canvas>';\r\n-    const ctx = document.getElementById('monthlyExpensesChart').getContext('2d');\r\n-\r\n     const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n-\r\n+    \r\n     const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n     const values = data.map(item => item.totalAmount);\r\n \r\n     if (expensesBarChart) expensesBarChart.destroy();\r\n-\r\n+    \r\n     expensesBarChart = new Chart(ctx, {\r\n         type: 'bar',\r\n         data: {\r\n             labels: labels,\r\n"
                },
                {
                    "date": 1753290509666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -868,33 +868,28 @@\n  * Alterna a visualização entre o Calendário e o Dashboard.\r\n  * @param {'calendar' | 'dashboard'} viewToShow - A visão a ser exibida.\r\n  */\r\n function switchView(viewToShow) {\r\n-    // 1. Esconde ambas as seções de conteúdo para começar do zero.\r\n+    console.log(`[TESTE] A função switchView foi chamada para mostrar: ${viewToShow}`); // Pista 1\r\n+\r\n     calendarView.classList.add('hidden');\r\n     dashboardView.classList.add('hidden');\r\n \r\n-    // 2. Reseta o estilo de ambos os botões para o estado \"inativo\".\r\n     viewCalendarBtn.classList.remove('bg-indigo-600');\r\n     viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n     viewDashboardBtn.classList.remove('bg-indigo-600');\r\n     viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n \r\n-    // 3. Mostra a seção correta e aplica o estilo \"ativo\" ao botão correspondente.\r\n     if (viewToShow === 'calendar') {\r\n         calendarView.classList.remove('hidden');\r\n-\r\n-        // Ativa o estilo do botão do calendário\r\n         viewCalendarBtn.classList.add('bg-indigo-600');\r\n         viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n     } else if (viewToShow === 'dashboard') {\r\n         dashboardView.classList.remove('hidden');\r\n-\r\n-        // Ativa o estilo do botão do dashboard\r\n         viewDashboardBtn.classList.add('bg-indigo-600');\r\n         viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-\r\n-        // Chama a função para desenhar/atualizar o gráfico do dashboard\r\n+        \r\n+        console.log('[TESTE] Vou chamar a função renderDashboard agora.'); // Pista 2\r\n         renderDashboard();\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1753290523987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -896,15 +896,19 @@\n /**\r\n  * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n  */\r\n async function renderDashboard() {\r\n+    console.log('[TESTE] Dentro de renderDashboard. A buscar dados da API...'); // Pista 3\r\n     showLoader();\r\n     try {\r\n-        // Busca os dados para ambos os gráficos em paralelo para mais eficiência\r\n         const [pieData, barData] = await Promise.all([\r\n             api.getExpensesByCategory(),\r\n             api.getMonthlySummary()\r\n         ]);\r\n+        \r\n+        console.log('[TESTE] Dados da API recebidos!'); // Pista 4\r\n+        console.log('[TESTE] Dados para o gráfico de pizza:', pieData); // Pista 5: Mostra os dados\r\n+        console.log('[TESTE] Dados para o gráfico de barras:', barData); // Pista 6: Mostra os dados\r\n \r\n         renderPieChart(pieData);\r\n         renderBarChart(barData);\r\n \r\n"
                },
                {
                    "date": 1753290555518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -925,36 +925,38 @@\n /**\r\n  * Renderiza o gráfico de pizza de despesas por categoria.\r\n  */\r\n function renderPieChart(data) {\r\n-    // 1. Obtém referências diretas ao canvas e ao seu 'div' pai.\r\n+    console.log('[TESTE] Dentro de renderPieChart.'); // Pista 7\r\n+\r\n     const container = document.getElementById('chartContainerPie');\r\n     const canvas = document.getElementById('expensesByCategoryChart');\r\n-    if (!container || !canvas) return;\r\n     \r\n-    // 2. Se não houver dados, esconde o canvas e mostra uma mensagem.\r\n+    console.log('[TESTE] O container do gráfico de pizza foi encontrado?', container); // Pista 8\r\n+    console.log('[TESTE] O canvas do gráfico de pizza foi encontrado?', canvas); // Pista 9\r\n+    \r\n+    if (!container || !canvas) {\r\n+        console.log('[TESTE] A função renderPieChart parou aqui porque não encontrou o container ou o canvas.'); // Pista 10\r\n+        return;\r\n+    }\r\n+    \r\n     if (data.length === 0) {\r\n-        canvas.style.display = 'none'; // Esconde o gráfico\r\n-        // Remove mensagens antigas para não duplicar\r\n+        canvas.style.display = 'none'; \r\n         const existingMessage = container.querySelector('.no-data-message');\r\n         if (existingMessage) existingMessage.remove();\r\n-        // Adiciona a mensagem de \"sem dados\"\r\n         container.insertAdjacentHTML('beforeend', `<p class=\"no-data-message text-center text-gray-400 pt-8\">Sem dados de categorias para exibir.</p>`);\r\n         return;\r\n     }\r\n \r\n-    // 3. Se houver dados, garante que o canvas está visível e remove qualquer mensagem de \"sem dados\".\r\n     canvas.style.display = 'block';\r\n     const existingMessage = container.querySelector('.no-data-message');\r\n     if (existingMessage) existingMessage.remove();\r\n \r\n-    // 4. Obtém o contexto do canvas existente.\r\n     const ctx = canvas.getContext('2d');\r\n     \r\n-    // Destrói qualquer instância anterior do gráfico para evitar sobreposições.\r\n     if (expensesPieChart) expensesPieChart.destroy();\r\n \r\n-    // Cria o novo gráfico, exatamente como você já fazia.\r\n+    console.log('[TESTE] Tudo certo! A criar o gráfico de pizza...'); // Pista 11\r\n     expensesPieChart = new Chart(ctx, {\r\n         type: 'pie',\r\n         data: {\r\n             labels: data.map(item => item.categoryName),\r\n@@ -976,13 +978,21 @@\n /**\r\n  * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n  */\r\n function renderBarChart(data) {\r\n-    // A lógica é exatamente a mesma da função do gráfico de pizza.\r\n+    console.log('[TESTE] Dentro de renderBarChart.'); // Pista 12\r\n+\r\n     const container = document.getElementById('chartContainerBar');\r\n     const canvas = document.getElementById('monthlyExpensesChart');\r\n-    if (!container || !canvas) return;\r\n \r\n+    console.log('[TESTE] O container do gráfico de barras foi encontrado?', container); // Pista 13\r\n+    console.log('[TESTE] O canvas do gráfico de barras foi encontrado?', canvas); // Pista 14\r\n+\r\n+    if (!container || !canvas) {\r\n+        console.log('[TESTE] A função renderBarChart parou aqui porque não encontrou o container ou o canvas.'); // Pista 15\r\n+        return;\r\n+    }\r\n+\r\n     if (data.length === 0) {\r\n         canvas.style.display = 'none';\r\n         const existingMessage = container.querySelector('.no-data-message');\r\n         if (existingMessage) existingMessage.remove();\r\n@@ -1002,8 +1012,9 @@\n     const values = data.map(item => item.totalAmount);\r\n \r\n     if (expensesBarChart) expensesBarChart.destroy();\r\n     \r\n+    console.log('[TESTE] Tudo certo! A criar o gráfico de barras...'); // Pista 16\r\n     expensesBarChart = new Chart(ctx, {\r\n         type: 'bar',\r\n         data: {\r\n             labels: labels,\r\n"
                },
                {
                    "date": 1753290674012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -896,23 +896,19 @@\n /**\r\n  * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n  */\r\n async function renderDashboard() {\r\n-    console.log('[TESTE] Dentro de renderDashboard. A buscar dados da API...'); // Pista 3\r\n     showLoader();\r\n     try {\r\n         const [pieData, barData] = await Promise.all([\r\n             api.getExpensesByCategory(),\r\n             api.getMonthlySummary()\r\n         ]);\r\n-        \r\n-        console.log('[TESTE] Dados da API recebidos!'); // Pista 4\r\n-        console.log('[TESTE] Dados para o gráfico de pizza:', pieData); // Pista 5: Mostra os dados\r\n-        console.log('[TESTE] Dados para o gráfico de barras:', barData); // Pista 6: Mostra os dados\r\n+        setTimeout(() => {\r\n+            renderPieChart(pieData);\r\n+            renderBarChart(barData);\r\n+        }, 0);\r\n \r\n-        renderPieChart(pieData);\r\n-        renderBarChart(barData);\r\n-\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n"
                },
                {
                    "date": 1753290777328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -917,27 +917,15 @@\n \r\n /**\r\n  * Renderiza o gráfico de pizza de despesas por categoria.\r\n  */\r\n-/**\r\n- * Renderiza o gráfico de pizza de despesas por categoria.\r\n- */\r\n function renderPieChart(data) {\r\n-    console.log('[TESTE] Dentro de renderPieChart.'); // Pista 7\r\n-\r\n     const container = document.getElementById('chartContainerPie');\r\n     const canvas = document.getElementById('expensesByCategoryChart');\r\n+    if (!container || !canvas) return;\r\n     \r\n-    console.log('[TESTE] O container do gráfico de pizza foi encontrado?', container); // Pista 8\r\n-    console.log('[TESTE] O canvas do gráfico de pizza foi encontrado?', canvas); // Pista 9\r\n-    \r\n-    if (!container || !canvas) {\r\n-        console.log('[TESTE] A função renderPieChart parou aqui porque não encontrou o container ou o canvas.'); // Pista 10\r\n-        return;\r\n-    }\r\n-    \r\n     if (data.length === 0) {\r\n-        canvas.style.display = 'none'; \r\n+        canvas.style.display = 'none';\r\n         const existingMessage = container.querySelector('.no-data-message');\r\n         if (existingMessage) existingMessage.remove();\r\n         container.insertAdjacentHTML('beforeend', `<p class=\"no-data-message text-center text-gray-400 pt-8\">Sem dados de categorias para exibir.</p>`);\r\n         return;\r\n@@ -950,9 +938,8 @@\n     const ctx = canvas.getContext('2d');\r\n     \r\n     if (expensesPieChart) expensesPieChart.destroy();\r\n \r\n-    console.log('[TESTE] Tudo certo! A criar o gráfico de pizza...'); // Pista 11\r\n     expensesPieChart = new Chart(ctx, {\r\n         type: 'pie',\r\n         data: {\r\n             labels: data.map(item => item.categoryName),\r\n@@ -968,8 +955,11 @@\n             maintainAspectRatio: false,\r\n             plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n         }\r\n     });\r\n+\r\n+    // A NOSSA NOVA PISTA ESTÁ AQUI:\r\n+    console.log('[INSPEÇÃO] Objeto do gráfico de pizza criado:', expensesPieChart);\r\n }\r\n \r\n /**\r\n  * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n"
                },
                {
                    "date": 1753290944101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -902,12 +902,14 @@\n         const [pieData, barData] = await Promise.all([\r\n             api.getExpensesByCategory(),\r\n             api.getMonthlySummary()\r\n         ]);\r\n+\r\n+        // A MUDANÇA FINAL ESTÁ AQUI: Aumentamos o tempo de espera.\r\n         setTimeout(() => {\r\n             renderPieChart(pieData);\r\n             renderBarChart(barData);\r\n-        }, 0);\r\n+        }, 50); // Alterado de 0 para 50 milissegundos\r\n \r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n"
                },
                {
                    "date": 1753291101923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -903,13 +903,10 @@\n             api.getExpensesByCategory(),\r\n             api.getMonthlySummary()\r\n         ]);\r\n \r\n-        // A MUDANÇA FINAL ESTÁ AQUI: Aumentamos o tempo de espera.\r\n-        setTimeout(() => {\r\n-            renderPieChart(pieData);\r\n-            renderBarChart(barData);\r\n-        }, 50); // Alterado de 0 para 50 milissegundos\r\n+        renderPieChart(pieData);\r\n+        renderBarChart(barData);\r\n \r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n@@ -958,29 +955,20 @@\n             plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n         }\r\n     });\r\n \r\n-    // A NOSSA NOVA PISTA ESTÁ AQUI:\r\n-    console.log('[INSPEÇÃO] Objeto do gráfico de pizza criado:', expensesPieChart);\r\n+    // A NOVA LINHA MÁGICA: Força o gráfico a recalcular o seu tamanho.\r\n+    setTimeout(() => expensesPieChart.resize(), 50);\r\n }\r\n \r\n /**\r\n  * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n  */\r\n function renderBarChart(data) {\r\n-    console.log('[TESTE] Dentro de renderBarChart.'); // Pista 12\r\n-\r\n     const container = document.getElementById('chartContainerBar');\r\n     const canvas = document.getElementById('monthlyExpensesChart');\r\n+    if (!container || !canvas) return;\r\n \r\n-    console.log('[TESTE] O container do gráfico de barras foi encontrado?', container); // Pista 13\r\n-    console.log('[TESTE] O canvas do gráfico de barras foi encontrado?', canvas); // Pista 14\r\n-\r\n-    if (!container || !canvas) {\r\n-        console.log('[TESTE] A função renderBarChart parou aqui porque não encontrou o container ou o canvas.'); // Pista 15\r\n-        return;\r\n-    }\r\n-\r\n     if (data.length === 0) {\r\n         canvas.style.display = 'none';\r\n         const existingMessage = container.querySelector('.no-data-message');\r\n         if (existingMessage) existingMessage.remove();\r\n@@ -1000,9 +988,8 @@\n     const values = data.map(item => item.totalAmount);\r\n \r\n     if (expensesBarChart) expensesBarChart.destroy();\r\n     \r\n-    console.log('[TESTE] Tudo certo! A criar o gráfico de barras...'); // Pista 16\r\n     expensesBarChart = new Chart(ctx, {\r\n         type: 'bar',\r\n         data: {\r\n             labels: labels,\r\n@@ -1032,8 +1019,11 @@\n                 legend: { display: false }\r\n             }\r\n         }\r\n     });\r\n+\r\n+    // A NOVA LINHA MÁGICA TAMBÉM AQUI: Força o gráfico a recalcular o seu tamanho.\r\n+    setTimeout(() => expensesBarChart.resize(), 50);\r\n }\r\n \r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n"
                },
                {
                    "date": 1753291356322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,10 +369,12 @@\n     loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n     backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n     settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n \r\n-    await populateCategoryFilter(); // Se tiver essa função\r\n+    await populateCategoryFilter();\r\n     await updateBillsOrganizer();\r\n+\r\n+    renderDashboard(); \r\n }\r\n \r\n // Adicionar ao bloco de funções de Lógica e UI\r\n \r\n@@ -896,47 +898,33 @@\n /**\r\n  * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n  */\r\n async function renderDashboard() {\r\n-    showLoader();\r\n     try {\r\n         const [pieData, barData] = await Promise.all([\r\n             api.getExpensesByCategory(),\r\n             api.getMonthlySummary()\r\n         ]);\r\n-\r\n         renderPieChart(pieData);\r\n         renderBarChart(barData);\r\n-\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n     }\r\n }\r\n \r\n /**\r\n  * Renderiza o gráfico de pizza de despesas por categoria.\r\n  */\r\n function renderPieChart(data) {\r\n-    const container = document.getElementById('chartContainerPie');\r\n     const canvas = document.getElementById('expensesByCategoryChart');\r\n-    if (!container || !canvas) return;\r\n-    \r\n+    if (!canvas) return;\r\n+\r\n     if (data.length === 0) {\r\n-        canvas.style.display = 'none';\r\n-        const existingMessage = container.querySelector('.no-data-message');\r\n-        if (existingMessage) existingMessage.remove();\r\n-        container.insertAdjacentHTML('beforeend', `<p class=\"no-data-message text-center text-gray-400 pt-8\">Sem dados de categorias para exibir.</p>`);\r\n+        // Lógica para quando não há dados (não faremos nada por agora para simplificar)\r\n         return;\r\n     }\r\n-\r\n-    canvas.style.display = 'block';\r\n-    const existingMessage = container.querySelector('.no-data-message');\r\n-    if (existingMessage) existingMessage.remove();\r\n-\r\n+    \r\n     const ctx = canvas.getContext('2d');\r\n-    \r\n     if (expensesPieChart) expensesPieChart.destroy();\r\n \r\n     expensesPieChart = new Chart(ctx, {\r\n         type: 'pie',\r\n@@ -954,11 +942,8 @@\n             maintainAspectRatio: false,\r\n             plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n         }\r\n     });\r\n-\r\n-    // A NOVA LINHA MÁGICA: Força o gráfico a recalcular o seu tamanho.\r\n-    setTimeout(() => expensesPieChart.resize(), 50);\r\n }\r\n \r\n /**\r\n  * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n"
                },
                {
                    "date": 1753291376303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -948,28 +948,17 @@\n /**\r\n  * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n  */\r\n function renderBarChart(data) {\r\n-    const container = document.getElementById('chartContainerBar');\r\n     const canvas = document.getElementById('monthlyExpensesChart');\r\n-    if (!container || !canvas) return;\r\n+    if (!canvas) return;\r\n \r\n     if (data.length === 0) {\r\n-        canvas.style.display = 'none';\r\n-        const existingMessage = container.querySelector('.no-data-message');\r\n-        if (existingMessage) existingMessage.remove();\r\n-        container.insertAdjacentHTML('beforeend', `<p class=\"no-data-message text-center text-gray-400 pt-8\">Sem histórico de despesas para exibir.</p>`);\r\n         return;\r\n     }\r\n     \r\n-    canvas.style.display = 'block';\r\n-    const existingMessage = container.querySelector('.no-data-message');\r\n-    if (existingMessage) existingMessage.remove();\r\n-    \r\n     const ctx = canvas.getContext('2d');\r\n-\r\n     const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n-    \r\n     const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n     const values = data.map(item => item.totalAmount);\r\n \r\n     if (expensesBarChart) expensesBarChart.destroy();\r\n@@ -989,26 +978,14 @@\n         options: {\r\n             responsive: true,\r\n             maintainAspectRatio: false,\r\n             scales: {\r\n-                y: {\r\n-                    beginAtZero: true,\r\n-                    ticks: { color: '#9ca3af' },\r\n-                    grid: { color: 'rgba(156, 163, 175, 0.1)' }\r\n-                },\r\n-                x: {\r\n-                    ticks: { color: '#9ca3af' },\r\n-                    grid: { color: 'rgba(156, 163, 175, 0.1)' }\r\n-                }\r\n+                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n             },\r\n-            plugins: {\r\n-                legend: { display: false }\r\n-            }\r\n+            plugins: { legend: { display: false } }\r\n         }\r\n     });\r\n-\r\n-    // A NOVA LINHA MÁGICA TAMBÉM AQUI: Força o gráfico a recalcular o seu tamanho.\r\n-    setTimeout(() => expensesBarChart.resize(), 50);\r\n }\r\n \r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n"
                },
                {
                    "date": 1753291624794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,10 +371,8 @@\n     settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n \r\n     await populateCategoryFilter();\r\n     await updateBillsOrganizer();\r\n-\r\n-    renderDashboard(); \r\n }\r\n \r\n // Adicionar ao bloco de funções de Lógica e UI\r\n \r\n"
                },
                {
                    "date": 1753291906347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,8 @@\n let currentBill = {};\r\n let selectedParcel = null;\r\n let userBoletos = [];\r\n let currentMonth, currentYear;\r\n-let inactivityTimer;\r\n let expensesPieChart = null;\r\n let expensesBarChart = null;\r\n \r\n \r\n@@ -369,10 +368,10 @@\n     loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n     backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n     settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n \r\n-    await populateCategoryFilter();\r\n-    await updateBillsOrganizer();\r\n+    // await populateCategoryFilter();\r\n+    // await updateBillsOrganizer();\r\n }\r\n \r\n // Adicionar ao bloco de funções de Lógica e UI\r\n \r\n@@ -868,10 +867,8 @@\n  * Alterna a visualização entre o Calendário e o Dashboard.\r\n  * @param {'calendar' | 'dashboard'} viewToShow - A visão a ser exibida.\r\n  */\r\n function switchView(viewToShow) {\r\n-    console.log(`[TESTE] A função switchView foi chamada para mostrar: ${viewToShow}`); // Pista 1\r\n-\r\n     calendarView.classList.add('hidden');\r\n     dashboardView.classList.add('hidden');\r\n \r\n     viewCalendarBtn.classList.remove('bg-indigo-600');\r\n@@ -886,10 +883,8 @@\n     } else if (viewToShow === 'dashboard') {\r\n         dashboardView.classList.remove('hidden');\r\n         viewDashboardBtn.classList.add('bg-indigo-600');\r\n         viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        \r\n-        console.log('[TESTE] Vou chamar a função renderDashboard agora.'); // Pista 2\r\n         renderDashboard();\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1753291916733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -891,17 +891,22 @@\n /**\r\n  * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n  */\r\n async function renderDashboard() {\r\n+    showLoader();\r\n     try {\r\n         const [pieData, barData] = await Promise.all([\r\n             api.getExpensesByCategory(),\r\n             api.getMonthlySummary()\r\n         ]);\r\n+        \r\n         renderPieChart(pieData);\r\n         renderBarChart(barData);\r\n+\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n     }\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1753291927735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -913,16 +913,23 @@\n  * Renderiza o gráfico de pizza de despesas por categoria.\r\n  */\r\n function renderPieChart(data) {\r\n     const canvas = document.getElementById('expensesByCategoryChart');\r\n-    if (!canvas) return;\r\n+    const container = document.getElementById('chartContainerPie');\r\n+    if (!container || !canvas) return;\r\n \r\n+    const noDataMessage = container.querySelector('.no-data-message');\r\n+    if (noDataMessage) noDataMessage.remove();\r\n+    \r\n     if (data.length === 0) {\r\n-        // Lógica para quando não há dados (não faremos nada por agora para simplificar)\r\n+        canvas.style.display = 'none';\r\n+        container.insertAdjacentHTML('beforeend', `<p class=\"no-data-message text-center text-gray-400 pt-8\">Sem dados de categorias para exibir.</p>`);\r\n         return;\r\n     }\r\n+\r\n+    canvas.style.display = 'block';\r\n+    const ctx = canvas.getContext('2d');\r\n     \r\n-    const ctx = canvas.getContext('2d');\r\n     if (expensesPieChart) expensesPieChart.destroy();\r\n \r\n     expensesPieChart = new Chart(ctx, {\r\n         type: 'pie',\r\n"
                },
                {
                    "date": 1753291942928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -954,14 +954,21 @@\n  * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n  */\r\n function renderBarChart(data) {\r\n     const canvas = document.getElementById('monthlyExpensesChart');\r\n-    if (!canvas) return;\r\n+    const container = document.getElementById('chartContainerBar');\r\n+    if (!container || !canvas) return;\r\n \r\n+    const noDataMessage = container.querySelector('.no-data-message');\r\n+    if (noDataMessage) noDataMessage.remove();\r\n+\r\n     if (data.length === 0) {\r\n+        canvas.style.display = 'none';\r\n+        container.insertAdjacentHTML('beforeend', `<p class=\"no-data-message text-center text-gray-400 pt-8\">Sem histórico de despesas para exibir.</p>`);\r\n         return;\r\n     }\r\n     \r\n+    canvas.style.display = 'block';\r\n     const ctx = canvas.getContext('2d');\r\n     const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n     const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n     const values = data.map(item => item.totalAmount);\r\n"
                },
                {
                    "date": 1753291959150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2081,10 +2081,12 @@\n     if (categoryFilterSelect) {\r\n         categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n     }\r\n \r\n-    if (viewCalendarBtn && viewDashboardBtn) {\r\n+    if (viewCalendarBtn) {\r\n         viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+    }\r\n+    if (viewDashboardBtn) {\r\n         viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n     }\r\n \r\n \r\n"
                },
                {
                    "date": 1753292001016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,10 +368,10 @@\n     loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n     backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n     settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n \r\n-    // await populateCategoryFilter();\r\n-    // await updateBillsOrganizer();\r\n+     await populateCategoryFilter();\r\n+     await updateBillsOrganizer();\r\n }\r\n \r\n // Adicionar ao bloco de funções de Lógica e UI\r\n \r\n"
                },
                {
                    "date": 1753292466024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -864,19 +864,21 @@\n }\r\n \r\n /**\r\n  * Alterna a visualização entre o Calendário e o Dashboard.\r\n- * @param {'calendar' | 'dashboard'} viewToShow - A visão a ser exibida.\r\n  */\r\n function switchView(viewToShow) {\r\n+    // Esconde ambas as vistas\r\n     calendarView.classList.add('hidden');\r\n     dashboardView.classList.add('hidden');\r\n \r\n+    // Reseta o estilo dos botões\r\n     viewCalendarBtn.classList.remove('bg-indigo-600');\r\n     viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n     viewDashboardBtn.classList.remove('bg-indigo-600');\r\n     viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n \r\n+    // Mostra a vista correta e ativa o botão correspondente\r\n     if (viewToShow === 'calendar') {\r\n         calendarView.classList.remove('hidden');\r\n         viewCalendarBtn.classList.add('bg-indigo-600');\r\n         viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n@@ -900,9 +902,8 @@\n         ]);\r\n         \r\n         renderPieChart(pieData);\r\n         renderBarChart(barData);\r\n-\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n@@ -913,25 +914,15 @@\n  * Renderiza o gráfico de pizza de despesas por categoria.\r\n  */\r\n function renderPieChart(data) {\r\n     const canvas = document.getElementById('expensesByCategoryChart');\r\n-    const container = document.getElementById('chartContainerPie');\r\n-    if (!container || !canvas) return;\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n \r\n-    const noDataMessage = container.querySelector('.no-data-message');\r\n-    if (noDataMessage) noDataMessage.remove();\r\n-    \r\n-    if (data.length === 0) {\r\n-        canvas.style.display = 'none';\r\n-        container.insertAdjacentHTML('beforeend', `<p class=\"no-data-message text-center text-gray-400 pt-8\">Sem dados de categorias para exibir.</p>`);\r\n-        return;\r\n+    if (expensesPieChart) {\r\n+        expensesPieChart.destroy();\r\n     }\r\n \r\n-    canvas.style.display = 'block';\r\n-    const ctx = canvas.getContext('2d');\r\n-    \r\n-    if (expensesPieChart) expensesPieChart.destroy();\r\n-\r\n     expensesPieChart = new Chart(ctx, {\r\n         type: 'pie',\r\n         data: {\r\n             labels: data.map(item => item.categoryName),\r\n@@ -954,27 +945,18 @@\n  * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n  */\r\n function renderBarChart(data) {\r\n     const canvas = document.getElementById('monthlyExpensesChart');\r\n-    const container = document.getElementById('chartContainerBar');\r\n-    if (!container || !canvas) return;\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n \r\n-    const noDataMessage = container.querySelector('.no-data-message');\r\n-    if (noDataMessage) noDataMessage.remove();\r\n-\r\n-    if (data.length === 0) {\r\n-        canvas.style.display = 'none';\r\n-        container.insertAdjacentHTML('beforeend', `<p class=\"no-data-message text-center text-gray-400 pt-8\">Sem histórico de despesas para exibir.</p>`);\r\n-        return;\r\n-    }\r\n-    \r\n-    canvas.style.display = 'block';\r\n-    const ctx = canvas.getContext('2d');\r\n     const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n     const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n     const values = data.map(item => item.totalAmount);\r\n \r\n-    if (expensesBarChart) expensesBarChart.destroy();\r\n+    if (expensesBarChart) {\r\n+        expensesBarChart.destroy();\r\n+    }\r\n     \r\n     expensesBarChart = new Chart(ctx, {\r\n         type: 'bar',\r\n         data: {\r\n"
                },
                {
                    "date": 1753306923082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2076 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let expensesPieChart = null;\r\n+let expensesBarChart = null;\r\n+\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+\r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+\r\n+const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n+const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n+const calendarView = document.getElementById('calendarView');\r\n+const dashboardView = document.getElementById('dashboardView');\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n+ * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n+ */\r\n+/**\r\n+ * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n+ */\r\n+function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+\r\n+    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n+\r\n+    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n+    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n+\r\n+    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n+\r\n+    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    // Atualiza os elementos HTML com os valores corretos\r\n+    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n+    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n+    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com uma lista específica de boletos.\r\n+ * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n+ */\r\n+function renderCalendar(boletosToRender = userBoletos) {\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+\r\n+        // Adiciona a classe 'day-cell-droppable' para o SortableJS\r\n+        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+\r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card-draggable')) return;\r\n+            openAddBillModal(e.currentTarget.dataset.date);\r\n+        });\r\n+\r\n+        // Usa a lista 'boletosToRender' que foi passada para a função\r\n+        boletosToRender.forEach(bill => {\r\n+            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                const parcelElement = document.createElement('div');\r\n+\r\n+                // Adiciona as classes e os atributos de dados para o drag-and-drop\r\n+                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n+                parcelElement.dataset.boletoId = bill._id;\r\n+                parcelElement.dataset.parcelId = parcel._id;\r\n+\r\n+                // Gera o conteúdo do card com todas as informações\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n+                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                    ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n+                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n+                `;\r\n+\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        });\r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+\r\n+    // Ativa a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n+    initializeDragAndDrop();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+async function openBillModal(bill, parcel) {\r\n+    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+\r\n+    // Preenche todos os campos do modal com os dados da parcela clicada\r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+    // Mostra o botão de gerar código de barras apenas se houver um código\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+\r\n+    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n+    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n+    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n+    if (bill.nfeNumber) {\r\n+        nfeNumberEl.textContent = bill.nfeNumber;\r\n+        nfeContainer.classList.remove('hidden');\r\n+    } else {\r\n+        nfeContainer.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Lógica dinâmica para a secção de anexos\r\n+    const attachmentContainer = document.getElementById('attachment-container');\r\n+    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n+\r\n+    if (parcel.attachmentUrl) {\r\n+        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n+        attachmentContainer.innerHTML = `\r\n+            <div class=\"flex items-center justify-between\">\r\n+                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n+                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n+                </a>\r\n+                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n+            </div>\r\n+        `;\r\n+        // Adiciona o evento de clique ao novo botão de remover\r\n+        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n+    } else {\r\n+        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        // Adiciona o evento de 'change' ao novo input de upload\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+    }\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        categories.forEach(cat => {\r\n+            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n+        });\r\n+        if (bill.category) {\r\n+            modalBillCategorySelect.value = bill.category._id;\r\n+        } else {\r\n+            modalBillCategorySelect.value = \"\";\r\n+        }\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    if (billForm) {\r\n+        billForm.reset();\r\n+    }\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        totalBillsSpan.textContent = totalParcels;\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    mainAppContent.classList.remove('hidden');\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+     await populateCategoryFilter();\r\n+     await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n+ * @param {string} tagName - O nome da tag a ser procurada.\r\n+ * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n+ * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n+ */\r\n+function getTagValue(tagName, parentElement) {\r\n+    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n+    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n+    return element?.textContent || '';\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ */\r\n+function openCompanyDetailsModal(company, users) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (users && users.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        users.forEach(user => {\r\n+            // Cria as opções do dropdown, marcando a atual como selecionada\r\n+            const roleOptions = roles.map(role =>\r\n+                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+            ).join('');\r\n+\r\n+            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona o evento para os botões \"Remover\"\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    if (password !== confirmPassword) {\r\n+        return showToast(\"As senhas não coincidem.\", \"error\");\r\n+    }\r\n+    // A verificação agora funciona para os dois casos\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.registerUser(username, password, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n+        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+\r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function openCategoriesModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        renderCategoryList(categories);\r\n+        categoriesModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function renderCategoryList(categories) {\r\n+    categoryListDiv.innerHTML = '';\r\n+    if (categories.length === 0) {\r\n+        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n+        return;\r\n+    }\r\n+    categories.forEach(category => {\r\n+        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n+                <span class=\"text-white\">${category.name}</span>\r\n+                <div>\r\n+                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n+                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                </div>\r\n+            </div>\r\n+        `);\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo boleto, buscando as categorias\r\n+ * e opcionalmente pré-preenchendo a data.\r\n+ * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n+ */\r\n+async function openAddBillModal(preselectedDate = null) {\r\n+    clearBillForm();\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+\r\n+        categories.forEach(category => {\r\n+            const option = document.createElement('option');\r\n+            option.value = category._id;\r\n+            option.textContent = category.name;\r\n+            billCategorySelect.appendChild(option);\r\n+        });\r\n+\r\n+        // Se uma data foi passada como parâmetro, nós a preenchemos\r\n+        if (preselectedDate) {\r\n+            document.getElementById('dueDate').value = preselectedDate;\r\n+        }\r\n+\r\n+        addBillModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function populateCategoryFilter() {\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n+        // Se der erro, garante que a opção padrão exista\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Alterna a visualização entre o Calendário e o Dashboard.\r\n+ */\r\n+function switchView(viewToShow) {\r\n+    // Esconde ambas as vistas\r\n+    calendarView.classList.add('hidden');\r\n+    dashboardView.classList.add('hidden');\r\n+\r\n+    // Reseta o estilo dos botões\r\n+    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n+    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n+    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+\r\n+    // Mostra a vista correta e ativa o botão correspondente\r\n+    if (viewToShow === 'calendar') {\r\n+        calendarView.classList.remove('hidden');\r\n+        viewCalendarBtn.classList.add('bg-indigo-600');\r\n+        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    } else if (viewToShow === 'dashboard') {\r\n+        dashboardView.classList.remove('hidden');\r\n+        viewDashboardBtn.classList.add('bg-indigo-600');\r\n+        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderDashboard();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n+ */\r\n+async function renderDashboard() {\r\n+    showLoader();\r\n+    try {\r\n+        const [pieData, barData] = await Promise.all([\r\n+            api.getExpensesByCategory(),\r\n+            api.getMonthlySummary()\r\n+        ]);\r\n+        \r\n+        renderPieChart(pieData);\r\n+        renderBarChart(barData);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de pizza de despesas por categoria.\r\n+ */\r\n+function renderPieChart(data) {\r\n+    const canvas = document.getElementById('expensesByCategoryChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    if (expensesPieChart) {\r\n+        expensesPieChart.destroy();\r\n+    }\r\n+\r\n+    expensesPieChart = new Chart(ctx, {\r\n+        type: 'pie',\r\n+        data: {\r\n+            labels: data.map(item => item.categoryName),\r\n+            datasets: [{\r\n+                data: data.map(item => item.totalAmount),\r\n+                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n+                borderColor: '#1f2937',\r\n+                borderWidth: 2\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n+ */\r\n+function renderBarChart(data) {\r\n+    const canvas = document.getElementById('monthlyExpensesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n+    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n+    const values = data.map(item => item.totalAmount);\r\n+\r\n+    if (expensesBarChart) {\r\n+        expensesBarChart.destroy();\r\n+    }\r\n+    \r\n+    expensesBarChart = new Chart(ctx, {\r\n+        type: 'bar',\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total Pago por Mês',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n+                borderColor: 'rgba(79, 70, 229, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n+            },\r\n+            plugins: { legend: { display: false } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+\r\n+async function handleForgotPasswordRequest(e) {\r\n+    e.preventDefault();\r\n+    const email = document.getElementById('recoveryEmailInput').value;\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.requestPasswordReset(email);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n+        forgotPasswordModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList(); // Se tiver essa função\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a API para obter os detalhes\r\n+                const { company, users } = await api.getCompanyDetails(companyId);\r\n+                // Chama a nossa nova função para abrir e preencher o modal\r\n+                openCompanyDetailsModal(company, users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { users } = await api.getCompanyDetails(companyId);\r\n+                if (users.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                }\r\n+                const userIdToImpersonate = users[0]._id;\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+function handleCalculateInstallments(e) {\r\n+    e.preventDefault();\r\n+    const billName = document.getElementById('billName').value;\r\n+    const categoryId = billCategorySelect.value;\r\n+    const dueDate = document.getElementById('dueDate').value;\r\n+    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n+    const totalAmount = parseFloat(totalAmountValue);\r\n+    const installments = parseInt(document.getElementById('installments').value);\r\n+    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+    const description = document.getElementById('description').value;\r\n+    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n+\r\n+    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n+        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+    }\r\n+\r\n+    currentBill = {\r\n+        name: billName,\r\n+        description,\r\n+        parcels: [],\r\n+        category: categoryId || null\r\n+    };\r\n+    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+    installmentsList.innerHTML = '';\r\n+\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n+        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n+\r\n+        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n+        installmentsList.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n+                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n+            </div>\r\n+        `);\r\n+    }\r\n+\r\n+    // Adiciona os eventos para os novos inputs\r\n+    addEventListenersToInstallmentInputs();\r\n+    updatePreviewTotal();\r\n+    previewBillNameInput.value = currentBill.name;\r\n+    previewNfeNumber.textContent = 'N/A';\r\n+    addBillModal.classList.add('hidden');\r\n+    installmentsPreviewModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n+ */\r\n+function updatePreviewTotal() {\r\n+    if (!currentBill.parcels) return;\r\n+    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill);\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+        clearBillForm();\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+    const updatedParcelData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    const updatedBillData = {\r\n+        category: modalBillCategorySelect.value || null\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n+        await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n+\r\n+        showToast('Alterações salvas com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ * Verifica a sessão e o estado da assinatura.\r\n+ */\r\n+async function initializeApp() {\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n+    const action = urlParams.get('action');\r\n+\r\n+    if (action === 'forgot_password') {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+\r\n+    if (!token) {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        showAdminLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+function logout() {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+\r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n+\r\n+        // Define os cargos que o Proprietário pode atribuir.\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+        if (users && users.length > 0) {\r\n+            users.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+\r\n+                // Cria as opções do dropdown para Gerente e Funcionário\r\n+                const roleOptions = assignableRoles.map(role =>\r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n+                const roleHtml = isOwner\r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+\r\n+        // Adiciona o evento de clique aos botões de remover\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                // ... (a lógica de remover continua a mesma de antes)\r\n+            });\r\n+        });\r\n+\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n+\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n+                    e.target.value = originalRole; // Reverte a seleção visual\r\n+                    return;\r\n+\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n+ * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n+ * @param {Event} event - O evento 'change' do input do ficheiro.\r\n+ */\r\n+function handleNfeXmlUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) {\r\n+        return;\r\n+    }\r\n+\r\n+    const reader = new FileReader();\r\n+\r\n+    reader.onload = (e) => {\r\n+        try {\r\n+            const xmlString = e.target.result;\r\n+            const parser = new DOMParser();\r\n+            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n+\r\n+            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n+            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n+                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n+            }\r\n+\r\n+            // Define os nós principais para evitar procuras repetidas\r\n+            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n+            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n+\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n+\r\n+            let parcelsData = [];\r\n+\r\n+            if (duplicatas.length > 0) {\r\n+                // --- CENÁRIO 1: Encontrou as tags <dup> (padrão) ---\r\n+                parcelsData = duplicatas.map((dup, i) => ({\r\n+                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n+                    dueDate: getTagValue(\"dVenc\", dup)\r\n+                }));\r\n+            } else {\r\n+                // --- CENÁRIO 2: Procura por informações de cobrança no texto ---\r\n+                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n+                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n+\r\n+                if (cobrancaMatch && cobrancaMatch[1]) {\r\n+                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n+                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n+                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n+                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n+\r\n+                    parcelsData = dias.map((dia, i) => {\r\n+                        const vencimento = new Date(dataEmissao);\r\n+                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n+                        return {\r\n+                            number: i + 1,\r\n+                            amount: parcelAmount,\r\n+                            dueDate: vencimento.toISOString().split('T')[0]\r\n+                        };\r\n+                    });\r\n+                }\r\n+            }\r\n+\r\n+            if (parcelsData.length > 0) {\r\n+                // --- Se encontrou parcelas (por qualquer método), vai para a pré-visualização ---\r\n+                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: parcelsData };\r\n+\r\n+                installmentsList.innerHTML = '';\r\n+                currentBill.parcels.forEach((parcel, index) => {\r\n+                    installmentsList.insertAdjacentHTML('beforeend', `\r\n+                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                        </div>\r\n+                    `);\r\n+                });\r\n+\r\n+                addEventListenersToInstallmentInputs();\r\n+                updatePreviewTotal();\r\n+                previewBillNameInput.value = currentBill.name;\r\n+                previewNfeNumber.textContent = nfeNumber;\r\n+                installmentsPreviewModal.classList.remove('hidden');\r\n+\r\n+            } else {\r\n+                // --- CENÁRIO 3: Não encontrou parcelas, preenche o formulário manual ---\r\n+                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n+                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n+\r\n+                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n+                if (vencimento) {\r\n+                    document.getElementById('dueDate').value = vencimento;\r\n+                }\r\n+\r\n+                addBillModal.classList.remove('hidden');\r\n+            }\r\n+\r\n+            showToast('Dados do XML carregados com sucesso!', 'success');\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            console.error(\"Erro ao processar XML:\", error);\r\n+        } finally {\r\n+            // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n+            event.target.value = '';\r\n+        }\r\n+    };\r\n+\r\n+    reader.onerror = () => {\r\n+        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+    };\r\n+\r\n+    reader.readAsText(file);\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n+ */\r\n+function addEventListenersToInstallmentInputs() {\r\n+    // Listener para o campo de VALOR\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            }\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de DATA\r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    /**\r\n+     * Mostra a tela de login de administrador.\r\n+     */\r\n+    function showAdminLogin() {\r\n+        hideAllScreens(); // Função de utils.js\r\n+        if (adminLoginForm) adminLoginForm.reset();\r\n+        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    // Listener para o campo de CÓDIGO DE BARRAS\r\n+    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        // Evento para guardar o valor quando é digitado\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].barcode = e.target.value;\r\n+            }\r\n+        });\r\n+\r\n+        input.addEventListener('keydown', (e) => {\r\n+            if (e.key === 'Enter') {\r\n+                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n+\r\n+                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n+                const nextIndex = currentIndex + 1;\r\n+                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n+\r\n+                if (nextInput) {\r\n+                    // Se houver um próximo campo de código de barras, foca nele.\r\n+                    nextInput.focus();\r\n+                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n+                } else {\r\n+                    // Se for o último campo, foca no botão de salvar.\r\n+                    document.getElementById('addToOrganizer').focus();\r\n+                }\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n+ */\r\n+function handleShowFullScreenBarcode() {\r\n+    const barcodeValue = modalBillBarcodeInput.value;\r\n+    if (!barcodeValue) {\r\n+        return showToast('Não há código de barras para mostrar.', 'info');\r\n+    }\r\n+\r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    if (!barcodeImageContainer) return;\r\n+\r\n+    // Limpa qualquer código de barras anterior\r\n+    barcodeImageContainer.innerHTML = '';\r\n+\r\n+    try {\r\n+        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n+        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n+\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n+        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n+            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n+            lineColor: \"#000000\",\r\n+            width: 2,\r\n+            height: 100,\r\n+            displayValue: true, // Mostra os números abaixo das barras\r\n+            fontSize: 18\r\n+        });\r\n+\r\n+        // Mostra o modal de ecrã inteiro\r\n+        barcodeFullScreenModal.classList.remove('hidden');\r\n+\r\n+    } catch (e) {\r\n+        console.error(\"Erro ao gerar código de barras:\", e);\r\n+        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n+    }\r\n+}\r\n+\r\n+async function handleAttachmentUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file || !selectedParcel) return;\r\n+\r\n+    // Cria um objeto FormData para enviar o ficheiro\r\n+    const formData = new FormData();\r\n+    formData.append('comprovante', file);\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Atualiza a UI para mostrar o link do novo anexo\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+\r\n+        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para remover um anexo de comprovativo.\r\n+ * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n+ */\r\n+async function handleRemoveAttachment() {\r\n+    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n+    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader(); // Mostra o ícone de carregamento\r\n+    try {\r\n+        // Chama a nossa função da API para apagar o anexo\r\n+        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n+\r\n+        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+\r\n+        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+\r\n+        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n+        await updateBillsOrganizer();\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n+ */\r\n+function applyFiltersAndSearch() {\r\n+    const searchTerm = searchInput.value.toLowerCase();\r\n+    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n+\r\n+    let filteredBoletos = userBoletos.filter(bill => {\r\n+        // Filtro de pesquisa\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n+            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+        if (!matchesSearch) return false;\r\n+\r\n+        // Filtro de categoria\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+        if (!matchesCategory) return false;\r\n+\r\n+        // Filtro de status\r\n+        if (activeStatusFilter === 'all') return true;\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        return bill.parcels.some(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeStatusFilter === 'paid') return parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            return false;\r\n+        });\r\n+    });\r\n+\r\n+    renderCalendar(filteredBoletos);\r\n+    updateMonthlySummary(filteredBoletos);\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário.\r\n+ */\r\n+function initializeDragAndDrop() {\r\n+    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n+\r\n+    dayCells.forEach(cell => {\r\n+        new Sortable(cell, {\r\n+            group: 'calendar-bills', // Permite mover cards entre células\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50', // Estilo do \"fantasma\" do card ao arrastar\r\n+\r\n+            // A função que é chamada QUANDO você solta um card\r\n+            onEnd: async function (evt) {\r\n+                const item = evt.item; // O card que foi arrastado\r\n+                const toCell = evt.to;   // A célula do dia onde ele foi solto\r\n+\r\n+                const boletoId = item.dataset.boletoId;\r\n+                const parcelId = item.dataset.parcelId;\r\n+                const newDate = toCell.dataset.date;\r\n+\r\n+                if (!boletoId || !parcelId || !newDate) return;\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    // Chamamos a nossa API para atualizar a data de vencimento\r\n+                    await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n+                    showToast('Data da parcela atualizada com sucesso!', 'success');\r\n+\r\n+                    // Atualizamos a aplicação inteira para refletir a mudança\r\n+                    await updateBillsOrganizer();\r\n+\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                    // Se der erro, atualizamos a interface para reverter a mudança visual\r\n+                    await updateBillsOrganizer();\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            },\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', async () => {\r\n+    // --- Lógica de inicialização que estava em initializeApp() ---\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        // Se não houver token, redireciona para a página de login\r\n+        window.location.href = 'Index.html';\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    // Se for o dono da empresa, mostra o modal para renovar\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n+        // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n+        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        setTimeout(() => {\r\n+            window.location.href = 'Index.html';\r\n+        }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n+    } finally {\r\n+        // Esconde a tela de carregamento inicial\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+\r\n+\r\n+    // Submissão de formulários\r\n+    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+    if (logoutBtn) {\r\n+        logoutBtn.addEventListener('click', () => {\r\n+            window.location.href = 'Index.html';\r\n+        });\r\n+    }\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+\r\n+\r\n+    // Ações na App Principal\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+    // Ações do Modal de Edição de Boleto\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+    // Navegação do Calendário\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+        if (currentMonth === 11) currentYear--;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+        if (currentMonth === 0) currentYear++;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    if (addCompanyCnpjInput) {\r\n+        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    if (openAddBillModalBtn) {\r\n+        openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+    }\r\n+\r\n+    const handleRedirectToHome = () => {\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    const handleFullLogoutAndRedirect = () => {\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    if (subscriptionLogoutBtn) {\r\n+        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+    }\r\n+\r\n+    if (blockedAccessLogoutBtn) {\r\n+        blockedAccessLogoutBtn.addEventListener('click', () => {\r\n+            window.location.href = 'Index.html';\r\n+        });\r\n+    }\r\n+\r\n+    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+    if (settingsBtn) {\r\n+        settingsBtn.addEventListener('click', (e) => {\r\n+            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+            settingsDropdown.classList.toggle('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    // Links dentro do menu dropdown\r\n+    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCompanyInfoModal();\r\n+    });\r\n+\r\n+    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openPermissionsModal();\r\n+    });\r\n+\r\n+    window.addEventListener('click', () => {\r\n+        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n+    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openManageUsersModal();\r\n+    });\r\n+\r\n+    // Botões do modal de gerir utilizadores\r\n+    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+    });\r\n+\r\n+    /**\r\n+     * Lida com o clique no botão de criar/renovar assinatura.\r\n+     */\r\n+    async function handleCreateSubscription() {\r\n+        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+        subscriptionActionBtn.disabled = true;\r\n+        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+        try {\r\n+            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+            const data = await api.createSubscriptionLink();\r\n+\r\n+            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+            if (data.init_point) {\r\n+                window.location.href = data.init_point;\r\n+            } else {\r\n+                throw new Error('Link de pagamento não recebido.');\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+            subscriptionActionBtn.disabled = false;\r\n+            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+        }\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão.\r\n+    if (subscriptionActionBtn) {\r\n+        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+    }\r\n+\r\n+    if (closePreviewModalBtn) {\r\n+        closePreviewModalBtn.addEventListener('click', () => {\r\n+            installmentsPreviewModal.classList.add('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    if (nfeXmlInput) {\r\n+        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+    }\r\n+\r\n+    if (previewBillNameInput) {\r\n+        previewBillNameInput.addEventListener('input', (e) => {\r\n+            if (currentBill) {\r\n+                currentBill.name = e.target.value;\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão\r\n+    if (showFullScreenBarcodeBtn) {\r\n+        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+    }\r\n+\r\n+    // Listener para o campo de pesquisa\r\n+    if (searchInput) {\r\n+        searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+    }\r\n+\r\n+    // Listeners para os botões de filtro\r\n+    if (filterButtons) {\r\n+        filterButtons.forEach(button => {\r\n+            button.addEventListener('click', (e) => {\r\n+                // Remove a classe 'active' de todos os botões\r\n+                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+                // Adiciona a classe 'active' apenas ao botão clicado\r\n+                e.currentTarget.classList.add('active');\r\n+                // Aplica o filtro\r\n+                applyFiltersAndSearch();\r\n+            });\r\n+        });\r\n+    }\r\n+\r\n+    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCategoriesModal();\r\n+    });\r\n+\r\n+    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+    if (addCategoryForm) {\r\n+        addCategoryForm.addEventListener('submit', async (e) => {\r\n+            e.preventDefault();\r\n+            const name = newCategoryNameInput.value.trim();\r\n+            if (!name) return;\r\n+            try {\r\n+                await api.createCategory(name);\r\n+                newCategoryNameInput.value = '';\r\n+                await openCategoriesModal(); // Recarrega a lista do modal\r\n+                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+    });\r\n+\r\n+    if (categoryFilterSelect) {\r\n+        categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+    }\r\n+\r\n+    // Configuração dos botões do dashboard\r\n+    if (viewCalendarBtn) {\r\n+        viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+    }\r\n+    if (viewDashboardBtn) {\r\n+        viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+    }\r\n+\r\n+\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753306923484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2072,2080 +2072,5 @@\n         viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n     }\r\n \r\n \r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let expensesPieChart = null;\r\n-let expensesBarChart = null;\r\n-\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n-\r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-\r\n-const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n-const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n-const calendarView = document.getElementById('calendarView');\r\n-const dashboardView = document.getElementById('dashboardView');\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n- * Por padrão, usa a lista completa de boletos do utilizador.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n- */\r\n-/**\r\n- * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n- */\r\n-function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-\r\n-    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n-\r\n-    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n-    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n-\r\n-    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n-\r\n-    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    // Atualiza os elementos HTML com os valores corretos\r\n-    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n-    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n-    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com uma lista específica de boletos.\r\n- * Por padrão, usa a lista completa de boletos do utilizador.\r\n- * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n- */\r\n-function renderCalendar(boletosToRender = userBoletos) {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-\r\n-        // Adiciona a classe 'day-cell-droppable' para o SortableJS\r\n-        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-\r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card-draggable')) return;\r\n-            openAddBillModal(e.currentTarget.dataset.date);\r\n-        });\r\n-\r\n-        // Usa a lista 'boletosToRender' que foi passada para a função\r\n-        boletosToRender.forEach(bill => {\r\n-            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                const parcelElement = document.createElement('div');\r\n-\r\n-                // Adiciona as classes e os atributos de dados para o drag-and-drop\r\n-                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n-                parcelElement.dataset.boletoId = bill._id;\r\n-                parcelElement.dataset.parcelId = parcel._id;\r\n-\r\n-                // Gera o conteúdo do card com todas as informações\r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                    ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n-                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n-                `;\r\n-\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        });\r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-\r\n-    // Ativa a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n-    initializeDragAndDrop();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-async function openBillModal(bill, parcel) {\r\n-    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-\r\n-    // Preenche todos os campos do modal com os dados da parcela clicada\r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-    // Mostra o botão de gerar código de barras apenas se houver um código\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-\r\n-    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n-    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n-    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n-    if (bill.nfeNumber) {\r\n-        nfeNumberEl.textContent = bill.nfeNumber;\r\n-        nfeContainer.classList.remove('hidden');\r\n-    } else {\r\n-        nfeContainer.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Lógica dinâmica para a secção de anexos\r\n-    const attachmentContainer = document.getElementById('attachment-container');\r\n-    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n-\r\n-    if (parcel.attachmentUrl) {\r\n-        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n-        attachmentContainer.innerHTML = `\r\n-            <div class=\"flex items-center justify-between\">\r\n-                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n-                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n-                </a>\r\n-                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n-            </div>\r\n-        `;\r\n-        // Adiciona o evento de clique ao novo botão de remover\r\n-        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n-    } else {\r\n-        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-        // Adiciona o evento de 'change' ao novo input de upload\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-    }\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-        categories.forEach(cat => {\r\n-            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n-        });\r\n-        if (bill.category) {\r\n-            modalBillCategorySelect.value = bill.category._id;\r\n-        } else {\r\n-            modalBillCategorySelect.value = \"\";\r\n-        }\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    if (billForm) {\r\n-        billForm.reset();\r\n-    }\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    }\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    mainAppContent.classList.remove('hidden');\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-     await populateCategoryFilter();\r\n-     await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n- * @param {string} tagName - O nome da tag a ser procurada.\r\n- * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n- * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n- */\r\n-function getTagValue(tagName, parentElement) {\r\n-    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n-    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n-    return element?.textContent || '';\r\n-}\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- */\r\n-function openCompanyDetailsModal(company, users) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (users && users.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        users.forEach(user => {\r\n-            // Cria as opções do dropdown, marcando a atual como selecionada\r\n-            const roleOptions = roles.map(role =>\r\n-                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-            ).join('');\r\n-\r\n-            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona o evento para os botões \"Remover\"\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    if (password !== confirmPassword) {\r\n-        return showToast(\"As senhas não coincidem.\", \"error\");\r\n-    }\r\n-    // A verificação agora funciona para os dois casos\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.registerUser(username, password, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n-        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-\r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function openCategoriesModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        renderCategoryList(categories);\r\n-        categoriesModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function renderCategoryList(categories) {\r\n-    categoryListDiv.innerHTML = '';\r\n-    if (categories.length === 0) {\r\n-        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n-        return;\r\n-    }\r\n-    categories.forEach(category => {\r\n-        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n-                <span class=\"text-white\">${category.name}</span>\r\n-                <div>\r\n-                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n-                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n-                </div>\r\n-            </div>\r\n-        `);\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo boleto, buscando as categorias\r\n- * e opcionalmente pré-preenchendo a data.\r\n- * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n- */\r\n-async function openAddBillModal(preselectedDate = null) {\r\n-    clearBillForm();\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-\r\n-        categories.forEach(category => {\r\n-            const option = document.createElement('option');\r\n-            option.value = category._id;\r\n-            option.textContent = category.name;\r\n-            billCategorySelect.appendChild(option);\r\n-        });\r\n-\r\n-        // Se uma data foi passada como parâmetro, nós a preenchemos\r\n-        if (preselectedDate) {\r\n-            document.getElementById('dueDate').value = preselectedDate;\r\n-        }\r\n-\r\n-        addBillModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function populateCategoryFilter() {\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n-        // Se der erro, garante que a opção padrão exista\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Alterna a visualização entre o Calendário e o Dashboard.\r\n- */\r\n-function switchView(viewToShow) {\r\n-    // Esconde ambas as vistas\r\n-    calendarView.classList.add('hidden');\r\n-    dashboardView.classList.add('hidden');\r\n-\r\n-    // Reseta o estilo dos botões\r\n-    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n-    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n-    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-\r\n-    // Mostra a vista correta e ativa o botão correspondente\r\n-    if (viewToShow === 'calendar') {\r\n-        calendarView.classList.remove('hidden');\r\n-        viewCalendarBtn.classList.add('bg-indigo-600');\r\n-        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-    } else if (viewToShow === 'dashboard') {\r\n-        dashboardView.classList.remove('hidden');\r\n-        viewDashboardBtn.classList.add('bg-indigo-600');\r\n-        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderDashboard();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n- */\r\n-async function renderDashboard() {\r\n-    showLoader();\r\n-    try {\r\n-        const [pieData, barData] = await Promise.all([\r\n-            api.getExpensesByCategory(),\r\n-            api.getMonthlySummary()\r\n-        ]);\r\n-        \r\n-        renderPieChart(pieData);\r\n-        renderBarChart(barData);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de pizza de despesas por categoria.\r\n- */\r\n-function renderPieChart(data) {\r\n-    const canvas = document.getElementById('expensesByCategoryChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    if (expensesPieChart) {\r\n-        expensesPieChart.destroy();\r\n-    }\r\n-\r\n-    expensesPieChart = new Chart(ctx, {\r\n-        type: 'pie',\r\n-        data: {\r\n-            labels: data.map(item => item.categoryName),\r\n-            datasets: [{\r\n-                data: data.map(item => item.totalAmount),\r\n-                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n-                borderColor: '#1f2937',\r\n-                borderWidth: 2\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n- */\r\n-function renderBarChart(data) {\r\n-    const canvas = document.getElementById('monthlyExpensesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n-    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n-    const values = data.map(item => item.totalAmount);\r\n-\r\n-    if (expensesBarChart) {\r\n-        expensesBarChart.destroy();\r\n-    }\r\n-    \r\n-    expensesBarChart = new Chart(ctx, {\r\n-        type: 'bar',\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Total Pago por Mês',\r\n-                data: values,\r\n-                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n-                borderColor: 'rgba(79, 70, 229, 1)',\r\n-                borderWidth: 1\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n-                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n-            },\r\n-            plugins: { legend: { display: false } }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-\r\n-async function handleForgotPasswordRequest(e) {\r\n-    e.preventDefault();\r\n-    const email = document.getElementById('recoveryEmailInput').value;\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.requestPasswordReset(email);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n-        forgotPasswordModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList(); // Se tiver essa função\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a API para obter os detalhes\r\n-                const { company, users } = await api.getCompanyDetails(companyId);\r\n-                // Chama a nossa nova função para abrir e preencher o modal\r\n-                openCompanyDetailsModal(company, users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                const { users } = await api.getCompanyDetails(companyId);\r\n-                if (users.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n-                }\r\n-                const userIdToImpersonate = users[0]._id;\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-function handleCalculateInstallments(e) {\r\n-    e.preventDefault();\r\n-    const billName = document.getElementById('billName').value;\r\n-    const categoryId = billCategorySelect.value;\r\n-    const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n-    const totalAmount = parseFloat(totalAmountValue);\r\n-    const installments = parseInt(document.getElementById('installments').value);\r\n-    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-    const description = document.getElementById('description').value;\r\n-    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n-\r\n-    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n-        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-    }\r\n-\r\n-    currentBill = {\r\n-        name: billName,\r\n-        description,\r\n-        parcels: [],\r\n-        category: categoryId || null\r\n-    };\r\n-    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-    installmentsList.innerHTML = '';\r\n-\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n-        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n-\r\n-        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n-        installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n-                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n-            </div>\r\n-        `);\r\n-    }\r\n-\r\n-    // Adiciona os eventos para os novos inputs\r\n-    addEventListenersToInstallmentInputs();\r\n-    updatePreviewTotal();\r\n-    previewBillNameInput.value = currentBill.name;\r\n-    previewNfeNumber.textContent = 'N/A';\r\n-    addBillModal.classList.add('hidden');\r\n-    installmentsPreviewModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n- */\r\n-function updatePreviewTotal() {\r\n-    if (!currentBill.parcels) return;\r\n-    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill);\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-        clearBillForm();\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-    const updatedParcelData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    const updatedBillData = {\r\n-        category: modalBillCategorySelect.value || null\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n-        await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n-\r\n-        showToast('Alterações salvas com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- * Verifica a sessão e o estado da assinatura.\r\n- */\r\n-async function initializeApp() {\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n-    const action = urlParams.get('action');\r\n-\r\n-    if (action === 'forgot_password') {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    const token = localStorage.getItem('authToken');\r\n-\r\n-    if (!token) {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        showAdminLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-function logout() {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-\r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n-\r\n-        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n-\r\n-        // Define os cargos que o Proprietário pode atribuir.\r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        if (users && users.length > 0) {\r\n-            users.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-\r\n-                // Cria as opções do dropdown para Gerente e Funcionário\r\n-                const roleOptions = assignableRoles.map(role =>\r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n-                const roleHtml = isOwner\r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-\r\n-        // Adiciona o evento de clique aos botões de remover\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                // ... (a lógica de remover continua a mesma de antes)\r\n-            });\r\n-        });\r\n-\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n-\r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n-                    e.target.value = originalRole; // Reverte a seleção visual\r\n-                    return;\r\n-\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n- * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n- * @param {Event} event - O evento 'change' do input do ficheiro.\r\n- */\r\n-function handleNfeXmlUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) {\r\n-        return;\r\n-    }\r\n-\r\n-    const reader = new FileReader();\r\n-\r\n-    reader.onload = (e) => {\r\n-        try {\r\n-            const xmlString = e.target.result;\r\n-            const parser = new DOMParser();\r\n-            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-\r\n-            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n-            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n-                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n-            }\r\n-\r\n-            // Define os nós principais para evitar procuras repetidas\r\n-            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n-            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n-            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-\r\n-            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n-            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n-            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n-\r\n-            let parcelsData = [];\r\n-\r\n-            if (duplicatas.length > 0) {\r\n-                // --- CENÁRIO 1: Encontrou as tags <dup> (padrão) ---\r\n-                parcelsData = duplicatas.map((dup, i) => ({\r\n-                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n-                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n-                    dueDate: getTagValue(\"dVenc\", dup)\r\n-                }));\r\n-            } else {\r\n-                // --- CENÁRIO 2: Procura por informações de cobrança no texto ---\r\n-                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n-                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n-\r\n-                if (cobrancaMatch && cobrancaMatch[1]) {\r\n-                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n-                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n-                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n-                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n-\r\n-                    parcelsData = dias.map((dia, i) => {\r\n-                        const vencimento = new Date(dataEmissao);\r\n-                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n-                        return {\r\n-                            number: i + 1,\r\n-                            amount: parcelAmount,\r\n-                            dueDate: vencimento.toISOString().split('T')[0]\r\n-                        };\r\n-                    });\r\n-                }\r\n-            }\r\n-\r\n-            if (parcelsData.length > 0) {\r\n-                // --- Se encontrou parcelas (por qualquer método), vai para a pré-visualização ---\r\n-                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: parcelsData };\r\n-\r\n-                installmentsList.innerHTML = '';\r\n-                currentBill.parcels.forEach((parcel, index) => {\r\n-                    installmentsList.insertAdjacentHTML('beforeend', `\r\n-                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                        </div>\r\n-                    `);\r\n-                });\r\n-\r\n-                addEventListenersToInstallmentInputs();\r\n-                updatePreviewTotal();\r\n-                previewBillNameInput.value = currentBill.name;\r\n-                previewNfeNumber.textContent = nfeNumber;\r\n-                installmentsPreviewModal.classList.remove('hidden');\r\n-\r\n-            } else {\r\n-                // --- CENÁRIO 3: Não encontrou parcelas, preenche o formulário manual ---\r\n-                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n-                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n-\r\n-                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n-                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n-                if (vencimento) {\r\n-                    document.getElementById('dueDate').value = vencimento;\r\n-                }\r\n-\r\n-                addBillModal.classList.remove('hidden');\r\n-            }\r\n-\r\n-            showToast('Dados do XML carregados com sucesso!', 'success');\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            console.error(\"Erro ao processar XML:\", error);\r\n-        } finally {\r\n-            // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n-            event.target.value = '';\r\n-        }\r\n-    };\r\n-\r\n-    reader.onerror = () => {\r\n-        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n-    };\r\n-\r\n-    reader.readAsText(file);\r\n-}\r\n-\r\n-/**\r\n- * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n- */\r\n-function addEventListenersToInstallmentInputs() {\r\n-    // Listener para o campo de VALOR\r\n-    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n-            }\r\n-            updatePreviewTotal();\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de DATA\r\n-    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-        input.addEventListener('change', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    /**\r\n-     * Mostra a tela de login de administrador.\r\n-     */\r\n-    function showAdminLogin() {\r\n-        hideAllScreens(); // Função de utils.js\r\n-        if (adminLoginForm) adminLoginForm.reset();\r\n-        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    // Listener para o campo de CÓDIGO DE BARRAS\r\n-    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n-        // Evento para guardar o valor quando é digitado\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].barcode = e.target.value;\r\n-            }\r\n-        });\r\n-\r\n-        input.addEventListener('keydown', (e) => {\r\n-            if (e.key === 'Enter') {\r\n-                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n-\r\n-                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n-                const nextIndex = currentIndex + 1;\r\n-                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n-\r\n-                if (nextInput) {\r\n-                    // Se houver um próximo campo de código de barras, foca nele.\r\n-                    nextInput.focus();\r\n-                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n-                } else {\r\n-                    // Se for o último campo, foca no botão de salvar.\r\n-                    document.getElementById('addToOrganizer').focus();\r\n-                }\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n- */\r\n-function handleShowFullScreenBarcode() {\r\n-    const barcodeValue = modalBillBarcodeInput.value;\r\n-    if (!barcodeValue) {\r\n-        return showToast('Não há código de barras para mostrar.', 'info');\r\n-    }\r\n-\r\n-    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n-    if (!barcodeImageContainer) return;\r\n-\r\n-    // Limpa qualquer código de barras anterior\r\n-    barcodeImageContainer.innerHTML = '';\r\n-\r\n-    try {\r\n-        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n-        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n-\r\n-        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n-        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n-            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n-            lineColor: \"#000000\",\r\n-            width: 2,\r\n-            height: 100,\r\n-            displayValue: true, // Mostra os números abaixo das barras\r\n-            fontSize: 18\r\n-        });\r\n-\r\n-        // Mostra o modal de ecrã inteiro\r\n-        barcodeFullScreenModal.classList.remove('hidden');\r\n-\r\n-    } catch (e) {\r\n-        console.error(\"Erro ao gerar código de barras:\", e);\r\n-        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n-    }\r\n-}\r\n-\r\n-async function handleAttachmentUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file || !selectedParcel) return;\r\n-\r\n-    // Cria um objeto FormData para enviar o ficheiro\r\n-    const formData = new FormData();\r\n-    formData.append('comprovante', file);\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Atualiza a UI para mostrar o link do novo anexo\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n-\r\n-        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para remover um anexo de comprovativo.\r\n- * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n- */\r\n-async function handleRemoveAttachment() {\r\n-    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n-    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader(); // Mostra o ícone de carregamento\r\n-    try {\r\n-        // Chama a nossa função da API para apagar o anexo\r\n-        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n-\r\n-        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-\r\n-        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-\r\n-        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n-        await updateBillsOrganizer();\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n- */\r\n-function applyFiltersAndSearch() {\r\n-    const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n-    const selectedCategoryId = categoryFilterSelect.value;\r\n-\r\n-    let filteredBoletos = userBoletos.filter(bill => {\r\n-        // Filtro de pesquisa\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n-            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        if (!matchesSearch) return false;\r\n-\r\n-        // Filtro de categoria\r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-        if (!matchesCategory) return false;\r\n-\r\n-        // Filtro de status\r\n-        if (activeStatusFilter === 'all') return true;\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        return bill.parcels.some(parcel => {\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n-            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n-            return false;\r\n-        });\r\n-    });\r\n-\r\n-    renderCalendar(filteredBoletos);\r\n-    updateMonthlySummary(filteredBoletos);\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário.\r\n- */\r\n-function initializeDragAndDrop() {\r\n-    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n-\r\n-    dayCells.forEach(cell => {\r\n-        new Sortable(cell, {\r\n-            group: 'calendar-bills', // Permite mover cards entre células\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50', // Estilo do \"fantasma\" do card ao arrastar\r\n-\r\n-            // A função que é chamada QUANDO você solta um card\r\n-            onEnd: async function (evt) {\r\n-                const item = evt.item; // O card que foi arrastado\r\n-                const toCell = evt.to;   // A célula do dia onde ele foi solto\r\n-\r\n-                const boletoId = item.dataset.boletoId;\r\n-                const parcelId = item.dataset.parcelId;\r\n-                const newDate = toCell.dataset.date;\r\n-\r\n-                if (!boletoId || !parcelId || !newDate) return;\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    // Chamamos a nossa API para atualizar a data de vencimento\r\n-                    await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n-                    showToast('Data da parcela atualizada com sucesso!', 'success');\r\n-\r\n-                    // Atualizamos a aplicação inteira para refletir a mudança\r\n-                    await updateBillsOrganizer();\r\n-\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                    // Se der erro, atualizamos a interface para reverter a mudança visual\r\n-                    await updateBillsOrganizer();\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            },\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', async () => {\r\n-    // --- Lógica de inicialização que estava em initializeApp() ---\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-\r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        // Se não houver token, redireciona para a página de login\r\n-        window.location.href = 'Index.html';\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    // Se for o dono da empresa, mostra o modal para renovar\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n-        // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n-        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        setTimeout(() => {\r\n-            window.location.href = 'Index.html';\r\n-        }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n-    } finally {\r\n-        // Esconde a tela de carregamento inicial\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-\r\n-\r\n-    // Submissão de formulários\r\n-    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-    if (logoutBtn) {\r\n-        logoutBtn.addEventListener('click', () => {\r\n-            window.location.href = 'Index.html';\r\n-        });\r\n-    }\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-\r\n-\r\n-    // Ações na App Principal\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-    // Ações do Modal de Edição de Boleto\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-    // Navegação do Calendário\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-        if (currentMonth === 11) currentYear--;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-        if (currentMonth === 0) currentYear++;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    if (addCompanyCnpjInput) {\r\n-        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    if (openAddBillModalBtn) {\r\n-        openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-    }\r\n-\r\n-    const handleRedirectToHome = () => {\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    const handleFullLogoutAndRedirect = () => {\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    if (subscriptionLogoutBtn) {\r\n-        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-    }\r\n-\r\n-    if (blockedAccessLogoutBtn) {\r\n-        blockedAccessLogoutBtn.addEventListener('click', () => {\r\n-            window.location.href = 'Index.html';\r\n-        });\r\n-    }\r\n-\r\n-    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-    if (settingsBtn) {\r\n-        settingsBtn.addEventListener('click', (e) => {\r\n-            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-            settingsDropdown.classList.toggle('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    // Links dentro do menu dropdown\r\n-    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCompanyInfoModal();\r\n-    });\r\n-\r\n-    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openPermissionsModal();\r\n-    });\r\n-\r\n-    window.addEventListener('click', () => {\r\n-        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n-\r\n-    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openManageUsersModal();\r\n-    });\r\n-\r\n-    // Botões do modal de gerir utilizadores\r\n-    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-    });\r\n-\r\n-    /**\r\n-     * Lida com o clique no botão de criar/renovar assinatura.\r\n-     */\r\n-    async function handleCreateSubscription() {\r\n-        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-        subscriptionActionBtn.disabled = true;\r\n-        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-        try {\r\n-            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-            const data = await api.createSubscriptionLink();\r\n-\r\n-            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-            if (data.init_point) {\r\n-                window.location.href = data.init_point;\r\n-            } else {\r\n-                throw new Error('Link de pagamento não recebido.');\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-            subscriptionActionBtn.disabled = false;\r\n-            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-        }\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão.\r\n-    if (subscriptionActionBtn) {\r\n-        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-    }\r\n-\r\n-    if (closePreviewModalBtn) {\r\n-        closePreviewModalBtn.addEventListener('click', () => {\r\n-            installmentsPreviewModal.classList.add('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    if (nfeXmlInput) {\r\n-        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-    }\r\n-\r\n-    if (previewBillNameInput) {\r\n-        previewBillNameInput.addEventListener('input', (e) => {\r\n-            if (currentBill) {\r\n-                currentBill.name = e.target.value;\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão\r\n-    if (showFullScreenBarcodeBtn) {\r\n-        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-    }\r\n-\r\n-    // Listener para o campo de pesquisa\r\n-    if (searchInput) {\r\n-        searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-    }\r\n-\r\n-    // Listeners para os botões de filtro\r\n-    if (filterButtons) {\r\n-        filterButtons.forEach(button => {\r\n-            button.addEventListener('click', (e) => {\r\n-                // Remove a classe 'active' de todos os botões\r\n-                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-                // Adiciona a classe 'active' apenas ao botão clicado\r\n-                e.currentTarget.classList.add('active');\r\n-                // Aplica o filtro\r\n-                applyFiltersAndSearch();\r\n-            });\r\n-        });\r\n-    }\r\n-\r\n-    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCategoriesModal();\r\n-    });\r\n-\r\n-    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-    if (addCategoryForm) {\r\n-        addCategoryForm.addEventListener('submit', async (e) => {\r\n-            e.preventDefault();\r\n-            const name = newCategoryNameInput.value.trim();\r\n-            if (!name) return;\r\n-            try {\r\n-                await api.createCategory(name);\r\n-                newCategoryNameInput.value = '';\r\n-                await openCategoriesModal(); // Recarrega a lista do modal\r\n-                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-    });\r\n-\r\n-    if (categoryFilterSelect) {\r\n-        categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-    }\r\n-\r\n-    if (viewCalendarBtn) {\r\n-        viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-    }\r\n-    if (viewDashboardBtn) {\r\n-        viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-    }\r\n-\r\n-\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753308004111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -890,8 +890,22 @@\n     }\r\n }\r\n \r\n /**\r\n+ * Atualiza os cartões de KPI no dashboard.\r\n+ * @param {object} kpiData - Os dados dos KPIs vindos da API.\r\n+ */\r\n+function updateKpiCards(kpiData) {\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n+\r\n+    document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n+    document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n+    document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n+}\r\n+\r\n+/**\r\n  * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n  */\r\n async function renderDashboard() {\r\n     showLoader();\r\n"
                },
                {
                    "date": 1753308019700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -909,15 +909,20 @@\n  */\r\n async function renderDashboard() {\r\n     showLoader();\r\n     try {\r\n-        const [pieData, barData] = await Promise.all([\r\n+        // Agora pedimos 3 conjuntos de dados em paralelo\r\n+        const [pieData, barData, kpiData] = await Promise.all([\r\n             api.getExpensesByCategory(),\r\n-            api.getMonthlySummary()\r\n+            api.getMonthlySummary(),\r\n+            api.getKpiSummary() // A nossa nova chamada de API\r\n         ]);\r\n         \r\n+        // Chamamos as 3 funções para renderizar tudo\r\n+        updateKpiCards(kpiData); // A nossa nova função\r\n         renderPieChart(pieData);\r\n         renderBarChart(barData);\r\n+\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n"
                },
                {
                    "date": 1753310377284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -999,8 +999,29 @@\n         }\r\n     });\r\n }\r\n \r\n+/**\r\n+ * Busca categorias da API e preenche um elemento <select> do HTML.\r\n+ * @param {HTMLSelectElement} selectElement - O elemento dropdown a ser preenchido.\r\n+ */\r\n+async function populateCategorySelect(selectElement) {\r\n+    if (!selectElement) return;\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        selectElement.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            const option = document.createElement('option');\r\n+            option.value = category._id;\r\n+            option.textContent = category.name;\r\n+            selectElement.appendChild(option);\r\n+        });\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753310728102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1127,9 +1127,9 @@\n         });\r\n     });\r\n }\r\n \r\n-function handleCalculateInstallments(e) {\r\n+async function handleCalculateInstallments(e) {\r\n     e.preventDefault();\r\n     const billName = document.getElementById('billName').value;\r\n     const categoryId = billCategorySelect.value;\r\n     const dueDate = document.getElementById('dueDate').value;\r\n@@ -1441,9 +1441,9 @@\n  * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n  * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n  * @param {Event} event - O evento 'change' do input do ficheiro.\r\n  */\r\n-function handleNfeXmlUpload(event) {\r\n+async function handleNfeXmlUpload(event) {\r\n     const file = event.target.files[0];\r\n     if (!file) {\r\n         return;\r\n     }\r\n@@ -1521,8 +1521,9 @@\n                 addEventListenersToInstallmentInputs();\r\n                 updatePreviewTotal();\r\n                 previewBillNameInput.value = currentBill.name;\r\n                 previewNfeNumber.textContent = nfeNumber;\r\n+                await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n                 installmentsPreviewModal.classList.remove('hidden');\r\n \r\n             } else {\r\n                 // --- CENÁRIO 3: Não encontrou parcelas, preenche o formulário manual ---\r\n"
                },
                {
                    "date": 1753310945320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1177,8 +1177,9 @@\n     updatePreviewTotal();\r\n     previewBillNameInput.value = currentBill.name;\r\n     previewNfeNumber.textContent = 'N/A';\r\n     addBillModal.classList.add('hidden');\r\n+    await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n     installmentsPreviewModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n@@ -1190,11 +1191,13 @@\n     parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n }\r\n \r\n async function handleAddToOrganizer() {\r\n+    currentBill.category = document.getElementById('previewBillCategorySelect').value || null;\r\n+\r\n     showLoader();\r\n     try {\r\n-        await api.createBoleto(currentBill);\r\n+        await api.createBoleto(currentBill); // O objeto currentBill agora tem a categoria correta\r\n         showToast('Boleto criado com sucesso!', 'success');\r\n         installmentsPreviewModal.classList.add('hidden');\r\n         clearBillForm();\r\n         await updateBillsOrganizer();\r\n@@ -1449,9 +1452,9 @@\n     }\r\n \r\n     const reader = new FileReader();\r\n \r\n-    reader.onload = (e) => {\r\n+    reader.onload = async (e) => {\r\n         try {\r\n             const xmlString = e.target.result;\r\n             const parser = new DOMParser();\r\n             const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n"
                },
                {
                    "date": 1753311215634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,128 +26,10 @@\n let expensesPieChart = null;\r\n let expensesBarChart = null;\r\n \r\n \r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n \r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n \r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-\r\n-const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n-const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n-const calendarView = document.getElementById('calendarView');\r\n-const dashboardView = document.getElementById('dashboardView');\r\n-\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n@@ -1806,8 +1688,131 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n+\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+\r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+\r\n+const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n+const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n+const calendarView = document.getElementById('calendarView');\r\n+const dashboardView = document.getElementById('dashboardView');\r\n+\r\n+\r\n     // --- Lógica de inicialização que estava em initializeApp() ---\r\n     const today = new Date();\r\n     currentMonth = today.getMonth();\r\n     currentYear = today.getFullYear();\r\n"
                },
                {
                    "date": 1753311251686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,128 @@\n let expensesPieChart = null;\r\n let expensesBarChart = null;\r\n \r\n \r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n \r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n \r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+\r\n+const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n+const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n+const calendarView = document.getElementById('calendarView');\r\n+const dashboardView = document.getElementById('dashboardView');\r\n+\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n@@ -1688,131 +1806,8 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n-\r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-\r\n-const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n-const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n-const calendarView = document.getElementById('calendarView');\r\n-const dashboardView = document.getElementById('dashboardView');\r\n-\r\n-\r\n     // --- Lógica de inicialização que estava em initializeApp() ---\r\n     const today = new Date();\r\n     currentMonth = today.getMonth();\r\n     currentYear = today.getFullYear();\r\n"
                },
                {
                    "date": 1753311434942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1444,9 +1444,9 @@\n  * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n  * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n  * @param {Event} event - O evento 'change' do input do ficheiro.\r\n  */\r\n-async function handleNfeXmlUpload(event) {\r\n+function handleNfeXmlUpload(event) {\r\n     const file = event.target.files[0];\r\n     if (!file) {\r\n         return;\r\n     }\r\n"
                },
                {
                    "date": 1753311456695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1444,9 +1444,9 @@\n  * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n  * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n  * @param {Event} event - O evento 'change' do input do ficheiro.\r\n  */\r\n-function handleNfeXmlUpload(event) {\r\n+async function handleNfeXmlUpload(event) {\r\n     const file = event.target.files[0];\r\n     if (!file) {\r\n         return;\r\n     }\r\n"
                },
                {
                    "date": 1753311936189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,124 +30,10 @@\n // =================================================================================\r\n // ELEMENTOS DO DOM - Referências aos elementos HTML\r\n // =================================================================================\r\n \r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n \r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n \r\n-const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n-const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n-const calendarView = document.getElementById('calendarView');\r\n-const dashboardView = document.getElementById('dashboardView');\r\n-\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n@@ -1806,8 +1692,123 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n+\r\n+    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+    const companyListDiv = document.getElementById('companyList');\r\n+    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+    const mainAppContent = document.getElementById('mainAppContent');\r\n+    const logoutBtn = document.getElementById('logoutBtn');\r\n+    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+    const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+    const totalBillsSpan = document.getElementById('totalBills');\r\n+    const prevMonthBtn = document.getElementById('prevMonth');\r\n+    const nextMonthBtn = document.getElementById('nextMonth');\r\n+    const calendarDays = document.getElementById('calendarDays');\r\n+    const currentMonthYear = document.getElementById('currentMonthYear');\r\n+    const summaryOverdue = document.getElementById('summaryOverdue');\r\n+    const summaryTotal = document.getElementById('summaryTotal');\r\n+    const summaryPaid = document.getElementById('summaryPaid');\r\n+    const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+    const billForm = document.getElementById('billForm');\r\n+    const clearFormBtn = document.getElementById('clearFormBtn');\r\n+    const addBillModal = document.getElementById('addBillModal');\r\n+    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+    const installmentsPreview = document.getElementById('installmentsPreview');\r\n+    const installmentsList = document.getElementById('installmentsList');\r\n+    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+    const addToOrganizer = document.getElementById('addToOrganizer');\r\n+    const billModal = document.getElementById('billModal');\r\n+    const closeModalBtn = document.getElementById('closeModal');\r\n+    const modalBillName = document.getElementById('modalBillName');\r\n+    const modalBillAmount = document.getElementById('modalBillAmount');\r\n+    const modalBillDate = document.getElementById('modalBillDate');\r\n+    const modalBillDescription = document.getElementById('modalBillDescription');\r\n+    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+    const saveBillBtn = document.getElementById('saveBill');\r\n+    const deleteBillBtn = document.getElementById('deleteBill');\r\n+    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+    const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+    const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+    const addUserBtn = document.getElementById('addUserBtn');\r\n+    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+    const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+    const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+    const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+    const daysToAddInput = document.getElementById('daysToAddInput');\r\n+    const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+    const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+    const subscriptionModal = document.getElementById('subscriptionModal');\r\n+    const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+    const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+    const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+    const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+    const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+    const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+    const addUserModal = document.getElementById('addUserModal');\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+    const addCompanyModal = document.getElementById('addCompanyModal');\r\n+    const addCompanyForm = document.getElementById('addCompanyForm');\r\n+    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+    const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+    const settingsBtn = document.getElementById('settingsBtn');\r\n+    const settingsDropdown = document.getElementById('settingsDropdown');\r\n+    const menuEmpresa = document.getElementById('menuEmpresa');\r\n+    const menuUsuarios = document.getElementById('menuUsuarios');\r\n+    const menuPermissoes = document.getElementById('menuPermissoes');\r\n+    const companyInfoModal = document.getElementById('companyInfoModal');\r\n+    const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+    const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+    const permissionsModal = document.getElementById('permissionsModal');\r\n+    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+    const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+    const manageUsersModal = document.getElementById('manageUsersModal');\r\n+    const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+    const companyUsersList = document.getElementById('companyUsersList');\r\n+    const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+    const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+    const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+    const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+    const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+    const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+    const searchInput = document.getElementById('searchInput');\r\n+    const filterButtons = document.querySelectorAll('.filter-btn');\r\n+    const menuCategorias = document.getElementById('menuCategorias');\r\n+    const categoriesModal = document.getElementById('categoriesModal');\r\n+    const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+    const addCategoryForm = document.getElementById('addCategoryForm');\r\n+    const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+    const categoryListDiv = document.getElementById('categoryList');\r\n+    const billCategorySelect = document.getElementById('billCategorySelect');\r\n+    const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+    const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+    const adminLoginForm = document.getElementById('adminLoginForm');\r\n+    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+    const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n+    const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n+    const calendarView = document.getElementById('calendarView');\r\n+    const dashboardView = document.getElementById('dashboardView');\r\n+\r\n     // --- Lógica de inicialização que estava em initializeApp() ---\r\n     const today = new Date();\r\n     currentMonth = today.getMonth();\r\n     currentYear = today.getFullYear();\r\n"
                },
                {
                    "date": 1753312148782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,14 +26,10 @@\n let expensesPieChart = null;\r\n let expensesBarChart = null;\r\n \r\n \r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n \r\n \r\n-\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n@@ -1152,64 +1148,10 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- * Verifica a sessão e o estado da assinatura.\r\n- */\r\n-async function initializeApp() {\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n-    const action = urlParams.get('action');\r\n \r\n-    if (action === 'forgot_password') {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n \r\n-    const token = localStorage.getItem('authToken');\r\n-\r\n-    if (!token) {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        showAdminLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n function logout() {\r\n     localStorage.removeItem('authToken');\r\n     localStorage.removeItem('superAdminToken');\r\n     window.location.href = 'Index.html';\r\n@@ -1693,122 +1635,187 @@\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n \r\n-    const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-    const companyListDiv = document.getElementById('companyList');\r\n-    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-    const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-    const mainAppContent = document.getElementById('mainAppContent');\r\n-    const logoutBtn = document.getElementById('logoutBtn');\r\n-    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-    const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-    const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-    const totalBillsSpan = document.getElementById('totalBills');\r\n-    const prevMonthBtn = document.getElementById('prevMonth');\r\n-    const nextMonthBtn = document.getElementById('nextMonth');\r\n-    const calendarDays = document.getElementById('calendarDays');\r\n-    const currentMonthYear = document.getElementById('currentMonthYear');\r\n-    const summaryOverdue = document.getElementById('summaryOverdue');\r\n-    const summaryTotal = document.getElementById('summaryTotal');\r\n-    const summaryPaid = document.getElementById('summaryPaid');\r\n-    const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-    const billForm = document.getElementById('billForm');\r\n-    const clearFormBtn = document.getElementById('clearFormBtn');\r\n-    const addBillModal = document.getElementById('addBillModal');\r\n-    const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-    const installmentsPreview = document.getElementById('installmentsPreview');\r\n-    const installmentsList = document.getElementById('installmentsList');\r\n-    const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-    const addToOrganizer = document.getElementById('addToOrganizer');\r\n-    const billModal = document.getElementById('billModal');\r\n-    const closeModalBtn = document.getElementById('closeModal');\r\n-    const modalBillName = document.getElementById('modalBillName');\r\n-    const modalBillAmount = document.getElementById('modalBillAmount');\r\n-    const modalBillDate = document.getElementById('modalBillDate');\r\n-    const modalBillDescription = document.getElementById('modalBillDescription');\r\n-    const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-    const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-    const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-    const saveBillBtn = document.getElementById('saveBill');\r\n-    const deleteBillBtn = document.getElementById('deleteBill');\r\n-    const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-    const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-    const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-    const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-    const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-    const addUserBtn = document.getElementById('addUserBtn');\r\n-    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-    const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-    const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-    const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-    const daysToAddInput = document.getElementById('daysToAddInput');\r\n-    const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-    const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-    const subscriptionModal = document.getElementById('subscriptionModal');\r\n-    const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-    const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-    const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-    const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-    const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-    const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-    const addUserModal = document.getElementById('addUserModal');\r\n-    const addUserForm = document.getElementById('addUserForm');\r\n-    const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-    const addCompanyModal = document.getElementById('addCompanyModal');\r\n-    const addCompanyForm = document.getElementById('addCompanyForm');\r\n-    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-    const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-    const settingsBtn = document.getElementById('settingsBtn');\r\n-    const settingsDropdown = document.getElementById('settingsDropdown');\r\n-    const menuEmpresa = document.getElementById('menuEmpresa');\r\n-    const menuUsuarios = document.getElementById('menuUsuarios');\r\n-    const menuPermissoes = document.getElementById('menuPermissoes');\r\n-    const companyInfoModal = document.getElementById('companyInfoModal');\r\n-    const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-    const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-    const permissionsModal = document.getElementById('permissionsModal');\r\n-    const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-    const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-    const manageUsersModal = document.getElementById('manageUsersModal');\r\n-    const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-    const companyUsersList = document.getElementById('companyUsersList');\r\n-    const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-    const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-    const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-    const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-    const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-    const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-    const searchInput = document.getElementById('searchInput');\r\n-    const filterButtons = document.querySelectorAll('.filter-btn');\r\n-    const menuCategorias = document.getElementById('menuCategorias');\r\n-    const categoriesModal = document.getElementById('categoriesModal');\r\n-    const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-    const addCategoryForm = document.getElementById('addCategoryForm');\r\n-    const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-    const categoryListDiv = document.getElementById('categoryList');\r\n-    const billCategorySelect = document.getElementById('billCategorySelect');\r\n-    const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-    const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n-    const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-    const adminLoginForm = document.getElementById('adminLoginForm');\r\n-    const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-    const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-    const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n-    const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n-    const calendarView = document.getElementById('calendarView');\r\n-    const dashboardView = document.getElementById('dashboardView');\r\n \r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+\r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+\r\n+const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n+const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n+const calendarView = document.getElementById('calendarView');\r\n+const dashboardView = document.getElementById('dashboardView');\r\n+\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ * Verifica a sessão e o estado da assinatura.\r\n+ */\r\n+async function initializeApp() {\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n+    const action = urlParams.get('action');\r\n+\r\n+    if (action === 'forgot_password') {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+\r\n+    if (!token) {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        showAdminLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+\r\n     // --- Lógica de inicialização que estava em initializeApp() ---\r\n     const today = new Date();\r\n     currentMonth = today.getMonth();\r\n     currentYear = today.getFullYear();\r\n"
                },
                {
                    "date": 1753312212856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,128 @@\n let expensesPieChart = null;\r\n let expensesBarChart = null;\r\n \r\n \r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n \r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n \r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+\r\n+const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n+const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n+const calendarView = document.getElementById('calendarView');\r\n+const dashboardView = document.getElementById('dashboardView');\r\n+\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n@@ -1148,10 +1266,64 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ * Verifica a sessão e o estado da assinatura.\r\n+ */\r\n+async function initializeApp() {\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n+    const action = urlParams.get('action');\r\n \r\n+    if (action === 'forgot_password') {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n \r\n+    const token = localStorage.getItem('authToken');\r\n+\r\n+    if (!token) {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        showAdminLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n function logout() {\r\n     localStorage.removeItem('authToken');\r\n     localStorage.removeItem('superAdminToken');\r\n     window.location.href = 'Index.html';\r\n@@ -1634,188 +1806,8 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n-\r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-\r\n-const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n-const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n-const calendarView = document.getElementById('calendarView');\r\n-const dashboardView = document.getElementById('dashboardView');\r\n-\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- * Verifica a sessão e o estado da assinatura.\r\n- */\r\n-async function initializeApp() {\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n-    const action = urlParams.get('action');\r\n-\r\n-    if (action === 'forgot_password') {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    const token = localStorage.getItem('authToken');\r\n-\r\n-    if (!token) {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        showAdminLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-\r\n     // --- Lógica de inicialização que estava em initializeApp() ---\r\n     const today = new Date();\r\n     currentMonth = today.getMonth();\r\n     currentYear = today.getFullYear();\r\n"
                },
                {
                    "date": 1753314967053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,8 +145,12 @@\n const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n const calendarView = document.getElementById('calendarView');\r\n const dashboardView = document.getElementById('dashboardView');\r\n+const dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\n+const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n+const startDateInput = document.getElementById('start-date-input');\r\n+const endDateInput = document.getElementById('end-date-input');\r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n@@ -909,17 +913,19 @@\n  */\r\n async function renderDashboard() {\r\n     showLoader();\r\n     try {\r\n-        // Agora pedimos 3 conjuntos de dados em paralelo\r\n+        // LÊ O PERÍODO DE TEMPO SELECIONADO ANTES DE FAZER AS CHAMADAS\r\n+        const dateRange = getDateRangeFromPreset();\r\n+        \r\n+        // Passa o 'dateRange' para as chamadas da API\r\n         const [pieData, barData, kpiData] = await Promise.all([\r\n-            api.getExpensesByCategory(),\r\n-            api.getMonthlySummary(),\r\n-            api.getKpiSummary() // A nossa nova chamada de API\r\n+            api.getExpensesByCategory(dateRange),\r\n+            api.getMonthlySummary(dateRange),\r\n+            api.getKpiSummary(dateRange)\r\n         ]);\r\n         \r\n-        // Chamamos as 3 funções para renderizar tudo\r\n-        updateKpiCards(kpiData); // A nossa nova função\r\n+        updateKpiCards(kpiData);\r\n         renderPieChart(pieData);\r\n         renderBarChart(barData);\r\n \r\n     } catch (error) {\r\n@@ -1800,9 +1806,55 @@\n         });\r\n     });\r\n }\r\n \r\n+/**\r\n+ * Calcula o startDate e endDate com base numa predefinição do seletor.\r\n+ * @returns {{startDate?: string, endDate?: string}} - As datas ou um objeto vazio.\r\n+ */\r\n+function getDateRangeFromPreset() {\r\n+    const preset = dateRangePresetSelect.value;\r\n+    const now = new Date();\r\n+    let startDate, endDate;\r\n \r\n+    switch (preset) {\r\n+        case 'thisMonth':\r\n+            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n+            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n+            break;\r\n+        case 'lastMonth':\r\n+            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n+            endDate = new Date(now.getFullYear(), now.getMonth(), 0);\r\n+            break;\r\n+        case 'thisQuarter':\r\n+            const quarter = Math.floor(now.getMonth() / 3);\r\n+            startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n+            endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n+            break;\r\n+        case 'thisYear':\r\n+            startDate = new Date(now.getFullYear(), 0, 1);\r\n+            endDate = new Date(now.getFullYear(), 11, 31);\r\n+            break;\r\n+        case 'custom':\r\n+            if (startDateInput.value && endDateInput.value) {\r\n+                return {\r\n+                    startDate: startDateInput.value,\r\n+                    endDate: endDateInput.value\r\n+                };\r\n+            }\r\n+            return {}; // Retorna vazio se o intervalo personalizado não estiver completo\r\n+        default:\r\n+            return {}; // Padrão sem filtro\r\n+    }\r\n+\r\n+    // Formata as datas para o formato YYYY-MM-DD\r\n+    return {\r\n+        startDate: startDate.toISOString().split('T')[0],\r\n+        endDate: endDate.toISOString().split('T')[0]\r\n+    };\r\n+}\r\n+\r\n+\r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753314994473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2167,6 +2167,32 @@\n     if (viewDashboardBtn) {\r\n         viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n     }\r\n \r\n+    if (dateRangePresetSelect) {\r\n+        dateRangePresetSelect.addEventListener('change', () => {\r\n+            const isCustom = dateRangePresetSelect.value === 'custom';\r\n+            customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n \r\n+            // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n+            // o dashboard é atualizado imediatamente.\r\n+            if (!isCustom) {\r\n+                renderDashboard();\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    // Para o intervalo personalizado, atualizamos o dashboard\r\n+    // assim que ambas as datas estiverem preenchidas.\r\n+    if (startDateInput) {\r\n+        startDateInput.addEventListener('change', () => {\r\n+            if (endDateInput.value) renderDashboard();\r\n+        });\r\n+    }\r\n+    if (endDateInput) {\r\n+        endDateInput.addEventListener('change', () => {\r\n+            if (startDateInput.value) renderDashboard();\r\n+        });\r\n+    }\r\n+\r\n+\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753315381517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,8 +149,9 @@\n const dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\n const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n const startDateInput = document.getElementById('start-date-input');\r\n const endDateInput = document.getElementById('end-date-input');\r\n+const kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n@@ -902,8 +903,12 @@\n     const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n \r\n     const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n \r\n+    // Popula os novos campos\r\n+    if (kpiContasVencidas) kpiContasVencidas.textContent = formatCurrency(kpiData.totalVencido);\r\n+    \r\n+    // Popula os campos existentes\r\n     document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n     document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n     document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n }\r\n"
                },
                {
                    "date": 1753315966944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,8 +150,10 @@\n const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n const startDateInput = document.getElementById('start-date-input');\r\n const endDateInput = document.getElementById('end-date-input');\r\n const kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\n+const upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\n+const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n@@ -918,21 +920,23 @@\n  */\r\n async function renderDashboard() {\r\n     showLoader();\r\n     try {\r\n-        // LÊ O PERÍODO DE TEMPO SELECIONADO ANTES DE FAZER AS CHAMADAS\r\n         const dateRange = getDateRangeFromPreset();\r\n         \r\n-        // Passa o 'dateRange' para as chamadas da API\r\n-        const [pieData, barData, kpiData] = await Promise.all([\r\n+        // Agora pedimos 4 conjuntos de dados em paralelo\r\n+        const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n             api.getExpensesByCategory(dateRange),\r\n             api.getMonthlySummary(dateRange),\r\n-            api.getKpiSummary(dateRange)\r\n+            api.getKpiSummary(dateRange),\r\n+            api.getUpcomingPayments() // A nossa nova chamada de API\r\n         ]);\r\n         \r\n+        // Chamamos as 4 funções para renderizar tudo\r\n         updateKpiCards(kpiData);\r\n         renderPieChart(pieData);\r\n         renderBarChart(barData);\r\n+        renderUpcomingPayments(upcomingData); // A nossa nova função de renderização\r\n \r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n@@ -1857,9 +1861,43 @@\n         endDate: endDate.toISOString().split('T')[0]\r\n     };\r\n }\r\n \r\n+/**\r\n+ * Renderiza a lista de próximos vencimentos no dashboard.\r\n+ * @param {Array} payments - A lista de pagamentos vinda da API.\r\n+ */\r\n+function renderUpcomingPayments(payments) {\r\n+    if (!upcomingPaymentsList || !noUpcomingPaymentsMessage) return;\r\n \r\n+    upcomingPaymentsList.innerHTML = ''; // Limpa a lista\r\n+\r\n+    if (payments.length === 0) {\r\n+        upcomingPaymentsList.appendChild(noUpcomingPaymentsMessage);\r\n+        noUpcomingPaymentsMessage.classList.remove('hidden');\r\n+    } else {\r\n+        noUpcomingPaymentsMessage.classList.add('hidden');\r\n+        const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+        payments.forEach(payment => {\r\n+            const dueDate = new Date(payment.dueDate + 'T00:00:00');\r\n+            const formattedDate = dueDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\r\n+\r\n+            const paymentHtml = `\r\n+                <div class=\"flex items-center justify-between bg-gray-700/50 p-3 rounded-md\">\r\n+                    <div>\r\n+                        <p class=\"font-medium text-white\">${payment.billName} (${payment.parcelNumber}ª)</p>\r\n+                        <p class=\"text-sm text-gray-400\">Vence em: ${formattedDate}</p>\r\n+                    </div>\r\n+                    <p class=\"font-semibold text-lg text-yellow-400\">${formatCurrency(payment.amount)}</p>\r\n+                </div>\r\n+            `;\r\n+            upcomingPaymentsList.insertAdjacentHTML('beforeend', paymentHtml);\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+\r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753316251383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1035,8 +1035,30 @@\n         showToast('Erro ao carregar categorias.', 'error');\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar (drag and drop) para os cartões do dashboard.\r\n+ */\r\n+function initializeDashboardDragAndDrop() {\r\n+    const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n+    const mainGrid = document.getElementById('dashboard-main-grid');\r\n+\r\n+    if (kpiGrid) {\r\n+        new Sortable(kpiGrid, {\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50', // Efeito visual ao arrastar\r\n+        });\r\n+    }\r\n+\r\n+    if (mainGrid) {\r\n+        new Sortable(mainGrid, {\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+        });\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753316290877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2258,6 +2258,13 @@\n             if (startDateInput.value) renderDashboard();\r\n         });\r\n     }\r\n \r\n+    if (viewDashboardBtn) {\r\n+        viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+    }\r\n \r\n+    // CHAME A NOVA FUNÇÃO AQUI\r\n+    initializeDashboardDragAndDrop(); \r\n+\r\n+\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753316590026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1036,25 +1036,40 @@\n     }\r\n }\r\n \r\n /**\r\n- * Inicializa a funcionalidade de arrastar e soltar (drag and drop) para os cartões do dashboard.\r\n+ * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n+ * e salva a nova ordem no localStorage.\r\n  */\r\n function initializeDashboardDragAndDrop() {\r\n     const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n     const mainGrid = document.getElementById('dashboard-main-grid');\r\n \r\n+    const saveOrder = (gridType, sortableInstance) => {\r\n+        if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n+        \r\n+        // Cria uma chave única para o utilizador, ex: 'dashboardOrder_kpi_60d5ec...'\r\n+        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n+        // Obtém a ordem atual dos cartões através do seu 'data-id'\r\n+        const order = sortableInstance.toArray();\r\n+        // Salva a ordem como um texto JSON\r\n+        localStorage.setItem(key, JSON.stringify(order));\r\n+    };\r\n+\r\n     if (kpiGrid) {\r\n         new Sortable(kpiGrid, {\r\n             animation: 150,\r\n-            ghostClass: 'opacity-50', // Efeito visual ao arrastar\r\n+            ghostClass: 'opacity-50',\r\n+            // A função que é chamada quando o utilizador solta o cartão\r\n+            onEnd: (evt) => saveOrder('kpi', evt.target.Sortable),\r\n         });\r\n     }\r\n \r\n     if (mainGrid) {\r\n         new Sortable(mainGrid, {\r\n             animation: 150,\r\n             ghostClass: 'opacity-50',\r\n+            onEnd: (evt) => saveOrder('main', evt.target.Sortable),\r\n         });\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1753316624132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -922,22 +922,23 @@\n     showLoader();\r\n     try {\r\n         const dateRange = getDateRangeFromPreset();\r\n         \r\n-        // Agora pedimos 4 conjuntos de dados em paralelo\r\n         const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n             api.getExpensesByCategory(dateRange),\r\n             api.getMonthlySummary(dateRange),\r\n             api.getKpiSummary(dateRange),\r\n-            api.getUpcomingPayments() // A nossa nova chamada de API\r\n+            api.getUpcomingPayments()\r\n         ]);\r\n         \r\n-        // Chamamos as 4 funções para renderizar tudo\r\n         updateKpiCards(kpiData);\r\n         renderPieChart(pieData);\r\n         renderBarChart(barData);\r\n-        renderUpcomingPayments(upcomingData); // A nossa nova função de renderização\r\n+        renderUpcomingPayments(upcomingData);\r\n \r\n+        // CHAME A FUNÇÃO DE APLICAR A ORDEM AQUI\r\n+        applySavedDashboardOrder();\r\n+\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n@@ -1072,8 +1073,38 @@\n         });\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Verifica o localStorage por uma ordem de cartões salva para o utilizador atual\r\n+ * e, se encontrar, reordena os elementos no ecrã.\r\n+ */\r\n+function applySavedDashboardOrder() {\r\n+    if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n+\r\n+    const applyOrder = (gridType) => {\r\n+        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n+        const savedOrder = localStorage.getItem(key);\r\n+        const grid = document.getElementById(`dashboard-${gridType}-grid`);\r\n+\r\n+        if (savedOrder && grid) {\r\n+            const order = JSON.parse(savedOrder);\r\n+            // Para cada id na ordem salva, encontramos o elemento correspondente\r\n+            // e o movemos para o final do container. Ao fazer isto em sequência,\r\n+            // a ordem final corresponde à ordem salva.\r\n+            order.forEach(dataId => {\r\n+                const card = grid.querySelector(`[data-id=\"${dataId}\"]`);\r\n+                if (card) {\r\n+                    grid.appendChild(card);\r\n+                }\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    applyOrder('kpi');\r\n+    applyOrder('main');\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753316765139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1038,39 +1038,51 @@\n }\r\n \r\n /**\r\n  * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n- * e salva a nova ordem no localStorage.\r\n+ * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n  */\r\n function initializeDashboardDragAndDrop() {\r\n     const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n     const mainGrid = document.getElementById('dashboard-main-grid');\r\n \r\n-    const saveOrder = (gridType, sortableInstance) => {\r\n+    // Vamos guardar as instâncias do Sortable em variáveis\r\n+    let kpiSortable, mainSortable;\r\n+\r\n+    const saveOrder = (gridType) => {\r\n         if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n-        \r\n-        // Cria uma chave única para o utilizador, ex: 'dashboardOrder_kpi_60d5ec...'\r\n+\r\n         const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n-        // Obtém a ordem atual dos cartões através do seu 'data-id'\r\n-        const order = sortableInstance.toArray();\r\n-        // Salva a ordem como um texto JSON\r\n-        localStorage.setItem(key, JSON.stringify(order));\r\n+        let order;\r\n+\r\n+        // Usamos a instância correta para obter a ordem\r\n+        if (gridType === 'kpi' && kpiSortable) {\r\n+            order = kpiSortable.toArray();\r\n+        } else if (gridType === 'main' && mainSortable) {\r\n+            order = mainSortable.toArray();\r\n+        }\r\n+\r\n+        if (order) {\r\n+            localStorage.setItem(key, JSON.stringify(order));\r\n+        }\r\n     };\r\n \r\n     if (kpiGrid) {\r\n-        new Sortable(kpiGrid, {\r\n+        // Guardamos a instância na nossa variável\r\n+        kpiSortable = new Sortable(kpiGrid, {\r\n             animation: 150,\r\n             ghostClass: 'opacity-50',\r\n-            // A função que é chamada quando o utilizador solta o cartão\r\n-            onEnd: (evt) => saveOrder('kpi', evt.target.Sortable),\r\n+            // A chamada agora é mais simples\r\n+            onEnd: () => saveOrder('kpi'),\r\n         });\r\n     }\r\n \r\n     if (mainGrid) {\r\n-        new Sortable(mainGrid, {\r\n+        // Guardamos a instância na nossa variável\r\n+        mainSortable = new Sortable(mainGrid, {\r\n             animation: 150,\r\n             ghostClass: 'opacity-50',\r\n-            onEnd: (evt) => saveOrder('main', evt.target.Sortable),\r\n+            onEnd: () => saveOrder('main'),\r\n         });\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1753317043602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n let userBoletos = [];\r\n let currentMonth, currentYear;\r\n let expensesPieChart = null;\r\n let expensesBarChart = null;\r\n+let topExpensesChart = null;\r\n \r\n \r\n // =================================================================================\r\n // ELEMENTOS DO DOM - Referências aos elementos HTML\r\n"
                },
                {
                    "date": 1753317082922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1976,9 +1976,67 @@\n         });\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Renderiza o gráfico de barras horizontais com as 5 maiores despesas por categoria.\r\n+ * @param {Array} data - Os dados de despesas vindos da API.\r\n+ */\r\n+function renderTopExpensesChart(data) {\r\n+    const canvas = document.getElementById('topExpensesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n \r\n+    // Destrói o gráfico anterior, se existir, para evitar sobreposições\r\n+    if (topExpensesChart) {\r\n+        topExpensesChart.destroy();\r\n+    }\r\n+    \r\n+    // 1. Ordena os dados do maior para o menor\r\n+    const sortedData = [...data].sort((a, b) => b.totalAmount - a.totalAmount);\r\n+    \r\n+    // 2. Pega apenas nos 5 primeiros resultados\r\n+    const top5Data = sortedData.slice(0, 5);\r\n+\r\n+    // 3. Prepara os dados para o Chart.js\r\n+    const labels = top5Data.map(item => item.categoryName);\r\n+    const values = top5Data.map(item => item.totalAmount);\r\n+\r\n+    topExpensesChart = new Chart(ctx, {\r\n+        type: 'bar', // Tipo de gráfico\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total Gasto',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(239, 68, 68, 0.6)', // Vermelho\r\n+                borderColor: 'rgba(239, 68, 68, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            indexAxis: 'y', // <-- Isto é o que torna o gráfico horizontal!\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                x: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                y: { ticks: { color: '#d1d5db' }, grid: { display: false } }\r\n+            },\r\n+            plugins: {\r\n+                legend: { display: false },\r\n+                tooltip: {\r\n+                    callbacks: {\r\n+                        label: function(context) {\r\n+                            return ` Total: ${context.raw.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+                        }\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+\r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753317100251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -934,12 +934,10 @@\n         updateKpiCards(kpiData);\r\n         renderPieChart(pieData);\r\n         renderBarChart(barData);\r\n         renderUpcomingPayments(upcomingData);\r\n+        renderTopExpensesChart(pieData); // <-- ADICIONE ESTA LINHA\r\n \r\n-        // CHAME A FUNÇÃO DE APLICAR A ORDEM AQUI\r\n-        applySavedDashboardOrder();\r\n-\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n"
                },
                {
                    "date": 1753363686668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2427 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import { API_BASE_URL } from './api.js';\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let expensesPieChart = null;\r\n+let expensesBarChart = null;\r\n+let topExpensesChart = null;\r\n+\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const clearFormBtn = document.getElementById('clearFormBtn');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+\r\n+const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n+const adminLoginForm = document.getElementById('adminLoginForm');\r\n+const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n+const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n+\r\n+const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n+const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n+const calendarView = document.getElementById('calendarView');\r\n+const dashboardView = document.getElementById('dashboardView');\r\n+const dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\n+const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n+const startDateInput = document.getElementById('start-date-input');\r\n+const endDateInput = document.getElementById('end-date-input');\r\n+const kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\n+const upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\n+const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n+const exportCsvBtn = document.getElementById('export-csv-btn');\r\n+const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n+ * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n+ */\r\n+/**\r\n+ * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n+ */\r\n+function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+\r\n+    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n+\r\n+    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n+    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n+\r\n+    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n+\r\n+    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    // Atualiza os elementos HTML com os valores corretos\r\n+    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n+    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n+    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com uma lista específica de boletos.\r\n+ * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n+ */\r\n+function renderCalendar(boletosToRender = userBoletos) {\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+\r\n+        // Adiciona a classe 'day-cell-droppable' para o SortableJS\r\n+        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+\r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card-draggable')) return;\r\n+            openAddBillModal(e.currentTarget.dataset.date);\r\n+        });\r\n+\r\n+        // Usa a lista 'boletosToRender' que foi passada para a função\r\n+        boletosToRender.forEach(bill => {\r\n+            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+                const parcelElement = document.createElement('div');\r\n+\r\n+                // Adiciona as classes e os atributos de dados para o drag-and-drop\r\n+                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n+                parcelElement.dataset.boletoId = bill._id;\r\n+                parcelElement.dataset.parcelId = parcel._id;\r\n+\r\n+                // Gera o conteúdo do card com todas as informações\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n+                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                    ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n+                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n+                `;\r\n+\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        });\r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+\r\n+    // Ativa a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n+    initializeDragAndDrop();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+async function openBillModal(bill, parcel) {\r\n+    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+\r\n+    // Preenche todos os campos do modal com os dados da parcela clicada\r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+    // Mostra o botão de gerar código de barras apenas se houver um código\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+\r\n+    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n+    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n+    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n+    if (bill.nfeNumber) {\r\n+        nfeNumberEl.textContent = bill.nfeNumber;\r\n+        nfeContainer.classList.remove('hidden');\r\n+    } else {\r\n+        nfeContainer.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Lógica dinâmica para a secção de anexos\r\n+    const attachmentContainer = document.getElementById('attachment-container');\r\n+    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n+\r\n+    if (parcel.attachmentUrl) {\r\n+        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n+        attachmentContainer.innerHTML = `\r\n+            <div class=\"flex items-center justify-between\">\r\n+                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n+                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n+                </a>\r\n+                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n+            </div>\r\n+        `;\r\n+        // Adiciona o evento de clique ao novo botão de remover\r\n+        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n+    } else {\r\n+        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        // Adiciona o evento de 'change' ao novo input de upload\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+    }\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        categories.forEach(cat => {\r\n+            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n+        });\r\n+        if (bill.category) {\r\n+            modalBillCategorySelect.value = bill.category._id;\r\n+        } else {\r\n+            modalBillCategorySelect.value = \"\";\r\n+        }\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    if (billForm) {\r\n+        billForm.reset();\r\n+    }\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        totalBillsSpan.textContent = totalParcels;\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    mainAppContent.classList.remove('hidden');\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+     await populateCategoryFilter();\r\n+     await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n+ * @param {string} tagName - O nome da tag a ser procurada.\r\n+ * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n+ * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n+ */\r\n+function getTagValue(tagName, parentElement) {\r\n+    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n+    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n+    return element?.textContent || '';\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ */\r\n+function openCompanyDetailsModal(company, users) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (users && users.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        users.forEach(user => {\r\n+            // Cria as opções do dropdown, marcando a atual como selecionada\r\n+            const roleOptions = roles.map(role =>\r\n+                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+            ).join('');\r\n+\r\n+            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona o evento para os botões \"Remover\"\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    if (password !== confirmPassword) {\r\n+        return showToast(\"As senhas não coincidem.\", \"error\");\r\n+    }\r\n+    // A verificação agora funciona para os dois casos\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.registerUser(username, password, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n+        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+\r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function openCategoriesModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        renderCategoryList(categories);\r\n+        categoriesModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function renderCategoryList(categories) {\r\n+    categoryListDiv.innerHTML = '';\r\n+    if (categories.length === 0) {\r\n+        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n+        return;\r\n+    }\r\n+    categories.forEach(category => {\r\n+        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n+                <span class=\"text-white\">${category.name}</span>\r\n+                <div>\r\n+                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n+                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                </div>\r\n+            </div>\r\n+        `);\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo boleto, buscando as categorias\r\n+ * e opcionalmente pré-preenchendo a data.\r\n+ * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n+ */\r\n+async function openAddBillModal(preselectedDate = null) {\r\n+    clearBillForm();\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+\r\n+        categories.forEach(category => {\r\n+            const option = document.createElement('option');\r\n+            option.value = category._id;\r\n+            option.textContent = category.name;\r\n+            billCategorySelect.appendChild(option);\r\n+        });\r\n+\r\n+        // Se uma data foi passada como parâmetro, nós a preenchemos\r\n+        if (preselectedDate) {\r\n+            document.getElementById('dueDate').value = preselectedDate;\r\n+        }\r\n+\r\n+        addBillModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function populateCategoryFilter() {\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n+        // Se der erro, garante que a opção padrão exista\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Alterna a visualização entre o Calendário e o Dashboard.\r\n+ */\r\n+function switchView(viewToShow) {\r\n+    // Esconde ambas as vistas\r\n+    calendarView.classList.add('hidden');\r\n+    dashboardView.classList.add('hidden');\r\n+\r\n+    // Reseta o estilo dos botões\r\n+    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n+    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n+    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+\r\n+    // Mostra a vista correta e ativa o botão correspondente\r\n+    if (viewToShow === 'calendar') {\r\n+        calendarView.classList.remove('hidden');\r\n+        viewCalendarBtn.classList.add('bg-indigo-600');\r\n+        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    } else if (viewToShow === 'dashboard') {\r\n+        dashboardView.classList.remove('hidden');\r\n+        viewDashboardBtn.classList.add('bg-indigo-600');\r\n+        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderDashboard();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza os cartões de KPI no dashboard.\r\n+ * @param {object} kpiData - Os dados dos KPIs vindos da API.\r\n+ */\r\n+function updateKpiCards(kpiData) {\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n+\r\n+    // Popula os novos campos\r\n+    if (kpiContasVencidas) kpiContasVencidas.textContent = formatCurrency(kpiData.totalVencido);\r\n+    \r\n+    // Popula os campos existentes\r\n+    document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n+    document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n+    document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n+}\r\n+\r\n+/**\r\n+ * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n+ */\r\n+async function renderDashboard() {\r\n+    showLoader();\r\n+    try {\r\n+        const dateRange = getDateRangeFromPreset();\r\n+        \r\n+        const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n+            api.getExpensesByCategory(dateRange),\r\n+            api.getMonthlySummary(dateRange),\r\n+            api.getKpiSummary(dateRange),\r\n+            api.getUpcomingPayments()\r\n+        ]);\r\n+        \r\n+        updateKpiCards(kpiData);\r\n+        renderPieChart(pieData);\r\n+        renderBarChart(barData);\r\n+        renderUpcomingPayments(upcomingData);\r\n+        renderTopExpensesChart(pieData); // <-- ADICIONE ESTA LINHA\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de pizza de despesas por categoria.\r\n+ */\r\n+function renderPieChart(data) {\r\n+    const canvas = document.getElementById('expensesByCategoryChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    if (expensesPieChart) {\r\n+        expensesPieChart.destroy();\r\n+    }\r\n+\r\n+    expensesPieChart = new Chart(ctx, {\r\n+        type: 'pie',\r\n+        data: {\r\n+            labels: data.map(item => item.categoryName),\r\n+            datasets: [{\r\n+                data: data.map(item => item.totalAmount),\r\n+                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n+                borderColor: '#1f2937',\r\n+                borderWidth: 2\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n+ */\r\n+function renderBarChart(data) {\r\n+    const canvas = document.getElementById('monthlyExpensesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n+    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n+    const values = data.map(item => item.totalAmount);\r\n+\r\n+    if (expensesBarChart) {\r\n+        expensesBarChart.destroy();\r\n+    }\r\n+    \r\n+    expensesBarChart = new Chart(ctx, {\r\n+        type: 'bar',\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total Pago por Mês',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n+                borderColor: 'rgba(79, 70, 229, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n+            },\r\n+            plugins: { legend: { display: false } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Busca categorias da API e preenche um elemento <select> do HTML.\r\n+ * @param {HTMLSelectElement} selectElement - O elemento dropdown a ser preenchido.\r\n+ */\r\n+async function populateCategorySelect(selectElement) {\r\n+    if (!selectElement) return;\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        selectElement.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            const option = document.createElement('option');\r\n+            option.value = category._id;\r\n+            option.textContent = category.name;\r\n+            selectElement.appendChild(option);\r\n+        });\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n+ * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n+ */\r\n+function initializeDashboardDragAndDrop() {\r\n+    const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n+    const mainGrid = document.getElementById('dashboard-main-grid');\r\n+\r\n+    // Vamos guardar as instâncias do Sortable em variáveis\r\n+    let kpiSortable, mainSortable;\r\n+\r\n+    const saveOrder = (gridType) => {\r\n+        if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n+\r\n+        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n+        let order;\r\n+\r\n+        // Usamos a instância correta para obter a ordem\r\n+        if (gridType === 'kpi' && kpiSortable) {\r\n+            order = kpiSortable.toArray();\r\n+        } else if (gridType === 'main' && mainSortable) {\r\n+            order = mainSortable.toArray();\r\n+        }\r\n+\r\n+        if (order) {\r\n+            localStorage.setItem(key, JSON.stringify(order));\r\n+        }\r\n+    };\r\n+\r\n+    if (kpiGrid) {\r\n+        // Guardamos a instância na nossa variável\r\n+        kpiSortable = new Sortable(kpiGrid, {\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+            // A chamada agora é mais simples\r\n+            onEnd: () => saveOrder('kpi'),\r\n+        });\r\n+    }\r\n+\r\n+    if (mainGrid) {\r\n+        // Guardamos a instância na nossa variável\r\n+        mainSortable = new Sortable(mainGrid, {\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+            onEnd: () => saveOrder('main'),\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Verifica o localStorage por uma ordem de cartões salva para o utilizador atual\r\n+ * e, se encontrar, reordena os elementos no ecrã.\r\n+ */\r\n+function applySavedDashboardOrder() {\r\n+    if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n+\r\n+    const applyOrder = (gridType) => {\r\n+        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n+        const savedOrder = localStorage.getItem(key);\r\n+        const grid = document.getElementById(`dashboard-${gridType}-grid`);\r\n+\r\n+        if (savedOrder && grid) {\r\n+            const order = JSON.parse(savedOrder);\r\n+            // Para cada id na ordem salva, encontramos o elemento correspondente\r\n+            // e o movemos para o final do container. Ao fazer isto em sequência,\r\n+            // a ordem final corresponde à ordem salva.\r\n+            order.forEach(dataId => {\r\n+                const card = grid.querySelector(`[data-id=\"${dataId}\"]`);\r\n+                if (card) {\r\n+                    grid.appendChild(card);\r\n+                }\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    applyOrder('kpi');\r\n+    applyOrder('main');\r\n+}\r\n+\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+\r\n+async function handleForgotPasswordRequest(e) {\r\n+    e.preventDefault();\r\n+    const email = document.getElementById('recoveryEmailInput').value;\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.requestPasswordReset(email);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n+        forgotPasswordModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList(); // Se tiver essa função\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a API para obter os detalhes\r\n+                const { company, users } = await api.getCompanyDetails(companyId);\r\n+                // Chama a nossa nova função para abrir e preencher o modal\r\n+                openCompanyDetailsModal(company, users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { users } = await api.getCompanyDetails(companyId);\r\n+                if (users.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                }\r\n+                const userIdToImpersonate = users[0]._id;\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+async function handleCalculateInstallments(e) {\r\n+    e.preventDefault();\r\n+    const billName = document.getElementById('billName').value;\r\n+    const categoryId = billCategorySelect.value;\r\n+    const dueDate = document.getElementById('dueDate').value;\r\n+    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n+    const totalAmount = parseFloat(totalAmountValue);\r\n+    const installments = parseInt(document.getElementById('installments').value);\r\n+    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+    const description = document.getElementById('description').value;\r\n+    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n+\r\n+    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n+        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+    }\r\n+\r\n+    currentBill = {\r\n+        name: billName,\r\n+        description,\r\n+        parcels: [],\r\n+        category: categoryId || null\r\n+    };\r\n+    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+    installmentsList.innerHTML = '';\r\n+\r\n+    for (let i = 0; i < installments; i++) {\r\n+        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+\r\n+        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n+        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n+\r\n+        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n+        installmentsList.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n+                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n+            </div>\r\n+        `);\r\n+    }\r\n+\r\n+    // Adiciona os eventos para os novos inputs\r\n+    addEventListenersToInstallmentInputs();\r\n+    updatePreviewTotal();\r\n+    previewBillNameInput.value = currentBill.name;\r\n+    previewNfeNumber.textContent = 'N/A';\r\n+    addBillModal.classList.add('hidden');\r\n+    await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n+    installmentsPreviewModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n+ */\r\n+function updatePreviewTotal() {\r\n+    if (!currentBill.parcels) return;\r\n+    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    currentBill.category = document.getElementById('previewBillCategorySelect').value || null;\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill); // O objeto currentBill agora tem a categoria correta\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+        clearBillForm();\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+    const updatedParcelData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    const updatedBillData = {\r\n+        category: modalBillCategorySelect.value || null\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n+        await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n+\r\n+        showToast('Alterações salvas com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ * Verifica a sessão e o estado da assinatura.\r\n+ */\r\n+async function initializeApp() {\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n+    const action = urlParams.get('action');\r\n+\r\n+    if (action === 'forgot_password') {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+\r\n+    if (!token) {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        showAdminLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+function logout() {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+\r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n+\r\n+        // Define os cargos que o Proprietário pode atribuir.\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+        if (users && users.length > 0) {\r\n+            users.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+\r\n+                // Cria as opções do dropdown para Gerente e Funcionário\r\n+                const roleOptions = assignableRoles.map(role =>\r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n+                const roleHtml = isOwner\r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+\r\n+        // Adiciona o evento de clique aos botões de remover\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                // ... (a lógica de remover continua a mesma de antes)\r\n+            });\r\n+        });\r\n+\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n+\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n+                    e.target.value = originalRole; // Reverte a seleção visual\r\n+                    return;\r\n+\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n+ * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n+ * @param {Event} event - O evento 'change' do input do ficheiro.\r\n+ */\r\n+async function handleNfeXmlUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) {\r\n+        return;\r\n+    }\r\n+\r\n+    const reader = new FileReader();\r\n+\r\n+    reader.onload = async (e) => {\r\n+        try {\r\n+            const xmlString = e.target.result;\r\n+            const parser = new DOMParser();\r\n+            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n+\r\n+            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n+            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n+                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n+            }\r\n+\r\n+            // Define os nós principais para evitar procuras repetidas\r\n+            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n+            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n+\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n+\r\n+            let parcelsData = [];\r\n+\r\n+            if (duplicatas.length > 0) {\r\n+                // --- CENÁRIO 1: Encontrou as tags <dup> (padrão) ---\r\n+                parcelsData = duplicatas.map((dup, i) => ({\r\n+                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n+                    dueDate: getTagValue(\"dVenc\", dup)\r\n+                }));\r\n+            } else {\r\n+                // --- CENÁRIO 2: Procura por informações de cobrança no texto ---\r\n+                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n+                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n+\r\n+                if (cobrancaMatch && cobrancaMatch[1]) {\r\n+                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n+                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n+                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n+                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n+\r\n+                    parcelsData = dias.map((dia, i) => {\r\n+                        const vencimento = new Date(dataEmissao);\r\n+                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n+                        return {\r\n+                            number: i + 1,\r\n+                            amount: parcelAmount,\r\n+                            dueDate: vencimento.toISOString().split('T')[0]\r\n+                        };\r\n+                    });\r\n+                }\r\n+            }\r\n+\r\n+            if (parcelsData.length > 0) {\r\n+                // --- Se encontrou parcelas (por qualquer método), vai para a pré-visualização ---\r\n+                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: parcelsData };\r\n+\r\n+                installmentsList.innerHTML = '';\r\n+                currentBill.parcels.forEach((parcel, index) => {\r\n+                    installmentsList.insertAdjacentHTML('beforeend', `\r\n+                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                        </div>\r\n+                    `);\r\n+                });\r\n+\r\n+                addEventListenersToInstallmentInputs();\r\n+                updatePreviewTotal();\r\n+                previewBillNameInput.value = currentBill.name;\r\n+                previewNfeNumber.textContent = nfeNumber;\r\n+                await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n+                installmentsPreviewModal.classList.remove('hidden');\r\n+\r\n+            } else {\r\n+                // --- CENÁRIO 3: Não encontrou parcelas, preenche o formulário manual ---\r\n+                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n+                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n+\r\n+                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n+                if (vencimento) {\r\n+                    document.getElementById('dueDate').value = vencimento;\r\n+                }\r\n+\r\n+                addBillModal.classList.remove('hidden');\r\n+            }\r\n+\r\n+            showToast('Dados do XML carregados com sucesso!', 'success');\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            console.error(\"Erro ao processar XML:\", error);\r\n+        } finally {\r\n+            // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n+            event.target.value = '';\r\n+        }\r\n+    };\r\n+\r\n+    reader.onerror = () => {\r\n+        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+    };\r\n+\r\n+    reader.readAsText(file);\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n+ */\r\n+function addEventListenersToInstallmentInputs() {\r\n+    // Listener para o campo de VALOR\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            }\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de DATA\r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    /**\r\n+     * Mostra a tela de login de administrador.\r\n+     */\r\n+    function showAdminLogin() {\r\n+        hideAllScreens(); // Função de utils.js\r\n+        if (adminLoginForm) adminLoginForm.reset();\r\n+        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    // Listener para o campo de CÓDIGO DE BARRAS\r\n+    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        // Evento para guardar o valor quando é digitado\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].barcode = e.target.value;\r\n+            }\r\n+        });\r\n+\r\n+        input.addEventListener('keydown', (e) => {\r\n+            if (e.key === 'Enter') {\r\n+                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n+\r\n+                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n+                const nextIndex = currentIndex + 1;\r\n+                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n+\r\n+                if (nextInput) {\r\n+                    // Se houver um próximo campo de código de barras, foca nele.\r\n+                    nextInput.focus();\r\n+                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n+                } else {\r\n+                    // Se for o último campo, foca no botão de salvar.\r\n+                    document.getElementById('addToOrganizer').focus();\r\n+                }\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n+ */\r\n+function handleShowFullScreenBarcode() {\r\n+    const barcodeValue = modalBillBarcodeInput.value;\r\n+    if (!barcodeValue) {\r\n+        return showToast('Não há código de barras para mostrar.', 'info');\r\n+    }\r\n+\r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    if (!barcodeImageContainer) return;\r\n+\r\n+    // Limpa qualquer código de barras anterior\r\n+    barcodeImageContainer.innerHTML = '';\r\n+\r\n+    try {\r\n+        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n+        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n+\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n+        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n+            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n+            lineColor: \"#000000\",\r\n+            width: 2,\r\n+            height: 100,\r\n+            displayValue: true, // Mostra os números abaixo das barras\r\n+            fontSize: 18\r\n+        });\r\n+\r\n+        // Mostra o modal de ecrã inteiro\r\n+        barcodeFullScreenModal.classList.remove('hidden');\r\n+\r\n+    } catch (e) {\r\n+        console.error(\"Erro ao gerar código de barras:\", e);\r\n+        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n+    }\r\n+}\r\n+\r\n+async function handleAttachmentUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file || !selectedParcel) return;\r\n+\r\n+    // Cria um objeto FormData para enviar o ficheiro\r\n+    const formData = new FormData();\r\n+    formData.append('comprovante', file);\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Atualiza a UI para mostrar o link do novo anexo\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+\r\n+        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para remover um anexo de comprovativo.\r\n+ * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n+ */\r\n+async function handleRemoveAttachment() {\r\n+    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n+    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader(); // Mostra o ícone de carregamento\r\n+    try {\r\n+        // Chama a nossa função da API para apagar o anexo\r\n+        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n+\r\n+        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+\r\n+        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+\r\n+        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n+        await updateBillsOrganizer();\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n+ */\r\n+function applyFiltersAndSearch() {\r\n+    const searchTerm = searchInput.value.toLowerCase();\r\n+    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n+\r\n+    let filteredBoletos = userBoletos.filter(bill => {\r\n+        // Filtro de pesquisa\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n+            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+        if (!matchesSearch) return false;\r\n+\r\n+        // Filtro de categoria\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+        if (!matchesCategory) return false;\r\n+\r\n+        // Filtro de status\r\n+        if (activeStatusFilter === 'all') return true;\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        return bill.parcels.some(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeStatusFilter === 'paid') return parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            return false;\r\n+        });\r\n+    });\r\n+\r\n+    renderCalendar(filteredBoletos);\r\n+    updateMonthlySummary(filteredBoletos);\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário.\r\n+ */\r\n+function initializeDragAndDrop() {\r\n+    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n+\r\n+    dayCells.forEach(cell => {\r\n+        new Sortable(cell, {\r\n+            group: 'calendar-bills', // Permite mover cards entre células\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50', // Estilo do \"fantasma\" do card ao arrastar\r\n+\r\n+            // A função que é chamada QUANDO você solta um card\r\n+            onEnd: async function (evt) {\r\n+                const item = evt.item; // O card que foi arrastado\r\n+                const toCell = evt.to;   // A célula do dia onde ele foi solto\r\n+\r\n+                const boletoId = item.dataset.boletoId;\r\n+                const parcelId = item.dataset.parcelId;\r\n+                const newDate = toCell.dataset.date;\r\n+\r\n+                if (!boletoId || !parcelId || !newDate) return;\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    // Chamamos a nossa API para atualizar a data de vencimento\r\n+                    await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n+                    showToast('Data da parcela atualizada com sucesso!', 'success');\r\n+\r\n+                    // Atualizamos a aplicação inteira para refletir a mudança\r\n+                    await updateBillsOrganizer();\r\n+\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                    // Se der erro, atualizamos a interface para reverter a mudança visual\r\n+                    await updateBillsOrganizer();\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            },\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Calcula o startDate e endDate com base numa predefinição do seletor.\r\n+ * @returns {{startDate?: string, endDate?: string}} - As datas ou um objeto vazio.\r\n+ */\r\n+function getDateRangeFromPreset() {\r\n+    const preset = dateRangePresetSelect.value;\r\n+    const now = new Date();\r\n+    let startDate, endDate;\r\n+\r\n+    switch (preset) {\r\n+        case 'thisMonth':\r\n+            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n+            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n+            break;\r\n+        case 'lastMonth':\r\n+            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n+            endDate = new Date(now.getFullYear(), now.getMonth(), 0);\r\n+            break;\r\n+        case 'thisQuarter':\r\n+            const quarter = Math.floor(now.getMonth() / 3);\r\n+            startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n+            endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n+            break;\r\n+        case 'thisYear':\r\n+            startDate = new Date(now.getFullYear(), 0, 1);\r\n+            endDate = new Date(now.getFullYear(), 11, 31);\r\n+            break;\r\n+        case 'custom':\r\n+            if (startDateInput.value && endDateInput.value) {\r\n+                return {\r\n+                    startDate: startDateInput.value,\r\n+                    endDate: endDateInput.value\r\n+                };\r\n+            }\r\n+            return {}; // Retorna vazio se o intervalo personalizado não estiver completo\r\n+        default:\r\n+            return {}; // Padrão sem filtro\r\n+    }\r\n+\r\n+    // Formata as datas para o formato YYYY-MM-DD\r\n+    return {\r\n+        startDate: startDate.toISOString().split('T')[0],\r\n+        endDate: endDate.toISOString().split('T')[0]\r\n+    };\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a lista de próximos vencimentos no dashboard.\r\n+ * @param {Array} payments - A lista de pagamentos vinda da API.\r\n+ */\r\n+function renderUpcomingPayments(payments) {\r\n+    if (!upcomingPaymentsList || !noUpcomingPaymentsMessage) return;\r\n+\r\n+    upcomingPaymentsList.innerHTML = ''; // Limpa a lista\r\n+\r\n+    if (payments.length === 0) {\r\n+        upcomingPaymentsList.appendChild(noUpcomingPaymentsMessage);\r\n+        noUpcomingPaymentsMessage.classList.remove('hidden');\r\n+    } else {\r\n+        noUpcomingPaymentsMessage.classList.add('hidden');\r\n+        const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+        payments.forEach(payment => {\r\n+            const dueDate = new Date(payment.dueDate + 'T00:00:00');\r\n+            const formattedDate = dueDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\r\n+\r\n+            const paymentHtml = `\r\n+                <div class=\"flex items-center justify-between bg-gray-700/50 p-3 rounded-md\">\r\n+                    <div>\r\n+                        <p class=\"font-medium text-white\">${payment.billName} (${payment.parcelNumber}ª)</p>\r\n+                        <p class=\"text-sm text-gray-400\">Vence em: ${formattedDate}</p>\r\n+                    </div>\r\n+                    <p class=\"font-semibold text-lg text-yellow-400\">${formatCurrency(payment.amount)}</p>\r\n+                </div>\r\n+            `;\r\n+            upcomingPaymentsList.insertAdjacentHTML('beforeend', paymentHtml);\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de barras horizontais com as 5 maiores despesas por categoria.\r\n+ * @param {Array} data - Os dados de despesas vindos da API.\r\n+ */\r\n+function renderTopExpensesChart(data) {\r\n+    const canvas = document.getElementById('topExpensesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    // Destrói o gráfico anterior, se existir, para evitar sobreposições\r\n+    if (topExpensesChart) {\r\n+        topExpensesChart.destroy();\r\n+    }\r\n+    \r\n+    // 1. Ordena os dados do maior para o menor\r\n+    const sortedData = [...data].sort((a, b) => b.totalAmount - a.totalAmount);\r\n+    \r\n+    // 2. Pega apenas nos 5 primeiros resultados\r\n+    const top5Data = sortedData.slice(0, 5);\r\n+\r\n+    // 3. Prepara os dados para o Chart.js\r\n+    const labels = top5Data.map(item => item.categoryName);\r\n+    const values = top5Data.map(item => item.totalAmount);\r\n+\r\n+    topExpensesChart = new Chart(ctx, {\r\n+        type: 'bar', // Tipo de gráfico\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total Gasto',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(239, 68, 68, 0.6)', // Vermelho\r\n+                borderColor: 'rgba(239, 68, 68, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            indexAxis: 'y', // <-- Isto é o que torna o gráfico horizontal!\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                x: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                y: { ticks: { color: '#d1d5db' }, grid: { display: false } }\r\n+            },\r\n+            plugins: {\r\n+                legend: { display: false },\r\n+                tooltip: {\r\n+                    callbacks: {\r\n+                        label: function(context) {\r\n+                            return ` Total: ${context.raw.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+                        }\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', async () => {\r\n+    // --- Lógica de inicialização que estava em initializeApp() ---\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        // Se não houver token, redireciona para a página de login\r\n+        window.location.href = 'Index.html';\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    // Se for o dono da empresa, mostra o modal para renovar\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n+        // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n+        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        setTimeout(() => {\r\n+            window.location.href = 'Index.html';\r\n+        }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n+    } finally {\r\n+        // Esconde a tela de carregamento inicial\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+\r\n+\r\n+    // Submissão de formulários\r\n+    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+    if (logoutBtn) {\r\n+        logoutBtn.addEventListener('click', () => {\r\n+            window.location.href = 'Index.html';\r\n+        });\r\n+    }\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+\r\n+\r\n+    // Ações na App Principal\r\n+    clearFormBtn.addEventListener('click', clearBillForm);\r\n+    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+    // Ações do Modal de Edição de Boleto\r\n+    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+    // Navegação do Calendário\r\n+    prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+        if (currentMonth === 11) currentYear--;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+        if (currentMonth === 0) currentYear++;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n+    });\r\n+\r\n+    if (addCompanyCnpjInput) {\r\n+        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n+\r\n+    if (openAddBillModalBtn) {\r\n+        openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+    }\r\n+\r\n+    const handleRedirectToHome = () => {\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    const handleFullLogoutAndRedirect = () => {\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        window.location.href = 'Index.html';\r\n+    };\r\n+\r\n+    if (subscriptionLogoutBtn) {\r\n+        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+    }\r\n+\r\n+    if (blockedAccessLogoutBtn) {\r\n+        blockedAccessLogoutBtn.addEventListener('click', () => {\r\n+            window.location.href = 'Index.html';\r\n+        });\r\n+    }\r\n+\r\n+    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+    if (settingsBtn) {\r\n+        settingsBtn.addEventListener('click', (e) => {\r\n+            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+            settingsDropdown.classList.toggle('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    // Links dentro do menu dropdown\r\n+    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCompanyInfoModal();\r\n+    });\r\n+\r\n+    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openPermissionsModal();\r\n+    });\r\n+\r\n+    window.addEventListener('click', () => {\r\n+        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n+        }\r\n+    });\r\n+\r\n+    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openManageUsersModal();\r\n+    });\r\n+\r\n+    // Botões do modal de gerir utilizadores\r\n+    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+    });\r\n+\r\n+    /**\r\n+     * Lida com o clique no botão de criar/renovar assinatura.\r\n+     */\r\n+    async function handleCreateSubscription() {\r\n+        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+        subscriptionActionBtn.disabled = true;\r\n+        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+        try {\r\n+            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+            const data = await api.createSubscriptionLink();\r\n+\r\n+            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+            if (data.init_point) {\r\n+                window.location.href = data.init_point;\r\n+            } else {\r\n+                throw new Error('Link de pagamento não recebido.');\r\n+            }\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+            subscriptionActionBtn.disabled = false;\r\n+            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+        }\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão.\r\n+    if (subscriptionActionBtn) {\r\n+        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+    }\r\n+\r\n+    if (closePreviewModalBtn) {\r\n+        closePreviewModalBtn.addEventListener('click', () => {\r\n+            installmentsPreviewModal.classList.add('hidden');\r\n+        });\r\n+    }\r\n+\r\n+    if (nfeXmlInput) {\r\n+        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+    }\r\n+\r\n+    if (previewBillNameInput) {\r\n+        previewBillNameInput.addEventListener('input', (e) => {\r\n+            if (currentBill) {\r\n+                currentBill.name = e.target.value;\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    // Liga a função ao clique do botão\r\n+    if (showFullScreenBarcodeBtn) {\r\n+        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+    }\r\n+\r\n+    // Listener para o campo de pesquisa\r\n+    if (searchInput) {\r\n+        searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+    }\r\n+\r\n+    // Listeners para os botões de filtro\r\n+    if (filterButtons) {\r\n+        filterButtons.forEach(button => {\r\n+            button.addEventListener('click', (e) => {\r\n+                // Remove a classe 'active' de todos os botões\r\n+                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+                // Adiciona a classe 'active' apenas ao botão clicado\r\n+                e.currentTarget.classList.add('active');\r\n+                // Aplica o filtro\r\n+                applyFiltersAndSearch();\r\n+            });\r\n+        });\r\n+    }\r\n+\r\n+    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCategoriesModal();\r\n+    });\r\n+\r\n+    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+    if (addCategoryForm) {\r\n+        addCategoryForm.addEventListener('submit', async (e) => {\r\n+            e.preventDefault();\r\n+            const name = newCategoryNameInput.value.trim();\r\n+            if (!name) return;\r\n+            try {\r\n+                await api.createCategory(name);\r\n+                newCategoryNameInput.value = '';\r\n+                await openCategoriesModal(); // Recarrega a lista do modal\r\n+                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+    });\r\n+\r\n+    if (categoryFilterSelect) {\r\n+        categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+    }\r\n+\r\n+    // Configuração dos botões do dashboard\r\n+    if (viewCalendarBtn) {\r\n+        viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+    }\r\n+    if (viewDashboardBtn) {\r\n+        viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+    }\r\n+\r\n+    if (dateRangePresetSelect) {\r\n+        dateRangePresetSelect.addEventListener('change', () => {\r\n+            const isCustom = dateRangePresetSelect.value === 'custom';\r\n+            customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n+\r\n+            // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n+            // o dashboard é atualizado imediatamente.\r\n+            if (!isCustom) {\r\n+                renderDashboard();\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    // Para o intervalo personalizado, atualizamos o dashboard\r\n+    // assim que ambas as datas estiverem preenchidas.\r\n+    if (startDateInput) {\r\n+        startDateInput.addEventListener('change', () => {\r\n+            if (endDateInput.value) renderDashboard();\r\n+        });\r\n+    }\r\n+    if (endDateInput) {\r\n+        endDateInput.addEventListener('change', () => {\r\n+            if (startDateInput.value) renderDashboard();\r\n+        });\r\n+    }\r\n+\r\n+    if (viewDashboardBtn) {\r\n+        viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+    }\r\n+\r\n+    // Listeners para os botões de exportação\r\n+    const handleExport = (format) => {\r\n+        // 1. Pega no período de tempo atual do filtro do dashboard\r\n+        const dateRange = getDateRangeFromPreset();\r\n+\r\n+        // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n+        const queryString = new URLSearchParams(dateRange).toString();\r\n+\r\n+        // 3. Monta o URL completo para o download\r\n+        const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n+        \r\n+        // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n+        // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n+        fetch(downloadUrl, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n+            }\r\n+        })\r\n+        .then(res => res.blob())\r\n+        .then(blob => {\r\n+            const url = window.URL.createObjectURL(blob);\r\n+            const a = document.createElement('a');\r\n+            a.style.display = 'none';\r\n+            a.href = url;\r\n+            a.download = `relatorio-despesas.${format}`;\r\n+            document.body.appendChild(a);\r\n+            a.click();\r\n+            window.URL.revokeObjectURL(url);\r\n+            a.remove();\r\n+        }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n+    };\r\n+\r\n+    if (exportCsvBtn) {\r\n+        exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+    }\r\n+    if (exportPdfBtn) {\r\n+        exportPdfBtn.addEventListener('click', () => handleExport('pdf'));\r\n+    }\r\n+\r\n+    // CHAME A NOVA FUNÇÃO AQUI\r\n+    initializeDashboardDragAndDrop(); \r\n+\r\n+\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753363753138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n \r\n // =================================================================================\r\n // IMPORTS - Trazemos as ferramentas dos outros módulos\r\n // =================================================================================\r\n-import { API_BASE_URL } from './api.js';\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n \r\n \r\n@@ -2423,2390 +2422,5 @@\n     // CHAME A NOVA FUNÇÃO AQUI\r\n     initializeDashboardDragAndDrop(); \r\n \r\n \r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let expensesPieChart = null;\r\n-let expensesBarChart = null;\r\n-let topExpensesChart = null;\r\n-\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n-\r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-\r\n-const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n-const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n-const calendarView = document.getElementById('calendarView');\r\n-const dashboardView = document.getElementById('dashboardView');\r\n-const dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\n-const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n-const startDateInput = document.getElementById('start-date-input');\r\n-const endDateInput = document.getElementById('end-date-input');\r\n-const kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\n-const upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\n-const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n- * Por padrão, usa a lista completa de boletos do utilizador.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n- */\r\n-/**\r\n- * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n- */\r\n-function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-\r\n-    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n-\r\n-    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n-    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n-\r\n-    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n-\r\n-    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    // Atualiza os elementos HTML com os valores corretos\r\n-    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n-    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n-    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com uma lista específica de boletos.\r\n- * Por padrão, usa a lista completa de boletos do utilizador.\r\n- * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n- */\r\n-function renderCalendar(boletosToRender = userBoletos) {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-\r\n-        // Adiciona a classe 'day-cell-droppable' para o SortableJS\r\n-        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-\r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card-draggable')) return;\r\n-            openAddBillModal(e.currentTarget.dataset.date);\r\n-        });\r\n-\r\n-        // Usa a lista 'boletosToRender' que foi passada para a função\r\n-        boletosToRender.forEach(bill => {\r\n-            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-                const parcelElement = document.createElement('div');\r\n-\r\n-                // Adiciona as classes e os atributos de dados para o drag-and-drop\r\n-                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n-                parcelElement.dataset.boletoId = bill._id;\r\n-                parcelElement.dataset.parcelId = parcel._id;\r\n-\r\n-                // Gera o conteúdo do card com todas as informações\r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                    ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n-                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n-                `;\r\n-\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        });\r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-\r\n-    // Ativa a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n-    initializeDragAndDrop();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-async function openBillModal(bill, parcel) {\r\n-    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-\r\n-    // Preenche todos os campos do modal com os dados da parcela clicada\r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-    // Mostra o botão de gerar código de barras apenas se houver um código\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-\r\n-    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n-    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n-    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n-    if (bill.nfeNumber) {\r\n-        nfeNumberEl.textContent = bill.nfeNumber;\r\n-        nfeContainer.classList.remove('hidden');\r\n-    } else {\r\n-        nfeContainer.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Lógica dinâmica para a secção de anexos\r\n-    const attachmentContainer = document.getElementById('attachment-container');\r\n-    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n-\r\n-    if (parcel.attachmentUrl) {\r\n-        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n-        attachmentContainer.innerHTML = `\r\n-            <div class=\"flex items-center justify-between\">\r\n-                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n-                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n-                </a>\r\n-                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n-            </div>\r\n-        `;\r\n-        // Adiciona o evento de clique ao novo botão de remover\r\n-        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n-    } else {\r\n-        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-        // Adiciona o evento de 'change' ao novo input de upload\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-    }\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-        categories.forEach(cat => {\r\n-            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n-        });\r\n-        if (bill.category) {\r\n-            modalBillCategorySelect.value = bill.category._id;\r\n-        } else {\r\n-            modalBillCategorySelect.value = \"\";\r\n-        }\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    if (billForm) {\r\n-        billForm.reset();\r\n-    }\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    }\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    mainAppContent.classList.remove('hidden');\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-     await populateCategoryFilter();\r\n-     await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n- * @param {string} tagName - O nome da tag a ser procurada.\r\n- * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n- * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n- */\r\n-function getTagValue(tagName, parentElement) {\r\n-    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n-    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n-    return element?.textContent || '';\r\n-}\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- */\r\n-function openCompanyDetailsModal(company, users) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (users && users.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        users.forEach(user => {\r\n-            // Cria as opções do dropdown, marcando a atual como selecionada\r\n-            const roleOptions = roles.map(role =>\r\n-                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-            ).join('');\r\n-\r\n-            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona o evento para os botões \"Remover\"\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    if (password !== confirmPassword) {\r\n-        return showToast(\"As senhas não coincidem.\", \"error\");\r\n-    }\r\n-    // A verificação agora funciona para os dois casos\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.registerUser(username, password, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n-        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-\r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function openCategoriesModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        renderCategoryList(categories);\r\n-        categoriesModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function renderCategoryList(categories) {\r\n-    categoryListDiv.innerHTML = '';\r\n-    if (categories.length === 0) {\r\n-        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n-        return;\r\n-    }\r\n-    categories.forEach(category => {\r\n-        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n-                <span class=\"text-white\">${category.name}</span>\r\n-                <div>\r\n-                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n-                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n-                </div>\r\n-            </div>\r\n-        `);\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo boleto, buscando as categorias\r\n- * e opcionalmente pré-preenchendo a data.\r\n- * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n- */\r\n-async function openAddBillModal(preselectedDate = null) {\r\n-    clearBillForm();\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-\r\n-        categories.forEach(category => {\r\n-            const option = document.createElement('option');\r\n-            option.value = category._id;\r\n-            option.textContent = category.name;\r\n-            billCategorySelect.appendChild(option);\r\n-        });\r\n-\r\n-        // Se uma data foi passada como parâmetro, nós a preenchemos\r\n-        if (preselectedDate) {\r\n-            document.getElementById('dueDate').value = preselectedDate;\r\n-        }\r\n-\r\n-        addBillModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function populateCategoryFilter() {\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n-        // Se der erro, garante que a opção padrão exista\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Alterna a visualização entre o Calendário e o Dashboard.\r\n- */\r\n-function switchView(viewToShow) {\r\n-    // Esconde ambas as vistas\r\n-    calendarView.classList.add('hidden');\r\n-    dashboardView.classList.add('hidden');\r\n-\r\n-    // Reseta o estilo dos botões\r\n-    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n-    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n-    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-\r\n-    // Mostra a vista correta e ativa o botão correspondente\r\n-    if (viewToShow === 'calendar') {\r\n-        calendarView.classList.remove('hidden');\r\n-        viewCalendarBtn.classList.add('bg-indigo-600');\r\n-        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-    } else if (viewToShow === 'dashboard') {\r\n-        dashboardView.classList.remove('hidden');\r\n-        viewDashboardBtn.classList.add('bg-indigo-600');\r\n-        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderDashboard();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Atualiza os cartões de KPI no dashboard.\r\n- * @param {object} kpiData - Os dados dos KPIs vindos da API.\r\n- */\r\n-function updateKpiCards(kpiData) {\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n-\r\n-    // Popula os novos campos\r\n-    if (kpiContasVencidas) kpiContasVencidas.textContent = formatCurrency(kpiData.totalVencido);\r\n-    \r\n-    // Popula os campos existentes\r\n-    document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n-    document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n-    document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n-}\r\n-\r\n-/**\r\n- * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n- */\r\n-async function renderDashboard() {\r\n-    showLoader();\r\n-    try {\r\n-        const dateRange = getDateRangeFromPreset();\r\n-        \r\n-        const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n-            api.getExpensesByCategory(dateRange),\r\n-            api.getMonthlySummary(dateRange),\r\n-            api.getKpiSummary(dateRange),\r\n-            api.getUpcomingPayments()\r\n-        ]);\r\n-        \r\n-        updateKpiCards(kpiData);\r\n-        renderPieChart(pieData);\r\n-        renderBarChart(barData);\r\n-        renderUpcomingPayments(upcomingData);\r\n-        renderTopExpensesChart(pieData); // <-- ADICIONE ESTA LINHA\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de pizza de despesas por categoria.\r\n- */\r\n-function renderPieChart(data) {\r\n-    const canvas = document.getElementById('expensesByCategoryChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    if (expensesPieChart) {\r\n-        expensesPieChart.destroy();\r\n-    }\r\n-\r\n-    expensesPieChart = new Chart(ctx, {\r\n-        type: 'pie',\r\n-        data: {\r\n-            labels: data.map(item => item.categoryName),\r\n-            datasets: [{\r\n-                data: data.map(item => item.totalAmount),\r\n-                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n-                borderColor: '#1f2937',\r\n-                borderWidth: 2\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n- */\r\n-function renderBarChart(data) {\r\n-    const canvas = document.getElementById('monthlyExpensesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n-    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n-    const values = data.map(item => item.totalAmount);\r\n-\r\n-    if (expensesBarChart) {\r\n-        expensesBarChart.destroy();\r\n-    }\r\n-    \r\n-    expensesBarChart = new Chart(ctx, {\r\n-        type: 'bar',\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Total Pago por Mês',\r\n-                data: values,\r\n-                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n-                borderColor: 'rgba(79, 70, 229, 1)',\r\n-                borderWidth: 1\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n-                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n-            },\r\n-            plugins: { legend: { display: false } }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Busca categorias da API e preenche um elemento <select> do HTML.\r\n- * @param {HTMLSelectElement} selectElement - O elemento dropdown a ser preenchido.\r\n- */\r\n-async function populateCategorySelect(selectElement) {\r\n-    if (!selectElement) return;\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        selectElement.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            const option = document.createElement('option');\r\n-            option.value = category._id;\r\n-            option.textContent = category.name;\r\n-            selectElement.appendChild(option);\r\n-        });\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n- * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n- */\r\n-function initializeDashboardDragAndDrop() {\r\n-    const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n-    const mainGrid = document.getElementById('dashboard-main-grid');\r\n-\r\n-    // Vamos guardar as instâncias do Sortable em variáveis\r\n-    let kpiSortable, mainSortable;\r\n-\r\n-    const saveOrder = (gridType) => {\r\n-        if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n-\r\n-        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n-        let order;\r\n-\r\n-        // Usamos a instância correta para obter a ordem\r\n-        if (gridType === 'kpi' && kpiSortable) {\r\n-            order = kpiSortable.toArray();\r\n-        } else if (gridType === 'main' && mainSortable) {\r\n-            order = mainSortable.toArray();\r\n-        }\r\n-\r\n-        if (order) {\r\n-            localStorage.setItem(key, JSON.stringify(order));\r\n-        }\r\n-    };\r\n-\r\n-    if (kpiGrid) {\r\n-        // Guardamos a instância na nossa variável\r\n-        kpiSortable = new Sortable(kpiGrid, {\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-            // A chamada agora é mais simples\r\n-            onEnd: () => saveOrder('kpi'),\r\n-        });\r\n-    }\r\n-\r\n-    if (mainGrid) {\r\n-        // Guardamos a instância na nossa variável\r\n-        mainSortable = new Sortable(mainGrid, {\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-            onEnd: () => saveOrder('main'),\r\n-        });\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Verifica o localStorage por uma ordem de cartões salva para o utilizador atual\r\n- * e, se encontrar, reordena os elementos no ecrã.\r\n- */\r\n-function applySavedDashboardOrder() {\r\n-    if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n-\r\n-    const applyOrder = (gridType) => {\r\n-        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n-        const savedOrder = localStorage.getItem(key);\r\n-        const grid = document.getElementById(`dashboard-${gridType}-grid`);\r\n-\r\n-        if (savedOrder && grid) {\r\n-            const order = JSON.parse(savedOrder);\r\n-            // Para cada id na ordem salva, encontramos o elemento correspondente\r\n-            // e o movemos para o final do container. Ao fazer isto em sequência,\r\n-            // a ordem final corresponde à ordem salva.\r\n-            order.forEach(dataId => {\r\n-                const card = grid.querySelector(`[data-id=\"${dataId}\"]`);\r\n-                if (card) {\r\n-                    grid.appendChild(card);\r\n-                }\r\n-            });\r\n-        }\r\n-    };\r\n-\r\n-    applyOrder('kpi');\r\n-    applyOrder('main');\r\n-}\r\n-\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-\r\n-async function handleForgotPasswordRequest(e) {\r\n-    e.preventDefault();\r\n-    const email = document.getElementById('recoveryEmailInput').value;\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.requestPasswordReset(email);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n-        forgotPasswordModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList(); // Se tiver essa função\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a API para obter os detalhes\r\n-                const { company, users } = await api.getCompanyDetails(companyId);\r\n-                // Chama a nossa nova função para abrir e preencher o modal\r\n-                openCompanyDetailsModal(company, users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                const { users } = await api.getCompanyDetails(companyId);\r\n-                if (users.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n-                }\r\n-                const userIdToImpersonate = users[0]._id;\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-async function handleCalculateInstallments(e) {\r\n-    e.preventDefault();\r\n-    const billName = document.getElementById('billName').value;\r\n-    const categoryId = billCategorySelect.value;\r\n-    const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n-    const totalAmount = parseFloat(totalAmountValue);\r\n-    const installments = parseInt(document.getElementById('installments').value);\r\n-    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-    const description = document.getElementById('description').value;\r\n-    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n-\r\n-    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n-        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n-    }\r\n-\r\n-    currentBill = {\r\n-        name: billName,\r\n-        description,\r\n-        parcels: [],\r\n-        category: categoryId || null\r\n-    };\r\n-    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-    installmentsList.innerHTML = '';\r\n-\r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n-\r\n-        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n-        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n-\r\n-        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n-        installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n-                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n-            </div>\r\n-        `);\r\n-    }\r\n-\r\n-    // Adiciona os eventos para os novos inputs\r\n-    addEventListenersToInstallmentInputs();\r\n-    updatePreviewTotal();\r\n-    previewBillNameInput.value = currentBill.name;\r\n-    previewNfeNumber.textContent = 'N/A';\r\n-    addBillModal.classList.add('hidden');\r\n-    await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n-    installmentsPreviewModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n- */\r\n-function updatePreviewTotal() {\r\n-    if (!currentBill.parcels) return;\r\n-    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    currentBill.category = document.getElementById('previewBillCategorySelect').value || null;\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill); // O objeto currentBill agora tem a categoria correta\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-        clearBillForm();\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-    const updatedParcelData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    const updatedBillData = {\r\n-        category: modalBillCategorySelect.value || null\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n-        await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n-\r\n-        showToast('Alterações salvas com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- * Verifica a sessão e o estado da assinatura.\r\n- */\r\n-async function initializeApp() {\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n-    const action = urlParams.get('action');\r\n-\r\n-    if (action === 'forgot_password') {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    const token = localStorage.getItem('authToken');\r\n-\r\n-    if (!token) {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        showAdminLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-function logout() {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-\r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n-\r\n-        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n-\r\n-        // Define os cargos que o Proprietário pode atribuir.\r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        if (users && users.length > 0) {\r\n-            users.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-\r\n-                // Cria as opções do dropdown para Gerente e Funcionário\r\n-                const roleOptions = assignableRoles.map(role =>\r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n-                const roleHtml = isOwner\r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-\r\n-        // Adiciona o evento de clique aos botões de remover\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                // ... (a lógica de remover continua a mesma de antes)\r\n-            });\r\n-        });\r\n-\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n-\r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n-                    e.target.value = originalRole; // Reverte a seleção visual\r\n-                    return;\r\n-\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n- * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n- * @param {Event} event - O evento 'change' do input do ficheiro.\r\n- */\r\n-async function handleNfeXmlUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) {\r\n-        return;\r\n-    }\r\n-\r\n-    const reader = new FileReader();\r\n-\r\n-    reader.onload = async (e) => {\r\n-        try {\r\n-            const xmlString = e.target.result;\r\n-            const parser = new DOMParser();\r\n-            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-\r\n-            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n-            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n-                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n-            }\r\n-\r\n-            // Define os nós principais para evitar procuras repetidas\r\n-            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n-            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n-            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-\r\n-            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n-            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n-            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n-\r\n-            let parcelsData = [];\r\n-\r\n-            if (duplicatas.length > 0) {\r\n-                // --- CENÁRIO 1: Encontrou as tags <dup> (padrão) ---\r\n-                parcelsData = duplicatas.map((dup, i) => ({\r\n-                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n-                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n-                    dueDate: getTagValue(\"dVenc\", dup)\r\n-                }));\r\n-            } else {\r\n-                // --- CENÁRIO 2: Procura por informações de cobrança no texto ---\r\n-                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n-                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n-\r\n-                if (cobrancaMatch && cobrancaMatch[1]) {\r\n-                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n-                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n-                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n-                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n-\r\n-                    parcelsData = dias.map((dia, i) => {\r\n-                        const vencimento = new Date(dataEmissao);\r\n-                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n-                        return {\r\n-                            number: i + 1,\r\n-                            amount: parcelAmount,\r\n-                            dueDate: vencimento.toISOString().split('T')[0]\r\n-                        };\r\n-                    });\r\n-                }\r\n-            }\r\n-\r\n-            if (parcelsData.length > 0) {\r\n-                // --- Se encontrou parcelas (por qualquer método), vai para a pré-visualização ---\r\n-                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: parcelsData };\r\n-\r\n-                installmentsList.innerHTML = '';\r\n-                currentBill.parcels.forEach((parcel, index) => {\r\n-                    installmentsList.insertAdjacentHTML('beforeend', `\r\n-                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                        </div>\r\n-                    `);\r\n-                });\r\n-\r\n-                addEventListenersToInstallmentInputs();\r\n-                updatePreviewTotal();\r\n-                previewBillNameInput.value = currentBill.name;\r\n-                previewNfeNumber.textContent = nfeNumber;\r\n-                await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n-                installmentsPreviewModal.classList.remove('hidden');\r\n-\r\n-            } else {\r\n-                // --- CENÁRIO 3: Não encontrou parcelas, preenche o formulário manual ---\r\n-                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n-                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n-\r\n-                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n-                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n-                if (vencimento) {\r\n-                    document.getElementById('dueDate').value = vencimento;\r\n-                }\r\n-\r\n-                addBillModal.classList.remove('hidden');\r\n-            }\r\n-\r\n-            showToast('Dados do XML carregados com sucesso!', 'success');\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            console.error(\"Erro ao processar XML:\", error);\r\n-        } finally {\r\n-            // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n-            event.target.value = '';\r\n-        }\r\n-    };\r\n-\r\n-    reader.onerror = () => {\r\n-        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n-    };\r\n-\r\n-    reader.readAsText(file);\r\n-}\r\n-\r\n-/**\r\n- * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n- */\r\n-function addEventListenersToInstallmentInputs() {\r\n-    // Listener para o campo de VALOR\r\n-    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n-            }\r\n-            updatePreviewTotal();\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de DATA\r\n-    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-        input.addEventListener('change', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    /**\r\n-     * Mostra a tela de login de administrador.\r\n-     */\r\n-    function showAdminLogin() {\r\n-        hideAllScreens(); // Função de utils.js\r\n-        if (adminLoginForm) adminLoginForm.reset();\r\n-        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    // Listener para o campo de CÓDIGO DE BARRAS\r\n-    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n-        // Evento para guardar o valor quando é digitado\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].barcode = e.target.value;\r\n-            }\r\n-        });\r\n-\r\n-        input.addEventListener('keydown', (e) => {\r\n-            if (e.key === 'Enter') {\r\n-                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n-\r\n-                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n-                const nextIndex = currentIndex + 1;\r\n-                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n-\r\n-                if (nextInput) {\r\n-                    // Se houver um próximo campo de código de barras, foca nele.\r\n-                    nextInput.focus();\r\n-                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n-                } else {\r\n-                    // Se for o último campo, foca no botão de salvar.\r\n-                    document.getElementById('addToOrganizer').focus();\r\n-                }\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n- */\r\n-function handleShowFullScreenBarcode() {\r\n-    const barcodeValue = modalBillBarcodeInput.value;\r\n-    if (!barcodeValue) {\r\n-        return showToast('Não há código de barras para mostrar.', 'info');\r\n-    }\r\n-\r\n-    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n-    if (!barcodeImageContainer) return;\r\n-\r\n-    // Limpa qualquer código de barras anterior\r\n-    barcodeImageContainer.innerHTML = '';\r\n-\r\n-    try {\r\n-        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n-        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n-\r\n-        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n-        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n-            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n-            lineColor: \"#000000\",\r\n-            width: 2,\r\n-            height: 100,\r\n-            displayValue: true, // Mostra os números abaixo das barras\r\n-            fontSize: 18\r\n-        });\r\n-\r\n-        // Mostra o modal de ecrã inteiro\r\n-        barcodeFullScreenModal.classList.remove('hidden');\r\n-\r\n-    } catch (e) {\r\n-        console.error(\"Erro ao gerar código de barras:\", e);\r\n-        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n-    }\r\n-}\r\n-\r\n-async function handleAttachmentUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file || !selectedParcel) return;\r\n-\r\n-    // Cria um objeto FormData para enviar o ficheiro\r\n-    const formData = new FormData();\r\n-    formData.append('comprovante', file);\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Atualiza a UI para mostrar o link do novo anexo\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n-\r\n-        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para remover um anexo de comprovativo.\r\n- * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n- */\r\n-async function handleRemoveAttachment() {\r\n-    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n-    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader(); // Mostra o ícone de carregamento\r\n-    try {\r\n-        // Chama a nossa função da API para apagar o anexo\r\n-        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n-\r\n-        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-\r\n-        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-\r\n-        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n-        await updateBillsOrganizer();\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n- */\r\n-function applyFiltersAndSearch() {\r\n-    const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n-    const selectedCategoryId = categoryFilterSelect.value;\r\n-\r\n-    let filteredBoletos = userBoletos.filter(bill => {\r\n-        // Filtro de pesquisa\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n-            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        if (!matchesSearch) return false;\r\n-\r\n-        // Filtro de categoria\r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-        if (!matchesCategory) return false;\r\n-\r\n-        // Filtro de status\r\n-        if (activeStatusFilter === 'all') return true;\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        return bill.parcels.some(parcel => {\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n-            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n-            return false;\r\n-        });\r\n-    });\r\n-\r\n-    renderCalendar(filteredBoletos);\r\n-    updateMonthlySummary(filteredBoletos);\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário.\r\n- */\r\n-function initializeDragAndDrop() {\r\n-    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n-\r\n-    dayCells.forEach(cell => {\r\n-        new Sortable(cell, {\r\n-            group: 'calendar-bills', // Permite mover cards entre células\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50', // Estilo do \"fantasma\" do card ao arrastar\r\n-\r\n-            // A função que é chamada QUANDO você solta um card\r\n-            onEnd: async function (evt) {\r\n-                const item = evt.item; // O card que foi arrastado\r\n-                const toCell = evt.to;   // A célula do dia onde ele foi solto\r\n-\r\n-                const boletoId = item.dataset.boletoId;\r\n-                const parcelId = item.dataset.parcelId;\r\n-                const newDate = toCell.dataset.date;\r\n-\r\n-                if (!boletoId || !parcelId || !newDate) return;\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    // Chamamos a nossa API para atualizar a data de vencimento\r\n-                    await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n-                    showToast('Data da parcela atualizada com sucesso!', 'success');\r\n-\r\n-                    // Atualizamos a aplicação inteira para refletir a mudança\r\n-                    await updateBillsOrganizer();\r\n-\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                    // Se der erro, atualizamos a interface para reverter a mudança visual\r\n-                    await updateBillsOrganizer();\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            },\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Calcula o startDate e endDate com base numa predefinição do seletor.\r\n- * @returns {{startDate?: string, endDate?: string}} - As datas ou um objeto vazio.\r\n- */\r\n-function getDateRangeFromPreset() {\r\n-    const preset = dateRangePresetSelect.value;\r\n-    const now = new Date();\r\n-    let startDate, endDate;\r\n-\r\n-    switch (preset) {\r\n-        case 'thisMonth':\r\n-            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n-            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n-            break;\r\n-        case 'lastMonth':\r\n-            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n-            endDate = new Date(now.getFullYear(), now.getMonth(), 0);\r\n-            break;\r\n-        case 'thisQuarter':\r\n-            const quarter = Math.floor(now.getMonth() / 3);\r\n-            startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n-            endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n-            break;\r\n-        case 'thisYear':\r\n-            startDate = new Date(now.getFullYear(), 0, 1);\r\n-            endDate = new Date(now.getFullYear(), 11, 31);\r\n-            break;\r\n-        case 'custom':\r\n-            if (startDateInput.value && endDateInput.value) {\r\n-                return {\r\n-                    startDate: startDateInput.value,\r\n-                    endDate: endDateInput.value\r\n-                };\r\n-            }\r\n-            return {}; // Retorna vazio se o intervalo personalizado não estiver completo\r\n-        default:\r\n-            return {}; // Padrão sem filtro\r\n-    }\r\n-\r\n-    // Formata as datas para o formato YYYY-MM-DD\r\n-    return {\r\n-        startDate: startDate.toISOString().split('T')[0],\r\n-        endDate: endDate.toISOString().split('T')[0]\r\n-    };\r\n-}\r\n-\r\n-/**\r\n- * Renderiza a lista de próximos vencimentos no dashboard.\r\n- * @param {Array} payments - A lista de pagamentos vinda da API.\r\n- */\r\n-function renderUpcomingPayments(payments) {\r\n-    if (!upcomingPaymentsList || !noUpcomingPaymentsMessage) return;\r\n-\r\n-    upcomingPaymentsList.innerHTML = ''; // Limpa a lista\r\n-\r\n-    if (payments.length === 0) {\r\n-        upcomingPaymentsList.appendChild(noUpcomingPaymentsMessage);\r\n-        noUpcomingPaymentsMessage.classList.remove('hidden');\r\n-    } else {\r\n-        noUpcomingPaymentsMessage.classList.add('hidden');\r\n-        const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-        payments.forEach(payment => {\r\n-            const dueDate = new Date(payment.dueDate + 'T00:00:00');\r\n-            const formattedDate = dueDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\r\n-\r\n-            const paymentHtml = `\r\n-                <div class=\"flex items-center justify-between bg-gray-700/50 p-3 rounded-md\">\r\n-                    <div>\r\n-                        <p class=\"font-medium text-white\">${payment.billName} (${payment.parcelNumber}ª)</p>\r\n-                        <p class=\"text-sm text-gray-400\">Vence em: ${formattedDate}</p>\r\n-                    </div>\r\n-                    <p class=\"font-semibold text-lg text-yellow-400\">${formatCurrency(payment.amount)}</p>\r\n-                </div>\r\n-            `;\r\n-            upcomingPaymentsList.insertAdjacentHTML('beforeend', paymentHtml);\r\n-        });\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de barras horizontais com as 5 maiores despesas por categoria.\r\n- * @param {Array} data - Os dados de despesas vindos da API.\r\n- */\r\n-function renderTopExpensesChart(data) {\r\n-    const canvas = document.getElementById('topExpensesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    // Destrói o gráfico anterior, se existir, para evitar sobreposições\r\n-    if (topExpensesChart) {\r\n-        topExpensesChart.destroy();\r\n-    }\r\n-    \r\n-    // 1. Ordena os dados do maior para o menor\r\n-    const sortedData = [...data].sort((a, b) => b.totalAmount - a.totalAmount);\r\n-    \r\n-    // 2. Pega apenas nos 5 primeiros resultados\r\n-    const top5Data = sortedData.slice(0, 5);\r\n-\r\n-    // 3. Prepara os dados para o Chart.js\r\n-    const labels = top5Data.map(item => item.categoryName);\r\n-    const values = top5Data.map(item => item.totalAmount);\r\n-\r\n-    topExpensesChart = new Chart(ctx, {\r\n-        type: 'bar', // Tipo de gráfico\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Total Gasto',\r\n-                data: values,\r\n-                backgroundColor: 'rgba(239, 68, 68, 0.6)', // Vermelho\r\n-                borderColor: 'rgba(239, 68, 68, 1)',\r\n-                borderWidth: 1\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            indexAxis: 'y', // <-- Isto é o que torna o gráfico horizontal!\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                x: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n-                y: { ticks: { color: '#d1d5db' }, grid: { display: false } }\r\n-            },\r\n-            plugins: {\r\n-                legend: { display: false },\r\n-                tooltip: {\r\n-                    callbacks: {\r\n-                        label: function(context) {\r\n-                            return ` Total: ${context.raw.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-                        }\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', async () => {\r\n-    // --- Lógica de inicialização que estava em initializeApp() ---\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-\r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        // Se não houver token, redireciona para a página de login\r\n-        window.location.href = 'Index.html';\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    // Se for o dono da empresa, mostra o modal para renovar\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n-        // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n-        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        setTimeout(() => {\r\n-            window.location.href = 'Index.html';\r\n-        }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n-    } finally {\r\n-        // Esconde a tela de carregamento inicial\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-\r\n-\r\n-    // Submissão de formulários\r\n-    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-    if (logoutBtn) {\r\n-        logoutBtn.addEventListener('click', () => {\r\n-            window.location.href = 'Index.html';\r\n-        });\r\n-    }\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-\r\n-\r\n-    // Ações na App Principal\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-    // Ações do Modal de Edição de Boleto\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-    // Navegação do Calendário\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-        if (currentMonth === 11) currentYear--;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-        if (currentMonth === 0) currentYear++;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n-    });\r\n-\r\n-    if (addCompanyCnpjInput) {\r\n-        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    if (openAddBillModalBtn) {\r\n-        openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-    }\r\n-\r\n-    const handleRedirectToHome = () => {\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    const handleFullLogoutAndRedirect = () => {\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    if (subscriptionLogoutBtn) {\r\n-        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-    }\r\n-\r\n-    if (blockedAccessLogoutBtn) {\r\n-        blockedAccessLogoutBtn.addEventListener('click', () => {\r\n-            window.location.href = 'Index.html';\r\n-        });\r\n-    }\r\n-\r\n-    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-    if (settingsBtn) {\r\n-        settingsBtn.addEventListener('click', (e) => {\r\n-            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-            settingsDropdown.classList.toggle('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    // Links dentro do menu dropdown\r\n-    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCompanyInfoModal();\r\n-    });\r\n-\r\n-    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openPermissionsModal();\r\n-    });\r\n-\r\n-    window.addEventListener('click', () => {\r\n-        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n-    });\r\n-\r\n-    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openManageUsersModal();\r\n-    });\r\n-\r\n-    // Botões do modal de gerir utilizadores\r\n-    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-    });\r\n-\r\n-    /**\r\n-     * Lida com o clique no botão de criar/renovar assinatura.\r\n-     */\r\n-    async function handleCreateSubscription() {\r\n-        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-        subscriptionActionBtn.disabled = true;\r\n-        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-        try {\r\n-            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-            const data = await api.createSubscriptionLink();\r\n-\r\n-            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-            if (data.init_point) {\r\n-                window.location.href = data.init_point;\r\n-            } else {\r\n-                throw new Error('Link de pagamento não recebido.');\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-            subscriptionActionBtn.disabled = false;\r\n-            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-        }\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão.\r\n-    if (subscriptionActionBtn) {\r\n-        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-    }\r\n-\r\n-    if (closePreviewModalBtn) {\r\n-        closePreviewModalBtn.addEventListener('click', () => {\r\n-            installmentsPreviewModal.classList.add('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    if (nfeXmlInput) {\r\n-        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-    }\r\n-\r\n-    if (previewBillNameInput) {\r\n-        previewBillNameInput.addEventListener('input', (e) => {\r\n-            if (currentBill) {\r\n-                currentBill.name = e.target.value;\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão\r\n-    if (showFullScreenBarcodeBtn) {\r\n-        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-    }\r\n-\r\n-    // Listener para o campo de pesquisa\r\n-    if (searchInput) {\r\n-        searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-    }\r\n-\r\n-    // Listeners para os botões de filtro\r\n-    if (filterButtons) {\r\n-        filterButtons.forEach(button => {\r\n-            button.addEventListener('click', (e) => {\r\n-                // Remove a classe 'active' de todos os botões\r\n-                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-                // Adiciona a classe 'active' apenas ao botão clicado\r\n-                e.currentTarget.classList.add('active');\r\n-                // Aplica o filtro\r\n-                applyFiltersAndSearch();\r\n-            });\r\n-        });\r\n-    }\r\n-\r\n-    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCategoriesModal();\r\n-    });\r\n-\r\n-    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-    if (addCategoryForm) {\r\n-        addCategoryForm.addEventListener('submit', async (e) => {\r\n-            e.preventDefault();\r\n-            const name = newCategoryNameInput.value.trim();\r\n-            if (!name) return;\r\n-            try {\r\n-                await api.createCategory(name);\r\n-                newCategoryNameInput.value = '';\r\n-                await openCategoriesModal(); // Recarrega a lista do modal\r\n-                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-    });\r\n-\r\n-    if (categoryFilterSelect) {\r\n-        categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-    }\r\n-\r\n-    // Configuração dos botões do dashboard\r\n-    if (viewCalendarBtn) {\r\n-        viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-    }\r\n-    if (viewDashboardBtn) {\r\n-        viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-    }\r\n-\r\n-    if (dateRangePresetSelect) {\r\n-        dateRangePresetSelect.addEventListener('change', () => {\r\n-            const isCustom = dateRangePresetSelect.value === 'custom';\r\n-            customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n-\r\n-            // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n-            // o dashboard é atualizado imediatamente.\r\n-            if (!isCustom) {\r\n-                renderDashboard();\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    // Para o intervalo personalizado, atualizamos o dashboard\r\n-    // assim que ambas as datas estiverem preenchidas.\r\n-    if (startDateInput) {\r\n-        startDateInput.addEventListener('change', () => {\r\n-            if (endDateInput.value) renderDashboard();\r\n-        });\r\n-    }\r\n-    if (endDateInput) {\r\n-        endDateInput.addEventListener('change', () => {\r\n-            if (startDateInput.value) renderDashboard();\r\n-        });\r\n-    }\r\n-\r\n-    if (viewDashboardBtn) {\r\n-        viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-    }\r\n-\r\n-    // CHAME A NOVA FUNÇÃO AQUI\r\n-    initializeDashboardDragAndDrop(); \r\n-\r\n-\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753363827355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n \r\n // =================================================================================\r\n // IMPORTS - Trazemos as ferramentas dos outros módulos\r\n // =================================================================================\r\n+import { API_BASE_URL } from './api.js';\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n \r\n \r\n"
                },
                {
                    "date": 1753363916282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n \r\n // =================================================================================\r\n // IMPORTS - Trazemos as ferramentas dos outros módulos\r\n // =================================================================================\r\n-import { API_BASE_URL } from './api.js';\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n \r\n \r\n"
                },
                {
                    "date": 1753364585983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n \r\n // =================================================================================\r\n // IMPORTS - Trazemos as ferramentas dos outros módulos\r\n // =================================================================================\r\n+import { API_BASE_URL } from './config.js';\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n \r\n \r\n"
                },
                {
                    "date": 1753366014404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1117,8 +1117,74 @@\n     applyOrder('kpi');\r\n     applyOrder('main');\r\n }\r\n \r\n+/**\r\n+ * Captura a área do dashboard como uma imagem e gera um ficheiro PDF para download.\r\n+ */\r\n+async function handleVisualExportPDF() {\r\n+    // Mostra o loader para dar feedback ao utilizador\r\n+    showLoader();\r\n+\r\n+    // Seleciona o elemento do DOM que queremos \"fotografar\"\r\n+    const dashboardElement = document.getElementById('dashboardView');\r\n+    \r\n+    // Esconde temporariamente os botões de filtro e exportação para não aparecerem no PDF\r\n+    const filterContainer = document.getElementById('dashboard-date-filter-container');\r\n+    if (filterContainer) filterContainer.style.display = 'none';\r\n+\r\n+    try {\r\n+        // Usa a biblioteca html2canvas para criar um \"canvas\" (uma imagem) do elemento\r\n+        const canvas = await html2canvas(dashboardElement, {\r\n+            scale: 2, // Aumenta a resolução da imagem para melhor qualidade\r\n+            backgroundColor: '#1e293b' // Garante um fundo consistente\r\n+        });\r\n+\r\n+        // Converte o canvas para uma imagem no formato PNG\r\n+        const imageData = canvas.toDataURL('image/png');\r\n+\r\n+        // Usa a biblioteca jsPDF para criar o documento\r\n+        // A orientação 'p' é retrato (portrait), 'mm' é milímetros, 'a4' é o tamanho da página\r\n+        const pdf = new jspdf.jsPDF({\r\n+            orientation: 'p',\r\n+            unit: 'mm',\r\n+            format: 'a4'\r\n+        });\r\n+\r\n+        // Calcula as dimensões da imagem para que ela caiba na página A4, mantendo a proporção\r\n+        const pageWidth = pdf.internal.pageSize.getWidth();\r\n+        const pageHeight = pdf.internal.pageSize.getHeight();\r\n+        const imageWidth = canvas.width;\r\n+        const imageHeight = canvas.height;\r\n+        const ratio = imageWidth / imageHeight;\r\n+        let pdfImageWidth = pageWidth - 20; // Deixa uma margem de 10mm de cada lado\r\n+        let pdfImageHeight = pdfImageWidth / ratio;\r\n+        \r\n+        // Se a imagem ainda for muito alta, ajusta pela altura\r\n+        if (pdfImageHeight > pageHeight - 20) {\r\n+            pdfImageHeight = pageHeight - 20;\r\n+            pdfImageWidth = pdfImageHeight * ratio;\r\n+        }\r\n+        \r\n+        // Adiciona a imagem ao PDF, centralizada\r\n+        const x = (pageWidth - pdfImageWidth) / 2;\r\n+        const y = 10; // Margem de 10mm no topo\r\n+        pdf.addImage(imageData, 'PNG', x, y, pdfImageWidth, pdfImageHeight);\r\n+\r\n+        // Força o download do ficheiro\r\n+        pdf.save('dashboard-relatorio.pdf');\r\n+\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao gerar PDF visual:\", error);\r\n+        showToast('Ocorreu um erro ao gerar o PDF.', 'error');\r\n+    } finally {\r\n+        // Mostra novamente os botões de filtro, quer a exportação tenha funcionado ou não\r\n+        if (filterContainer) filterContainer.style.display = 'block';\r\n+        // Esconde o loader\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753366041819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2482,9 +2482,9 @@\n     if (exportCsvBtn) {\r\n         exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n     }\r\n     if (exportPdfBtn) {\r\n-        exportPdfBtn.addEventListener('click', () => handleExport('pdf'));\r\n+        exportPdfBtn.addEventListener('click', handleVisualExportPDF);\r\n     }\r\n \r\n     // CHAME A NOVA FUNÇÃO AQUI\r\n     initializeDashboardDragAndDrop(); \r\n"
                },
                {
                    "date": 1753367251226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,8 +157,13 @@\n const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n const exportCsvBtn = document.getElementById('export-csv-btn');\r\n const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n \r\n+const manualAddBtn = document.getElementById('manual-add-btn');\r\n+const xmlAddBtn = document.getElementById('xml-add-btn');\r\n+const manualAddForm = document.getElementById('manual-add-form');\r\n+const xmlAddForm = document.getElementById('xml-add-form');+\r\n+\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n@@ -1183,8 +1188,34 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n+ * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n+ */\r\n+function switchAddBillMode(mode) {\r\n+    if (mode === 'manual') {\r\n+        // Ativa o modo manual\r\n+        manualAddForm.classList.remove('hidden');\r\n+        xmlAddForm.classList.add('hidden');\r\n+        // Estiliza os botões\r\n+        manualAddBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px');\r\n+        manualAddBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        xmlAddBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+        xmlAddBtn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px');\r\n+    } else if (mode === 'xml') {\r\n+        // Ativa o modo XML\r\n+        manualAddForm.classList.add('hidden');\r\n+        xmlAddForm.classList.remove('hidden');\r\n+        // Estiliza os botões\r\n+        xmlAddBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px');\r\n+        xmlAddBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        manualAddBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+        manualAddBtn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px');\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753367266827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2516,8 +2516,15 @@\n     if (exportPdfBtn) {\r\n         exportPdfBtn.addEventListener('click', handleVisualExportPDF);\r\n     }\r\n \r\n+    if (manualAddBtn) {\r\n+        manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+    }\r\n+    if (xmlAddBtn) {\r\n+        xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+    }\r\n+\r\n     // CHAME A NOVA FUNÇÃO AQUI\r\n     initializeDashboardDragAndDrop(); \r\n \r\n \r\n"
                },
                {
                    "date": 1753367302412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -838,8 +838,9 @@\n  * e opcionalmente pré-preenchendo a data.\r\n  * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n  */\r\n async function openAddBillModal(preselectedDate = null) {\r\n+    switchAddBillMode('manual');\r\n     clearBillForm();\r\n     showLoader();\r\n     try {\r\n         const categories = await api.getCategories();\r\n"
                },
                {
                    "date": 1753367691921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2416,25 +2416,32 @@\n     categoryListDiv.addEventListener('click', async (e) => {\r\n         const editBtn = e.target.closest('.edit-category-btn');\r\n         const deleteBtn = e.target.closest('.delete-category-btn');\r\n \r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n+        if (categoryListDiv) { // <-- ADICIONE ESTA LINHA DE VERIFICAÇÃO\r\n+            categoryListDiv.addEventListener('click', async (e) => {\r\n+                const editBtn = e.target.closest('.edit-category-btn');\r\n+                const deleteBtn = e.target.closest('.delete-category-btn');\r\n \r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n+                if (editBtn) {\r\n+                    const { id, name } = editBtn.dataset;\r\n+                    const newName = prompt(\"Editar nome da categoria:\", name);\r\n+                    if (newName && newName.trim() && newName.trim() !== name) {\r\n+                        await api.updateCategory(id, newName.trim());\r\n+                        await openCategoriesModal();\r\n+                        await populateCategoryFilter();\r\n+                    }\r\n+                }\r\n+\r\n+                if (deleteBtn) {\r\n+                    const { id } = deleteBtn.dataset;\r\n+                    if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                        await api.deleteCategory(id);\r\n+                        await openCategoriesModal();\r\n+                        await populateCategoryFilter();\r\n+                    }\r\n+                }\r\n+            });\r\n         }\r\n     });\r\n \r\n     if (categoryFilterSelect) {\r\n"
                },
                {
                    "date": 1753368633542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2190,9 +2190,9 @@\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n     }\r\n \r\n \r\n-    // Submissão de formulários\r\n+    // Submissão de formulários e eventos de clique com verificações de segurança\r\n     if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n     if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n     if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n     if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n@@ -2210,330 +2210,123 @@\n     if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n     if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n     if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n     if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-    if (logoutBtn) {\r\n-        logoutBtn.addEventListener('click', () => {\r\n-            window.location.href = 'Index.html';\r\n-        });\r\n-    }\r\n+    if (logoutBtn) logoutBtn.addEventListener('click', () => { window.location.href = 'Index.html'; });\r\n     if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-\r\n-\r\n-    // Ações na App Principal\r\n-    clearFormBtn.addEventListener('click', clearBillForm);\r\n-    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-    // Ações do Modal de Edição de Boleto\r\n-    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-    // Navegação do Calendário\r\n-    prevMonthBtn.addEventListener('click', () => {\r\n+    if (clearFormBtn) clearFormBtn.addEventListener('click', clearBillForm);\r\n+    if (addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+    if (closeAddBillModalBtn) closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+    if (closeModalBtn) closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    if (saveBillBtn) saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+    if (deleteBillBtn) deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+    if (deleteEntireBillBtn) deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+    if (closeFullScreenBarcodeBtn) closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+    if (prevMonthBtn) prevMonthBtn.addEventListener('click', () => {\r\n         currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n         if (currentMonth === 11) currentYear--;\r\n         renderCalendar();\r\n         updateMonthlySummary();\r\n     });\r\n-\r\n-    nextMonthBtn.addEventListener('click', () => {\r\n+    if (nextMonthBtn) nextMonthBtn.addEventListener('click', () => {\r\n         currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n         if (currentMonth === 0) currentYear++;\r\n         renderCalendar();\r\n         updateMonthlySummary();\r\n     });\r\n-\r\n-    if (addCompanyCnpjInput) {\r\n-        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n-\r\n-    if (openAddBillModalBtn) {\r\n-        openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-    }\r\n-\r\n-    const handleRedirectToHome = () => {\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    const handleFullLogoutAndRedirect = () => {\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        window.location.href = 'Index.html';\r\n-    };\r\n-\r\n-    if (subscriptionLogoutBtn) {\r\n-        subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-    }\r\n-\r\n-    if (blockedAccessLogoutBtn) {\r\n-        blockedAccessLogoutBtn.addEventListener('click', () => {\r\n-            window.location.href = 'Index.html';\r\n-        });\r\n-    }\r\n-\r\n-    // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-    if (settingsBtn) {\r\n-        settingsBtn.addEventListener('click', (e) => {\r\n-            e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-            settingsDropdown.classList.toggle('hidden');\r\n-        });\r\n-    }\r\n-\r\n-    // Links dentro do menu dropdown\r\n+    if (addCompanyCnpjInput) IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    if (openAddBillModalBtn) openAddBillModalBtn.addEventListener('click', () => openAddBillModal());\r\n+    if (subscriptionLogoutBtn) subscriptionLogoutBtn.addEventListener('click', () => { window.location.href = 'Index.html'; });\r\n+    if (blockedAccessLogoutBtn) blockedAccessLogoutBtn.addEventListener('click', () => { window.location.href = 'Index.html'; });\r\n+    if (settingsBtn) settingsBtn.addEventListener('click', (e) => {\r\n+        e.stopPropagation();\r\n+        settingsDropdown.classList.toggle('hidden');\r\n+    });\r\n     if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n         e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n         openCompanyInfoModal();\r\n     });\r\n-\r\n     if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n         e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n         openPermissionsModal();\r\n     });\r\n-\r\n     window.addEventListener('click', () => {\r\n         if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n             settingsDropdown.classList.add('hidden');\r\n         }\r\n     });\r\n-\r\n-    // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n     if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n         e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n         openManageUsersModal();\r\n     });\r\n-\r\n-    // Botões do modal de gerir utilizadores\r\n     if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n     if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-        manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-        openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+        manageUsersModal.classList.add('hidden');\r\n+        openAddUserModal();\r\n     });\r\n-\r\n-    /**\r\n-     * Lida com o clique no botão de criar/renovar assinatura.\r\n-     */\r\n-    async function handleCreateSubscription() {\r\n-        // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-        subscriptionActionBtn.disabled = true;\r\n-        subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-        try {\r\n-            // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-            const data = await api.createSubscriptionLink();\r\n-\r\n-            // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-            if (data.init_point) {\r\n-                window.location.href = data.init_point;\r\n-            } else {\r\n-                throw new Error('Link de pagamento não recebido.');\r\n-            }\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-            subscriptionActionBtn.disabled = false;\r\n-            subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-        }\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão.\r\n-    if (subscriptionActionBtn) {\r\n-        subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-    }\r\n-\r\n-    if (closePreviewModalBtn) {\r\n-        closePreviewModalBtn.addEventListener('click', () => {\r\n-            installmentsPreviewModal.classList.add('hidden');\r\n+    if (subscriptionActionBtn) subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+    if (closePreviewModalBtn) closePreviewModalBtn.addEventListener('click', () => { installmentsPreviewModal.classList.add('hidden'); });\r\n+    if (nfeXmlInput) nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+    if (previewBillNameInput) previewBillNameInput.addEventListener('input', (e) => {\r\n+        if (currentBill) { currentBill.name = e.target.value; }\r\n+    });\r\n+    if (showFullScreenBarcodeBtn) showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+    if (searchInput) searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+    if (filterButtons) filterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            e.currentTarget.classList.add('active');\r\n+            applyFiltersAndSearch();\r\n         });\r\n-    }\r\n-\r\n-    if (nfeXmlInput) {\r\n-        nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-    }\r\n-\r\n-    if (previewBillNameInput) {\r\n-        previewBillNameInput.addEventListener('input', (e) => {\r\n-            if (currentBill) {\r\n-                currentBill.name = e.target.value;\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    // Liga a função ao clique do botão\r\n-    if (showFullScreenBarcodeBtn) {\r\n-        showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-    }\r\n-\r\n-    // Listener para o campo de pesquisa\r\n-    if (searchInput) {\r\n-        searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-    }\r\n-\r\n-    // Listeners para os botões de filtro\r\n-    if (filterButtons) {\r\n-        filterButtons.forEach(button => {\r\n-            button.addEventListener('click', (e) => {\r\n-                // Remove a classe 'active' de todos os botões\r\n-                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-                // Adiciona a classe 'active' apenas ao botão clicado\r\n-                e.currentTarget.classList.add('active');\r\n-                // Aplica o filtro\r\n-                applyFiltersAndSearch();\r\n-            });\r\n-        });\r\n-    }\r\n-\r\n+    });\r\n     if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n         e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n         openCategoriesModal();\r\n     });\r\n-\r\n     if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-    if (addCategoryForm) {\r\n-        addCategoryForm.addEventListener('submit', async (e) => {\r\n-            e.preventDefault();\r\n-            const name = newCategoryNameInput.value.trim();\r\n-            if (!name) return;\r\n-            try {\r\n-                await api.createCategory(name);\r\n-                newCategoryNameInput.value = '';\r\n-                await openCategoriesModal(); // Recarrega a lista do modal\r\n-                await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n+    if (addCategoryForm) addCategoryForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const name = newCategoryNameInput.value.trim();\r\n+        if (!name) return;\r\n+        try {\r\n+            await api.createCategory(name);\r\n+            newCategoryNameInput.value = '';\r\n+            await openCategoriesModal();\r\n+            await populateCategoryFilter();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+    if (categoryListDiv) categoryListDiv.addEventListener('click', async (e) => {\r\n         const editBtn = e.target.closest('.edit-category-btn');\r\n         const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (categoryListDiv) { // <-- ADICIONE ESTA LINHA DE VERIFICAÇÃO\r\n-            categoryListDiv.addEventListener('click', async (e) => {\r\n-                const editBtn = e.target.closest('.edit-category-btn');\r\n-                const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-                if (editBtn) {\r\n-                    const { id, name } = editBtn.dataset;\r\n-                    const newName = prompt(\"Editar nome da categoria:\", name);\r\n-                    if (newName && newName.trim() && newName.trim() !== name) {\r\n-                        await api.updateCategory(id, newName.trim());\r\n-                        await openCategoriesModal();\r\n-                        await populateCategoryFilter();\r\n-                    }\r\n-                }\r\n-\r\n-                if (deleteBtn) {\r\n-                    const { id } = deleteBtn.dataset;\r\n-                    if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                        await api.deleteCategory(id);\r\n-                        await openCategoriesModal();\r\n-                        await populateCategoryFilter();\r\n-                    }\r\n-                }\r\n-            });\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n         }\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n     });\r\n-\r\n-    if (categoryFilterSelect) {\r\n-        categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-    }\r\n-\r\n-    // Configuração dos botões do dashboard\r\n-    if (viewCalendarBtn) {\r\n-        viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-    }\r\n-    if (viewDashboardBtn) {\r\n-        viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-    }\r\n-\r\n-    if (dateRangePresetSelect) {\r\n-        dateRangePresetSelect.addEventListener('change', () => {\r\n-            const isCustom = dateRangePresetSelect.value === 'custom';\r\n-            customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n-\r\n-            // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n-            // o dashboard é atualizado imediatamente.\r\n-            if (!isCustom) {\r\n-                renderDashboard();\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    // Para o intervalo personalizado, atualizamos o dashboard\r\n-    // assim que ambas as datas estiverem preenchidas.\r\n-    if (startDateInput) {\r\n-        startDateInput.addEventListener('change', () => {\r\n-            if (endDateInput.value) renderDashboard();\r\n-        });\r\n-    }\r\n-    if (endDateInput) {\r\n-        endDateInput.addEventListener('change', () => {\r\n-            if (startDateInput.value) renderDashboard();\r\n-        });\r\n-    }\r\n-\r\n-    if (viewDashboardBtn) {\r\n-        viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-    }\r\n-\r\n-    // Listeners para os botões de exportação\r\n-    const handleExport = (format) => {\r\n-        // 1. Pega no período de tempo atual do filtro do dashboard\r\n-        const dateRange = getDateRangeFromPreset();\r\n-\r\n-        // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n-        const queryString = new URLSearchParams(dateRange).toString();\r\n-\r\n-        // 3. Monta o URL completo para o download\r\n-        const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n-        \r\n-        // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n-        // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n-        fetch(downloadUrl, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n-            }\r\n-        })\r\n-        .then(res => res.blob())\r\n-        .then(blob => {\r\n-            const url = window.URL.createObjectURL(blob);\r\n-            const a = document.createElement('a');\r\n-            a.style.display = 'none';\r\n-            a.href = url;\r\n-            a.download = `relatorio-despesas.${format}`;\r\n-            document.body.appendChild(a);\r\n-            a.click();\r\n-            window.URL.revokeObjectURL(url);\r\n-            a.remove();\r\n-        }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n-    };\r\n-\r\n-    if (exportCsvBtn) {\r\n-        exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n-    }\r\n-    if (exportPdfBtn) {\r\n-        exportPdfBtn.addEventListener('click', handleVisualExportPDF);\r\n-    }\r\n-\r\n-    if (manualAddBtn) {\r\n-        manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-    }\r\n-    if (xmlAddBtn) {\r\n-        xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-    }\r\n-\r\n-    // CHAME A NOVA FUNÇÃO AQUI\r\n-    initializeDashboardDragAndDrop(); \r\n-\r\n-\r\n+    if (categoryFilterSelect) categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+    if (viewCalendarBtn) viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+    if (viewDashboardBtn) viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+    if (manualAddBtn) manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+    if (xmlAddBtn) xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+    if (exportCsvBtn) exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+    if (exportPdfBtn) exportPdfBtn.addEventListener('click', handleVisualExportPDF);\r\n+    initializeDashboardDragAndDrop();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753368699575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2139,194 +2139,401 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-    // --- Lógica de inicialização que estava em initializeApp() ---\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n+// --- Lógica de inicialização que estava em initializeApp() ---\r\n+const today = new Date();\r\n+currentMonth = today.getMonth();\r\n+currentYear = today.getFullYear();\r\n \r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        // Se não houver token, redireciona para a página de login\r\n-        window.location.href = 'Index.html';\r\n-        return;\r\n-    }\r\n+const token = localStorage.getItem('authToken');\r\n+if (!token) {\r\n+    // Se não houver token, redireciona para a página de login\r\n+    window.location.href = 'Index.html';\r\n+    return;\r\n+}\r\n \r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n+try {\r\n+    const data = await api.checkSession();\r\n+    if (data.user.role === 'SuperAdmin') {\r\n+        isAdminLoggedIn = true;\r\n+        await showAdminDashboard();\r\n+    } else {\r\n+        currentLoggedInUser = data.user;\r\n+        currentLoggedInCompany = data.company;\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            await showMainApp();\r\n         } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n+            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                // Se for o dono da empresa, mostra o modal para renovar\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n             } else {\r\n-                // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    // Se for o dono da empresa, mostra o modal para renovar\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n-                    showAccessBlockedModal();\r\n-                }\r\n+                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                showAccessBlockedModal();\r\n             }\r\n         }\r\n-    } catch (error) {\r\n-        // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n-        // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n-        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        setTimeout(() => {\r\n-            window.location.href = 'Index.html';\r\n-        }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n-    } finally {\r\n-        // Esconde a tela de carregamento inicial\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n     }\r\n+} catch (error) {\r\n+    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n+    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n+    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    setTimeout(() => {\r\n+        window.location.href = 'Index.html';\r\n+    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n+} finally {\r\n+    // Esconde a tela de carregamento inicial\r\n+    document.getElementById('loadingScreen').classList.add('hidden');\r\n+}\r\n \r\n \r\n-    // Submissão de formulários e eventos de clique com verificações de segurança\r\n-    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-    if (logoutBtn) logoutBtn.addEventListener('click', () => { window.location.href = 'Index.html'; });\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-    if (clearFormBtn) clearFormBtn.addEventListener('click', clearBillForm);\r\n-    if (addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    if (closeAddBillModalBtn) closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-    if (closeModalBtn) closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    if (saveBillBtn) saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    if (deleteBillBtn) deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    if (deleteEntireBillBtn) deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    if (closeFullScreenBarcodeBtn) closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-    if (prevMonthBtn) prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-        if (currentMonth === 11) currentYear--;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n+// Submissão de formulários\r\n+if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+if (logoutBtn) {\r\n+    logoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n     });\r\n-    if (nextMonthBtn) nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-        if (currentMonth === 0) currentYear++;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n+}\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+\r\n+\r\n+// Ações na App Principal\r\n+clearFormBtn.addEventListener('click', clearBillForm);\r\n+addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+// Ações do Modal de Edição de Boleto\r\n+closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+// Navegação do Calendário\r\n+prevMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+    if (currentMonth === 11) currentYear--;\r\n+    renderCalendar();\r\n+    updateMonthlySummary();\r\n+});\r\n+\r\n+nextMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+    if (currentMonth === 0) currentYear++;\r\n+    renderCalendar();\r\n+    updateMonthlySummary();\r\n+});\r\n+\r\n+if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+}\r\n+\r\n+if (openAddBillModalBtn) {\r\n+    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+}\r\n+\r\n+const handleRedirectToHome = () => {\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+const handleFullLogoutAndRedirect = () => {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+if (subscriptionLogoutBtn) {\r\n+    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+}\r\n+\r\n+if (blockedAccessLogoutBtn) {\r\n+    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n     });\r\n-    if (addCompanyCnpjInput) IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    if (openAddBillModalBtn) openAddBillModalBtn.addEventListener('click', () => openAddBillModal());\r\n-    if (subscriptionLogoutBtn) subscriptionLogoutBtn.addEventListener('click', () => { window.location.href = 'Index.html'; });\r\n-    if (blockedAccessLogoutBtn) blockedAccessLogoutBtn.addEventListener('click', () => { window.location.href = 'Index.html'; });\r\n-    if (settingsBtn) settingsBtn.addEventListener('click', (e) => {\r\n-        e.stopPropagation();\r\n+}\r\n+\r\n+// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+if (settingsBtn) {\r\n+    settingsBtn.addEventListener('click', (e) => {\r\n+        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n         settingsDropdown.classList.toggle('hidden');\r\n     });\r\n-    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n+}\r\n+\r\n+// Links dentro do menu dropdown\r\n+if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCompanyInfoModal();\r\n+});\r\n+\r\n+if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openPermissionsModal();\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n         settingsDropdown.classList.add('hidden');\r\n-        openCompanyInfoModal();\r\n+    }\r\n+});\r\n+\r\n+// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openManageUsersModal();\r\n+});\r\n+\r\n+// Botões do modal de gerir utilizadores\r\n+if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+    manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+    openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+});\r\n+\r\n+/**\r\n+ * Lida com o clique no botão de criar/renovar assinatura.\r\n+ */\r\n+async function handleCreateSubscription() {\r\n+    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+    subscriptionActionBtn.disabled = true;\r\n+    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+    try {\r\n+        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+        const data = await api.createSubscriptionLink();\r\n+\r\n+        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+        if (data.init_point) {\r\n+            window.location.href = data.init_point;\r\n+        } else {\r\n+            throw new Error('Link de pagamento não recebido.');\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+        subscriptionActionBtn.disabled = false;\r\n+        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+    }\r\n+}\r\n+\r\n+// Liga a função ao clique do botão.\r\n+if (subscriptionActionBtn) {\r\n+    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+}\r\n+\r\n+if (closePreviewModalBtn) {\r\n+    closePreviewModalBtn.addEventListener('click', () => {\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n     });\r\n-    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openPermissionsModal();\r\n-    });\r\n-    window.addEventListener('click', () => {\r\n-        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n+}\r\n+\r\n+if (nfeXmlInput) {\r\n+    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+}\r\n+\r\n+if (previewBillNameInput) {\r\n+    previewBillNameInput.addEventListener('input', (e) => {\r\n+        if (currentBill) {\r\n+            currentBill.name = e.target.value;\r\n         }\r\n     });\r\n-    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openManageUsersModal();\r\n-    });\r\n-    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-        manageUsersModal.classList.add('hidden');\r\n-        openAddUserModal();\r\n-    });\r\n-    if (subscriptionActionBtn) subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-    if (closePreviewModalBtn) closePreviewModalBtn.addEventListener('click', () => { installmentsPreviewModal.classList.add('hidden'); });\r\n-    if (nfeXmlInput) nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-    if (previewBillNameInput) previewBillNameInput.addEventListener('input', (e) => {\r\n-        if (currentBill) { currentBill.name = e.target.value; }\r\n-    });\r\n-    if (showFullScreenBarcodeBtn) showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-    if (searchInput) searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-    if (filterButtons) filterButtons.forEach(button => {\r\n+}\r\n+\r\n+// Liga a função ao clique do botão\r\n+if (showFullScreenBarcodeBtn) {\r\n+    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+}\r\n+\r\n+// Listener para o campo de pesquisa\r\n+if (searchInput) {\r\n+    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Listeners para os botões de filtro\r\n+if (filterButtons) {\r\n+    filterButtons.forEach(button => {\r\n         button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões\r\n             filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona a classe 'active' apenas ao botão clicado\r\n             e.currentTarget.classList.add('active');\r\n+            // Aplica o filtro\r\n             applyFiltersAndSearch();\r\n         });\r\n     });\r\n-    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+}\r\n+\r\n+if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCategoriesModal();\r\n+});\r\n+\r\n+if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+if (addCategoryForm) {\r\n+    addCategoryForm.addEventListener('submit', async (e) => {\r\n         e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCategoriesModal();\r\n-    });\r\n-    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-    if (addCategoryForm) addCategoryForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n         const name = newCategoryNameInput.value.trim();\r\n         if (!name) return;\r\n         try {\r\n             await api.createCategory(name);\r\n             newCategoryNameInput.value = '';\r\n-            await openCategoriesModal();\r\n-            await populateCategoryFilter();\r\n+            await openCategoriesModal(); // Recarrega a lista do modal\r\n+            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n-    if (categoryListDiv) categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n+}\r\n+\r\n+categoryListDiv.addEventListener('click', async (e) => {\r\n+    const editBtn = e.target.closest('.edit-category-btn');\r\n+    const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+    if (categoryListDiv) { // <-- ADICIONE ESTA LINHA DE VERIFICAÇÃO\r\n+        categoryListDiv.addEventListener('click', async (e) => {\r\n+            const editBtn = e.target.closest('.edit-category-btn');\r\n+            const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+            if (editBtn) {\r\n+                const { id, name } = editBtn.dataset;\r\n+                const newName = prompt(\"Editar nome da categoria:\", name);\r\n+                if (newName && newName.trim() && newName.trim() !== name) {\r\n+                    await api.updateCategory(id, newName.trim());\r\n+                    await openCategoriesModal();\r\n+                    await populateCategoryFilter();\r\n+                }\r\n             }\r\n-        }\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n+\r\n+            if (deleteBtn) {\r\n+                const { id } = deleteBtn.dataset;\r\n+                if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                    await api.deleteCategory(id);\r\n+                    await openCategoriesModal();\r\n+                    await populateCategoryFilter();\r\n+                }\r\n             }\r\n+        });\r\n+    }\r\n+});\r\n+\r\n+if (categoryFilterSelect) {\r\n+    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Configuração dos botões do dashboard\r\n+if (viewCalendarBtn) {\r\n+    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+}\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+if (dateRangePresetSelect) {\r\n+    dateRangePresetSelect.addEventListener('change', () => {\r\n+        const isCustom = dateRangePresetSelect.value === 'custom';\r\n+        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n+\r\n+        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n+        // o dashboard é atualizado imediatamente.\r\n+        if (!isCustom) {\r\n+            renderDashboard();\r\n         }\r\n     });\r\n-    if (categoryFilterSelect) categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-    if (viewCalendarBtn) viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-    if (viewDashboardBtn) viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-    if (manualAddBtn) manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-    if (xmlAddBtn) xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-    if (exportCsvBtn) exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n-    if (exportPdfBtn) exportPdfBtn.addEventListener('click', handleVisualExportPDF);\r\n-    initializeDashboardDragAndDrop();\r\n+}\r\n+\r\n+// Para o intervalo personalizado, atualizamos o dashboard\r\n+// assim que ambas as datas estiverem preenchidas.\r\n+if (startDateInput) {\r\n+    startDateInput.addEventListener('change', () => {\r\n+        if (endDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+if (endDateInput) {\r\n+    endDateInput.addEventListener('change', () => {\r\n+        if (startDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+// Listeners para os botões de exportação\r\n+const handleExport = (format) => {\r\n+    // 1. Pega no período de tempo atual do filtro do dashboard\r\n+    const dateRange = getDateRangeFromPreset();\r\n+\r\n+    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n+    const queryString = new URLSearchParams(dateRange).toString();\r\n+\r\n+    // 3. Monta o URL completo para o download\r\n+    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n+    \r\n+    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n+    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n+    fetch(downloadUrl, {\r\n+        headers: {\r\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n+        }\r\n+    })\r\n+    .then(res => res.blob())\r\n+    .then(blob => {\r\n+        const url = window.URL.createObjectURL(blob);\r\n+        const a = document.createElement('a');\r\n+        a.style.display = 'none';\r\n+        a.href = url;\r\n+        a.download = `relatorio-despesas.${format}`;\r\n+        document.body.appendChild(a);\r\n+        a.click();\r\n+        window.URL.revokeObjectURL(url);\r\n+        a.remove();\r\n+    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n+};\r\n+\r\n+if (exportCsvBtn) {\r\n+    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+}\r\n+if (exportPdfBtn) {\r\n+    exportPdfBtn.addEventListener('click', handleVisualExportPDF);\r\n+}\r\n+\r\n+if (manualAddBtn) {\r\n+    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+}\r\n+if (xmlAddBtn) {\r\n+    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+}\r\n+\r\n+// CHAME A NOVA FUNÇÃO AQUI\r\n+initializeDashboardDragAndDrop(); \r\n+\r\n+\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753368920946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2521,9 +2521,9 @@\n if (exportCsvBtn) {\r\n     exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n }\r\n if (exportPdfBtn) {\r\n-    exportPdfBtn.addEventListener('click', handleVisualExportPDF);\r\n+    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n }\r\n \r\n if (manualAddBtn) {\r\n     manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n"
                },
                {
                    "date": 1753369213388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2190,350 +2190,143 @@\n     document.getElementById('loadingScreen').classList.add('hidden');\r\n }\r\n \r\n \r\n-// Submissão de formulários\r\n-if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-if (logoutBtn) {\r\n-    logoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n+    // Submissão de formulários e eventos de clique com verificações de segurança\r\n+    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+    if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+    if (clearFormBtn) clearFormBtn.addEventListener('click', clearBillForm);\r\n+    if (addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+    if (closeAddBillModalBtn) closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+    if (closeModalBtn) closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    if (saveBillBtn) saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+    if (deleteBillBtn) deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+    if (deleteEntireBillBtn) deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+    if (closeFullScreenBarcodeBtn) closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+    if (prevMonthBtn) prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+        if (currentMonth === 11) currentYear--;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n     });\r\n-}\r\n-if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-\r\n-\r\n-// Ações na App Principal\r\n-clearFormBtn.addEventListener('click', clearBillForm);\r\n-addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-// Ações do Modal de Edição de Boleto\r\n-closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-// Navegação do Calendário\r\n-prevMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-    if (currentMonth === 11) currentYear--;\r\n-    renderCalendar();\r\n-    updateMonthlySummary();\r\n-});\r\n-\r\n-nextMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-    if (currentMonth === 0) currentYear++;\r\n-    renderCalendar();\r\n-    updateMonthlySummary();\r\n-});\r\n-\r\n-if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-}\r\n-\r\n-if (openAddBillModalBtn) {\r\n-    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-}\r\n-\r\n-const handleRedirectToHome = () => {\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-const handleFullLogoutAndRedirect = () => {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-if (subscriptionLogoutBtn) {\r\n-    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-}\r\n-\r\n-if (blockedAccessLogoutBtn) {\r\n-    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n+    if (nextMonthBtn) nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+        if (currentMonth === 0) currentYear++;\r\n+        renderCalendar();\r\n+        updateMonthlySummary();\r\n     });\r\n-}\r\n-\r\n-// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-if (settingsBtn) {\r\n-    settingsBtn.addEventListener('click', (e) => {\r\n-        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+    if (addCompanyCnpjInput) IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    if (openAddBillModalBtn) openAddBillModalBtn.addEventListener('click', () => openAddBillModal());\r\n+    if (subscriptionLogoutBtn) subscriptionLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+    if (blockedAccessLogoutBtn) blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+    if (settingsBtn) settingsBtn.addEventListener('click', (e) => {\r\n+        e.stopPropagation();\r\n         settingsDropdown.classList.toggle('hidden');\r\n     });\r\n-}\r\n-\r\n-// Links dentro do menu dropdown\r\n-if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCompanyInfoModal();\r\n-});\r\n-\r\n-if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openPermissionsModal();\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n         settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n-\r\n-// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openManageUsersModal();\r\n-});\r\n-\r\n-// Botões do modal de gerir utilizadores\r\n-if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-    manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-    openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-});\r\n-\r\n-/**\r\n- * Lida com o clique no botão de criar/renovar assinatura.\r\n- */\r\n-async function handleCreateSubscription() {\r\n-    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-    subscriptionActionBtn.disabled = true;\r\n-    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-    try {\r\n-        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-        const data = await api.createSubscriptionLink();\r\n-\r\n-        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-        if (data.init_point) {\r\n-            window.location.href = data.init_point;\r\n-        } else {\r\n-            throw new Error('Link de pagamento não recebido.');\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-        subscriptionActionBtn.disabled = false;\r\n-        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-    }\r\n-}\r\n-\r\n-// Liga a função ao clique do botão.\r\n-if (subscriptionActionBtn) {\r\n-    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-}\r\n-\r\n-if (closePreviewModalBtn) {\r\n-    closePreviewModalBtn.addEventListener('click', () => {\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n+        openCompanyInfoModal();\r\n     });\r\n-}\r\n-\r\n-if (nfeXmlInput) {\r\n-    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-}\r\n-\r\n-if (previewBillNameInput) {\r\n-    previewBillNameInput.addEventListener('input', (e) => {\r\n-        if (currentBill) {\r\n-            currentBill.name = e.target.value;\r\n+    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openPermissionsModal();\r\n+    });\r\n+    window.addEventListener('click', () => {\r\n+        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n         }\r\n     });\r\n-}\r\n-\r\n-// Liga a função ao clique do botão\r\n-if (showFullScreenBarcodeBtn) {\r\n-    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-}\r\n-\r\n-// Listener para o campo de pesquisa\r\n-if (searchInput) {\r\n-    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Listeners para os botões de filtro\r\n-if (filterButtons) {\r\n-    filterButtons.forEach(button => {\r\n+    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+        e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openManageUsersModal();\r\n+    });\r\n+    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+        manageUsersModal.classList.add('hidden');\r\n+        openAddUserModal();\r\n+    });\r\n+    if (subscriptionActionBtn) subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+    if (closePreviewModalBtn) closePreviewModalBtn.addEventListener('click', () => { installmentsPreviewModal.classList.add('hidden'); });\r\n+    if (nfeXmlInput) nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+    if (previewBillNameInput) previewBillNameInput.addEventListener('input', (e) => {\r\n+        if (currentBill) { currentBill.name = e.target.value; }\r\n+    });\r\n+    if (showFullScreenBarcodeBtn) showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+    if (searchInput) searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+    if (filterButtons) filterButtons.forEach(button => {\r\n         button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões\r\n             filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona a classe 'active' apenas ao botão clicado\r\n             e.currentTarget.classList.add('active');\r\n-            // Aplica o filtro\r\n             applyFiltersAndSearch();\r\n         });\r\n     });\r\n-}\r\n-\r\n-if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCategoriesModal();\r\n-});\r\n-\r\n-if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-if (addCategoryForm) {\r\n-    addCategoryForm.addEventListener('submit', async (e) => {\r\n+    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n         e.preventDefault();\r\n+        settingsDropdown.classList.add('hidden');\r\n+        openCategoriesModal();\r\n+    });\r\n+    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+    if (addCategoryForm) addCategoryForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n         const name = newCategoryNameInput.value.trim();\r\n         if (!name) return;\r\n         try {\r\n             await api.createCategory(name);\r\n             newCategoryNameInput.value = '';\r\n-            await openCategoriesModal(); // Recarrega a lista do modal\r\n-            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n+            await openCategoriesModal();\r\n+            await populateCategoryFilter();\r\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n-}\r\n-\r\n-categoryListDiv.addEventListener('click', async (e) => {\r\n-    const editBtn = e.target.closest('.edit-category-btn');\r\n-    const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-    if (categoryListDiv) { // <-- ADICIONE ESTA LINHA DE VERIFICAÇÃO\r\n-        categoryListDiv.addEventListener('click', async (e) => {\r\n-            const editBtn = e.target.closest('.edit-category-btn');\r\n-            const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-            if (editBtn) {\r\n-                const { id, name } = editBtn.dataset;\r\n-                const newName = prompt(\"Editar nome da categoria:\", name);\r\n-                if (newName && newName.trim() && newName.trim() !== name) {\r\n-                    await api.updateCategory(id, newName.trim());\r\n-                    await openCategoriesModal();\r\n-                    await populateCategoryFilter();\r\n-                }\r\n+    if (categoryListDiv) categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n             }\r\n-\r\n-            if (deleteBtn) {\r\n-                const { id } = deleteBtn.dataset;\r\n-                if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                    await api.deleteCategory(id);\r\n-                    await openCategoriesModal();\r\n-                    await populateCategoryFilter();\r\n-                }\r\n+        }\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n             }\r\n-        });\r\n-    }\r\n-});\r\n-\r\n-if (categoryFilterSelect) {\r\n-    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Configuração dos botões do dashboard\r\n-if (viewCalendarBtn) {\r\n-    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-}\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-if (dateRangePresetSelect) {\r\n-    dateRangePresetSelect.addEventListener('change', () => {\r\n-        const isCustom = dateRangePresetSelect.value === 'custom';\r\n-        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n-\r\n-        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n-        // o dashboard é atualizado imediatamente.\r\n-        if (!isCustom) {\r\n-            renderDashboard();\r\n         }\r\n     });\r\n-}\r\n-\r\n-// Para o intervalo personalizado, atualizamos o dashboard\r\n-// assim que ambas as datas estiverem preenchidas.\r\n-if (startDateInput) {\r\n-    startDateInput.addEventListener('change', () => {\r\n-        if (endDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-if (endDateInput) {\r\n-    endDateInput.addEventListener('change', () => {\r\n-        if (startDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-// Listeners para os botões de exportação\r\n-const handleExport = (format) => {\r\n-    // 1. Pega no período de tempo atual do filtro do dashboard\r\n-    const dateRange = getDateRangeFromPreset();\r\n-\r\n-    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n-    const queryString = new URLSearchParams(dateRange).toString();\r\n-\r\n-    // 3. Monta o URL completo para o download\r\n-    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n-    \r\n-    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n-    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n-    fetch(downloadUrl, {\r\n-        headers: {\r\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n-        }\r\n-    })\r\n-    .then(res => res.blob())\r\n-    .then(blob => {\r\n-        const url = window.URL.createObjectURL(blob);\r\n-        const a = document.createElement('a');\r\n-        a.style.display = 'none';\r\n-        a.href = url;\r\n-        a.download = `relatorio-despesas.${format}`;\r\n-        document.body.appendChild(a);\r\n-        a.click();\r\n-        window.URL.revokeObjectURL(url);\r\n-        a.remove();\r\n-    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n-};\r\n-\r\n-if (exportCsvBtn) {\r\n-    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n-}\r\n-if (exportPdfBtn) {\r\n-    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n-}\r\n-\r\n-if (manualAddBtn) {\r\n-    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-}\r\n-if (xmlAddBtn) {\r\n-    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-}\r\n-\r\n-// CHAME A NOVA FUNÇÃO AQUI\r\n-initializeDashboardDragAndDrop(); \r\n-\r\n-\r\n+    if (categoryFilterSelect) categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+    if (viewCalendarBtn) viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+    if (viewDashboardBtn) viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+    if (manualAddBtn) manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+    if (xmlAddBtn) xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+    if (exportCsvBtn) exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+    if (exportPdfBtn) exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n+    initializeDashboardDragAndDrop();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753369341369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1215,8 +1215,14 @@\n         manualAddBtn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px');\r\n     }\r\n }\r\n \r\n+function handleFullLogoutAndRedirect() {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753369431990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1221,8 +1221,34 @@\n     localStorage.removeItem('superAdminToken');\r\n     window.location.href = 'Index.html';\r\n }\r\n \r\n+/**\r\n+ * Lida com o clique no botão de criar/renovar assinatura.\r\n+ */\r\n+async function handleCreateSubscription() {\r\n+    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+    subscriptionActionBtn.disabled = true;\r\n+    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+    try {\r\n+        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+        const data = await api.createSubscriptionLink();\r\n+\r\n+        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+        if (data.init_point) {\r\n+            window.location.href = data.init_point;\r\n+        } else {\r\n+            throw new Error('Link de pagamento não recebido.');\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+        subscriptionActionBtn.disabled = false;\r\n+        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753369841069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1215,40 +1215,8 @@\n         manualAddBtn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px');\r\n     }\r\n }\r\n \r\n-function handleFullLogoutAndRedirect() {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão de criar/renovar assinatura.\r\n- */\r\n-async function handleCreateSubscription() {\r\n-    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-    subscriptionActionBtn.disabled = true;\r\n-    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-    try {\r\n-        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-        const data = await api.createSubscriptionLink();\r\n-\r\n-        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-        if (data.init_point) {\r\n-            window.location.href = data.init_point;\r\n-        } else {\r\n-            throw new Error('Link de pagamento não recebido.');\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-        subscriptionActionBtn.disabled = false;\r\n-        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-    }\r\n-}\r\n-\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n@@ -2222,143 +2190,350 @@\n     document.getElementById('loadingScreen').classList.add('hidden');\r\n }\r\n \r\n \r\n-    // Submissão de formulários e eventos de clique com verificações de segurança\r\n-    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-    if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-    if (clearFormBtn) clearFormBtn.addEventListener('click', clearBillForm);\r\n-    if (addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    if (closeAddBillModalBtn) closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-    if (closeModalBtn) closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    if (saveBillBtn) saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    if (deleteBillBtn) deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    if (deleteEntireBillBtn) deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    if (closeFullScreenBarcodeBtn) closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-    if (prevMonthBtn) prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-        if (currentMonth === 11) currentYear--;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n+// Submissão de formulários\r\n+if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+if (logoutBtn) {\r\n+    logoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n     });\r\n-    if (nextMonthBtn) nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-        if (currentMonth === 0) currentYear++;\r\n-        renderCalendar();\r\n-        updateMonthlySummary();\r\n+}\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+\r\n+\r\n+// Ações na App Principal\r\n+clearFormBtn.addEventListener('click', clearBillForm);\r\n+addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+// Ações do Modal de Edição de Boleto\r\n+closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+// Navegação do Calendário\r\n+prevMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+    if (currentMonth === 11) currentYear--;\r\n+    renderCalendar();\r\n+    updateMonthlySummary();\r\n+});\r\n+\r\n+nextMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+    if (currentMonth === 0) currentYear++;\r\n+    renderCalendar();\r\n+    updateMonthlySummary();\r\n+});\r\n+\r\n+if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+}\r\n+\r\n+if (openAddBillModalBtn) {\r\n+    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+}\r\n+\r\n+const handleRedirectToHome = () => {\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+const handleFullLogoutAndRedirect = () => {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+if (subscriptionLogoutBtn) {\r\n+    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+}\r\n+\r\n+if (blockedAccessLogoutBtn) {\r\n+    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n     });\r\n-    if (addCompanyCnpjInput) IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    if (openAddBillModalBtn) openAddBillModalBtn.addEventListener('click', () => openAddBillModal());\r\n-    if (subscriptionLogoutBtn) subscriptionLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n-    if (blockedAccessLogoutBtn) blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n-    if (settingsBtn) settingsBtn.addEventListener('click', (e) => {\r\n-        e.stopPropagation();\r\n+}\r\n+\r\n+// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+if (settingsBtn) {\r\n+    settingsBtn.addEventListener('click', (e) => {\r\n+        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n         settingsDropdown.classList.toggle('hidden');\r\n     });\r\n-    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n+}\r\n+\r\n+// Links dentro do menu dropdown\r\n+if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCompanyInfoModal();\r\n+});\r\n+\r\n+if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openPermissionsModal();\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n         settingsDropdown.classList.add('hidden');\r\n-        openCompanyInfoModal();\r\n+    }\r\n+});\r\n+\r\n+// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openManageUsersModal();\r\n+});\r\n+\r\n+// Botões do modal de gerir utilizadores\r\n+if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+    manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+    openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+});\r\n+\r\n+/**\r\n+ * Lida com o clique no botão de criar/renovar assinatura.\r\n+ */\r\n+async function handleCreateSubscription() {\r\n+    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+    subscriptionActionBtn.disabled = true;\r\n+    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+    try {\r\n+        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+        const data = await api.createSubscriptionLink();\r\n+\r\n+        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+        if (data.init_point) {\r\n+            window.location.href = data.init_point;\r\n+        } else {\r\n+            throw new Error('Link de pagamento não recebido.');\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+        subscriptionActionBtn.disabled = false;\r\n+        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+    }\r\n+}\r\n+\r\n+// Liga a função ao clique do botão.\r\n+if (subscriptionActionBtn) {\r\n+    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+}\r\n+\r\n+if (closePreviewModalBtn) {\r\n+    closePreviewModalBtn.addEventListener('click', () => {\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n     });\r\n-    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openPermissionsModal();\r\n-    });\r\n-    window.addEventListener('click', () => {\r\n-        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n+}\r\n+\r\n+if (nfeXmlInput) {\r\n+    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+}\r\n+\r\n+if (previewBillNameInput) {\r\n+    previewBillNameInput.addEventListener('input', (e) => {\r\n+        if (currentBill) {\r\n+            currentBill.name = e.target.value;\r\n         }\r\n     });\r\n-    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openManageUsersModal();\r\n-    });\r\n-    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-        manageUsersModal.classList.add('hidden');\r\n-        openAddUserModal();\r\n-    });\r\n-    if (subscriptionActionBtn) subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-    if (closePreviewModalBtn) closePreviewModalBtn.addEventListener('click', () => { installmentsPreviewModal.classList.add('hidden'); });\r\n-    if (nfeXmlInput) nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-    if (previewBillNameInput) previewBillNameInput.addEventListener('input', (e) => {\r\n-        if (currentBill) { currentBill.name = e.target.value; }\r\n-    });\r\n-    if (showFullScreenBarcodeBtn) showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-    if (searchInput) searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-    if (filterButtons) filterButtons.forEach(button => {\r\n+}\r\n+\r\n+// Liga a função ao clique do botão\r\n+if (showFullScreenBarcodeBtn) {\r\n+    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+}\r\n+\r\n+// Listener para o campo de pesquisa\r\n+if (searchInput) {\r\n+    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Listeners para os botões de filtro\r\n+if (filterButtons) {\r\n+    filterButtons.forEach(button => {\r\n         button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões\r\n             filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona a classe 'active' apenas ao botão clicado\r\n             e.currentTarget.classList.add('active');\r\n+            // Aplica o filtro\r\n             applyFiltersAndSearch();\r\n         });\r\n     });\r\n-    if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+}\r\n+\r\n+if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCategoriesModal();\r\n+});\r\n+\r\n+if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+if (addCategoryForm) {\r\n+    addCategoryForm.addEventListener('submit', async (e) => {\r\n         e.preventDefault();\r\n-        settingsDropdown.classList.add('hidden');\r\n-        openCategoriesModal();\r\n-    });\r\n-    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-    if (addCategoryForm) addCategoryForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n         const name = newCategoryNameInput.value.trim();\r\n         if (!name) return;\r\n         try {\r\n             await api.createCategory(name);\r\n             newCategoryNameInput.value = '';\r\n-            await openCategoriesModal();\r\n-            await populateCategoryFilter();\r\n+            await openCategoriesModal(); // Recarrega a lista do modal\r\n+            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n         }\r\n     });\r\n-    if (categoryListDiv) categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n+}\r\n+\r\n+categoryListDiv.addEventListener('click', async (e) => {\r\n+    const editBtn = e.target.closest('.edit-category-btn');\r\n+    const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+    if (categoryListDiv) { // <-- ADICIONE ESTA LINHA DE VERIFICAÇÃO\r\n+        categoryListDiv.addEventListener('click', async (e) => {\r\n+            const editBtn = e.target.closest('.edit-category-btn');\r\n+            const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+            if (editBtn) {\r\n+                const { id, name } = editBtn.dataset;\r\n+                const newName = prompt(\"Editar nome da categoria:\", name);\r\n+                if (newName && newName.trim() && newName.trim() !== name) {\r\n+                    await api.updateCategory(id, newName.trim());\r\n+                    await openCategoriesModal();\r\n+                    await populateCategoryFilter();\r\n+                }\r\n             }\r\n-        }\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n+\r\n+            if (deleteBtn) {\r\n+                const { id } = deleteBtn.dataset;\r\n+                if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                    await api.deleteCategory(id);\r\n+                    await openCategoriesModal();\r\n+                    await populateCategoryFilter();\r\n+                }\r\n             }\r\n+        });\r\n+    }\r\n+});\r\n+\r\n+if (categoryFilterSelect) {\r\n+    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Configuração dos botões do dashboard\r\n+if (viewCalendarBtn) {\r\n+    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+}\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+if (dateRangePresetSelect) {\r\n+    dateRangePresetSelect.addEventListener('change', () => {\r\n+        const isCustom = dateRangePresetSelect.value === 'custom';\r\n+        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n+\r\n+        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n+        // o dashboard é atualizado imediatamente.\r\n+        if (!isCustom) {\r\n+            renderDashboard();\r\n         }\r\n     });\r\n-    if (categoryFilterSelect) categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-    if (viewCalendarBtn) viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-    if (viewDashboardBtn) viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-    if (manualAddBtn) manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-    if (xmlAddBtn) xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-    if (exportCsvBtn) exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n-    if (exportPdfBtn) exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n-    initializeDashboardDragAndDrop();\r\n+}\r\n+\r\n+// Para o intervalo personalizado, atualizamos o dashboard\r\n+// assim que ambas as datas estiverem preenchidas.\r\n+if (startDateInput) {\r\n+    startDateInput.addEventListener('change', () => {\r\n+        if (endDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+if (endDateInput) {\r\n+    endDateInput.addEventListener('change', () => {\r\n+        if (startDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+// Listeners para os botões de exportação\r\n+const handleExport = (format) => {\r\n+    // 1. Pega no período de tempo atual do filtro do dashboard\r\n+    const dateRange = getDateRangeFromPreset();\r\n+\r\n+    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n+    const queryString = new URLSearchParams(dateRange).toString();\r\n+\r\n+    // 3. Monta o URL completo para o download\r\n+    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n+    \r\n+    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n+    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n+    fetch(downloadUrl, {\r\n+        headers: {\r\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n+        }\r\n+    })\r\n+    .then(res => res.blob())\r\n+    .then(blob => {\r\n+        const url = window.URL.createObjectURL(blob);\r\n+        const a = document.createElement('a');\r\n+        a.style.display = 'none';\r\n+        a.href = url;\r\n+        a.download = `relatorio-despesas.${format}`;\r\n+        document.body.appendChild(a);\r\n+        a.click();\r\n+        window.URL.revokeObjectURL(url);\r\n+        a.remove();\r\n+    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n+};\r\n+\r\n+if (exportCsvBtn) {\r\n+    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+}\r\n+if (exportPdfBtn) {\r\n+    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n+}\r\n+\r\n+if (manualAddBtn) {\r\n+    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+}\r\n+if (xmlAddBtn) {\r\n+    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+}\r\n+\r\n+// CHAME A NOVA FUNÇÃO AQUI\r\n+initializeDashboardDragAndDrop(); \r\n+\r\n+\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753371366199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,8 @@\n const summaryTotal = document.getElementById('summaryTotal');\r\n const summaryPaid = document.getElementById('summaryPaid');\r\n const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n const billForm = document.getElementById('billForm');\r\n-const clearFormBtn = document.getElementById('clearFormBtn');\r\n const addBillModal = document.getElementById('addBillModal');\r\n const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n const installmentsPreview = document.getElementById('installmentsPreview');\r\n const installmentsList = document.getElementById('installmentsList');\r\n@@ -2219,9 +2218,8 @@\n if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n \r\n \r\n // Ações na App Principal\r\n-clearFormBtn.addEventListener('click', clearBillForm);\r\n addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n \r\n // Ações do Modal de Edição de Boleto\r\n"
                },
                {
                    "date": 1753371729146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n         updateMonthlySummary();\r\n         renderCalendar();\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n+        logout(); // <-- CORREÇÃO APLICADA AQUI\r\n     }\r\n }\r\n \r\n async function showMainApp() {\r\n"
                },
                {
                    "date": 1753371814404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n         updateMonthlySummary();\r\n         renderCalendar();\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n-        logout(); // <-- CORREÇÃO APLICADA AQUI\r\n+        showInitialLogin();\r\n     }\r\n }\r\n \r\n async function showMainApp() {\r\n"
                },
                {
                    "date": 1753372073809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2410,38 +2410,33 @@\n         }\r\n     });\r\n }\r\n \r\n-categoryListDiv.addEventListener('click', async (e) => {\r\n-    const editBtn = e.target.closest('.edit-category-btn');\r\n-    const deleteBtn = e.target.closest('.delete-category-btn');\r\n+if (categoryListDiv) {\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n \r\n-    if (categoryListDiv) { // <-- ADICIONE ESTA LINHA DE VERIFICAÇÃO\r\n-        categoryListDiv.addEventListener('click', async (e) => {\r\n-            const editBtn = e.target.closest('.edit-category-btn');\r\n-            const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-            if (editBtn) {\r\n-                const { id, name } = editBtn.dataset;\r\n-                const newName = prompt(\"Editar nome da categoria:\", name);\r\n-                if (newName && newName.trim() && newName.trim() !== name) {\r\n-                    await api.updateCategory(id, newName.trim());\r\n-                    await openCategoriesModal();\r\n-                    await populateCategoryFilter();\r\n-                }\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n             }\r\n+        }\r\n \r\n-            if (deleteBtn) {\r\n-                const { id } = deleteBtn.dataset;\r\n-                if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                    await api.deleteCategory(id);\r\n-                    await openCategoriesModal();\r\n-                    await populateCategoryFilter();\r\n-                }\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n             }\r\n-        });\r\n-    }\r\n-});\r\n+        }\r\n+    });\r\n+}\r\n \r\n if (categoryFilterSelect) {\r\n     categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n }\r\n"
                },
                {
                    "date": 1753372153529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,13 +137,8 @@\n const billCategorySelect = document.getElementById('billCategorySelect');\r\n const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n \r\n-const adminLoginScreen = document.getElementById('adminLoginScreen');\r\n-const adminLoginForm = document.getElementById('adminLoginForm');\r\n-const initialLoginScreen = document.getElementById('initialLoginScreen');\r\n-const cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\n-\r\n const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n const calendarView = document.getElementById('calendarView');\r\n const dashboardView = document.getElementById('dashboardView');\r\n"
                },
                {
                    "date": 1753372382023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -624,9 +624,9 @@\n     }\r\n }\r\n \r\n /**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * Exibe o modal apropriado para o Proprietário renovar a assinatura.\r\n  * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n  */\r\n function showSubscriptionModal(company) {\r\n     hideAllScreens();\r\n@@ -636,11 +636,11 @@\n         subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n         subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n         subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n         subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n+    } else { // 'past_due' ou outro estado de falha\r\n         subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente ou expirada. Por favor, renove para continuar usando todas as funcionalidades.';\r\n         subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n         subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n     }\r\n     if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n"
                },
                {
                    "date": 1753372400442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -650,9 +650,8 @@\n  * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n  */\r\n function showAccessBlockedModal() {\r\n     hideAllScreens();\r\n-    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n     if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1753372435160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2132,57 +2132,54 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-// --- Lógica de inicialização que estava em initializeApp() ---\r\n-const today = new Date();\r\n-currentMonth = today.getMonth();\r\n-currentYear = today.getFullYear();\r\n+    // --- Lógica de inicialização ---\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n \r\n-const token = localStorage.getItem('authToken');\r\n-if (!token) {\r\n-    // Se não houver token, redireciona para a página de login\r\n-    window.location.href = 'Index.html';\r\n-    return;\r\n-}\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        window.location.href = 'Index.html';\r\n+        return;\r\n+    }\r\n \r\n-try {\r\n-    const data = await api.checkSession();\r\n-    if (data.user.role === 'SuperAdmin') {\r\n-        isAdminLoggedIn = true;\r\n-        await showAdminDashboard();\r\n-    } else {\r\n-        currentLoggedInUser = data.user;\r\n-        currentLoggedInCompany = data.company;\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+    try {\r\n+        const data = await api.checkSession(); // Esta chamada está a funcionar (Status 200)\r\n \r\n-        if (isSubscriptionActive) {\r\n-            await showMainApp();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n         } else {\r\n-            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                // Se for o dono da empresa, mostra o modal para renovar\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            \r\n+            // A VERIFICAÇÃO PRINCIPAL ACONTECE AQUI:\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                // Se a assinatura estiver ativa, mostra a aplicação.\r\n+                await showMainApp();\r\n             } else {\r\n-                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n-                showAccessBlockedModal();\r\n+                // SE A ASSINATURA NÃO ESTIVER ATIVA:\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    // Se for o dono da empresa, mostra o modal para renovar.\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    // Se for um funcionário/gerente, mostra o modal de acesso bloqueado.\r\n+                    showAccessBlockedModal();\r\n+                }\r\n             }\r\n         }\r\n+    } catch (error) {\r\n+        // Este bloco 'catch' agora só será ativado se a API realmente falhar (ex: servidor offline).\r\n+        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+        logout(); // Usamos a função de logout correta\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n     }\r\n-} catch (error) {\r\n-    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n-    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n-    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    setTimeout(() => {\r\n-        window.location.href = 'Index.html';\r\n-    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n-} finally {\r\n-    // Esconde a tela de carregamento inicial\r\n-    document.getElementById('loadingScreen').classList.add('hidden');\r\n-}\r\n \r\n \r\n // Submissão de formulários\r\n if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n"
                },
                {
                    "date": 1753372538064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -624,9 +624,9 @@\n     }\r\n }\r\n \r\n /**\r\n- * Exibe o modal apropriado para o Proprietário renovar a assinatura.\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n  * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n  */\r\n function showSubscriptionModal(company) {\r\n     hideAllScreens();\r\n@@ -636,11 +636,11 @@\n         subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n         subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n         subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n         subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado de falha\r\n+    } else { // 'past_due' ou outro estado\r\n         subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente ou expirada. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n         subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n         subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n     }\r\n     if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n@@ -650,8 +650,9 @@\n  * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n  */\r\n function showAccessBlockedModal() {\r\n     hideAllScreens();\r\n+    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n     if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n@@ -2132,54 +2133,57 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-    // --- Lógica de inicialização ---\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n+// --- Lógica de inicialização que estava em initializeApp() ---\r\n+const today = new Date();\r\n+currentMonth = today.getMonth();\r\n+currentYear = today.getFullYear();\r\n \r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        window.location.href = 'Index.html';\r\n-        return;\r\n-    }\r\n+const token = localStorage.getItem('authToken');\r\n+if (!token) {\r\n+    // Se não houver token, redireciona para a página de login\r\n+    window.location.href = 'Index.html';\r\n+    return;\r\n+}\r\n \r\n-    try {\r\n-        const data = await api.checkSession(); // Esta chamada está a funcionar (Status 200)\r\n+try {\r\n+    const data = await api.checkSession();\r\n+    if (data.user.role === 'SuperAdmin') {\r\n+        isAdminLoggedIn = true;\r\n+        await showAdminDashboard();\r\n+    } else {\r\n+        currentLoggedInUser = data.user;\r\n+        currentLoggedInCompany = data.company;\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n \r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n+        if (isSubscriptionActive) {\r\n+            await showMainApp();\r\n         } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            \r\n-            // A VERIFICAÇÃO PRINCIPAL ACONTECE AQUI:\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                // Se a assinatura estiver ativa, mostra a aplicação.\r\n-                await showMainApp();\r\n+            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                // Se for o dono da empresa, mostra o modal para renovar\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n             } else {\r\n-                // SE A ASSINATURA NÃO ESTIVER ATIVA:\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    // Se for o dono da empresa, mostra o modal para renovar.\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    // Se for um funcionário/gerente, mostra o modal de acesso bloqueado.\r\n-                    showAccessBlockedModal();\r\n-                }\r\n+                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                showAccessBlockedModal();\r\n             }\r\n         }\r\n-    } catch (error) {\r\n-        // Este bloco 'catch' agora só será ativado se a API realmente falhar (ex: servidor offline).\r\n-        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-        logout(); // Usamos a função de logout correta\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n     }\r\n+} catch (error) {\r\n+    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n+    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n+    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    setTimeout(() => {\r\n+        window.location.href = 'Index.html';\r\n+    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n+} finally {\r\n+    // Esconde a tela de carregamento inicial\r\n+    document.getElementById('loadingScreen').classList.add('hidden');\r\n+}\r\n \r\n \r\n // Submissão de formulários\r\n if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n"
                },
                {
                    "date": 1753372544440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2512,15 +2512,10 @@\n if (exportPdfBtn) {\r\n     exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n }\r\n \r\n-if (manualAddBtn) {\r\n-    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-}\r\n-if (xmlAddBtn) {\r\n-    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-}\r\n \r\n+\r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n \r\n"
                },
                {
                    "date": 1753373675153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -832,10 +832,10 @@\n  * e opcionalmente pré-preenchendo a data.\r\n  * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n  */\r\n async function openAddBillModal(preselectedDate = null) {\r\n+    clearBillForm();\r\n     switchAddBillMode('manual');\r\n-    clearBillForm();\r\n     showLoader();\r\n     try {\r\n         const categories = await api.getCategories();\r\n         billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n@@ -2512,10 +2512,15 @@\n if (exportPdfBtn) {\r\n     exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n }\r\n \r\n+if (manualAddBtn) {\r\n+    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+}\r\n+if (xmlAddBtn) {\r\n+    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+}\r\n \r\n-\r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n \r\n"
                },
                {
                    "date": 1753373971858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n \r\n const manualAddBtn = document.getElementById('manual-add-btn');\r\n const xmlAddBtn = document.getElementById('xml-add-btn');\r\n const manualAddForm = document.getElementById('manual-add-form');\r\n-const xmlAddForm = document.getElementById('xml-add-form');+\r\n+const xmlAddForm = document.getElementById('xml-add-form');\r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n"
                },
                {
                    "date": 1753373982802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1183,34 +1183,36 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+// Adicionar esta nova função em Scripts/main.js\r\n /**\r\n  * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n  * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n  */\r\n function switchAddBillMode(mode) {\r\n+    if (!manualAddForm || !xmlAddForm || !manualAddBtn || !xmlAddBtn) return;\r\n+\r\n     if (mode === 'manual') {\r\n         // Ativa o modo manual\r\n         manualAddForm.classList.remove('hidden');\r\n         xmlAddForm.classList.add('hidden');\r\n         // Estiliza os botões\r\n-        manualAddBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px');\r\n+        manualAddBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n         manualAddBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n         xmlAddBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-        xmlAddBtn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px');\r\n+        xmlAddBtn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n     } else if (mode === 'xml') {\r\n         // Ativa o modo XML\r\n         manualAddForm.classList.add('hidden');\r\n         xmlAddForm.classList.remove('hidden');\r\n         // Estiliza os botões\r\n-        xmlAddBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px');\r\n+        xmlAddBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n         xmlAddBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n         manualAddBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-        manualAddBtn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px');\r\n+        manualAddBtn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n     }\r\n }\r\n-\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753374005082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1183,9 +1183,8 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n-// Adicionar esta nova função em Scripts/main.js\r\n /**\r\n  * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n  * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n  */\r\n@@ -1211,8 +1210,9 @@\n         manualAddBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n         manualAddBtn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n     }\r\n }\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753457794752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,8 +156,16 @@\n const xmlAddBtn = document.getElementById('xml-add-btn');\r\n const manualAddForm = document.getElementById('manual-add-form');\r\n const xmlAddForm = document.getElementById('xml-add-form');\r\n \r\n+const csvImportBtn = document.getElementById('csv-import-btn');\r\n+const csvImportForm = document.getElementById('csv-import-form');\r\n+const csvFileInput = document.getElementById('csv-file-input');\r\n+const csvPreviewArea = document.getElementById('csv-preview-area');\r\n+const csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\n+const csvImportSummary = document.getElementById('csv-import-summary');\r\n+const importCsvBtn = document.getElementById('import-csv-btn');\r\n+\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753457815675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n let currentMonth, currentYear;\r\n let expensesPieChart = null;\r\n let expensesBarChart = null;\r\n let topExpensesChart = null;\r\n+let parsedCsvData = [];\r\n \r\n-\r\n // =================================================================================\r\n // ELEMENTOS DO DOM - Referências aos elementos HTML\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753457826337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1196,29 +1196,39 @@\n  * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n  * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n  */\r\n function switchAddBillMode(mode) {\r\n-    if (!manualAddForm || !xmlAddForm || !manualAddBtn || !xmlAddBtn) return;\r\n+    if (!manualAddForm || !xmlAddForm || !csvImportForm) return;\r\n \r\n+    // Esconde todos os painéis\r\n+    manualAddForm.classList.add('hidden');\r\n+    xmlAddForm.classList.add('hidden');\r\n+    csvImportForm.classList.add('hidden');\r\n+\r\n+    // Reseta o estilo de todos os botões\r\n+    [manualAddBtn, xmlAddBtn, csvImportBtn].forEach(btn => {\r\n+        btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+        btn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+    });\r\n+\r\n+    // Ativa o painel e o botão corretos\r\n+    let activeBtn, activeForm;\r\n     if (mode === 'manual') {\r\n-        // Ativa o modo manual\r\n-        manualAddForm.classList.remove('hidden');\r\n-        xmlAddForm.classList.add('hidden');\r\n-        // Estiliza os botões\r\n-        manualAddBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n-        manualAddBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        xmlAddBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-        xmlAddBtn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+        activeBtn = manualAddBtn;\r\n+        activeForm = manualAddForm;\r\n     } else if (mode === 'xml') {\r\n-        // Ativa o modo XML\r\n-        manualAddForm.classList.add('hidden');\r\n-        xmlAddForm.classList.remove('hidden');\r\n-        // Estiliza os botões\r\n-        xmlAddBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n-        xmlAddBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        manualAddBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-        manualAddBtn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+        activeBtn = xmlAddBtn;\r\n+        activeForm = xmlAddForm;\r\n+    } else if (mode === 'csv') {\r\n+        activeBtn = csvImportBtn;\r\n+        activeForm = csvImportForm;\r\n     }\r\n+\r\n+    if (activeBtn && activeForm) {\r\n+        activeForm.classList.remove('hidden');\r\n+        activeBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+        activeBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    }\r\n }\r\n \r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n"
                },
                {
                    "date": 1753457855131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1229,8 +1229,89 @@\n         activeBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Lida com a seleção de um ficheiro CSV, lê e pré-visualiza os dados.\r\n+ */\r\n+function handleCsvFileSelect(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) return;\r\n+\r\n+    // Usa o PapaParse para ler o ficheiro\r\n+    Papa.parse(file, {\r\n+        header: true, // Trata a primeira linha como cabeçalho\r\n+        skipEmptyLines: true,\r\n+        complete: (results) => {\r\n+            // Guarda os dados processados no estado da aplicação\r\n+            parsedCsvData = results.data;\r\n+            renderCsvPreview(parsedCsvData);\r\n+        },\r\n+        error: (err) => {\r\n+            showToast(`Erro ao ler o ficheiro CSV: ${err.message}`, 'error');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a tabela de pré-visualização com os dados lidos do CSV.\r\n+ */\r\n+function renderCsvPreview(data) {\r\n+    csvPreviewTableBody.innerHTML = ''; // Limpa a tabela\r\n+    if (data.length === 0) {\r\n+        csvPreviewArea.classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    const formatCurrency = (valueStr) => {\r\n+        const value = parseFloat(String(valueStr).replace(',', '.'));\r\n+        return isNaN(value) ? 'Inválido' : value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+    };\r\n+\r\n+    data.forEach(row => {\r\n+        const tr = `\r\n+            <tr>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${row.Data || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${row.Nome || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${row.Parcela || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700 text-right\">${formatCurrency(row.Valor)}</td>\r\n+            </tr>\r\n+        `;\r\n+        csvPreviewTableBody.insertAdjacentHTML('beforeend', tr);\r\n+    });\r\n+\r\n+    csvImportSummary.textContent = `${data.length} boletos prontos para serem importados.`;\r\n+    csvPreviewArea.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Envia os dados do CSV para a API para serem salvos na base de dados.\r\n+ */\r\n+async function handleConfirmImport() {\r\n+    if (parsedCsvData.length === 0) {\r\n+        return showToast('Não há dados para importar.', 'info');\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const response = await api.importBoletos(parsedCsvData);\r\n+        showToast(response.message, 'success');\r\n+\r\n+        // Fecha o modal e atualiza a aplicação\r\n+        addBillModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+\r\n+        // Limpa os dados da pré-visualização\r\n+        csvPreviewArea.classList.add('hidden');\r\n+        csvFileInput.value = '';\r\n+        parsedCsvData = [];\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n@@ -2539,8 +2620,18 @@\n if (xmlAddBtn) {\r\n     xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n }\r\n \r\n+if (csvImportBtn) {\r\n+    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n+}\r\n+if (csvFileInput) {\r\n+    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n+}\r\n+if (importCsvBtn) {\r\n+    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n+}\r\n+\r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n \r\n"
                },
                {
                    "date": 1753459547328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1255,26 +1255,34 @@\n /**\r\n  * Renderiza a tabela de pré-visualização com os dados lidos do CSV.\r\n  */\r\n function renderCsvPreview(data) {\r\n+    // --- VERIFICAÇÕES DE SEGURANÇA ADICIONADAS ---\r\n+    if (!csvPreviewTableBody || !csvPreviewArea || !csvImportSummary) {\r\n+        console.error(\"Elementos da pré-visualização do CSV não foram encontrados no HTML.\");\r\n+        return;\r\n+    }\r\n+\r\n     csvPreviewTableBody.innerHTML = ''; // Limpa a tabela\r\n     if (data.length === 0) {\r\n         csvPreviewArea.classList.add('hidden');\r\n         return;\r\n     }\r\n-\r\n+    \r\n     const formatCurrency = (valueStr) => {\r\n         const value = parseFloat(String(valueStr).replace(',', '.'));\r\n         return isNaN(value) ? 'Inválido' : value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n     };\r\n \r\n     data.forEach(row => {\r\n+        // Usa Object.values para ser mais robusto caso as colunas mudem de nome\r\n+        const values = Object.values(row);\r\n         const tr = `\r\n             <tr>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${row.Data || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${row.Nome || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${row.Parcela || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700 text-right\">${formatCurrency(row.Valor)}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[0] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[1] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[2] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700 text-right\">${formatCurrency(values[3])}</td>\r\n             </tr>\r\n         `;\r\n         csvPreviewTableBody.insertAdjacentHTML('beforeend', tr);\r\n     });\r\n"
                },
                {
                    "date": 1753460284462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1255,15 +1255,20 @@\n /**\r\n  * Renderiza a tabela de pré-visualização com os dados lidos do CSV.\r\n  */\r\n function renderCsvPreview(data) {\r\n-    // --- VERIFICAÇÕES DE SEGURANÇA ADICIONADAS ---\r\n+    // Verificação de segurança para garantir que 'data' é um array\r\n+    if (!Array.isArray(data)) {\r\n+        console.error(\"renderCsvPreview foi chamada com dados inválidos:\", data);\r\n+        data = []; // Assume um array vazio para não quebrar a execução\r\n+    }\r\n+\r\n     if (!csvPreviewTableBody || !csvPreviewArea || !csvImportSummary) {\r\n         console.error(\"Elementos da pré-visualização do CSV não foram encontrados no HTML.\");\r\n         return;\r\n     }\r\n \r\n-    csvPreviewTableBody.innerHTML = ''; // Limpa a tabela\r\n+    csvPreviewTableBody.innerHTML = '';\r\n     if (data.length === 0) {\r\n         csvPreviewArea.classList.add('hidden');\r\n         return;\r\n     }\r\n@@ -1273,9 +1278,8 @@\n         return isNaN(value) ? 'Inválido' : value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n     };\r\n \r\n     data.forEach(row => {\r\n-        // Usa Object.values para ser mais robusto caso as colunas mudem de nome\r\n         const values = Object.values(row);\r\n         const tr = `\r\n             <tr>\r\n                 <td class=\"px-4 py-2 border-b border-gray-700\">${values[0] || ''}</td>\r\n"
                },
                {
                    "date": 1753468631746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,10 +234,8 @@\n \r\n     for (let day = 1; day <= daysInMonth; day++) {\r\n         const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n         const dayCell = document.createElement('div');\r\n-\r\n-        // Adiciona a classe 'day-cell-droppable' para o SortableJS\r\n         dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n         dayCell.dataset.date = dateStr;\r\n \r\n         const dayHeader = document.createElement('div');\r\n@@ -249,19 +247,34 @@\n             if (e.target.closest('.bill-card-draggable')) return;\r\n             openAddBillModal(e.currentTarget.dataset.date);\r\n         });\r\n \r\n-        // Usa a lista 'boletosToRender' que foi passada para a função\r\n+        // --- INÍCIO DO CÓDIGO DE DEBUG ---\r\n+        // Vamos usar o dia 2 de Julho como nosso exemplo.\r\n+        if (day === 2) { \r\n+            console.log(`--- DEBUG PARA O DIA ${dateStr} ---`);\r\n+        }\r\n+        // --- FIM DO CÓDIGO DE DEBUG ---\r\n+\r\n         boletosToRender.forEach(bill => {\r\n             bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n+\r\n+                // --- INÍCIO DO CÓDIGO DE DEBUG ---\r\n+                // Se a parcela for do dia 2, mostraremos os dados dela no console.\r\n+                if (day === 2) {\r\n+                    console.log(`Encontrada parcela para ${dateStr}:`, {\r\n+                        nome: bill.name,\r\n+                        valor: parcel.amount,\r\n+                        parcela: parcel.number\r\n+                    });\r\n+                }\r\n+                // --- FIM DO CÓDIGO DE DEBUG ---\r\n+\r\n                 const parcelElement = document.createElement('div');\r\n-\r\n-                // Adiciona as classes e os atributos de dados para o drag-and-drop\r\n                 parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n                 parcelElement.dataset.boletoId = bill._id;\r\n                 parcelElement.dataset.parcelId = parcel._id;\r\n \r\n-                // Gera o conteúdo do card com todas as informações\r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n                     ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n                     ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n@@ -274,9 +287,8 @@\n         });\r\n         calendarDays.appendChild(dayCell);\r\n     }\r\n \r\n-    // Ativa a funcionalidade de drag-and-drop após o calendário ser desenhado\r\n     initializeDragAndDrop();\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1753469354919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,16 +216,32 @@\n \r\n \r\n /**\r\n  * Renderiza o calendário com uma lista específica de boletos.\r\n- * Por padrão, usa a lista completa de boletos do utilizador.\r\n+ * VERSÃO OTIMIZADA E CORRIGIDA\r\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n     const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n     currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n     calendarDays.innerHTML = '';\r\n \r\n+    // --- ETAPA 1: Otimização ---\r\n+    // Primeiro, vamos criar um mapa para organizar todas as parcelas por sua data de vencimento.\r\n+    // Isso é muito mais rápido do que procurar em todos os 869 boletos para cada dia do mês.\r\n+    const parcelsByDate = new Map();\r\n+    boletosToRender.forEach(bill => {\r\n+        bill.parcels.forEach(parcel => {\r\n+            const date = parcel.dueDate;\r\n+            if (!parcelsByDate.has(date)) {\r\n+                parcelsByDate.set(date, []);\r\n+            }\r\n+            // Adicionamos uma referência ao boleto pai para cada parcela, para facilitar.\r\n+            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n+        });\r\n+    });\r\n+\r\n+    // --- ETAPA 2: Renderização ---\r\n     const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n     const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n \r\n     for (let i = 0; i < firstDayOfMonth; i++) {\r\n@@ -247,30 +263,16 @@\n             if (e.target.closest('.bill-card-draggable')) return;\r\n             openAddBillModal(e.currentTarget.dataset.date);\r\n         });\r\n \r\n-        // --- INÍCIO DO CÓDIGO DE DEBUG ---\r\n-        // Vamos usar o dia 2 de Julho como nosso exemplo.\r\n-        if (day === 2) { \r\n-            console.log(`--- DEBUG PARA O DIA ${dateStr} ---`);\r\n-        }\r\n-        // --- FIM DO CÓDIGO DE DEBUG ---\r\n+        // --- LÓGICA CORRIGIDA E SIMPLIFICADA ---\r\n+        // Agora, simplesmente verificamos se o nosso mapa tem parcelas para a data atual.\r\n+        if (parcelsByDate.has(dateStr)) {\r\n+            // Se tiver, iteramos apenas sobre as parcelas daquele dia.\r\n+            parcelsByDate.get(dateStr).forEach(parcel => {\r\n+                const bill = parcel.parentBill; // Pegamos a referência do boleto pai\r\n+                const parcelElement = document.createElement('div');\r\n \r\n-        boletosToRender.forEach(bill => {\r\n-            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n-\r\n-                // --- INÍCIO DO CÓDIGO DE DEBUG ---\r\n-                // Se a parcela for do dia 2, mostraremos os dados dela no console.\r\n-                if (day === 2) {\r\n-                    console.log(`Encontrada parcela para ${dateStr}:`, {\r\n-                        nome: bill.name,\r\n-                        valor: parcel.amount,\r\n-                        parcela: parcel.number\r\n-                    });\r\n-                }\r\n-                // --- FIM DO CÓDIGO DE DEBUG ---\r\n-\r\n-                const parcelElement = document.createElement('div');\r\n                 parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n                 parcelElement.dataset.boletoId = bill._id;\r\n                 parcelElement.dataset.parcelId = parcel._id;\r\n \r\n@@ -283,15 +285,15 @@\n \r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n                 dayCell.appendChild(parcelElement);\r\n             });\r\n-        });\r\n+        }\r\n+\r\n         calendarDays.appendChild(dayCell);\r\n     }\r\n \r\n     initializeDragAndDrop();\r\n }\r\n-\r\n /**\r\n  * Abre o modal para ver/editar os detalhes de uma parcela.\r\n  * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n  * @param {object} parcel - O objeto da parcela específica.\r\n"
                },
                {
                    "date": 1753470736620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n let expensesPieChart = null;\r\n let expensesBarChart = null;\r\n let topExpensesChart = null;\r\n let parsedCsvData = [];\r\n+let selectedParcels = new Set();\r\n \r\n // =================================================================================\r\n // ELEMENTOS DO DOM - Referências aos elementos HTML\r\n // =================================================================================\r\n@@ -164,8 +165,11 @@\n const csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\n const csvImportSummary = document.getElementById('csv-import-summary');\r\n const importCsvBtn = document.getElementById('import-csv-btn');\r\n \r\n+const markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\n+const selectedCountSpan = document.getElementById('selectedCount');\r\n+\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n@@ -276,12 +280,17 @@\n                 parcelElement.dataset.boletoId = bill._id;\r\n                 parcelElement.dataset.parcelId = parcel._id;\r\n \r\n                 parcelElement.innerHTML = `\r\n-                    <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                    ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                    ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n-                    <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n+                    <div class=\"flex items-start space-x-2\">\r\n+                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1\" data-parcel-id=\"${parcel._id}\" ${selectedParcels.has(parcel._id) ? 'checked' : ''}>\r\n+                        <div class=\"flex-1\">\r\n+                            <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n+                            ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                            ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n+                            <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n+                        </div>\r\n+                    </div>\r\n                 `;\r\n \r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n                 dayCell.appendChild(parcelElement);\r\n@@ -1336,8 +1345,51 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Atualiza a visibilidade e a contagem do botão de pagamento em massa.\r\n+ */\r\n+function updateMassPaymentButton() {\r\n+    const count = selectedParcels.size;\r\n+    selectedCountSpan.textContent = count;\r\n+    markSelectedAsPaidBtn.classList.toggle('hidden', count === 0);\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Pagar Selecionados\".\r\n+ */\r\n+async function handleMarkSelectedAsPaid() {\r\n+    if (selectedParcels.size === 0) {\r\n+        return showToast('Nenhuma parcela selecionada.', 'info');\r\n+    }\r\n+\r\n+    if (!confirm(`Tem a certeza que deseja marcar ${selectedParcels.size} parcela(s) como paga(s)?`)) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        // Converte o Set para um Array para enviar à API\r\n+        const parcelIds = Array.from(selectedParcels);\r\n+\r\n+        // Chama a nova função da API que criamos\r\n+        const response = await api.markParcelsAsPaid(parcelIds);\r\n+\r\n+        showToast(response.message, 'success');\r\n+\r\n+        // Limpa a seleção e atualiza a interface\r\n+        selectedParcels.clear();\r\n+        updateMassPaymentButton();\r\n+        await updateBillsOrganizer(); // Recarrega o calendário\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753470799288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,8 +293,17 @@\n                 `;\r\n \r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n                 dayCell.appendChild(parcelElement);\r\n+                parcelElement.querySelector('.mass-payment-checkbox').addEventListener('change', (e) => {\r\n+                    const parcelId = e.target.dataset.parcelId;\r\n+                    if (e.target.checked) {\r\n+                        selectedParcels.add(parcelId);\r\n+                    } else {\r\n+                        selectedParcels.delete(parcelId);\r\n+                    }\r\n+                    updateMassPaymentButton();\r\n+                });\r\n             });\r\n         }\r\n \r\n         calendarDays.appendChild(dayCell);\r\n"
                },
                {
                    "date": 1753470817023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2716,8 +2716,11 @@\n }\r\n if (importCsvBtn) {\r\n     importCsvBtn.addEventListener('click', handleConfirmImport);\r\n }\r\n+if (markSelectedAsPaidBtn) {\r\n+    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n+}\r\n \r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n"
                },
                {
                    "date": 1753471167066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,8 +225,9 @@\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n     const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n     currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n     calendarDays.innerHTML = '';\r\n \r\n     // --- ETAPA 1: Otimização ---\r\n@@ -293,9 +294,9 @@\n                 `;\r\n \r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n                 dayCell.appendChild(parcelElement);\r\n-                parcelElement.querySelector('.mass-payment-checkbox').addEventListener('change', (e) => {\r\n+                checkbox.addEventListener('change', (e) => {\r\n                     const parcelId = e.target.dataset.parcelId;\r\n                     if (e.target.checked) {\r\n                         selectedParcels.add(parcelId);\r\n                     } else {\r\n@@ -2719,8 +2720,11 @@\n }\r\n if (markSelectedAsPaidBtn) {\r\n     markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n }\r\n+checkbox.addEventListener('click', (e) => {\r\n+    e.stopPropagation();\r\n+});\r\n \r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n"
                },
                {
                    "date": 1753471277290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,40 +220,39 @@\n \r\n \r\n /**\r\n  * Renderiza o calendário com uma lista específica de boletos.\r\n- * VERSÃO OTIMIZADA E CORRIGIDA\r\n+ * VERSÃO FINAL - Otimizada, com checkboxes e correção de clique.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n     const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n     currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n     calendarDays.innerHTML = '';\r\n \r\n-    // --- ETAPA 1: Otimização ---\r\n-    // Primeiro, vamos criar um mapa para organizar todas as parcelas por sua data de vencimento.\r\n-    // Isso é muito mais rápido do que procurar em todos os 869 boletos para cada dia do mês.\r\n+    // ETAPA 1: Otimização - Agrupa todas as parcelas por data de vencimento.\r\n     const parcelsByDate = new Map();\r\n     boletosToRender.forEach(bill => {\r\n         bill.parcels.forEach(parcel => {\r\n             const date = parcel.dueDate;\r\n             if (!parcelsByDate.has(date)) {\r\n                 parcelsByDate.set(date, []);\r\n             }\r\n-            // Adicionamos uma referência ao boleto pai para cada parcela, para facilitar.\r\n+            // Adiciona uma referência ao boleto pai para cada parcela, para facilitar.\r\n             parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n         });\r\n     });\r\n \r\n-    // --- ETAPA 2: Renderização ---\r\n+    // ETAPA 2: Renderização do Calendário\r\n     const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n     const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n \r\n+    // Cria as células vazias do início do mês\r\n     for (let i = 0; i < firstDayOfMonth; i++) {\r\n         calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n     }\r\n \r\n+    // Cria as células para cada dia do mês\r\n     for (let day = 1; day <= daysInMonth; day++) {\r\n         const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n         const dayCell = document.createElement('div');\r\n         dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n@@ -263,25 +262,26 @@\n         dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n         dayHeader.textContent = day;\r\n         dayCell.appendChild(dayHeader);\r\n \r\n+        // Adiciona evento de clique na célula para criar novos boletos\r\n         dayCell.addEventListener('click', (e) => {\r\n             if (e.target.closest('.bill-card-draggable')) return;\r\n             openAddBillModal(e.currentTarget.dataset.date);\r\n         });\r\n \r\n-        // --- LÓGICA CORRIGIDA E SIMPLIFICADA ---\r\n-        // Agora, simplesmente verificamos se o nosso mapa tem parcelas para a data atual.\r\n+        // LÓGICA CORRIGIDA: Verifica se existem parcelas para este dia no mapa\r\n         if (parcelsByDate.has(dateStr)) {\r\n-            // Se tiver, iteramos apenas sobre as parcelas daquele dia.\r\n+            // Se existirem, itera apenas sobre as parcelas daquele dia\r\n             parcelsByDate.get(dateStr).forEach(parcel => {\r\n-                const bill = parcel.parentBill; // Pegamos a referência do boleto pai\r\n+                const bill = parcel.parentBill; // Pega a referência do boleto pai\r\n                 const parcelElement = document.createElement('div');\r\n-\r\n+                \r\n                 parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n                 parcelElement.dataset.boletoId = bill._id;\r\n                 parcelElement.dataset.parcelId = parcel._id;\r\n \r\n+                // Cria o HTML do card, já com o checkbox\r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"flex items-start space-x-2\">\r\n                         <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1\" data-parcel-id=\"${parcel._id}\" ${selectedParcels.has(parcel._id) ? 'checked' : ''}>\r\n                         <div class=\"flex-1\">\r\n@@ -292,10 +292,15 @@\n                         </div>\r\n                     </div>\r\n                 `;\r\n \r\n+                // Adiciona o evento de clique no card para abrir o modal\r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                dayCell.appendChild(parcelElement);\r\n+                \r\n+                // --- CORREÇÃO DO CLIQUE NO CHECKBOX ---\r\n+                const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n+\r\n+                // Listener para a lógica de seleção\r\n                 checkbox.addEventListener('change', (e) => {\r\n                     const parcelId = e.target.dataset.parcelId;\r\n                     if (e.target.checked) {\r\n                         selectedParcels.add(parcelId);\r\n@@ -303,16 +308,25 @@\n                         selectedParcels.delete(parcelId);\r\n                     }\r\n                     updateMassPaymentButton();\r\n                 });\r\n+\r\n+                // Listener que impede o clique de \"borbulhar\" para o card pai\r\n+                checkbox.addEventListener('click', (e) => {\r\n+                    e.stopPropagation();\r\n+                });\r\n+                // --- FIM DA CORREÇÃO ---\r\n+                \r\n+                dayCell.appendChild(parcelElement);\r\n             });\r\n         }\r\n-\r\n+        \r\n         calendarDays.appendChild(dayCell);\r\n     }\r\n \r\n     initializeDragAndDrop();\r\n }\r\n+\r\n /**\r\n  * Abre o modal para ver/editar os detalhes de uma parcela.\r\n  * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n  * @param {object} parcel - O objeto da parcela específica.\r\n@@ -2720,11 +2734,8 @@\n }\r\n if (markSelectedAsPaidBtn) {\r\n     markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n }\r\n-checkbox.addEventListener('click', (e) => {\r\n-    e.stopPropagation();\r\n-});\r\n \r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n"
                },
                {
                    "date": 1753471524897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,8 +167,11 @@\n const importCsvBtn = document.getElementById('import-csv-btn');\r\n \r\n const markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\n const selectedCountSpan = document.getElementById('selectedCount');\r\n+const massActionsContainer = document.getElementById('massActionsContainer');\r\n+const selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\n+const deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n@@ -1375,9 +1378,9 @@\n  */\r\n function updateMassPaymentButton() {\r\n     const count = selectedParcels.size;\r\n     selectedCountSpan.textContent = count;\r\n-    markSelectedAsPaidBtn.classList.toggle('hidden', count === 0);\r\n+    massActionsContainer.classList.toggle('hidden', count === 0);\r\n }\r\n \r\n /**\r\n  * Lida com o clique no botão \"Pagar Selecionados\".\r\n@@ -1412,8 +1415,38 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Seleciona todos os checkboxes de boletos visíveis no calendário.\r\n+ */\r\n+function handleSelectAllVisible() {\r\n+    // Pega todos os checkboxes que estão atualmente no calendário\r\n+    document.querySelectorAll('.mass-payment-checkbox').forEach(checkbox => {\r\n+        if (!checkbox.checked) {\r\n+            checkbox.checked = true;\r\n+            // Adiciona o ID da parcela ao nosso Set de seleção\r\n+            selectedParcels.add(checkbox.dataset.parcelId);\r\n+        }\r\n+    });\r\n+    // Atualiza o botão para refletir a nova contagem\r\n+    updateMassPaymentButton();\r\n+}\r\n+\r\n+/**\r\n+ * Desmarca todos os checkboxes de boletos selecionados.\r\n+ */\r\n+function handleDeselectAll() {\r\n+    // Limpa o nosso Set de seleção\r\n+    selectedParcels.clear();\r\n+    // Desmarca todos os checkboxes que estão no calendário\r\n+    document.querySelectorAll('.mass-payment-checkbox:checked').forEach(checkbox => {\r\n+        checkbox.checked = false;\r\n+    });\r\n+    // Atualiza o botão (que será escondido, pois a contagem é 0)\r\n+    updateMassPaymentButton();\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n@@ -2734,9 +2767,16 @@\n }\r\n if (markSelectedAsPaidBtn) {\r\n     markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n }\r\n+if (selectAllVisibleBtn) {\r\n+    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n+}\r\n \r\n+if (deselectAllVisibleBtn) {\r\n+    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n+}\r\n+\r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n \r\n"
                },
                {
                    "date": 1753472003614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,15 +223,17 @@\n \r\n \r\n /**\r\n  * Renderiza o calendário com uma lista específica de boletos.\r\n- * VERSÃO FINAL - Otimizada, com checkboxes e correção de clique.\r\n+ * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n     const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n     currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n     calendarDays.innerHTML = '';\r\n+    const today = new Date(); // Variável para verificar boletos vencidos\r\n+    today.setHours(0, 0, 0, 0); // Zera a hora para uma comparação precisa do dia\r\n \r\n     // ETAPA 1: Otimização - Agrupa todas as parcelas por data de vencimento.\r\n     const parcelsByDate = new Map();\r\n     boletosToRender.forEach(bill => {\r\n@@ -271,39 +273,58 @@\n             if (e.target.closest('.bill-card-draggable')) return;\r\n             openAddBillModal(e.currentTarget.dataset.date);\r\n         });\r\n \r\n-        // LÓGICA CORRIGIDA: Verifica se existem parcelas para este dia no mapa\r\n+        // Verifica se existem parcelas para este dia no mapa\r\n         if (parcelsByDate.has(dateStr)) {\r\n             // Se existirem, itera apenas sobre as parcelas daquele dia\r\n             parcelsByDate.get(dateStr).forEach(parcel => {\r\n                 const bill = parcel.parentBill; // Pega a referência do boleto pai\r\n                 const parcelElement = document.createElement('div');\r\n                 \r\n-                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${parcel.paid ? 'bg-green-700 text-green-100' : 'bg-indigo-700 text-indigo-100'}`;\r\n+                // Lógica de Status, Cores e Ícones\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                const isOverdue = !parcel.paid && dueDate < today;\r\n+                let statusClass = 'bg-indigo-700 text-indigo-100'; // Padrão: Pendente\r\n+                let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n+            \r\n+                if (parcel.paid) {\r\n+                    statusClass = 'bg-green-700 text-green-100'; // Pago\r\n+                    statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n+                } else if (isOverdue) {\r\n+                    statusClass = 'bg-red-700 text-red-100'; // Vencido\r\n+                    statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n+                }\r\n+            \r\n+                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n                 parcelElement.dataset.boletoId = bill._id;\r\n                 parcelElement.dataset.parcelId = parcel._id;\r\n-\r\n-                // Cria o HTML do card, já com o checkbox\r\n+    \r\n+                // HTML do card com layout aprimorado\r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"flex items-start space-x-2\">\r\n-                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1\" data-parcel-id=\"${parcel._id}\" ${selectedParcels.has(parcel._id) ? 'checked' : ''}>\r\n-                        <div class=\"flex-1\">\r\n-                            <div class=\"font-medium truncate\">${bill.name} (${parcel.number}ª)</div>\r\n-                            ${bill.nfeNumber ? `<div class=\"text-xs text-indigo-200 truncate\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                            ${bill.category ? `<div class=\"text-xs text-green-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1\"></i>${bill.category.name}</div>` : ''}\r\n-                            <div class=\"font-semibold mt-1\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>\r\n+                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedParcels.has(parcel._id) ? 'checked' : ''}>\r\n+                        <div class=\"flex-1 min-w-0\">\r\n+                            <div class=\"flex justify-between items-center\">\r\n+                                <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n+                                    ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n+                                </span>\r\n+                                <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n+                                    ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n+                                </span>\r\n+                            </div>\r\n+                            \r\n+                            ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                            ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n                         </div>\r\n                     </div>\r\n                 `;\r\n-\r\n-                // Adiciona o evento de clique no card para abrir o modal\r\n+    \r\n+                // Adiciona evento de clique no card para abrir o modal\r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n                 \r\n-                // --- CORREÇÃO DO CLIQUE NO CHECKBOX ---\r\n+                // Lógica para o checkbox\r\n                 const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n-\r\n-                // Listener para a lógica de seleção\r\n                 checkbox.addEventListener('change', (e) => {\r\n                     const parcelId = e.target.dataset.parcelId;\r\n                     if (e.target.checked) {\r\n                         selectedParcels.add(parcelId);\r\n@@ -311,14 +332,11 @@\n                         selectedParcels.delete(parcelId);\r\n                     }\r\n                     updateMassPaymentButton();\r\n                 });\r\n-\r\n-                // Listener que impede o clique de \"borbulhar\" para o card pai\r\n                 checkbox.addEventListener('click', (e) => {\r\n-                    e.stopPropagation();\r\n+                    e.stopPropagation(); // Impede o clique de abrir o modal\r\n                 });\r\n-                // --- FIM DA CORREÇÃO ---\r\n                 \r\n                 dayCell.appendChild(parcelElement);\r\n             });\r\n         }\r\n"
                },
                {
                    "date": 1753472951177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2481,19 +2481,18 @@\n // Navegação do Calendário\r\n prevMonthBtn.addEventListener('click', () => {\r\n     currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n     if (currentMonth === 11) currentYear--;\r\n-    renderCalendar();\r\n-    updateMonthlySummary();\r\n+    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n+    applyFiltersAndSearch(); \r\n });\r\n \r\n nextMonthBtn.addEventListener('click', () => {\r\n     currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n     if (currentMonth === 0) currentYear++;\r\n-    renderCalendar();\r\n-    updateMonthlySummary();\r\n+    // A mesma mudança aqui\r\n+    applyFiltersAndSearch(); \r\n });\r\n-\r\n if (addCompanyCnpjInput) {\r\n     IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n }\r\n \r\n"
                },
                {
                    "date": 1753475891623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n let expensesBarChart = null;\r\n let topExpensesChart = null;\r\n let parsedCsvData = [];\r\n let selectedParcels = new Set();\r\n+let dashboardStatusFilter = 'all';\r\n \r\n // =================================================================================\r\n // ELEMENTOS DO DOM - Referências aos elementos HTML\r\n // =================================================================================\r\n@@ -151,8 +152,9 @@\n const upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\n const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n const exportCsvBtn = document.getElementById('export-csv-btn');\r\n const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n+const dashboardFilterButtons = document.querySelectorAll('.dashboard-filter-btn');\r\n \r\n const manualAddBtn = document.getElementById('manual-add-btn');\r\n const xmlAddBtn = document.getElementById('xml-add-btn');\r\n const manualAddForm = document.getElementById('manual-add-form');\r\n@@ -1001,21 +1003,22 @@\n async function renderDashboard() {\r\n     showLoader();\r\n     try {\r\n         const dateRange = getDateRangeFromPreset();\r\n-        \r\n+\r\n+        // ATUALIZADO: Passa o 'dashboardStatusFilter' para as chamadas da API\r\n         const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n-            api.getExpensesByCategory(dateRange),\r\n-            api.getMonthlySummary(dateRange),\r\n+            api.getExpensesByCategory(dateRange, dashboardStatusFilter),\r\n+            api.getMonthlySummary(dateRange, dashboardStatusFilter),\r\n             api.getKpiSummary(dateRange),\r\n             api.getUpcomingPayments()\r\n         ]);\r\n-        \r\n+\r\n         updateKpiCards(kpiData);\r\n         renderPieChart(pieData);\r\n         renderBarChart(barData);\r\n         renderUpcomingPayments(upcomingData);\r\n-        renderTopExpensesChart(pieData); // <-- ADICIONE ESTA LINHA\r\n+        renderTopExpensesChart(pieData);\r\n \r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n@@ -2791,8 +2794,22 @@\n \r\n if (deselectAllVisibleBtn) {\r\n     deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n }\r\n+if (dashboardFilterButtons) {\r\n+    dashboardFilterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões do dashboard\r\n+            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Atualiza a variável de estado com o novo filtro\r\n+            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n+            // Renderiza o dashboard novamente com os dados filtrados\r\n+            renderDashboard();\r\n+        });\r\n+    });\r\n+}\r\n \r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n"
                },
                {
                    "date": 1753477089268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n let topExpensesChart = null;\r\n let parsedCsvData = [];\r\n let selectedParcels = new Set();\r\n let dashboardStatusFilter = 'all';\r\n+let selectedItems = new Map();\r\n \r\n // =================================================================================\r\n // ELEMENTOS DO DOM - Referências aos elementos HTML\r\n // =================================================================================\r\n@@ -173,8 +174,14 @@\n const massActionsContainer = document.getElementById('massActionsContainer');\r\n const selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\n const deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n \r\n+const changeCategoryBtn = document.getElementById('changeCategoryBtn');\r\n+const categoryBatchModal = document.getElementById('categoryBatchModal');\r\n+const batchCategorySelect = document.getElementById('batchCategorySelect');\r\n+const cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\n+const confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n+\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753477236603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n     \r\n                 // HTML do card com layout aprimorado\r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"flex items-start space-x-2\">\r\n-                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedParcels.has(parcel._id) ? 'checked' : ''}>\r\n+                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n                         <div class=\"flex-1 min-w-0\">\r\n                             <div class=\"flex justify-between items-center\">\r\n                                 <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n                                     ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n@@ -334,12 +334,13 @@\n                 // Lógica para o checkbox\r\n                 const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n                 checkbox.addEventListener('change', (e) => {\r\n                     const parcelId = e.target.dataset.parcelId;\r\n+                    const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n                     if (e.target.checked) {\r\n-                        selectedParcels.add(parcelId);\r\n+                        selectedItems.set(parcelId, boletoId);\r\n                     } else {\r\n-                        selectedParcels.delete(parcelId);\r\n+                        selectedItems.delete(parcelId);\r\n                     }\r\n                     updateMassPaymentButton();\r\n                 });\r\n                 checkbox.addEventListener('click', (e) => {\r\n@@ -1404,37 +1405,37 @@\n /**\r\n  * Atualiza a visibilidade e a contagem do botão de pagamento em massa.\r\n  */\r\n function updateMassPaymentButton() {\r\n-    const count = selectedParcels.size;\r\n+    const count = selectedItems.size;\r\n     selectedCountSpan.textContent = count;\r\n     massActionsContainer.classList.toggle('hidden', count === 0);\r\n }\r\n \r\n /**\r\n  * Lida com o clique no botão \"Pagar Selecionados\".\r\n  */\r\n async function handleMarkSelectedAsPaid() {\r\n-    if (selectedParcels.size === 0) {\r\n+    if (selectedItems.size === 0) {\r\n         return showToast('Nenhuma parcela selecionada.', 'info');\r\n     }\r\n \r\n-    if (!confirm(`Tem a certeza que deseja marcar ${selectedParcels.size} parcela(s) como paga(s)?`)) {\r\n+    if (!confirm(`Tem a certeza que deseja marcar ${selectedItems.size} parcela(s) como paga(s)?`)) {\r\n         return;\r\n     }\r\n \r\n     showLoader();\r\n     try {\r\n         // Converte o Set para um Array para enviar à API\r\n-        const parcelIds = Array.from(selectedParcels);\r\n+        const parcelIds = Array.from(selectedItems);\r\n \r\n         // Chama a nova função da API que criamos\r\n         const response = await api.markParcelsAsPaid(parcelIds);\r\n \r\n         showToast(response.message, 'success');\r\n \r\n         // Limpa a seleção e atualiza a interface\r\n-        selectedParcels.clear();\r\n+        selectedItems.clear();\r\n         updateMassPaymentButton();\r\n         await updateBillsOrganizer(); // Recarrega o calendário\r\n \r\n     } catch (error) {\r\n@@ -1452,9 +1453,9 @@\n     document.querySelectorAll('.mass-payment-checkbox').forEach(checkbox => {\r\n         if (!checkbox.checked) {\r\n             checkbox.checked = true;\r\n             // Adiciona o ID da parcela ao nosso Set de seleção\r\n-            selectedParcels.add(checkbox.dataset.parcelId);\r\n+            selectedItems.add(checkbox.dataset.parcelId);\r\n         }\r\n     });\r\n     // Atualiza o botão para refletir a nova contagem\r\n     updateMassPaymentButton();\r\n@@ -1464,9 +1465,9 @@\n  * Desmarca todos os checkboxes de boletos selecionados.\r\n  */\r\n function handleDeselectAll() {\r\n     // Limpa o nosso Set de seleção\r\n-    selectedParcels.clear();\r\n+    selectedItems.clear();\r\n     // Desmarca todos os checkboxes que estão no calendário\r\n     document.querySelectorAll('.mass-payment-checkbox:checked').forEach(checkbox => {\r\n         checkbox.checked = false;\r\n     });\r\n@@ -2815,9 +2816,53 @@\n             renderDashboard();\r\n         });\r\n     });\r\n }\r\n+// Abre o modal de alteração de categoria\r\n+if (changeCategoryBtn) {\r\n+    changeCategoryBtn.addEventListener('click', async () => {\r\n+        showLoader();\r\n+        // Popula o dropdown do modal com as categorias existentes\r\n+        await populateCategorySelect(batchCategorySelect);\r\n+        hideLoader();\r\n+        categoryBatchModal.classList.remove('hidden');\r\n+    });\r\n+}\r\n \r\n+// Botão de cancelar no modal\r\n+if (cancelCategoryBatchBtn) {\r\n+    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n+        categoryBatchModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de confirmar a alteração\r\n+if (confirmCategoryBatchBtn) {\r\n+    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n+        const categoryId = batchCategorySelect.value;\r\n+        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n+        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n+\r\n+        if (boletoIds.length === 0) {\r\n+            return showToast('Nenhum item selecionado.', 'info');\r\n+        }\r\n+\r\n+        showLoader();\r\n+        try {\r\n+            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n+            showToast(response.message, 'success');\r\n+            selectedItems.clear();\r\n+            updateMassPaymentButton();\r\n+            await updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+            categoryBatchModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n \r\n"
                },
                {
                    "date": 1753478188808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1450,12 +1450,22 @@\n  */\r\n function handleSelectAllVisible() {\r\n     // Pega todos os checkboxes que estão atualmente no calendário\r\n     document.querySelectorAll('.mass-payment-checkbox').forEach(checkbox => {\r\n+        // Marca apenas os que ainda não estão marcados\r\n         if (!checkbox.checked) {\r\n             checkbox.checked = true;\r\n-            // Adiciona o ID da parcela ao nosso Set de seleção\r\n-            selectedItems.add(checkbox.dataset.parcelId);\r\n+\r\n+            // --- LÓGICA CORRIGIDA ---\r\n+            const parcelId = checkbox.dataset.parcelId;\r\n+            // Pega o boletoId do elemento pai mais próximo\r\n+            const boletoId = checkbox.closest('.bill-card-draggable').dataset.boletoId;\r\n+\r\n+            // Garante que temos os dois IDs antes de adicionar ao mapa\r\n+            if (parcelId && boletoId) {\r\n+                // Usa o método .set(key, value), que é o correto para um Map\r\n+                selectedItems.set(parcelId, boletoId);\r\n+            }\r\n         }\r\n     });\r\n     // Atualiza o botão para refletir a nova contagem\r\n     updateMassPaymentButton();\r\n"
                },
                {
                    "date": 1753538658946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1567,23 +1567,31 @@\n         button.addEventListener('click', async (e) => {\r\n             const companyId = e.target.dataset.companyId;\r\n             showLoader();\r\n             try {\r\n-                const { users } = await api.getCompanyDetails(companyId);\r\n-                if (users.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                // CORREÇÃO: Capturamos a nova lista 'masterUsers'\r\n+                const { users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+\r\n+                // CORREÇÃO: Verificamos se existem usuários na lista do banco Mestre\r\n+                if (!masterUsers || masterUsers.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários (no registro mestre) para representar.', 'info');\r\n                 }\r\n-                const userIdToImpersonate = users[0]._id;\r\n+\r\n+                // CORREÇÃO: Usamos o ID do primeiro usuário da lista do banco Mestre\r\n+                const userIdToImpersonate = masterUsers[0]._id; \r\n+\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n+                // O resto da lógica continua igual...\r\n                 localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n                 localStorage.setItem('authToken', data.token);\r\n \r\n                 currentLoggedInCompany = data.company;\r\n                 currentLoggedInUser = data.user;\r\n                 loggedInViaAdmin = true;\r\n \r\n                 await showMainApp();\r\n+\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n"
                },
                {
                    "date": 1753544472008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1424,12 +1424,13 @@\n     }\r\n \r\n     showLoader();\r\n     try {\r\n-        // Converte o Set para um Array para enviar à API\r\n-        const parcelIds = Array.from(selectedItems);\r\n+        // CORREÇÃO: Garantimos que estamos pegando as chaves (parcelId) do nosso Map\r\n+        // e convertendo para um array.\r\n+        const parcelIds = Array.from(selectedItems.keys());\r\n \r\n-        // Chama a nova função da API que criamos\r\n+        // Chama a função da API com o array de IDs correto.\r\n         const response = await api.markParcelsAsPaid(parcelIds);\r\n \r\n         showToast(response.message, 'success');\r\n \r\n"
                },
                {
                    "date": 1753544839115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -601,32 +601,29 @@\n     e.preventDefault();\r\n \r\n     const username = document.getElementById('addUsernameInput').value;\r\n     const password = document.getElementById('addUserPasswordInput').value;\r\n-    const confirmPassword = document.getElementById('addUserConfirmPasswordInput').value;\r\n+    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n+    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n+\r\n     const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n \r\n-    if (password !== confirmPassword) {\r\n-        return showToast(\"As senhas não coincidem.\", \"error\");\r\n-    }\r\n-    // A verificação agora funciona para os dois casos\r\n+    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n     if (!companyId) {\r\n         return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n     }\r\n \r\n     showLoader();\r\n     try {\r\n-        const data = await api.registerUser(username, password, companyId);\r\n+        // Passa os novos dados para a função da API\r\n+        const data = await api.registerUser(username, password, email, role, companyId);\r\n         showToast(data.message, 'success');\r\n         closeAddUserModal();\r\n \r\n-        // Atualiza o modal de detalhes para mostrar o novo utilizador\r\n-        // Verificamos qual modal precisa de ser atualizado (o do Admin ou o do Proprietário)\r\n         if (isAdminLoggedIn) {\r\n             const updatedData = await api.getCompanyDetails(companyId);\r\n             openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n         } else {\r\n-            // Se for o proprietário, atualizamos o modal de \"Gerir Utilizadores\"\r\n             await openManageUsersModal();\r\n         }\r\n \r\n     } catch (error) {\r\n@@ -1424,10 +1421,8 @@\n     }\r\n \r\n     showLoader();\r\n     try {\r\n-        // CORREÇÃO: Garantimos que estamos pegando as chaves (parcelId) do nosso Map\r\n-        // e convertendo para um array.\r\n         const parcelIds = Array.from(selectedItems.keys());\r\n \r\n         // Chama a função da API com o array de IDs correto.\r\n         const response = await api.markParcelsAsPaid(parcelIds);\r\n"
                },
                {
                    "date": 1753545794175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1831,30 +1831,31 @@\n  */\r\n async function openManageUsersModal() {\r\n     showLoader();\r\n     try {\r\n-        const { users } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+        // CORREÇÃO: Buscamos os detalhes da empresa, que agora incluem 'users' (do tenant)\r\n+        // e 'masterUsers' (do banco mestre).\r\n+        const { users, masterUsers } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n \r\n         const companyUsersList = document.getElementById('companyUsersList');\r\n         if (!companyUsersList) return;\r\n \r\n-        companyUsersList.innerHTML = ''; // Limpa a lista anterior\r\n+        companyUsersList.innerHTML = ''; \r\n \r\n-        // Define os cargos que o Proprietário pode atribuir.\r\n         const assignableRoles = ['Gerente', 'Funcionário'];\r\n \r\n-        if (users && users.length > 0) {\r\n-            users.forEach(user => {\r\n+        // Usamos a lista de 'masterUsers' para construir o modal, pois ela tem os IDs corretos.\r\n+        if (masterUsers && masterUsers.length > 0) {\r\n+            masterUsers.forEach(user => {\r\n                 const isOwner = user.role === 'Proprietário';\r\n \r\n-                // Cria as opções do dropdown para Gerente e Funcionário\r\n                 const roleOptions = assignableRoles.map(role =>\r\n                     `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n                 ).join('');\r\n \r\n-                // Monta o HTML do dropdown ou apenas o texto para o Proprietário\r\n                 const roleHtml = isOwner\r\n                     ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    // CORREÇÃO: O data-user-id agora usa o ID do masterUser\r\n                     : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n \r\n                 companyUsersList.insertAdjacentHTML('beforeend', `\r\n                     <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n@@ -1867,30 +1868,30 @@\n                 `);\r\n             });\r\n         }\r\n \r\n-        // Adiciona o evento de clique aos botões de remover\r\n+        // Adiciona evento de clique para remover (precisará de ajuste futuro se necessário)\r\n         document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                // ... (a lógica de remover continua a mesma de antes)\r\n-            });\r\n+            // ...\r\n         });\r\n \r\n+        // Adiciona evento para alterar o cargo (agora com o ID correto)\r\n         document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n             select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n+                const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n                 const newRole = e.target.value;\r\n                 const companyId = currentLoggedInCompany._id;\r\n \r\n                 if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    const originalRole = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role;\r\n-                    e.target.value = originalRole; // Reverte a seleção visual\r\n+                    // Lógica para reverter a seleção visual\r\n+                    const originalUser = (await api.getCompanyDetails(companyId)).masterUsers.find(u => u._id === userId);\r\n+                    if(originalUser) e.target.value = originalUser.role;\r\n                     return;\r\n-\r\n                 }\r\n \r\n                 showLoader();\r\n                 try {\r\n+                    // A chamada à API agora envia o ID correto\r\n                     await api.updateUserRole(companyId, userId, newRole);\r\n                     showToast('Cargo do utilizador atualizado com sucesso!');\r\n                 } catch (error) {\r\n                     showToast(error.message, 'error');\r\n"
                },
                {
                    "date": 1753564846363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1602,8 +1602,11 @@\n     const categoryId = billCategorySelect.value;\r\n     const dueDate = document.getElementById('dueDate').value;\r\n     const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n     const totalAmount = parseFloat(totalAmountValue);\r\n+    console.log(\"Valor bruto do input:\", document.getElementById('totalAmount').value);\r\n+    console.log(\"totalAmountValue (após replace):\", totalAmountValue);\r\n+    console.log(\"totalAmount (após parseFloat):\", totalAmount);\r\n     const installments = parseInt(document.getElementById('installments').value);\r\n     const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n     const description = document.getElementById('description').value;\r\n     const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n"
                },
                {
                    "date": 1753564909782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1602,8 +1602,9 @@\n     const categoryId = billCategorySelect.value;\r\n     const dueDate = document.getElementById('dueDate').value;\r\n     const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n     const totalAmount = parseFloat(totalAmountValue);\r\n+    const cleanedAmountString = totalAmountInput.replace(/[^\\d.,]/g, '').replace(',', '.');\r\n     console.log(\"Valor bruto do input:\", document.getElementById('totalAmount').value);\r\n     console.log(\"totalAmountValue (após replace):\", totalAmountValue);\r\n     console.log(\"totalAmount (após parseFloat):\", totalAmount);\r\n     const installments = parseInt(document.getElementById('installments').value);\r\n"
                },
                {
                    "date": 1753564944259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1602,9 +1602,8 @@\n     const categoryId = billCategorySelect.value;\r\n     const dueDate = document.getElementById('dueDate').value;\r\n     const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n     const totalAmount = parseFloat(totalAmountValue);\r\n-    const cleanedAmountString = totalAmountInput.replace(/[^\\d.,]/g, '').replace(',', '.');\r\n     console.log(\"Valor bruto do input:\", document.getElementById('totalAmount').value);\r\n     console.log(\"totalAmountValue (após replace):\", totalAmountValue);\r\n     console.log(\"totalAmount (após parseFloat):\", totalAmount);\r\n     const installments = parseInt(document.getElementById('installments').value);\r\n"
                },
                {
                    "date": 1753565151957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1600,28 +1600,41 @@\n     e.preventDefault();\r\n     const billName = document.getElementById('billName').value;\r\n     const categoryId = billCategorySelect.value;\r\n     const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmountValue = document.getElementById('totalAmount').value.replace(/[^0-9,-]/g, '').replace(',', '.');\r\n-    const totalAmount = parseFloat(totalAmountValue);\r\n-    console.log(\"Valor bruto do input:\", document.getElementById('totalAmount').value);\r\n-    console.log(\"totalAmountValue (após replace):\", totalAmountValue);\r\n-    console.log(\"totalAmount (após parseFloat):\", totalAmount);\r\n+    \r\n+    // --- CORREÇÃO AQUI: Lógica aprimorada para lidar com valores decimais ---\r\n+    const totalAmountInput = document.getElementById('totalAmount').value;\r\n+    // Primeiro, substitui vírgulas por pontos para padronizar o separador decimal\r\n+    let cleanedAmountString = totalAmountInput.replace(',', '.');\r\n+    // Em seguida, remove qualquer caractere que não seja dígito ou ponto decimal,\r\n+    // garantindo um formato limpo para parseFloat.\r\n+    cleanedAmountString = cleanedAmountString.replace(/[^\\d.]/g, '');\r\n+    const totalAmount = parseFloat(cleanedAmountString);\r\n+    // --- FIM DA CORREÇÃO ---\r\n+\r\n     const installments = parseInt(document.getElementById('installments').value);\r\n     const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n     const description = document.getElementById('description').value;\r\n     const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n \r\n-    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments)) {\r\n-        return showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n+    // Logs de depuração (manter para testar a correção)\r\n+    console.log(\"Valor bruto do input:\", totalAmountInput);\r\n+    console.log(\"cleanedAmountString (após replaces):\", cleanedAmountString);\r\n+    console.log(\"totalAmount (após parseFloat):\", totalAmount);\r\n+\r\n+    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments) || totalAmount <= 0 || installments <= 0) {\r\n+        return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n     }\r\n \r\n     currentBill = {\r\n         name: billName,\r\n         description,\r\n         parcels: [],\r\n         category: categoryId || null\r\n     };\r\n+\r\n+    // Certifique-se de que o parcelAmount seja calculado com o totalAmount correto\r\n     const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n     installmentsList.innerHTML = '';\r\n \r\n     for (let i = 0; i < installments; i++) {\r\n@@ -1646,9 +1659,9 @@\n     // Adiciona os eventos para os novos inputs\r\n     addEventListenersToInstallmentInputs();\r\n     updatePreviewTotal();\r\n     previewBillNameInput.value = currentBill.name;\r\n-    previewNfeNumber.textContent = 'N/A';\r\n+    previewNfeNumber.textContent = 'N/A'; // NFe não é aplicável para adição manual sem XML\r\n     addBillModal.classList.add('hidden');\r\n     await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n     installmentsPreviewModal.classList.remove('hidden');\r\n }\r\n"
                },
                {
                    "date": 1753567814681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -542,9 +542,9 @@\n             try {\r\n                 await api.deleteUserFromCompany(companyId, userId);\r\n                 showToast('Utilizador removido com sucesso!');\r\n                 const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n@@ -620,9 +620,9 @@\n         closeAddUserModal();\r\n \r\n         if (isAdminLoggedIn) {\r\n             const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n         } else {\r\n             await openManageUsersModal();\r\n         }\r\n \r\n"
                },
                {
                    "date": 1753567891966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -487,29 +487,38 @@\n  * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n  * @param {object} company - O objeto da empresa.\r\n  * @param {Array} users - A lista de usuários da empresa.\r\n  */\r\n-function openCompanyDetailsModal(company, users) {\r\n+function openCompanyDetailsModal(company, users, masterUsers) {\r\n     selectedCompanyForAdmin = company;\r\n \r\n     modalCompanyNameInput.value = company.nomeEmpresa;\r\n     modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n+    modalCompanyPasswordInput.value = ''; // A senha nunca deve ser exibida pré-preenchida\r\n \r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n+    // Se o modal for para admin, mostra a seção de gerenciamento de assinatura\r\n+    // Caso contrário (se for o modal de infos da empresa para proprietário), não\r\n+    adminSubscriptionManagement.classList.toggle('hidden', currentLoggedInUser?.role !== 'SuperAdmin');\r\n+\r\n+\r\n     if (company.subscription && company.subscription.status) {\r\n         subscriptionStatus.textContent = company.subscription.status;\r\n         subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n         subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n     } else {\r\n         subscriptionStatus.textContent = 'Não configurada';\r\n         subscriptionEndDate.textContent = 'N/A';\r\n+        subscriptionStatus.className = 'ml-2 font-bold text-gray-400';\r\n     }\r\n \r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (users && users.length > 0) {\r\n+    modalCompanyUsers.innerHTML = ''; // Limpa a lista de usuários antes de adicionar\r\n+\r\n+    // CORREÇÃO AQUI: Iterar sobre 'masterUsers' para garantir que os IDs e papéis sejam do banco mestre\r\n+    if (masterUsers && masterUsers.length > 0) {\r\n         const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        users.forEach(user => {\r\n+        masterUsers.forEach(user => { // Usando masterUsers\r\n+            const isOwner = user.role === 'Proprietário';\r\n+\r\n             // Cria as opções do dropdown, marcando a atual como selecionada\r\n             const roleOptions = roles.map(role =>\r\n                 `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n             ).join('');\r\n@@ -518,12 +527,18 @@\n             const userHtml = `\r\n                 <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n                     <span class=\"text-white\">${user.username}</span>\r\n                     <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                        ${isOwner\r\n+                            ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                            : `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\" ${currentLoggedInUser?.role !== 'SuperAdmin' ? 'disabled' : ''}>\r\n+                                ${roleOptions}\r\n+                            </select>`\r\n+                        }\r\n+                        ${isOwner\r\n+                            ? ''\r\n+                            : `<button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\" ${currentLoggedInUser?.role !== 'SuperAdmin' ? 'disabled' : ''}>Remover</button>`\r\n+                        }\r\n                     </div>\r\n                 </div>\r\n             `;\r\n             modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n@@ -534,47 +549,61 @@\n \r\n     // Adiciona o evento para os botões \"Remover\"\r\n     document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n+            const userId = e.target.dataset.userId; // Este agora será o ID do MasterUser\r\n             const companyId = selectedCompanyForAdmin._id;\r\n-            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n+\r\n+            if (!confirm(`Tem certeza que deseja remover este usuário?`)) return;\r\n             showLoader();\r\n             try {\r\n+                // Chame a API com o ID do MasterUser\r\n                 await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n+                showToast('Usuário removido com sucesso!', 'success');\r\n+                // Recarregue os detalhes da empresa para atualizar o modal\r\n                 const updatedData = await api.getCompanyDetails(companyId);\r\n+                // Passe todos os três parâmetros que openCompanyDetailsModal espera\r\n                 openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n             }\r\n         });\r\n     });\r\n+\r\n+    // Adiciona o evento para os selects de cargo\r\n     document.querySelectorAll('.role-select').forEach(select => {\r\n         select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n+            const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n             const newRole = e.target.value;\r\n             const companyId = selectedCompanyForAdmin._id;\r\n \r\n-            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n+            if (!confirm(`Tem certeza que deseja alterar o cargo deste usuário para ${newRole}?`)) {\r\n+                // Se o usuário cancelar, reverte a seleção visual para o cargo original\r\n+                const originalUser = masterUsers.find(u => u._id === userId); // Busca na lista masterUsers\r\n+                if(originalUser) e.target.value = originalUser.role;\r\n                 return;\r\n             }\r\n \r\n             showLoader();\r\n             try {\r\n                 await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                showToast('Cargo do usuário atualizado com sucesso!', 'success');\r\n+                // Não precisa recarregar o modal inteiro, pois a mudança já é visualmente aplicada\r\n+                // e o estado já reflete o MasterUser.\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n+                // Em caso de erro, tente reverter visualmente\r\n+                const originalUser = masterUsers.find(u => u._id === userId);\r\n+                if(originalUser) e.target.value = originalUser.role;\r\n             } finally {\r\n                 hideLoader();\r\n             }\r\n         });\r\n     });\r\n \r\n+\r\n     companyDetailsModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1753568139084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -511,12 +511,12 @@\n     }\r\n \r\n     modalCompanyUsers.innerHTML = ''; // Limpa a lista de usuários antes de adicionar\r\n \r\n-    // CORREÇÃO AQUI: Iterar sobre 'masterUsers' para garantir que os IDs e papéis sejam do banco mestre\r\n+    // CORREÇÃO: Iterar sobre 'masterUsers' para garantir que os IDs e papéis sejam do banco mestre\r\n     if (masterUsers && masterUsers.length > 0) {\r\n         const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        masterUsers.forEach(user => { // Usando masterUsers\r\n+        masterUsers.forEach(user => {\r\n             const isOwner = user.role === 'Proprietário';\r\n \r\n             // Cria as opções do dropdown, marcando a atual como selecionada\r\n             const roleOptions = roles.map(role =>\r\n@@ -546,64 +546,8 @@\n     } else {\r\n         modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n     }\r\n \r\n-    // Adiciona o evento para os botões \"Remover\"\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.target.dataset.userId; // Este agora será o ID do MasterUser\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem certeza que deseja remover este usuário?`)) return;\r\n-            showLoader();\r\n-            try {\r\n-                // Chame a API com o ID do MasterUser\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Usuário removido com sucesso!', 'success');\r\n-                // Recarregue os detalhes da empresa para atualizar o modal\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                // Passe todos os três parâmetros que openCompanyDetailsModal espera\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Adiciona o evento para os selects de cargo\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem certeza que deseja alterar o cargo deste usuário para ${newRole}?`)) {\r\n-                // Se o usuário cancelar, reverte a seleção visual para o cargo original\r\n-                const originalUser = masterUsers.find(u => u._id === userId); // Busca na lista masterUsers\r\n-                if(originalUser) e.target.value = originalUser.role;\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do usuário atualizado com sucesso!', 'success');\r\n-                // Não precisa recarregar o modal inteiro, pois a mudança já é visualmente aplicada\r\n-                // e o estado já reflete o MasterUser.\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-                // Em caso de erro, tente reverter visualmente\r\n-                const originalUser = masterUsers.find(u => u._id === userId);\r\n-                if(originalUser) e.target.value = originalUser.role;\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-\r\n     companyDetailsModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1753568288368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -487,38 +487,29 @@\n  * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n  * @param {object} company - O objeto da empresa.\r\n  * @param {Array} users - A lista de usuários da empresa.\r\n  */\r\n-function openCompanyDetailsModal(company, users, masterUsers) {\r\n+function openCompanyDetailsModal(company, users) {\r\n     selectedCompanyForAdmin = company;\r\n \r\n     modalCompanyNameInput.value = company.nomeEmpresa;\r\n     modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = ''; // A senha nunca deve ser exibida pré-preenchida\r\n+    modalCompanyPasswordInput.value = '';\r\n \r\n-    // Se o modal for para admin, mostra a seção de gerenciamento de assinatura\r\n-    // Caso contrário (se for o modal de infos da empresa para proprietário), não\r\n-    adminSubscriptionManagement.classList.toggle('hidden', currentLoggedInUser?.role !== 'SuperAdmin');\r\n-\r\n-\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n     if (company.subscription && company.subscription.status) {\r\n         subscriptionStatus.textContent = company.subscription.status;\r\n         subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n         subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n     } else {\r\n         subscriptionStatus.textContent = 'Não configurada';\r\n         subscriptionEndDate.textContent = 'N/A';\r\n-        subscriptionStatus.className = 'ml-2 font-bold text-gray-400';\r\n     }\r\n \r\n-    modalCompanyUsers.innerHTML = ''; // Limpa a lista de usuários antes de adicionar\r\n-\r\n-    // CORREÇÃO: Iterar sobre 'masterUsers' para garantir que os IDs e papéis sejam do banco mestre\r\n-    if (masterUsers && masterUsers.length > 0) {\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (users && users.length > 0) {\r\n         const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        masterUsers.forEach(user => {\r\n-            const isOwner = user.role === 'Proprietário';\r\n-\r\n+        users.forEach(user => {\r\n             // Cria as opções do dropdown, marcando a atual como selecionada\r\n             const roleOptions = roles.map(role =>\r\n                 `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n             ).join('');\r\n@@ -527,18 +518,12 @@\n             const userHtml = `\r\n                 <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n                     <span class=\"text-white\">${user.username}</span>\r\n                     <div class=\"flex items-center space-x-2\">\r\n-                        ${isOwner\r\n-                            ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                            : `<select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\" ${currentLoggedInUser?.role !== 'SuperAdmin' ? 'disabled' : ''}>\r\n-                                ${roleOptions}\r\n-                            </select>`\r\n-                        }\r\n-                        ${isOwner\r\n-                            ? ''\r\n-                            : `<button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\" ${currentLoggedInUser?.role !== 'SuperAdmin' ? 'disabled' : ''}>Remover</button>`\r\n-                        }\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n                     </div>\r\n                 </div>\r\n             `;\r\n             modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n@@ -546,8 +531,50 @@\n     } else {\r\n         modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n     }\r\n \r\n+    // Adiciona o evento para os botões \"Remover\"\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n     companyDetailsModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n@@ -593,9 +620,9 @@\n         closeAddUserModal();\r\n \r\n         if (isAdminLoggedIn) {\r\n             const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n         } else {\r\n             await openManageUsersModal();\r\n         }\r\n \r\n@@ -1573,29 +1600,17 @@\n     e.preventDefault();\r\n     const billName = document.getElementById('billName').value;\r\n     const categoryId = billCategorySelect.value;\r\n     const dueDate = document.getElementById('dueDate').value;\r\n-    \r\n-    // --- CORREÇÃO AQUI: Lógica aprimorada para lidar com valores decimais ---\r\n     const totalAmountInput = document.getElementById('totalAmount').value;\r\n-    // Primeiro, substitui vírgulas por pontos para padronizar o separador decimal\r\n     let cleanedAmountString = totalAmountInput.replace(',', '.');\r\n-    // Em seguida, remove qualquer caractere que não seja dígito ou ponto decimal,\r\n-    // garantindo um formato limpo para parseFloat.\r\n     cleanedAmountString = cleanedAmountString.replace(/[^\\d.]/g, '');\r\n     const totalAmount = parseFloat(cleanedAmountString);\r\n-    // --- FIM DA CORREÇÃO ---\r\n-\r\n     const installments = parseInt(document.getElementById('installments').value);\r\n     const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n     const description = document.getElementById('description').value;\r\n-    const barcode = document.getElementById('barcode').value; // Código de barras principal\r\n+    const barcode = document.getElementById('barcode').value;\r\n \r\n-    // Logs de depuração (manter para testar a correção)\r\n-    console.log(\"Valor bruto do input:\", totalAmountInput);\r\n-    console.log(\"cleanedAmountString (após replaces):\", cleanedAmountString);\r\n-    console.log(\"totalAmount (após parseFloat):\", totalAmount);\r\n-\r\n     if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments) || totalAmount <= 0 || installments <= 0) {\r\n         return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n     }\r\n \r\n"
                },
                {
                    "date": 1753704003834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -487,9 +487,9 @@\n  * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n  * @param {object} company - O objeto da empresa.\r\n  * @param {Array} users - A lista de usuários da empresa.\r\n  */\r\n-function openCompanyDetailsModal(company, users) {\r\n+function openCompanyDetailsModal(company, users, masterUsers) { // Nova assinatura da função\r\n     selectedCompanyForAdmin = company;\r\n \r\n     modalCompanyNameInput.value = company.nomeEmpresa;\r\n     modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n@@ -505,17 +505,14 @@\n         subscriptionEndDate.textContent = 'N/A';\r\n     }\r\n \r\n     modalCompanyUsers.innerHTML = '';\r\n-    if (users && users.length > 0) {\r\n+    // CORREÇÃO: Usamos a lista 'masterUsers' para construir o modal\r\n+    if (masterUsers && masterUsers.length > 0) {\r\n         const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        users.forEach(user => {\r\n-            // Cria as opções do dropdown, marcando a atual como selecionada\r\n-            const roleOptions = roles.map(role =>\r\n-                `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-            ).join('');\r\n+        masterUsers.forEach(user => {\r\n+            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n \r\n-            // Cria o HTML para a linha do utilizador, agora com o dropdown\r\n             const userHtml = `\r\n                 <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n                     <span class=\"text-white\">${user.username}</span>\r\n                     <div class=\"flex items-center space-x-2\">\r\n@@ -531,50 +528,10 @@\n     } else {\r\n         modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n     }\r\n \r\n-    // Adiciona o evento para os botões \"Remover\"\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-            if (!confirm(`Tem a certeza que deseja remover este utilizador?`)) return;\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = (await api.getCompanyDetails(companyId)).users.find(u => u._id === userId).role; // Reverte a seleção visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n+    // Adiciona os eventos DEPOIS de criar os botões\r\n+    addEventListenersToCompanyDetailsModal();\r\n     companyDetailsModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1753704038749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1502,12 +1502,12 @@\n         button.addEventListener('click', async (e) => {\r\n             const companyId = e.target.dataset.companyId;\r\n             showLoader();\r\n             try {\r\n-                // Chama a API para obter os detalhes\r\n-                const { company, users } = await api.getCompanyDetails(companyId);\r\n-                // Chama a nossa nova função para abrir e preencher o modal\r\n-                openCompanyDetailsModal(company, users);\r\n+                // CORREÇÃO: Capturamos a nova lista 'masterUsers' da API\r\n+                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                // CORREÇÃO: Passamos a lista para a função do modal\r\n+                openCompanyDetailsModal(company, users, masterUsers);\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n"
                },
                {
                    "date": 1753705904399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -483,13 +483,73 @@\n     return element?.textContent || '';\r\n }\r\n \r\n /**\r\n+ * Adiciona os eventos de clique e mudança aos elementos dinâmicos do modal de detalhes da empresa.\r\n+ * Esta é a função que estava em falta.\r\n+ */\r\n+function addEventListenersToCompanyDetailsModal() {\r\n+    // Evento para os seletores de cargo (role)\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                // Recarrega os dados do modal para garantir consistência\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Evento para os botões de remover utilizador\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.currentTarget.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                // Recarrega os dados do modal\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+\r\n+/**\r\n  * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n  * @param {object} company - O objeto da empresa.\r\n  * @param {Array} users - A lista de usuários da empresa.\r\n+ * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n  */\r\n-function openCompanyDetailsModal(company, users, masterUsers) { // Nova assinatura da função\r\n+function openCompanyDetailsModal(company, users, masterUsers) {\r\n     selectedCompanyForAdmin = company;\r\n \r\n     modalCompanyNameInput.value = company.nomeEmpresa;\r\n     modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n@@ -505,9 +565,8 @@\n         subscriptionEndDate.textContent = 'N/A';\r\n     }\r\n \r\n     modalCompanyUsers.innerHTML = '';\r\n-    // CORREÇÃO: Usamos a lista 'masterUsers' para construir o modal\r\n     if (masterUsers && masterUsers.length > 0) {\r\n         const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n         masterUsers.forEach(user => {\r\n             const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n@@ -529,9 +588,9 @@\n         modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n     }\r\n \r\n     // Adiciona os eventos DEPOIS de criar os botões\r\n-    addEventListenersToCompanyDetailsModal();\r\n+    addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n     companyDetailsModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1753706127321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,9 @@\n const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n const addUserModal = document.getElementById('addUserModal');\r\n const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n const addCompanyModal = document.getElementById('addCompanyModal');\r\n const addCompanyForm = document.getElementById('addCompanyForm');\r\n"
                },
                {
                    "date": 1753706248261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,8 @@\n const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n const addUserModal = document.getElementById('addUserModal');\r\n const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n const addCompanyModal = document.getElementById('addCompanyModal');\r\n const addCompanyForm = document.getElementById('addCompanyForm');\r\n"
                },
                {
                    "date": 1753706292327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,9 @@\n const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n const addUserModal = document.getElementById('addUserModal');\r\n const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n const addCompanyModal = document.getElementById('addCompanyModal');\r\n const addCompanyForm = document.getElementById('addCompanyForm');\r\n"
                },
                {
                    "date": 1753706439485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,8 @@\n const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n const addUserModal = document.getElementById('addUserModal');\r\n const addUserForm = document.getElementById('addUserForm');\r\n const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModalBtn');\r\n const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n const addCompanyModal = document.getElementById('addCompanyModal');\r\n const addCompanyForm = document.getElementById('addCompanyForm');\r\n const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n"
                },
                {
                    "date": 1753708701346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2433,59 +2433,83 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-// --- Lógica de inicialização que estava em initializeApp() ---\r\n-const today = new Date();\r\n-currentMonth = today.getMonth();\r\n-currentYear = today.getFullYear();\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n \r\n-const token = localStorage.getItem('authToken');\r\n-if (!token) {\r\n-    // Se não houver token, redireciona para a página de login\r\n-    window.location.href = 'Index.html';\r\n-    return;\r\n-}\r\n+    // Função de ajuda para verificar a sessão e atualizar a UI\r\n+    const checkSessionAndHandleUI = async () => {\r\n+        try {\r\n+            const data = await api.checkSession();\r\n+            if (data.user.role === 'SuperAdmin') {\r\n+                isAdminLoggedIn = true;\r\n+                await showAdminDashboard();\r\n+            } else {\r\n+                currentLoggedInUser = data.user;\r\n+                currentLoggedInCompany = data.company;\r\n+                const subscription = currentLoggedInCompany.subscription;\r\n+                const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n \r\n-try {\r\n-    const data = await api.checkSession();\r\n-    if (data.user.role === 'SuperAdmin') {\r\n-        isAdminLoggedIn = true;\r\n-        await showAdminDashboard();\r\n-    } else {\r\n-        currentLoggedInUser = data.user;\r\n-        currentLoggedInCompany = data.company;\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            await showMainApp();\r\n-        } else {\r\n-            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                // Se for o dono da empresa, mostra o modal para renovar\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n-                showAccessBlockedModal();\r\n+                if (isSubscriptionActive) {\r\n+                    await showMainApp();\r\n+                } else {\r\n+                    if (currentLoggedInUser.role === 'Proprietário') {\r\n+                        showSubscriptionModal(currentLoggedInCompany);\r\n+                        // Se o utilizador voltou do MP, mostra o botão de verificação\r\n+                        if (urlParams.has('preapproval_id')) {\r\n+                            document.getElementById('checkPaymentStatusBtn').classList.remove('hidden');\r\n+                        }\r\n+                    } else {\r\n+                        showAccessBlockedModal();\r\n+                    }\r\n+                }\r\n             }\r\n+        } catch (error) {\r\n+            showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+            handleFullLogoutAndRedirect();\r\n+        } finally {\r\n+            document.getElementById('loadingScreen').classList.add('hidden');\r\n         }\r\n+    };\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        window.location.href = 'Index.html';\r\n+        return;\r\n     }\r\n-} catch (error) {\r\n-    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n-    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n-    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    setTimeout(() => {\r\n-        window.location.href = 'Index.html';\r\n-    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n-} finally {\r\n-    // Esconde a tela de carregamento inicial\r\n-    document.getElementById('loadingScreen').classList.add('hidden');\r\n-}\r\n \r\n+    // Lógica principal de inicialização\r\n+    await checkSessionAndHandleUI();\r\n \r\n+    // NOVA LÓGICA: Se o utilizador está a voltar do Mercado Pago, espera e verifica novamente.\r\n+    if (urlParams.has('preapproval_id')) {\r\n+        showToast('Aguarde um momento, estamos a confirmar o seu pagamento...', 'info');\r\n+        setTimeout(() => {\r\n+            console.log(\"A verificar novamente o status da assinatura após 5 segundos...\");\r\n+            checkSessionAndHandleUI();\r\n+        }, 5000); // Espera 5 segundos\r\n+    }\r\n+    \r\n+    // NOVO EVENTO para o botão de verificação manual\r\n+    const checkPaymentStatusBtn = document.getElementById('checkPaymentStatusBtn');\r\n+    if (checkPaymentStatusBtn) {\r\n+        checkPaymentStatusBtn.addEventListener('click', async () => {\r\n+            checkPaymentStatusBtn.disabled = true;\r\n+            checkPaymentStatusBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A verificar...';\r\n+            await checkSessionAndHandleUI();\r\n+            \r\n+            // Reativa o botão após um tempo, caso o webhook ainda não tenha chegado\r\n+            setTimeout(() => {\r\n+                checkPaymentStatusBtn.disabled = false;\r\n+                checkPaymentStatusBtn.innerHTML = '<i class=\"fas fa-sync-alt mr-2\"></i> Já paguei, verificar status';\r\n+            }, 3000);\r\n+        });\r\n+    }\r\n+\r\n+\r\n // Submissão de formulários\r\n if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n"
                },
                {
                    "date": 1753708903829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2507,9 +2507,13 @@\n             }, 3000);\r\n         });\r\n     }\r\n \r\n+if (subscriptionActionBtn) subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+if (subscriptionLogoutBtn) subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+if (blockedAccessLogoutBtn) blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n \r\n+\r\n // Submissão de formulários\r\n if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n"
                },
                {
                    "date": 1753708946874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2433,87 +2433,58 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n+const today = new Date();\r\n+currentMonth = today.getMonth();\r\n+currentYear = today.getFullYear();\r\n \r\n-    // Função de ajuda para verificar a sessão e atualizar a UI\r\n-    const checkSessionAndHandleUI = async () => {\r\n-        try {\r\n-            const data = await api.checkSession();\r\n-            if (data.user.role === 'SuperAdmin') {\r\n-                isAdminLoggedIn = true;\r\n-                await showAdminDashboard();\r\n+const token = localStorage.getItem('authToken');\r\n+if (!token) {\r\n+    // Se não houver token, redireciona para a página de login\r\n+    window.location.href = 'Index.html';\r\n+    return;\r\n+}\r\n+\r\n+try {\r\n+    const data = await api.checkSession();\r\n+    if (data.user.role === 'SuperAdmin') {\r\n+        isAdminLoggedIn = true;\r\n+        await showAdminDashboard();\r\n+    } else {\r\n+        currentLoggedInUser = data.user;\r\n+        currentLoggedInCompany = data.company;\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            await showMainApp();\r\n+        } else {\r\n+            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                // Se for o dono da empresa, mostra o modal para renovar\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n             } else {\r\n-                currentLoggedInUser = data.user;\r\n-                currentLoggedInCompany = data.company;\r\n-                const subscription = currentLoggedInCompany.subscription;\r\n-                const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-                if (isSubscriptionActive) {\r\n-                    await showMainApp();\r\n-                } else {\r\n-                    if (currentLoggedInUser.role === 'Proprietário') {\r\n-                        showSubscriptionModal(currentLoggedInCompany);\r\n-                        // Se o utilizador voltou do MP, mostra o botão de verificação\r\n-                        if (urlParams.has('preapproval_id')) {\r\n-                            document.getElementById('checkPaymentStatusBtn').classList.remove('hidden');\r\n-                        }\r\n-                    } else {\r\n-                        showAccessBlockedModal();\r\n-                    }\r\n-                }\r\n+                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                showAccessBlockedModal();\r\n             }\r\n-        } catch (error) {\r\n-            showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-            handleFullLogoutAndRedirect();\r\n-        } finally {\r\n-            document.getElementById('loadingScreen').classList.add('hidden');\r\n         }\r\n-    };\r\n-\r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n+    }\r\n+} catch (error) {\r\n+    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n+    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n+    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    setTimeout(() => {\r\n         window.location.href = 'Index.html';\r\n-        return;\r\n-    }\r\n+    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n+} finally {\r\n+    // Esconde a tela de carregamento inicial\r\n+    document.getElementById('loadingScreen').classList.add('hidden');\r\n+}\r\n \r\n-    // Lógica principal de inicialização\r\n-    await checkSessionAndHandleUI();\r\n \r\n-    // NOVA LÓGICA: Se o utilizador está a voltar do Mercado Pago, espera e verifica novamente.\r\n-    if (urlParams.has('preapproval_id')) {\r\n-        showToast('Aguarde um momento, estamos a confirmar o seu pagamento...', 'info');\r\n-        setTimeout(() => {\r\n-            console.log(\"A verificar novamente o status da assinatura após 5 segundos...\");\r\n-            checkSessionAndHandleUI();\r\n-        }, 5000); // Espera 5 segundos\r\n-    }\r\n-    \r\n-    // NOVO EVENTO para o botão de verificação manual\r\n-    const checkPaymentStatusBtn = document.getElementById('checkPaymentStatusBtn');\r\n-    if (checkPaymentStatusBtn) {\r\n-        checkPaymentStatusBtn.addEventListener('click', async () => {\r\n-            checkPaymentStatusBtn.disabled = true;\r\n-            checkPaymentStatusBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A verificar...';\r\n-            await checkSessionAndHandleUI();\r\n-            \r\n-            // Reativa o botão após um tempo, caso o webhook ainda não tenha chegado\r\n-            setTimeout(() => {\r\n-                checkPaymentStatusBtn.disabled = false;\r\n-                checkPaymentStatusBtn.innerHTML = '<i class=\"fas fa-sync-alt mr-2\"></i> Já paguei, verificar status';\r\n-            }, 3000);\r\n-        });\r\n-    }\r\n-\r\n-if (subscriptionActionBtn) subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-if (subscriptionLogoutBtn) subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-if (blockedAccessLogoutBtn) blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n-\r\n-\r\n // Submissão de formulários\r\n if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n"
                },
                {
                    "date": 1753708996258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2433,58 +2433,89 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-const today = new Date();\r\n-currentMonth = today.getMonth();\r\n-currentYear = today.getFullYear();\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n \r\n-const token = localStorage.getItem('authToken');\r\n-if (!token) {\r\n-    // Se não houver token, redireciona para a página de login\r\n-    window.location.href = 'Index.html';\r\n-    return;\r\n-}\r\n+    // Função de ajuda para verificar a sessão e atualizar a UI\r\n+    const checkSessionAndHandleUI = async () => {\r\n+        try {\r\n+            const data = await api.checkSession();\r\n+            if (data.user.role === 'SuperAdmin') {\r\n+                isAdminLoggedIn = true;\r\n+                await showAdminDashboard();\r\n+            } else {\r\n+                currentLoggedInUser = data.user;\r\n+                currentLoggedInCompany = data.company;\r\n+                const subscription = currentLoggedInCompany.subscription;\r\n+                const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n \r\n-try {\r\n-    const data = await api.checkSession();\r\n-    if (data.user.role === 'SuperAdmin') {\r\n-        isAdminLoggedIn = true;\r\n-        await showAdminDashboard();\r\n-    } else {\r\n-        currentLoggedInUser = data.user;\r\n-        currentLoggedInCompany = data.company;\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            await showMainApp();\r\n-        } else {\r\n-            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                // Se for o dono da empresa, mostra o modal para renovar\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n-                showAccessBlockedModal();\r\n+                if (isSubscriptionActive) {\r\n+                    await showMainApp();\r\n+                } else {\r\n+                    if (currentLoggedInUser.role === 'Proprietário') {\r\n+                        showSubscriptionModal(currentLoggedInCompany);\r\n+                        // Se o utilizador voltou do MP, mostra o botão de verificação\r\n+                        if (urlParams.has('preapproval_id')) {\r\n+                            document.getElementById('checkPaymentStatusBtn').classList.remove('hidden');\r\n+                        }\r\n+                    } else {\r\n+                        showAccessBlockedModal();\r\n+                    }\r\n+                }\r\n             }\r\n+        } catch (error) {\r\n+            showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+            handleFullLogoutAndRedirect();\r\n+        } finally {\r\n+            document.getElementById('loadingScreen').classList.add('hidden');\r\n         }\r\n+    };\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        window.location.href = 'Index.html';\r\n+        return;\r\n     }\r\n-} catch (error) {\r\n-    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n-    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n-    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    setTimeout(() => {\r\n-        window.location.href = 'Index.html';\r\n-    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n-} finally {\r\n-    // Esconde a tela de carregamento inicial\r\n-    document.getElementById('loadingScreen').classList.add('hidden');\r\n-}\r\n \r\n+    // Lógica principal de inicialização\r\n+    await checkSessionAndHandleUI();\r\n \r\n+    // NOVA LÓGICA: Se o utilizador está a voltar do Mercado Pago, espera e verifica novamente.\r\n+    if (urlParams.has('preapproval_id')) {\r\n+        showToast('Aguarde um momento, estamos a confirmar o seu pagamento...', 'info');\r\n+        setTimeout(() => {\r\n+            console.log(\"A verificar novamente o status da assinatura após 5 segundos...\");\r\n+            checkSessionAndHandleUI();\r\n+        }, 5000); // Espera 5 segundos\r\n+    }\r\n+    \r\n+    // NOVO EVENTO para o botão de verificação manual\r\n+    const checkPaymentStatusBtn = document.getElementById('checkPaymentStatusBtn');\r\n+    if (checkPaymentStatusBtn) {\r\n+        checkPaymentStatusBtn.addEventListener('click', async () => {\r\n+            checkPaymentStatusBtn.disabled = true;\r\n+            checkPaymentStatusBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A verificar...';\r\n+            await checkSessionAndHandleUI();\r\n+            \r\n+            // Reativa o botão após um tempo, caso o webhook ainda não tenha chegado\r\n+            setTimeout(() => {\r\n+                checkPaymentStatusBtn.disabled = false;\r\n+                checkPaymentStatusBtn.innerHTML = '<i class=\"fas fa-sync-alt mr-2\"></i> Já paguei, verificar status';\r\n+            }, 3000);\r\n+        });\r\n+    }\r\n+\r\n+    // O restante de todos os seus outros event listeners continua aqui, sem alterações...\r\n+    // (Coloquei apenas os mais relevantes para o contexto)\r\n+    if (subscriptionActionBtn) subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+    if (subscriptionLogoutBtn) subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+    if (blockedAccessLogoutBtn) blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n+\r\n+\r\n // Submissão de formulários\r\n if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n"
                },
                {
                    "date": 1753709241049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2467,9 +2467,9 @@\n                 }\r\n             }\r\n         } catch (error) {\r\n             showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-            handleFullLogoutAndRedirect();\r\n+            logout();\r\n         } finally {\r\n             document.getElementById('loadingScreen').classList.add('hidden');\r\n         }\r\n     };\r\n"
                },
                {
                    "date": 1753709656746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2433,14 +2433,17 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n+    // =======================================================\r\n+    // LÓGICA DE INICIALIZAÇÃO\r\n+    // =======================================================\r\n     const today = new Date();\r\n     currentMonth = today.getMonth();\r\n     currentYear = today.getFullYear();\r\n     const urlParams = new URLSearchParams(window.location.search);\r\n \r\n-    // Função de ajuda para verificar a sessão e atualizar a UI\r\n+    // Função de ajuda para verificar a sessão e direcionar o utilizador\r\n     const checkSessionAndHandleUI = async () => {\r\n         try {\r\n             const data = await api.checkSession();\r\n             if (data.user.role === 'SuperAdmin') {\r\n@@ -2456,20 +2459,20 @@\n                     await showMainApp();\r\n                 } else {\r\n                     if (currentLoggedInUser.role === 'Proprietário') {\r\n                         showSubscriptionModal(currentLoggedInCompany);\r\n-                        // Se o utilizador voltou do MP, mostra o botão de verificação\r\n-                        if (urlParams.has('preapproval_id')) {\r\n-                            document.getElementById('checkPaymentStatusBtn').classList.remove('hidden');\r\n+                        const checkPaymentBtn = document.getElementById('checkPaymentStatusBtn');\r\n+                        if (urlParams.has('preapproval_id') && checkPaymentBtn) {\r\n+                            checkPaymentBtn.classList.remove('hidden');\r\n                         }\r\n                     } else {\r\n                         showAccessBlockedModal();\r\n                     }\r\n                 }\r\n             }\r\n         } catch (error) {\r\n             showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-            logout();\r\n+            logout(); // Chamada correta para a função de logout\r\n         } finally {\r\n             document.getElementById('loadingScreen').classList.add('hidden');\r\n         }\r\n     };\r\n@@ -2479,439 +2482,239 @@\n         window.location.href = 'Index.html';\r\n         return;\r\n     }\r\n \r\n-    // Lógica principal de inicialização\r\n+    // Executa a verificação inicial\r\n     await checkSessionAndHandleUI();\r\n \r\n-    // NOVA LÓGICA: Se o utilizador está a voltar do Mercado Pago, espera e verifica novamente.\r\n+    // Se o utilizador está a voltar do Mercado Pago, agenda uma nova verificação\r\n     if (urlParams.has('preapproval_id')) {\r\n         showToast('Aguarde um momento, estamos a confirmar o seu pagamento...', 'info');\r\n         setTimeout(() => {\r\n             console.log(\"A verificar novamente o status da assinatura após 5 segundos...\");\r\n             checkSessionAndHandleUI();\r\n         }, 5000); // Espera 5 segundos\r\n     }\r\n     \r\n-    // NOVO EVENTO para o botão de verificação manual\r\n+    // =======================================================\r\n+    // EVENT LISTENERS (COMPLETO E CORRIGIDO)\r\n+    // =======================================================\r\n+\r\n+    // Submissão de formulários\r\n+    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+\r\n+    // Botões de Logout\r\n+    if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n+    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+    if (subscriptionLogoutBtn) subscriptionLogoutBtn.addEventListener('click', logout);\r\n+    if (blockedAccessLogoutBtn) blockedAccessLogoutBtn.addEventListener('click', logout);\r\n+    \r\n+    // Botão de verificação manual de pagamento\r\n     const checkPaymentStatusBtn = document.getElementById('checkPaymentStatusBtn');\r\n     if (checkPaymentStatusBtn) {\r\n         checkPaymentStatusBtn.addEventListener('click', async () => {\r\n             checkPaymentStatusBtn.disabled = true;\r\n             checkPaymentStatusBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A verificar...';\r\n             await checkSessionAndHandleUI();\r\n             \r\n-            // Reativa o botão após um tempo, caso o webhook ainda não tenha chegado\r\n             setTimeout(() => {\r\n                 checkPaymentStatusBtn.disabled = false;\r\n                 checkPaymentStatusBtn.innerHTML = '<i class=\"fas fa-sync-alt mr-2\"></i> Já paguei, verificar status';\r\n             }, 3000);\r\n         });\r\n     }\r\n \r\n-    // O restante de todos os seus outros event listeners continua aqui, sem alterações...\r\n-    // (Coloquei apenas os mais relevantes para o contexto)\r\n     if (subscriptionActionBtn) subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-    if (subscriptionLogoutBtn) subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-    if (blockedAccessLogoutBtn) blockedAccessLogoutBtn.addEventListener('click', handleFullLogoutAndRedirect);\r\n \r\n+    // Ações na App Principal\r\n+    if(addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+    if(closeAddBillModalBtn) closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n \r\n-// Submissão de formulários\r\n-if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-if (logoutBtn) {\r\n-    logoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+    // Ações do Modal de Edição de Boleto\r\n+    if(closeModalBtn) closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+    if(saveBillBtn) saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+    if(deleteBillBtn) deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+    if(deleteEntireBillBtn) deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+    if(closeFullScreenBarcodeBtn) closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n \r\n-\r\n-// Ações na App Principal\r\n-addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-// Ações do Modal de Edição de Boleto\r\n-closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-// Navegação do Calendário\r\n-prevMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-    if (currentMonth === 11) currentYear--;\r\n-    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-\r\n-nextMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-    if (currentMonth === 0) currentYear++;\r\n-    // A mesma mudança aqui\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-}\r\n-\r\n-if (openAddBillModalBtn) {\r\n-    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-}\r\n-\r\n-const handleRedirectToHome = () => {\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-const handleFullLogoutAndRedirect = () => {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-if (subscriptionLogoutBtn) {\r\n-    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-}\r\n-\r\n-if (blockedAccessLogoutBtn) {\r\n-    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n+    // Navegação do Calendário\r\n+    if(prevMonthBtn) prevMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+        if (currentMonth === 11) currentYear--;\r\n+        applyFiltersAndSearch(); \r\n     });\r\n-}\r\n-\r\n-// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-if (settingsBtn) {\r\n-    settingsBtn.addEventListener('click', (e) => {\r\n-        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-        settingsDropdown.classList.toggle('hidden');\r\n+    if(nextMonthBtn) nextMonthBtn.addEventListener('click', () => {\r\n+        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+        if (currentMonth === 0) currentYear++;\r\n+        applyFiltersAndSearch(); \r\n     });\r\n-}\r\n+    \r\n+    // Máscara de CNPJ\r\n+    if (addCompanyCnpjInput) {\r\n+        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+    }\r\n \r\n-// Links dentro do menu dropdown\r\n-if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCompanyInfoModal();\r\n-});\r\n+    // Botão flutuante\r\n+    if (openAddBillModalBtn) {\r\n+        openAddBillModalBtn.addEventListener('click', () => openAddBillModal());\r\n+    }\r\n \r\n-if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openPermissionsModal();\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n+    // Lógica do Menu de Configurações (Engrenagem)\r\n+    if (settingsBtn) {\r\n+        settingsBtn.addEventListener('click', (e) => {\r\n+            e.stopPropagation();\r\n+            settingsDropdown.classList.toggle('hidden');\r\n+        });\r\n     }\r\n-});\r\n \r\n-// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openManageUsersModal();\r\n-});\r\n-\r\n-// Botões do modal de gerir utilizadores\r\n-if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-    manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-    openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-});\r\n-\r\n-/**\r\n- * Lida com o clique no botão de criar/renovar assinatura.\r\n- */\r\n-async function handleCreateSubscription() {\r\n-    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-    subscriptionActionBtn.disabled = true;\r\n-    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-    try {\r\n-        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-        const data = await api.createSubscriptionLink();\r\n-\r\n-        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-        if (data.init_point) {\r\n-            window.location.href = data.init_point;\r\n-        } else {\r\n-            throw new Error('Link de pagamento não recebido.');\r\n+    // Fechar dropdown ao clicar fora\r\n+    window.addEventListener('click', () => {\r\n+        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+            settingsDropdown.classList.add('hidden');\r\n         }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-        subscriptionActionBtn.disabled = false;\r\n-        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-    }\r\n-}\r\n-\r\n-// Liga a função ao clique do botão.\r\n-if (subscriptionActionBtn) {\r\n-    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-}\r\n-\r\n-if (closePreviewModalBtn) {\r\n-    closePreviewModalBtn.addEventListener('click', () => {\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n     });\r\n-}\r\n \r\n-if (nfeXmlInput) {\r\n-    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-}\r\n+    // Links dentro do menu dropdown\r\n+    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => { e.preventDefault(); settingsDropdown.classList.add('hidden'); openCompanyInfoModal(); });\r\n+    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => { e.preventDefault(); settingsDropdown.classList.add('hidden'); openPermissionsModal(); });\r\n+    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => { e.preventDefault(); settingsDropdown.classList.add('hidden'); openManageUsersModal(); });\r\n+    if (menuCategorias) menuCategorias.addEventListener('click', (e) => { e.preventDefault(); settingsDropdown.classList.add('hidden'); openCategoriesModal(); });\r\n \r\n-if (previewBillNameInput) {\r\n-    previewBillNameInput.addEventListener('input', (e) => {\r\n-        if (currentBill) {\r\n-            currentBill.name = e.target.value;\r\n-        }\r\n-    });\r\n-}\r\n+    // Modais de Gestão de Utilizadores\r\n+    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => { manageUsersModal.classList.add('hidden'); openAddUserModal(); });\r\n \r\n-// Liga a função ao clique do botão\r\n-if (showFullScreenBarcodeBtn) {\r\n-    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-}\r\n+    // Modal de Pré-visualização de Parcelas\r\n+    if (closePreviewModalBtn) closePreviewModalBtn.addEventListener('click', () => installmentsPreviewModal.classList.add('hidden'));\r\n+    if (nfeXmlInput) nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+    if (previewBillNameInput) previewBillNameInput.addEventListener('input', (e) => { if (currentBill) currentBill.name = e.target.value; });\r\n \r\n-// Listener para o campo de pesquisa\r\n-if (searchInput) {\r\n-    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-}\r\n+    // Modal de Código de Barras\r\n+    if (showFullScreenBarcodeBtn) showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n \r\n-// Listeners para os botões de filtro\r\n-if (filterButtons) {\r\n-    filterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões\r\n-            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona a classe 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Aplica o filtro\r\n-            applyFiltersAndSearch();\r\n+    // Filtros e Pesquisa\r\n+    if (searchInput) searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+    if (filterButtons) {\r\n+        filterButtons.forEach(button => {\r\n+            button.addEventListener('click', (e) => {\r\n+                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+                e.currentTarget.classList.add('active');\r\n+                applyFiltersAndSearch();\r\n+            });\r\n         });\r\n-    });\r\n-}\r\n+    }\r\n \r\n-if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCategoriesModal();\r\n-});\r\n-\r\n-if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-if (addCategoryForm) {\r\n-    addCategoryForm.addEventListener('submit', async (e) => {\r\n+    // Gestão de Categorias\r\n+    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+    if (addCategoryForm) addCategoryForm.addEventListener('submit', async (e) => {\r\n         e.preventDefault();\r\n         const name = newCategoryNameInput.value.trim();\r\n         if (!name) return;\r\n         try {\r\n             await api.createCategory(name);\r\n             newCategoryNameInput.value = '';\r\n-            await openCategoriesModal(); // Recarrega a lista do modal\r\n-            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n+            await openCategoriesModal();\r\n+            await populateCategoryFilter();\r\n+        } catch (error) { showToast(error.message, 'error'); }\r\n     });\r\n-}\r\n-\r\n-if (categoryListDiv) {\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n+    if (categoryListDiv) {\r\n+        categoryListDiv.addEventListener('click', async (e) => {\r\n+            const editBtn = e.target.closest('.edit-category-btn');\r\n+            const deleteBtn = e.target.closest('.delete-category-btn');\r\n+            if (editBtn) {\r\n+                const { id, name } = editBtn.dataset;\r\n+                const newName = prompt(\"Editar nome da categoria:\", name);\r\n+                if (newName && newName.trim() && newName.trim() !== name) {\r\n+                    await api.updateCategory(id, newName.trim());\r\n+                    await openCategoriesModal();\r\n+                    await populateCategoryFilter();\r\n+                }\r\n             }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n+            if (deleteBtn) {\r\n+                const { id } = deleteBtn.dataset;\r\n+                if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                    await api.deleteCategory(id);\r\n+                    await openCategoriesModal();\r\n+                    await populateCategoryFilter();\r\n+                }\r\n             }\r\n-        }\r\n-    });\r\n-}\r\n+        });\r\n+    }\r\n+    if (categoryFilterSelect) categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n \r\n-if (categoryFilterSelect) {\r\n-    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Configuração dos botões do dashboard\r\n-if (viewCalendarBtn) {\r\n-    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-}\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-if (dateRangePresetSelect) {\r\n-    dateRangePresetSelect.addEventListener('change', () => {\r\n+    // Navegação de Vistas (Calendário/Dashboard)\r\n+    if (viewCalendarBtn) viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+    if (viewDashboardBtn) viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+    \r\n+    // Filtros do Dashboard\r\n+    if (dateRangePresetSelect) dateRangePresetSelect.addEventListener('change', () => {\r\n         const isCustom = dateRangePresetSelect.value === 'custom';\r\n         customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n-\r\n-        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n-        // o dashboard é atualizado imediatamente.\r\n-        if (!isCustom) {\r\n-            renderDashboard();\r\n-        }\r\n+        if (!isCustom) renderDashboard();\r\n     });\r\n-}\r\n+    if (startDateInput) startDateInput.addEventListener('change', () => { if (endDateInput.value) renderDashboard(); });\r\n+    if (endDateInput) endDateInput.addEventListener('change', () => { if (startDateInput.value) renderDashboard(); });\r\n \r\n-// Para o intervalo personalizado, atualizamos o dashboard\r\n-// assim que ambas as datas estiverem preenchidas.\r\n-if (startDateInput) {\r\n-    startDateInput.addEventListener('change', () => {\r\n-        if (endDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-if (endDateInput) {\r\n-    endDateInput.addEventListener('change', () => {\r\n-        if (startDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n+    // Botões de Exportação\r\n+    if (exportCsvBtn) exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+    if (exportPdfBtn) exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n \r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n+    // Botões de Modo de Adição de Boleto\r\n+    if (manualAddBtn) manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+    if (xmlAddBtn) xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+    if (csvImportBtn) csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n \r\n-// Listeners para os botões de exportação\r\n-const handleExport = (format) => {\r\n-    // 1. Pega no período de tempo atual do filtro do dashboard\r\n-    const dateRange = getDateRangeFromPreset();\r\n+    // Lógica de Importação CSV\r\n+    if (csvFileInput) csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n+    if (importCsvBtn) importCsvBtn.addEventListener('click', handleConfirmImport);\r\n \r\n-    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n-    const queryString = new URLSearchParams(dateRange).toString();\r\n+    // Ações em Massa\r\n+    if (markSelectedAsPaidBtn) markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n+    if (selectAllVisibleBtn) selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n+    if (deselectAllVisibleBtn) deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n \r\n-    // 3. Monta o URL completo para o download\r\n-    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n+    // Filtros de Status do Dashboard\r\n+    if (dashboardFilterButtons) {\r\n+        dashboardFilterButtons.forEach(button => {\r\n+            button.addEventListener('click', (e) => {\r\n+                dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n+                e.currentTarget.classList.add('active');\r\n+                dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n+                renderDashboard();\r\n+            });\r\n+        });\r\n+    }\r\n     \r\n-    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n-    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n-    fetch(downloadUrl, {\r\n-        headers: {\r\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n-        }\r\n-    })\r\n-    .then(res => res.blob())\r\n-    .then(blob => {\r\n-        const url = window.URL.createObjectURL(blob);\r\n-        const a = document.createElement('a');\r\n-        a.style.display = 'none';\r\n-        a.href = url;\r\n-        a.download = `relatorio-despesas.${format}`;\r\n-        document.body.appendChild(a);\r\n-        a.click();\r\n-        window.URL.revokeObjectURL(url);\r\n-        a.remove();\r\n-    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n-};\r\n-\r\n-if (exportCsvBtn) {\r\n-    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n-}\r\n-if (exportPdfBtn) {\r\n-    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n-}\r\n-\r\n-if (manualAddBtn) {\r\n-    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-}\r\n-if (xmlAddBtn) {\r\n-    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-}\r\n-\r\n-if (csvImportBtn) {\r\n-    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n-}\r\n-if (csvFileInput) {\r\n-    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n-}\r\n-if (importCsvBtn) {\r\n-    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n-}\r\n-if (markSelectedAsPaidBtn) {\r\n-    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n-}\r\n-if (selectAllVisibleBtn) {\r\n-    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n-}\r\n-\r\n-if (deselectAllVisibleBtn) {\r\n-    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n-}\r\n-if (dashboardFilterButtons) {\r\n-    dashboardFilterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões do dashboard\r\n-            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Atualiza a variável de estado com o novo filtro\r\n-            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n-            // Renderiza o dashboard novamente com os dados filtrados\r\n-            renderDashboard();\r\n-        });\r\n-    });\r\n-}\r\n-// Abre o modal de alteração de categoria\r\n-if (changeCategoryBtn) {\r\n-    changeCategoryBtn.addEventListener('click', async () => {\r\n+    // Alteração de Categoria em Massa\r\n+    if (changeCategoryBtn) changeCategoryBtn.addEventListener('click', async () => {\r\n         showLoader();\r\n-        // Popula o dropdown do modal com as categorias existentes\r\n         await populateCategorySelect(batchCategorySelect);\r\n         hideLoader();\r\n         categoryBatchModal.classList.remove('hidden');\r\n     });\r\n-}\r\n-\r\n-// Botão de cancelar no modal\r\n-if (cancelCategoryBatchBtn) {\r\n-    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n-        categoryBatchModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de confirmar a alteração\r\n-if (confirmCategoryBatchBtn) {\r\n-    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n+    if (cancelCategoryBatchBtn) cancelCategoryBatchBtn.addEventListener('click', () => categoryBatchModal.classList.add('hidden'));\r\n+    if (confirmCategoryBatchBtn) confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n         const categoryId = batchCategorySelect.value;\r\n-        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n         const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n-\r\n-        if (boletoIds.length === 0) {\r\n-            return showToast('Nenhum item selecionado.', 'info');\r\n-        }\r\n-\r\n+        if (boletoIds.length === 0) return showToast('Nenhum item selecionado.', 'info');\r\n         showLoader();\r\n         try {\r\n             const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n             showToast(response.message, 'success');\r\n@@ -2924,11 +2727,8 @@\n             hideLoader();\r\n             categoryBatchModal.classList.add('hidden');\r\n         }\r\n     });\r\n-}\r\n \r\n-// CHAME A NOVA FUNÇÃO AQUI\r\n-initializeDashboardDragAndDrop(); \r\n-\r\n-\r\n+    // Inicialização de Funcionalidades Especiais\r\n+    initializeDashboardDragAndDrop(); \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753709859079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2433,288 +2433,455 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-    // =======================================================\r\n-    // LÓGICA DE INICIALIZAÇÃO\r\n-    // =======================================================\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n+// --- Lógica de inicialização que estava em initializeApp() ---\r\n+const today = new Date();\r\n+currentMonth = today.getMonth();\r\n+currentYear = today.getFullYear();\r\n \r\n-    // Função de ajuda para verificar a sessão e direcionar o utilizador\r\n-    const checkSessionAndHandleUI = async () => {\r\n-        try {\r\n-            const data = await api.checkSession();\r\n-            if (data.user.role === 'SuperAdmin') {\r\n-                isAdminLoggedIn = true;\r\n-                await showAdminDashboard();\r\n+const token = localStorage.getItem('authToken');\r\n+if (!token) {\r\n+    // Se não houver token, redireciona para a página de login\r\n+    window.location.href = 'Index.html';\r\n+    return;\r\n+}\r\n+\r\n+try {\r\n+    const data = await api.checkSession();\r\n+    if (data.user.role === 'SuperAdmin') {\r\n+        isAdminLoggedIn = true;\r\n+        await showAdminDashboard();\r\n+    } else {\r\n+        currentLoggedInUser = data.user;\r\n+        currentLoggedInCompany = data.company;\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            await showMainApp();\r\n+        } else {\r\n+            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                // Se for o dono da empresa, mostra o modal para renovar\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n             } else {\r\n-                currentLoggedInUser = data.user;\r\n-                currentLoggedInCompany = data.company;\r\n-                const subscription = currentLoggedInCompany.subscription;\r\n-                const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-                if (isSubscriptionActive) {\r\n-                    await showMainApp();\r\n-                } else {\r\n-                    if (currentLoggedInUser.role === 'Proprietário') {\r\n-                        showSubscriptionModal(currentLoggedInCompany);\r\n-                        const checkPaymentBtn = document.getElementById('checkPaymentStatusBtn');\r\n-                        if (urlParams.has('preapproval_id') && checkPaymentBtn) {\r\n-                            checkPaymentBtn.classList.remove('hidden');\r\n-                        }\r\n-                    } else {\r\n-                        showAccessBlockedModal();\r\n-                    }\r\n-                }\r\n+                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                showAccessBlockedModal();\r\n             }\r\n-        } catch (error) {\r\n-            showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-            logout(); // Chamada correta para a função de logout\r\n-        } finally {\r\n-            document.getElementById('loadingScreen').classList.add('hidden');\r\n         }\r\n-    };\r\n+    }\r\n+} catch (error) {\r\n+    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n+    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n+    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    setTimeout(() => {\r\n+        window.location.href = 'Index.html';\r\n+    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n+} finally {\r\n+    // Esconde a tela de carregamento inicial\r\n+    document.getElementById('loadingScreen').classList.add('hidden');\r\n+}\r\n \r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n+\r\n+// Submissão de formulários\r\n+if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+if (logoutBtn) {\r\n+    logoutBtn.addEventListener('click', () => {\r\n         window.location.href = 'Index.html';\r\n-        return;\r\n-    }\r\n+    });\r\n+}\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n \r\n-    // Executa a verificação inicial\r\n-    await checkSessionAndHandleUI();\r\n \r\n-    // Se o utilizador está a voltar do Mercado Pago, agenda uma nova verificação\r\n-    if (urlParams.has('preapproval_id')) {\r\n-        showToast('Aguarde um momento, estamos a confirmar o seu pagamento...', 'info');\r\n-        setTimeout(() => {\r\n-            console.log(\"A verificar novamente o status da assinatura após 5 segundos...\");\r\n-            checkSessionAndHandleUI();\r\n-        }, 5000); // Espera 5 segundos\r\n-    }\r\n-    \r\n-    // =======================================================\r\n-    // EVENT LISTENERS (COMPLETO E CORRIGIDO)\r\n-    // =======================================================\r\n+// Ações na App Principal\r\n+addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n \r\n-    // Submissão de formulários\r\n-    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-    if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-    if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-    if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+// Ações do Modal de Edição de Boleto\r\n+closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n \r\n-    // Botões de Logout\r\n-    if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n-    if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-    if (subscriptionLogoutBtn) subscriptionLogoutBtn.addEventListener('click', logout);\r\n-    if (blockedAccessLogoutBtn) blockedAccessLogoutBtn.addEventListener('click', logout);\r\n-    \r\n-    // Botão de verificação manual de pagamento\r\n-    const checkPaymentStatusBtn = document.getElementById('checkPaymentStatusBtn');\r\n-    if (checkPaymentStatusBtn) {\r\n-        checkPaymentStatusBtn.addEventListener('click', async () => {\r\n-            checkPaymentStatusBtn.disabled = true;\r\n-            checkPaymentStatusBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A verificar...';\r\n-            await checkSessionAndHandleUI();\r\n-            \r\n-            setTimeout(() => {\r\n-                checkPaymentStatusBtn.disabled = false;\r\n-                checkPaymentStatusBtn.innerHTML = '<i class=\"fas fa-sync-alt mr-2\"></i> Já paguei, verificar status';\r\n-            }, 3000);\r\n-        });\r\n-    }\r\n+// Navegação do Calendário\r\n+prevMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+    if (currentMonth === 11) currentYear--;\r\n+    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n+    applyFiltersAndSearch(); \r\n+});\r\n \r\n-    if (subscriptionActionBtn) subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+nextMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+    if (currentMonth === 0) currentYear++;\r\n+    // A mesma mudança aqui\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+}\r\n \r\n-    // Ações na App Principal\r\n-    if(addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-    if(closeAddBillModalBtn) closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+if (openAddBillModalBtn) {\r\n+    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+}\r\n \r\n-    // Ações do Modal de Edição de Boleto\r\n-    if(closeModalBtn) closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-    if(saveBillBtn) saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-    if(deleteBillBtn) deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-    if(deleteEntireBillBtn) deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-    if(closeFullScreenBarcodeBtn) closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+const handleRedirectToHome = () => {\r\n+    window.location.href = 'Index.html';\r\n+};\r\n \r\n-    // Navegação do Calendário\r\n-    if(prevMonthBtn) prevMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-        if (currentMonth === 11) currentYear--;\r\n-        applyFiltersAndSearch(); \r\n+const handleFullLogoutAndRedirect = () => {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+if (subscriptionLogoutBtn) {\r\n+    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+}\r\n+\r\n+if (blockedAccessLogoutBtn) {\r\n+    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n     });\r\n-    if(nextMonthBtn) nextMonthBtn.addEventListener('click', () => {\r\n-        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-        if (currentMonth === 0) currentYear++;\r\n-        applyFiltersAndSearch(); \r\n+}\r\n+\r\n+// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+if (settingsBtn) {\r\n+    settingsBtn.addEventListener('click', (e) => {\r\n+        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+        settingsDropdown.classList.toggle('hidden');\r\n     });\r\n-    \r\n-    // Máscara de CNPJ\r\n-    if (addCompanyCnpjInput) {\r\n-        IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-    }\r\n+}\r\n \r\n-    // Botão flutuante\r\n-    if (openAddBillModalBtn) {\r\n-        openAddBillModalBtn.addEventListener('click', () => openAddBillModal());\r\n+// Links dentro do menu dropdown\r\n+if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCompanyInfoModal();\r\n+});\r\n+\r\n+if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openPermissionsModal();\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n     }\r\n+});\r\n \r\n-    // Lógica do Menu de Configurações (Engrenagem)\r\n-    if (settingsBtn) {\r\n-        settingsBtn.addEventListener('click', (e) => {\r\n-            e.stopPropagation();\r\n-            settingsDropdown.classList.toggle('hidden');\r\n-        });\r\n+// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openManageUsersModal();\r\n+});\r\n+\r\n+// Botões do modal de gerir utilizadores\r\n+if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+    manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+    openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+});\r\n+\r\n+/**\r\n+ * Lida com o clique no botão de criar/renovar assinatura.\r\n+ */\r\n+async function handleCreateSubscription() {\r\n+    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+    subscriptionActionBtn.disabled = true;\r\n+    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+    try {\r\n+        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+        const data = await api.createSubscriptionLink();\r\n+\r\n+        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+        if (data.init_point) {\r\n+            window.location.href = data.init_point;\r\n+        } else {\r\n+            throw new Error('Link de pagamento não recebido.');\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+        subscriptionActionBtn.disabled = false;\r\n+        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n     }\r\n+}\r\n \r\n-    // Fechar dropdown ao clicar fora\r\n-    window.addEventListener('click', () => {\r\n-        if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-            settingsDropdown.classList.add('hidden');\r\n-        }\r\n+// Liga a função ao clique do botão.\r\n+if (subscriptionActionBtn) {\r\n+    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+}\r\n+\r\n+if (closePreviewModalBtn) {\r\n+    closePreviewModalBtn.addEventListener('click', () => {\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n     });\r\n+}\r\n \r\n-    // Links dentro do menu dropdown\r\n-    if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => { e.preventDefault(); settingsDropdown.classList.add('hidden'); openCompanyInfoModal(); });\r\n-    if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => { e.preventDefault(); settingsDropdown.classList.add('hidden'); openPermissionsModal(); });\r\n-    if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => { e.preventDefault(); settingsDropdown.classList.add('hidden'); openManageUsersModal(); });\r\n-    if (menuCategorias) menuCategorias.addEventListener('click', (e) => { e.preventDefault(); settingsDropdown.classList.add('hidden'); openCategoriesModal(); });\r\n+if (nfeXmlInput) {\r\n+    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+}\r\n \r\n-    // Modais de Gestão de Utilizadores\r\n-    if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-    if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => { manageUsersModal.classList.add('hidden'); openAddUserModal(); });\r\n+if (previewBillNameInput) {\r\n+    previewBillNameInput.addEventListener('input', (e) => {\r\n+        if (currentBill) {\r\n+            currentBill.name = e.target.value;\r\n+        }\r\n+    });\r\n+}\r\n \r\n-    // Modal de Pré-visualização de Parcelas\r\n-    if (closePreviewModalBtn) closePreviewModalBtn.addEventListener('click', () => installmentsPreviewModal.classList.add('hidden'));\r\n-    if (nfeXmlInput) nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-    if (previewBillNameInput) previewBillNameInput.addEventListener('input', (e) => { if (currentBill) currentBill.name = e.target.value; });\r\n+// Liga a função ao clique do botão\r\n+if (showFullScreenBarcodeBtn) {\r\n+    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+}\r\n \r\n-    // Modal de Código de Barras\r\n-    if (showFullScreenBarcodeBtn) showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+// Listener para o campo de pesquisa\r\n+if (searchInput) {\r\n+    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+}\r\n \r\n-    // Filtros e Pesquisa\r\n-    if (searchInput) searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-    if (filterButtons) {\r\n-        filterButtons.forEach(button => {\r\n-            button.addEventListener('click', (e) => {\r\n-                filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-                e.currentTarget.classList.add('active');\r\n-                applyFiltersAndSearch();\r\n-            });\r\n+// Listeners para os botões de filtro\r\n+if (filterButtons) {\r\n+    filterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões\r\n+            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona a classe 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Aplica o filtro\r\n+            applyFiltersAndSearch();\r\n         });\r\n-    }\r\n+    });\r\n+}\r\n \r\n-    // Gestão de Categorias\r\n-    if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-    if (addCategoryForm) addCategoryForm.addEventListener('submit', async (e) => {\r\n+if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCategoriesModal();\r\n+});\r\n+\r\n+if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+if (addCategoryForm) {\r\n+    addCategoryForm.addEventListener('submit', async (e) => {\r\n         e.preventDefault();\r\n         const name = newCategoryNameInput.value.trim();\r\n         if (!name) return;\r\n         try {\r\n             await api.createCategory(name);\r\n             newCategoryNameInput.value = '';\r\n-            await openCategoriesModal();\r\n-            await populateCategoryFilter();\r\n-        } catch (error) { showToast(error.message, 'error'); }\r\n+            await openCategoriesModal(); // Recarrega a lista do modal\r\n+            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n     });\r\n-    if (categoryListDiv) {\r\n-        categoryListDiv.addEventListener('click', async (e) => {\r\n-            const editBtn = e.target.closest('.edit-category-btn');\r\n-            const deleteBtn = e.target.closest('.delete-category-btn');\r\n-            if (editBtn) {\r\n-                const { id, name } = editBtn.dataset;\r\n-                const newName = prompt(\"Editar nome da categoria:\", name);\r\n-                if (newName && newName.trim() && newName.trim() !== name) {\r\n-                    await api.updateCategory(id, newName.trim());\r\n-                    await openCategoriesModal();\r\n-                    await populateCategoryFilter();\r\n-                }\r\n+}\r\n+\r\n+if (categoryListDiv) {\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n             }\r\n-            if (deleteBtn) {\r\n-                const { id } = deleteBtn.dataset;\r\n-                if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                    await api.deleteCategory(id);\r\n-                    await openCategoriesModal();\r\n-                    await populateCategoryFilter();\r\n-                }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n             }\r\n-        });\r\n-    }\r\n-    if (categoryFilterSelect) categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+        }\r\n+    });\r\n+}\r\n \r\n-    // Navegação de Vistas (Calendário/Dashboard)\r\n-    if (viewCalendarBtn) viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-    if (viewDashboardBtn) viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-    \r\n-    // Filtros do Dashboard\r\n-    if (dateRangePresetSelect) dateRangePresetSelect.addEventListener('change', () => {\r\n+if (categoryFilterSelect) {\r\n+    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Configuração dos botões do dashboard\r\n+if (viewCalendarBtn) {\r\n+    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+}\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+if (dateRangePresetSelect) {\r\n+    dateRangePresetSelect.addEventListener('change', () => {\r\n         const isCustom = dateRangePresetSelect.value === 'custom';\r\n         customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n-        if (!isCustom) renderDashboard();\r\n+\r\n+        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n+        // o dashboard é atualizado imediatamente.\r\n+        if (!isCustom) {\r\n+            renderDashboard();\r\n+        }\r\n     });\r\n-    if (startDateInput) startDateInput.addEventListener('change', () => { if (endDateInput.value) renderDashboard(); });\r\n-    if (endDateInput) endDateInput.addEventListener('change', () => { if (startDateInput.value) renderDashboard(); });\r\n+}\r\n \r\n-    // Botões de Exportação\r\n-    if (exportCsvBtn) exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n-    if (exportPdfBtn) exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n+// Para o intervalo personalizado, atualizamos o dashboard\r\n+// assim que ambas as datas estiverem preenchidas.\r\n+if (startDateInput) {\r\n+    startDateInput.addEventListener('change', () => {\r\n+        if (endDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+if (endDateInput) {\r\n+    endDateInput.addEventListener('change', () => {\r\n+        if (startDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n \r\n-    // Botões de Modo de Adição de Boleto\r\n-    if (manualAddBtn) manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-    if (xmlAddBtn) xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-    if (csvImportBtn) csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n \r\n-    // Lógica de Importação CSV\r\n-    if (csvFileInput) csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n-    if (importCsvBtn) importCsvBtn.addEventListener('click', handleConfirmImport);\r\n+// Listeners para os botões de exportação\r\n+const handleExport = (format) => {\r\n+    // 1. Pega no período de tempo atual do filtro do dashboard\r\n+    const dateRange = getDateRangeFromPreset();\r\n \r\n-    // Ações em Massa\r\n-    if (markSelectedAsPaidBtn) markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n-    if (selectAllVisibleBtn) selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n-    if (deselectAllVisibleBtn) deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n+    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n+    const queryString = new URLSearchParams(dateRange).toString();\r\n \r\n-    // Filtros de Status do Dashboard\r\n-    if (dashboardFilterButtons) {\r\n-        dashboardFilterButtons.forEach(button => {\r\n-            button.addEventListener('click', (e) => {\r\n-                dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n-                e.currentTarget.classList.add('active');\r\n-                dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n-                renderDashboard();\r\n-            });\r\n+    // 3. Monta o URL completo para o download\r\n+    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n+    \r\n+    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n+    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n+    fetch(downloadUrl, {\r\n+        headers: {\r\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n+        }\r\n+    })\r\n+    .then(res => res.blob())\r\n+    .then(blob => {\r\n+        const url = window.URL.createObjectURL(blob);\r\n+        const a = document.createElement('a');\r\n+        a.style.display = 'none';\r\n+        a.href = url;\r\n+        a.download = `relatorio-despesas.${format}`;\r\n+        document.body.appendChild(a);\r\n+        a.click();\r\n+        window.URL.revokeObjectURL(url);\r\n+        a.remove();\r\n+    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n+};\r\n+\r\n+if (exportCsvBtn) {\r\n+    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+}\r\n+if (exportPdfBtn) {\r\n+    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n+}\r\n+\r\n+if (manualAddBtn) {\r\n+    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+}\r\n+if (xmlAddBtn) {\r\n+    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+}\r\n+\r\n+if (csvImportBtn) {\r\n+    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n+}\r\n+if (csvFileInput) {\r\n+    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n+}\r\n+if (importCsvBtn) {\r\n+    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n+}\r\n+if (markSelectedAsPaidBtn) {\r\n+    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n+}\r\n+if (selectAllVisibleBtn) {\r\n+    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n+}\r\n+\r\n+if (deselectAllVisibleBtn) {\r\n+    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n+}\r\n+if (dashboardFilterButtons) {\r\n+    dashboardFilterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões do dashboard\r\n+            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Atualiza a variável de estado com o novo filtro\r\n+            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n+            // Renderiza o dashboard novamente com os dados filtrados\r\n+            renderDashboard();\r\n         });\r\n-    }\r\n-    \r\n-    // Alteração de Categoria em Massa\r\n-    if (changeCategoryBtn) changeCategoryBtn.addEventListener('click', async () => {\r\n+    });\r\n+}\r\n+// Abre o modal de alteração de categoria\r\n+if (changeCategoryBtn) {\r\n+    changeCategoryBtn.addEventListener('click', async () => {\r\n         showLoader();\r\n+        // Popula o dropdown do modal com as categorias existentes\r\n         await populateCategorySelect(batchCategorySelect);\r\n         hideLoader();\r\n         categoryBatchModal.classList.remove('hidden');\r\n     });\r\n-    if (cancelCategoryBatchBtn) cancelCategoryBatchBtn.addEventListener('click', () => categoryBatchModal.classList.add('hidden'));\r\n-    if (confirmCategoryBatchBtn) confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n+}\r\n+\r\n+// Botão de cancelar no modal\r\n+if (cancelCategoryBatchBtn) {\r\n+    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n+        categoryBatchModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de confirmar a alteração\r\n+if (confirmCategoryBatchBtn) {\r\n+    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n         const categoryId = batchCategorySelect.value;\r\n+        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n         const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n-        if (boletoIds.length === 0) return showToast('Nenhum item selecionado.', 'info');\r\n+\r\n+        if (boletoIds.length === 0) {\r\n+            return showToast('Nenhum item selecionado.', 'info');\r\n+        }\r\n+\r\n         showLoader();\r\n         try {\r\n             const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n             showToast(response.message, 'success');\r\n@@ -2727,8 +2894,11 @@\n             hideLoader();\r\n             categoryBatchModal.classList.add('hidden');\r\n         }\r\n     });\r\n+}\r\n \r\n-    // Inicialização de Funcionalidades Especiais\r\n-    initializeDashboardDragAndDrop(); \r\n+// CHAME A NOVA FUNÇÃO AQUI\r\n+initializeDashboardDragAndDrop(); \r\n+\r\n+\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753732236241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1947,14 +1947,12 @@\n             const xmlString = e.target.result;\r\n             const parser = new DOMParser();\r\n             const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n \r\n-            // Valida se o ficheiro é um XML de NFe antes de continuar\r\n             if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n                 throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n             }\r\n \r\n-            // Define os nós principais para evitar procuras repetidas\r\n             const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n             const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n             const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n \r\n@@ -1964,16 +1962,14 @@\n \r\n             let parcelsData = [];\r\n \r\n             if (duplicatas.length > 0) {\r\n-                // --- CENÁRIO 1: Encontrou as tags <dup> (padrão) ---\r\n                 parcelsData = duplicatas.map((dup, i) => ({\r\n                     number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n                     amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n                     dueDate: getTagValue(\"dVenc\", dup)\r\n                 }));\r\n             } else {\r\n-                // --- CENÁRIO 2: Procura por informações de cobrança no texto ---\r\n                 const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n                 const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n \r\n                 if (cobrancaMatch && cobrancaMatch[1]) {\r\n@@ -1994,10 +1990,10 @@\n                 }\r\n             }\r\n \r\n             if (parcelsData.length > 0) {\r\n-                // --- Se encontrou parcelas (por qualquer método), vai para a pré-visualização ---\r\n-                currentBill = { name: `NFe - ${nomeFornecedor}`, nfeNumber: nfeNumber, parcels: parcelsData };\r\n+                // ALTERAÇÃO AQUI: Removemos o prefixo \"NFe - \" do nome.\r\n+                currentBill = { name: nomeFornecedor, nfeNumber: nfeNumber, parcels: parcelsData };\r\n \r\n                 installmentsList.innerHTML = '';\r\n                 currentBill.parcels.forEach((parcel, index) => {\r\n                     installmentsList.insertAdjacentHTML('beforeend', `\r\n@@ -2017,13 +2013,13 @@\n                 await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n                 installmentsPreviewModal.classList.remove('hidden');\r\n \r\n             } else {\r\n-                // --- CENÁRIO 3: Não encontrou parcelas, preenche o formulário manual ---\r\n                 const valorNFe = getTagValue(\"vNF\", totalNode);\r\n                 const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n \r\n-                document.getElementById('billName').value = `NFe - ${nomeFornecedor}`;\r\n+                // ALTERAÇÃO AQUI TAMBÉM: Removemos o prefixo no caso de fallback.\r\n+                document.getElementById('billName').value = nomeFornecedor;\r\n                 document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n                 if (vencimento) {\r\n                     document.getElementById('dueDate').value = vencimento;\r\n                 }\r\n@@ -2036,9 +2032,8 @@\n         } catch (error) {\r\n             showToast(error.message, 'error');\r\n             console.error(\"Erro ao processar XML:\", error);\r\n         } finally {\r\n-            // Limpa o valor do input para permitir o upload do mesmo ficheiro novamente\r\n             event.target.value = '';\r\n         }\r\n     };\r\n \r\n"
                },
                {
                    "date": 1753732417188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1098,9 +1098,9 @@\n         type: 'bar',\r\n         data: {\r\n             labels: labels,\r\n             datasets: [{\r\n-                label: 'Total Pago por Mês',\r\n+                label: 'Total',\r\n                 data: values,\r\n                 backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n                 borderColor: 'rgba(79, 70, 229, 1)',\r\n                 borderWidth: 1\r\n"
                },
                {
                    "date": 1753740779929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,18 +180,20 @@\n const batchCategorySelect = document.getElementById('batchCategorySelect');\r\n const cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\n const confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n \r\n+const openProfileModalBtn = document.getElementById('openProfileModalBtn');\r\n+const profileModal = document.getElementById('profileModal');\r\n+const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\n+const profileUsername = document.getElementById('profileUsername');\r\n+const profileRole = document.getElementById('profileRole');\r\n+const profileCompany = document.getElementById('profileCompany');\r\n+\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n /**\r\n- * Atualiza o resumo mensal com base numa lista específica de boletos.\r\n- * Por padrão, usa a lista completa de boletos do utilizador.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada para o resumo.\r\n- */\r\n-/**\r\n  * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n  * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n  */\r\n function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n@@ -1496,8 +1498,27 @@\n     // Atualiza o botão (que será escondido, pois a contagem é 0)\r\n     updateMassPaymentButton();\r\n }\r\n \r\n+/**\r\n+ * Busca os dados do utilizador e abre o modal de perfil.\r\n+ */\r\n+async function openProfileModal() {\r\n+    // Usa as variáveis globais que já temos da inicialização\r\n+    if (!currentLoggedInUser || !currentLoggedInCompany) {\r\n+        showToast('Não foi possível carregar os dados do perfil.', 'error');\r\n+        return;\r\n+    }\r\n+\r\n+    // Preenche o modal com os dados\r\n+    profileUsername.textContent = currentLoggedInUser.username;\r\n+    profileRole.textContent = currentLoggedInUser.role;\r\n+    profileCompany.textContent = currentLoggedInCompany.nomeEmpresa;\r\n+\r\n+    // Mostra o modal\r\n+    profileModal.classList.remove('hidden');\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753740863752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2911,8 +2911,10 @@\n             categoryBatchModal.classList.add('hidden');\r\n         }\r\n     });\r\n }\r\n+if (openProfileModalBtn) {openProfileModalBtn.addEventListener('click', openProfileModal);}\r\n+if (closeProfileModalBtn) {closeProfileModalBtn.addEventListener('click', () => {profileModal.classList.add('hidden');});}\r\n \r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n"
                },
                {
                    "date": 1753740876363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2911,10 +2911,16 @@\n             categoryBatchModal.classList.add('hidden');\r\n         }\r\n     });\r\n }\r\n-if (openProfileModalBtn) {openProfileModalBtn.addEventListener('click', openProfileModal);}\r\n-if (closeProfileModalBtn) {closeProfileModalBtn.addEventListener('click', () => {profileModal.classList.add('hidden');});}\r\n+if (openProfileModalBtn) {\r\n+    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n+}\r\n+if (closeProfileModalBtn) {\r\n+    closeProfileModalBtn.addEventListener('click', () => {\r\n+        profileModal.classList.add('hidden');\r\n+    });\r\n+}\r\n \r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n"
                },
                {
                    "date": 1753741223431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,8 +186,9 @@\n const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\n const profileUsername = document.getElementById('profileUsername');\r\n const profileRole = document.getElementById('profileRole');\r\n const profileCompany = document.getElementById('profileCompany');\r\n+const changePasswordForm = document.getElementById('changePasswordForm');\r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n@@ -2443,9 +2444,36 @@\n         }\r\n     });\r\n }\r\n \r\n+/**\r\n+ * Lida com a submissão do formulário de alteração de senha.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleChangePassword(e) {\r\n+    e.preventDefault(); // Impede o recarregamento da página\r\n \r\n+    const currentPassword = document.getElementById('currentPassword').value;\r\n+    const newPassword = document.getElementById('newPassword').value;\r\n+    const confirmPassword = document.getElementById('confirmPassword').value;\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.changePassword({ currentPassword, newPassword, confirmPassword });\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Limpa os campos e fecha o modal após o sucesso\r\n+        changePasswordForm.reset();\r\n+        profileModal.classList.add('hidden');\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+\r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753741248090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2947,8 +2947,11 @@\n     closeProfileModalBtn.addEventListener('click', () => {\r\n         profileModal.classList.add('hidden');\r\n     });\r\n }\r\n+if (changePasswordForm) {\r\n+    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n+}\r\n \r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n"
                },
                {
                    "date": 1753741699600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,8 +187,10 @@\n const profileUsername = document.getElementById('profileUsername');\r\n const profileRole = document.getElementById('profileRole');\r\n const profileCompany = document.getElementById('profileCompany');\r\n const changePasswordForm = document.getElementById('changePasswordForm');\r\n+const verificationNotice = document.getElementById('verificationNotice');\r\n+const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n@@ -806,16 +808,24 @@\n  */\r\n async function openCompanyInfoModal() {\r\n     showLoader();\r\n     try {\r\n+        // A chamada à API já retorna os dados completos da empresa, incluindo 'isVerified'\r\n         const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n \r\n         document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n         document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n         document.getElementById('companyInfoEmail').value = company.email || '';\r\n         document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n         document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n \r\n+        // LÓGICA PARA MOSTRAR/ESCONDER O AVISO\r\n+        if (company.isVerified) {\r\n+            verificationNotice.classList.add('hidden');\r\n+        } else {\r\n+            verificationNotice.classList.remove('hidden');\r\n+        }\r\n+\r\n         IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n         IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n \r\n         companyInfoModal.classList.remove('hidden');\r\n"
                },
                {
                    "date": 1753741718743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2960,9 +2960,25 @@\n }\r\n if (changePasswordForm) {\r\n     changePasswordForm.addEventListener('submit', handleChangePassword);\r\n }\r\n+if (resendVerificationBtn) {\r\n+    resendVerificationBtn.addEventListener('click', async () => {\r\n+        resendVerificationBtn.disabled = true;\r\n+        resendVerificationBtn.textContent = 'A reenviar...';\r\n \r\n+        try {\r\n+            const data = await api.resendVerificationEmail();\r\n+            showToast(data.message, 'success');\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            resendVerificationBtn.disabled = false;\r\n+            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n+        }\r\n+    });\r\n+}\r\n+\r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n \r\n"
                },
                {
                    "date": 1753742455653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1646,58 +1646,58 @@\n \r\n async function handleCalculateInstallments(e) {\r\n     e.preventDefault();\r\n     const billName = document.getElementById('billName').value;\r\n-    const categoryId = billCategorySelect.value;\r\n     const dueDate = document.getElementById('dueDate').value;\r\n     const totalAmountInput = document.getElementById('totalAmount').value;\r\n     let cleanedAmountString = totalAmountInput.replace(',', '.');\r\n     cleanedAmountString = cleanedAmountString.replace(/[^\\d.]/g, '');\r\n     const totalAmount = parseFloat(cleanedAmountString);\r\n     const installments = parseInt(document.getElementById('installments').value);\r\n     const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n     const description = document.getElementById('description').value;\r\n-    const barcode = document.getElementById('barcode').value;\r\n \r\n+    // LINHAS REMOVIDAS: Não precisamos mais de ler a categoria ou o código de barras aqui.\r\n+    // const categoryId = billCategorySelect.value;\r\n+    // const barcode = document.getElementById('barcode').value;\r\n+\r\n     if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments) || totalAmount <= 0 || installments <= 0) {\r\n         return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n     }\r\n \r\n     currentBill = {\r\n         name: billName,\r\n         description,\r\n         parcels: [],\r\n-        category: categoryId || null\r\n+        // O campo 'category' será definido na tela de pré-visualização.\r\n+        category: null \r\n     };\r\n \r\n-    // Certifique-se de que o parcelAmount seja calculado com o totalAmount correto\r\n     const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n     installmentsList.innerHTML = '';\r\n \r\n     for (let i = 0; i < installments; i++) {\r\n         const parcelDate = new Date(dueDate + 'T00:00:00');\r\n         parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n         const dateForInput = parcelDate.toISOString().split('T')[0];\r\n \r\n-        // O barcode de cada parcela começa com o valor do campo principal (se houver)\r\n-        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: barcode || '' });\r\n+        // O código de barras de cada parcela agora começa vazio.\r\n+        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: '' });\r\n \r\n-        // Grelha atualizada para 12 colunas para acomodar o novo campo\r\n         installmentsList.insertAdjacentHTML('beforeend', `\r\n             <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n                 <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n                 <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n                 <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"${barcode || ''}\" data-parcel-index=\"${i}\"></div>\r\n+                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${i}\"></div>\r\n             </div>\r\n         `);\r\n     }\r\n \r\n-    // Adiciona os eventos para os novos inputs\r\n     addEventListenersToInstallmentInputs();\r\n     updatePreviewTotal();\r\n     previewBillNameInput.value = currentBill.name;\r\n-    previewNfeNumber.textContent = 'N/A'; // NFe não é aplicável para adição manual sem XML\r\n+    previewNfeNumber.textContent = 'N/A';\r\n     addBillModal.classList.add('hidden');\r\n     await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n     installmentsPreviewModal.classList.remove('hidden');\r\n }\r\n"
                },
                {
                    "date": 1753743205701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -948,18 +948,19 @@\n     clearBillForm();\r\n     switchAddBillMode('manual');\r\n     showLoader();\r\n     try {\r\n-        const categories = await api.getCategories();\r\n-        billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        // LINHAS REMOVIDAS: As linhas abaixo que manipulavam\r\n+        // o 'billCategorySelect' foram apagadas para corrigir o erro.\r\n+        // const categories = await api.getCategories();\r\n+        // billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        // categories.forEach(category => {\r\n+        //     const option = document.createElement('option');\r\n+        //     option.value = category._id;\r\n+        //     option.textContent = category.name;\r\n+        //     billCategorySelect.appendChild(option);\r\n+        // });\r\n \r\n-        categories.forEach(category => {\r\n-            const option = document.createElement('option');\r\n-            option.value = category._id;\r\n-            option.textContent = category.name;\r\n-            billCategorySelect.appendChild(option);\r\n-        });\r\n-\r\n         // Se uma data foi passada como parâmetro, nós a preenchemos\r\n         if (preselectedDate) {\r\n             document.getElementById('dueDate').value = preselectedDate;\r\n         }\r\n"
                },
                {
                    "date": 1753745397241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -948,19 +948,8 @@\n     clearBillForm();\r\n     switchAddBillMode('manual');\r\n     showLoader();\r\n     try {\r\n-        // LINHAS REMOVIDAS: As linhas abaixo que manipulavam\r\n-        // o 'billCategorySelect' foram apagadas para corrigir o erro.\r\n-        // const categories = await api.getCategories();\r\n-        // billCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-        // categories.forEach(category => {\r\n-        //     const option = document.createElement('option');\r\n-        //     option.value = category._id;\r\n-        //     option.textContent = category.name;\r\n-        //     billCategorySelect.appendChild(option);\r\n-        // });\r\n-\r\n         // Se uma data foi passada como parâmetro, nós a preenchemos\r\n         if (preselectedDate) {\r\n             document.getElementById('dueDate').value = preselectedDate;\r\n         }\r\n"
                },
                {
                    "date": 1753745519106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,8 +190,11 @@\n const changePasswordForm = document.getElementById('changePasswordForm');\r\n const verificationNotice = document.getElementById('verificationNotice');\r\n const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n \r\n+const recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\n+const recurrentAddForm = document.getElementById('recurrent-add-form');\r\n+\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n@@ -1291,19 +1294,22 @@\n  * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n  * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n  */\r\n function switchAddBillMode(mode) {\r\n-    if (!manualAddForm || !xmlAddForm || !csvImportForm) return;\r\n+    if (!manualAddForm || !xmlAddForm || !csvImportForm || !recurrentAddForm) return;\r\n \r\n     // Esconde todos os painéis\r\n     manualAddForm.classList.add('hidden');\r\n     xmlAddForm.classList.add('hidden');\r\n     csvImportForm.classList.add('hidden');\r\n+    recurrentAddForm.classList.add('hidden'); // Esconde o novo painel\r\n \r\n     // Reseta o estilo de todos os botões\r\n-    [manualAddBtn, xmlAddBtn, csvImportBtn].forEach(btn => {\r\n-        btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-        btn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+    [manualAddBtn, xmlAddBtn, csvImportBtn, recurrentAddBtn].forEach(btn => { // Adiciona o novo botão\r\n+        if(btn) {\r\n+            btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+            btn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+        }\r\n     });\r\n \r\n     // Ativa o painel e o botão corretos\r\n     let activeBtn, activeForm;\r\n@@ -1312,8 +1318,11 @@\n         activeForm = manualAddForm;\r\n     } else if (mode === 'xml') {\r\n         activeBtn = xmlAddBtn;\r\n         activeForm = xmlAddForm;\r\n+    } else if (mode === 'recurrent') { // Adiciona a nova condição\r\n+        activeBtn = recurrentAddBtn;\r\n+        activeForm = recurrentAddForm;\r\n     } else if (mode === 'csv') {\r\n         activeBtn = csvImportBtn;\r\n         activeForm = csvImportForm;\r\n     }\r\n@@ -1635,62 +1644,77 @@\n }\r\n \r\n async function handleCalculateInstallments(e) {\r\n     e.preventDefault();\r\n-    const billName = document.getElementById('billName').value;\r\n-    const dueDate = document.getElementById('dueDate').value;\r\n-    const totalAmountInput = document.getElementById('totalAmount').value;\r\n-    let cleanedAmountString = totalAmountInput.replace(',', '.');\r\n-    cleanedAmountString = cleanedAmountString.replace(/[^\\d.]/g, '');\r\n-    const totalAmount = parseFloat(cleanedAmountString);\r\n-    const installments = parseInt(document.getElementById('installments').value);\r\n-    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-    const description = document.getElementById('description').value;\r\n \r\n-    // LINHAS REMOVIDAS: Não precisamos mais de ler a categoria ou o código de barras aqui.\r\n-    // const categoryId = billCategorySelect.value;\r\n-    // const barcode = document.getElementById('barcode').value;\r\n+    // Descobre qual aba está ativa\r\n+    const activeMode = document.querySelector('#addBillModal .bg-indigo-600').id;\r\n \r\n-    if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments) || totalAmount <= 0 || installments <= 0) {\r\n-        return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n-    }\r\n+    if (activeMode === 'manual-add-btn') {\r\n+        // --- LÓGICA EXISTENTE PARA ADIÇÃO MANUAL ---\r\n+        const billName = document.getElementById('billName').value;\r\n+        const dueDate = document.getElementById('dueDate').value;\r\n+        const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(',', '.'));\r\n+        const installments = parseInt(document.getElementById('installments').value);\r\n+        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+        const description = document.getElementById('description').value;\r\n \r\n-    currentBill = {\r\n-        name: billName,\r\n-        description,\r\n-        parcels: [],\r\n-        // O campo 'category' será definido na tela de pré-visualização.\r\n-        category: null \r\n-    };\r\n+        if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments) || totalAmount <= 0 || installments <= 0) {\r\n+            return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n+        }\r\n \r\n-    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-    installmentsList.innerHTML = '';\r\n+        currentBill = { name: billName, description, parcels: [], category: null };\r\n+        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n \r\n-    for (let i = 0; i < installments; i++) {\r\n-        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n+        for (let i = 0; i < installments; i++) {\r\n+            const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+            parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+            currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n+        }\r\n \r\n-        // O código de barras de cada parcela agora começa vazio.\r\n-        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput, barcode: '' });\r\n+    } else if (activeMode === 'recurrent-add-btn') {\r\n+        // --- NOVA LÓGICA PARA PAGAMENTO RECORRENTE ---\r\n+        const billName = document.getElementById('recurrentBillName').value;\r\n+        const startDate = document.getElementById('recurrentStartDate').value;\r\n+        const amount = parseFloat(document.getElementById('recurrentAmount').value);\r\n+        const months = parseInt(document.getElementById('recurrentInstallments').value);\r\n+        const description = document.getElementById('recurrentDescription').value;\r\n \r\n-        installmentsList.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${i + 1}</span></div>\r\n-                <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${dateForInput}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcelAmount.toFixed(2)}\" data-parcel-index=\"${i}\"></div>\r\n-                <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${i}\"></div>\r\n-            </div>\r\n-        `);\r\n+        if (!billName || !startDate || isNaN(amount) || isNaN(months) || amount <= 0 || months <= 0) {\r\n+            return showToast(\"Preencha todos os campos do pagamento recorrente.\", \"error\");\r\n+        }\r\n+\r\n+        currentBill = { name: billName, description, parcels: [], category: null };\r\n+\r\n+        for (let i = 0; i < months; i++) {\r\n+            const parcelDate = new Date(startDate + 'T00:00:00');\r\n+            parcelDate.setMonth(parcelDate.getMonth() + i);\r\n+            currentBill.parcels.push({ number: i + 1, amount: amount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n+        }\r\n     }\r\n \r\n-    addEventListenersToInstallmentInputs();\r\n-    updatePreviewTotal();\r\n-    previewBillNameInput.value = currentBill.name;\r\n-    previewNfeNumber.textContent = 'N/A';\r\n-    addBillModal.classList.add('hidden');\r\n-    await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n-    installmentsPreviewModal.classList.remove('hidden');\r\n+    // O resto da função que mostra a pré-visualização permanece o mesmo\r\n+    if (currentBill && currentBill.parcels.length > 0) {\r\n+        installmentsList.innerHTML = '';\r\n+        currentBill.parcels.forEach((parcel, index) => {\r\n+             installmentsList.insertAdjacentHTML('beforeend', `\r\n+                <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                    <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                    <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                    <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                    <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                </div>\r\n+            `);\r\n+        });\r\n+\r\n+        addEventListenersToInstallmentInputs();\r\n+        updatePreviewTotal();\r\n+        previewBillNameInput.value = currentBill.name;\r\n+        previewNfeNumber.textContent = 'N/A';\r\n+        addBillModal.classList.add('hidden');\r\n+        await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n+        installmentsPreviewModal.classList.remove('hidden');\r\n+    }\r\n }\r\n \r\n /**\r\n  * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n@@ -2966,8 +2990,11 @@\n             resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n         }\r\n     });\r\n }\r\n+if (recurrentAddBtn) {\r\n+    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n+}\r\n \r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n"
                },
                {
                    "date": 1753745790720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -942,24 +942,29 @@\n     });\r\n }\r\n \r\n /**\r\n- * Abre o modal para adicionar um novo boleto, buscando as categorias\r\n+ * Abre o modal para adicionar um novo boleto,\r\n  * e opcionalmente pré-preenchendo a data.\r\n  * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n  */\r\n async function openAddBillModal(preselectedDate = null) {\r\n     clearBillForm();\r\n     switchAddBillMode('manual');\r\n     showLoader();\r\n     try {\r\n-        // Se uma data foi passada como parâmetro, nós a preenchemos\r\n+        // Se uma data foi passada como parâmetro (ou seja, o utilizador clicou no calendário)\r\n         if (preselectedDate) {\r\n+            // Preenche o campo da aba \"Adicionar Manual\" (comportamento que já existia)\r\n             document.getElementById('dueDate').value = preselectedDate;\r\n+\r\n+            // NOVA LINHA: Preenche também o campo da aba \"Pagamento Recorrente\"\r\n+            document.getElementById('recurrentStartDate').value = preselectedDate;\r\n         }\r\n \r\n         addBillModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n+    } catch (error)\r\n+ {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n     }\r\n"
                },
                {
                    "date": 1753746015407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1648,15 +1648,22 @@\n     });\r\n }\r\n \r\n async function handleCalculateInstallments(e) {\r\n-    e.preventDefault();\r\n+    e.preventDefault(); // Impede a submissão padrão do formulário\r\n \r\n-    // Descobre qual aba está ativa\r\n-    const activeMode = document.querySelector('#addBillModal .bg-indigo-600').id;\r\n+    // Descobre qual aba está ativa procurando pelo botão com a classe de fundo azul\r\n+    const activeTabButton = document.querySelector('#addBillModal .flex button.bg-indigo-600');\r\n+    if (!activeTabButton) {\r\n+        return showToast('Erro: Não foi possível identificar a aba ativa.', 'error');\r\n+    }\r\n+    const activeModeId = activeTabButton.id;\r\n \r\n-    if (activeMode === 'manual-add-btn') {\r\n-        // --- LÓGICA EXISTENTE PARA ADIÇÃO MANUAL ---\r\n+    // Limpa a variável `currentBill` antes de começar\r\n+    currentBill = null;\r\n+\r\n+    if (activeModeId === 'manual-add-btn') {\r\n+        // --- LÓGICA PARA ADIÇÃO MANUAL ---\r\n         const billName = document.getElementById('billName').value;\r\n         const dueDate = document.getElementById('dueDate').value;\r\n         const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(',', '.'));\r\n         const installments = parseInt(document.getElementById('installments').value);\r\n@@ -1675,10 +1682,10 @@\n             parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n             currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n         }\r\n \r\n-    } else if (activeMode === 'recurrent-add-btn') {\r\n-        // --- NOVA LÓGICA PARA PAGAMENTO RECORRENTE ---\r\n+    } else if (activeModeId === 'recurrent-add-btn') {\r\n+        // --- LÓGICA PARA PAGAMENTO RECORRENTE ---\r\n         const billName = document.getElementById('recurrentBillName').value;\r\n         const startDate = document.getElementById('recurrentStartDate').value;\r\n         const amount = parseFloat(document.getElementById('recurrentAmount').value);\r\n         const months = parseInt(document.getElementById('recurrentInstallments').value);\r\n@@ -1696,9 +1703,10 @@\n             currentBill.parcels.push({ number: i + 1, amount: amount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n         }\r\n     }\r\n \r\n-    // O resto da função que mostra a pré-visualização permanece o mesmo\r\n+    // --- LÓGICA COMUM PARA MOSTRAR A PRÉ-VISUALIZAÇÃO ---\r\n+    // Este bloco só será executado se `currentBill` tiver sido preenchido com sucesso\r\n     if (currentBill && currentBill.parcels.length > 0) {\r\n         installmentsList.innerHTML = '';\r\n         currentBill.parcels.forEach((parcel, index) => {\r\n              installmentsList.insertAdjacentHTML('beforeend', `\r\n"
                },
                {
                    "date": 1753746396886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1650,28 +1650,26 @@\n \r\n async function handleCalculateInstallments(e) {\r\n     e.preventDefault(); // Impede a submissão padrão do formulário\r\n \r\n-    // Descobre qual aba está ativa procurando pelo botão com a classe de fundo azul\r\n     const activeTabButton = document.querySelector('#addBillModal .flex button.bg-indigo-600');\r\n     if (!activeTabButton) {\r\n         return showToast('Erro: Não foi possível identificar a aba ativa.', 'error');\r\n     }\r\n     const activeModeId = activeTabButton.id;\r\n \r\n-    // Limpa a variável `currentBill` antes de começar\r\n     currentBill = null;\r\n \r\n     if (activeModeId === 'manual-add-btn') {\r\n-        // --- LÓGICA PARA ADIÇÃO MANUAL ---\r\n         const billName = document.getElementById('billName').value;\r\n         const dueDate = document.getElementById('dueDate').value;\r\n         const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(',', '.'));\r\n         const installments = parseInt(document.getElementById('installments').value);\r\n         const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n         const description = document.getElementById('description').value;\r\n \r\n-        if (!billName || !dueDate || isNaN(totalAmount) || isNaN(installments) || totalAmount <= 0 || installments <= 0) {\r\n+        // Validação feita aqui no JavaScript\r\n+        if (!billName || !dueDate || !installments || isNaN(totalAmount) || totalAmount <= 0 || installments <= 0) {\r\n             return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n         }\r\n \r\n         currentBill = { name: billName, description, parcels: [], category: null };\r\n@@ -1683,16 +1681,16 @@\n             currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n         }\r\n \r\n     } else if (activeModeId === 'recurrent-add-btn') {\r\n-        // --- LÓGICA PARA PAGAMENTO RECORRENTE ---\r\n         const billName = document.getElementById('recurrentBillName').value;\r\n         const startDate = document.getElementById('recurrentStartDate').value;\r\n         const amount = parseFloat(document.getElementById('recurrentAmount').value);\r\n         const months = parseInt(document.getElementById('recurrentInstallments').value);\r\n         const description = document.getElementById('recurrentDescription').value;\r\n \r\n-        if (!billName || !startDate || isNaN(amount) || isNaN(months) || amount <= 0 || months <= 0) {\r\n+        // Validação feita aqui no JavaScript\r\n+        if (!billName || !startDate || !months || isNaN(amount) || amount <= 0 || months <= 0) {\r\n             return showToast(\"Preencha todos os campos do pagamento recorrente.\", \"error\");\r\n         }\r\n \r\n         currentBill = { name: billName, description, parcels: [], category: null };\r\n@@ -1703,9 +1701,8 @@\n             currentBill.parcels.push({ number: i + 1, amount: amount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n         }\r\n     }\r\n \r\n-    // --- LÓGICA COMUM PARA MOSTRAR A PRÉ-VISUALIZAÇÃO ---\r\n     // Este bloco só será executado se `currentBill` tiver sido preenchido com sucesso\r\n     if (currentBill && currentBill.parcels.length > 0) {\r\n         installmentsList.innerHTML = '';\r\n         currentBill.parcels.forEach((parcel, index) => {\r\n"
                },
                {
                    "date": 1753747369476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n let parsedCsvData = [];\r\n let selectedParcels = new Set();\r\n let dashboardStatusFilter = 'all';\r\n let selectedItems = new Map();\r\n+let pendingUpdateData = null;\r\n \r\n // =================================================================================\r\n // ELEMENTOS DO DOM - Referências aos elementos HTML\r\n // =================================================================================\r\n@@ -192,8 +193,11 @@\n const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n \r\n const recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\n const recurrentAddForm = document.getElementById('recurrent-add-form');\r\n+const recurrentEditModal = document.getElementById('recurrentEditModal');\r\n+const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n+const singleParcelDate = document.getElementById('single-parcel-date');\r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n@@ -1753,8 +1757,10 @@\n }\r\n \r\n async function handleSaveChanges() {\r\n     if (!selectedParcel) return;\r\n+\r\n+    // Guarda os dados atualizados do formulário\r\n     const updatedParcelData = {\r\n         paid: modalBillPaidCheckbox.checked,\r\n         amount: parseFloat(modalBillAmount.value),\r\n         dueDate: modalBillDate.value,\r\n@@ -1764,20 +1770,35 @@\n     const updatedBillData = {\r\n         category: modalBillCategorySelect.value || null\r\n     };\r\n \r\n-    showLoader();\r\n-    try {\r\n-        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n-        await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n+    // Encontra o boleto pai na nossa lista local\r\n+    const parentBoleto = userBoletos.find(b => b._id === selectedParcel.parentId);\r\n \r\n-        showToast('Alterações salvas com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n+    // Verifica se a parcela é recorrente (se o boleto pai tem mais de 1 parcela)\r\n+    if (parentBoleto && parentBoleto.parcels.length > 1) {\r\n+        // Se for recorrente, guarda os dados e abre o modal de escolha\r\n+        pendingUpdateData = { updatedParcelData, updatedBillData };\r\n+\r\n+        // Atualiza a data no texto do botão para dar mais contexto ao utilizador\r\n+        const date = new Date(updatedParcelData.dueDate + 'T00:00:00');\r\n+        singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n+\r\n+        recurrentEditModal.classList.remove('hidden');\r\n+    } else {\r\n+        // Se não for recorrente, salva diretamente como antes\r\n+        showLoader();\r\n+        try {\r\n+            await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n+            await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n+            showToast('Alterações salvas com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            await updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n     }\r\n }\r\n \r\n async function handleDeleteParcel() {\r\n"
                },
                {
                    "date": 1753747384781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3024,9 +3024,48 @@\n }\r\n if (recurrentAddBtn) {\r\n     recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n }\r\n+if (recurrentEditModal) {\r\n+    // Botões de escolha (Somente esta, futuras, todas)\r\n+    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const scope = e.currentTarget.dataset.scope;\r\n+            if (!pendingUpdateData || !selectedParcel) return;\r\n \r\n+            recurrentEditModal.classList.add('hidden');\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a nova rota da API com o escopo escolhido\r\n+                await api.bulkUpdateParcels(\r\n+                    selectedParcel.parentId, \r\n+                    selectedParcel._id, \r\n+                    pendingUpdateData.updatedParcelData, \r\n+                    scope\r\n+                );\r\n+\r\n+                // Atualiza a categoria do boleto, se foi alterada\r\n+                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n+\r\n+                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n+                billModal.classList.add('hidden');\r\n+                await updateBillsOrganizer();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+                pendingUpdateData = null; // Limpa os dados pendentes\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Botão de cancelar\r\n+    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n+        recurrentEditModal.classList.add('hidden');\r\n+        pendingUpdateData = null; // Limpa os dados pendentes\r\n+    });\r\n+}\r\n+\r\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n \r\n"
                },
                {
                    "date": 1753749197319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2318,45 +2318,76 @@\n     updateMonthlySummary(filteredBoletos);\r\n }\r\n \r\n /**\r\n- * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário.\r\n+ * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n+ * agora com lógica para parcelas recorrentes.\r\n  */\r\n function initializeDragAndDrop() {\r\n     const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n \r\n     dayCells.forEach(cell => {\r\n         new Sortable(cell, {\r\n-            group: 'calendar-bills', // Permite mover cards entre células\r\n+            group: 'calendar-bills',\r\n             animation: 150,\r\n-            ghostClass: 'opacity-50', // Estilo do \"fantasma\" do card ao arrastar\r\n+            ghostClass: 'opacity-50',\r\n \r\n-            // A função que é chamada QUANDO você solta um card\r\n             onEnd: async function (evt) {\r\n-                const item = evt.item; // O card que foi arrastado\r\n-                const toCell = evt.to;   // A célula do dia onde ele foi solto\r\n-\r\n+                const item = evt.item;\r\n+                const toCell = evt.to;\r\n                 const boletoId = item.dataset.boletoId;\r\n                 const parcelId = item.dataset.parcelId;\r\n                 const newDate = toCell.dataset.date;\r\n \r\n                 if (!boletoId || !parcelId || !newDate) return;\r\n \r\n-                showLoader();\r\n-                try {\r\n-                    // Chamamos a nossa API para atualizar a data de vencimento\r\n-                    await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n-                    showToast('Data da parcela atualizada com sucesso!', 'success');\r\n+                // Encontra o boleto pai e a parcela original nos nossos dados locais\r\n+                const parentBoleto = userBoletos.find(b => b._id === boletoId);\r\n+                const originalParcel = parentBoleto?.parcels.find(p => p._id === parcelId);\r\n \r\n-                    // Atualizamos a aplicação inteira para refletir a mudança\r\n-                    await updateBillsOrganizer();\r\n+                if (!parentBoleto || !originalParcel) return;\r\n \r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                    // Se der erro, atualizamos a interface para reverter a mudança visual\r\n-                    await updateBillsOrganizer();\r\n-                } finally {\r\n-                    hideLoader();\r\n+                // Verifica se a parcela é recorrente (se o boleto pai tem mais de 1 parcela)\r\n+                if (parentBoleto.parcels.length > 1) {\r\n+                    // SE FOR RECORRENTE: ABRE O MODAL DE CONFIRMAÇÃO\r\n+\r\n+                    // 1. Cria o objeto com os dados atualizados\r\n+                    const updatedParcelData = {\r\n+                        ...originalParcel, // Mantém os dados antigos (valor, descrição, etc.)\r\n+                        dueDate: newDate,  // Atualiza apenas a data\r\n+                    };\r\n+\r\n+                    // 2. Guarda os dados numa variável temporária para o modal usar\r\n+                    pendingUpdateData = { \r\n+                        updatedParcelData, \r\n+                        updatedBillData: { category: parentBoleto.category?._id || null }\r\n+                    };\r\n+\r\n+                    // 3. Atualiza o texto no modal para dar contexto ao utilizador\r\n+                    const date = new Date(newDate + 'T00:00:00');\r\n+                    singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n+\r\n+                    // 4. Mostra o modal de escolha\r\n+                    recurrentEditModal.classList.remove('hidden');\r\n+\r\n+                    // 5. Como a ação do drag-and-drop move o elemento visualmente,\r\n+                    // chamamos a renderização novamente para o colocar no sítio original\r\n+                    // até o utilizador fazer uma escolha no modal.\r\n+                    renderCalendar();\r\n+\r\n+                } else {\r\n+                    // SE FOR PARCELA ÚNICA: ATUALIZA DIRETAMENTE (comportamento antigo)\r\n+                    showLoader();\r\n+                    try {\r\n+                        await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n+                        showToast('Data da parcela atualizada com sucesso!', 'success');\r\n+                        await updateBillsOrganizer();\r\n+                    } catch (error) {\r\n+                        showToast(error.message, 'error');\r\n+                        await updateBillsOrganizer(); // Reverte a mudança visual em caso de erro\r\n+                    } finally {\r\n+                        hideLoader();\r\n+                    }\r\n                 }\r\n             },\r\n         });\r\n     });\r\n"
                },
                {
                    "date": 1753749538593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2339,52 +2339,45 @@\n                 const newDate = toCell.dataset.date;\r\n \r\n                 if (!boletoId || !parcelId || !newDate) return;\r\n \r\n-                // Encontra o boleto pai e a parcela original nos nossos dados locais\r\n                 const parentBoleto = userBoletos.find(b => b._id === boletoId);\r\n                 const originalParcel = parentBoleto?.parcels.find(p => p._id === parcelId);\r\n \r\n                 if (!parentBoleto || !originalParcel) return;\r\n \r\n-                // Verifica se a parcela é recorrente (se o boleto pai tem mais de 1 parcela)\r\n                 if (parentBoleto.parcels.length > 1) {\r\n-                    // SE FOR RECORRENTE: ABRE O MODAL DE CONFIRMAÇÃO\r\n+                    // --- CORREÇÃO AQUI ---\r\n+                    // 1. Definimos a variável 'selectedParcel' que estava em falta.\r\n+                    selectedParcel = { ...originalParcel, parentId: parentBoleto._id };\r\n \r\n-                    // 1. Cria o objeto com os dados atualizados\r\n+                    // 2. O resto da lógica continua a mesma\r\n                     const updatedParcelData = {\r\n-                        ...originalParcel, // Mantém os dados antigos (valor, descrição, etc.)\r\n-                        dueDate: newDate,  // Atualiza apenas a data\r\n+                        ...originalParcel,\r\n+                        dueDate: newDate,\r\n                     };\r\n \r\n-                    // 2. Guarda os dados numa variável temporária para o modal usar\r\n                     pendingUpdateData = { \r\n                         updatedParcelData, \r\n                         updatedBillData: { category: parentBoleto.category?._id || null }\r\n                     };\r\n \r\n-                    // 3. Atualiza o texto no modal para dar contexto ao utilizador\r\n                     const date = new Date(newDate + 'T00:00:00');\r\n                     singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n \r\n-                    // 4. Mostra o modal de escolha\r\n                     recurrentEditModal.classList.remove('hidden');\r\n-\r\n-                    // 5. Como a ação do drag-and-drop move o elemento visualmente,\r\n-                    // chamamos a renderização novamente para o colocar no sítio original\r\n-                    // até o utilizador fazer uma escolha no modal.\r\n                     renderCalendar();\r\n \r\n                 } else {\r\n-                    // SE FOR PARCELA ÚNICA: ATUALIZA DIRETAMENTE (comportamento antigo)\r\n+                    // Lógica para parcela única (continua a mesma)\r\n                     showLoader();\r\n                     try {\r\n                         await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n                         showToast('Data da parcela atualizada com sucesso!', 'success');\r\n                         await updateBillsOrganizer();\r\n                     } catch (error) {\r\n                         showToast(error.message, 'error');\r\n-                        await updateBillsOrganizer(); // Reverte a mudança visual em caso de erro\r\n+                        await updateBillsOrganizer();\r\n                     } finally {\r\n                         hideLoader();\r\n                     }\r\n                 }\r\n"
                },
                {
                    "date": 1753807465743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,8 +197,12 @@\n const recurrentEditModal = document.getElementById('recurrentEditModal');\r\n const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n const singleParcelDate = document.getElementById('single-parcel-date');\r\n \r\n+const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n+const announcementMessage = document.getElementById('announcementMessage');\r\n+const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n+\r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n@@ -1536,8 +1540,30 @@\n     // Mostra o modal\r\n     profileModal.classList.remove('hidden');\r\n }\r\n \r\n+/**\r\n+ * Busca o anúncio ativo mais recente e o exibe no banner.\r\n+ */\r\n+async function fetchAndDisplayAnnouncement() {\r\n+    try {\r\n+        const announcement = await api.getActiveAnnouncement();\r\n+\r\n+        // Se existir um anúncio e ele tiver uma mensagem\r\n+        if (announcement && announcement.message) {\r\n+            let messageHtml = announcement.message;\r\n+            // Se o anúncio tiver um link, transforma a mensagem num link clicável\r\n+            if (announcement.link) {\r\n+                messageHtml = `<a href=\"${announcement.link}\" target=\"_blank\" class=\"hover:underline\">${announcement.message} <i class=\"fas fa-external-link-alt fa-xs ml-1\"></i></a>`;\r\n+            }\r\n+            announcementMessage.innerHTML = messageHtml;\r\n+            globalAnnouncementBanner.classList.remove('hidden');\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(\"Não foi possível buscar o anúncio:\", error);\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n \r\n"
                },
                {
                    "date": 1753807477443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3124 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import { API_BASE_URL } from './config.js';\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let expensesPieChart = null;\r\n+let expensesBarChart = null;\r\n+let topExpensesChart = null;\r\n+let parsedCsvData = [];\r\n+let selectedParcels = new Set();\r\n+let dashboardStatusFilter = 'all';\r\n+let selectedItems = new Map();\r\n+let pendingUpdateData = null;\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+\r\n+const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n+const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n+const calendarView = document.getElementById('calendarView');\r\n+const dashboardView = document.getElementById('dashboardView');\r\n+const dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\n+const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n+const startDateInput = document.getElementById('start-date-input');\r\n+const endDateInput = document.getElementById('end-date-input');\r\n+const kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\n+const upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\n+const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n+const exportCsvBtn = document.getElementById('export-csv-btn');\r\n+const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n+const dashboardFilterButtons = document.querySelectorAll('.dashboard-filter-btn');\r\n+\r\n+const manualAddBtn = document.getElementById('manual-add-btn');\r\n+const xmlAddBtn = document.getElementById('xml-add-btn');\r\n+const manualAddForm = document.getElementById('manual-add-form');\r\n+const xmlAddForm = document.getElementById('xml-add-form');\r\n+\r\n+const csvImportBtn = document.getElementById('csv-import-btn');\r\n+const csvImportForm = document.getElementById('csv-import-form');\r\n+const csvFileInput = document.getElementById('csv-file-input');\r\n+const csvPreviewArea = document.getElementById('csv-preview-area');\r\n+const csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\n+const csvImportSummary = document.getElementById('csv-import-summary');\r\n+const importCsvBtn = document.getElementById('import-csv-btn');\r\n+\r\n+const markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\n+const selectedCountSpan = document.getElementById('selectedCount');\r\n+const massActionsContainer = document.getElementById('massActionsContainer');\r\n+const selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\n+const deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n+\r\n+const changeCategoryBtn = document.getElementById('changeCategoryBtn');\r\n+const categoryBatchModal = document.getElementById('categoryBatchModal');\r\n+const batchCategorySelect = document.getElementById('batchCategorySelect');\r\n+const cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\n+const confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n+\r\n+const openProfileModalBtn = document.getElementById('openProfileModalBtn');\r\n+const profileModal = document.getElementById('profileModal');\r\n+const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\n+const profileUsername = document.getElementById('profileUsername');\r\n+const profileRole = document.getElementById('profileRole');\r\n+const profileCompany = document.getElementById('profileCompany');\r\n+const changePasswordForm = document.getElementById('changePasswordForm');\r\n+const verificationNotice = document.getElementById('verificationNotice');\r\n+const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n+\r\n+const recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\n+const recurrentAddForm = document.getElementById('recurrent-add-form');\r\n+const recurrentEditModal = document.getElementById('recurrentEditModal');\r\n+const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n+const singleParcelDate = document.getElementById('single-parcel-date');\r\n+\r\n+const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n+const announcementMessage = document.getElementById('announcementMessage');\r\n+const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n+ */\r\n+function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+\r\n+    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n+\r\n+    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n+    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n+\r\n+    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n+\r\n+    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    // Atualiza os elementos HTML com os valores corretos\r\n+    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n+    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n+    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com uma lista específica de boletos.\r\n+ * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n+ * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n+ */\r\n+function renderCalendar(boletosToRender = userBoletos) {\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+    const today = new Date(); // Variável para verificar boletos vencidos\r\n+    today.setHours(0, 0, 0, 0); // Zera a hora para uma comparação precisa do dia\r\n+\r\n+    // ETAPA 1: Otimização - Agrupa todas as parcelas por data de vencimento.\r\n+    const parcelsByDate = new Map();\r\n+    boletosToRender.forEach(bill => {\r\n+        bill.parcels.forEach(parcel => {\r\n+            const date = parcel.dueDate;\r\n+            if (!parcelsByDate.has(date)) {\r\n+                parcelsByDate.set(date, []);\r\n+            }\r\n+            // Adiciona uma referência ao boleto pai para cada parcela, para facilitar.\r\n+            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n+        });\r\n+    });\r\n+\r\n+    // ETAPA 2: Renderização do Calendário\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    // Cria as células vazias do início do mês\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    // Cria as células para cada dia do mês\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+\r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        // Adiciona evento de clique na célula para criar novos boletos\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card-draggable')) return;\r\n+            openAddBillModal(e.currentTarget.dataset.date);\r\n+        });\r\n+\r\n+        // Verifica se existem parcelas para este dia no mapa\r\n+        if (parcelsByDate.has(dateStr)) {\r\n+            // Se existirem, itera apenas sobre as parcelas daquele dia\r\n+            parcelsByDate.get(dateStr).forEach(parcel => {\r\n+                const bill = parcel.parentBill; // Pega a referência do boleto pai\r\n+                const parcelElement = document.createElement('div');\r\n+                \r\n+                // Lógica de Status, Cores e Ícones\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                const isOverdue = !parcel.paid && dueDate < today;\r\n+                let statusClass = 'bg-indigo-700 text-indigo-100'; // Padrão: Pendente\r\n+                let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n+            \r\n+                if (parcel.paid) {\r\n+                    statusClass = 'bg-green-700 text-green-100'; // Pago\r\n+                    statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n+                } else if (isOverdue) {\r\n+                    statusClass = 'bg-red-700 text-red-100'; // Vencido\r\n+                    statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n+                }\r\n+            \r\n+                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n+                parcelElement.dataset.boletoId = bill._id;\r\n+                parcelElement.dataset.parcelId = parcel._id;\r\n+    \r\n+                // HTML do card com layout aprimorado\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"flex items-start space-x-2\">\r\n+                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n+                        <div class=\"flex-1 min-w-0\">\r\n+                            <div class=\"flex justify-between items-center\">\r\n+                                <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n+                                    ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n+                                </span>\r\n+                                <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n+                                    ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n+                                </span>\r\n+                            </div>\r\n+                            \r\n+                            ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                            ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n+                        </div>\r\n+                    </div>\r\n+                `;\r\n+    \r\n+                // Adiciona evento de clique no card para abrir o modal\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                \r\n+                // Lógica para o checkbox\r\n+                const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n+                checkbox.addEventListener('change', (e) => {\r\n+                    const parcelId = e.target.dataset.parcelId;\r\n+                    const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n+                    if (e.target.checked) {\r\n+                        selectedItems.set(parcelId, boletoId);\r\n+                    } else {\r\n+                        selectedItems.delete(parcelId);\r\n+                    }\r\n+                    updateMassPaymentButton();\r\n+                });\r\n+                checkbox.addEventListener('click', (e) => {\r\n+                    e.stopPropagation(); // Impede o clique de abrir o modal\r\n+                });\r\n+                \r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        }\r\n+        \r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+\r\n+    initializeDragAndDrop();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+async function openBillModal(bill, parcel) {\r\n+    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+\r\n+    // Preenche todos os campos do modal com os dados da parcela clicada\r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+    // Mostra o botão de gerar código de barras apenas se houver um código\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+\r\n+    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n+    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n+    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n+    if (bill.nfeNumber) {\r\n+        nfeNumberEl.textContent = bill.nfeNumber;\r\n+        nfeContainer.classList.remove('hidden');\r\n+    } else {\r\n+        nfeContainer.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Lógica dinâmica para a secção de anexos\r\n+    const attachmentContainer = document.getElementById('attachment-container');\r\n+    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n+\r\n+    if (parcel.attachmentUrl) {\r\n+        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n+        attachmentContainer.innerHTML = `\r\n+            <div class=\"flex items-center justify-between\">\r\n+                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n+                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n+                </a>\r\n+                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n+            </div>\r\n+        `;\r\n+        // Adiciona o evento de clique ao novo botão de remover\r\n+        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n+    } else {\r\n+        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        // Adiciona o evento de 'change' ao novo input de upload\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+    }\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        categories.forEach(cat => {\r\n+            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n+        });\r\n+        if (bill.category) {\r\n+            modalBillCategorySelect.value = bill.category._id;\r\n+        } else {\r\n+            modalBillCategorySelect.value = \"\";\r\n+        }\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    if (billForm) {\r\n+        billForm.reset();\r\n+    }\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        totalBillsSpan.textContent = totalParcels;\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    mainAppContent.classList.remove('hidden');\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+     await populateCategoryFilter();\r\n+     await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n+ * @param {string} tagName - O nome da tag a ser procurada.\r\n+ * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n+ * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n+ */\r\n+function getTagValue(tagName, parentElement) {\r\n+    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n+    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n+    return element?.textContent || '';\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona os eventos de clique e mudança aos elementos dinâmicos do modal de detalhes da empresa.\r\n+ * Esta é a função que estava em falta.\r\n+ */\r\n+function addEventListenersToCompanyDetailsModal() {\r\n+    // Evento para os seletores de cargo (role)\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                // Recarrega os dados do modal para garantir consistência\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Evento para os botões de remover utilizador\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.currentTarget.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                // Recarrega os dados do modal\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n+ */\r\n+function openCompanyDetailsModal(company, users, masterUsers) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (masterUsers && masterUsers.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        masterUsers.forEach(user => {\r\n+            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n+\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona os eventos DEPOIS de criar os botões\r\n+    addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n+    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n+\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        // Passa os novos dados para a função da API\r\n+        const data = await api.registerUser(username, password, email, role, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        // A chamada à API já retorna os dados completos da empresa, incluindo 'isVerified'\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        // LÓGICA PARA MOSTRAR/ESCONDER O AVISO\r\n+        if (company.isVerified) {\r\n+            verificationNotice.classList.add('hidden');\r\n+        } else {\r\n+            verificationNotice.classList.remove('hidden');\r\n+        }\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+\r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function openCategoriesModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        renderCategoryList(categories);\r\n+        categoriesModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function renderCategoryList(categories) {\r\n+    categoryListDiv.innerHTML = '';\r\n+    if (categories.length === 0) {\r\n+        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n+        return;\r\n+    }\r\n+    categories.forEach(category => {\r\n+        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n+                <span class=\"text-white\">${category.name}</span>\r\n+                <div>\r\n+                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n+                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                </div>\r\n+            </div>\r\n+        `);\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo boleto,\r\n+ * e opcionalmente pré-preenchendo a data.\r\n+ * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n+ */\r\n+async function openAddBillModal(preselectedDate = null) {\r\n+    clearBillForm();\r\n+    switchAddBillMode('manual');\r\n+    showLoader();\r\n+    try {\r\n+        // Se uma data foi passada como parâmetro (ou seja, o utilizador clicou no calendário)\r\n+        if (preselectedDate) {\r\n+            // Preenche o campo da aba \"Adicionar Manual\" (comportamento que já existia)\r\n+            document.getElementById('dueDate').value = preselectedDate;\r\n+\r\n+            // NOVA LINHA: Preenche também o campo da aba \"Pagamento Recorrente\"\r\n+            document.getElementById('recurrentStartDate').value = preselectedDate;\r\n+        }\r\n+\r\n+        addBillModal.classList.remove('hidden');\r\n+    } catch (error)\r\n+ {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function populateCategoryFilter() {\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n+        // Se der erro, garante que a opção padrão exista\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Alterna a visualização entre o Calendário e o Dashboard.\r\n+ */\r\n+function switchView(viewToShow) {\r\n+    // Esconde ambas as vistas\r\n+    calendarView.classList.add('hidden');\r\n+    dashboardView.classList.add('hidden');\r\n+\r\n+    // Reseta o estilo dos botões\r\n+    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n+    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n+    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+\r\n+    // Mostra a vista correta e ativa o botão correspondente\r\n+    if (viewToShow === 'calendar') {\r\n+        calendarView.classList.remove('hidden');\r\n+        viewCalendarBtn.classList.add('bg-indigo-600');\r\n+        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    } else if (viewToShow === 'dashboard') {\r\n+        dashboardView.classList.remove('hidden');\r\n+        viewDashboardBtn.classList.add('bg-indigo-600');\r\n+        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderDashboard();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza os cartões de KPI no dashboard.\r\n+ * @param {object} kpiData - Os dados dos KPIs vindos da API.\r\n+ */\r\n+function updateKpiCards(kpiData) {\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n+\r\n+    // Popula os novos campos\r\n+    if (kpiContasVencidas) kpiContasVencidas.textContent = formatCurrency(kpiData.totalVencido);\r\n+    \r\n+    // Popula os campos existentes\r\n+    document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n+    document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n+    document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n+}\r\n+\r\n+/**\r\n+ * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n+ */\r\n+async function renderDashboard() {\r\n+    showLoader();\r\n+    try {\r\n+        const dateRange = getDateRangeFromPreset();\r\n+\r\n+        // ATUALIZADO: Passa o 'dashboardStatusFilter' para as chamadas da API\r\n+        const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n+            api.getExpensesByCategory(dateRange, dashboardStatusFilter),\r\n+            api.getMonthlySummary(dateRange, dashboardStatusFilter),\r\n+            api.getKpiSummary(dateRange),\r\n+            api.getUpcomingPayments()\r\n+        ]);\r\n+\r\n+        updateKpiCards(kpiData);\r\n+        renderPieChart(pieData);\r\n+        renderBarChart(barData);\r\n+        renderUpcomingPayments(upcomingData);\r\n+        renderTopExpensesChart(pieData);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de pizza de despesas por categoria.\r\n+ */\r\n+function renderPieChart(data) {\r\n+    const canvas = document.getElementById('expensesByCategoryChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    if (expensesPieChart) {\r\n+        expensesPieChart.destroy();\r\n+    }\r\n+\r\n+    expensesPieChart = new Chart(ctx, {\r\n+        type: 'pie',\r\n+        data: {\r\n+            labels: data.map(item => item.categoryName),\r\n+            datasets: [{\r\n+                data: data.map(item => item.totalAmount),\r\n+                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n+                borderColor: '#1f2937',\r\n+                borderWidth: 2\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n+ */\r\n+function renderBarChart(data) {\r\n+    const canvas = document.getElementById('monthlyExpensesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n+    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n+    const values = data.map(item => item.totalAmount);\r\n+\r\n+    if (expensesBarChart) {\r\n+        expensesBarChart.destroy();\r\n+    }\r\n+    \r\n+    expensesBarChart = new Chart(ctx, {\r\n+        type: 'bar',\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n+                borderColor: 'rgba(79, 70, 229, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n+            },\r\n+            plugins: { legend: { display: false } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Busca categorias da API e preenche um elemento <select> do HTML.\r\n+ * @param {HTMLSelectElement} selectElement - O elemento dropdown a ser preenchido.\r\n+ */\r\n+async function populateCategorySelect(selectElement) {\r\n+    if (!selectElement) return;\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        selectElement.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            const option = document.createElement('option');\r\n+            option.value = category._id;\r\n+            option.textContent = category.name;\r\n+            selectElement.appendChild(option);\r\n+        });\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n+ * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n+ */\r\n+function initializeDashboardDragAndDrop() {\r\n+    const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n+    const mainGrid = document.getElementById('dashboard-main-grid');\r\n+\r\n+    // Vamos guardar as instâncias do Sortable em variáveis\r\n+    let kpiSortable, mainSortable;\r\n+\r\n+    const saveOrder = (gridType) => {\r\n+        if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n+\r\n+        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n+        let order;\r\n+\r\n+        // Usamos a instância correta para obter a ordem\r\n+        if (gridType === 'kpi' && kpiSortable) {\r\n+            order = kpiSortable.toArray();\r\n+        } else if (gridType === 'main' && mainSortable) {\r\n+            order = mainSortable.toArray();\r\n+        }\r\n+\r\n+        if (order) {\r\n+            localStorage.setItem(key, JSON.stringify(order));\r\n+        }\r\n+    };\r\n+\r\n+    if (kpiGrid) {\r\n+        // Guardamos a instância na nossa variável\r\n+        kpiSortable = new Sortable(kpiGrid, {\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+            // A chamada agora é mais simples\r\n+            onEnd: () => saveOrder('kpi'),\r\n+        });\r\n+    }\r\n+\r\n+    if (mainGrid) {\r\n+        // Guardamos a instância na nossa variável\r\n+        mainSortable = new Sortable(mainGrid, {\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+            onEnd: () => saveOrder('main'),\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Verifica o localStorage por uma ordem de cartões salva para o utilizador atual\r\n+ * e, se encontrar, reordena os elementos no ecrã.\r\n+ */\r\n+function applySavedDashboardOrder() {\r\n+    if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n+\r\n+    const applyOrder = (gridType) => {\r\n+        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n+        const savedOrder = localStorage.getItem(key);\r\n+        const grid = document.getElementById(`dashboard-${gridType}-grid`);\r\n+\r\n+        if (savedOrder && grid) {\r\n+            const order = JSON.parse(savedOrder);\r\n+            // Para cada id na ordem salva, encontramos o elemento correspondente\r\n+            // e o movemos para o final do container. Ao fazer isto em sequência,\r\n+            // a ordem final corresponde à ordem salva.\r\n+            order.forEach(dataId => {\r\n+                const card = grid.querySelector(`[data-id=\"${dataId}\"]`);\r\n+                if (card) {\r\n+                    grid.appendChild(card);\r\n+                }\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    applyOrder('kpi');\r\n+    applyOrder('main');\r\n+}\r\n+\r\n+/**\r\n+ * Captura a área do dashboard como uma imagem e gera um ficheiro PDF para download.\r\n+ */\r\n+async function handleVisualExportPDF() {\r\n+    // Mostra o loader para dar feedback ao utilizador\r\n+    showLoader();\r\n+\r\n+    // Seleciona o elemento do DOM que queremos \"fotografar\"\r\n+    const dashboardElement = document.getElementById('dashboardView');\r\n+    \r\n+    // Esconde temporariamente os botões de filtro e exportação para não aparecerem no PDF\r\n+    const filterContainer = document.getElementById('dashboard-date-filter-container');\r\n+    if (filterContainer) filterContainer.style.display = 'none';\r\n+\r\n+    try {\r\n+        // Usa a biblioteca html2canvas para criar um \"canvas\" (uma imagem) do elemento\r\n+        const canvas = await html2canvas(dashboardElement, {\r\n+            scale: 2, // Aumenta a resolução da imagem para melhor qualidade\r\n+            backgroundColor: '#1e293b' // Garante um fundo consistente\r\n+        });\r\n+\r\n+        // Converte o canvas para uma imagem no formato PNG\r\n+        const imageData = canvas.toDataURL('image/png');\r\n+\r\n+        // Usa a biblioteca jsPDF para criar o documento\r\n+        // A orientação 'p' é retrato (portrait), 'mm' é milímetros, 'a4' é o tamanho da página\r\n+        const pdf = new jspdf.jsPDF({\r\n+            orientation: 'p',\r\n+            unit: 'mm',\r\n+            format: 'a4'\r\n+        });\r\n+\r\n+        // Calcula as dimensões da imagem para que ela caiba na página A4, mantendo a proporção\r\n+        const pageWidth = pdf.internal.pageSize.getWidth();\r\n+        const pageHeight = pdf.internal.pageSize.getHeight();\r\n+        const imageWidth = canvas.width;\r\n+        const imageHeight = canvas.height;\r\n+        const ratio = imageWidth / imageHeight;\r\n+        let pdfImageWidth = pageWidth - 20; // Deixa uma margem de 10mm de cada lado\r\n+        let pdfImageHeight = pdfImageWidth / ratio;\r\n+        \r\n+        // Se a imagem ainda for muito alta, ajusta pela altura\r\n+        if (pdfImageHeight > pageHeight - 20) {\r\n+            pdfImageHeight = pageHeight - 20;\r\n+            pdfImageWidth = pdfImageHeight * ratio;\r\n+        }\r\n+        \r\n+        // Adiciona a imagem ao PDF, centralizada\r\n+        const x = (pageWidth - pdfImageWidth) / 2;\r\n+        const y = 10; // Margem de 10mm no topo\r\n+        pdf.addImage(imageData, 'PNG', x, y, pdfImageWidth, pdfImageHeight);\r\n+\r\n+        // Força o download do ficheiro\r\n+        pdf.save('dashboard-relatorio.pdf');\r\n+\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao gerar PDF visual:\", error);\r\n+        showToast('Ocorreu um erro ao gerar o PDF.', 'error');\r\n+    } finally {\r\n+        // Mostra novamente os botões de filtro, quer a exportação tenha funcionado ou não\r\n+        if (filterContainer) filterContainer.style.display = 'block';\r\n+        // Esconde o loader\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n+ * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n+ */\r\n+function switchAddBillMode(mode) {\r\n+    if (!manualAddForm || !xmlAddForm || !csvImportForm || !recurrentAddForm) return;\r\n+\r\n+    // Esconde todos os painéis\r\n+    manualAddForm.classList.add('hidden');\r\n+    xmlAddForm.classList.add('hidden');\r\n+    csvImportForm.classList.add('hidden');\r\n+    recurrentAddForm.classList.add('hidden'); // Esconde o novo painel\r\n+\r\n+    // Reseta o estilo de todos os botões\r\n+    [manualAddBtn, xmlAddBtn, csvImportBtn, recurrentAddBtn].forEach(btn => { // Adiciona o novo botão\r\n+        if(btn) {\r\n+            btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+            btn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+        }\r\n+    });\r\n+\r\n+    // Ativa o painel e o botão corretos\r\n+    let activeBtn, activeForm;\r\n+    if (mode === 'manual') {\r\n+        activeBtn = manualAddBtn;\r\n+        activeForm = manualAddForm;\r\n+    } else if (mode === 'xml') {\r\n+        activeBtn = xmlAddBtn;\r\n+        activeForm = xmlAddForm;\r\n+    } else if (mode === 'recurrent') { // Adiciona a nova condição\r\n+        activeBtn = recurrentAddBtn;\r\n+        activeForm = recurrentAddForm;\r\n+    } else if (mode === 'csv') {\r\n+        activeBtn = csvImportBtn;\r\n+        activeForm = csvImportForm;\r\n+    }\r\n+\r\n+    if (activeBtn && activeForm) {\r\n+        activeForm.classList.remove('hidden');\r\n+        activeBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+        activeBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a seleção de um ficheiro CSV, lê e pré-visualiza os dados.\r\n+ */\r\n+function handleCsvFileSelect(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) return;\r\n+\r\n+    // Usa o PapaParse para ler o ficheiro\r\n+    Papa.parse(file, {\r\n+        header: true, // Trata a primeira linha como cabeçalho\r\n+        skipEmptyLines: true,\r\n+        complete: (results) => {\r\n+            // Guarda os dados processados no estado da aplicação\r\n+            parsedCsvData = results.data;\r\n+            renderCsvPreview(parsedCsvData);\r\n+        },\r\n+        error: (err) => {\r\n+            showToast(`Erro ao ler o ficheiro CSV: ${err.message}`, 'error');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a tabela de pré-visualização com os dados lidos do CSV.\r\n+ */\r\n+function renderCsvPreview(data) {\r\n+    // Verificação de segurança para garantir que 'data' é um array\r\n+    if (!Array.isArray(data)) {\r\n+        console.error(\"renderCsvPreview foi chamada com dados inválidos:\", data);\r\n+        data = []; // Assume um array vazio para não quebrar a execução\r\n+    }\r\n+\r\n+    if (!csvPreviewTableBody || !csvPreviewArea || !csvImportSummary) {\r\n+        console.error(\"Elementos da pré-visualização do CSV não foram encontrados no HTML.\");\r\n+        return;\r\n+    }\r\n+\r\n+    csvPreviewTableBody.innerHTML = '';\r\n+    if (data.length === 0) {\r\n+        csvPreviewArea.classList.add('hidden');\r\n+        return;\r\n+    }\r\n+    \r\n+    const formatCurrency = (valueStr) => {\r\n+        const value = parseFloat(String(valueStr).replace(',', '.'));\r\n+        return isNaN(value) ? 'Inválido' : value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+    };\r\n+\r\n+    data.forEach(row => {\r\n+        const values = Object.values(row);\r\n+        const tr = `\r\n+            <tr>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[0] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[1] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[2] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700 text-right\">${formatCurrency(values[3])}</td>\r\n+            </tr>\r\n+        `;\r\n+        csvPreviewTableBody.insertAdjacentHTML('beforeend', tr);\r\n+    });\r\n+\r\n+    csvImportSummary.textContent = `${data.length} boletos prontos para serem importados.`;\r\n+    csvPreviewArea.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Envia os dados do CSV para a API para serem salvos na base de dados.\r\n+ */\r\n+async function handleConfirmImport() {\r\n+    if (parsedCsvData.length === 0) {\r\n+        return showToast('Não há dados para importar.', 'info');\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const response = await api.importBoletos(parsedCsvData);\r\n+        showToast(response.message, 'success');\r\n+\r\n+        // Fecha o modal e atualiza a aplicação\r\n+        addBillModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+\r\n+        // Limpa os dados da pré-visualização\r\n+        csvPreviewArea.classList.add('hidden');\r\n+        csvFileInput.value = '';\r\n+        parsedCsvData = [];\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a visibilidade e a contagem do botão de pagamento em massa.\r\n+ */\r\n+function updateMassPaymentButton() {\r\n+    const count = selectedItems.size;\r\n+    selectedCountSpan.textContent = count;\r\n+    massActionsContainer.classList.toggle('hidden', count === 0);\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Pagar Selecionados\".\r\n+ */\r\n+async function handleMarkSelectedAsPaid() {\r\n+    if (selectedItems.size === 0) {\r\n+        return showToast('Nenhuma parcela selecionada.', 'info');\r\n+    }\r\n+\r\n+    if (!confirm(`Tem a certeza que deseja marcar ${selectedItems.size} parcela(s) como paga(s)?`)) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const parcelIds = Array.from(selectedItems.keys());\r\n+\r\n+        // Chama a função da API com o array de IDs correto.\r\n+        const response = await api.markParcelsAsPaid(parcelIds);\r\n+\r\n+        showToast(response.message, 'success');\r\n+\r\n+        // Limpa a seleção e atualiza a interface\r\n+        selectedItems.clear();\r\n+        updateMassPaymentButton();\r\n+        await updateBillsOrganizer(); // Recarrega o calendário\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Seleciona todos os checkboxes de boletos visíveis no calendário.\r\n+ */\r\n+function handleSelectAllVisible() {\r\n+    // Pega todos os checkboxes que estão atualmente no calendário\r\n+    document.querySelectorAll('.mass-payment-checkbox').forEach(checkbox => {\r\n+        // Marca apenas os que ainda não estão marcados\r\n+        if (!checkbox.checked) {\r\n+            checkbox.checked = true;\r\n+\r\n+            // --- LÓGICA CORRIGIDA ---\r\n+            const parcelId = checkbox.dataset.parcelId;\r\n+            // Pega o boletoId do elemento pai mais próximo\r\n+            const boletoId = checkbox.closest('.bill-card-draggable').dataset.boletoId;\r\n+\r\n+            // Garante que temos os dois IDs antes de adicionar ao mapa\r\n+            if (parcelId && boletoId) {\r\n+                // Usa o método .set(key, value), que é o correto para um Map\r\n+                selectedItems.set(parcelId, boletoId);\r\n+            }\r\n+        }\r\n+    });\r\n+    // Atualiza o botão para refletir a nova contagem\r\n+    updateMassPaymentButton();\r\n+}\r\n+\r\n+/**\r\n+ * Desmarca todos os checkboxes de boletos selecionados.\r\n+ */\r\n+function handleDeselectAll() {\r\n+    // Limpa o nosso Set de seleção\r\n+    selectedItems.clear();\r\n+    // Desmarca todos os checkboxes que estão no calendário\r\n+    document.querySelectorAll('.mass-payment-checkbox:checked').forEach(checkbox => {\r\n+        checkbox.checked = false;\r\n+    });\r\n+    // Atualiza o botão (que será escondido, pois a contagem é 0)\r\n+    updateMassPaymentButton();\r\n+}\r\n+\r\n+/**\r\n+ * Busca os dados do utilizador e abre o modal de perfil.\r\n+ */\r\n+async function openProfileModal() {\r\n+    // Usa as variáveis globais que já temos da inicialização\r\n+    if (!currentLoggedInUser || !currentLoggedInCompany) {\r\n+        showToast('Não foi possível carregar os dados do perfil.', 'error');\r\n+        return;\r\n+    }\r\n+\r\n+    // Preenche o modal com os dados\r\n+    profileUsername.textContent = currentLoggedInUser.username;\r\n+    profileRole.textContent = currentLoggedInUser.role;\r\n+    profileCompany.textContent = currentLoggedInCompany.nomeEmpresa;\r\n+\r\n+    // Mostra o modal\r\n+    profileModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Busca o anúncio ativo mais recente e o exibe no banner.\r\n+ */\r\n+async function fetchAndDisplayAnnouncement() {\r\n+    try {\r\n+        const announcement = await api.getActiveAnnouncement();\r\n+\r\n+        // Se existir um anúncio e ele tiver uma mensagem\r\n+        if (announcement && announcement.message) {\r\n+            let messageHtml = announcement.message;\r\n+            // Se o anúncio tiver um link, transforma a mensagem num link clicável\r\n+            if (announcement.link) {\r\n+                messageHtml = `<a href=\"${announcement.link}\" target=\"_blank\" class=\"hover:underline\">${announcement.message} <i class=\"fas fa-external-link-alt fa-xs ml-1\"></i></a>`;\r\n+            }\r\n+            announcementMessage.innerHTML = messageHtml;\r\n+            globalAnnouncementBanner.classList.remove('hidden');\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(\"Não foi possível buscar o anúncio:\", error);\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+// =================================================================================\r\n+\r\n+async function handleForgotPasswordRequest(e) {\r\n+    e.preventDefault();\r\n+    const email = document.getElementById('recoveryEmailInput').value;\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.requestPasswordReset(email);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n+        forgotPasswordModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList(); // Se tiver essa função\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // CORREÇÃO: Capturamos a nova lista 'masterUsers' da API\r\n+                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                // CORREÇÃO: Passamos a lista para a função do modal\r\n+                openCompanyDetailsModal(company, users, masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // CORREÇÃO: Capturamos a nova lista 'masterUsers'\r\n+                const { users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+\r\n+                // CORREÇÃO: Verificamos se existem usuários na lista do banco Mestre\r\n+                if (!masterUsers || masterUsers.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários (no registro mestre) para representar.', 'info');\r\n+                }\r\n+\r\n+                // CORREÇÃO: Usamos o ID do primeiro usuário da lista do banco Mestre\r\n+                const userIdToImpersonate = masterUsers[0]._id; \r\n+\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                // O resto da lógica continua igual...\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+async function handleCalculateInstallments(e) {\r\n+    e.preventDefault(); // Impede a submissão padrão do formulário\r\n+\r\n+    const activeTabButton = document.querySelector('#addBillModal .flex button.bg-indigo-600');\r\n+    if (!activeTabButton) {\r\n+        return showToast('Erro: Não foi possível identificar a aba ativa.', 'error');\r\n+    }\r\n+    const activeModeId = activeTabButton.id;\r\n+\r\n+    currentBill = null;\r\n+\r\n+    if (activeModeId === 'manual-add-btn') {\r\n+        const billName = document.getElementById('billName').value;\r\n+        const dueDate = document.getElementById('dueDate').value;\r\n+        const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(',', '.'));\r\n+        const installments = parseInt(document.getElementById('installments').value);\r\n+        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+        const description = document.getElementById('description').value;\r\n+\r\n+        // Validação feita aqui no JavaScript\r\n+        if (!billName || !dueDate || !installments || isNaN(totalAmount) || totalAmount <= 0 || installments <= 0) {\r\n+            return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n+        }\r\n+\r\n+        currentBill = { name: billName, description, parcels: [], category: null };\r\n+        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+\r\n+        for (let i = 0; i < installments; i++) {\r\n+            const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+            parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+            currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n+        }\r\n+\r\n+    } else if (activeModeId === 'recurrent-add-btn') {\r\n+        const billName = document.getElementById('recurrentBillName').value;\r\n+        const startDate = document.getElementById('recurrentStartDate').value;\r\n+        const amount = parseFloat(document.getElementById('recurrentAmount').value);\r\n+        const months = parseInt(document.getElementById('recurrentInstallments').value);\r\n+        const description = document.getElementById('recurrentDescription').value;\r\n+\r\n+        // Validação feita aqui no JavaScript\r\n+        if (!billName || !startDate || !months || isNaN(amount) || amount <= 0 || months <= 0) {\r\n+            return showToast(\"Preencha todos os campos do pagamento recorrente.\", \"error\");\r\n+        }\r\n+\r\n+        currentBill = { name: billName, description, parcels: [], category: null };\r\n+\r\n+        for (let i = 0; i < months; i++) {\r\n+            const parcelDate = new Date(startDate + 'T00:00:00');\r\n+            parcelDate.setMonth(parcelDate.getMonth() + i);\r\n+            currentBill.parcels.push({ number: i + 1, amount: amount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n+        }\r\n+    }\r\n+\r\n+    // Este bloco só será executado se `currentBill` tiver sido preenchido com sucesso\r\n+    if (currentBill && currentBill.parcels.length > 0) {\r\n+        installmentsList.innerHTML = '';\r\n+        currentBill.parcels.forEach((parcel, index) => {\r\n+             installmentsList.insertAdjacentHTML('beforeend', `\r\n+                <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                    <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                    <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                    <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                    <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                </div>\r\n+            `);\r\n+        });\r\n+\r\n+        addEventListenersToInstallmentInputs();\r\n+        updatePreviewTotal();\r\n+        previewBillNameInput.value = currentBill.name;\r\n+        previewNfeNumber.textContent = 'N/A';\r\n+        addBillModal.classList.add('hidden');\r\n+        await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n+        installmentsPreviewModal.classList.remove('hidden');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n+ */\r\n+function updatePreviewTotal() {\r\n+    if (!currentBill.parcels) return;\r\n+    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    currentBill.category = document.getElementById('previewBillCategorySelect').value || null;\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill); // O objeto currentBill agora tem a categoria correta\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+        clearBillForm();\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+\r\n+    // Guarda os dados atualizados do formulário\r\n+    const updatedParcelData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    const updatedBillData = {\r\n+        category: modalBillCategorySelect.value || null\r\n+    };\r\n+\r\n+    // Encontra o boleto pai na nossa lista local\r\n+    const parentBoleto = userBoletos.find(b => b._id === selectedParcel.parentId);\r\n+\r\n+    // Verifica se a parcela é recorrente (se o boleto pai tem mais de 1 parcela)\r\n+    if (parentBoleto && parentBoleto.parcels.length > 1) {\r\n+        // Se for recorrente, guarda os dados e abre o modal de escolha\r\n+        pendingUpdateData = { updatedParcelData, updatedBillData };\r\n+\r\n+        // Atualiza a data no texto do botão para dar mais contexto ao utilizador\r\n+        const date = new Date(updatedParcelData.dueDate + 'T00:00:00');\r\n+        singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n+\r\n+        recurrentEditModal.classList.remove('hidden');\r\n+    } else {\r\n+        // Se não for recorrente, salva diretamente como antes\r\n+        showLoader();\r\n+        try {\r\n+            await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n+            await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n+            showToast('Alterações salvas com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            await updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ * Verifica a sessão e o estado da assinatura.\r\n+ */\r\n+async function initializeApp() {\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n+    const action = urlParams.get('action');\r\n+\r\n+    if (action === 'forgot_password') {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+\r\n+    if (!token) {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        showAdminLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+function logout() {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+\r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        // CORREÇÃO: Buscamos os detalhes da empresa, que agora incluem 'users' (do tenant)\r\n+        // e 'masterUsers' (do banco mestre).\r\n+        const { users, masterUsers } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; \r\n+\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+        // Usamos a lista de 'masterUsers' para construir o modal, pois ela tem os IDs corretos.\r\n+        if (masterUsers && masterUsers.length > 0) {\r\n+            masterUsers.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+\r\n+                const roleOptions = assignableRoles.map(role =>\r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                const roleHtml = isOwner\r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    // CORREÇÃO: O data-user-id agora usa o ID do masterUser\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+\r\n+        // Adiciona evento de clique para remover (precisará de ajuste futuro se necessário)\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            // ...\r\n+        });\r\n+\r\n+        // Adiciona evento para alterar o cargo (agora com o ID correto)\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n+\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    // Lógica para reverter a seleção visual\r\n+                    const originalUser = (await api.getCompanyDetails(companyId)).masterUsers.find(u => u._id === userId);\r\n+                    if(originalUser) e.target.value = originalUser.role;\r\n+                    return;\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    // A chamada à API agora envia o ID correto\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n+ * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n+ * @param {Event} event - O evento 'change' do input do ficheiro.\r\n+ */\r\n+async function handleNfeXmlUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) {\r\n+        return;\r\n+    }\r\n+\r\n+    const reader = new FileReader();\r\n+\r\n+    reader.onload = async (e) => {\r\n+        try {\r\n+            const xmlString = e.target.result;\r\n+            const parser = new DOMParser();\r\n+            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n+\r\n+            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n+                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n+            }\r\n+\r\n+            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n+            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n+\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n+\r\n+            let parcelsData = [];\r\n+\r\n+            if (duplicatas.length > 0) {\r\n+                parcelsData = duplicatas.map((dup, i) => ({\r\n+                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n+                    dueDate: getTagValue(\"dVenc\", dup)\r\n+                }));\r\n+            } else {\r\n+                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n+                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n+\r\n+                if (cobrancaMatch && cobrancaMatch[1]) {\r\n+                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n+                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n+                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n+                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n+\r\n+                    parcelsData = dias.map((dia, i) => {\r\n+                        const vencimento = new Date(dataEmissao);\r\n+                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n+                        return {\r\n+                            number: i + 1,\r\n+                            amount: parcelAmount,\r\n+                            dueDate: vencimento.toISOString().split('T')[0]\r\n+                        };\r\n+                    });\r\n+                }\r\n+            }\r\n+\r\n+            if (parcelsData.length > 0) {\r\n+                // ALTERAÇÃO AQUI: Removemos o prefixo \"NFe - \" do nome.\r\n+                currentBill = { name: nomeFornecedor, nfeNumber: nfeNumber, parcels: parcelsData };\r\n+\r\n+                installmentsList.innerHTML = '';\r\n+                currentBill.parcels.forEach((parcel, index) => {\r\n+                    installmentsList.insertAdjacentHTML('beforeend', `\r\n+                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                        </div>\r\n+                    `);\r\n+                });\r\n+\r\n+                addEventListenersToInstallmentInputs();\r\n+                updatePreviewTotal();\r\n+                previewBillNameInput.value = currentBill.name;\r\n+                previewNfeNumber.textContent = nfeNumber;\r\n+                await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n+                installmentsPreviewModal.classList.remove('hidden');\r\n+\r\n+            } else {\r\n+                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n+                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n+\r\n+                // ALTERAÇÃO AQUI TAMBÉM: Removemos o prefixo no caso de fallback.\r\n+                document.getElementById('billName').value = nomeFornecedor;\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n+                if (vencimento) {\r\n+                    document.getElementById('dueDate').value = vencimento;\r\n+                }\r\n+\r\n+                addBillModal.classList.remove('hidden');\r\n+            }\r\n+\r\n+            showToast('Dados do XML carregados com sucesso!', 'success');\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            console.error(\"Erro ao processar XML:\", error);\r\n+        } finally {\r\n+            event.target.value = '';\r\n+        }\r\n+    };\r\n+\r\n+    reader.onerror = () => {\r\n+        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+    };\r\n+\r\n+    reader.readAsText(file);\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n+ */\r\n+function addEventListenersToInstallmentInputs() {\r\n+    // Listener para o campo de VALOR\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            }\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de DATA\r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    /**\r\n+     * Mostra a tela de login de administrador.\r\n+     */\r\n+    function showAdminLogin() {\r\n+        hideAllScreens(); // Função de utils.js\r\n+        if (adminLoginForm) adminLoginForm.reset();\r\n+        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    // Listener para o campo de CÓDIGO DE BARRAS\r\n+    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        // Evento para guardar o valor quando é digitado\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].barcode = e.target.value;\r\n+            }\r\n+        });\r\n+\r\n+        input.addEventListener('keydown', (e) => {\r\n+            if (e.key === 'Enter') {\r\n+                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n+\r\n+                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n+                const nextIndex = currentIndex + 1;\r\n+                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n+\r\n+                if (nextInput) {\r\n+                    // Se houver um próximo campo de código de barras, foca nele.\r\n+                    nextInput.focus();\r\n+                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n+                } else {\r\n+                    // Se for o último campo, foca no botão de salvar.\r\n+                    document.getElementById('addToOrganizer').focus();\r\n+                }\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n+ */\r\n+function handleShowFullScreenBarcode() {\r\n+    const barcodeValue = modalBillBarcodeInput.value;\r\n+    if (!barcodeValue) {\r\n+        return showToast('Não há código de barras para mostrar.', 'info');\r\n+    }\r\n+\r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    if (!barcodeImageContainer) return;\r\n+\r\n+    // Limpa qualquer código de barras anterior\r\n+    barcodeImageContainer.innerHTML = '';\r\n+\r\n+    try {\r\n+        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n+        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n+\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n+        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n+            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n+            lineColor: \"#000000\",\r\n+            width: 2,\r\n+            height: 100,\r\n+            displayValue: true, // Mostra os números abaixo das barras\r\n+            fontSize: 18\r\n+        });\r\n+\r\n+        // Mostra o modal de ecrã inteiro\r\n+        barcodeFullScreenModal.classList.remove('hidden');\r\n+\r\n+    } catch (e) {\r\n+        console.error(\"Erro ao gerar código de barras:\", e);\r\n+        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n+    }\r\n+}\r\n+\r\n+async function handleAttachmentUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file || !selectedParcel) return;\r\n+\r\n+    // Cria um objeto FormData para enviar o ficheiro\r\n+    const formData = new FormData();\r\n+    formData.append('comprovante', file);\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Atualiza a UI para mostrar o link do novo anexo\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+\r\n+        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para remover um anexo de comprovativo.\r\n+ * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n+ */\r\n+async function handleRemoveAttachment() {\r\n+    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n+    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader(); // Mostra o ícone de carregamento\r\n+    try {\r\n+        // Chama a nossa função da API para apagar o anexo\r\n+        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n+\r\n+        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+\r\n+        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+\r\n+        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n+        await updateBillsOrganizer();\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n+ */\r\n+function applyFiltersAndSearch() {\r\n+    const searchTerm = searchInput.value.toLowerCase();\r\n+    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n+\r\n+    let filteredBoletos = userBoletos.filter(bill => {\r\n+        // Filtro de pesquisa\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n+            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+        if (!matchesSearch) return false;\r\n+\r\n+        // Filtro de categoria\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+        if (!matchesCategory) return false;\r\n+\r\n+        // Filtro de status\r\n+        if (activeStatusFilter === 'all') return true;\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        return bill.parcels.some(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeStatusFilter === 'paid') return parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            return false;\r\n+        });\r\n+    });\r\n+\r\n+    renderCalendar(filteredBoletos);\r\n+    updateMonthlySummary(filteredBoletos);\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n+ * agora com lógica para parcelas recorrentes.\r\n+ */\r\n+function initializeDragAndDrop() {\r\n+    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n+\r\n+    dayCells.forEach(cell => {\r\n+        new Sortable(cell, {\r\n+            group: 'calendar-bills',\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+\r\n+            onEnd: async function (evt) {\r\n+                const item = evt.item;\r\n+                const toCell = evt.to;\r\n+                const boletoId = item.dataset.boletoId;\r\n+                const parcelId = item.dataset.parcelId;\r\n+                const newDate = toCell.dataset.date;\r\n+\r\n+                if (!boletoId || !parcelId || !newDate) return;\r\n+\r\n+                const parentBoleto = userBoletos.find(b => b._id === boletoId);\r\n+                const originalParcel = parentBoleto?.parcels.find(p => p._id === parcelId);\r\n+\r\n+                if (!parentBoleto || !originalParcel) return;\r\n+\r\n+                if (parentBoleto.parcels.length > 1) {\r\n+                    // --- CORREÇÃO AQUI ---\r\n+                    // 1. Definimos a variável 'selectedParcel' que estava em falta.\r\n+                    selectedParcel = { ...originalParcel, parentId: parentBoleto._id };\r\n+\r\n+                    // 2. O resto da lógica continua a mesma\r\n+                    const updatedParcelData = {\r\n+                        ...originalParcel,\r\n+                        dueDate: newDate,\r\n+                    };\r\n+\r\n+                    pendingUpdateData = { \r\n+                        updatedParcelData, \r\n+                        updatedBillData: { category: parentBoleto.category?._id || null }\r\n+                    };\r\n+\r\n+                    const date = new Date(newDate + 'T00:00:00');\r\n+                    singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n+\r\n+                    recurrentEditModal.classList.remove('hidden');\r\n+                    renderCalendar();\r\n+\r\n+                } else {\r\n+                    // Lógica para parcela única (continua a mesma)\r\n+                    showLoader();\r\n+                    try {\r\n+                        await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n+                        showToast('Data da parcela atualizada com sucesso!', 'success');\r\n+                        await updateBillsOrganizer();\r\n+                    } catch (error) {\r\n+                        showToast(error.message, 'error');\r\n+                        await updateBillsOrganizer();\r\n+                    } finally {\r\n+                        hideLoader();\r\n+                    }\r\n+                }\r\n+            },\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Calcula o startDate e endDate com base numa predefinição do seletor.\r\n+ * @returns {{startDate?: string, endDate?: string}} - As datas ou um objeto vazio.\r\n+ */\r\n+function getDateRangeFromPreset() {\r\n+    const preset = dateRangePresetSelect.value;\r\n+    const now = new Date();\r\n+    let startDate, endDate;\r\n+\r\n+    switch (preset) {\r\n+        case 'thisMonth':\r\n+            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n+            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n+            break;\r\n+        case 'lastMonth':\r\n+            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n+            endDate = new Date(now.getFullYear(), now.getMonth(), 0);\r\n+            break;\r\n+        case 'thisQuarter':\r\n+            const quarter = Math.floor(now.getMonth() / 3);\r\n+            startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n+            endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n+            break;\r\n+        case 'thisYear':\r\n+            startDate = new Date(now.getFullYear(), 0, 1);\r\n+            endDate = new Date(now.getFullYear(), 11, 31);\r\n+            break;\r\n+        case 'custom':\r\n+            if (startDateInput.value && endDateInput.value) {\r\n+                return {\r\n+                    startDate: startDateInput.value,\r\n+                    endDate: endDateInput.value\r\n+                };\r\n+            }\r\n+            return {}; // Retorna vazio se o intervalo personalizado não estiver completo\r\n+        default:\r\n+            return {}; // Padrão sem filtro\r\n+    }\r\n+\r\n+    // Formata as datas para o formato YYYY-MM-DD\r\n+    return {\r\n+        startDate: startDate.toISOString().split('T')[0],\r\n+        endDate: endDate.toISOString().split('T')[0]\r\n+    };\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a lista de próximos vencimentos no dashboard.\r\n+ * @param {Array} payments - A lista de pagamentos vinda da API.\r\n+ */\r\n+function renderUpcomingPayments(payments) {\r\n+    if (!upcomingPaymentsList || !noUpcomingPaymentsMessage) return;\r\n+\r\n+    upcomingPaymentsList.innerHTML = ''; // Limpa a lista\r\n+\r\n+    if (payments.length === 0) {\r\n+        upcomingPaymentsList.appendChild(noUpcomingPaymentsMessage);\r\n+        noUpcomingPaymentsMessage.classList.remove('hidden');\r\n+    } else {\r\n+        noUpcomingPaymentsMessage.classList.add('hidden');\r\n+        const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+        payments.forEach(payment => {\r\n+            const dueDate = new Date(payment.dueDate + 'T00:00:00');\r\n+            const formattedDate = dueDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\r\n+\r\n+            const paymentHtml = `\r\n+                <div class=\"flex items-center justify-between bg-gray-700/50 p-3 rounded-md\">\r\n+                    <div>\r\n+                        <p class=\"font-medium text-white\">${payment.billName} (${payment.parcelNumber}ª)</p>\r\n+                        <p class=\"text-sm text-gray-400\">Vence em: ${formattedDate}</p>\r\n+                    </div>\r\n+                    <p class=\"font-semibold text-lg text-yellow-400\">${formatCurrency(payment.amount)}</p>\r\n+                </div>\r\n+            `;\r\n+            upcomingPaymentsList.insertAdjacentHTML('beforeend', paymentHtml);\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de barras horizontais com as 5 maiores despesas por categoria.\r\n+ * @param {Array} data - Os dados de despesas vindos da API.\r\n+ */\r\n+function renderTopExpensesChart(data) {\r\n+    const canvas = document.getElementById('topExpensesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    // Destrói o gráfico anterior, se existir, para evitar sobreposições\r\n+    if (topExpensesChart) {\r\n+        topExpensesChart.destroy();\r\n+    }\r\n+    \r\n+    // 1. Ordena os dados do maior para o menor\r\n+    const sortedData = [...data].sort((a, b) => b.totalAmount - a.totalAmount);\r\n+    \r\n+    // 2. Pega apenas nos 5 primeiros resultados\r\n+    const top5Data = sortedData.slice(0, 5);\r\n+\r\n+    // 3. Prepara os dados para o Chart.js\r\n+    const labels = top5Data.map(item => item.categoryName);\r\n+    const values = top5Data.map(item => item.totalAmount);\r\n+\r\n+    topExpensesChart = new Chart(ctx, {\r\n+        type: 'bar', // Tipo de gráfico\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total Gasto',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(239, 68, 68, 0.6)', // Vermelho\r\n+                borderColor: 'rgba(239, 68, 68, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            indexAxis: 'y', // <-- Isto é o que torna o gráfico horizontal!\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                x: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                y: { ticks: { color: '#d1d5db' }, grid: { display: false } }\r\n+            },\r\n+            plugins: {\r\n+                legend: { display: false },\r\n+                tooltip: {\r\n+                    callbacks: {\r\n+                        label: function(context) {\r\n+                            return ` Total: ${context.raw.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+                        }\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de alteração de senha.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleChangePassword(e) {\r\n+    e.preventDefault(); // Impede o recarregamento da página\r\n+\r\n+    const currentPassword = document.getElementById('currentPassword').value;\r\n+    const newPassword = document.getElementById('newPassword').value;\r\n+    const confirmPassword = document.getElementById('confirmPassword').value;\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.changePassword({ currentPassword, newPassword, confirmPassword });\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Limpa os campos e fecha o modal após o sucesso\r\n+        changePasswordForm.reset();\r\n+        profileModal.classList.add('hidden');\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', async () => {\r\n+// --- Lógica de inicialização que estava em initializeApp() ---\r\n+const today = new Date();\r\n+currentMonth = today.getMonth();\r\n+currentYear = today.getFullYear();\r\n+\r\n+const token = localStorage.getItem('authToken');\r\n+if (!token) {\r\n+    // Se não houver token, redireciona para a página de login\r\n+    window.location.href = 'Index.html';\r\n+    return;\r\n+}\r\n+\r\n+try {\r\n+    const data = await api.checkSession();\r\n+    if (data.user.role === 'SuperAdmin') {\r\n+        isAdminLoggedIn = true;\r\n+        await showAdminDashboard();\r\n+    } else {\r\n+        currentLoggedInUser = data.user;\r\n+        currentLoggedInCompany = data.company;\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            await showMainApp();\r\n+        } else {\r\n+            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                // Se for o dono da empresa, mostra o modal para renovar\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    }\r\n+} catch (error) {\r\n+    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n+    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n+    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    setTimeout(() => {\r\n+        window.location.href = 'Index.html';\r\n+    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n+} finally {\r\n+    // Esconde a tela de carregamento inicial\r\n+    document.getElementById('loadingScreen').classList.add('hidden');\r\n+}\r\n+\r\n+\r\n+// Submissão de formulários\r\n+if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+if (logoutBtn) {\r\n+    logoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n+    });\r\n+}\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+\r\n+\r\n+// Ações na App Principal\r\n+addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+// Ações do Modal de Edição de Boleto\r\n+closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+// Navegação do Calendário\r\n+prevMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+    if (currentMonth === 11) currentYear--;\r\n+    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+\r\n+nextMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+    if (currentMonth === 0) currentYear++;\r\n+    // A mesma mudança aqui\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+}\r\n+\r\n+if (openAddBillModalBtn) {\r\n+    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+}\r\n+\r\n+const handleRedirectToHome = () => {\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+const handleFullLogoutAndRedirect = () => {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+if (subscriptionLogoutBtn) {\r\n+    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+}\r\n+\r\n+if (blockedAccessLogoutBtn) {\r\n+    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n+    });\r\n+}\r\n+\r\n+// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+if (settingsBtn) {\r\n+    settingsBtn.addEventListener('click', (e) => {\r\n+        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+        settingsDropdown.classList.toggle('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Links dentro do menu dropdown\r\n+if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCompanyInfoModal();\r\n+});\r\n+\r\n+if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openPermissionsModal();\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n+\r\n+// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openManageUsersModal();\r\n+});\r\n+\r\n+// Botões do modal de gerir utilizadores\r\n+if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+    manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+    openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+});\r\n+\r\n+/**\r\n+ * Lida com o clique no botão de criar/renovar assinatura.\r\n+ */\r\n+async function handleCreateSubscription() {\r\n+    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+    subscriptionActionBtn.disabled = true;\r\n+    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+    try {\r\n+        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+        const data = await api.createSubscriptionLink();\r\n+\r\n+        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+        if (data.init_point) {\r\n+            window.location.href = data.init_point;\r\n+        } else {\r\n+            throw new Error('Link de pagamento não recebido.');\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+        subscriptionActionBtn.disabled = false;\r\n+        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+    }\r\n+}\r\n+\r\n+// Liga a função ao clique do botão.\r\n+if (subscriptionActionBtn) {\r\n+    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+}\r\n+\r\n+if (closePreviewModalBtn) {\r\n+    closePreviewModalBtn.addEventListener('click', () => {\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+if (nfeXmlInput) {\r\n+    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+}\r\n+\r\n+if (previewBillNameInput) {\r\n+    previewBillNameInput.addEventListener('input', (e) => {\r\n+        if (currentBill) {\r\n+            currentBill.name = e.target.value;\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Liga a função ao clique do botão\r\n+if (showFullScreenBarcodeBtn) {\r\n+    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+}\r\n+\r\n+// Listener para o campo de pesquisa\r\n+if (searchInput) {\r\n+    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Listeners para os botões de filtro\r\n+if (filterButtons) {\r\n+    filterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões\r\n+            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona a classe 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Aplica o filtro\r\n+            applyFiltersAndSearch();\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCategoriesModal();\r\n+});\r\n+\r\n+if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+if (addCategoryForm) {\r\n+    addCategoryForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const name = newCategoryNameInput.value.trim();\r\n+        if (!name) return;\r\n+        try {\r\n+            await api.createCategory(name);\r\n+            newCategoryNameInput.value = '';\r\n+            await openCategoriesModal(); // Recarrega a lista do modal\r\n+            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+if (categoryListDiv) {\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+if (categoryFilterSelect) {\r\n+    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Configuração dos botões do dashboard\r\n+if (viewCalendarBtn) {\r\n+    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+}\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+if (dateRangePresetSelect) {\r\n+    dateRangePresetSelect.addEventListener('change', () => {\r\n+        const isCustom = dateRangePresetSelect.value === 'custom';\r\n+        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n+\r\n+        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n+        // o dashboard é atualizado imediatamente.\r\n+        if (!isCustom) {\r\n+            renderDashboard();\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Para o intervalo personalizado, atualizamos o dashboard\r\n+// assim que ambas as datas estiverem preenchidas.\r\n+if (startDateInput) {\r\n+    startDateInput.addEventListener('change', () => {\r\n+        if (endDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+if (endDateInput) {\r\n+    endDateInput.addEventListener('change', () => {\r\n+        if (startDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+// Listeners para os botões de exportação\r\n+const handleExport = (format) => {\r\n+    // 1. Pega no período de tempo atual do filtro do dashboard\r\n+    const dateRange = getDateRangeFromPreset();\r\n+\r\n+    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n+    const queryString = new URLSearchParams(dateRange).toString();\r\n+\r\n+    // 3. Monta o URL completo para o download\r\n+    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n+    \r\n+    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n+    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n+    fetch(downloadUrl, {\r\n+        headers: {\r\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n+        }\r\n+    })\r\n+    .then(res => res.blob())\r\n+    .then(blob => {\r\n+        const url = window.URL.createObjectURL(blob);\r\n+        const a = document.createElement('a');\r\n+        a.style.display = 'none';\r\n+        a.href = url;\r\n+        a.download = `relatorio-despesas.${format}`;\r\n+        document.body.appendChild(a);\r\n+        a.click();\r\n+        window.URL.revokeObjectURL(url);\r\n+        a.remove();\r\n+    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n+};\r\n+\r\n+if (exportCsvBtn) {\r\n+    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+}\r\n+if (exportPdfBtn) {\r\n+    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n+}\r\n+\r\n+if (manualAddBtn) {\r\n+    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+}\r\n+if (xmlAddBtn) {\r\n+    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+}\r\n+\r\n+if (csvImportBtn) {\r\n+    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n+}\r\n+if (csvFileInput) {\r\n+    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n+}\r\n+if (importCsvBtn) {\r\n+    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n+}\r\n+if (markSelectedAsPaidBtn) {\r\n+    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n+}\r\n+if (selectAllVisibleBtn) {\r\n+    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n+}\r\n+\r\n+if (deselectAllVisibleBtn) {\r\n+    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n+}\r\n+if (dashboardFilterButtons) {\r\n+    dashboardFilterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões do dashboard\r\n+            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Atualiza a variável de estado com o novo filtro\r\n+            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n+            // Renderiza o dashboard novamente com os dados filtrados\r\n+            renderDashboard();\r\n+        });\r\n+    });\r\n+}\r\n+// Abre o modal de alteração de categoria\r\n+if (changeCategoryBtn) {\r\n+    changeCategoryBtn.addEventListener('click', async () => {\r\n+        showLoader();\r\n+        // Popula o dropdown do modal com as categorias existentes\r\n+        await populateCategorySelect(batchCategorySelect);\r\n+        hideLoader();\r\n+        categoryBatchModal.classList.remove('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de cancelar no modal\r\n+if (cancelCategoryBatchBtn) {\r\n+    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n+        categoryBatchModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de confirmar a alteração\r\n+if (confirmCategoryBatchBtn) {\r\n+    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n+        const categoryId = batchCategorySelect.value;\r\n+        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n+        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n+\r\n+        if (boletoIds.length === 0) {\r\n+            return showToast('Nenhum item selecionado.', 'info');\r\n+        }\r\n+\r\n+        showLoader();\r\n+        try {\r\n+            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n+            showToast(response.message, 'success');\r\n+            selectedItems.clear();\r\n+            updateMassPaymentButton();\r\n+            await updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+            categoryBatchModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+}\r\n+if (openProfileModalBtn) {\r\n+    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n+}\r\n+if (closeProfileModalBtn) {\r\n+    closeProfileModalBtn.addEventListener('click', () => {\r\n+        profileModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+if (changePasswordForm) {\r\n+    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n+}\r\n+if (resendVerificationBtn) {\r\n+    resendVerificationBtn.addEventListener('click', async () => {\r\n+        resendVerificationBtn.disabled = true;\r\n+        resendVerificationBtn.textContent = 'A reenviar...';\r\n+\r\n+        try {\r\n+            const data = await api.resendVerificationEmail();\r\n+            showToast(data.message, 'success');\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            resendVerificationBtn.disabled = false;\r\n+            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n+        }\r\n+    });\r\n+}\r\n+if (recurrentAddBtn) {\r\n+    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n+}\r\n+if (recurrentEditModal) {\r\n+    // Botões de escolha (Somente esta, futuras, todas)\r\n+    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const scope = e.currentTarget.dataset.scope;\r\n+            if (!pendingUpdateData || !selectedParcel) return;\r\n+\r\n+            recurrentEditModal.classList.add('hidden');\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a nova rota da API com o escopo escolhido\r\n+                await api.bulkUpdateParcels(\r\n+                    selectedParcel.parentId, \r\n+                    selectedParcel._id, \r\n+                    pendingUpdateData.updatedParcelData, \r\n+                    scope\r\n+                );\r\n+\r\n+                // Atualiza a categoria do boleto, se foi alterada\r\n+                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n+\r\n+                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n+                billModal.classList.add('hidden');\r\n+                await updateBillsOrganizer();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+                pendingUpdateData = null; // Limpa os dados pendentes\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Botão de cancelar\r\n+    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n+        recurrentEditModal.classList.add('hidden');\r\n+        pendingUpdateData = null; // Limpa os dados pendentes\r\n+    });\r\n+}\r\n+\r\n+// CHAME A NOVA FUNÇÃO AQUI\r\n+initializeDashboardDragAndDrop(); \r\n+\r\n+\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753807512138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3125 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import { API_BASE_URL } from './config.js';\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let expensesPieChart = null;\r\n+let expensesBarChart = null;\r\n+let topExpensesChart = null;\r\n+let parsedCsvData = [];\r\n+let selectedParcels = new Set();\r\n+let dashboardStatusFilter = 'all';\r\n+let selectedItems = new Map();\r\n+let pendingUpdateData = null;\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+\r\n+const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n+const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n+const calendarView = document.getElementById('calendarView');\r\n+const dashboardView = document.getElementById('dashboardView');\r\n+const dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\n+const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n+const startDateInput = document.getElementById('start-date-input');\r\n+const endDateInput = document.getElementById('end-date-input');\r\n+const kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\n+const upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\n+const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n+const exportCsvBtn = document.getElementById('export-csv-btn');\r\n+const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n+const dashboardFilterButtons = document.querySelectorAll('.dashboard-filter-btn');\r\n+\r\n+const manualAddBtn = document.getElementById('manual-add-btn');\r\n+const xmlAddBtn = document.getElementById('xml-add-btn');\r\n+const manualAddForm = document.getElementById('manual-add-form');\r\n+const xmlAddForm = document.getElementById('xml-add-form');\r\n+\r\n+const csvImportBtn = document.getElementById('csv-import-btn');\r\n+const csvImportForm = document.getElementById('csv-import-form');\r\n+const csvFileInput = document.getElementById('csv-file-input');\r\n+const csvPreviewArea = document.getElementById('csv-preview-area');\r\n+const csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\n+const csvImportSummary = document.getElementById('csv-import-summary');\r\n+const importCsvBtn = document.getElementById('import-csv-btn');\r\n+\r\n+const markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\n+const selectedCountSpan = document.getElementById('selectedCount');\r\n+const massActionsContainer = document.getElementById('massActionsContainer');\r\n+const selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\n+const deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n+\r\n+const changeCategoryBtn = document.getElementById('changeCategoryBtn');\r\n+const categoryBatchModal = document.getElementById('categoryBatchModal');\r\n+const batchCategorySelect = document.getElementById('batchCategorySelect');\r\n+const cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\n+const confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n+\r\n+const openProfileModalBtn = document.getElementById('openProfileModalBtn');\r\n+const profileModal = document.getElementById('profileModal');\r\n+const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\n+const profileUsername = document.getElementById('profileUsername');\r\n+const profileRole = document.getElementById('profileRole');\r\n+const profileCompany = document.getElementById('profileCompany');\r\n+const changePasswordForm = document.getElementById('changePasswordForm');\r\n+const verificationNotice = document.getElementById('verificationNotice');\r\n+const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n+\r\n+const recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\n+const recurrentAddForm = document.getElementById('recurrent-add-form');\r\n+const recurrentEditModal = document.getElementById('recurrentEditModal');\r\n+const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n+const singleParcelDate = document.getElementById('single-parcel-date');\r\n+\r\n+const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n+const announcementMessage = document.getElementById('announcementMessage');\r\n+const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n+ */\r\n+function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+\r\n+    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n+\r\n+    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n+    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n+\r\n+    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n+\r\n+    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    // Atualiza os elementos HTML com os valores corretos\r\n+    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n+    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n+    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com uma lista específica de boletos.\r\n+ * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n+ * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n+ */\r\n+function renderCalendar(boletosToRender = userBoletos) {\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+    const today = new Date(); // Variável para verificar boletos vencidos\r\n+    today.setHours(0, 0, 0, 0); // Zera a hora para uma comparação precisa do dia\r\n+\r\n+    // ETAPA 1: Otimização - Agrupa todas as parcelas por data de vencimento.\r\n+    const parcelsByDate = new Map();\r\n+    boletosToRender.forEach(bill => {\r\n+        bill.parcels.forEach(parcel => {\r\n+            const date = parcel.dueDate;\r\n+            if (!parcelsByDate.has(date)) {\r\n+                parcelsByDate.set(date, []);\r\n+            }\r\n+            // Adiciona uma referência ao boleto pai para cada parcela, para facilitar.\r\n+            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n+        });\r\n+    });\r\n+\r\n+    // ETAPA 2: Renderização do Calendário\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    // Cria as células vazias do início do mês\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    // Cria as células para cada dia do mês\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+\r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        // Adiciona evento de clique na célula para criar novos boletos\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card-draggable')) return;\r\n+            openAddBillModal(e.currentTarget.dataset.date);\r\n+        });\r\n+\r\n+        // Verifica se existem parcelas para este dia no mapa\r\n+        if (parcelsByDate.has(dateStr)) {\r\n+            // Se existirem, itera apenas sobre as parcelas daquele dia\r\n+            parcelsByDate.get(dateStr).forEach(parcel => {\r\n+                const bill = parcel.parentBill; // Pega a referência do boleto pai\r\n+                const parcelElement = document.createElement('div');\r\n+                \r\n+                // Lógica de Status, Cores e Ícones\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                const isOverdue = !parcel.paid && dueDate < today;\r\n+                let statusClass = 'bg-indigo-700 text-indigo-100'; // Padrão: Pendente\r\n+                let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n+            \r\n+                if (parcel.paid) {\r\n+                    statusClass = 'bg-green-700 text-green-100'; // Pago\r\n+                    statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n+                } else if (isOverdue) {\r\n+                    statusClass = 'bg-red-700 text-red-100'; // Vencido\r\n+                    statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n+                }\r\n+            \r\n+                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n+                parcelElement.dataset.boletoId = bill._id;\r\n+                parcelElement.dataset.parcelId = parcel._id;\r\n+    \r\n+                // HTML do card com layout aprimorado\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"flex items-start space-x-2\">\r\n+                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n+                        <div class=\"flex-1 min-w-0\">\r\n+                            <div class=\"flex justify-between items-center\">\r\n+                                <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n+                                    ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n+                                </span>\r\n+                                <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n+                                    ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n+                                </span>\r\n+                            </div>\r\n+                            \r\n+                            ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                            ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n+                        </div>\r\n+                    </div>\r\n+                `;\r\n+    \r\n+                // Adiciona evento de clique no card para abrir o modal\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                \r\n+                // Lógica para o checkbox\r\n+                const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n+                checkbox.addEventListener('change', (e) => {\r\n+                    const parcelId = e.target.dataset.parcelId;\r\n+                    const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n+                    if (e.target.checked) {\r\n+                        selectedItems.set(parcelId, boletoId);\r\n+                    } else {\r\n+                        selectedItems.delete(parcelId);\r\n+                    }\r\n+                    updateMassPaymentButton();\r\n+                });\r\n+                checkbox.addEventListener('click', (e) => {\r\n+                    e.stopPropagation(); // Impede o clique de abrir o modal\r\n+                });\r\n+                \r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        }\r\n+        \r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+\r\n+    initializeDragAndDrop();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+async function openBillModal(bill, parcel) {\r\n+    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+\r\n+    // Preenche todos os campos do modal com os dados da parcela clicada\r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+    // Mostra o botão de gerar código de barras apenas se houver um código\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+\r\n+    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n+    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n+    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n+    if (bill.nfeNumber) {\r\n+        nfeNumberEl.textContent = bill.nfeNumber;\r\n+        nfeContainer.classList.remove('hidden');\r\n+    } else {\r\n+        nfeContainer.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Lógica dinâmica para a secção de anexos\r\n+    const attachmentContainer = document.getElementById('attachment-container');\r\n+    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n+\r\n+    if (parcel.attachmentUrl) {\r\n+        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n+        attachmentContainer.innerHTML = `\r\n+            <div class=\"flex items-center justify-between\">\r\n+                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n+                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n+                </a>\r\n+                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n+            </div>\r\n+        `;\r\n+        // Adiciona o evento de clique ao novo botão de remover\r\n+        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n+    } else {\r\n+        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        // Adiciona o evento de 'change' ao novo input de upload\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+    }\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        categories.forEach(cat => {\r\n+            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n+        });\r\n+        if (bill.category) {\r\n+            modalBillCategorySelect.value = bill.category._id;\r\n+        } else {\r\n+            modalBillCategorySelect.value = \"\";\r\n+        }\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    if (billForm) {\r\n+        billForm.reset();\r\n+    }\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        totalBillsSpan.textContent = totalParcels;\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    mainAppContent.classList.remove('hidden');\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+    await fetchAndDisplayAnnouncement();\r\n+    await populateCategoryFilter();\r\n+    await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n+ * @param {string} tagName - O nome da tag a ser procurada.\r\n+ * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n+ * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n+ */\r\n+function getTagValue(tagName, parentElement) {\r\n+    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n+    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n+    return element?.textContent || '';\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona os eventos de clique e mudança aos elementos dinâmicos do modal de detalhes da empresa.\r\n+ * Esta é a função que estava em falta.\r\n+ */\r\n+function addEventListenersToCompanyDetailsModal() {\r\n+    // Evento para os seletores de cargo (role)\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                // Recarrega os dados do modal para garantir consistência\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Evento para os botões de remover utilizador\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.currentTarget.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                // Recarrega os dados do modal\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n+ */\r\n+function openCompanyDetailsModal(company, users, masterUsers) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (masterUsers && masterUsers.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        masterUsers.forEach(user => {\r\n+            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n+\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona os eventos DEPOIS de criar os botões\r\n+    addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n+    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n+\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        // Passa os novos dados para a função da API\r\n+        const data = await api.registerUser(username, password, email, role, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        // A chamada à API já retorna os dados completos da empresa, incluindo 'isVerified'\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        // LÓGICA PARA MOSTRAR/ESCONDER O AVISO\r\n+        if (company.isVerified) {\r\n+            verificationNotice.classList.add('hidden');\r\n+        } else {\r\n+            verificationNotice.classList.remove('hidden');\r\n+        }\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+\r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function openCategoriesModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        renderCategoryList(categories);\r\n+        categoriesModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function renderCategoryList(categories) {\r\n+    categoryListDiv.innerHTML = '';\r\n+    if (categories.length === 0) {\r\n+        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n+        return;\r\n+    }\r\n+    categories.forEach(category => {\r\n+        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n+                <span class=\"text-white\">${category.name}</span>\r\n+                <div>\r\n+                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n+                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                </div>\r\n+            </div>\r\n+        `);\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo boleto,\r\n+ * e opcionalmente pré-preenchendo a data.\r\n+ * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n+ */\r\n+async function openAddBillModal(preselectedDate = null) {\r\n+    clearBillForm();\r\n+    switchAddBillMode('manual');\r\n+    showLoader();\r\n+    try {\r\n+        // Se uma data foi passada como parâmetro (ou seja, o utilizador clicou no calendário)\r\n+        if (preselectedDate) {\r\n+            // Preenche o campo da aba \"Adicionar Manual\" (comportamento que já existia)\r\n+            document.getElementById('dueDate').value = preselectedDate;\r\n+\r\n+            // NOVA LINHA: Preenche também o campo da aba \"Pagamento Recorrente\"\r\n+            document.getElementById('recurrentStartDate').value = preselectedDate;\r\n+        }\r\n+\r\n+        addBillModal.classList.remove('hidden');\r\n+    } catch (error)\r\n+ {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function populateCategoryFilter() {\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n+        // Se der erro, garante que a opção padrão exista\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Alterna a visualização entre o Calendário e o Dashboard.\r\n+ */\r\n+function switchView(viewToShow) {\r\n+    // Esconde ambas as vistas\r\n+    calendarView.classList.add('hidden');\r\n+    dashboardView.classList.add('hidden');\r\n+\r\n+    // Reseta o estilo dos botões\r\n+    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n+    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n+    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+\r\n+    // Mostra a vista correta e ativa o botão correspondente\r\n+    if (viewToShow === 'calendar') {\r\n+        calendarView.classList.remove('hidden');\r\n+        viewCalendarBtn.classList.add('bg-indigo-600');\r\n+        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    } else if (viewToShow === 'dashboard') {\r\n+        dashboardView.classList.remove('hidden');\r\n+        viewDashboardBtn.classList.add('bg-indigo-600');\r\n+        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderDashboard();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza os cartões de KPI no dashboard.\r\n+ * @param {object} kpiData - Os dados dos KPIs vindos da API.\r\n+ */\r\n+function updateKpiCards(kpiData) {\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n+\r\n+    // Popula os novos campos\r\n+    if (kpiContasVencidas) kpiContasVencidas.textContent = formatCurrency(kpiData.totalVencido);\r\n+    \r\n+    // Popula os campos existentes\r\n+    document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n+    document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n+    document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n+}\r\n+\r\n+/**\r\n+ * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n+ */\r\n+async function renderDashboard() {\r\n+    showLoader();\r\n+    try {\r\n+        const dateRange = getDateRangeFromPreset();\r\n+\r\n+        // ATUALIZADO: Passa o 'dashboardStatusFilter' para as chamadas da API\r\n+        const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n+            api.getExpensesByCategory(dateRange, dashboardStatusFilter),\r\n+            api.getMonthlySummary(dateRange, dashboardStatusFilter),\r\n+            api.getKpiSummary(dateRange),\r\n+            api.getUpcomingPayments()\r\n+        ]);\r\n+\r\n+        updateKpiCards(kpiData);\r\n+        renderPieChart(pieData);\r\n+        renderBarChart(barData);\r\n+        renderUpcomingPayments(upcomingData);\r\n+        renderTopExpensesChart(pieData);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de pizza de despesas por categoria.\r\n+ */\r\n+function renderPieChart(data) {\r\n+    const canvas = document.getElementById('expensesByCategoryChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    if (expensesPieChart) {\r\n+        expensesPieChart.destroy();\r\n+    }\r\n+\r\n+    expensesPieChart = new Chart(ctx, {\r\n+        type: 'pie',\r\n+        data: {\r\n+            labels: data.map(item => item.categoryName),\r\n+            datasets: [{\r\n+                data: data.map(item => item.totalAmount),\r\n+                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n+                borderColor: '#1f2937',\r\n+                borderWidth: 2\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n+ */\r\n+function renderBarChart(data) {\r\n+    const canvas = document.getElementById('monthlyExpensesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n+    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n+    const values = data.map(item => item.totalAmount);\r\n+\r\n+    if (expensesBarChart) {\r\n+        expensesBarChart.destroy();\r\n+    }\r\n+    \r\n+    expensesBarChart = new Chart(ctx, {\r\n+        type: 'bar',\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n+                borderColor: 'rgba(79, 70, 229, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n+            },\r\n+            plugins: { legend: { display: false } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Busca categorias da API e preenche um elemento <select> do HTML.\r\n+ * @param {HTMLSelectElement} selectElement - O elemento dropdown a ser preenchido.\r\n+ */\r\n+async function populateCategorySelect(selectElement) {\r\n+    if (!selectElement) return;\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        selectElement.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            const option = document.createElement('option');\r\n+            option.value = category._id;\r\n+            option.textContent = category.name;\r\n+            selectElement.appendChild(option);\r\n+        });\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n+ * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n+ */\r\n+function initializeDashboardDragAndDrop() {\r\n+    const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n+    const mainGrid = document.getElementById('dashboard-main-grid');\r\n+\r\n+    // Vamos guardar as instâncias do Sortable em variáveis\r\n+    let kpiSortable, mainSortable;\r\n+\r\n+    const saveOrder = (gridType) => {\r\n+        if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n+\r\n+        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n+        let order;\r\n+\r\n+        // Usamos a instância correta para obter a ordem\r\n+        if (gridType === 'kpi' && kpiSortable) {\r\n+            order = kpiSortable.toArray();\r\n+        } else if (gridType === 'main' && mainSortable) {\r\n+            order = mainSortable.toArray();\r\n+        }\r\n+\r\n+        if (order) {\r\n+            localStorage.setItem(key, JSON.stringify(order));\r\n+        }\r\n+    };\r\n+\r\n+    if (kpiGrid) {\r\n+        // Guardamos a instância na nossa variável\r\n+        kpiSortable = new Sortable(kpiGrid, {\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+            // A chamada agora é mais simples\r\n+            onEnd: () => saveOrder('kpi'),\r\n+        });\r\n+    }\r\n+\r\n+    if (mainGrid) {\r\n+        // Guardamos a instância na nossa variável\r\n+        mainSortable = new Sortable(mainGrid, {\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+            onEnd: () => saveOrder('main'),\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Verifica o localStorage por uma ordem de cartões salva para o utilizador atual\r\n+ * e, se encontrar, reordena os elementos no ecrã.\r\n+ */\r\n+function applySavedDashboardOrder() {\r\n+    if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n+\r\n+    const applyOrder = (gridType) => {\r\n+        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n+        const savedOrder = localStorage.getItem(key);\r\n+        const grid = document.getElementById(`dashboard-${gridType}-grid`);\r\n+\r\n+        if (savedOrder && grid) {\r\n+            const order = JSON.parse(savedOrder);\r\n+            // Para cada id na ordem salva, encontramos o elemento correspondente\r\n+            // e o movemos para o final do container. Ao fazer isto em sequência,\r\n+            // a ordem final corresponde à ordem salva.\r\n+            order.forEach(dataId => {\r\n+                const card = grid.querySelector(`[data-id=\"${dataId}\"]`);\r\n+                if (card) {\r\n+                    grid.appendChild(card);\r\n+                }\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    applyOrder('kpi');\r\n+    applyOrder('main');\r\n+}\r\n+\r\n+/**\r\n+ * Captura a área do dashboard como uma imagem e gera um ficheiro PDF para download.\r\n+ */\r\n+async function handleVisualExportPDF() {\r\n+    // Mostra o loader para dar feedback ao utilizador\r\n+    showLoader();\r\n+\r\n+    // Seleciona o elemento do DOM que queremos \"fotografar\"\r\n+    const dashboardElement = document.getElementById('dashboardView');\r\n+    \r\n+    // Esconde temporariamente os botões de filtro e exportação para não aparecerem no PDF\r\n+    const filterContainer = document.getElementById('dashboard-date-filter-container');\r\n+    if (filterContainer) filterContainer.style.display = 'none';\r\n+\r\n+    try {\r\n+        // Usa a biblioteca html2canvas para criar um \"canvas\" (uma imagem) do elemento\r\n+        const canvas = await html2canvas(dashboardElement, {\r\n+            scale: 2, // Aumenta a resolução da imagem para melhor qualidade\r\n+            backgroundColor: '#1e293b' // Garante um fundo consistente\r\n+        });\r\n+\r\n+        // Converte o canvas para uma imagem no formato PNG\r\n+        const imageData = canvas.toDataURL('image/png');\r\n+\r\n+        // Usa a biblioteca jsPDF para criar o documento\r\n+        // A orientação 'p' é retrato (portrait), 'mm' é milímetros, 'a4' é o tamanho da página\r\n+        const pdf = new jspdf.jsPDF({\r\n+            orientation: 'p',\r\n+            unit: 'mm',\r\n+            format: 'a4'\r\n+        });\r\n+\r\n+        // Calcula as dimensões da imagem para que ela caiba na página A4, mantendo a proporção\r\n+        const pageWidth = pdf.internal.pageSize.getWidth();\r\n+        const pageHeight = pdf.internal.pageSize.getHeight();\r\n+        const imageWidth = canvas.width;\r\n+        const imageHeight = canvas.height;\r\n+        const ratio = imageWidth / imageHeight;\r\n+        let pdfImageWidth = pageWidth - 20; // Deixa uma margem de 10mm de cada lado\r\n+        let pdfImageHeight = pdfImageWidth / ratio;\r\n+        \r\n+        // Se a imagem ainda for muito alta, ajusta pela altura\r\n+        if (pdfImageHeight > pageHeight - 20) {\r\n+            pdfImageHeight = pageHeight - 20;\r\n+            pdfImageWidth = pdfImageHeight * ratio;\r\n+        }\r\n+        \r\n+        // Adiciona a imagem ao PDF, centralizada\r\n+        const x = (pageWidth - pdfImageWidth) / 2;\r\n+        const y = 10; // Margem de 10mm no topo\r\n+        pdf.addImage(imageData, 'PNG', x, y, pdfImageWidth, pdfImageHeight);\r\n+\r\n+        // Força o download do ficheiro\r\n+        pdf.save('dashboard-relatorio.pdf');\r\n+\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao gerar PDF visual:\", error);\r\n+        showToast('Ocorreu um erro ao gerar o PDF.', 'error');\r\n+    } finally {\r\n+        // Mostra novamente os botões de filtro, quer a exportação tenha funcionado ou não\r\n+        if (filterContainer) filterContainer.style.display = 'block';\r\n+        // Esconde o loader\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n+ * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n+ */\r\n+function switchAddBillMode(mode) {\r\n+    if (!manualAddForm || !xmlAddForm || !csvImportForm || !recurrentAddForm) return;\r\n+\r\n+    // Esconde todos os painéis\r\n+    manualAddForm.classList.add('hidden');\r\n+    xmlAddForm.classList.add('hidden');\r\n+    csvImportForm.classList.add('hidden');\r\n+    recurrentAddForm.classList.add('hidden'); // Esconde o novo painel\r\n+\r\n+    // Reseta o estilo de todos os botões\r\n+    [manualAddBtn, xmlAddBtn, csvImportBtn, recurrentAddBtn].forEach(btn => { // Adiciona o novo botão\r\n+        if(btn) {\r\n+            btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+            btn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+        }\r\n+    });\r\n+\r\n+    // Ativa o painel e o botão corretos\r\n+    let activeBtn, activeForm;\r\n+    if (mode === 'manual') {\r\n+        activeBtn = manualAddBtn;\r\n+        activeForm = manualAddForm;\r\n+    } else if (mode === 'xml') {\r\n+        activeBtn = xmlAddBtn;\r\n+        activeForm = xmlAddForm;\r\n+    } else if (mode === 'recurrent') { // Adiciona a nova condição\r\n+        activeBtn = recurrentAddBtn;\r\n+        activeForm = recurrentAddForm;\r\n+    } else if (mode === 'csv') {\r\n+        activeBtn = csvImportBtn;\r\n+        activeForm = csvImportForm;\r\n+    }\r\n+\r\n+    if (activeBtn && activeForm) {\r\n+        activeForm.classList.remove('hidden');\r\n+        activeBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+        activeBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a seleção de um ficheiro CSV, lê e pré-visualiza os dados.\r\n+ */\r\n+function handleCsvFileSelect(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) return;\r\n+\r\n+    // Usa o PapaParse para ler o ficheiro\r\n+    Papa.parse(file, {\r\n+        header: true, // Trata a primeira linha como cabeçalho\r\n+        skipEmptyLines: true,\r\n+        complete: (results) => {\r\n+            // Guarda os dados processados no estado da aplicação\r\n+            parsedCsvData = results.data;\r\n+            renderCsvPreview(parsedCsvData);\r\n+        },\r\n+        error: (err) => {\r\n+            showToast(`Erro ao ler o ficheiro CSV: ${err.message}`, 'error');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a tabela de pré-visualização com os dados lidos do CSV.\r\n+ */\r\n+function renderCsvPreview(data) {\r\n+    // Verificação de segurança para garantir que 'data' é um array\r\n+    if (!Array.isArray(data)) {\r\n+        console.error(\"renderCsvPreview foi chamada com dados inválidos:\", data);\r\n+        data = []; // Assume um array vazio para não quebrar a execução\r\n+    }\r\n+\r\n+    if (!csvPreviewTableBody || !csvPreviewArea || !csvImportSummary) {\r\n+        console.error(\"Elementos da pré-visualização do CSV não foram encontrados no HTML.\");\r\n+        return;\r\n+    }\r\n+\r\n+    csvPreviewTableBody.innerHTML = '';\r\n+    if (data.length === 0) {\r\n+        csvPreviewArea.classList.add('hidden');\r\n+        return;\r\n+    }\r\n+    \r\n+    const formatCurrency = (valueStr) => {\r\n+        const value = parseFloat(String(valueStr).replace(',', '.'));\r\n+        return isNaN(value) ? 'Inválido' : value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+    };\r\n+\r\n+    data.forEach(row => {\r\n+        const values = Object.values(row);\r\n+        const tr = `\r\n+            <tr>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[0] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[1] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[2] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700 text-right\">${formatCurrency(values[3])}</td>\r\n+            </tr>\r\n+        `;\r\n+        csvPreviewTableBody.insertAdjacentHTML('beforeend', tr);\r\n+    });\r\n+\r\n+    csvImportSummary.textContent = `${data.length} boletos prontos para serem importados.`;\r\n+    csvPreviewArea.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Envia os dados do CSV para a API para serem salvos na base de dados.\r\n+ */\r\n+async function handleConfirmImport() {\r\n+    if (parsedCsvData.length === 0) {\r\n+        return showToast('Não há dados para importar.', 'info');\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const response = await api.importBoletos(parsedCsvData);\r\n+        showToast(response.message, 'success');\r\n+\r\n+        // Fecha o modal e atualiza a aplicação\r\n+        addBillModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+\r\n+        // Limpa os dados da pré-visualização\r\n+        csvPreviewArea.classList.add('hidden');\r\n+        csvFileInput.value = '';\r\n+        parsedCsvData = [];\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a visibilidade e a contagem do botão de pagamento em massa.\r\n+ */\r\n+function updateMassPaymentButton() {\r\n+    const count = selectedItems.size;\r\n+    selectedCountSpan.textContent = count;\r\n+    massActionsContainer.classList.toggle('hidden', count === 0);\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Pagar Selecionados\".\r\n+ */\r\n+async function handleMarkSelectedAsPaid() {\r\n+    if (selectedItems.size === 0) {\r\n+        return showToast('Nenhuma parcela selecionada.', 'info');\r\n+    }\r\n+\r\n+    if (!confirm(`Tem a certeza que deseja marcar ${selectedItems.size} parcela(s) como paga(s)?`)) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const parcelIds = Array.from(selectedItems.keys());\r\n+\r\n+        // Chama a função da API com o array de IDs correto.\r\n+        const response = await api.markParcelsAsPaid(parcelIds);\r\n+\r\n+        showToast(response.message, 'success');\r\n+\r\n+        // Limpa a seleção e atualiza a interface\r\n+        selectedItems.clear();\r\n+        updateMassPaymentButton();\r\n+        await updateBillsOrganizer(); // Recarrega o calendário\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Seleciona todos os checkboxes de boletos visíveis no calendário.\r\n+ */\r\n+function handleSelectAllVisible() {\r\n+    // Pega todos os checkboxes que estão atualmente no calendário\r\n+    document.querySelectorAll('.mass-payment-checkbox').forEach(checkbox => {\r\n+        // Marca apenas os que ainda não estão marcados\r\n+        if (!checkbox.checked) {\r\n+            checkbox.checked = true;\r\n+\r\n+            // --- LÓGICA CORRIGIDA ---\r\n+            const parcelId = checkbox.dataset.parcelId;\r\n+            // Pega o boletoId do elemento pai mais próximo\r\n+            const boletoId = checkbox.closest('.bill-card-draggable').dataset.boletoId;\r\n+\r\n+            // Garante que temos os dois IDs antes de adicionar ao mapa\r\n+            if (parcelId && boletoId) {\r\n+                // Usa o método .set(key, value), que é o correto para um Map\r\n+                selectedItems.set(parcelId, boletoId);\r\n+            }\r\n+        }\r\n+    });\r\n+    // Atualiza o botão para refletir a nova contagem\r\n+    updateMassPaymentButton();\r\n+}\r\n+\r\n+/**\r\n+ * Desmarca todos os checkboxes de boletos selecionados.\r\n+ */\r\n+function handleDeselectAll() {\r\n+    // Limpa o nosso Set de seleção\r\n+    selectedItems.clear();\r\n+    // Desmarca todos os checkboxes que estão no calendário\r\n+    document.querySelectorAll('.mass-payment-checkbox:checked').forEach(checkbox => {\r\n+        checkbox.checked = false;\r\n+    });\r\n+    // Atualiza o botão (que será escondido, pois a contagem é 0)\r\n+    updateMassPaymentButton();\r\n+}\r\n+\r\n+/**\r\n+ * Busca os dados do utilizador e abre o modal de perfil.\r\n+ */\r\n+async function openProfileModal() {\r\n+    // Usa as variáveis globais que já temos da inicialização\r\n+    if (!currentLoggedInUser || !currentLoggedInCompany) {\r\n+        showToast('Não foi possível carregar os dados do perfil.', 'error');\r\n+        return;\r\n+    }\r\n+\r\n+    // Preenche o modal com os dados\r\n+    profileUsername.textContent = currentLoggedInUser.username;\r\n+    profileRole.textContent = currentLoggedInUser.role;\r\n+    profileCompany.textContent = currentLoggedInCompany.nomeEmpresa;\r\n+\r\n+    // Mostra o modal\r\n+    profileModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Busca o anúncio ativo mais recente e o exibe no banner.\r\n+ */\r\n+async function fetchAndDisplayAnnouncement() {\r\n+    try {\r\n+        const announcement = await api.getActiveAnnouncement();\r\n+\r\n+        // Se existir um anúncio e ele tiver uma mensagem\r\n+        if (announcement && announcement.message) {\r\n+            let messageHtml = announcement.message;\r\n+            // Se o anúncio tiver um link, transforma a mensagem num link clicável\r\n+            if (announcement.link) {\r\n+                messageHtml = `<a href=\"${announcement.link}\" target=\"_blank\" class=\"hover:underline\">${announcement.message} <i class=\"fas fa-external-link-alt fa-xs ml-1\"></i></a>`;\r\n+            }\r\n+            announcementMessage.innerHTML = messageHtml;\r\n+            globalAnnouncementBanner.classList.remove('hidden');\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(\"Não foi possível buscar o anúncio:\", error);\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+// =================================================================================\r\n+\r\n+async function handleForgotPasswordRequest(e) {\r\n+    e.preventDefault();\r\n+    const email = document.getElementById('recoveryEmailInput').value;\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.requestPasswordReset(email);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n+        forgotPasswordModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList(); // Se tiver essa função\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // CORREÇÃO: Capturamos a nova lista 'masterUsers' da API\r\n+                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                // CORREÇÃO: Passamos a lista para a função do modal\r\n+                openCompanyDetailsModal(company, users, masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // CORREÇÃO: Capturamos a nova lista 'masterUsers'\r\n+                const { users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+\r\n+                // CORREÇÃO: Verificamos se existem usuários na lista do banco Mestre\r\n+                if (!masterUsers || masterUsers.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários (no registro mestre) para representar.', 'info');\r\n+                }\r\n+\r\n+                // CORREÇÃO: Usamos o ID do primeiro usuário da lista do banco Mestre\r\n+                const userIdToImpersonate = masterUsers[0]._id; \r\n+\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                // O resto da lógica continua igual...\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+async function handleCalculateInstallments(e) {\r\n+    e.preventDefault(); // Impede a submissão padrão do formulário\r\n+\r\n+    const activeTabButton = document.querySelector('#addBillModal .flex button.bg-indigo-600');\r\n+    if (!activeTabButton) {\r\n+        return showToast('Erro: Não foi possível identificar a aba ativa.', 'error');\r\n+    }\r\n+    const activeModeId = activeTabButton.id;\r\n+\r\n+    currentBill = null;\r\n+\r\n+    if (activeModeId === 'manual-add-btn') {\r\n+        const billName = document.getElementById('billName').value;\r\n+        const dueDate = document.getElementById('dueDate').value;\r\n+        const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(',', '.'));\r\n+        const installments = parseInt(document.getElementById('installments').value);\r\n+        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+        const description = document.getElementById('description').value;\r\n+\r\n+        // Validação feita aqui no JavaScript\r\n+        if (!billName || !dueDate || !installments || isNaN(totalAmount) || totalAmount <= 0 || installments <= 0) {\r\n+            return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n+        }\r\n+\r\n+        currentBill = { name: billName, description, parcels: [], category: null };\r\n+        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+\r\n+        for (let i = 0; i < installments; i++) {\r\n+            const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+            parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+            currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n+        }\r\n+\r\n+    } else if (activeModeId === 'recurrent-add-btn') {\r\n+        const billName = document.getElementById('recurrentBillName').value;\r\n+        const startDate = document.getElementById('recurrentStartDate').value;\r\n+        const amount = parseFloat(document.getElementById('recurrentAmount').value);\r\n+        const months = parseInt(document.getElementById('recurrentInstallments').value);\r\n+        const description = document.getElementById('recurrentDescription').value;\r\n+\r\n+        // Validação feita aqui no JavaScript\r\n+        if (!billName || !startDate || !months || isNaN(amount) || amount <= 0 || months <= 0) {\r\n+            return showToast(\"Preencha todos os campos do pagamento recorrente.\", \"error\");\r\n+        }\r\n+\r\n+        currentBill = { name: billName, description, parcels: [], category: null };\r\n+\r\n+        for (let i = 0; i < months; i++) {\r\n+            const parcelDate = new Date(startDate + 'T00:00:00');\r\n+            parcelDate.setMonth(parcelDate.getMonth() + i);\r\n+            currentBill.parcels.push({ number: i + 1, amount: amount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n+        }\r\n+    }\r\n+\r\n+    // Este bloco só será executado se `currentBill` tiver sido preenchido com sucesso\r\n+    if (currentBill && currentBill.parcels.length > 0) {\r\n+        installmentsList.innerHTML = '';\r\n+        currentBill.parcels.forEach((parcel, index) => {\r\n+             installmentsList.insertAdjacentHTML('beforeend', `\r\n+                <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                    <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                    <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                    <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                    <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                </div>\r\n+            `);\r\n+        });\r\n+\r\n+        addEventListenersToInstallmentInputs();\r\n+        updatePreviewTotal();\r\n+        previewBillNameInput.value = currentBill.name;\r\n+        previewNfeNumber.textContent = 'N/A';\r\n+        addBillModal.classList.add('hidden');\r\n+        await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n+        installmentsPreviewModal.classList.remove('hidden');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n+ */\r\n+function updatePreviewTotal() {\r\n+    if (!currentBill.parcels) return;\r\n+    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    currentBill.category = document.getElementById('previewBillCategorySelect').value || null;\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill); // O objeto currentBill agora tem a categoria correta\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+        clearBillForm();\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+\r\n+    // Guarda os dados atualizados do formulário\r\n+    const updatedParcelData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    const updatedBillData = {\r\n+        category: modalBillCategorySelect.value || null\r\n+    };\r\n+\r\n+    // Encontra o boleto pai na nossa lista local\r\n+    const parentBoleto = userBoletos.find(b => b._id === selectedParcel.parentId);\r\n+\r\n+    // Verifica se a parcela é recorrente (se o boleto pai tem mais de 1 parcela)\r\n+    if (parentBoleto && parentBoleto.parcels.length > 1) {\r\n+        // Se for recorrente, guarda os dados e abre o modal de escolha\r\n+        pendingUpdateData = { updatedParcelData, updatedBillData };\r\n+\r\n+        // Atualiza a data no texto do botão para dar mais contexto ao utilizador\r\n+        const date = new Date(updatedParcelData.dueDate + 'T00:00:00');\r\n+        singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n+\r\n+        recurrentEditModal.classList.remove('hidden');\r\n+    } else {\r\n+        // Se não for recorrente, salva diretamente como antes\r\n+        showLoader();\r\n+        try {\r\n+            await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n+            await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n+            showToast('Alterações salvas com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            await updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ * Verifica a sessão e o estado da assinatura.\r\n+ */\r\n+async function initializeApp() {\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n+    const action = urlParams.get('action');\r\n+\r\n+    if (action === 'forgot_password') {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+\r\n+    if (!token) {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        showAdminLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+function logout() {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+\r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        // CORREÇÃO: Buscamos os detalhes da empresa, que agora incluem 'users' (do tenant)\r\n+        // e 'masterUsers' (do banco mestre).\r\n+        const { users, masterUsers } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; \r\n+\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+        // Usamos a lista de 'masterUsers' para construir o modal, pois ela tem os IDs corretos.\r\n+        if (masterUsers && masterUsers.length > 0) {\r\n+            masterUsers.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+\r\n+                const roleOptions = assignableRoles.map(role =>\r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                const roleHtml = isOwner\r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    // CORREÇÃO: O data-user-id agora usa o ID do masterUser\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+\r\n+        // Adiciona evento de clique para remover (precisará de ajuste futuro se necessário)\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            // ...\r\n+        });\r\n+\r\n+        // Adiciona evento para alterar o cargo (agora com o ID correto)\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n+\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    // Lógica para reverter a seleção visual\r\n+                    const originalUser = (await api.getCompanyDetails(companyId)).masterUsers.find(u => u._id === userId);\r\n+                    if(originalUser) e.target.value = originalUser.role;\r\n+                    return;\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    // A chamada à API agora envia o ID correto\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n+ * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n+ * @param {Event} event - O evento 'change' do input do ficheiro.\r\n+ */\r\n+async function handleNfeXmlUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) {\r\n+        return;\r\n+    }\r\n+\r\n+    const reader = new FileReader();\r\n+\r\n+    reader.onload = async (e) => {\r\n+        try {\r\n+            const xmlString = e.target.result;\r\n+            const parser = new DOMParser();\r\n+            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n+\r\n+            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n+                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n+            }\r\n+\r\n+            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n+            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n+\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n+\r\n+            let parcelsData = [];\r\n+\r\n+            if (duplicatas.length > 0) {\r\n+                parcelsData = duplicatas.map((dup, i) => ({\r\n+                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n+                    dueDate: getTagValue(\"dVenc\", dup)\r\n+                }));\r\n+            } else {\r\n+                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n+                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n+\r\n+                if (cobrancaMatch && cobrancaMatch[1]) {\r\n+                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n+                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n+                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n+                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n+\r\n+                    parcelsData = dias.map((dia, i) => {\r\n+                        const vencimento = new Date(dataEmissao);\r\n+                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n+                        return {\r\n+                            number: i + 1,\r\n+                            amount: parcelAmount,\r\n+                            dueDate: vencimento.toISOString().split('T')[0]\r\n+                        };\r\n+                    });\r\n+                }\r\n+            }\r\n+\r\n+            if (parcelsData.length > 0) {\r\n+                // ALTERAÇÃO AQUI: Removemos o prefixo \"NFe - \" do nome.\r\n+                currentBill = { name: nomeFornecedor, nfeNumber: nfeNumber, parcels: parcelsData };\r\n+\r\n+                installmentsList.innerHTML = '';\r\n+                currentBill.parcels.forEach((parcel, index) => {\r\n+                    installmentsList.insertAdjacentHTML('beforeend', `\r\n+                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                        </div>\r\n+                    `);\r\n+                });\r\n+\r\n+                addEventListenersToInstallmentInputs();\r\n+                updatePreviewTotal();\r\n+                previewBillNameInput.value = currentBill.name;\r\n+                previewNfeNumber.textContent = nfeNumber;\r\n+                await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n+                installmentsPreviewModal.classList.remove('hidden');\r\n+\r\n+            } else {\r\n+                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n+                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n+\r\n+                // ALTERAÇÃO AQUI TAMBÉM: Removemos o prefixo no caso de fallback.\r\n+                document.getElementById('billName').value = nomeFornecedor;\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n+                if (vencimento) {\r\n+                    document.getElementById('dueDate').value = vencimento;\r\n+                }\r\n+\r\n+                addBillModal.classList.remove('hidden');\r\n+            }\r\n+\r\n+            showToast('Dados do XML carregados com sucesso!', 'success');\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            console.error(\"Erro ao processar XML:\", error);\r\n+        } finally {\r\n+            event.target.value = '';\r\n+        }\r\n+    };\r\n+\r\n+    reader.onerror = () => {\r\n+        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+    };\r\n+\r\n+    reader.readAsText(file);\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n+ */\r\n+function addEventListenersToInstallmentInputs() {\r\n+    // Listener para o campo de VALOR\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            }\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de DATA\r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    /**\r\n+     * Mostra a tela de login de administrador.\r\n+     */\r\n+    function showAdminLogin() {\r\n+        hideAllScreens(); // Função de utils.js\r\n+        if (adminLoginForm) adminLoginForm.reset();\r\n+        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    // Listener para o campo de CÓDIGO DE BARRAS\r\n+    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        // Evento para guardar o valor quando é digitado\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].barcode = e.target.value;\r\n+            }\r\n+        });\r\n+\r\n+        input.addEventListener('keydown', (e) => {\r\n+            if (e.key === 'Enter') {\r\n+                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n+\r\n+                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n+                const nextIndex = currentIndex + 1;\r\n+                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n+\r\n+                if (nextInput) {\r\n+                    // Se houver um próximo campo de código de barras, foca nele.\r\n+                    nextInput.focus();\r\n+                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n+                } else {\r\n+                    // Se for o último campo, foca no botão de salvar.\r\n+                    document.getElementById('addToOrganizer').focus();\r\n+                }\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n+ */\r\n+function handleShowFullScreenBarcode() {\r\n+    const barcodeValue = modalBillBarcodeInput.value;\r\n+    if (!barcodeValue) {\r\n+        return showToast('Não há código de barras para mostrar.', 'info');\r\n+    }\r\n+\r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    if (!barcodeImageContainer) return;\r\n+\r\n+    // Limpa qualquer código de barras anterior\r\n+    barcodeImageContainer.innerHTML = '';\r\n+\r\n+    try {\r\n+        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n+        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n+\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n+        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n+            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n+            lineColor: \"#000000\",\r\n+            width: 2,\r\n+            height: 100,\r\n+            displayValue: true, // Mostra os números abaixo das barras\r\n+            fontSize: 18\r\n+        });\r\n+\r\n+        // Mostra o modal de ecrã inteiro\r\n+        barcodeFullScreenModal.classList.remove('hidden');\r\n+\r\n+    } catch (e) {\r\n+        console.error(\"Erro ao gerar código de barras:\", e);\r\n+        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n+    }\r\n+}\r\n+\r\n+async function handleAttachmentUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file || !selectedParcel) return;\r\n+\r\n+    // Cria um objeto FormData para enviar o ficheiro\r\n+    const formData = new FormData();\r\n+    formData.append('comprovante', file);\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Atualiza a UI para mostrar o link do novo anexo\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+\r\n+        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para remover um anexo de comprovativo.\r\n+ * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n+ */\r\n+async function handleRemoveAttachment() {\r\n+    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n+    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader(); // Mostra o ícone de carregamento\r\n+    try {\r\n+        // Chama a nossa função da API para apagar o anexo\r\n+        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n+\r\n+        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+\r\n+        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+\r\n+        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n+        await updateBillsOrganizer();\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n+ */\r\n+function applyFiltersAndSearch() {\r\n+    const searchTerm = searchInput.value.toLowerCase();\r\n+    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n+\r\n+    let filteredBoletos = userBoletos.filter(bill => {\r\n+        // Filtro de pesquisa\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n+            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+        if (!matchesSearch) return false;\r\n+\r\n+        // Filtro de categoria\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+        if (!matchesCategory) return false;\r\n+\r\n+        // Filtro de status\r\n+        if (activeStatusFilter === 'all') return true;\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        return bill.parcels.some(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeStatusFilter === 'paid') return parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            return false;\r\n+        });\r\n+    });\r\n+\r\n+    renderCalendar(filteredBoletos);\r\n+    updateMonthlySummary(filteredBoletos);\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n+ * agora com lógica para parcelas recorrentes.\r\n+ */\r\n+function initializeDragAndDrop() {\r\n+    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n+\r\n+    dayCells.forEach(cell => {\r\n+        new Sortable(cell, {\r\n+            group: 'calendar-bills',\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+\r\n+            onEnd: async function (evt) {\r\n+                const item = evt.item;\r\n+                const toCell = evt.to;\r\n+                const boletoId = item.dataset.boletoId;\r\n+                const parcelId = item.dataset.parcelId;\r\n+                const newDate = toCell.dataset.date;\r\n+\r\n+                if (!boletoId || !parcelId || !newDate) return;\r\n+\r\n+                const parentBoleto = userBoletos.find(b => b._id === boletoId);\r\n+                const originalParcel = parentBoleto?.parcels.find(p => p._id === parcelId);\r\n+\r\n+                if (!parentBoleto || !originalParcel) return;\r\n+\r\n+                if (parentBoleto.parcels.length > 1) {\r\n+                    // --- CORREÇÃO AQUI ---\r\n+                    // 1. Definimos a variável 'selectedParcel' que estava em falta.\r\n+                    selectedParcel = { ...originalParcel, parentId: parentBoleto._id };\r\n+\r\n+                    // 2. O resto da lógica continua a mesma\r\n+                    const updatedParcelData = {\r\n+                        ...originalParcel,\r\n+                        dueDate: newDate,\r\n+                    };\r\n+\r\n+                    pendingUpdateData = { \r\n+                        updatedParcelData, \r\n+                        updatedBillData: { category: parentBoleto.category?._id || null }\r\n+                    };\r\n+\r\n+                    const date = new Date(newDate + 'T00:00:00');\r\n+                    singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n+\r\n+                    recurrentEditModal.classList.remove('hidden');\r\n+                    renderCalendar();\r\n+\r\n+                } else {\r\n+                    // Lógica para parcela única (continua a mesma)\r\n+                    showLoader();\r\n+                    try {\r\n+                        await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n+                        showToast('Data da parcela atualizada com sucesso!', 'success');\r\n+                        await updateBillsOrganizer();\r\n+                    } catch (error) {\r\n+                        showToast(error.message, 'error');\r\n+                        await updateBillsOrganizer();\r\n+                    } finally {\r\n+                        hideLoader();\r\n+                    }\r\n+                }\r\n+            },\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Calcula o startDate e endDate com base numa predefinição do seletor.\r\n+ * @returns {{startDate?: string, endDate?: string}} - As datas ou um objeto vazio.\r\n+ */\r\n+function getDateRangeFromPreset() {\r\n+    const preset = dateRangePresetSelect.value;\r\n+    const now = new Date();\r\n+    let startDate, endDate;\r\n+\r\n+    switch (preset) {\r\n+        case 'thisMonth':\r\n+            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n+            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n+            break;\r\n+        case 'lastMonth':\r\n+            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n+            endDate = new Date(now.getFullYear(), now.getMonth(), 0);\r\n+            break;\r\n+        case 'thisQuarter':\r\n+            const quarter = Math.floor(now.getMonth() / 3);\r\n+            startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n+            endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n+            break;\r\n+        case 'thisYear':\r\n+            startDate = new Date(now.getFullYear(), 0, 1);\r\n+            endDate = new Date(now.getFullYear(), 11, 31);\r\n+            break;\r\n+        case 'custom':\r\n+            if (startDateInput.value && endDateInput.value) {\r\n+                return {\r\n+                    startDate: startDateInput.value,\r\n+                    endDate: endDateInput.value\r\n+                };\r\n+            }\r\n+            return {}; // Retorna vazio se o intervalo personalizado não estiver completo\r\n+        default:\r\n+            return {}; // Padrão sem filtro\r\n+    }\r\n+\r\n+    // Formata as datas para o formato YYYY-MM-DD\r\n+    return {\r\n+        startDate: startDate.toISOString().split('T')[0],\r\n+        endDate: endDate.toISOString().split('T')[0]\r\n+    };\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a lista de próximos vencimentos no dashboard.\r\n+ * @param {Array} payments - A lista de pagamentos vinda da API.\r\n+ */\r\n+function renderUpcomingPayments(payments) {\r\n+    if (!upcomingPaymentsList || !noUpcomingPaymentsMessage) return;\r\n+\r\n+    upcomingPaymentsList.innerHTML = ''; // Limpa a lista\r\n+\r\n+    if (payments.length === 0) {\r\n+        upcomingPaymentsList.appendChild(noUpcomingPaymentsMessage);\r\n+        noUpcomingPaymentsMessage.classList.remove('hidden');\r\n+    } else {\r\n+        noUpcomingPaymentsMessage.classList.add('hidden');\r\n+        const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+        payments.forEach(payment => {\r\n+            const dueDate = new Date(payment.dueDate + 'T00:00:00');\r\n+            const formattedDate = dueDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\r\n+\r\n+            const paymentHtml = `\r\n+                <div class=\"flex items-center justify-between bg-gray-700/50 p-3 rounded-md\">\r\n+                    <div>\r\n+                        <p class=\"font-medium text-white\">${payment.billName} (${payment.parcelNumber}ª)</p>\r\n+                        <p class=\"text-sm text-gray-400\">Vence em: ${formattedDate}</p>\r\n+                    </div>\r\n+                    <p class=\"font-semibold text-lg text-yellow-400\">${formatCurrency(payment.amount)}</p>\r\n+                </div>\r\n+            `;\r\n+            upcomingPaymentsList.insertAdjacentHTML('beforeend', paymentHtml);\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de barras horizontais com as 5 maiores despesas por categoria.\r\n+ * @param {Array} data - Os dados de despesas vindos da API.\r\n+ */\r\n+function renderTopExpensesChart(data) {\r\n+    const canvas = document.getElementById('topExpensesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    // Destrói o gráfico anterior, se existir, para evitar sobreposições\r\n+    if (topExpensesChart) {\r\n+        topExpensesChart.destroy();\r\n+    }\r\n+    \r\n+    // 1. Ordena os dados do maior para o menor\r\n+    const sortedData = [...data].sort((a, b) => b.totalAmount - a.totalAmount);\r\n+    \r\n+    // 2. Pega apenas nos 5 primeiros resultados\r\n+    const top5Data = sortedData.slice(0, 5);\r\n+\r\n+    // 3. Prepara os dados para o Chart.js\r\n+    const labels = top5Data.map(item => item.categoryName);\r\n+    const values = top5Data.map(item => item.totalAmount);\r\n+\r\n+    topExpensesChart = new Chart(ctx, {\r\n+        type: 'bar', // Tipo de gráfico\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total Gasto',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(239, 68, 68, 0.6)', // Vermelho\r\n+                borderColor: 'rgba(239, 68, 68, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            indexAxis: 'y', // <-- Isto é o que torna o gráfico horizontal!\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                x: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                y: { ticks: { color: '#d1d5db' }, grid: { display: false } }\r\n+            },\r\n+            plugins: {\r\n+                legend: { display: false },\r\n+                tooltip: {\r\n+                    callbacks: {\r\n+                        label: function(context) {\r\n+                            return ` Total: ${context.raw.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+                        }\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de alteração de senha.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleChangePassword(e) {\r\n+    e.preventDefault(); // Impede o recarregamento da página\r\n+\r\n+    const currentPassword = document.getElementById('currentPassword').value;\r\n+    const newPassword = document.getElementById('newPassword').value;\r\n+    const confirmPassword = document.getElementById('confirmPassword').value;\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.changePassword({ currentPassword, newPassword, confirmPassword });\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Limpa os campos e fecha o modal após o sucesso\r\n+        changePasswordForm.reset();\r\n+        profileModal.classList.add('hidden');\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', async () => {\r\n+// --- Lógica de inicialização que estava em initializeApp() ---\r\n+const today = new Date();\r\n+currentMonth = today.getMonth();\r\n+currentYear = today.getFullYear();\r\n+\r\n+const token = localStorage.getItem('authToken');\r\n+if (!token) {\r\n+    // Se não houver token, redireciona para a página de login\r\n+    window.location.href = 'Index.html';\r\n+    return;\r\n+}\r\n+\r\n+try {\r\n+    const data = await api.checkSession();\r\n+    if (data.user.role === 'SuperAdmin') {\r\n+        isAdminLoggedIn = true;\r\n+        await showAdminDashboard();\r\n+    } else {\r\n+        currentLoggedInUser = data.user;\r\n+        currentLoggedInCompany = data.company;\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            await showMainApp();\r\n+        } else {\r\n+            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                // Se for o dono da empresa, mostra o modal para renovar\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    }\r\n+} catch (error) {\r\n+    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n+    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n+    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    setTimeout(() => {\r\n+        window.location.href = 'Index.html';\r\n+    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n+} finally {\r\n+    // Esconde a tela de carregamento inicial\r\n+    document.getElementById('loadingScreen').classList.add('hidden');\r\n+}\r\n+\r\n+\r\n+// Submissão de formulários\r\n+if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+if (logoutBtn) {\r\n+    logoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n+    });\r\n+}\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+\r\n+\r\n+// Ações na App Principal\r\n+addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+// Ações do Modal de Edição de Boleto\r\n+closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+// Navegação do Calendário\r\n+prevMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+    if (currentMonth === 11) currentYear--;\r\n+    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+\r\n+nextMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+    if (currentMonth === 0) currentYear++;\r\n+    // A mesma mudança aqui\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+}\r\n+\r\n+if (openAddBillModalBtn) {\r\n+    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+}\r\n+\r\n+const handleRedirectToHome = () => {\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+const handleFullLogoutAndRedirect = () => {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+if (subscriptionLogoutBtn) {\r\n+    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+}\r\n+\r\n+if (blockedAccessLogoutBtn) {\r\n+    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n+    });\r\n+}\r\n+\r\n+// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+if (settingsBtn) {\r\n+    settingsBtn.addEventListener('click', (e) => {\r\n+        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+        settingsDropdown.classList.toggle('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Links dentro do menu dropdown\r\n+if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCompanyInfoModal();\r\n+});\r\n+\r\n+if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openPermissionsModal();\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n+\r\n+// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openManageUsersModal();\r\n+});\r\n+\r\n+// Botões do modal de gerir utilizadores\r\n+if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+    manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+    openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+});\r\n+\r\n+/**\r\n+ * Lida com o clique no botão de criar/renovar assinatura.\r\n+ */\r\n+async function handleCreateSubscription() {\r\n+    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+    subscriptionActionBtn.disabled = true;\r\n+    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+    try {\r\n+        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+        const data = await api.createSubscriptionLink();\r\n+\r\n+        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+        if (data.init_point) {\r\n+            window.location.href = data.init_point;\r\n+        } else {\r\n+            throw new Error('Link de pagamento não recebido.');\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+        subscriptionActionBtn.disabled = false;\r\n+        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+    }\r\n+}\r\n+\r\n+// Liga a função ao clique do botão.\r\n+if (subscriptionActionBtn) {\r\n+    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+}\r\n+\r\n+if (closePreviewModalBtn) {\r\n+    closePreviewModalBtn.addEventListener('click', () => {\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+if (nfeXmlInput) {\r\n+    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+}\r\n+\r\n+if (previewBillNameInput) {\r\n+    previewBillNameInput.addEventListener('input', (e) => {\r\n+        if (currentBill) {\r\n+            currentBill.name = e.target.value;\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Liga a função ao clique do botão\r\n+if (showFullScreenBarcodeBtn) {\r\n+    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+}\r\n+\r\n+// Listener para o campo de pesquisa\r\n+if (searchInput) {\r\n+    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Listeners para os botões de filtro\r\n+if (filterButtons) {\r\n+    filterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões\r\n+            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona a classe 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Aplica o filtro\r\n+            applyFiltersAndSearch();\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCategoriesModal();\r\n+});\r\n+\r\n+if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+if (addCategoryForm) {\r\n+    addCategoryForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const name = newCategoryNameInput.value.trim();\r\n+        if (!name) return;\r\n+        try {\r\n+            await api.createCategory(name);\r\n+            newCategoryNameInput.value = '';\r\n+            await openCategoriesModal(); // Recarrega a lista do modal\r\n+            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+if (categoryListDiv) {\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+if (categoryFilterSelect) {\r\n+    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Configuração dos botões do dashboard\r\n+if (viewCalendarBtn) {\r\n+    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+}\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+if (dateRangePresetSelect) {\r\n+    dateRangePresetSelect.addEventListener('change', () => {\r\n+        const isCustom = dateRangePresetSelect.value === 'custom';\r\n+        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n+\r\n+        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n+        // o dashboard é atualizado imediatamente.\r\n+        if (!isCustom) {\r\n+            renderDashboard();\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Para o intervalo personalizado, atualizamos o dashboard\r\n+// assim que ambas as datas estiverem preenchidas.\r\n+if (startDateInput) {\r\n+    startDateInput.addEventListener('change', () => {\r\n+        if (endDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+if (endDateInput) {\r\n+    endDateInput.addEventListener('change', () => {\r\n+        if (startDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+// Listeners para os botões de exportação\r\n+const handleExport = (format) => {\r\n+    // 1. Pega no período de tempo atual do filtro do dashboard\r\n+    const dateRange = getDateRangeFromPreset();\r\n+\r\n+    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n+    const queryString = new URLSearchParams(dateRange).toString();\r\n+\r\n+    // 3. Monta o URL completo para o download\r\n+    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n+    \r\n+    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n+    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n+    fetch(downloadUrl, {\r\n+        headers: {\r\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n+        }\r\n+    })\r\n+    .then(res => res.blob())\r\n+    .then(blob => {\r\n+        const url = window.URL.createObjectURL(blob);\r\n+        const a = document.createElement('a');\r\n+        a.style.display = 'none';\r\n+        a.href = url;\r\n+        a.download = `relatorio-despesas.${format}`;\r\n+        document.body.appendChild(a);\r\n+        a.click();\r\n+        window.URL.revokeObjectURL(url);\r\n+        a.remove();\r\n+    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n+};\r\n+\r\n+if (exportCsvBtn) {\r\n+    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+}\r\n+if (exportPdfBtn) {\r\n+    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n+}\r\n+\r\n+if (manualAddBtn) {\r\n+    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+}\r\n+if (xmlAddBtn) {\r\n+    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+}\r\n+\r\n+if (csvImportBtn) {\r\n+    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n+}\r\n+if (csvFileInput) {\r\n+    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n+}\r\n+if (importCsvBtn) {\r\n+    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n+}\r\n+if (markSelectedAsPaidBtn) {\r\n+    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n+}\r\n+if (selectAllVisibleBtn) {\r\n+    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n+}\r\n+\r\n+if (deselectAllVisibleBtn) {\r\n+    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n+}\r\n+if (dashboardFilterButtons) {\r\n+    dashboardFilterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões do dashboard\r\n+            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Atualiza a variável de estado com o novo filtro\r\n+            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n+            // Renderiza o dashboard novamente com os dados filtrados\r\n+            renderDashboard();\r\n+        });\r\n+    });\r\n+}\r\n+// Abre o modal de alteração de categoria\r\n+if (changeCategoryBtn) {\r\n+    changeCategoryBtn.addEventListener('click', async () => {\r\n+        showLoader();\r\n+        // Popula o dropdown do modal com as categorias existentes\r\n+        await populateCategorySelect(batchCategorySelect);\r\n+        hideLoader();\r\n+        categoryBatchModal.classList.remove('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de cancelar no modal\r\n+if (cancelCategoryBatchBtn) {\r\n+    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n+        categoryBatchModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de confirmar a alteração\r\n+if (confirmCategoryBatchBtn) {\r\n+    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n+        const categoryId = batchCategorySelect.value;\r\n+        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n+        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n+\r\n+        if (boletoIds.length === 0) {\r\n+            return showToast('Nenhum item selecionado.', 'info');\r\n+        }\r\n+\r\n+        showLoader();\r\n+        try {\r\n+            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n+            showToast(response.message, 'success');\r\n+            selectedItems.clear();\r\n+            updateMassPaymentButton();\r\n+            await updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+            categoryBatchModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+}\r\n+if (openProfileModalBtn) {\r\n+    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n+}\r\n+if (closeProfileModalBtn) {\r\n+    closeProfileModalBtn.addEventListener('click', () => {\r\n+        profileModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+if (changePasswordForm) {\r\n+    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n+}\r\n+if (resendVerificationBtn) {\r\n+    resendVerificationBtn.addEventListener('click', async () => {\r\n+        resendVerificationBtn.disabled = true;\r\n+        resendVerificationBtn.textContent = 'A reenviar...';\r\n+\r\n+        try {\r\n+            const data = await api.resendVerificationEmail();\r\n+            showToast(data.message, 'success');\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            resendVerificationBtn.disabled = false;\r\n+            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n+        }\r\n+    });\r\n+}\r\n+if (recurrentAddBtn) {\r\n+    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n+}\r\n+if (recurrentEditModal) {\r\n+    // Botões de escolha (Somente esta, futuras, todas)\r\n+    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const scope = e.currentTarget.dataset.scope;\r\n+            if (!pendingUpdateData || !selectedParcel) return;\r\n+\r\n+            recurrentEditModal.classList.add('hidden');\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a nova rota da API com o escopo escolhido\r\n+                await api.bulkUpdateParcels(\r\n+                    selectedParcel.parentId, \r\n+                    selectedParcel._id, \r\n+                    pendingUpdateData.updatedParcelData, \r\n+                    scope\r\n+                );\r\n+\r\n+                // Atualiza a categoria do boleto, se foi alterada\r\n+                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n+\r\n+                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n+                billModal.classList.add('hidden');\r\n+                await updateBillsOrganizer();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+                pendingUpdateData = null; // Limpa os dados pendentes\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Botão de cancelar\r\n+    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n+        recurrentEditModal.classList.add('hidden');\r\n+        pendingUpdateData = null; // Limpa os dados pendentes\r\n+    });\r\n+}\r\n+\r\n+// CHAME A NOVA FUNÇÃO AQUI\r\n+initializeDashboardDragAndDrop(); \r\n+\r\n+\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753807520024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3130 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import { API_BASE_URL } from './config.js';\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let expensesPieChart = null;\r\n+let expensesBarChart = null;\r\n+let topExpensesChart = null;\r\n+let parsedCsvData = [];\r\n+let selectedParcels = new Set();\r\n+let dashboardStatusFilter = 'all';\r\n+let selectedItems = new Map();\r\n+let pendingUpdateData = null;\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const summaryOverdue = document.getElementById('summaryOverdue');\r\n+const summaryTotal = document.getElementById('summaryTotal');\r\n+const summaryPaid = document.getElementById('summaryPaid');\r\n+const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n+const billForm = document.getElementById('billForm');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsPreview = document.getElementById('installmentsPreview');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+const daysToAddInput = document.getElementById('daysToAddInput');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addUserModal = document.getElementById('addUserModal');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyModal = document.getElementById('addCompanyModal');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const companyUsersList = document.getElementById('companyUsersList');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const billCategorySelect = document.getElementById('billCategorySelect');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+\r\n+const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n+const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n+const calendarView = document.getElementById('calendarView');\r\n+const dashboardView = document.getElementById('dashboardView');\r\n+const dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\n+const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n+const startDateInput = document.getElementById('start-date-input');\r\n+const endDateInput = document.getElementById('end-date-input');\r\n+const kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\n+const upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\n+const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n+const exportCsvBtn = document.getElementById('export-csv-btn');\r\n+const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n+const dashboardFilterButtons = document.querySelectorAll('.dashboard-filter-btn');\r\n+\r\n+const manualAddBtn = document.getElementById('manual-add-btn');\r\n+const xmlAddBtn = document.getElementById('xml-add-btn');\r\n+const manualAddForm = document.getElementById('manual-add-form');\r\n+const xmlAddForm = document.getElementById('xml-add-form');\r\n+\r\n+const csvImportBtn = document.getElementById('csv-import-btn');\r\n+const csvImportForm = document.getElementById('csv-import-form');\r\n+const csvFileInput = document.getElementById('csv-file-input');\r\n+const csvPreviewArea = document.getElementById('csv-preview-area');\r\n+const csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\n+const csvImportSummary = document.getElementById('csv-import-summary');\r\n+const importCsvBtn = document.getElementById('import-csv-btn');\r\n+\r\n+const markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\n+const selectedCountSpan = document.getElementById('selectedCount');\r\n+const massActionsContainer = document.getElementById('massActionsContainer');\r\n+const selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\n+const deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n+\r\n+const changeCategoryBtn = document.getElementById('changeCategoryBtn');\r\n+const categoryBatchModal = document.getElementById('categoryBatchModal');\r\n+const batchCategorySelect = document.getElementById('batchCategorySelect');\r\n+const cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\n+const confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n+\r\n+const openProfileModalBtn = document.getElementById('openProfileModalBtn');\r\n+const profileModal = document.getElementById('profileModal');\r\n+const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\n+const profileUsername = document.getElementById('profileUsername');\r\n+const profileRole = document.getElementById('profileRole');\r\n+const profileCompany = document.getElementById('profileCompany');\r\n+const changePasswordForm = document.getElementById('changePasswordForm');\r\n+const verificationNotice = document.getElementById('verificationNotice');\r\n+const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n+\r\n+const recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\n+const recurrentAddForm = document.getElementById('recurrent-add-form');\r\n+const recurrentEditModal = document.getElementById('recurrentEditModal');\r\n+const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n+const singleParcelDate = document.getElementById('single-parcel-date');\r\n+\r\n+const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n+const announcementMessage = document.getElementById('announcementMessage');\r\n+const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n+ */\r\n+function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+\r\n+    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n+\r\n+    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n+    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n+\r\n+    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n+\r\n+    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    // Atualiza os elementos HTML com os valores corretos\r\n+    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n+    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n+    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com uma lista específica de boletos.\r\n+ * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n+ * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n+ */\r\n+function renderCalendar(boletosToRender = userBoletos) {\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+    const today = new Date(); // Variável para verificar boletos vencidos\r\n+    today.setHours(0, 0, 0, 0); // Zera a hora para uma comparação precisa do dia\r\n+\r\n+    // ETAPA 1: Otimização - Agrupa todas as parcelas por data de vencimento.\r\n+    const parcelsByDate = new Map();\r\n+    boletosToRender.forEach(bill => {\r\n+        bill.parcels.forEach(parcel => {\r\n+            const date = parcel.dueDate;\r\n+            if (!parcelsByDate.has(date)) {\r\n+                parcelsByDate.set(date, []);\r\n+            }\r\n+            // Adiciona uma referência ao boleto pai para cada parcela, para facilitar.\r\n+            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n+        });\r\n+    });\r\n+\r\n+    // ETAPA 2: Renderização do Calendário\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    // Cria as células vazias do início do mês\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    // Cria as células para cada dia do mês\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+\r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        // Adiciona evento de clique na célula para criar novos boletos\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card-draggable')) return;\r\n+            openAddBillModal(e.currentTarget.dataset.date);\r\n+        });\r\n+\r\n+        // Verifica se existem parcelas para este dia no mapa\r\n+        if (parcelsByDate.has(dateStr)) {\r\n+            // Se existirem, itera apenas sobre as parcelas daquele dia\r\n+            parcelsByDate.get(dateStr).forEach(parcel => {\r\n+                const bill = parcel.parentBill; // Pega a referência do boleto pai\r\n+                const parcelElement = document.createElement('div');\r\n+                \r\n+                // Lógica de Status, Cores e Ícones\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                const isOverdue = !parcel.paid && dueDate < today;\r\n+                let statusClass = 'bg-indigo-700 text-indigo-100'; // Padrão: Pendente\r\n+                let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n+            \r\n+                if (parcel.paid) {\r\n+                    statusClass = 'bg-green-700 text-green-100'; // Pago\r\n+                    statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n+                } else if (isOverdue) {\r\n+                    statusClass = 'bg-red-700 text-red-100'; // Vencido\r\n+                    statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n+                }\r\n+            \r\n+                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n+                parcelElement.dataset.boletoId = bill._id;\r\n+                parcelElement.dataset.parcelId = parcel._id;\r\n+    \r\n+                // HTML do card com layout aprimorado\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"flex items-start space-x-2\">\r\n+                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n+                        <div class=\"flex-1 min-w-0\">\r\n+                            <div class=\"flex justify-between items-center\">\r\n+                                <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n+                                    ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n+                                </span>\r\n+                                <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n+                                    ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n+                                </span>\r\n+                            </div>\r\n+                            \r\n+                            ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                            ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n+                        </div>\r\n+                    </div>\r\n+                `;\r\n+    \r\n+                // Adiciona evento de clique no card para abrir o modal\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                \r\n+                // Lógica para o checkbox\r\n+                const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n+                checkbox.addEventListener('change', (e) => {\r\n+                    const parcelId = e.target.dataset.parcelId;\r\n+                    const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n+                    if (e.target.checked) {\r\n+                        selectedItems.set(parcelId, boletoId);\r\n+                    } else {\r\n+                        selectedItems.delete(parcelId);\r\n+                    }\r\n+                    updateMassPaymentButton();\r\n+                });\r\n+                checkbox.addEventListener('click', (e) => {\r\n+                    e.stopPropagation(); // Impede o clique de abrir o modal\r\n+                });\r\n+                \r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        }\r\n+        \r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+\r\n+    initializeDragAndDrop();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+async function openBillModal(bill, parcel) {\r\n+    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+\r\n+    // Preenche todos os campos do modal com os dados da parcela clicada\r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+    // Mostra o botão de gerar código de barras apenas se houver um código\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+\r\n+    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n+    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n+    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n+    if (bill.nfeNumber) {\r\n+        nfeNumberEl.textContent = bill.nfeNumber;\r\n+        nfeContainer.classList.remove('hidden');\r\n+    } else {\r\n+        nfeContainer.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Lógica dinâmica para a secção de anexos\r\n+    const attachmentContainer = document.getElementById('attachment-container');\r\n+    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n+\r\n+    if (parcel.attachmentUrl) {\r\n+        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n+        attachmentContainer.innerHTML = `\r\n+            <div class=\"flex items-center justify-between\">\r\n+                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n+                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n+                </a>\r\n+                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n+            </div>\r\n+        `;\r\n+        // Adiciona o evento de clique ao novo botão de remover\r\n+        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n+    } else {\r\n+        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        // Adiciona o evento de 'change' ao novo input de upload\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+    }\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        categories.forEach(cat => {\r\n+            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n+        });\r\n+        if (bill.category) {\r\n+            modalBillCategorySelect.value = bill.category._id;\r\n+        } else {\r\n+            modalBillCategorySelect.value = \"\";\r\n+        }\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    if (billForm) {\r\n+        billForm.reset();\r\n+    }\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        totalBillsSpan.textContent = totalParcels;\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        showInitialLogin();\r\n+    }\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    mainAppContent.classList.remove('hidden');\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+    await fetchAndDisplayAnnouncement();\r\n+    await populateCategoryFilter();\r\n+    await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n+ * @param {string} tagName - O nome da tag a ser procurada.\r\n+ * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n+ * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n+ */\r\n+function getTagValue(tagName, parentElement) {\r\n+    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n+    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n+    return element?.textContent || '';\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona os eventos de clique e mudança aos elementos dinâmicos do modal de detalhes da empresa.\r\n+ * Esta é a função que estava em falta.\r\n+ */\r\n+function addEventListenersToCompanyDetailsModal() {\r\n+    // Evento para os seletores de cargo (role)\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                // Recarrega os dados do modal para garantir consistência\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Evento para os botões de remover utilizador\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.currentTarget.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                // Recarrega os dados do modal\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n+ */\r\n+function openCompanyDetailsModal(company, users, masterUsers) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (masterUsers && masterUsers.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        masterUsers.forEach(user => {\r\n+            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n+\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona os eventos DEPOIS de criar os botões\r\n+    addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo utilizador.\r\n+ */\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de adicionar utilizador.\r\n+ */\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n+    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n+\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        // Passa os novos dados para a função da API\r\n+        const data = await api.registerUser(username, password, email, role, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO do modal ---\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        // A chamada à API já retorna os dados completos da empresa, incluindo 'isVerified'\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        // LÓGICA PARA MOSTRAR/ESCONDER O AVISO\r\n+        if (company.isVerified) {\r\n+            verificationNotice.classList.add('hidden');\r\n+        } else {\r\n+            verificationNotice.classList.remove('hidden');\r\n+        }\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+\r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function openCategoriesModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        renderCategoryList(categories);\r\n+        categoriesModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function renderCategoryList(categories) {\r\n+    categoryListDiv.innerHTML = '';\r\n+    if (categories.length === 0) {\r\n+        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n+        return;\r\n+    }\r\n+    categories.forEach(category => {\r\n+        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n+                <span class=\"text-white\">${category.name}</span>\r\n+                <div>\r\n+                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n+                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                </div>\r\n+            </div>\r\n+        `);\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo boleto,\r\n+ * e opcionalmente pré-preenchendo a data.\r\n+ * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n+ */\r\n+async function openAddBillModal(preselectedDate = null) {\r\n+    clearBillForm();\r\n+    switchAddBillMode('manual');\r\n+    showLoader();\r\n+    try {\r\n+        // Se uma data foi passada como parâmetro (ou seja, o utilizador clicou no calendário)\r\n+        if (preselectedDate) {\r\n+            // Preenche o campo da aba \"Adicionar Manual\" (comportamento que já existia)\r\n+            document.getElementById('dueDate').value = preselectedDate;\r\n+\r\n+            // NOVA LINHA: Preenche também o campo da aba \"Pagamento Recorrente\"\r\n+            document.getElementById('recurrentStartDate').value = preselectedDate;\r\n+        }\r\n+\r\n+        addBillModal.classList.remove('hidden');\r\n+    } catch (error)\r\n+ {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function populateCategoryFilter() {\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n+        // Se der erro, garante que a opção padrão exista\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Alterna a visualização entre o Calendário e o Dashboard.\r\n+ */\r\n+function switchView(viewToShow) {\r\n+    // Esconde ambas as vistas\r\n+    calendarView.classList.add('hidden');\r\n+    dashboardView.classList.add('hidden');\r\n+\r\n+    // Reseta o estilo dos botões\r\n+    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n+    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n+    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+\r\n+    // Mostra a vista correta e ativa o botão correspondente\r\n+    if (viewToShow === 'calendar') {\r\n+        calendarView.classList.remove('hidden');\r\n+        viewCalendarBtn.classList.add('bg-indigo-600');\r\n+        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    } else if (viewToShow === 'dashboard') {\r\n+        dashboardView.classList.remove('hidden');\r\n+        viewDashboardBtn.classList.add('bg-indigo-600');\r\n+        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderDashboard();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza os cartões de KPI no dashboard.\r\n+ * @param {object} kpiData - Os dados dos KPIs vindos da API.\r\n+ */\r\n+function updateKpiCards(kpiData) {\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n+\r\n+    // Popula os novos campos\r\n+    if (kpiContasVencidas) kpiContasVencidas.textContent = formatCurrency(kpiData.totalVencido);\r\n+    \r\n+    // Popula os campos existentes\r\n+    document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n+    document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n+    document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n+}\r\n+\r\n+/**\r\n+ * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n+ */\r\n+async function renderDashboard() {\r\n+    showLoader();\r\n+    try {\r\n+        const dateRange = getDateRangeFromPreset();\r\n+\r\n+        // ATUALIZADO: Passa o 'dashboardStatusFilter' para as chamadas da API\r\n+        const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n+            api.getExpensesByCategory(dateRange, dashboardStatusFilter),\r\n+            api.getMonthlySummary(dateRange, dashboardStatusFilter),\r\n+            api.getKpiSummary(dateRange),\r\n+            api.getUpcomingPayments()\r\n+        ]);\r\n+\r\n+        updateKpiCards(kpiData);\r\n+        renderPieChart(pieData);\r\n+        renderBarChart(barData);\r\n+        renderUpcomingPayments(upcomingData);\r\n+        renderTopExpensesChart(pieData);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de pizza de despesas por categoria.\r\n+ */\r\n+function renderPieChart(data) {\r\n+    const canvas = document.getElementById('expensesByCategoryChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    if (expensesPieChart) {\r\n+        expensesPieChart.destroy();\r\n+    }\r\n+\r\n+    expensesPieChart = new Chart(ctx, {\r\n+        type: 'pie',\r\n+        data: {\r\n+            labels: data.map(item => item.categoryName),\r\n+            datasets: [{\r\n+                data: data.map(item => item.totalAmount),\r\n+                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n+                borderColor: '#1f2937',\r\n+                borderWidth: 2\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n+ */\r\n+function renderBarChart(data) {\r\n+    const canvas = document.getElementById('monthlyExpensesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n+    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n+    const values = data.map(item => item.totalAmount);\r\n+\r\n+    if (expensesBarChart) {\r\n+        expensesBarChart.destroy();\r\n+    }\r\n+    \r\n+    expensesBarChart = new Chart(ctx, {\r\n+        type: 'bar',\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n+                borderColor: 'rgba(79, 70, 229, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n+            },\r\n+            plugins: { legend: { display: false } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Busca categorias da API e preenche um elemento <select> do HTML.\r\n+ * @param {HTMLSelectElement} selectElement - O elemento dropdown a ser preenchido.\r\n+ */\r\n+async function populateCategorySelect(selectElement) {\r\n+    if (!selectElement) return;\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        selectElement.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            const option = document.createElement('option');\r\n+            option.value = category._id;\r\n+            option.textContent = category.name;\r\n+            selectElement.appendChild(option);\r\n+        });\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n+ * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n+ */\r\n+function initializeDashboardDragAndDrop() {\r\n+    const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n+    const mainGrid = document.getElementById('dashboard-main-grid');\r\n+\r\n+    // Vamos guardar as instâncias do Sortable em variáveis\r\n+    let kpiSortable, mainSortable;\r\n+\r\n+    const saveOrder = (gridType) => {\r\n+        if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n+\r\n+        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n+        let order;\r\n+\r\n+        // Usamos a instância correta para obter a ordem\r\n+        if (gridType === 'kpi' && kpiSortable) {\r\n+            order = kpiSortable.toArray();\r\n+        } else if (gridType === 'main' && mainSortable) {\r\n+            order = mainSortable.toArray();\r\n+        }\r\n+\r\n+        if (order) {\r\n+            localStorage.setItem(key, JSON.stringify(order));\r\n+        }\r\n+    };\r\n+\r\n+    if (kpiGrid) {\r\n+        // Guardamos a instância na nossa variável\r\n+        kpiSortable = new Sortable(kpiGrid, {\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+            // A chamada agora é mais simples\r\n+            onEnd: () => saveOrder('kpi'),\r\n+        });\r\n+    }\r\n+\r\n+    if (mainGrid) {\r\n+        // Guardamos a instância na nossa variável\r\n+        mainSortable = new Sortable(mainGrid, {\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+            onEnd: () => saveOrder('main'),\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Verifica o localStorage por uma ordem de cartões salva para o utilizador atual\r\n+ * e, se encontrar, reordena os elementos no ecrã.\r\n+ */\r\n+function applySavedDashboardOrder() {\r\n+    if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n+\r\n+    const applyOrder = (gridType) => {\r\n+        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n+        const savedOrder = localStorage.getItem(key);\r\n+        const grid = document.getElementById(`dashboard-${gridType}-grid`);\r\n+\r\n+        if (savedOrder && grid) {\r\n+            const order = JSON.parse(savedOrder);\r\n+            // Para cada id na ordem salva, encontramos o elemento correspondente\r\n+            // e o movemos para o final do container. Ao fazer isto em sequência,\r\n+            // a ordem final corresponde à ordem salva.\r\n+            order.forEach(dataId => {\r\n+                const card = grid.querySelector(`[data-id=\"${dataId}\"]`);\r\n+                if (card) {\r\n+                    grid.appendChild(card);\r\n+                }\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    applyOrder('kpi');\r\n+    applyOrder('main');\r\n+}\r\n+\r\n+/**\r\n+ * Captura a área do dashboard como uma imagem e gera um ficheiro PDF para download.\r\n+ */\r\n+async function handleVisualExportPDF() {\r\n+    // Mostra o loader para dar feedback ao utilizador\r\n+    showLoader();\r\n+\r\n+    // Seleciona o elemento do DOM que queremos \"fotografar\"\r\n+    const dashboardElement = document.getElementById('dashboardView');\r\n+    \r\n+    // Esconde temporariamente os botões de filtro e exportação para não aparecerem no PDF\r\n+    const filterContainer = document.getElementById('dashboard-date-filter-container');\r\n+    if (filterContainer) filterContainer.style.display = 'none';\r\n+\r\n+    try {\r\n+        // Usa a biblioteca html2canvas para criar um \"canvas\" (uma imagem) do elemento\r\n+        const canvas = await html2canvas(dashboardElement, {\r\n+            scale: 2, // Aumenta a resolução da imagem para melhor qualidade\r\n+            backgroundColor: '#1e293b' // Garante um fundo consistente\r\n+        });\r\n+\r\n+        // Converte o canvas para uma imagem no formato PNG\r\n+        const imageData = canvas.toDataURL('image/png');\r\n+\r\n+        // Usa a biblioteca jsPDF para criar o documento\r\n+        // A orientação 'p' é retrato (portrait), 'mm' é milímetros, 'a4' é o tamanho da página\r\n+        const pdf = new jspdf.jsPDF({\r\n+            orientation: 'p',\r\n+            unit: 'mm',\r\n+            format: 'a4'\r\n+        });\r\n+\r\n+        // Calcula as dimensões da imagem para que ela caiba na página A4, mantendo a proporção\r\n+        const pageWidth = pdf.internal.pageSize.getWidth();\r\n+        const pageHeight = pdf.internal.pageSize.getHeight();\r\n+        const imageWidth = canvas.width;\r\n+        const imageHeight = canvas.height;\r\n+        const ratio = imageWidth / imageHeight;\r\n+        let pdfImageWidth = pageWidth - 20; // Deixa uma margem de 10mm de cada lado\r\n+        let pdfImageHeight = pdfImageWidth / ratio;\r\n+        \r\n+        // Se a imagem ainda for muito alta, ajusta pela altura\r\n+        if (pdfImageHeight > pageHeight - 20) {\r\n+            pdfImageHeight = pageHeight - 20;\r\n+            pdfImageWidth = pdfImageHeight * ratio;\r\n+        }\r\n+        \r\n+        // Adiciona a imagem ao PDF, centralizada\r\n+        const x = (pageWidth - pdfImageWidth) / 2;\r\n+        const y = 10; // Margem de 10mm no topo\r\n+        pdf.addImage(imageData, 'PNG', x, y, pdfImageWidth, pdfImageHeight);\r\n+\r\n+        // Força o download do ficheiro\r\n+        pdf.save('dashboard-relatorio.pdf');\r\n+\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao gerar PDF visual:\", error);\r\n+        showToast('Ocorreu um erro ao gerar o PDF.', 'error');\r\n+    } finally {\r\n+        // Mostra novamente os botões de filtro, quer a exportação tenha funcionado ou não\r\n+        if (filterContainer) filterContainer.style.display = 'block';\r\n+        // Esconde o loader\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n+ * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n+ */\r\n+function switchAddBillMode(mode) {\r\n+    if (!manualAddForm || !xmlAddForm || !csvImportForm || !recurrentAddForm) return;\r\n+\r\n+    // Esconde todos os painéis\r\n+    manualAddForm.classList.add('hidden');\r\n+    xmlAddForm.classList.add('hidden');\r\n+    csvImportForm.classList.add('hidden');\r\n+    recurrentAddForm.classList.add('hidden'); // Esconde o novo painel\r\n+\r\n+    // Reseta o estilo de todos os botões\r\n+    [manualAddBtn, xmlAddBtn, csvImportBtn, recurrentAddBtn].forEach(btn => { // Adiciona o novo botão\r\n+        if(btn) {\r\n+            btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+            btn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+        }\r\n+    });\r\n+\r\n+    // Ativa o painel e o botão corretos\r\n+    let activeBtn, activeForm;\r\n+    if (mode === 'manual') {\r\n+        activeBtn = manualAddBtn;\r\n+        activeForm = manualAddForm;\r\n+    } else if (mode === 'xml') {\r\n+        activeBtn = xmlAddBtn;\r\n+        activeForm = xmlAddForm;\r\n+    } else if (mode === 'recurrent') { // Adiciona a nova condição\r\n+        activeBtn = recurrentAddBtn;\r\n+        activeForm = recurrentAddForm;\r\n+    } else if (mode === 'csv') {\r\n+        activeBtn = csvImportBtn;\r\n+        activeForm = csvImportForm;\r\n+    }\r\n+\r\n+    if (activeBtn && activeForm) {\r\n+        activeForm.classList.remove('hidden');\r\n+        activeBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+        activeBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a seleção de um ficheiro CSV, lê e pré-visualiza os dados.\r\n+ */\r\n+function handleCsvFileSelect(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) return;\r\n+\r\n+    // Usa o PapaParse para ler o ficheiro\r\n+    Papa.parse(file, {\r\n+        header: true, // Trata a primeira linha como cabeçalho\r\n+        skipEmptyLines: true,\r\n+        complete: (results) => {\r\n+            // Guarda os dados processados no estado da aplicação\r\n+            parsedCsvData = results.data;\r\n+            renderCsvPreview(parsedCsvData);\r\n+        },\r\n+        error: (err) => {\r\n+            showToast(`Erro ao ler o ficheiro CSV: ${err.message}`, 'error');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a tabela de pré-visualização com os dados lidos do CSV.\r\n+ */\r\n+function renderCsvPreview(data) {\r\n+    // Verificação de segurança para garantir que 'data' é um array\r\n+    if (!Array.isArray(data)) {\r\n+        console.error(\"renderCsvPreview foi chamada com dados inválidos:\", data);\r\n+        data = []; // Assume um array vazio para não quebrar a execução\r\n+    }\r\n+\r\n+    if (!csvPreviewTableBody || !csvPreviewArea || !csvImportSummary) {\r\n+        console.error(\"Elementos da pré-visualização do CSV não foram encontrados no HTML.\");\r\n+        return;\r\n+    }\r\n+\r\n+    csvPreviewTableBody.innerHTML = '';\r\n+    if (data.length === 0) {\r\n+        csvPreviewArea.classList.add('hidden');\r\n+        return;\r\n+    }\r\n+    \r\n+    const formatCurrency = (valueStr) => {\r\n+        const value = parseFloat(String(valueStr).replace(',', '.'));\r\n+        return isNaN(value) ? 'Inválido' : value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+    };\r\n+\r\n+    data.forEach(row => {\r\n+        const values = Object.values(row);\r\n+        const tr = `\r\n+            <tr>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[0] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[1] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[2] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700 text-right\">${formatCurrency(values[3])}</td>\r\n+            </tr>\r\n+        `;\r\n+        csvPreviewTableBody.insertAdjacentHTML('beforeend', tr);\r\n+    });\r\n+\r\n+    csvImportSummary.textContent = `${data.length} boletos prontos para serem importados.`;\r\n+    csvPreviewArea.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Envia os dados do CSV para a API para serem salvos na base de dados.\r\n+ */\r\n+async function handleConfirmImport() {\r\n+    if (parsedCsvData.length === 0) {\r\n+        return showToast('Não há dados para importar.', 'info');\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const response = await api.importBoletos(parsedCsvData);\r\n+        showToast(response.message, 'success');\r\n+\r\n+        // Fecha o modal e atualiza a aplicação\r\n+        addBillModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+\r\n+        // Limpa os dados da pré-visualização\r\n+        csvPreviewArea.classList.add('hidden');\r\n+        csvFileInput.value = '';\r\n+        parsedCsvData = [];\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a visibilidade e a contagem do botão de pagamento em massa.\r\n+ */\r\n+function updateMassPaymentButton() {\r\n+    const count = selectedItems.size;\r\n+    selectedCountSpan.textContent = count;\r\n+    massActionsContainer.classList.toggle('hidden', count === 0);\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Pagar Selecionados\".\r\n+ */\r\n+async function handleMarkSelectedAsPaid() {\r\n+    if (selectedItems.size === 0) {\r\n+        return showToast('Nenhuma parcela selecionada.', 'info');\r\n+    }\r\n+\r\n+    if (!confirm(`Tem a certeza que deseja marcar ${selectedItems.size} parcela(s) como paga(s)?`)) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const parcelIds = Array.from(selectedItems.keys());\r\n+\r\n+        // Chama a função da API com o array de IDs correto.\r\n+        const response = await api.markParcelsAsPaid(parcelIds);\r\n+\r\n+        showToast(response.message, 'success');\r\n+\r\n+        // Limpa a seleção e atualiza a interface\r\n+        selectedItems.clear();\r\n+        updateMassPaymentButton();\r\n+        await updateBillsOrganizer(); // Recarrega o calendário\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Seleciona todos os checkboxes de boletos visíveis no calendário.\r\n+ */\r\n+function handleSelectAllVisible() {\r\n+    // Pega todos os checkboxes que estão atualmente no calendário\r\n+    document.querySelectorAll('.mass-payment-checkbox').forEach(checkbox => {\r\n+        // Marca apenas os que ainda não estão marcados\r\n+        if (!checkbox.checked) {\r\n+            checkbox.checked = true;\r\n+\r\n+            // --- LÓGICA CORRIGIDA ---\r\n+            const parcelId = checkbox.dataset.parcelId;\r\n+            // Pega o boletoId do elemento pai mais próximo\r\n+            const boletoId = checkbox.closest('.bill-card-draggable').dataset.boletoId;\r\n+\r\n+            // Garante que temos os dois IDs antes de adicionar ao mapa\r\n+            if (parcelId && boletoId) {\r\n+                // Usa o método .set(key, value), que é o correto para um Map\r\n+                selectedItems.set(parcelId, boletoId);\r\n+            }\r\n+        }\r\n+    });\r\n+    // Atualiza o botão para refletir a nova contagem\r\n+    updateMassPaymentButton();\r\n+}\r\n+\r\n+/**\r\n+ * Desmarca todos os checkboxes de boletos selecionados.\r\n+ */\r\n+function handleDeselectAll() {\r\n+    // Limpa o nosso Set de seleção\r\n+    selectedItems.clear();\r\n+    // Desmarca todos os checkboxes que estão no calendário\r\n+    document.querySelectorAll('.mass-payment-checkbox:checked').forEach(checkbox => {\r\n+        checkbox.checked = false;\r\n+    });\r\n+    // Atualiza o botão (que será escondido, pois a contagem é 0)\r\n+    updateMassPaymentButton();\r\n+}\r\n+\r\n+/**\r\n+ * Busca os dados do utilizador e abre o modal de perfil.\r\n+ */\r\n+async function openProfileModal() {\r\n+    // Usa as variáveis globais que já temos da inicialização\r\n+    if (!currentLoggedInUser || !currentLoggedInCompany) {\r\n+        showToast('Não foi possível carregar os dados do perfil.', 'error');\r\n+        return;\r\n+    }\r\n+\r\n+    // Preenche o modal com os dados\r\n+    profileUsername.textContent = currentLoggedInUser.username;\r\n+    profileRole.textContent = currentLoggedInUser.role;\r\n+    profileCompany.textContent = currentLoggedInCompany.nomeEmpresa;\r\n+\r\n+    // Mostra o modal\r\n+    profileModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Busca o anúncio ativo mais recente e o exibe no banner.\r\n+ */\r\n+async function fetchAndDisplayAnnouncement() {\r\n+    try {\r\n+        const announcement = await api.getActiveAnnouncement();\r\n+\r\n+        // Se existir um anúncio e ele tiver uma mensagem\r\n+        if (announcement && announcement.message) {\r\n+            let messageHtml = announcement.message;\r\n+            // Se o anúncio tiver um link, transforma a mensagem num link clicável\r\n+            if (announcement.link) {\r\n+                messageHtml = `<a href=\"${announcement.link}\" target=\"_blank\" class=\"hover:underline\">${announcement.message} <i class=\"fas fa-external-link-alt fa-xs ml-1\"></i></a>`;\r\n+            }\r\n+            announcementMessage.innerHTML = messageHtml;\r\n+            globalAnnouncementBanner.classList.remove('hidden');\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(\"Não foi possível buscar o anúncio:\", error);\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+// =================================================================================\r\n+\r\n+async function handleForgotPasswordRequest(e) {\r\n+    e.preventDefault();\r\n+    const email = document.getElementById('recoveryEmailInput').value;\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.requestPasswordReset(email);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n+        forgotPasswordModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList(); // Se tiver essa função\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // CORREÇÃO: Capturamos a nova lista 'masterUsers' da API\r\n+                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                // CORREÇÃO: Passamos a lista para a função do modal\r\n+                openCompanyDetailsModal(company, users, masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // CORREÇÃO: Capturamos a nova lista 'masterUsers'\r\n+                const { users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+\r\n+                // CORREÇÃO: Verificamos se existem usuários na lista do banco Mestre\r\n+                if (!masterUsers || masterUsers.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários (no registro mestre) para representar.', 'info');\r\n+                }\r\n+\r\n+                // CORREÇÃO: Usamos o ID do primeiro usuário da lista do banco Mestre\r\n+                const userIdToImpersonate = masterUsers[0]._id; \r\n+\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                // O resto da lógica continua igual...\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+async function handleCalculateInstallments(e) {\r\n+    e.preventDefault(); // Impede a submissão padrão do formulário\r\n+\r\n+    const activeTabButton = document.querySelector('#addBillModal .flex button.bg-indigo-600');\r\n+    if (!activeTabButton) {\r\n+        return showToast('Erro: Não foi possível identificar a aba ativa.', 'error');\r\n+    }\r\n+    const activeModeId = activeTabButton.id;\r\n+\r\n+    currentBill = null;\r\n+\r\n+    if (activeModeId === 'manual-add-btn') {\r\n+        const billName = document.getElementById('billName').value;\r\n+        const dueDate = document.getElementById('dueDate').value;\r\n+        const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(',', '.'));\r\n+        const installments = parseInt(document.getElementById('installments').value);\r\n+        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+        const description = document.getElementById('description').value;\r\n+\r\n+        // Validação feita aqui no JavaScript\r\n+        if (!billName || !dueDate || !installments || isNaN(totalAmount) || totalAmount <= 0 || installments <= 0) {\r\n+            return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n+        }\r\n+\r\n+        currentBill = { name: billName, description, parcels: [], category: null };\r\n+        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+\r\n+        for (let i = 0; i < installments; i++) {\r\n+            const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+            parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+            currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n+        }\r\n+\r\n+    } else if (activeModeId === 'recurrent-add-btn') {\r\n+        const billName = document.getElementById('recurrentBillName').value;\r\n+        const startDate = document.getElementById('recurrentStartDate').value;\r\n+        const amount = parseFloat(document.getElementById('recurrentAmount').value);\r\n+        const months = parseInt(document.getElementById('recurrentInstallments').value);\r\n+        const description = document.getElementById('recurrentDescription').value;\r\n+\r\n+        // Validação feita aqui no JavaScript\r\n+        if (!billName || !startDate || !months || isNaN(amount) || amount <= 0 || months <= 0) {\r\n+            return showToast(\"Preencha todos os campos do pagamento recorrente.\", \"error\");\r\n+        }\r\n+\r\n+        currentBill = { name: billName, description, parcels: [], category: null };\r\n+\r\n+        for (let i = 0; i < months; i++) {\r\n+            const parcelDate = new Date(startDate + 'T00:00:00');\r\n+            parcelDate.setMonth(parcelDate.getMonth() + i);\r\n+            currentBill.parcels.push({ number: i + 1, amount: amount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n+        }\r\n+    }\r\n+\r\n+    // Este bloco só será executado se `currentBill` tiver sido preenchido com sucesso\r\n+    if (currentBill && currentBill.parcels.length > 0) {\r\n+        installmentsList.innerHTML = '';\r\n+        currentBill.parcels.forEach((parcel, index) => {\r\n+             installmentsList.insertAdjacentHTML('beforeend', `\r\n+                <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                    <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                    <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                    <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                    <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                </div>\r\n+            `);\r\n+        });\r\n+\r\n+        addEventListenersToInstallmentInputs();\r\n+        updatePreviewTotal();\r\n+        previewBillNameInput.value = currentBill.name;\r\n+        previewNfeNumber.textContent = 'N/A';\r\n+        addBillModal.classList.add('hidden');\r\n+        await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n+        installmentsPreviewModal.classList.remove('hidden');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n+ */\r\n+function updatePreviewTotal() {\r\n+    if (!currentBill.parcels) return;\r\n+    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    currentBill.category = document.getElementById('previewBillCategorySelect').value || null;\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill); // O objeto currentBill agora tem a categoria correta\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+        clearBillForm();\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+\r\n+    // Guarda os dados atualizados do formulário\r\n+    const updatedParcelData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    const updatedBillData = {\r\n+        category: modalBillCategorySelect.value || null\r\n+    };\r\n+\r\n+    // Encontra o boleto pai na nossa lista local\r\n+    const parentBoleto = userBoletos.find(b => b._id === selectedParcel.parentId);\r\n+\r\n+    // Verifica se a parcela é recorrente (se o boleto pai tem mais de 1 parcela)\r\n+    if (parentBoleto && parentBoleto.parcels.length > 1) {\r\n+        // Se for recorrente, guarda os dados e abre o modal de escolha\r\n+        pendingUpdateData = { updatedParcelData, updatedBillData };\r\n+\r\n+        // Atualiza a data no texto do botão para dar mais contexto ao utilizador\r\n+        const date = new Date(updatedParcelData.dueDate + 'T00:00:00');\r\n+        singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n+\r\n+        recurrentEditModal.classList.remove('hidden');\r\n+    } else {\r\n+        // Se não for recorrente, salva diretamente como antes\r\n+        showLoader();\r\n+        try {\r\n+            await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n+            await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n+            showToast('Alterações salvas com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            await updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ * Verifica a sessão e o estado da assinatura.\r\n+ */\r\n+async function initializeApp() {\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+    const urlParams = new URLSearchParams(window.location.search);\r\n+    const action = urlParams.get('action');\r\n+\r\n+    if (action === 'forgot_password') {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+\r\n+    if (!token) {\r\n+        showAdminLogin();\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        showAdminLogin();\r\n+    } finally {\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+function logout() {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n+ */\r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n+\r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+\r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n+ */\r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        // CORREÇÃO: Buscamos os detalhes da empresa, que agora incluem 'users' (do tenant)\r\n+        // e 'masterUsers' (do banco mestre).\r\n+        const { users, masterUsers } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; \r\n+\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+        // Usamos a lista de 'masterUsers' para construir o modal, pois ela tem os IDs corretos.\r\n+        if (masterUsers && masterUsers.length > 0) {\r\n+            masterUsers.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+\r\n+                const roleOptions = assignableRoles.map(role =>\r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                const roleHtml = isOwner\r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    // CORREÇÃO: O data-user-id agora usa o ID do masterUser\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+\r\n+        // Adiciona evento de clique para remover (precisará de ajuste futuro se necessário)\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            // ...\r\n+        });\r\n+\r\n+        // Adiciona evento para alterar o cargo (agora com o ID correto)\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n+\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    // Lógica para reverter a seleção visual\r\n+                    const originalUser = (await api.getCompanyDetails(companyId)).masterUsers.find(u => u._id === userId);\r\n+                    if(originalUser) e.target.value = originalUser.role;\r\n+                    return;\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    // A chamada à API agora envia o ID correto\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n+ * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n+ * @param {Event} event - O evento 'change' do input do ficheiro.\r\n+ */\r\n+async function handleNfeXmlUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) {\r\n+        return;\r\n+    }\r\n+\r\n+    const reader = new FileReader();\r\n+\r\n+    reader.onload = async (e) => {\r\n+        try {\r\n+            const xmlString = e.target.result;\r\n+            const parser = new DOMParser();\r\n+            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n+\r\n+            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n+                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n+            }\r\n+\r\n+            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n+            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n+\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n+\r\n+            let parcelsData = [];\r\n+\r\n+            if (duplicatas.length > 0) {\r\n+                parcelsData = duplicatas.map((dup, i) => ({\r\n+                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n+                    dueDate: getTagValue(\"dVenc\", dup)\r\n+                }));\r\n+            } else {\r\n+                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n+                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n+\r\n+                if (cobrancaMatch && cobrancaMatch[1]) {\r\n+                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n+                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n+                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n+                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n+\r\n+                    parcelsData = dias.map((dia, i) => {\r\n+                        const vencimento = new Date(dataEmissao);\r\n+                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n+                        return {\r\n+                            number: i + 1,\r\n+                            amount: parcelAmount,\r\n+                            dueDate: vencimento.toISOString().split('T')[0]\r\n+                        };\r\n+                    });\r\n+                }\r\n+            }\r\n+\r\n+            if (parcelsData.length > 0) {\r\n+                // ALTERAÇÃO AQUI: Removemos o prefixo \"NFe - \" do nome.\r\n+                currentBill = { name: nomeFornecedor, nfeNumber: nfeNumber, parcels: parcelsData };\r\n+\r\n+                installmentsList.innerHTML = '';\r\n+                currentBill.parcels.forEach((parcel, index) => {\r\n+                    installmentsList.insertAdjacentHTML('beforeend', `\r\n+                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                        </div>\r\n+                    `);\r\n+                });\r\n+\r\n+                addEventListenersToInstallmentInputs();\r\n+                updatePreviewTotal();\r\n+                previewBillNameInput.value = currentBill.name;\r\n+                previewNfeNumber.textContent = nfeNumber;\r\n+                await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n+                installmentsPreviewModal.classList.remove('hidden');\r\n+\r\n+            } else {\r\n+                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n+                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n+\r\n+                // ALTERAÇÃO AQUI TAMBÉM: Removemos o prefixo no caso de fallback.\r\n+                document.getElementById('billName').value = nomeFornecedor;\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n+                if (vencimento) {\r\n+                    document.getElementById('dueDate').value = vencimento;\r\n+                }\r\n+\r\n+                addBillModal.classList.remove('hidden');\r\n+            }\r\n+\r\n+            showToast('Dados do XML carregados com sucesso!', 'success');\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            console.error(\"Erro ao processar XML:\", error);\r\n+        } finally {\r\n+            event.target.value = '';\r\n+        }\r\n+    };\r\n+\r\n+    reader.onerror = () => {\r\n+        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+    };\r\n+\r\n+    reader.readAsText(file);\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n+ */\r\n+function addEventListenersToInstallmentInputs() {\r\n+    // Listener para o campo de VALOR\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            }\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de DATA\r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    /**\r\n+     * Mostra a tela de login de administrador.\r\n+     */\r\n+    function showAdminLogin() {\r\n+        hideAllScreens(); // Função de utils.js\r\n+        if (adminLoginForm) adminLoginForm.reset();\r\n+        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    // Listener para o campo de CÓDIGO DE BARRAS\r\n+    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        // Evento para guardar o valor quando é digitado\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].barcode = e.target.value;\r\n+            }\r\n+        });\r\n+\r\n+        input.addEventListener('keydown', (e) => {\r\n+            if (e.key === 'Enter') {\r\n+                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n+\r\n+                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n+                const nextIndex = currentIndex + 1;\r\n+                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n+\r\n+                if (nextInput) {\r\n+                    // Se houver um próximo campo de código de barras, foca nele.\r\n+                    nextInput.focus();\r\n+                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n+                } else {\r\n+                    // Se for o último campo, foca no botão de salvar.\r\n+                    document.getElementById('addToOrganizer').focus();\r\n+                }\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n+ */\r\n+function handleShowFullScreenBarcode() {\r\n+    const barcodeValue = modalBillBarcodeInput.value;\r\n+    if (!barcodeValue) {\r\n+        return showToast('Não há código de barras para mostrar.', 'info');\r\n+    }\r\n+\r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    if (!barcodeImageContainer) return;\r\n+\r\n+    // Limpa qualquer código de barras anterior\r\n+    barcodeImageContainer.innerHTML = '';\r\n+\r\n+    try {\r\n+        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n+        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n+\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n+        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n+            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n+            lineColor: \"#000000\",\r\n+            width: 2,\r\n+            height: 100,\r\n+            displayValue: true, // Mostra os números abaixo das barras\r\n+            fontSize: 18\r\n+        });\r\n+\r\n+        // Mostra o modal de ecrã inteiro\r\n+        barcodeFullScreenModal.classList.remove('hidden');\r\n+\r\n+    } catch (e) {\r\n+        console.error(\"Erro ao gerar código de barras:\", e);\r\n+        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n+    }\r\n+}\r\n+\r\n+async function handleAttachmentUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file || !selectedParcel) return;\r\n+\r\n+    // Cria um objeto FormData para enviar o ficheiro\r\n+    const formData = new FormData();\r\n+    formData.append('comprovante', file);\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Atualiza a UI para mostrar o link do novo anexo\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+\r\n+        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para remover um anexo de comprovativo.\r\n+ * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n+ */\r\n+async function handleRemoveAttachment() {\r\n+    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n+    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader(); // Mostra o ícone de carregamento\r\n+    try {\r\n+        // Chama a nossa função da API para apagar o anexo\r\n+        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n+\r\n+        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+\r\n+        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+\r\n+        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n+        await updateBillsOrganizer();\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n+ */\r\n+function applyFiltersAndSearch() {\r\n+    const searchTerm = searchInput.value.toLowerCase();\r\n+    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n+\r\n+    let filteredBoletos = userBoletos.filter(bill => {\r\n+        // Filtro de pesquisa\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n+            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+        if (!matchesSearch) return false;\r\n+\r\n+        // Filtro de categoria\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+        if (!matchesCategory) return false;\r\n+\r\n+        // Filtro de status\r\n+        if (activeStatusFilter === 'all') return true;\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        return bill.parcels.some(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeStatusFilter === 'paid') return parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            return false;\r\n+        });\r\n+    });\r\n+\r\n+    renderCalendar(filteredBoletos);\r\n+    updateMonthlySummary(filteredBoletos);\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n+ * agora com lógica para parcelas recorrentes.\r\n+ */\r\n+function initializeDragAndDrop() {\r\n+    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n+\r\n+    dayCells.forEach(cell => {\r\n+        new Sortable(cell, {\r\n+            group: 'calendar-bills',\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+\r\n+            onEnd: async function (evt) {\r\n+                const item = evt.item;\r\n+                const toCell = evt.to;\r\n+                const boletoId = item.dataset.boletoId;\r\n+                const parcelId = item.dataset.parcelId;\r\n+                const newDate = toCell.dataset.date;\r\n+\r\n+                if (!boletoId || !parcelId || !newDate) return;\r\n+\r\n+                const parentBoleto = userBoletos.find(b => b._id === boletoId);\r\n+                const originalParcel = parentBoleto?.parcels.find(p => p._id === parcelId);\r\n+\r\n+                if (!parentBoleto || !originalParcel) return;\r\n+\r\n+                if (parentBoleto.parcels.length > 1) {\r\n+                    // --- CORREÇÃO AQUI ---\r\n+                    // 1. Definimos a variável 'selectedParcel' que estava em falta.\r\n+                    selectedParcel = { ...originalParcel, parentId: parentBoleto._id };\r\n+\r\n+                    // 2. O resto da lógica continua a mesma\r\n+                    const updatedParcelData = {\r\n+                        ...originalParcel,\r\n+                        dueDate: newDate,\r\n+                    };\r\n+\r\n+                    pendingUpdateData = { \r\n+                        updatedParcelData, \r\n+                        updatedBillData: { category: parentBoleto.category?._id || null }\r\n+                    };\r\n+\r\n+                    const date = new Date(newDate + 'T00:00:00');\r\n+                    singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n+\r\n+                    recurrentEditModal.classList.remove('hidden');\r\n+                    renderCalendar();\r\n+\r\n+                } else {\r\n+                    // Lógica para parcela única (continua a mesma)\r\n+                    showLoader();\r\n+                    try {\r\n+                        await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n+                        showToast('Data da parcela atualizada com sucesso!', 'success');\r\n+                        await updateBillsOrganizer();\r\n+                    } catch (error) {\r\n+                        showToast(error.message, 'error');\r\n+                        await updateBillsOrganizer();\r\n+                    } finally {\r\n+                        hideLoader();\r\n+                    }\r\n+                }\r\n+            },\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Calcula o startDate e endDate com base numa predefinição do seletor.\r\n+ * @returns {{startDate?: string, endDate?: string}} - As datas ou um objeto vazio.\r\n+ */\r\n+function getDateRangeFromPreset() {\r\n+    const preset = dateRangePresetSelect.value;\r\n+    const now = new Date();\r\n+    let startDate, endDate;\r\n+\r\n+    switch (preset) {\r\n+        case 'thisMonth':\r\n+            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n+            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n+            break;\r\n+        case 'lastMonth':\r\n+            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n+            endDate = new Date(now.getFullYear(), now.getMonth(), 0);\r\n+            break;\r\n+        case 'thisQuarter':\r\n+            const quarter = Math.floor(now.getMonth() / 3);\r\n+            startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n+            endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n+            break;\r\n+        case 'thisYear':\r\n+            startDate = new Date(now.getFullYear(), 0, 1);\r\n+            endDate = new Date(now.getFullYear(), 11, 31);\r\n+            break;\r\n+        case 'custom':\r\n+            if (startDateInput.value && endDateInput.value) {\r\n+                return {\r\n+                    startDate: startDateInput.value,\r\n+                    endDate: endDateInput.value\r\n+                };\r\n+            }\r\n+            return {}; // Retorna vazio se o intervalo personalizado não estiver completo\r\n+        default:\r\n+            return {}; // Padrão sem filtro\r\n+    }\r\n+\r\n+    // Formata as datas para o formato YYYY-MM-DD\r\n+    return {\r\n+        startDate: startDate.toISOString().split('T')[0],\r\n+        endDate: endDate.toISOString().split('T')[0]\r\n+    };\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a lista de próximos vencimentos no dashboard.\r\n+ * @param {Array} payments - A lista de pagamentos vinda da API.\r\n+ */\r\n+function renderUpcomingPayments(payments) {\r\n+    if (!upcomingPaymentsList || !noUpcomingPaymentsMessage) return;\r\n+\r\n+    upcomingPaymentsList.innerHTML = ''; // Limpa a lista\r\n+\r\n+    if (payments.length === 0) {\r\n+        upcomingPaymentsList.appendChild(noUpcomingPaymentsMessage);\r\n+        noUpcomingPaymentsMessage.classList.remove('hidden');\r\n+    } else {\r\n+        noUpcomingPaymentsMessage.classList.add('hidden');\r\n+        const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+        payments.forEach(payment => {\r\n+            const dueDate = new Date(payment.dueDate + 'T00:00:00');\r\n+            const formattedDate = dueDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\r\n+\r\n+            const paymentHtml = `\r\n+                <div class=\"flex items-center justify-between bg-gray-700/50 p-3 rounded-md\">\r\n+                    <div>\r\n+                        <p class=\"font-medium text-white\">${payment.billName} (${payment.parcelNumber}ª)</p>\r\n+                        <p class=\"text-sm text-gray-400\">Vence em: ${formattedDate}</p>\r\n+                    </div>\r\n+                    <p class=\"font-semibold text-lg text-yellow-400\">${formatCurrency(payment.amount)}</p>\r\n+                </div>\r\n+            `;\r\n+            upcomingPaymentsList.insertAdjacentHTML('beforeend', paymentHtml);\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de barras horizontais com as 5 maiores despesas por categoria.\r\n+ * @param {Array} data - Os dados de despesas vindos da API.\r\n+ */\r\n+function renderTopExpensesChart(data) {\r\n+    const canvas = document.getElementById('topExpensesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    // Destrói o gráfico anterior, se existir, para evitar sobreposições\r\n+    if (topExpensesChart) {\r\n+        topExpensesChart.destroy();\r\n+    }\r\n+    \r\n+    // 1. Ordena os dados do maior para o menor\r\n+    const sortedData = [...data].sort((a, b) => b.totalAmount - a.totalAmount);\r\n+    \r\n+    // 2. Pega apenas nos 5 primeiros resultados\r\n+    const top5Data = sortedData.slice(0, 5);\r\n+\r\n+    // 3. Prepara os dados para o Chart.js\r\n+    const labels = top5Data.map(item => item.categoryName);\r\n+    const values = top5Data.map(item => item.totalAmount);\r\n+\r\n+    topExpensesChart = new Chart(ctx, {\r\n+        type: 'bar', // Tipo de gráfico\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total Gasto',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(239, 68, 68, 0.6)', // Vermelho\r\n+                borderColor: 'rgba(239, 68, 68, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            indexAxis: 'y', // <-- Isto é o que torna o gráfico horizontal!\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                x: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                y: { ticks: { color: '#d1d5db' }, grid: { display: false } }\r\n+            },\r\n+            plugins: {\r\n+                legend: { display: false },\r\n+                tooltip: {\r\n+                    callbacks: {\r\n+                        label: function(context) {\r\n+                            return ` Total: ${context.raw.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+                        }\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de alteração de senha.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleChangePassword(e) {\r\n+    e.preventDefault(); // Impede o recarregamento da página\r\n+\r\n+    const currentPassword = document.getElementById('currentPassword').value;\r\n+    const newPassword = document.getElementById('newPassword').value;\r\n+    const confirmPassword = document.getElementById('confirmPassword').value;\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.changePassword({ currentPassword, newPassword, confirmPassword });\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Limpa os campos e fecha o modal após o sucesso\r\n+        changePasswordForm.reset();\r\n+        profileModal.classList.add('hidden');\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', async () => {\r\n+// --- Lógica de inicialização que estava em initializeApp() ---\r\n+const today = new Date();\r\n+currentMonth = today.getMonth();\r\n+currentYear = today.getFullYear();\r\n+\r\n+const token = localStorage.getItem('authToken');\r\n+if (!token) {\r\n+    // Se não houver token, redireciona para a página de login\r\n+    window.location.href = 'Index.html';\r\n+    return;\r\n+}\r\n+\r\n+try {\r\n+    const data = await api.checkSession();\r\n+    if (data.user.role === 'SuperAdmin') {\r\n+        isAdminLoggedIn = true;\r\n+        await showAdminDashboard();\r\n+    } else {\r\n+        currentLoggedInUser = data.user;\r\n+        currentLoggedInCompany = data.company;\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            await showMainApp();\r\n+        } else {\r\n+            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                // Se for o dono da empresa, mostra o modal para renovar\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    }\r\n+} catch (error) {\r\n+    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n+    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n+    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    setTimeout(() => {\r\n+        window.location.href = 'Index.html';\r\n+    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n+} finally {\r\n+    // Esconde a tela de carregamento inicial\r\n+    document.getElementById('loadingScreen').classList.add('hidden');\r\n+}\r\n+\r\n+\r\n+// Submissão de formulários\r\n+if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n+if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+if (logoutBtn) {\r\n+    logoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n+    });\r\n+}\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+\r\n+\r\n+// Ações na App Principal\r\n+addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+// Ações do Modal de Edição de Boleto\r\n+closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+// Navegação do Calendário\r\n+prevMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+    if (currentMonth === 11) currentYear--;\r\n+    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+\r\n+nextMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+    if (currentMonth === 0) currentYear++;\r\n+    // A mesma mudança aqui\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+}\r\n+\r\n+if (openAddBillModalBtn) {\r\n+    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+}\r\n+\r\n+const handleRedirectToHome = () => {\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+const handleFullLogoutAndRedirect = () => {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+if (subscriptionLogoutBtn) {\r\n+    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+}\r\n+\r\n+if (blockedAccessLogoutBtn) {\r\n+    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n+    });\r\n+}\r\n+\r\n+// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+if (settingsBtn) {\r\n+    settingsBtn.addEventListener('click', (e) => {\r\n+        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+        settingsDropdown.classList.toggle('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Links dentro do menu dropdown\r\n+if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCompanyInfoModal();\r\n+});\r\n+\r\n+if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openPermissionsModal();\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n+\r\n+// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openManageUsersModal();\r\n+});\r\n+\r\n+// Botões do modal de gerir utilizadores\r\n+if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+    manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n+    openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+});\r\n+\r\n+/**\r\n+ * Lida com o clique no botão de criar/renovar assinatura.\r\n+ */\r\n+async function handleCreateSubscription() {\r\n+    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+    subscriptionActionBtn.disabled = true;\r\n+    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+    try {\r\n+        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+        const data = await api.createSubscriptionLink();\r\n+\r\n+        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+        if (data.init_point) {\r\n+            window.location.href = data.init_point;\r\n+        } else {\r\n+            throw new Error('Link de pagamento não recebido.');\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+        subscriptionActionBtn.disabled = false;\r\n+        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+    }\r\n+}\r\n+\r\n+// Liga a função ao clique do botão.\r\n+if (subscriptionActionBtn) {\r\n+    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+}\r\n+\r\n+if (closePreviewModalBtn) {\r\n+    closePreviewModalBtn.addEventListener('click', () => {\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+if (nfeXmlInput) {\r\n+    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+}\r\n+\r\n+if (previewBillNameInput) {\r\n+    previewBillNameInput.addEventListener('input', (e) => {\r\n+        if (currentBill) {\r\n+            currentBill.name = e.target.value;\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Liga a função ao clique do botão\r\n+if (showFullScreenBarcodeBtn) {\r\n+    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+}\r\n+\r\n+// Listener para o campo de pesquisa\r\n+if (searchInput) {\r\n+    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Listeners para os botões de filtro\r\n+if (filterButtons) {\r\n+    filterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões\r\n+            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona a classe 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Aplica o filtro\r\n+            applyFiltersAndSearch();\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCategoriesModal();\r\n+});\r\n+\r\n+if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+if (addCategoryForm) {\r\n+    addCategoryForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const name = newCategoryNameInput.value.trim();\r\n+        if (!name) return;\r\n+        try {\r\n+            await api.createCategory(name);\r\n+            newCategoryNameInput.value = '';\r\n+            await openCategoriesModal(); // Recarrega a lista do modal\r\n+            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+if (categoryListDiv) {\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+if (categoryFilterSelect) {\r\n+    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Configuração dos botões do dashboard\r\n+if (viewCalendarBtn) {\r\n+    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+}\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+if (dateRangePresetSelect) {\r\n+    dateRangePresetSelect.addEventListener('change', () => {\r\n+        const isCustom = dateRangePresetSelect.value === 'custom';\r\n+        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n+\r\n+        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n+        // o dashboard é atualizado imediatamente.\r\n+        if (!isCustom) {\r\n+            renderDashboard();\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Para o intervalo personalizado, atualizamos o dashboard\r\n+// assim que ambas as datas estiverem preenchidas.\r\n+if (startDateInput) {\r\n+    startDateInput.addEventListener('change', () => {\r\n+        if (endDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+if (endDateInput) {\r\n+    endDateInput.addEventListener('change', () => {\r\n+        if (startDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+// Listeners para os botões de exportação\r\n+const handleExport = (format) => {\r\n+    // 1. Pega no período de tempo atual do filtro do dashboard\r\n+    const dateRange = getDateRangeFromPreset();\r\n+\r\n+    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n+    const queryString = new URLSearchParams(dateRange).toString();\r\n+\r\n+    // 3. Monta o URL completo para o download\r\n+    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n+    \r\n+    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n+    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n+    fetch(downloadUrl, {\r\n+        headers: {\r\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n+        }\r\n+    })\r\n+    .then(res => res.blob())\r\n+    .then(blob => {\r\n+        const url = window.URL.createObjectURL(blob);\r\n+        const a = document.createElement('a');\r\n+        a.style.display = 'none';\r\n+        a.href = url;\r\n+        a.download = `relatorio-despesas.${format}`;\r\n+        document.body.appendChild(a);\r\n+        a.click();\r\n+        window.URL.revokeObjectURL(url);\r\n+        a.remove();\r\n+    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n+};\r\n+\r\n+if (exportCsvBtn) {\r\n+    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+}\r\n+if (exportPdfBtn) {\r\n+    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n+}\r\n+\r\n+if (manualAddBtn) {\r\n+    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+}\r\n+if (xmlAddBtn) {\r\n+    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+}\r\n+\r\n+if (csvImportBtn) {\r\n+    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n+}\r\n+if (csvFileInput) {\r\n+    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n+}\r\n+if (importCsvBtn) {\r\n+    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n+}\r\n+if (markSelectedAsPaidBtn) {\r\n+    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n+}\r\n+if (selectAllVisibleBtn) {\r\n+    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n+}\r\n+\r\n+if (deselectAllVisibleBtn) {\r\n+    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n+}\r\n+if (dashboardFilterButtons) {\r\n+    dashboardFilterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões do dashboard\r\n+            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Atualiza a variável de estado com o novo filtro\r\n+            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n+            // Renderiza o dashboard novamente com os dados filtrados\r\n+            renderDashboard();\r\n+        });\r\n+    });\r\n+}\r\n+// Abre o modal de alteração de categoria\r\n+if (changeCategoryBtn) {\r\n+    changeCategoryBtn.addEventListener('click', async () => {\r\n+        showLoader();\r\n+        // Popula o dropdown do modal com as categorias existentes\r\n+        await populateCategorySelect(batchCategorySelect);\r\n+        hideLoader();\r\n+        categoryBatchModal.classList.remove('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de cancelar no modal\r\n+if (cancelCategoryBatchBtn) {\r\n+    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n+        categoryBatchModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de confirmar a alteração\r\n+if (confirmCategoryBatchBtn) {\r\n+    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n+        const categoryId = batchCategorySelect.value;\r\n+        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n+        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n+\r\n+        if (boletoIds.length === 0) {\r\n+            return showToast('Nenhum item selecionado.', 'info');\r\n+        }\r\n+\r\n+        showLoader();\r\n+        try {\r\n+            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n+            showToast(response.message, 'success');\r\n+            selectedItems.clear();\r\n+            updateMassPaymentButton();\r\n+            await updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+            categoryBatchModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+}\r\n+if (openProfileModalBtn) {\r\n+    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n+}\r\n+if (closeProfileModalBtn) {\r\n+    closeProfileModalBtn.addEventListener('click', () => {\r\n+        profileModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+if (changePasswordForm) {\r\n+    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n+}\r\n+if (resendVerificationBtn) {\r\n+    resendVerificationBtn.addEventListener('click', async () => {\r\n+        resendVerificationBtn.disabled = true;\r\n+        resendVerificationBtn.textContent = 'A reenviar...';\r\n+\r\n+        try {\r\n+            const data = await api.resendVerificationEmail();\r\n+            showToast(data.message, 'success');\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            resendVerificationBtn.disabled = false;\r\n+            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n+        }\r\n+    });\r\n+}\r\n+if (recurrentAddBtn) {\r\n+    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n+}\r\n+if (recurrentEditModal) {\r\n+    // Botões de escolha (Somente esta, futuras, todas)\r\n+    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const scope = e.currentTarget.dataset.scope;\r\n+            if (!pendingUpdateData || !selectedParcel) return;\r\n+\r\n+            recurrentEditModal.classList.add('hidden');\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a nova rota da API com o escopo escolhido\r\n+                await api.bulkUpdateParcels(\r\n+                    selectedParcel.parentId, \r\n+                    selectedParcel._id, \r\n+                    pendingUpdateData.updatedParcelData, \r\n+                    scope\r\n+                );\r\n+\r\n+                // Atualiza a categoria do boleto, se foi alterada\r\n+                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n+\r\n+                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n+                billModal.classList.add('hidden');\r\n+                await updateBillsOrganizer();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+                pendingUpdateData = null; // Limpa os dados pendentes\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Botão de cancelar\r\n+    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n+        recurrentEditModal.classList.add('hidden');\r\n+        pendingUpdateData = null; // Limpa os dados pendentes\r\n+    });\r\n+}\r\n+if (closeAnnouncementBtn) {\r\n+    closeAnnouncementBtn.addEventListener('click', () => {\r\n+        globalAnnouncementBanner.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+// CHAME A NOVA FUNÇÃO AQUI\r\n+initializeDashboardDragAndDrop(); \r\n+\r\n+\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753808592645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1584,14 +1584,10 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList(); // Se tiver essa função\r\n-}\r\n \r\n+\r\n async function renderCompanyList() {\r\n     showLoader();\r\n     try {\r\n         const companies = await api.getCompanies();\r\n@@ -3126,9376 +3122,5 @@\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n \r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import { API_BASE_URL } from './config.js';\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let expensesPieChart = null;\r\n-let expensesBarChart = null;\r\n-let topExpensesChart = null;\r\n-let parsedCsvData = [];\r\n-let selectedParcels = new Set();\r\n-let dashboardStatusFilter = 'all';\r\n-let selectedItems = new Map();\r\n-let pendingUpdateData = null;\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n-\r\n-const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n-const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n-const calendarView = document.getElementById('calendarView');\r\n-const dashboardView = document.getElementById('dashboardView');\r\n-const dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\n-const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n-const startDateInput = document.getElementById('start-date-input');\r\n-const endDateInput = document.getElementById('end-date-input');\r\n-const kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\n-const upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\n-const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n-const exportCsvBtn = document.getElementById('export-csv-btn');\r\n-const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n-const dashboardFilterButtons = document.querySelectorAll('.dashboard-filter-btn');\r\n-\r\n-const manualAddBtn = document.getElementById('manual-add-btn');\r\n-const xmlAddBtn = document.getElementById('xml-add-btn');\r\n-const manualAddForm = document.getElementById('manual-add-form');\r\n-const xmlAddForm = document.getElementById('xml-add-form');\r\n-\r\n-const csvImportBtn = document.getElementById('csv-import-btn');\r\n-const csvImportForm = document.getElementById('csv-import-form');\r\n-const csvFileInput = document.getElementById('csv-file-input');\r\n-const csvPreviewArea = document.getElementById('csv-preview-area');\r\n-const csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\n-const csvImportSummary = document.getElementById('csv-import-summary');\r\n-const importCsvBtn = document.getElementById('import-csv-btn');\r\n-\r\n-const markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\n-const selectedCountSpan = document.getElementById('selectedCount');\r\n-const massActionsContainer = document.getElementById('massActionsContainer');\r\n-const selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\n-const deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n-\r\n-const changeCategoryBtn = document.getElementById('changeCategoryBtn');\r\n-const categoryBatchModal = document.getElementById('categoryBatchModal');\r\n-const batchCategorySelect = document.getElementById('batchCategorySelect');\r\n-const cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\n-const confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n-\r\n-const openProfileModalBtn = document.getElementById('openProfileModalBtn');\r\n-const profileModal = document.getElementById('profileModal');\r\n-const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\n-const profileUsername = document.getElementById('profileUsername');\r\n-const profileRole = document.getElementById('profileRole');\r\n-const profileCompany = document.getElementById('profileCompany');\r\n-const changePasswordForm = document.getElementById('changePasswordForm');\r\n-const verificationNotice = document.getElementById('verificationNotice');\r\n-const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n-\r\n-const recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\n-const recurrentAddForm = document.getElementById('recurrent-add-form');\r\n-const recurrentEditModal = document.getElementById('recurrentEditModal');\r\n-const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n-const singleParcelDate = document.getElementById('single-parcel-date');\r\n-\r\n-const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n-const announcementMessage = document.getElementById('announcementMessage');\r\n-const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n- */\r\n-function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-\r\n-    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n-\r\n-    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n-    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n-\r\n-    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n-\r\n-    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    // Atualiza os elementos HTML com os valores corretos\r\n-    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n-    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n-    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com uma lista específica de boletos.\r\n- * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n- * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n- */\r\n-function renderCalendar(boletosToRender = userBoletos) {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-    const today = new Date(); // Variável para verificar boletos vencidos\r\n-    today.setHours(0, 0, 0, 0); // Zera a hora para uma comparação precisa do dia\r\n-\r\n-    // ETAPA 1: Otimização - Agrupa todas as parcelas por data de vencimento.\r\n-    const parcelsByDate = new Map();\r\n-    boletosToRender.forEach(bill => {\r\n-        bill.parcels.forEach(parcel => {\r\n-            const date = parcel.dueDate;\r\n-            if (!parcelsByDate.has(date)) {\r\n-                parcelsByDate.set(date, []);\r\n-            }\r\n-            // Adiciona uma referência ao boleto pai para cada parcela, para facilitar.\r\n-            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n-        });\r\n-    });\r\n-\r\n-    // ETAPA 2: Renderização do Calendário\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    // Cria as células vazias do início do mês\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    // Cria as células para cada dia do mês\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-\r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        // Adiciona evento de clique na célula para criar novos boletos\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card-draggable')) return;\r\n-            openAddBillModal(e.currentTarget.dataset.date);\r\n-        });\r\n-\r\n-        // Verifica se existem parcelas para este dia no mapa\r\n-        if (parcelsByDate.has(dateStr)) {\r\n-            // Se existirem, itera apenas sobre as parcelas daquele dia\r\n-            parcelsByDate.get(dateStr).forEach(parcel => {\r\n-                const bill = parcel.parentBill; // Pega a referência do boleto pai\r\n-                const parcelElement = document.createElement('div');\r\n-                \r\n-                // Lógica de Status, Cores e Ícones\r\n-                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                const isOverdue = !parcel.paid && dueDate < today;\r\n-                let statusClass = 'bg-indigo-700 text-indigo-100'; // Padrão: Pendente\r\n-                let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n-            \r\n-                if (parcel.paid) {\r\n-                    statusClass = 'bg-green-700 text-green-100'; // Pago\r\n-                    statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n-                } else if (isOverdue) {\r\n-                    statusClass = 'bg-red-700 text-red-100'; // Vencido\r\n-                    statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n-                }\r\n-            \r\n-                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n-                parcelElement.dataset.boletoId = bill._id;\r\n-                parcelElement.dataset.parcelId = parcel._id;\r\n-    \r\n-                // HTML do card com layout aprimorado\r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"flex items-start space-x-2\">\r\n-                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n-                        <div class=\"flex-1 min-w-0\">\r\n-                            <div class=\"flex justify-between items-center\">\r\n-                                <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n-                                    ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n-                                </span>\r\n-                                <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n-                                    ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n-                                </span>\r\n-                            </div>\r\n-                            \r\n-                            ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                            ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n-                        </div>\r\n-                    </div>\r\n-                `;\r\n-    \r\n-                // Adiciona evento de clique no card para abrir o modal\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                \r\n-                // Lógica para o checkbox\r\n-                const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n-                checkbox.addEventListener('change', (e) => {\r\n-                    const parcelId = e.target.dataset.parcelId;\r\n-                    const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n-                    if (e.target.checked) {\r\n-                        selectedItems.set(parcelId, boletoId);\r\n-                    } else {\r\n-                        selectedItems.delete(parcelId);\r\n-                    }\r\n-                    updateMassPaymentButton();\r\n-                });\r\n-                checkbox.addEventListener('click', (e) => {\r\n-                    e.stopPropagation(); // Impede o clique de abrir o modal\r\n-                });\r\n-                \r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        }\r\n-        \r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-\r\n-    initializeDragAndDrop();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-async function openBillModal(bill, parcel) {\r\n-    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-\r\n-    // Preenche todos os campos do modal com os dados da parcela clicada\r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-    // Mostra o botão de gerar código de barras apenas se houver um código\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-\r\n-    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n-    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n-    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n-    if (bill.nfeNumber) {\r\n-        nfeNumberEl.textContent = bill.nfeNumber;\r\n-        nfeContainer.classList.remove('hidden');\r\n-    } else {\r\n-        nfeContainer.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Lógica dinâmica para a secção de anexos\r\n-    const attachmentContainer = document.getElementById('attachment-container');\r\n-    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n-\r\n-    if (parcel.attachmentUrl) {\r\n-        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n-        attachmentContainer.innerHTML = `\r\n-            <div class=\"flex items-center justify-between\">\r\n-                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n-                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n-                </a>\r\n-                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n-            </div>\r\n-        `;\r\n-        // Adiciona o evento de clique ao novo botão de remover\r\n-        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n-    } else {\r\n-        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-        // Adiciona o evento de 'change' ao novo input de upload\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-    }\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-        categories.forEach(cat => {\r\n-            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n-        });\r\n-        if (bill.category) {\r\n-            modalBillCategorySelect.value = bill.category._id;\r\n-        } else {\r\n-            modalBillCategorySelect.value = \"\";\r\n-        }\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    if (billForm) {\r\n-        billForm.reset();\r\n-    }\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    }\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    mainAppContent.classList.remove('hidden');\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-    await fetchAndDisplayAnnouncement();\r\n-    await populateCategoryFilter();\r\n-    await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n- * @param {string} tagName - O nome da tag a ser procurada.\r\n- * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n- * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n- */\r\n-function getTagValue(tagName, parentElement) {\r\n-    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n-    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n-    return element?.textContent || '';\r\n-}\r\n-\r\n-/**\r\n- * Adiciona os eventos de clique e mudança aos elementos dinâmicos do modal de detalhes da empresa.\r\n- * Esta é a função que estava em falta.\r\n- */\r\n-function addEventListenersToCompanyDetailsModal() {\r\n-    // Evento para os seletores de cargo (role)\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                // Recarrega os dados do modal para garantir consistência\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Evento para os botões de remover utilizador\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.currentTarget.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                // Recarrega os dados do modal\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n- */\r\n-function openCompanyDetailsModal(company, users, masterUsers) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (masterUsers && masterUsers.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        masterUsers.forEach(user => {\r\n-            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n-\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona os eventos DEPOIS de criar os botões\r\n-    addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n-    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n-\r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        // Passa os novos dados para a função da API\r\n-        const data = await api.registerUser(username, password, email, role, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        // A chamada à API já retorna os dados completos da empresa, incluindo 'isVerified'\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        // LÓGICA PARA MOSTRAR/ESCONDER O AVISO\r\n-        if (company.isVerified) {\r\n-            verificationNotice.classList.add('hidden');\r\n-        } else {\r\n-            verificationNotice.classList.remove('hidden');\r\n-        }\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-\r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function openCategoriesModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        renderCategoryList(categories);\r\n-        categoriesModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function renderCategoryList(categories) {\r\n-    categoryListDiv.innerHTML = '';\r\n-    if (categories.length === 0) {\r\n-        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n-        return;\r\n-    }\r\n-    categories.forEach(category => {\r\n-        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n-                <span class=\"text-white\">${category.name}</span>\r\n-                <div>\r\n-                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n-                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n-                </div>\r\n-            </div>\r\n-        `);\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo boleto,\r\n- * e opcionalmente pré-preenchendo a data.\r\n- * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n- */\r\n-async function openAddBillModal(preselectedDate = null) {\r\n-    clearBillForm();\r\n-    switchAddBillMode('manual');\r\n-    showLoader();\r\n-    try {\r\n-        // Se uma data foi passada como parâmetro (ou seja, o utilizador clicou no calendário)\r\n-        if (preselectedDate) {\r\n-            // Preenche o campo da aba \"Adicionar Manual\" (comportamento que já existia)\r\n-            document.getElementById('dueDate').value = preselectedDate;\r\n-\r\n-            // NOVA LINHA: Preenche também o campo da aba \"Pagamento Recorrente\"\r\n-            document.getElementById('recurrentStartDate').value = preselectedDate;\r\n-        }\r\n-\r\n-        addBillModal.classList.remove('hidden');\r\n-    } catch (error)\r\n- {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function populateCategoryFilter() {\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n-        // Se der erro, garante que a opção padrão exista\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Alterna a visualização entre o Calendário e o Dashboard.\r\n- */\r\n-function switchView(viewToShow) {\r\n-    // Esconde ambas as vistas\r\n-    calendarView.classList.add('hidden');\r\n-    dashboardView.classList.add('hidden');\r\n-\r\n-    // Reseta o estilo dos botões\r\n-    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n-    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n-    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-\r\n-    // Mostra a vista correta e ativa o botão correspondente\r\n-    if (viewToShow === 'calendar') {\r\n-        calendarView.classList.remove('hidden');\r\n-        viewCalendarBtn.classList.add('bg-indigo-600');\r\n-        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-    } else if (viewToShow === 'dashboard') {\r\n-        dashboardView.classList.remove('hidden');\r\n-        viewDashboardBtn.classList.add('bg-indigo-600');\r\n-        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderDashboard();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Atualiza os cartões de KPI no dashboard.\r\n- * @param {object} kpiData - Os dados dos KPIs vindos da API.\r\n- */\r\n-function updateKpiCards(kpiData) {\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n-\r\n-    // Popula os novos campos\r\n-    if (kpiContasVencidas) kpiContasVencidas.textContent = formatCurrency(kpiData.totalVencido);\r\n-    \r\n-    // Popula os campos existentes\r\n-    document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n-    document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n-    document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n-}\r\n-\r\n-/**\r\n- * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n- */\r\n-async function renderDashboard() {\r\n-    showLoader();\r\n-    try {\r\n-        const dateRange = getDateRangeFromPreset();\r\n-\r\n-        // ATUALIZADO: Passa o 'dashboardStatusFilter' para as chamadas da API\r\n-        const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n-            api.getExpensesByCategory(dateRange, dashboardStatusFilter),\r\n-            api.getMonthlySummary(dateRange, dashboardStatusFilter),\r\n-            api.getKpiSummary(dateRange),\r\n-            api.getUpcomingPayments()\r\n-        ]);\r\n-\r\n-        updateKpiCards(kpiData);\r\n-        renderPieChart(pieData);\r\n-        renderBarChart(barData);\r\n-        renderUpcomingPayments(upcomingData);\r\n-        renderTopExpensesChart(pieData);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de pizza de despesas por categoria.\r\n- */\r\n-function renderPieChart(data) {\r\n-    const canvas = document.getElementById('expensesByCategoryChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    if (expensesPieChart) {\r\n-        expensesPieChart.destroy();\r\n-    }\r\n-\r\n-    expensesPieChart = new Chart(ctx, {\r\n-        type: 'pie',\r\n-        data: {\r\n-            labels: data.map(item => item.categoryName),\r\n-            datasets: [{\r\n-                data: data.map(item => item.totalAmount),\r\n-                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n-                borderColor: '#1f2937',\r\n-                borderWidth: 2\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n- */\r\n-function renderBarChart(data) {\r\n-    const canvas = document.getElementById('monthlyExpensesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n-    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n-    const values = data.map(item => item.totalAmount);\r\n-\r\n-    if (expensesBarChart) {\r\n-        expensesBarChart.destroy();\r\n-    }\r\n-    \r\n-    expensesBarChart = new Chart(ctx, {\r\n-        type: 'bar',\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Total',\r\n-                data: values,\r\n-                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n-                borderColor: 'rgba(79, 70, 229, 1)',\r\n-                borderWidth: 1\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n-                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n-            },\r\n-            plugins: { legend: { display: false } }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Busca categorias da API e preenche um elemento <select> do HTML.\r\n- * @param {HTMLSelectElement} selectElement - O elemento dropdown a ser preenchido.\r\n- */\r\n-async function populateCategorySelect(selectElement) {\r\n-    if (!selectElement) return;\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        selectElement.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            const option = document.createElement('option');\r\n-            option.value = category._id;\r\n-            option.textContent = category.name;\r\n-            selectElement.appendChild(option);\r\n-        });\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n- * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n- */\r\n-function initializeDashboardDragAndDrop() {\r\n-    const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n-    const mainGrid = document.getElementById('dashboard-main-grid');\r\n-\r\n-    // Vamos guardar as instâncias do Sortable em variáveis\r\n-    let kpiSortable, mainSortable;\r\n-\r\n-    const saveOrder = (gridType) => {\r\n-        if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n-\r\n-        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n-        let order;\r\n-\r\n-        // Usamos a instância correta para obter a ordem\r\n-        if (gridType === 'kpi' && kpiSortable) {\r\n-            order = kpiSortable.toArray();\r\n-        } else if (gridType === 'main' && mainSortable) {\r\n-            order = mainSortable.toArray();\r\n-        }\r\n-\r\n-        if (order) {\r\n-            localStorage.setItem(key, JSON.stringify(order));\r\n-        }\r\n-    };\r\n-\r\n-    if (kpiGrid) {\r\n-        // Guardamos a instância na nossa variável\r\n-        kpiSortable = new Sortable(kpiGrid, {\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-            // A chamada agora é mais simples\r\n-            onEnd: () => saveOrder('kpi'),\r\n-        });\r\n-    }\r\n-\r\n-    if (mainGrid) {\r\n-        // Guardamos a instância na nossa variável\r\n-        mainSortable = new Sortable(mainGrid, {\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-            onEnd: () => saveOrder('main'),\r\n-        });\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Verifica o localStorage por uma ordem de cartões salva para o utilizador atual\r\n- * e, se encontrar, reordena os elementos no ecrã.\r\n- */\r\n-function applySavedDashboardOrder() {\r\n-    if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n-\r\n-    const applyOrder = (gridType) => {\r\n-        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n-        const savedOrder = localStorage.getItem(key);\r\n-        const grid = document.getElementById(`dashboard-${gridType}-grid`);\r\n-\r\n-        if (savedOrder && grid) {\r\n-            const order = JSON.parse(savedOrder);\r\n-            // Para cada id na ordem salva, encontramos o elemento correspondente\r\n-            // e o movemos para o final do container. Ao fazer isto em sequência,\r\n-            // a ordem final corresponde à ordem salva.\r\n-            order.forEach(dataId => {\r\n-                const card = grid.querySelector(`[data-id=\"${dataId}\"]`);\r\n-                if (card) {\r\n-                    grid.appendChild(card);\r\n-                }\r\n-            });\r\n-        }\r\n-    };\r\n-\r\n-    applyOrder('kpi');\r\n-    applyOrder('main');\r\n-}\r\n-\r\n-/**\r\n- * Captura a área do dashboard como uma imagem e gera um ficheiro PDF para download.\r\n- */\r\n-async function handleVisualExportPDF() {\r\n-    // Mostra o loader para dar feedback ao utilizador\r\n-    showLoader();\r\n-\r\n-    // Seleciona o elemento do DOM que queremos \"fotografar\"\r\n-    const dashboardElement = document.getElementById('dashboardView');\r\n-    \r\n-    // Esconde temporariamente os botões de filtro e exportação para não aparecerem no PDF\r\n-    const filterContainer = document.getElementById('dashboard-date-filter-container');\r\n-    if (filterContainer) filterContainer.style.display = 'none';\r\n-\r\n-    try {\r\n-        // Usa a biblioteca html2canvas para criar um \"canvas\" (uma imagem) do elemento\r\n-        const canvas = await html2canvas(dashboardElement, {\r\n-            scale: 2, // Aumenta a resolução da imagem para melhor qualidade\r\n-            backgroundColor: '#1e293b' // Garante um fundo consistente\r\n-        });\r\n-\r\n-        // Converte o canvas para uma imagem no formato PNG\r\n-        const imageData = canvas.toDataURL('image/png');\r\n-\r\n-        // Usa a biblioteca jsPDF para criar o documento\r\n-        // A orientação 'p' é retrato (portrait), 'mm' é milímetros, 'a4' é o tamanho da página\r\n-        const pdf = new jspdf.jsPDF({\r\n-            orientation: 'p',\r\n-            unit: 'mm',\r\n-            format: 'a4'\r\n-        });\r\n-\r\n-        // Calcula as dimensões da imagem para que ela caiba na página A4, mantendo a proporção\r\n-        const pageWidth = pdf.internal.pageSize.getWidth();\r\n-        const pageHeight = pdf.internal.pageSize.getHeight();\r\n-        const imageWidth = canvas.width;\r\n-        const imageHeight = canvas.height;\r\n-        const ratio = imageWidth / imageHeight;\r\n-        let pdfImageWidth = pageWidth - 20; // Deixa uma margem de 10mm de cada lado\r\n-        let pdfImageHeight = pdfImageWidth / ratio;\r\n-        \r\n-        // Se a imagem ainda for muito alta, ajusta pela altura\r\n-        if (pdfImageHeight > pageHeight - 20) {\r\n-            pdfImageHeight = pageHeight - 20;\r\n-            pdfImageWidth = pdfImageHeight * ratio;\r\n-        }\r\n-        \r\n-        // Adiciona a imagem ao PDF, centralizada\r\n-        const x = (pageWidth - pdfImageWidth) / 2;\r\n-        const y = 10; // Margem de 10mm no topo\r\n-        pdf.addImage(imageData, 'PNG', x, y, pdfImageWidth, pdfImageHeight);\r\n-\r\n-        // Força o download do ficheiro\r\n-        pdf.save('dashboard-relatorio.pdf');\r\n-\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao gerar PDF visual:\", error);\r\n-        showToast('Ocorreu um erro ao gerar o PDF.', 'error');\r\n-    } finally {\r\n-        // Mostra novamente os botões de filtro, quer a exportação tenha funcionado ou não\r\n-        if (filterContainer) filterContainer.style.display = 'block';\r\n-        // Esconde o loader\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n- * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n- */\r\n-function switchAddBillMode(mode) {\r\n-    if (!manualAddForm || !xmlAddForm || !csvImportForm || !recurrentAddForm) return;\r\n-\r\n-    // Esconde todos os painéis\r\n-    manualAddForm.classList.add('hidden');\r\n-    xmlAddForm.classList.add('hidden');\r\n-    csvImportForm.classList.add('hidden');\r\n-    recurrentAddForm.classList.add('hidden'); // Esconde o novo painel\r\n-\r\n-    // Reseta o estilo de todos os botões\r\n-    [manualAddBtn, xmlAddBtn, csvImportBtn, recurrentAddBtn].forEach(btn => { // Adiciona o novo botão\r\n-        if(btn) {\r\n-            btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-            btn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n-        }\r\n-    });\r\n-\r\n-    // Ativa o painel e o botão corretos\r\n-    let activeBtn, activeForm;\r\n-    if (mode === 'manual') {\r\n-        activeBtn = manualAddBtn;\r\n-        activeForm = manualAddForm;\r\n-    } else if (mode === 'xml') {\r\n-        activeBtn = xmlAddBtn;\r\n-        activeForm = xmlAddForm;\r\n-    } else if (mode === 'recurrent') { // Adiciona a nova condição\r\n-        activeBtn = recurrentAddBtn;\r\n-        activeForm = recurrentAddForm;\r\n-    } else if (mode === 'csv') {\r\n-        activeBtn = csvImportBtn;\r\n-        activeForm = csvImportForm;\r\n-    }\r\n-\r\n-    if (activeBtn && activeForm) {\r\n-        activeForm.classList.remove('hidden');\r\n-        activeBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n-        activeBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com a seleção de um ficheiro CSV, lê e pré-visualiza os dados.\r\n- */\r\n-function handleCsvFileSelect(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) return;\r\n-\r\n-    // Usa o PapaParse para ler o ficheiro\r\n-    Papa.parse(file, {\r\n-        header: true, // Trata a primeira linha como cabeçalho\r\n-        skipEmptyLines: true,\r\n-        complete: (results) => {\r\n-            // Guarda os dados processados no estado da aplicação\r\n-            parsedCsvData = results.data;\r\n-            renderCsvPreview(parsedCsvData);\r\n-        },\r\n-        error: (err) => {\r\n-            showToast(`Erro ao ler o ficheiro CSV: ${err.message}`, 'error');\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Renderiza a tabela de pré-visualização com os dados lidos do CSV.\r\n- */\r\n-function renderCsvPreview(data) {\r\n-    // Verificação de segurança para garantir que 'data' é um array\r\n-    if (!Array.isArray(data)) {\r\n-        console.error(\"renderCsvPreview foi chamada com dados inválidos:\", data);\r\n-        data = []; // Assume um array vazio para não quebrar a execução\r\n-    }\r\n-\r\n-    if (!csvPreviewTableBody || !csvPreviewArea || !csvImportSummary) {\r\n-        console.error(\"Elementos da pré-visualização do CSV não foram encontrados no HTML.\");\r\n-        return;\r\n-    }\r\n-\r\n-    csvPreviewTableBody.innerHTML = '';\r\n-    if (data.length === 0) {\r\n-        csvPreviewArea.classList.add('hidden');\r\n-        return;\r\n-    }\r\n-    \r\n-    const formatCurrency = (valueStr) => {\r\n-        const value = parseFloat(String(valueStr).replace(',', '.'));\r\n-        return isNaN(value) ? 'Inválido' : value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-    };\r\n-\r\n-    data.forEach(row => {\r\n-        const values = Object.values(row);\r\n-        const tr = `\r\n-            <tr>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${values[0] || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${values[1] || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${values[2] || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700 text-right\">${formatCurrency(values[3])}</td>\r\n-            </tr>\r\n-        `;\r\n-        csvPreviewTableBody.insertAdjacentHTML('beforeend', tr);\r\n-    });\r\n-\r\n-    csvImportSummary.textContent = `${data.length} boletos prontos para serem importados.`;\r\n-    csvPreviewArea.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Envia os dados do CSV para a API para serem salvos na base de dados.\r\n- */\r\n-async function handleConfirmImport() {\r\n-    if (parsedCsvData.length === 0) {\r\n-        return showToast('Não há dados para importar.', 'info');\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const response = await api.importBoletos(parsedCsvData);\r\n-        showToast(response.message, 'success');\r\n-\r\n-        // Fecha o modal e atualiza a aplicação\r\n-        addBillModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-\r\n-        // Limpa os dados da pré-visualização\r\n-        csvPreviewArea.classList.add('hidden');\r\n-        csvFileInput.value = '';\r\n-        parsedCsvData = [];\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a visibilidade e a contagem do botão de pagamento em massa.\r\n- */\r\n-function updateMassPaymentButton() {\r\n-    const count = selectedItems.size;\r\n-    selectedCountSpan.textContent = count;\r\n-    massActionsContainer.classList.toggle('hidden', count === 0);\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Pagar Selecionados\".\r\n- */\r\n-async function handleMarkSelectedAsPaid() {\r\n-    if (selectedItems.size === 0) {\r\n-        return showToast('Nenhuma parcela selecionada.', 'info');\r\n-    }\r\n-\r\n-    if (!confirm(`Tem a certeza que deseja marcar ${selectedItems.size} parcela(s) como paga(s)?`)) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const parcelIds = Array.from(selectedItems.keys());\r\n-\r\n-        // Chama a função da API com o array de IDs correto.\r\n-        const response = await api.markParcelsAsPaid(parcelIds);\r\n-\r\n-        showToast(response.message, 'success');\r\n-\r\n-        // Limpa a seleção e atualiza a interface\r\n-        selectedItems.clear();\r\n-        updateMassPaymentButton();\r\n-        await updateBillsOrganizer(); // Recarrega o calendário\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Seleciona todos os checkboxes de boletos visíveis no calendário.\r\n- */\r\n-function handleSelectAllVisible() {\r\n-    // Pega todos os checkboxes que estão atualmente no calendário\r\n-    document.querySelectorAll('.mass-payment-checkbox').forEach(checkbox => {\r\n-        // Marca apenas os que ainda não estão marcados\r\n-        if (!checkbox.checked) {\r\n-            checkbox.checked = true;\r\n-\r\n-            // --- LÓGICA CORRIGIDA ---\r\n-            const parcelId = checkbox.dataset.parcelId;\r\n-            // Pega o boletoId do elemento pai mais próximo\r\n-            const boletoId = checkbox.closest('.bill-card-draggable').dataset.boletoId;\r\n-\r\n-            // Garante que temos os dois IDs antes de adicionar ao mapa\r\n-            if (parcelId && boletoId) {\r\n-                // Usa o método .set(key, value), que é o correto para um Map\r\n-                selectedItems.set(parcelId, boletoId);\r\n-            }\r\n-        }\r\n-    });\r\n-    // Atualiza o botão para refletir a nova contagem\r\n-    updateMassPaymentButton();\r\n-}\r\n-\r\n-/**\r\n- * Desmarca todos os checkboxes de boletos selecionados.\r\n- */\r\n-function handleDeselectAll() {\r\n-    // Limpa o nosso Set de seleção\r\n-    selectedItems.clear();\r\n-    // Desmarca todos os checkboxes que estão no calendário\r\n-    document.querySelectorAll('.mass-payment-checkbox:checked').forEach(checkbox => {\r\n-        checkbox.checked = false;\r\n-    });\r\n-    // Atualiza o botão (que será escondido, pois a contagem é 0)\r\n-    updateMassPaymentButton();\r\n-}\r\n-\r\n-/**\r\n- * Busca os dados do utilizador e abre o modal de perfil.\r\n- */\r\n-async function openProfileModal() {\r\n-    // Usa as variáveis globais que já temos da inicialização\r\n-    if (!currentLoggedInUser || !currentLoggedInCompany) {\r\n-        showToast('Não foi possível carregar os dados do perfil.', 'error');\r\n-        return;\r\n-    }\r\n-\r\n-    // Preenche o modal com os dados\r\n-    profileUsername.textContent = currentLoggedInUser.username;\r\n-    profileRole.textContent = currentLoggedInUser.role;\r\n-    profileCompany.textContent = currentLoggedInCompany.nomeEmpresa;\r\n-\r\n-    // Mostra o modal\r\n-    profileModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Busca o anúncio ativo mais recente e o exibe no banner.\r\n- */\r\n-async function fetchAndDisplayAnnouncement() {\r\n-    try {\r\n-        const announcement = await api.getActiveAnnouncement();\r\n-\r\n-        // Se existir um anúncio e ele tiver uma mensagem\r\n-        if (announcement && announcement.message) {\r\n-            let messageHtml = announcement.message;\r\n-            // Se o anúncio tiver um link, transforma a mensagem num link clicável\r\n-            if (announcement.link) {\r\n-                messageHtml = `<a href=\"${announcement.link}\" target=\"_blank\" class=\"hover:underline\">${announcement.message} <i class=\"fas fa-external-link-alt fa-xs ml-1\"></i></a>`;\r\n-            }\r\n-            announcementMessage.innerHTML = messageHtml;\r\n-            globalAnnouncementBanner.classList.remove('hidden');\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(\"Não foi possível buscar o anúncio:\", error);\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-// =================================================================================\r\n-\r\n-async function handleForgotPasswordRequest(e) {\r\n-    e.preventDefault();\r\n-    const email = document.getElementById('recoveryEmailInput').value;\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.requestPasswordReset(email);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n-        forgotPasswordModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList(); // Se tiver essa função\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // CORREÇÃO: Capturamos a nova lista 'masterUsers' da API\r\n-                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-                // CORREÇÃO: Passamos a lista para a função do modal\r\n-                openCompanyDetailsModal(company, users, masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // CORREÇÃO: Capturamos a nova lista 'masterUsers'\r\n-                const { users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-\r\n-                // CORREÇÃO: Verificamos se existem usuários na lista do banco Mestre\r\n-                if (!masterUsers || masterUsers.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários (no registro mestre) para representar.', 'info');\r\n-                }\r\n-\r\n-                // CORREÇÃO: Usamos o ID do primeiro usuário da lista do banco Mestre\r\n-                const userIdToImpersonate = masterUsers[0]._id; \r\n-\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                // O resto da lógica continua igual...\r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-async function handleCalculateInstallments(e) {\r\n-    e.preventDefault(); // Impede a submissão padrão do formulário\r\n-\r\n-    const activeTabButton = document.querySelector('#addBillModal .flex button.bg-indigo-600');\r\n-    if (!activeTabButton) {\r\n-        return showToast('Erro: Não foi possível identificar a aba ativa.', 'error');\r\n-    }\r\n-    const activeModeId = activeTabButton.id;\r\n-\r\n-    currentBill = null;\r\n-\r\n-    if (activeModeId === 'manual-add-btn') {\r\n-        const billName = document.getElementById('billName').value;\r\n-        const dueDate = document.getElementById('dueDate').value;\r\n-        const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(',', '.'));\r\n-        const installments = parseInt(document.getElementById('installments').value);\r\n-        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-        const description = document.getElementById('description').value;\r\n-\r\n-        // Validação feita aqui no JavaScript\r\n-        if (!billName || !dueDate || !installments || isNaN(totalAmount) || totalAmount <= 0 || installments <= 0) {\r\n-            return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n-        }\r\n-\r\n-        currentBill = { name: billName, description, parcels: [], category: null };\r\n-        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-\r\n-        for (let i = 0; i < installments; i++) {\r\n-            const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-            parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-            currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n-        }\r\n-\r\n-    } else if (activeModeId === 'recurrent-add-btn') {\r\n-        const billName = document.getElementById('recurrentBillName').value;\r\n-        const startDate = document.getElementById('recurrentStartDate').value;\r\n-        const amount = parseFloat(document.getElementById('recurrentAmount').value);\r\n-        const months = parseInt(document.getElementById('recurrentInstallments').value);\r\n-        const description = document.getElementById('recurrentDescription').value;\r\n-\r\n-        // Validação feita aqui no JavaScript\r\n-        if (!billName || !startDate || !months || isNaN(amount) || amount <= 0 || months <= 0) {\r\n-            return showToast(\"Preencha todos os campos do pagamento recorrente.\", \"error\");\r\n-        }\r\n-\r\n-        currentBill = { name: billName, description, parcels: [], category: null };\r\n-\r\n-        for (let i = 0; i < months; i++) {\r\n-            const parcelDate = new Date(startDate + 'T00:00:00');\r\n-            parcelDate.setMonth(parcelDate.getMonth() + i);\r\n-            currentBill.parcels.push({ number: i + 1, amount: amount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n-        }\r\n-    }\r\n-\r\n-    // Este bloco só será executado se `currentBill` tiver sido preenchido com sucesso\r\n-    if (currentBill && currentBill.parcels.length > 0) {\r\n-        installmentsList.innerHTML = '';\r\n-        currentBill.parcels.forEach((parcel, index) => {\r\n-             installmentsList.insertAdjacentHTML('beforeend', `\r\n-                <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                    <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                    <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                    <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                    <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                </div>\r\n-            `);\r\n-        });\r\n-\r\n-        addEventListenersToInstallmentInputs();\r\n-        updatePreviewTotal();\r\n-        previewBillNameInput.value = currentBill.name;\r\n-        previewNfeNumber.textContent = 'N/A';\r\n-        addBillModal.classList.add('hidden');\r\n-        await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n-        installmentsPreviewModal.classList.remove('hidden');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n- */\r\n-function updatePreviewTotal() {\r\n-    if (!currentBill.parcels) return;\r\n-    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    currentBill.category = document.getElementById('previewBillCategorySelect').value || null;\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill); // O objeto currentBill agora tem a categoria correta\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-        clearBillForm();\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-\r\n-    // Guarda os dados atualizados do formulário\r\n-    const updatedParcelData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    const updatedBillData = {\r\n-        category: modalBillCategorySelect.value || null\r\n-    };\r\n-\r\n-    // Encontra o boleto pai na nossa lista local\r\n-    const parentBoleto = userBoletos.find(b => b._id === selectedParcel.parentId);\r\n-\r\n-    // Verifica se a parcela é recorrente (se o boleto pai tem mais de 1 parcela)\r\n-    if (parentBoleto && parentBoleto.parcels.length > 1) {\r\n-        // Se for recorrente, guarda os dados e abre o modal de escolha\r\n-        pendingUpdateData = { updatedParcelData, updatedBillData };\r\n-\r\n-        // Atualiza a data no texto do botão para dar mais contexto ao utilizador\r\n-        const date = new Date(updatedParcelData.dueDate + 'T00:00:00');\r\n-        singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n-\r\n-        recurrentEditModal.classList.remove('hidden');\r\n-    } else {\r\n-        // Se não for recorrente, salva diretamente como antes\r\n-        showLoader();\r\n-        try {\r\n-            await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n-            await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n-            showToast('Alterações salvas com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            await updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- * Verifica a sessão e o estado da assinatura.\r\n- */\r\n-async function initializeApp() {\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n-    const action = urlParams.get('action');\r\n-\r\n-    if (action === 'forgot_password') {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    const token = localStorage.getItem('authToken');\r\n-\r\n-    if (!token) {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        showAdminLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-function logout() {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-\r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        // CORREÇÃO: Buscamos os detalhes da empresa, que agora incluem 'users' (do tenant)\r\n-        // e 'masterUsers' (do banco mestre).\r\n-        const { users, masterUsers } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n-\r\n-        companyUsersList.innerHTML = ''; \r\n-\r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        // Usamos a lista de 'masterUsers' para construir o modal, pois ela tem os IDs corretos.\r\n-        if (masterUsers && masterUsers.length > 0) {\r\n-            masterUsers.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-\r\n-                const roleOptions = assignableRoles.map(role =>\r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                const roleHtml = isOwner\r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    // CORREÇÃO: O data-user-id agora usa o ID do masterUser\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-\r\n-        // Adiciona evento de clique para remover (precisará de ajuste futuro se necessário)\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            // ...\r\n-        });\r\n-\r\n-        // Adiciona evento para alterar o cargo (agora com o ID correto)\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n-                const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n-\r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    // Lógica para reverter a seleção visual\r\n-                    const originalUser = (await api.getCompanyDetails(companyId)).masterUsers.find(u => u._id === userId);\r\n-                    if(originalUser) e.target.value = originalUser.role;\r\n-                    return;\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    // A chamada à API agora envia o ID correto\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n- * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n- * @param {Event} event - O evento 'change' do input do ficheiro.\r\n- */\r\n-async function handleNfeXmlUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) {\r\n-        return;\r\n-    }\r\n-\r\n-    const reader = new FileReader();\r\n-\r\n-    reader.onload = async (e) => {\r\n-        try {\r\n-            const xmlString = e.target.result;\r\n-            const parser = new DOMParser();\r\n-            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-\r\n-            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n-                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n-            }\r\n-\r\n-            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n-            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n-            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-\r\n-            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n-            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n-            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n-\r\n-            let parcelsData = [];\r\n-\r\n-            if (duplicatas.length > 0) {\r\n-                parcelsData = duplicatas.map((dup, i) => ({\r\n-                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n-                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n-                    dueDate: getTagValue(\"dVenc\", dup)\r\n-                }));\r\n-            } else {\r\n-                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n-                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n-\r\n-                if (cobrancaMatch && cobrancaMatch[1]) {\r\n-                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n-                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n-                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n-                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n-\r\n-                    parcelsData = dias.map((dia, i) => {\r\n-                        const vencimento = new Date(dataEmissao);\r\n-                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n-                        return {\r\n-                            number: i + 1,\r\n-                            amount: parcelAmount,\r\n-                            dueDate: vencimento.toISOString().split('T')[0]\r\n-                        };\r\n-                    });\r\n-                }\r\n-            }\r\n-\r\n-            if (parcelsData.length > 0) {\r\n-                // ALTERAÇÃO AQUI: Removemos o prefixo \"NFe - \" do nome.\r\n-                currentBill = { name: nomeFornecedor, nfeNumber: nfeNumber, parcels: parcelsData };\r\n-\r\n-                installmentsList.innerHTML = '';\r\n-                currentBill.parcels.forEach((parcel, index) => {\r\n-                    installmentsList.insertAdjacentHTML('beforeend', `\r\n-                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                        </div>\r\n-                    `);\r\n-                });\r\n-\r\n-                addEventListenersToInstallmentInputs();\r\n-                updatePreviewTotal();\r\n-                previewBillNameInput.value = currentBill.name;\r\n-                previewNfeNumber.textContent = nfeNumber;\r\n-                await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n-                installmentsPreviewModal.classList.remove('hidden');\r\n-\r\n-            } else {\r\n-                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n-                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n-\r\n-                // ALTERAÇÃO AQUI TAMBÉM: Removemos o prefixo no caso de fallback.\r\n-                document.getElementById('billName').value = nomeFornecedor;\r\n-                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n-                if (vencimento) {\r\n-                    document.getElementById('dueDate').value = vencimento;\r\n-                }\r\n-\r\n-                addBillModal.classList.remove('hidden');\r\n-            }\r\n-\r\n-            showToast('Dados do XML carregados com sucesso!', 'success');\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            console.error(\"Erro ao processar XML:\", error);\r\n-        } finally {\r\n-            event.target.value = '';\r\n-        }\r\n-    };\r\n-\r\n-    reader.onerror = () => {\r\n-        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n-    };\r\n-\r\n-    reader.readAsText(file);\r\n-}\r\n-\r\n-/**\r\n- * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n- */\r\n-function addEventListenersToInstallmentInputs() {\r\n-    // Listener para o campo de VALOR\r\n-    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n-            }\r\n-            updatePreviewTotal();\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de DATA\r\n-    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-        input.addEventListener('change', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    /**\r\n-     * Mostra a tela de login de administrador.\r\n-     */\r\n-    function showAdminLogin() {\r\n-        hideAllScreens(); // Função de utils.js\r\n-        if (adminLoginForm) adminLoginForm.reset();\r\n-        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    // Listener para o campo de CÓDIGO DE BARRAS\r\n-    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n-        // Evento para guardar o valor quando é digitado\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].barcode = e.target.value;\r\n-            }\r\n-        });\r\n-\r\n-        input.addEventListener('keydown', (e) => {\r\n-            if (e.key === 'Enter') {\r\n-                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n-\r\n-                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n-                const nextIndex = currentIndex + 1;\r\n-                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n-\r\n-                if (nextInput) {\r\n-                    // Se houver um próximo campo de código de barras, foca nele.\r\n-                    nextInput.focus();\r\n-                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n-                } else {\r\n-                    // Se for o último campo, foca no botão de salvar.\r\n-                    document.getElementById('addToOrganizer').focus();\r\n-                }\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n- */\r\n-function handleShowFullScreenBarcode() {\r\n-    const barcodeValue = modalBillBarcodeInput.value;\r\n-    if (!barcodeValue) {\r\n-        return showToast('Não há código de barras para mostrar.', 'info');\r\n-    }\r\n-\r\n-    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n-    if (!barcodeImageContainer) return;\r\n-\r\n-    // Limpa qualquer código de barras anterior\r\n-    barcodeImageContainer.innerHTML = '';\r\n-\r\n-    try {\r\n-        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n-        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n-\r\n-        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n-        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n-            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n-            lineColor: \"#000000\",\r\n-            width: 2,\r\n-            height: 100,\r\n-            displayValue: true, // Mostra os números abaixo das barras\r\n-            fontSize: 18\r\n-        });\r\n-\r\n-        // Mostra o modal de ecrã inteiro\r\n-        barcodeFullScreenModal.classList.remove('hidden');\r\n-\r\n-    } catch (e) {\r\n-        console.error(\"Erro ao gerar código de barras:\", e);\r\n-        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n-    }\r\n-}\r\n-\r\n-async function handleAttachmentUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file || !selectedParcel) return;\r\n-\r\n-    // Cria um objeto FormData para enviar o ficheiro\r\n-    const formData = new FormData();\r\n-    formData.append('comprovante', file);\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Atualiza a UI para mostrar o link do novo anexo\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n-\r\n-        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para remover um anexo de comprovativo.\r\n- * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n- */\r\n-async function handleRemoveAttachment() {\r\n-    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n-    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader(); // Mostra o ícone de carregamento\r\n-    try {\r\n-        // Chama a nossa função da API para apagar o anexo\r\n-        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n-\r\n-        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-\r\n-        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-\r\n-        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n-        await updateBillsOrganizer();\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n- */\r\n-function applyFiltersAndSearch() {\r\n-    const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n-    const selectedCategoryId = categoryFilterSelect.value;\r\n-\r\n-    let filteredBoletos = userBoletos.filter(bill => {\r\n-        // Filtro de pesquisa\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n-            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        if (!matchesSearch) return false;\r\n-\r\n-        // Filtro de categoria\r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-        if (!matchesCategory) return false;\r\n-\r\n-        // Filtro de status\r\n-        if (activeStatusFilter === 'all') return true;\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        return bill.parcels.some(parcel => {\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n-            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n-            return false;\r\n-        });\r\n-    });\r\n-\r\n-    renderCalendar(filteredBoletos);\r\n-    updateMonthlySummary(filteredBoletos);\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n- * agora com lógica para parcelas recorrentes.\r\n- */\r\n-function initializeDragAndDrop() {\r\n-    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n-\r\n-    dayCells.forEach(cell => {\r\n-        new Sortable(cell, {\r\n-            group: 'calendar-bills',\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-\r\n-            onEnd: async function (evt) {\r\n-                const item = evt.item;\r\n-                const toCell = evt.to;\r\n-                const boletoId = item.dataset.boletoId;\r\n-                const parcelId = item.dataset.parcelId;\r\n-                const newDate = toCell.dataset.date;\r\n-\r\n-                if (!boletoId || !parcelId || !newDate) return;\r\n-\r\n-                const parentBoleto = userBoletos.find(b => b._id === boletoId);\r\n-                const originalParcel = parentBoleto?.parcels.find(p => p._id === parcelId);\r\n-\r\n-                if (!parentBoleto || !originalParcel) return;\r\n-\r\n-                if (parentBoleto.parcels.length > 1) {\r\n-                    // --- CORREÇÃO AQUI ---\r\n-                    // 1. Definimos a variável 'selectedParcel' que estava em falta.\r\n-                    selectedParcel = { ...originalParcel, parentId: parentBoleto._id };\r\n-\r\n-                    // 2. O resto da lógica continua a mesma\r\n-                    const updatedParcelData = {\r\n-                        ...originalParcel,\r\n-                        dueDate: newDate,\r\n-                    };\r\n-\r\n-                    pendingUpdateData = { \r\n-                        updatedParcelData, \r\n-                        updatedBillData: { category: parentBoleto.category?._id || null }\r\n-                    };\r\n-\r\n-                    const date = new Date(newDate + 'T00:00:00');\r\n-                    singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n-\r\n-                    recurrentEditModal.classList.remove('hidden');\r\n-                    renderCalendar();\r\n-\r\n-                } else {\r\n-                    // Lógica para parcela única (continua a mesma)\r\n-                    showLoader();\r\n-                    try {\r\n-                        await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n-                        showToast('Data da parcela atualizada com sucesso!', 'success');\r\n-                        await updateBillsOrganizer();\r\n-                    } catch (error) {\r\n-                        showToast(error.message, 'error');\r\n-                        await updateBillsOrganizer();\r\n-                    } finally {\r\n-                        hideLoader();\r\n-                    }\r\n-                }\r\n-            },\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Calcula o startDate e endDate com base numa predefinição do seletor.\r\n- * @returns {{startDate?: string, endDate?: string}} - As datas ou um objeto vazio.\r\n- */\r\n-function getDateRangeFromPreset() {\r\n-    const preset = dateRangePresetSelect.value;\r\n-    const now = new Date();\r\n-    let startDate, endDate;\r\n-\r\n-    switch (preset) {\r\n-        case 'thisMonth':\r\n-            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n-            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n-            break;\r\n-        case 'lastMonth':\r\n-            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n-            endDate = new Date(now.getFullYear(), now.getMonth(), 0);\r\n-            break;\r\n-        case 'thisQuarter':\r\n-            const quarter = Math.floor(now.getMonth() / 3);\r\n-            startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n-            endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n-            break;\r\n-        case 'thisYear':\r\n-            startDate = new Date(now.getFullYear(), 0, 1);\r\n-            endDate = new Date(now.getFullYear(), 11, 31);\r\n-            break;\r\n-        case 'custom':\r\n-            if (startDateInput.value && endDateInput.value) {\r\n-                return {\r\n-                    startDate: startDateInput.value,\r\n-                    endDate: endDateInput.value\r\n-                };\r\n-            }\r\n-            return {}; // Retorna vazio se o intervalo personalizado não estiver completo\r\n-        default:\r\n-            return {}; // Padrão sem filtro\r\n-    }\r\n-\r\n-    // Formata as datas para o formato YYYY-MM-DD\r\n-    return {\r\n-        startDate: startDate.toISOString().split('T')[0],\r\n-        endDate: endDate.toISOString().split('T')[0]\r\n-    };\r\n-}\r\n-\r\n-/**\r\n- * Renderiza a lista de próximos vencimentos no dashboard.\r\n- * @param {Array} payments - A lista de pagamentos vinda da API.\r\n- */\r\n-function renderUpcomingPayments(payments) {\r\n-    if (!upcomingPaymentsList || !noUpcomingPaymentsMessage) return;\r\n-\r\n-    upcomingPaymentsList.innerHTML = ''; // Limpa a lista\r\n-\r\n-    if (payments.length === 0) {\r\n-        upcomingPaymentsList.appendChild(noUpcomingPaymentsMessage);\r\n-        noUpcomingPaymentsMessage.classList.remove('hidden');\r\n-    } else {\r\n-        noUpcomingPaymentsMessage.classList.add('hidden');\r\n-        const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-        payments.forEach(payment => {\r\n-            const dueDate = new Date(payment.dueDate + 'T00:00:00');\r\n-            const formattedDate = dueDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\r\n-\r\n-            const paymentHtml = `\r\n-                <div class=\"flex items-center justify-between bg-gray-700/50 p-3 rounded-md\">\r\n-                    <div>\r\n-                        <p class=\"font-medium text-white\">${payment.billName} (${payment.parcelNumber}ª)</p>\r\n-                        <p class=\"text-sm text-gray-400\">Vence em: ${formattedDate}</p>\r\n-                    </div>\r\n-                    <p class=\"font-semibold text-lg text-yellow-400\">${formatCurrency(payment.amount)}</p>\r\n-                </div>\r\n-            `;\r\n-            upcomingPaymentsList.insertAdjacentHTML('beforeend', paymentHtml);\r\n-        });\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de barras horizontais com as 5 maiores despesas por categoria.\r\n- * @param {Array} data - Os dados de despesas vindos da API.\r\n- */\r\n-function renderTopExpensesChart(data) {\r\n-    const canvas = document.getElementById('topExpensesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    // Destrói o gráfico anterior, se existir, para evitar sobreposições\r\n-    if (topExpensesChart) {\r\n-        topExpensesChart.destroy();\r\n-    }\r\n-    \r\n-    // 1. Ordena os dados do maior para o menor\r\n-    const sortedData = [...data].sort((a, b) => b.totalAmount - a.totalAmount);\r\n-    \r\n-    // 2. Pega apenas nos 5 primeiros resultados\r\n-    const top5Data = sortedData.slice(0, 5);\r\n-\r\n-    // 3. Prepara os dados para o Chart.js\r\n-    const labels = top5Data.map(item => item.categoryName);\r\n-    const values = top5Data.map(item => item.totalAmount);\r\n-\r\n-    topExpensesChart = new Chart(ctx, {\r\n-        type: 'bar', // Tipo de gráfico\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Total Gasto',\r\n-                data: values,\r\n-                backgroundColor: 'rgba(239, 68, 68, 0.6)', // Vermelho\r\n-                borderColor: 'rgba(239, 68, 68, 1)',\r\n-                borderWidth: 1\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            indexAxis: 'y', // <-- Isto é o que torna o gráfico horizontal!\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                x: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n-                y: { ticks: { color: '#d1d5db' }, grid: { display: false } }\r\n-            },\r\n-            plugins: {\r\n-                legend: { display: false },\r\n-                tooltip: {\r\n-                    callbacks: {\r\n-                        label: function(context) {\r\n-                            return ` Total: ${context.raw.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-                        }\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de alteração de senha.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleChangePassword(e) {\r\n-    e.preventDefault(); // Impede o recarregamento da página\r\n-\r\n-    const currentPassword = document.getElementById('currentPassword').value;\r\n-    const newPassword = document.getElementById('newPassword').value;\r\n-    const confirmPassword = document.getElementById('confirmPassword').value;\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.changePassword({ currentPassword, newPassword, confirmPassword });\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Limpa os campos e fecha o modal após o sucesso\r\n-        changePasswordForm.reset();\r\n-        profileModal.classList.add('hidden');\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', async () => {\r\n-// --- Lógica de inicialização que estava em initializeApp() ---\r\n-const today = new Date();\r\n-currentMonth = today.getMonth();\r\n-currentYear = today.getFullYear();\r\n-\r\n-const token = localStorage.getItem('authToken');\r\n-if (!token) {\r\n-    // Se não houver token, redireciona para a página de login\r\n-    window.location.href = 'Index.html';\r\n-    return;\r\n-}\r\n-\r\n-try {\r\n-    const data = await api.checkSession();\r\n-    if (data.user.role === 'SuperAdmin') {\r\n-        isAdminLoggedIn = true;\r\n-        await showAdminDashboard();\r\n-    } else {\r\n-        currentLoggedInUser = data.user;\r\n-        currentLoggedInCompany = data.company;\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            await showMainApp();\r\n-        } else {\r\n-            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                // Se for o dono da empresa, mostra o modal para renovar\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    }\r\n-} catch (error) {\r\n-    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n-    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n-    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    setTimeout(() => {\r\n-        window.location.href = 'Index.html';\r\n-    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n-} finally {\r\n-    // Esconde a tela de carregamento inicial\r\n-    document.getElementById('loadingScreen').classList.add('hidden');\r\n-}\r\n-\r\n-\r\n-// Submissão de formulários\r\n-if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-if (logoutBtn) {\r\n-    logoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-\r\n-\r\n-// Ações na App Principal\r\n-addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-// Ações do Modal de Edição de Boleto\r\n-closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-// Navegação do Calendário\r\n-prevMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-    if (currentMonth === 11) currentYear--;\r\n-    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-\r\n-nextMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-    if (currentMonth === 0) currentYear++;\r\n-    // A mesma mudança aqui\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-}\r\n-\r\n-if (openAddBillModalBtn) {\r\n-    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-}\r\n-\r\n-const handleRedirectToHome = () => {\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-const handleFullLogoutAndRedirect = () => {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-if (subscriptionLogoutBtn) {\r\n-    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-}\r\n-\r\n-if (blockedAccessLogoutBtn) {\r\n-    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-\r\n-// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-if (settingsBtn) {\r\n-    settingsBtn.addEventListener('click', (e) => {\r\n-        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-        settingsDropdown.classList.toggle('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Links dentro do menu dropdown\r\n-if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCompanyInfoModal();\r\n-});\r\n-\r\n-if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openPermissionsModal();\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n-\r\n-// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openManageUsersModal();\r\n-});\r\n-\r\n-// Botões do modal de gerir utilizadores\r\n-if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-    manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-    openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-});\r\n-\r\n-/**\r\n- * Lida com o clique no botão de criar/renovar assinatura.\r\n- */\r\n-async function handleCreateSubscription() {\r\n-    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-    subscriptionActionBtn.disabled = true;\r\n-    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-    try {\r\n-        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-        const data = await api.createSubscriptionLink();\r\n-\r\n-        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-        if (data.init_point) {\r\n-            window.location.href = data.init_point;\r\n-        } else {\r\n-            throw new Error('Link de pagamento não recebido.');\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-        subscriptionActionBtn.disabled = false;\r\n-        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-    }\r\n-}\r\n-\r\n-// Liga a função ao clique do botão.\r\n-if (subscriptionActionBtn) {\r\n-    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-}\r\n-\r\n-if (closePreviewModalBtn) {\r\n-    closePreviewModalBtn.addEventListener('click', () => {\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-if (nfeXmlInput) {\r\n-    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-}\r\n-\r\n-if (previewBillNameInput) {\r\n-    previewBillNameInput.addEventListener('input', (e) => {\r\n-        if (currentBill) {\r\n-            currentBill.name = e.target.value;\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Liga a função ao clique do botão\r\n-if (showFullScreenBarcodeBtn) {\r\n-    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-}\r\n-\r\n-// Listener para o campo de pesquisa\r\n-if (searchInput) {\r\n-    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Listeners para os botões de filtro\r\n-if (filterButtons) {\r\n-    filterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões\r\n-            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona a classe 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Aplica o filtro\r\n-            applyFiltersAndSearch();\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCategoriesModal();\r\n-});\r\n-\r\n-if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-if (addCategoryForm) {\r\n-    addCategoryForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const name = newCategoryNameInput.value.trim();\r\n-        if (!name) return;\r\n-        try {\r\n-            await api.createCategory(name);\r\n-            newCategoryNameInput.value = '';\r\n-            await openCategoriesModal(); // Recarrega a lista do modal\r\n-            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-if (categoryListDiv) {\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-if (categoryFilterSelect) {\r\n-    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Configuração dos botões do dashboard\r\n-if (viewCalendarBtn) {\r\n-    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-}\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-if (dateRangePresetSelect) {\r\n-    dateRangePresetSelect.addEventListener('change', () => {\r\n-        const isCustom = dateRangePresetSelect.value === 'custom';\r\n-        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n-\r\n-        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n-        // o dashboard é atualizado imediatamente.\r\n-        if (!isCustom) {\r\n-            renderDashboard();\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Para o intervalo personalizado, atualizamos o dashboard\r\n-// assim que ambas as datas estiverem preenchidas.\r\n-if (startDateInput) {\r\n-    startDateInput.addEventListener('change', () => {\r\n-        if (endDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-if (endDateInput) {\r\n-    endDateInput.addEventListener('change', () => {\r\n-        if (startDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-// Listeners para os botões de exportação\r\n-const handleExport = (format) => {\r\n-    // 1. Pega no período de tempo atual do filtro do dashboard\r\n-    const dateRange = getDateRangeFromPreset();\r\n-\r\n-    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n-    const queryString = new URLSearchParams(dateRange).toString();\r\n-\r\n-    // 3. Monta o URL completo para o download\r\n-    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n-    \r\n-    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n-    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n-    fetch(downloadUrl, {\r\n-        headers: {\r\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n-        }\r\n-    })\r\n-    .then(res => res.blob())\r\n-    .then(blob => {\r\n-        const url = window.URL.createObjectURL(blob);\r\n-        const a = document.createElement('a');\r\n-        a.style.display = 'none';\r\n-        a.href = url;\r\n-        a.download = `relatorio-despesas.${format}`;\r\n-        document.body.appendChild(a);\r\n-        a.click();\r\n-        window.URL.revokeObjectURL(url);\r\n-        a.remove();\r\n-    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n-};\r\n-\r\n-if (exportCsvBtn) {\r\n-    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n-}\r\n-if (exportPdfBtn) {\r\n-    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n-}\r\n-\r\n-if (manualAddBtn) {\r\n-    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-}\r\n-if (xmlAddBtn) {\r\n-    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-}\r\n-\r\n-if (csvImportBtn) {\r\n-    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n-}\r\n-if (csvFileInput) {\r\n-    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n-}\r\n-if (importCsvBtn) {\r\n-    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n-}\r\n-if (markSelectedAsPaidBtn) {\r\n-    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n-}\r\n-if (selectAllVisibleBtn) {\r\n-    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n-}\r\n-\r\n-if (deselectAllVisibleBtn) {\r\n-    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n-}\r\n-if (dashboardFilterButtons) {\r\n-    dashboardFilterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões do dashboard\r\n-            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Atualiza a variável de estado com o novo filtro\r\n-            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n-            // Renderiza o dashboard novamente com os dados filtrados\r\n-            renderDashboard();\r\n-        });\r\n-    });\r\n-}\r\n-// Abre o modal de alteração de categoria\r\n-if (changeCategoryBtn) {\r\n-    changeCategoryBtn.addEventListener('click', async () => {\r\n-        showLoader();\r\n-        // Popula o dropdown do modal com as categorias existentes\r\n-        await populateCategorySelect(batchCategorySelect);\r\n-        hideLoader();\r\n-        categoryBatchModal.classList.remove('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de cancelar no modal\r\n-if (cancelCategoryBatchBtn) {\r\n-    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n-        categoryBatchModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de confirmar a alteração\r\n-if (confirmCategoryBatchBtn) {\r\n-    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n-        const categoryId = batchCategorySelect.value;\r\n-        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n-        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n-\r\n-        if (boletoIds.length === 0) {\r\n-            return showToast('Nenhum item selecionado.', 'info');\r\n-        }\r\n-\r\n-        showLoader();\r\n-        try {\r\n-            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n-            showToast(response.message, 'success');\r\n-            selectedItems.clear();\r\n-            updateMassPaymentButton();\r\n-            await updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-            categoryBatchModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-}\r\n-if (openProfileModalBtn) {\r\n-    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n-}\r\n-if (closeProfileModalBtn) {\r\n-    closeProfileModalBtn.addEventListener('click', () => {\r\n-        profileModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-if (changePasswordForm) {\r\n-    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n-}\r\n-if (resendVerificationBtn) {\r\n-    resendVerificationBtn.addEventListener('click', async () => {\r\n-        resendVerificationBtn.disabled = true;\r\n-        resendVerificationBtn.textContent = 'A reenviar...';\r\n-\r\n-        try {\r\n-            const data = await api.resendVerificationEmail();\r\n-            showToast(data.message, 'success');\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            resendVerificationBtn.disabled = false;\r\n-            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n-        }\r\n-    });\r\n-}\r\n-if (recurrentAddBtn) {\r\n-    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n-}\r\n-if (recurrentEditModal) {\r\n-    // Botões de escolha (Somente esta, futuras, todas)\r\n-    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const scope = e.currentTarget.dataset.scope;\r\n-            if (!pendingUpdateData || !selectedParcel) return;\r\n-\r\n-            recurrentEditModal.classList.add('hidden');\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a nova rota da API com o escopo escolhido\r\n-                await api.bulkUpdateParcels(\r\n-                    selectedParcel.parentId, \r\n-                    selectedParcel._id, \r\n-                    pendingUpdateData.updatedParcelData, \r\n-                    scope\r\n-                );\r\n-\r\n-                // Atualiza a categoria do boleto, se foi alterada\r\n-                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n-\r\n-                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n-                billModal.classList.add('hidden');\r\n-                await updateBillsOrganizer();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-                pendingUpdateData = null; // Limpa os dados pendentes\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Botão de cancelar\r\n-    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n-        recurrentEditModal.classList.add('hidden');\r\n-        pendingUpdateData = null; // Limpa os dados pendentes\r\n-    });\r\n-}\r\n-\r\n-// CHAME A NOVA FUNÇÃO AQUI\r\n-initializeDashboardDragAndDrop(); \r\n-\r\n-\r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import { API_BASE_URL } from './config.js';\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let expensesPieChart = null;\r\n-let expensesBarChart = null;\r\n-let topExpensesChart = null;\r\n-let parsedCsvData = [];\r\n-let selectedParcels = new Set();\r\n-let dashboardStatusFilter = 'all';\r\n-let selectedItems = new Map();\r\n-let pendingUpdateData = null;\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n-\r\n-const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n-const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n-const calendarView = document.getElementById('calendarView');\r\n-const dashboardView = document.getElementById('dashboardView');\r\n-const dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\n-const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n-const startDateInput = document.getElementById('start-date-input');\r\n-const endDateInput = document.getElementById('end-date-input');\r\n-const kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\n-const upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\n-const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n-const exportCsvBtn = document.getElementById('export-csv-btn');\r\n-const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n-const dashboardFilterButtons = document.querySelectorAll('.dashboard-filter-btn');\r\n-\r\n-const manualAddBtn = document.getElementById('manual-add-btn');\r\n-const xmlAddBtn = document.getElementById('xml-add-btn');\r\n-const manualAddForm = document.getElementById('manual-add-form');\r\n-const xmlAddForm = document.getElementById('xml-add-form');\r\n-\r\n-const csvImportBtn = document.getElementById('csv-import-btn');\r\n-const csvImportForm = document.getElementById('csv-import-form');\r\n-const csvFileInput = document.getElementById('csv-file-input');\r\n-const csvPreviewArea = document.getElementById('csv-preview-area');\r\n-const csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\n-const csvImportSummary = document.getElementById('csv-import-summary');\r\n-const importCsvBtn = document.getElementById('import-csv-btn');\r\n-\r\n-const markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\n-const selectedCountSpan = document.getElementById('selectedCount');\r\n-const massActionsContainer = document.getElementById('massActionsContainer');\r\n-const selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\n-const deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n-\r\n-const changeCategoryBtn = document.getElementById('changeCategoryBtn');\r\n-const categoryBatchModal = document.getElementById('categoryBatchModal');\r\n-const batchCategorySelect = document.getElementById('batchCategorySelect');\r\n-const cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\n-const confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n-\r\n-const openProfileModalBtn = document.getElementById('openProfileModalBtn');\r\n-const profileModal = document.getElementById('profileModal');\r\n-const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\n-const profileUsername = document.getElementById('profileUsername');\r\n-const profileRole = document.getElementById('profileRole');\r\n-const profileCompany = document.getElementById('profileCompany');\r\n-const changePasswordForm = document.getElementById('changePasswordForm');\r\n-const verificationNotice = document.getElementById('verificationNotice');\r\n-const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n-\r\n-const recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\n-const recurrentAddForm = document.getElementById('recurrent-add-form');\r\n-const recurrentEditModal = document.getElementById('recurrentEditModal');\r\n-const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n-const singleParcelDate = document.getElementById('single-parcel-date');\r\n-\r\n-const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n-const announcementMessage = document.getElementById('announcementMessage');\r\n-const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n- */\r\n-function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-\r\n-    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n-\r\n-    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n-    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n-\r\n-    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n-\r\n-    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    // Atualiza os elementos HTML com os valores corretos\r\n-    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n-    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n-    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com uma lista específica de boletos.\r\n- * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n- * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n- */\r\n-function renderCalendar(boletosToRender = userBoletos) {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-    const today = new Date(); // Variável para verificar boletos vencidos\r\n-    today.setHours(0, 0, 0, 0); // Zera a hora para uma comparação precisa do dia\r\n-\r\n-    // ETAPA 1: Otimização - Agrupa todas as parcelas por data de vencimento.\r\n-    const parcelsByDate = new Map();\r\n-    boletosToRender.forEach(bill => {\r\n-        bill.parcels.forEach(parcel => {\r\n-            const date = parcel.dueDate;\r\n-            if (!parcelsByDate.has(date)) {\r\n-                parcelsByDate.set(date, []);\r\n-            }\r\n-            // Adiciona uma referência ao boleto pai para cada parcela, para facilitar.\r\n-            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n-        });\r\n-    });\r\n-\r\n-    // ETAPA 2: Renderização do Calendário\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    // Cria as células vazias do início do mês\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    // Cria as células para cada dia do mês\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-\r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        // Adiciona evento de clique na célula para criar novos boletos\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card-draggable')) return;\r\n-            openAddBillModal(e.currentTarget.dataset.date);\r\n-        });\r\n-\r\n-        // Verifica se existem parcelas para este dia no mapa\r\n-        if (parcelsByDate.has(dateStr)) {\r\n-            // Se existirem, itera apenas sobre as parcelas daquele dia\r\n-            parcelsByDate.get(dateStr).forEach(parcel => {\r\n-                const bill = parcel.parentBill; // Pega a referência do boleto pai\r\n-                const parcelElement = document.createElement('div');\r\n-                \r\n-                // Lógica de Status, Cores e Ícones\r\n-                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                const isOverdue = !parcel.paid && dueDate < today;\r\n-                let statusClass = 'bg-indigo-700 text-indigo-100'; // Padrão: Pendente\r\n-                let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n-            \r\n-                if (parcel.paid) {\r\n-                    statusClass = 'bg-green-700 text-green-100'; // Pago\r\n-                    statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n-                } else if (isOverdue) {\r\n-                    statusClass = 'bg-red-700 text-red-100'; // Vencido\r\n-                    statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n-                }\r\n-            \r\n-                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n-                parcelElement.dataset.boletoId = bill._id;\r\n-                parcelElement.dataset.parcelId = parcel._id;\r\n-    \r\n-                // HTML do card com layout aprimorado\r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"flex items-start space-x-2\">\r\n-                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n-                        <div class=\"flex-1 min-w-0\">\r\n-                            <div class=\"flex justify-between items-center\">\r\n-                                <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n-                                    ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n-                                </span>\r\n-                                <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n-                                    ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n-                                </span>\r\n-                            </div>\r\n-                            \r\n-                            ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                            ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n-                        </div>\r\n-                    </div>\r\n-                `;\r\n-    \r\n-                // Adiciona evento de clique no card para abrir o modal\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                \r\n-                // Lógica para o checkbox\r\n-                const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n-                checkbox.addEventListener('change', (e) => {\r\n-                    const parcelId = e.target.dataset.parcelId;\r\n-                    const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n-                    if (e.target.checked) {\r\n-                        selectedItems.set(parcelId, boletoId);\r\n-                    } else {\r\n-                        selectedItems.delete(parcelId);\r\n-                    }\r\n-                    updateMassPaymentButton();\r\n-                });\r\n-                checkbox.addEventListener('click', (e) => {\r\n-                    e.stopPropagation(); // Impede o clique de abrir o modal\r\n-                });\r\n-                \r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        }\r\n-        \r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-\r\n-    initializeDragAndDrop();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-async function openBillModal(bill, parcel) {\r\n-    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-\r\n-    // Preenche todos os campos do modal com os dados da parcela clicada\r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-    // Mostra o botão de gerar código de barras apenas se houver um código\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-\r\n-    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n-    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n-    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n-    if (bill.nfeNumber) {\r\n-        nfeNumberEl.textContent = bill.nfeNumber;\r\n-        nfeContainer.classList.remove('hidden');\r\n-    } else {\r\n-        nfeContainer.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Lógica dinâmica para a secção de anexos\r\n-    const attachmentContainer = document.getElementById('attachment-container');\r\n-    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n-\r\n-    if (parcel.attachmentUrl) {\r\n-        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n-        attachmentContainer.innerHTML = `\r\n-            <div class=\"flex items-center justify-between\">\r\n-                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n-                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n-                </a>\r\n-                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n-            </div>\r\n-        `;\r\n-        // Adiciona o evento de clique ao novo botão de remover\r\n-        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n-    } else {\r\n-        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-        // Adiciona o evento de 'change' ao novo input de upload\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-    }\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-        categories.forEach(cat => {\r\n-            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n-        });\r\n-        if (bill.category) {\r\n-            modalBillCategorySelect.value = bill.category._id;\r\n-        } else {\r\n-            modalBillCategorySelect.value = \"\";\r\n-        }\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    if (billForm) {\r\n-        billForm.reset();\r\n-    }\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    }\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    mainAppContent.classList.remove('hidden');\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-     await populateCategoryFilter();\r\n-     await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n- * @param {string} tagName - O nome da tag a ser procurada.\r\n- * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n- * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n- */\r\n-function getTagValue(tagName, parentElement) {\r\n-    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n-    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n-    return element?.textContent || '';\r\n-}\r\n-\r\n-/**\r\n- * Adiciona os eventos de clique e mudança aos elementos dinâmicos do modal de detalhes da empresa.\r\n- * Esta é a função que estava em falta.\r\n- */\r\n-function addEventListenersToCompanyDetailsModal() {\r\n-    // Evento para os seletores de cargo (role)\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                // Recarrega os dados do modal para garantir consistência\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Evento para os botões de remover utilizador\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.currentTarget.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                // Recarrega os dados do modal\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n- */\r\n-function openCompanyDetailsModal(company, users, masterUsers) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (masterUsers && masterUsers.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        masterUsers.forEach(user => {\r\n-            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n-\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona os eventos DEPOIS de criar os botões\r\n-    addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n-    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n-\r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        // Passa os novos dados para a função da API\r\n-        const data = await api.registerUser(username, password, email, role, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        // A chamada à API já retorna os dados completos da empresa, incluindo 'isVerified'\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        // LÓGICA PARA MOSTRAR/ESCONDER O AVISO\r\n-        if (company.isVerified) {\r\n-            verificationNotice.classList.add('hidden');\r\n-        } else {\r\n-            verificationNotice.classList.remove('hidden');\r\n-        }\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-\r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function openCategoriesModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        renderCategoryList(categories);\r\n-        categoriesModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function renderCategoryList(categories) {\r\n-    categoryListDiv.innerHTML = '';\r\n-    if (categories.length === 0) {\r\n-        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n-        return;\r\n-    }\r\n-    categories.forEach(category => {\r\n-        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n-                <span class=\"text-white\">${category.name}</span>\r\n-                <div>\r\n-                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n-                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n-                </div>\r\n-            </div>\r\n-        `);\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo boleto,\r\n- * e opcionalmente pré-preenchendo a data.\r\n- * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n- */\r\n-async function openAddBillModal(preselectedDate = null) {\r\n-    clearBillForm();\r\n-    switchAddBillMode('manual');\r\n-    showLoader();\r\n-    try {\r\n-        // Se uma data foi passada como parâmetro (ou seja, o utilizador clicou no calendário)\r\n-        if (preselectedDate) {\r\n-            // Preenche o campo da aba \"Adicionar Manual\" (comportamento que já existia)\r\n-            document.getElementById('dueDate').value = preselectedDate;\r\n-\r\n-            // NOVA LINHA: Preenche também o campo da aba \"Pagamento Recorrente\"\r\n-            document.getElementById('recurrentStartDate').value = preselectedDate;\r\n-        }\r\n-\r\n-        addBillModal.classList.remove('hidden');\r\n-    } catch (error)\r\n- {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function populateCategoryFilter() {\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n-        // Se der erro, garante que a opção padrão exista\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Alterna a visualização entre o Calendário e o Dashboard.\r\n- */\r\n-function switchView(viewToShow) {\r\n-    // Esconde ambas as vistas\r\n-    calendarView.classList.add('hidden');\r\n-    dashboardView.classList.add('hidden');\r\n-\r\n-    // Reseta o estilo dos botões\r\n-    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n-    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n-    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-\r\n-    // Mostra a vista correta e ativa o botão correspondente\r\n-    if (viewToShow === 'calendar') {\r\n-        calendarView.classList.remove('hidden');\r\n-        viewCalendarBtn.classList.add('bg-indigo-600');\r\n-        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-    } else if (viewToShow === 'dashboard') {\r\n-        dashboardView.classList.remove('hidden');\r\n-        viewDashboardBtn.classList.add('bg-indigo-600');\r\n-        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderDashboard();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Atualiza os cartões de KPI no dashboard.\r\n- * @param {object} kpiData - Os dados dos KPIs vindos da API.\r\n- */\r\n-function updateKpiCards(kpiData) {\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n-\r\n-    // Popula os novos campos\r\n-    if (kpiContasVencidas) kpiContasVencidas.textContent = formatCurrency(kpiData.totalVencido);\r\n-    \r\n-    // Popula os campos existentes\r\n-    document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n-    document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n-    document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n-}\r\n-\r\n-/**\r\n- * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n- */\r\n-async function renderDashboard() {\r\n-    showLoader();\r\n-    try {\r\n-        const dateRange = getDateRangeFromPreset();\r\n-\r\n-        // ATUALIZADO: Passa o 'dashboardStatusFilter' para as chamadas da API\r\n-        const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n-            api.getExpensesByCategory(dateRange, dashboardStatusFilter),\r\n-            api.getMonthlySummary(dateRange, dashboardStatusFilter),\r\n-            api.getKpiSummary(dateRange),\r\n-            api.getUpcomingPayments()\r\n-        ]);\r\n-\r\n-        updateKpiCards(kpiData);\r\n-        renderPieChart(pieData);\r\n-        renderBarChart(barData);\r\n-        renderUpcomingPayments(upcomingData);\r\n-        renderTopExpensesChart(pieData);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de pizza de despesas por categoria.\r\n- */\r\n-function renderPieChart(data) {\r\n-    const canvas = document.getElementById('expensesByCategoryChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    if (expensesPieChart) {\r\n-        expensesPieChart.destroy();\r\n-    }\r\n-\r\n-    expensesPieChart = new Chart(ctx, {\r\n-        type: 'pie',\r\n-        data: {\r\n-            labels: data.map(item => item.categoryName),\r\n-            datasets: [{\r\n-                data: data.map(item => item.totalAmount),\r\n-                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n-                borderColor: '#1f2937',\r\n-                borderWidth: 2\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n- */\r\n-function renderBarChart(data) {\r\n-    const canvas = document.getElementById('monthlyExpensesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n-    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n-    const values = data.map(item => item.totalAmount);\r\n-\r\n-    if (expensesBarChart) {\r\n-        expensesBarChart.destroy();\r\n-    }\r\n-    \r\n-    expensesBarChart = new Chart(ctx, {\r\n-        type: 'bar',\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Total',\r\n-                data: values,\r\n-                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n-                borderColor: 'rgba(79, 70, 229, 1)',\r\n-                borderWidth: 1\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n-                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n-            },\r\n-            plugins: { legend: { display: false } }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Busca categorias da API e preenche um elemento <select> do HTML.\r\n- * @param {HTMLSelectElement} selectElement - O elemento dropdown a ser preenchido.\r\n- */\r\n-async function populateCategorySelect(selectElement) {\r\n-    if (!selectElement) return;\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        selectElement.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            const option = document.createElement('option');\r\n-            option.value = category._id;\r\n-            option.textContent = category.name;\r\n-            selectElement.appendChild(option);\r\n-        });\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n- * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n- */\r\n-function initializeDashboardDragAndDrop() {\r\n-    const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n-    const mainGrid = document.getElementById('dashboard-main-grid');\r\n-\r\n-    // Vamos guardar as instâncias do Sortable em variáveis\r\n-    let kpiSortable, mainSortable;\r\n-\r\n-    const saveOrder = (gridType) => {\r\n-        if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n-\r\n-        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n-        let order;\r\n-\r\n-        // Usamos a instância correta para obter a ordem\r\n-        if (gridType === 'kpi' && kpiSortable) {\r\n-            order = kpiSortable.toArray();\r\n-        } else if (gridType === 'main' && mainSortable) {\r\n-            order = mainSortable.toArray();\r\n-        }\r\n-\r\n-        if (order) {\r\n-            localStorage.setItem(key, JSON.stringify(order));\r\n-        }\r\n-    };\r\n-\r\n-    if (kpiGrid) {\r\n-        // Guardamos a instância na nossa variável\r\n-        kpiSortable = new Sortable(kpiGrid, {\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-            // A chamada agora é mais simples\r\n-            onEnd: () => saveOrder('kpi'),\r\n-        });\r\n-    }\r\n-\r\n-    if (mainGrid) {\r\n-        // Guardamos a instância na nossa variável\r\n-        mainSortable = new Sortable(mainGrid, {\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-            onEnd: () => saveOrder('main'),\r\n-        });\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Verifica o localStorage por uma ordem de cartões salva para o utilizador atual\r\n- * e, se encontrar, reordena os elementos no ecrã.\r\n- */\r\n-function applySavedDashboardOrder() {\r\n-    if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n-\r\n-    const applyOrder = (gridType) => {\r\n-        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n-        const savedOrder = localStorage.getItem(key);\r\n-        const grid = document.getElementById(`dashboard-${gridType}-grid`);\r\n-\r\n-        if (savedOrder && grid) {\r\n-            const order = JSON.parse(savedOrder);\r\n-            // Para cada id na ordem salva, encontramos o elemento correspondente\r\n-            // e o movemos para o final do container. Ao fazer isto em sequência,\r\n-            // a ordem final corresponde à ordem salva.\r\n-            order.forEach(dataId => {\r\n-                const card = grid.querySelector(`[data-id=\"${dataId}\"]`);\r\n-                if (card) {\r\n-                    grid.appendChild(card);\r\n-                }\r\n-            });\r\n-        }\r\n-    };\r\n-\r\n-    applyOrder('kpi');\r\n-    applyOrder('main');\r\n-}\r\n-\r\n-/**\r\n- * Captura a área do dashboard como uma imagem e gera um ficheiro PDF para download.\r\n- */\r\n-async function handleVisualExportPDF() {\r\n-    // Mostra o loader para dar feedback ao utilizador\r\n-    showLoader();\r\n-\r\n-    // Seleciona o elemento do DOM que queremos \"fotografar\"\r\n-    const dashboardElement = document.getElementById('dashboardView');\r\n-    \r\n-    // Esconde temporariamente os botões de filtro e exportação para não aparecerem no PDF\r\n-    const filterContainer = document.getElementById('dashboard-date-filter-container');\r\n-    if (filterContainer) filterContainer.style.display = 'none';\r\n-\r\n-    try {\r\n-        // Usa a biblioteca html2canvas para criar um \"canvas\" (uma imagem) do elemento\r\n-        const canvas = await html2canvas(dashboardElement, {\r\n-            scale: 2, // Aumenta a resolução da imagem para melhor qualidade\r\n-            backgroundColor: '#1e293b' // Garante um fundo consistente\r\n-        });\r\n-\r\n-        // Converte o canvas para uma imagem no formato PNG\r\n-        const imageData = canvas.toDataURL('image/png');\r\n-\r\n-        // Usa a biblioteca jsPDF para criar o documento\r\n-        // A orientação 'p' é retrato (portrait), 'mm' é milímetros, 'a4' é o tamanho da página\r\n-        const pdf = new jspdf.jsPDF({\r\n-            orientation: 'p',\r\n-            unit: 'mm',\r\n-            format: 'a4'\r\n-        });\r\n-\r\n-        // Calcula as dimensões da imagem para que ela caiba na página A4, mantendo a proporção\r\n-        const pageWidth = pdf.internal.pageSize.getWidth();\r\n-        const pageHeight = pdf.internal.pageSize.getHeight();\r\n-        const imageWidth = canvas.width;\r\n-        const imageHeight = canvas.height;\r\n-        const ratio = imageWidth / imageHeight;\r\n-        let pdfImageWidth = pageWidth - 20; // Deixa uma margem de 10mm de cada lado\r\n-        let pdfImageHeight = pdfImageWidth / ratio;\r\n-        \r\n-        // Se a imagem ainda for muito alta, ajusta pela altura\r\n-        if (pdfImageHeight > pageHeight - 20) {\r\n-            pdfImageHeight = pageHeight - 20;\r\n-            pdfImageWidth = pdfImageHeight * ratio;\r\n-        }\r\n-        \r\n-        // Adiciona a imagem ao PDF, centralizada\r\n-        const x = (pageWidth - pdfImageWidth) / 2;\r\n-        const y = 10; // Margem de 10mm no topo\r\n-        pdf.addImage(imageData, 'PNG', x, y, pdfImageWidth, pdfImageHeight);\r\n-\r\n-        // Força o download do ficheiro\r\n-        pdf.save('dashboard-relatorio.pdf');\r\n-\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao gerar PDF visual:\", error);\r\n-        showToast('Ocorreu um erro ao gerar o PDF.', 'error');\r\n-    } finally {\r\n-        // Mostra novamente os botões de filtro, quer a exportação tenha funcionado ou não\r\n-        if (filterContainer) filterContainer.style.display = 'block';\r\n-        // Esconde o loader\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n- * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n- */\r\n-function switchAddBillMode(mode) {\r\n-    if (!manualAddForm || !xmlAddForm || !csvImportForm || !recurrentAddForm) return;\r\n-\r\n-    // Esconde todos os painéis\r\n-    manualAddForm.classList.add('hidden');\r\n-    xmlAddForm.classList.add('hidden');\r\n-    csvImportForm.classList.add('hidden');\r\n-    recurrentAddForm.classList.add('hidden'); // Esconde o novo painel\r\n-\r\n-    // Reseta o estilo de todos os botões\r\n-    [manualAddBtn, xmlAddBtn, csvImportBtn, recurrentAddBtn].forEach(btn => { // Adiciona o novo botão\r\n-        if(btn) {\r\n-            btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-            btn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n-        }\r\n-    });\r\n-\r\n-    // Ativa o painel e o botão corretos\r\n-    let activeBtn, activeForm;\r\n-    if (mode === 'manual') {\r\n-        activeBtn = manualAddBtn;\r\n-        activeForm = manualAddForm;\r\n-    } else if (mode === 'xml') {\r\n-        activeBtn = xmlAddBtn;\r\n-        activeForm = xmlAddForm;\r\n-    } else if (mode === 'recurrent') { // Adiciona a nova condição\r\n-        activeBtn = recurrentAddBtn;\r\n-        activeForm = recurrentAddForm;\r\n-    } else if (mode === 'csv') {\r\n-        activeBtn = csvImportBtn;\r\n-        activeForm = csvImportForm;\r\n-    }\r\n-\r\n-    if (activeBtn && activeForm) {\r\n-        activeForm.classList.remove('hidden');\r\n-        activeBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n-        activeBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com a seleção de um ficheiro CSV, lê e pré-visualiza os dados.\r\n- */\r\n-function handleCsvFileSelect(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) return;\r\n-\r\n-    // Usa o PapaParse para ler o ficheiro\r\n-    Papa.parse(file, {\r\n-        header: true, // Trata a primeira linha como cabeçalho\r\n-        skipEmptyLines: true,\r\n-        complete: (results) => {\r\n-            // Guarda os dados processados no estado da aplicação\r\n-            parsedCsvData = results.data;\r\n-            renderCsvPreview(parsedCsvData);\r\n-        },\r\n-        error: (err) => {\r\n-            showToast(`Erro ao ler o ficheiro CSV: ${err.message}`, 'error');\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Renderiza a tabela de pré-visualização com os dados lidos do CSV.\r\n- */\r\n-function renderCsvPreview(data) {\r\n-    // Verificação de segurança para garantir que 'data' é um array\r\n-    if (!Array.isArray(data)) {\r\n-        console.error(\"renderCsvPreview foi chamada com dados inválidos:\", data);\r\n-        data = []; // Assume um array vazio para não quebrar a execução\r\n-    }\r\n-\r\n-    if (!csvPreviewTableBody || !csvPreviewArea || !csvImportSummary) {\r\n-        console.error(\"Elementos da pré-visualização do CSV não foram encontrados no HTML.\");\r\n-        return;\r\n-    }\r\n-\r\n-    csvPreviewTableBody.innerHTML = '';\r\n-    if (data.length === 0) {\r\n-        csvPreviewArea.classList.add('hidden');\r\n-        return;\r\n-    }\r\n-    \r\n-    const formatCurrency = (valueStr) => {\r\n-        const value = parseFloat(String(valueStr).replace(',', '.'));\r\n-        return isNaN(value) ? 'Inválido' : value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-    };\r\n-\r\n-    data.forEach(row => {\r\n-        const values = Object.values(row);\r\n-        const tr = `\r\n-            <tr>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${values[0] || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${values[1] || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${values[2] || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700 text-right\">${formatCurrency(values[3])}</td>\r\n-            </tr>\r\n-        `;\r\n-        csvPreviewTableBody.insertAdjacentHTML('beforeend', tr);\r\n-    });\r\n-\r\n-    csvImportSummary.textContent = `${data.length} boletos prontos para serem importados.`;\r\n-    csvPreviewArea.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Envia os dados do CSV para a API para serem salvos na base de dados.\r\n- */\r\n-async function handleConfirmImport() {\r\n-    if (parsedCsvData.length === 0) {\r\n-        return showToast('Não há dados para importar.', 'info');\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const response = await api.importBoletos(parsedCsvData);\r\n-        showToast(response.message, 'success');\r\n-\r\n-        // Fecha o modal e atualiza a aplicação\r\n-        addBillModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-\r\n-        // Limpa os dados da pré-visualização\r\n-        csvPreviewArea.classList.add('hidden');\r\n-        csvFileInput.value = '';\r\n-        parsedCsvData = [];\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a visibilidade e a contagem do botão de pagamento em massa.\r\n- */\r\n-function updateMassPaymentButton() {\r\n-    const count = selectedItems.size;\r\n-    selectedCountSpan.textContent = count;\r\n-    massActionsContainer.classList.toggle('hidden', count === 0);\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Pagar Selecionados\".\r\n- */\r\n-async function handleMarkSelectedAsPaid() {\r\n-    if (selectedItems.size === 0) {\r\n-        return showToast('Nenhuma parcela selecionada.', 'info');\r\n-    }\r\n-\r\n-    if (!confirm(`Tem a certeza que deseja marcar ${selectedItems.size} parcela(s) como paga(s)?`)) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const parcelIds = Array.from(selectedItems.keys());\r\n-\r\n-        // Chama a função da API com o array de IDs correto.\r\n-        const response = await api.markParcelsAsPaid(parcelIds);\r\n-\r\n-        showToast(response.message, 'success');\r\n-\r\n-        // Limpa a seleção e atualiza a interface\r\n-        selectedItems.clear();\r\n-        updateMassPaymentButton();\r\n-        await updateBillsOrganizer(); // Recarrega o calendário\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Seleciona todos os checkboxes de boletos visíveis no calendário.\r\n- */\r\n-function handleSelectAllVisible() {\r\n-    // Pega todos os checkboxes que estão atualmente no calendário\r\n-    document.querySelectorAll('.mass-payment-checkbox').forEach(checkbox => {\r\n-        // Marca apenas os que ainda não estão marcados\r\n-        if (!checkbox.checked) {\r\n-            checkbox.checked = true;\r\n-\r\n-            // --- LÓGICA CORRIGIDA ---\r\n-            const parcelId = checkbox.dataset.parcelId;\r\n-            // Pega o boletoId do elemento pai mais próximo\r\n-            const boletoId = checkbox.closest('.bill-card-draggable').dataset.boletoId;\r\n-\r\n-            // Garante que temos os dois IDs antes de adicionar ao mapa\r\n-            if (parcelId && boletoId) {\r\n-                // Usa o método .set(key, value), que é o correto para um Map\r\n-                selectedItems.set(parcelId, boletoId);\r\n-            }\r\n-        }\r\n-    });\r\n-    // Atualiza o botão para refletir a nova contagem\r\n-    updateMassPaymentButton();\r\n-}\r\n-\r\n-/**\r\n- * Desmarca todos os checkboxes de boletos selecionados.\r\n- */\r\n-function handleDeselectAll() {\r\n-    // Limpa o nosso Set de seleção\r\n-    selectedItems.clear();\r\n-    // Desmarca todos os checkboxes que estão no calendário\r\n-    document.querySelectorAll('.mass-payment-checkbox:checked').forEach(checkbox => {\r\n-        checkbox.checked = false;\r\n-    });\r\n-    // Atualiza o botão (que será escondido, pois a contagem é 0)\r\n-    updateMassPaymentButton();\r\n-}\r\n-\r\n-/**\r\n- * Busca os dados do utilizador e abre o modal de perfil.\r\n- */\r\n-async function openProfileModal() {\r\n-    // Usa as variáveis globais que já temos da inicialização\r\n-    if (!currentLoggedInUser || !currentLoggedInCompany) {\r\n-        showToast('Não foi possível carregar os dados do perfil.', 'error');\r\n-        return;\r\n-    }\r\n-\r\n-    // Preenche o modal com os dados\r\n-    profileUsername.textContent = currentLoggedInUser.username;\r\n-    profileRole.textContent = currentLoggedInUser.role;\r\n-    profileCompany.textContent = currentLoggedInCompany.nomeEmpresa;\r\n-\r\n-    // Mostra o modal\r\n-    profileModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Busca o anúncio ativo mais recente e o exibe no banner.\r\n- */\r\n-async function fetchAndDisplayAnnouncement() {\r\n-    try {\r\n-        const announcement = await api.getActiveAnnouncement();\r\n-\r\n-        // Se existir um anúncio e ele tiver uma mensagem\r\n-        if (announcement && announcement.message) {\r\n-            let messageHtml = announcement.message;\r\n-            // Se o anúncio tiver um link, transforma a mensagem num link clicável\r\n-            if (announcement.link) {\r\n-                messageHtml = `<a href=\"${announcement.link}\" target=\"_blank\" class=\"hover:underline\">${announcement.message} <i class=\"fas fa-external-link-alt fa-xs ml-1\"></i></a>`;\r\n-            }\r\n-            announcementMessage.innerHTML = messageHtml;\r\n-            globalAnnouncementBanner.classList.remove('hidden');\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(\"Não foi possível buscar o anúncio:\", error);\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-// =================================================================================\r\n-\r\n-async function handleForgotPasswordRequest(e) {\r\n-    e.preventDefault();\r\n-    const email = document.getElementById('recoveryEmailInput').value;\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.requestPasswordReset(email);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n-        forgotPasswordModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList(); // Se tiver essa função\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // CORREÇÃO: Capturamos a nova lista 'masterUsers' da API\r\n-                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-                // CORREÇÃO: Passamos a lista para a função do modal\r\n-                openCompanyDetailsModal(company, users, masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // CORREÇÃO: Capturamos a nova lista 'masterUsers'\r\n-                const { users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-\r\n-                // CORREÇÃO: Verificamos se existem usuários na lista do banco Mestre\r\n-                if (!masterUsers || masterUsers.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários (no registro mestre) para representar.', 'info');\r\n-                }\r\n-\r\n-                // CORREÇÃO: Usamos o ID do primeiro usuário da lista do banco Mestre\r\n-                const userIdToImpersonate = masterUsers[0]._id; \r\n-\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                // O resto da lógica continua igual...\r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-async function handleCalculateInstallments(e) {\r\n-    e.preventDefault(); // Impede a submissão padrão do formulário\r\n-\r\n-    const activeTabButton = document.querySelector('#addBillModal .flex button.bg-indigo-600');\r\n-    if (!activeTabButton) {\r\n-        return showToast('Erro: Não foi possível identificar a aba ativa.', 'error');\r\n-    }\r\n-    const activeModeId = activeTabButton.id;\r\n-\r\n-    currentBill = null;\r\n-\r\n-    if (activeModeId === 'manual-add-btn') {\r\n-        const billName = document.getElementById('billName').value;\r\n-        const dueDate = document.getElementById('dueDate').value;\r\n-        const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(',', '.'));\r\n-        const installments = parseInt(document.getElementById('installments').value);\r\n-        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-        const description = document.getElementById('description').value;\r\n-\r\n-        // Validação feita aqui no JavaScript\r\n-        if (!billName || !dueDate || !installments || isNaN(totalAmount) || totalAmount <= 0 || installments <= 0) {\r\n-            return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n-        }\r\n-\r\n-        currentBill = { name: billName, description, parcels: [], category: null };\r\n-        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-\r\n-        for (let i = 0; i < installments; i++) {\r\n-            const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-            parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-            currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n-        }\r\n-\r\n-    } else if (activeModeId === 'recurrent-add-btn') {\r\n-        const billName = document.getElementById('recurrentBillName').value;\r\n-        const startDate = document.getElementById('recurrentStartDate').value;\r\n-        const amount = parseFloat(document.getElementById('recurrentAmount').value);\r\n-        const months = parseInt(document.getElementById('recurrentInstallments').value);\r\n-        const description = document.getElementById('recurrentDescription').value;\r\n-\r\n-        // Validação feita aqui no JavaScript\r\n-        if (!billName || !startDate || !months || isNaN(amount) || amount <= 0 || months <= 0) {\r\n-            return showToast(\"Preencha todos os campos do pagamento recorrente.\", \"error\");\r\n-        }\r\n-\r\n-        currentBill = { name: billName, description, parcels: [], category: null };\r\n-\r\n-        for (let i = 0; i < months; i++) {\r\n-            const parcelDate = new Date(startDate + 'T00:00:00');\r\n-            parcelDate.setMonth(parcelDate.getMonth() + i);\r\n-            currentBill.parcels.push({ number: i + 1, amount: amount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n-        }\r\n-    }\r\n-\r\n-    // Este bloco só será executado se `currentBill` tiver sido preenchido com sucesso\r\n-    if (currentBill && currentBill.parcels.length > 0) {\r\n-        installmentsList.innerHTML = '';\r\n-        currentBill.parcels.forEach((parcel, index) => {\r\n-             installmentsList.insertAdjacentHTML('beforeend', `\r\n-                <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                    <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                    <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                    <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                    <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                </div>\r\n-            `);\r\n-        });\r\n-\r\n-        addEventListenersToInstallmentInputs();\r\n-        updatePreviewTotal();\r\n-        previewBillNameInput.value = currentBill.name;\r\n-        previewNfeNumber.textContent = 'N/A';\r\n-        addBillModal.classList.add('hidden');\r\n-        await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n-        installmentsPreviewModal.classList.remove('hidden');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n- */\r\n-function updatePreviewTotal() {\r\n-    if (!currentBill.parcels) return;\r\n-    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    currentBill.category = document.getElementById('previewBillCategorySelect').value || null;\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill); // O objeto currentBill agora tem a categoria correta\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-        clearBillForm();\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-\r\n-    // Guarda os dados atualizados do formulário\r\n-    const updatedParcelData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    const updatedBillData = {\r\n-        category: modalBillCategorySelect.value || null\r\n-    };\r\n-\r\n-    // Encontra o boleto pai na nossa lista local\r\n-    const parentBoleto = userBoletos.find(b => b._id === selectedParcel.parentId);\r\n-\r\n-    // Verifica se a parcela é recorrente (se o boleto pai tem mais de 1 parcela)\r\n-    if (parentBoleto && parentBoleto.parcels.length > 1) {\r\n-        // Se for recorrente, guarda os dados e abre o modal de escolha\r\n-        pendingUpdateData = { updatedParcelData, updatedBillData };\r\n-\r\n-        // Atualiza a data no texto do botão para dar mais contexto ao utilizador\r\n-        const date = new Date(updatedParcelData.dueDate + 'T00:00:00');\r\n-        singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n-\r\n-        recurrentEditModal.classList.remove('hidden');\r\n-    } else {\r\n-        // Se não for recorrente, salva diretamente como antes\r\n-        showLoader();\r\n-        try {\r\n-            await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n-            await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n-            showToast('Alterações salvas com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            await updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- * Verifica a sessão e o estado da assinatura.\r\n- */\r\n-async function initializeApp() {\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n-    const action = urlParams.get('action');\r\n-\r\n-    if (action === 'forgot_password') {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    const token = localStorage.getItem('authToken');\r\n-\r\n-    if (!token) {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        showAdminLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-function logout() {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-\r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        // CORREÇÃO: Buscamos os detalhes da empresa, que agora incluem 'users' (do tenant)\r\n-        // e 'masterUsers' (do banco mestre).\r\n-        const { users, masterUsers } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n-\r\n-        companyUsersList.innerHTML = ''; \r\n-\r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        // Usamos a lista de 'masterUsers' para construir o modal, pois ela tem os IDs corretos.\r\n-        if (masterUsers && masterUsers.length > 0) {\r\n-            masterUsers.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-\r\n-                const roleOptions = assignableRoles.map(role =>\r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                const roleHtml = isOwner\r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    // CORREÇÃO: O data-user-id agora usa o ID do masterUser\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-\r\n-        // Adiciona evento de clique para remover (precisará de ajuste futuro se necessário)\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            // ...\r\n-        });\r\n-\r\n-        // Adiciona evento para alterar o cargo (agora com o ID correto)\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n-                const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n-\r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    // Lógica para reverter a seleção visual\r\n-                    const originalUser = (await api.getCompanyDetails(companyId)).masterUsers.find(u => u._id === userId);\r\n-                    if(originalUser) e.target.value = originalUser.role;\r\n-                    return;\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    // A chamada à API agora envia o ID correto\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n- * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n- * @param {Event} event - O evento 'change' do input do ficheiro.\r\n- */\r\n-async function handleNfeXmlUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) {\r\n-        return;\r\n-    }\r\n-\r\n-    const reader = new FileReader();\r\n-\r\n-    reader.onload = async (e) => {\r\n-        try {\r\n-            const xmlString = e.target.result;\r\n-            const parser = new DOMParser();\r\n-            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-\r\n-            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n-                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n-            }\r\n-\r\n-            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n-            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n-            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-\r\n-            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n-            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n-            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n-\r\n-            let parcelsData = [];\r\n-\r\n-            if (duplicatas.length > 0) {\r\n-                parcelsData = duplicatas.map((dup, i) => ({\r\n-                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n-                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n-                    dueDate: getTagValue(\"dVenc\", dup)\r\n-                }));\r\n-            } else {\r\n-                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n-                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n-\r\n-                if (cobrancaMatch && cobrancaMatch[1]) {\r\n-                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n-                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n-                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n-                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n-\r\n-                    parcelsData = dias.map((dia, i) => {\r\n-                        const vencimento = new Date(dataEmissao);\r\n-                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n-                        return {\r\n-                            number: i + 1,\r\n-                            amount: parcelAmount,\r\n-                            dueDate: vencimento.toISOString().split('T')[0]\r\n-                        };\r\n-                    });\r\n-                }\r\n-            }\r\n-\r\n-            if (parcelsData.length > 0) {\r\n-                // ALTERAÇÃO AQUI: Removemos o prefixo \"NFe - \" do nome.\r\n-                currentBill = { name: nomeFornecedor, nfeNumber: nfeNumber, parcels: parcelsData };\r\n-\r\n-                installmentsList.innerHTML = '';\r\n-                currentBill.parcels.forEach((parcel, index) => {\r\n-                    installmentsList.insertAdjacentHTML('beforeend', `\r\n-                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                        </div>\r\n-                    `);\r\n-                });\r\n-\r\n-                addEventListenersToInstallmentInputs();\r\n-                updatePreviewTotal();\r\n-                previewBillNameInput.value = currentBill.name;\r\n-                previewNfeNumber.textContent = nfeNumber;\r\n-                await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n-                installmentsPreviewModal.classList.remove('hidden');\r\n-\r\n-            } else {\r\n-                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n-                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n-\r\n-                // ALTERAÇÃO AQUI TAMBÉM: Removemos o prefixo no caso de fallback.\r\n-                document.getElementById('billName').value = nomeFornecedor;\r\n-                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n-                if (vencimento) {\r\n-                    document.getElementById('dueDate').value = vencimento;\r\n-                }\r\n-\r\n-                addBillModal.classList.remove('hidden');\r\n-            }\r\n-\r\n-            showToast('Dados do XML carregados com sucesso!', 'success');\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            console.error(\"Erro ao processar XML:\", error);\r\n-        } finally {\r\n-            event.target.value = '';\r\n-        }\r\n-    };\r\n-\r\n-    reader.onerror = () => {\r\n-        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n-    };\r\n-\r\n-    reader.readAsText(file);\r\n-}\r\n-\r\n-/**\r\n- * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n- */\r\n-function addEventListenersToInstallmentInputs() {\r\n-    // Listener para o campo de VALOR\r\n-    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n-            }\r\n-            updatePreviewTotal();\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de DATA\r\n-    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-        input.addEventListener('change', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    /**\r\n-     * Mostra a tela de login de administrador.\r\n-     */\r\n-    function showAdminLogin() {\r\n-        hideAllScreens(); // Função de utils.js\r\n-        if (adminLoginForm) adminLoginForm.reset();\r\n-        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    // Listener para o campo de CÓDIGO DE BARRAS\r\n-    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n-        // Evento para guardar o valor quando é digitado\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].barcode = e.target.value;\r\n-            }\r\n-        });\r\n-\r\n-        input.addEventListener('keydown', (e) => {\r\n-            if (e.key === 'Enter') {\r\n-                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n-\r\n-                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n-                const nextIndex = currentIndex + 1;\r\n-                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n-\r\n-                if (nextInput) {\r\n-                    // Se houver um próximo campo de código de barras, foca nele.\r\n-                    nextInput.focus();\r\n-                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n-                } else {\r\n-                    // Se for o último campo, foca no botão de salvar.\r\n-                    document.getElementById('addToOrganizer').focus();\r\n-                }\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n- */\r\n-function handleShowFullScreenBarcode() {\r\n-    const barcodeValue = modalBillBarcodeInput.value;\r\n-    if (!barcodeValue) {\r\n-        return showToast('Não há código de barras para mostrar.', 'info');\r\n-    }\r\n-\r\n-    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n-    if (!barcodeImageContainer) return;\r\n-\r\n-    // Limpa qualquer código de barras anterior\r\n-    barcodeImageContainer.innerHTML = '';\r\n-\r\n-    try {\r\n-        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n-        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n-\r\n-        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n-        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n-            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n-            lineColor: \"#000000\",\r\n-            width: 2,\r\n-            height: 100,\r\n-            displayValue: true, // Mostra os números abaixo das barras\r\n-            fontSize: 18\r\n-        });\r\n-\r\n-        // Mostra o modal de ecrã inteiro\r\n-        barcodeFullScreenModal.classList.remove('hidden');\r\n-\r\n-    } catch (e) {\r\n-        console.error(\"Erro ao gerar código de barras:\", e);\r\n-        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n-    }\r\n-}\r\n-\r\n-async function handleAttachmentUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file || !selectedParcel) return;\r\n-\r\n-    // Cria um objeto FormData para enviar o ficheiro\r\n-    const formData = new FormData();\r\n-    formData.append('comprovante', file);\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Atualiza a UI para mostrar o link do novo anexo\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n-\r\n-        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para remover um anexo de comprovativo.\r\n- * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n- */\r\n-async function handleRemoveAttachment() {\r\n-    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n-    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader(); // Mostra o ícone de carregamento\r\n-    try {\r\n-        // Chama a nossa função da API para apagar o anexo\r\n-        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n-\r\n-        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-\r\n-        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-\r\n-        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n-        await updateBillsOrganizer();\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n- */\r\n-function applyFiltersAndSearch() {\r\n-    const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n-    const selectedCategoryId = categoryFilterSelect.value;\r\n-\r\n-    let filteredBoletos = userBoletos.filter(bill => {\r\n-        // Filtro de pesquisa\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n-            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        if (!matchesSearch) return false;\r\n-\r\n-        // Filtro de categoria\r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-        if (!matchesCategory) return false;\r\n-\r\n-        // Filtro de status\r\n-        if (activeStatusFilter === 'all') return true;\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        return bill.parcels.some(parcel => {\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n-            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n-            return false;\r\n-        });\r\n-    });\r\n-\r\n-    renderCalendar(filteredBoletos);\r\n-    updateMonthlySummary(filteredBoletos);\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n- * agora com lógica para parcelas recorrentes.\r\n- */\r\n-function initializeDragAndDrop() {\r\n-    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n-\r\n-    dayCells.forEach(cell => {\r\n-        new Sortable(cell, {\r\n-            group: 'calendar-bills',\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-\r\n-            onEnd: async function (evt) {\r\n-                const item = evt.item;\r\n-                const toCell = evt.to;\r\n-                const boletoId = item.dataset.boletoId;\r\n-                const parcelId = item.dataset.parcelId;\r\n-                const newDate = toCell.dataset.date;\r\n-\r\n-                if (!boletoId || !parcelId || !newDate) return;\r\n-\r\n-                const parentBoleto = userBoletos.find(b => b._id === boletoId);\r\n-                const originalParcel = parentBoleto?.parcels.find(p => p._id === parcelId);\r\n-\r\n-                if (!parentBoleto || !originalParcel) return;\r\n-\r\n-                if (parentBoleto.parcels.length > 1) {\r\n-                    // --- CORREÇÃO AQUI ---\r\n-                    // 1. Definimos a variável 'selectedParcel' que estava em falta.\r\n-                    selectedParcel = { ...originalParcel, parentId: parentBoleto._id };\r\n-\r\n-                    // 2. O resto da lógica continua a mesma\r\n-                    const updatedParcelData = {\r\n-                        ...originalParcel,\r\n-                        dueDate: newDate,\r\n-                    };\r\n-\r\n-                    pendingUpdateData = { \r\n-                        updatedParcelData, \r\n-                        updatedBillData: { category: parentBoleto.category?._id || null }\r\n-                    };\r\n-\r\n-                    const date = new Date(newDate + 'T00:00:00');\r\n-                    singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n-\r\n-                    recurrentEditModal.classList.remove('hidden');\r\n-                    renderCalendar();\r\n-\r\n-                } else {\r\n-                    // Lógica para parcela única (continua a mesma)\r\n-                    showLoader();\r\n-                    try {\r\n-                        await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n-                        showToast('Data da parcela atualizada com sucesso!', 'success');\r\n-                        await updateBillsOrganizer();\r\n-                    } catch (error) {\r\n-                        showToast(error.message, 'error');\r\n-                        await updateBillsOrganizer();\r\n-                    } finally {\r\n-                        hideLoader();\r\n-                    }\r\n-                }\r\n-            },\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Calcula o startDate e endDate com base numa predefinição do seletor.\r\n- * @returns {{startDate?: string, endDate?: string}} - As datas ou um objeto vazio.\r\n- */\r\n-function getDateRangeFromPreset() {\r\n-    const preset = dateRangePresetSelect.value;\r\n-    const now = new Date();\r\n-    let startDate, endDate;\r\n-\r\n-    switch (preset) {\r\n-        case 'thisMonth':\r\n-            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n-            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n-            break;\r\n-        case 'lastMonth':\r\n-            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n-            endDate = new Date(now.getFullYear(), now.getMonth(), 0);\r\n-            break;\r\n-        case 'thisQuarter':\r\n-            const quarter = Math.floor(now.getMonth() / 3);\r\n-            startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n-            endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n-            break;\r\n-        case 'thisYear':\r\n-            startDate = new Date(now.getFullYear(), 0, 1);\r\n-            endDate = new Date(now.getFullYear(), 11, 31);\r\n-            break;\r\n-        case 'custom':\r\n-            if (startDateInput.value && endDateInput.value) {\r\n-                return {\r\n-                    startDate: startDateInput.value,\r\n-                    endDate: endDateInput.value\r\n-                };\r\n-            }\r\n-            return {}; // Retorna vazio se o intervalo personalizado não estiver completo\r\n-        default:\r\n-            return {}; // Padrão sem filtro\r\n-    }\r\n-\r\n-    // Formata as datas para o formato YYYY-MM-DD\r\n-    return {\r\n-        startDate: startDate.toISOString().split('T')[0],\r\n-        endDate: endDate.toISOString().split('T')[0]\r\n-    };\r\n-}\r\n-\r\n-/**\r\n- * Renderiza a lista de próximos vencimentos no dashboard.\r\n- * @param {Array} payments - A lista de pagamentos vinda da API.\r\n- */\r\n-function renderUpcomingPayments(payments) {\r\n-    if (!upcomingPaymentsList || !noUpcomingPaymentsMessage) return;\r\n-\r\n-    upcomingPaymentsList.innerHTML = ''; // Limpa a lista\r\n-\r\n-    if (payments.length === 0) {\r\n-        upcomingPaymentsList.appendChild(noUpcomingPaymentsMessage);\r\n-        noUpcomingPaymentsMessage.classList.remove('hidden');\r\n-    } else {\r\n-        noUpcomingPaymentsMessage.classList.add('hidden');\r\n-        const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-        payments.forEach(payment => {\r\n-            const dueDate = new Date(payment.dueDate + 'T00:00:00');\r\n-            const formattedDate = dueDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\r\n-\r\n-            const paymentHtml = `\r\n-                <div class=\"flex items-center justify-between bg-gray-700/50 p-3 rounded-md\">\r\n-                    <div>\r\n-                        <p class=\"font-medium text-white\">${payment.billName} (${payment.parcelNumber}ª)</p>\r\n-                        <p class=\"text-sm text-gray-400\">Vence em: ${formattedDate}</p>\r\n-                    </div>\r\n-                    <p class=\"font-semibold text-lg text-yellow-400\">${formatCurrency(payment.amount)}</p>\r\n-                </div>\r\n-            `;\r\n-            upcomingPaymentsList.insertAdjacentHTML('beforeend', paymentHtml);\r\n-        });\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de barras horizontais com as 5 maiores despesas por categoria.\r\n- * @param {Array} data - Os dados de despesas vindos da API.\r\n- */\r\n-function renderTopExpensesChart(data) {\r\n-    const canvas = document.getElementById('topExpensesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    // Destrói o gráfico anterior, se existir, para evitar sobreposições\r\n-    if (topExpensesChart) {\r\n-        topExpensesChart.destroy();\r\n-    }\r\n-    \r\n-    // 1. Ordena os dados do maior para o menor\r\n-    const sortedData = [...data].sort((a, b) => b.totalAmount - a.totalAmount);\r\n-    \r\n-    // 2. Pega apenas nos 5 primeiros resultados\r\n-    const top5Data = sortedData.slice(0, 5);\r\n-\r\n-    // 3. Prepara os dados para o Chart.js\r\n-    const labels = top5Data.map(item => item.categoryName);\r\n-    const values = top5Data.map(item => item.totalAmount);\r\n-\r\n-    topExpensesChart = new Chart(ctx, {\r\n-        type: 'bar', // Tipo de gráfico\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Total Gasto',\r\n-                data: values,\r\n-                backgroundColor: 'rgba(239, 68, 68, 0.6)', // Vermelho\r\n-                borderColor: 'rgba(239, 68, 68, 1)',\r\n-                borderWidth: 1\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            indexAxis: 'y', // <-- Isto é o que torna o gráfico horizontal!\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                x: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n-                y: { ticks: { color: '#d1d5db' }, grid: { display: false } }\r\n-            },\r\n-            plugins: {\r\n-                legend: { display: false },\r\n-                tooltip: {\r\n-                    callbacks: {\r\n-                        label: function(context) {\r\n-                            return ` Total: ${context.raw.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-                        }\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de alteração de senha.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleChangePassword(e) {\r\n-    e.preventDefault(); // Impede o recarregamento da página\r\n-\r\n-    const currentPassword = document.getElementById('currentPassword').value;\r\n-    const newPassword = document.getElementById('newPassword').value;\r\n-    const confirmPassword = document.getElementById('confirmPassword').value;\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.changePassword({ currentPassword, newPassword, confirmPassword });\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Limpa os campos e fecha o modal após o sucesso\r\n-        changePasswordForm.reset();\r\n-        profileModal.classList.add('hidden');\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', async () => {\r\n-// --- Lógica de inicialização que estava em initializeApp() ---\r\n-const today = new Date();\r\n-currentMonth = today.getMonth();\r\n-currentYear = today.getFullYear();\r\n-\r\n-const token = localStorage.getItem('authToken');\r\n-if (!token) {\r\n-    // Se não houver token, redireciona para a página de login\r\n-    window.location.href = 'Index.html';\r\n-    return;\r\n-}\r\n-\r\n-try {\r\n-    const data = await api.checkSession();\r\n-    if (data.user.role === 'SuperAdmin') {\r\n-        isAdminLoggedIn = true;\r\n-        await showAdminDashboard();\r\n-    } else {\r\n-        currentLoggedInUser = data.user;\r\n-        currentLoggedInCompany = data.company;\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            await showMainApp();\r\n-        } else {\r\n-            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                // Se for o dono da empresa, mostra o modal para renovar\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    }\r\n-} catch (error) {\r\n-    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n-    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n-    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    setTimeout(() => {\r\n-        window.location.href = 'Index.html';\r\n-    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n-} finally {\r\n-    // Esconde a tela de carregamento inicial\r\n-    document.getElementById('loadingScreen').classList.add('hidden');\r\n-}\r\n-\r\n-\r\n-// Submissão de formulários\r\n-if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-if (logoutBtn) {\r\n-    logoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-\r\n-\r\n-// Ações na App Principal\r\n-addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-// Ações do Modal de Edição de Boleto\r\n-closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-// Navegação do Calendário\r\n-prevMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-    if (currentMonth === 11) currentYear--;\r\n-    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-\r\n-nextMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-    if (currentMonth === 0) currentYear++;\r\n-    // A mesma mudança aqui\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-}\r\n-\r\n-if (openAddBillModalBtn) {\r\n-    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-}\r\n-\r\n-const handleRedirectToHome = () => {\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-const handleFullLogoutAndRedirect = () => {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-if (subscriptionLogoutBtn) {\r\n-    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-}\r\n-\r\n-if (blockedAccessLogoutBtn) {\r\n-    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-\r\n-// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-if (settingsBtn) {\r\n-    settingsBtn.addEventListener('click', (e) => {\r\n-        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-        settingsDropdown.classList.toggle('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Links dentro do menu dropdown\r\n-if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCompanyInfoModal();\r\n-});\r\n-\r\n-if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openPermissionsModal();\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n-\r\n-// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openManageUsersModal();\r\n-});\r\n-\r\n-// Botões do modal de gerir utilizadores\r\n-if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-    manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-    openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-});\r\n-\r\n-/**\r\n- * Lida com o clique no botão de criar/renovar assinatura.\r\n- */\r\n-async function handleCreateSubscription() {\r\n-    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-    subscriptionActionBtn.disabled = true;\r\n-    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-    try {\r\n-        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-        const data = await api.createSubscriptionLink();\r\n-\r\n-        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-        if (data.init_point) {\r\n-            window.location.href = data.init_point;\r\n-        } else {\r\n-            throw new Error('Link de pagamento não recebido.');\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-        subscriptionActionBtn.disabled = false;\r\n-        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-    }\r\n-}\r\n-\r\n-// Liga a função ao clique do botão.\r\n-if (subscriptionActionBtn) {\r\n-    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-}\r\n-\r\n-if (closePreviewModalBtn) {\r\n-    closePreviewModalBtn.addEventListener('click', () => {\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-if (nfeXmlInput) {\r\n-    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-}\r\n-\r\n-if (previewBillNameInput) {\r\n-    previewBillNameInput.addEventListener('input', (e) => {\r\n-        if (currentBill) {\r\n-            currentBill.name = e.target.value;\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Liga a função ao clique do botão\r\n-if (showFullScreenBarcodeBtn) {\r\n-    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-}\r\n-\r\n-// Listener para o campo de pesquisa\r\n-if (searchInput) {\r\n-    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Listeners para os botões de filtro\r\n-if (filterButtons) {\r\n-    filterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões\r\n-            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona a classe 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Aplica o filtro\r\n-            applyFiltersAndSearch();\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCategoriesModal();\r\n-});\r\n-\r\n-if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-if (addCategoryForm) {\r\n-    addCategoryForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const name = newCategoryNameInput.value.trim();\r\n-        if (!name) return;\r\n-        try {\r\n-            await api.createCategory(name);\r\n-            newCategoryNameInput.value = '';\r\n-            await openCategoriesModal(); // Recarrega a lista do modal\r\n-            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-if (categoryListDiv) {\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-if (categoryFilterSelect) {\r\n-    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Configuração dos botões do dashboard\r\n-if (viewCalendarBtn) {\r\n-    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-}\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-if (dateRangePresetSelect) {\r\n-    dateRangePresetSelect.addEventListener('change', () => {\r\n-        const isCustom = dateRangePresetSelect.value === 'custom';\r\n-        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n-\r\n-        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n-        // o dashboard é atualizado imediatamente.\r\n-        if (!isCustom) {\r\n-            renderDashboard();\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Para o intervalo personalizado, atualizamos o dashboard\r\n-// assim que ambas as datas estiverem preenchidas.\r\n-if (startDateInput) {\r\n-    startDateInput.addEventListener('change', () => {\r\n-        if (endDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-if (endDateInput) {\r\n-    endDateInput.addEventListener('change', () => {\r\n-        if (startDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-// Listeners para os botões de exportação\r\n-const handleExport = (format) => {\r\n-    // 1. Pega no período de tempo atual do filtro do dashboard\r\n-    const dateRange = getDateRangeFromPreset();\r\n-\r\n-    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n-    const queryString = new URLSearchParams(dateRange).toString();\r\n-\r\n-    // 3. Monta o URL completo para o download\r\n-    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n-    \r\n-    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n-    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n-    fetch(downloadUrl, {\r\n-        headers: {\r\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n-        }\r\n-    })\r\n-    .then(res => res.blob())\r\n-    .then(blob => {\r\n-        const url = window.URL.createObjectURL(blob);\r\n-        const a = document.createElement('a');\r\n-        a.style.display = 'none';\r\n-        a.href = url;\r\n-        a.download = `relatorio-despesas.${format}`;\r\n-        document.body.appendChild(a);\r\n-        a.click();\r\n-        window.URL.revokeObjectURL(url);\r\n-        a.remove();\r\n-    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n-};\r\n-\r\n-if (exportCsvBtn) {\r\n-    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n-}\r\n-if (exportPdfBtn) {\r\n-    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n-}\r\n-\r\n-if (manualAddBtn) {\r\n-    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-}\r\n-if (xmlAddBtn) {\r\n-    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-}\r\n-\r\n-if (csvImportBtn) {\r\n-    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n-}\r\n-if (csvFileInput) {\r\n-    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n-}\r\n-if (importCsvBtn) {\r\n-    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n-}\r\n-if (markSelectedAsPaidBtn) {\r\n-    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n-}\r\n-if (selectAllVisibleBtn) {\r\n-    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n-}\r\n-\r\n-if (deselectAllVisibleBtn) {\r\n-    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n-}\r\n-if (dashboardFilterButtons) {\r\n-    dashboardFilterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões do dashboard\r\n-            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Atualiza a variável de estado com o novo filtro\r\n-            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n-            // Renderiza o dashboard novamente com os dados filtrados\r\n-            renderDashboard();\r\n-        });\r\n-    });\r\n-}\r\n-// Abre o modal de alteração de categoria\r\n-if (changeCategoryBtn) {\r\n-    changeCategoryBtn.addEventListener('click', async () => {\r\n-        showLoader();\r\n-        // Popula o dropdown do modal com as categorias existentes\r\n-        await populateCategorySelect(batchCategorySelect);\r\n-        hideLoader();\r\n-        categoryBatchModal.classList.remove('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de cancelar no modal\r\n-if (cancelCategoryBatchBtn) {\r\n-    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n-        categoryBatchModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de confirmar a alteração\r\n-if (confirmCategoryBatchBtn) {\r\n-    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n-        const categoryId = batchCategorySelect.value;\r\n-        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n-        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n-\r\n-        if (boletoIds.length === 0) {\r\n-            return showToast('Nenhum item selecionado.', 'info');\r\n-        }\r\n-\r\n-        showLoader();\r\n-        try {\r\n-            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n-            showToast(response.message, 'success');\r\n-            selectedItems.clear();\r\n-            updateMassPaymentButton();\r\n-            await updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-            categoryBatchModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-}\r\n-if (openProfileModalBtn) {\r\n-    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n-}\r\n-if (closeProfileModalBtn) {\r\n-    closeProfileModalBtn.addEventListener('click', () => {\r\n-        profileModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-if (changePasswordForm) {\r\n-    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n-}\r\n-if (resendVerificationBtn) {\r\n-    resendVerificationBtn.addEventListener('click', async () => {\r\n-        resendVerificationBtn.disabled = true;\r\n-        resendVerificationBtn.textContent = 'A reenviar...';\r\n-\r\n-        try {\r\n-            const data = await api.resendVerificationEmail();\r\n-            showToast(data.message, 'success');\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            resendVerificationBtn.disabled = false;\r\n-            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n-        }\r\n-    });\r\n-}\r\n-if (recurrentAddBtn) {\r\n-    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n-}\r\n-if (recurrentEditModal) {\r\n-    // Botões de escolha (Somente esta, futuras, todas)\r\n-    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const scope = e.currentTarget.dataset.scope;\r\n-            if (!pendingUpdateData || !selectedParcel) return;\r\n-\r\n-            recurrentEditModal.classList.add('hidden');\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a nova rota da API com o escopo escolhido\r\n-                await api.bulkUpdateParcels(\r\n-                    selectedParcel.parentId, \r\n-                    selectedParcel._id, \r\n-                    pendingUpdateData.updatedParcelData, \r\n-                    scope\r\n-                );\r\n-\r\n-                // Atualiza a categoria do boleto, se foi alterada\r\n-                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n-\r\n-                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n-                billModal.classList.add('hidden');\r\n-                await updateBillsOrganizer();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-                pendingUpdateData = null; // Limpa os dados pendentes\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Botão de cancelar\r\n-    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n-        recurrentEditModal.classList.add('hidden');\r\n-        pendingUpdateData = null; // Limpa os dados pendentes\r\n-    });\r\n-}\r\n-\r\n-// CHAME A NOVA FUNÇÃO AQUI\r\n-initializeDashboardDragAndDrop(); \r\n-\r\n-\r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import { API_BASE_URL } from './config.js';\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let expensesPieChart = null;\r\n-let expensesBarChart = null;\r\n-let topExpensesChart = null;\r\n-let parsedCsvData = [];\r\n-let selectedParcels = new Set();\r\n-let dashboardStatusFilter = 'all';\r\n-let selectedItems = new Map();\r\n-let pendingUpdateData = null;\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n-const billForm = document.getElementById('billForm');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n-\r\n-const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n-const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n-const calendarView = document.getElementById('calendarView');\r\n-const dashboardView = document.getElementById('dashboardView');\r\n-const dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\n-const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n-const startDateInput = document.getElementById('start-date-input');\r\n-const endDateInput = document.getElementById('end-date-input');\r\n-const kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\n-const upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\n-const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n-const exportCsvBtn = document.getElementById('export-csv-btn');\r\n-const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n-const dashboardFilterButtons = document.querySelectorAll('.dashboard-filter-btn');\r\n-\r\n-const manualAddBtn = document.getElementById('manual-add-btn');\r\n-const xmlAddBtn = document.getElementById('xml-add-btn');\r\n-const manualAddForm = document.getElementById('manual-add-form');\r\n-const xmlAddForm = document.getElementById('xml-add-form');\r\n-\r\n-const csvImportBtn = document.getElementById('csv-import-btn');\r\n-const csvImportForm = document.getElementById('csv-import-form');\r\n-const csvFileInput = document.getElementById('csv-file-input');\r\n-const csvPreviewArea = document.getElementById('csv-preview-area');\r\n-const csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\n-const csvImportSummary = document.getElementById('csv-import-summary');\r\n-const importCsvBtn = document.getElementById('import-csv-btn');\r\n-\r\n-const markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\n-const selectedCountSpan = document.getElementById('selectedCount');\r\n-const massActionsContainer = document.getElementById('massActionsContainer');\r\n-const selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\n-const deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n-\r\n-const changeCategoryBtn = document.getElementById('changeCategoryBtn');\r\n-const categoryBatchModal = document.getElementById('categoryBatchModal');\r\n-const batchCategorySelect = document.getElementById('batchCategorySelect');\r\n-const cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\n-const confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n-\r\n-const openProfileModalBtn = document.getElementById('openProfileModalBtn');\r\n-const profileModal = document.getElementById('profileModal');\r\n-const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\n-const profileUsername = document.getElementById('profileUsername');\r\n-const profileRole = document.getElementById('profileRole');\r\n-const profileCompany = document.getElementById('profileCompany');\r\n-const changePasswordForm = document.getElementById('changePasswordForm');\r\n-const verificationNotice = document.getElementById('verificationNotice');\r\n-const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n-\r\n-const recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\n-const recurrentAddForm = document.getElementById('recurrent-add-form');\r\n-const recurrentEditModal = document.getElementById('recurrentEditModal');\r\n-const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n-const singleParcelDate = document.getElementById('single-parcel-date');\r\n-\r\n-const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n-const announcementMessage = document.getElementById('announcementMessage');\r\n-const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n- */\r\n-function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-\r\n-    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n-\r\n-    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n-    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n-\r\n-    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n-\r\n-    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    // Atualiza os elementos HTML com os valores corretos\r\n-    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n-    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n-    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com uma lista específica de boletos.\r\n- * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n- * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n- */\r\n-function renderCalendar(boletosToRender = userBoletos) {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-    const today = new Date(); // Variável para verificar boletos vencidos\r\n-    today.setHours(0, 0, 0, 0); // Zera a hora para uma comparação precisa do dia\r\n-\r\n-    // ETAPA 1: Otimização - Agrupa todas as parcelas por data de vencimento.\r\n-    const parcelsByDate = new Map();\r\n-    boletosToRender.forEach(bill => {\r\n-        bill.parcels.forEach(parcel => {\r\n-            const date = parcel.dueDate;\r\n-            if (!parcelsByDate.has(date)) {\r\n-                parcelsByDate.set(date, []);\r\n-            }\r\n-            // Adiciona uma referência ao boleto pai para cada parcela, para facilitar.\r\n-            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n-        });\r\n-    });\r\n-\r\n-    // ETAPA 2: Renderização do Calendário\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    // Cria as células vazias do início do mês\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    // Cria as células para cada dia do mês\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-\r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        // Adiciona evento de clique na célula para criar novos boletos\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card-draggable')) return;\r\n-            openAddBillModal(e.currentTarget.dataset.date);\r\n-        });\r\n-\r\n-        // Verifica se existem parcelas para este dia no mapa\r\n-        if (parcelsByDate.has(dateStr)) {\r\n-            // Se existirem, itera apenas sobre as parcelas daquele dia\r\n-            parcelsByDate.get(dateStr).forEach(parcel => {\r\n-                const bill = parcel.parentBill; // Pega a referência do boleto pai\r\n-                const parcelElement = document.createElement('div');\r\n-                \r\n-                // Lógica de Status, Cores e Ícones\r\n-                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                const isOverdue = !parcel.paid && dueDate < today;\r\n-                let statusClass = 'bg-indigo-700 text-indigo-100'; // Padrão: Pendente\r\n-                let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n-            \r\n-                if (parcel.paid) {\r\n-                    statusClass = 'bg-green-700 text-green-100'; // Pago\r\n-                    statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n-                } else if (isOverdue) {\r\n-                    statusClass = 'bg-red-700 text-red-100'; // Vencido\r\n-                    statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n-                }\r\n-            \r\n-                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n-                parcelElement.dataset.boletoId = bill._id;\r\n-                parcelElement.dataset.parcelId = parcel._id;\r\n-    \r\n-                // HTML do card com layout aprimorado\r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"flex items-start space-x-2\">\r\n-                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n-                        <div class=\"flex-1 min-w-0\">\r\n-                            <div class=\"flex justify-between items-center\">\r\n-                                <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n-                                    ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n-                                </span>\r\n-                                <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n-                                    ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n-                                </span>\r\n-                            </div>\r\n-                            \r\n-                            ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                            ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n-                        </div>\r\n-                    </div>\r\n-                `;\r\n-    \r\n-                // Adiciona evento de clique no card para abrir o modal\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                \r\n-                // Lógica para o checkbox\r\n-                const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n-                checkbox.addEventListener('change', (e) => {\r\n-                    const parcelId = e.target.dataset.parcelId;\r\n-                    const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n-                    if (e.target.checked) {\r\n-                        selectedItems.set(parcelId, boletoId);\r\n-                    } else {\r\n-                        selectedItems.delete(parcelId);\r\n-                    }\r\n-                    updateMassPaymentButton();\r\n-                });\r\n-                checkbox.addEventListener('click', (e) => {\r\n-                    e.stopPropagation(); // Impede o clique de abrir o modal\r\n-                });\r\n-                \r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        }\r\n-        \r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-\r\n-    initializeDragAndDrop();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-async function openBillModal(bill, parcel) {\r\n-    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-\r\n-    // Preenche todos os campos do modal com os dados da parcela clicada\r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-    // Mostra o botão de gerar código de barras apenas se houver um código\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-\r\n-    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n-    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n-    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n-    if (bill.nfeNumber) {\r\n-        nfeNumberEl.textContent = bill.nfeNumber;\r\n-        nfeContainer.classList.remove('hidden');\r\n-    } else {\r\n-        nfeContainer.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Lógica dinâmica para a secção de anexos\r\n-    const attachmentContainer = document.getElementById('attachment-container');\r\n-    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n-\r\n-    if (parcel.attachmentUrl) {\r\n-        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n-        attachmentContainer.innerHTML = `\r\n-            <div class=\"flex items-center justify-between\">\r\n-                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n-                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n-                </a>\r\n-                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n-            </div>\r\n-        `;\r\n-        // Adiciona o evento de clique ao novo botão de remover\r\n-        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n-    } else {\r\n-        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-        // Adiciona o evento de 'change' ao novo input de upload\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-    }\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-        categories.forEach(cat => {\r\n-            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n-        });\r\n-        if (bill.category) {\r\n-            modalBillCategorySelect.value = bill.category._id;\r\n-        } else {\r\n-            modalBillCategorySelect.value = \"\";\r\n-        }\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    if (billForm) {\r\n-        billForm.reset();\r\n-    }\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n-    }\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    mainAppContent.classList.remove('hidden');\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-     await populateCategoryFilter();\r\n-     await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n- * @param {string} tagName - O nome da tag a ser procurada.\r\n- * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n- * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n- */\r\n-function getTagValue(tagName, parentElement) {\r\n-    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n-    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n-    return element?.textContent || '';\r\n-}\r\n-\r\n-/**\r\n- * Adiciona os eventos de clique e mudança aos elementos dinâmicos do modal de detalhes da empresa.\r\n- * Esta é a função que estava em falta.\r\n- */\r\n-function addEventListenersToCompanyDetailsModal() {\r\n-    // Evento para os seletores de cargo (role)\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                // Recarrega os dados do modal para garantir consistência\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Evento para os botões de remover utilizador\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.currentTarget.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                // Recarrega os dados do modal\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n- */\r\n-function openCompanyDetailsModal(company, users, masterUsers) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (masterUsers && masterUsers.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        masterUsers.forEach(user => {\r\n-            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n-\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona os eventos DEPOIS de criar os botões\r\n-    addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n-    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n-\r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        // Passa os novos dados para a função da API\r\n-        const data = await api.registerUser(username, password, email, role, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        // A chamada à API já retorna os dados completos da empresa, incluindo 'isVerified'\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        // LÓGICA PARA MOSTRAR/ESCONDER O AVISO\r\n-        if (company.isVerified) {\r\n-            verificationNotice.classList.add('hidden');\r\n-        } else {\r\n-            verificationNotice.classList.remove('hidden');\r\n-        }\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-\r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function openCategoriesModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        renderCategoryList(categories);\r\n-        categoriesModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function renderCategoryList(categories) {\r\n-    categoryListDiv.innerHTML = '';\r\n-    if (categories.length === 0) {\r\n-        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n-        return;\r\n-    }\r\n-    categories.forEach(category => {\r\n-        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n-                <span class=\"text-white\">${category.name}</span>\r\n-                <div>\r\n-                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n-                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n-                </div>\r\n-            </div>\r\n-        `);\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo boleto,\r\n- * e opcionalmente pré-preenchendo a data.\r\n- * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n- */\r\n-async function openAddBillModal(preselectedDate = null) {\r\n-    clearBillForm();\r\n-    switchAddBillMode('manual');\r\n-    showLoader();\r\n-    try {\r\n-        // Se uma data foi passada como parâmetro (ou seja, o utilizador clicou no calendário)\r\n-        if (preselectedDate) {\r\n-            // Preenche o campo da aba \"Adicionar Manual\" (comportamento que já existia)\r\n-            document.getElementById('dueDate').value = preselectedDate;\r\n-\r\n-            // NOVA LINHA: Preenche também o campo da aba \"Pagamento Recorrente\"\r\n-            document.getElementById('recurrentStartDate').value = preselectedDate;\r\n-        }\r\n-\r\n-        addBillModal.classList.remove('hidden');\r\n-    } catch (error)\r\n- {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function populateCategoryFilter() {\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n-        // Se der erro, garante que a opção padrão exista\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Alterna a visualização entre o Calendário e o Dashboard.\r\n- */\r\n-function switchView(viewToShow) {\r\n-    // Esconde ambas as vistas\r\n-    calendarView.classList.add('hidden');\r\n-    dashboardView.classList.add('hidden');\r\n-\r\n-    // Reseta o estilo dos botões\r\n-    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n-    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n-    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-\r\n-    // Mostra a vista correta e ativa o botão correspondente\r\n-    if (viewToShow === 'calendar') {\r\n-        calendarView.classList.remove('hidden');\r\n-        viewCalendarBtn.classList.add('bg-indigo-600');\r\n-        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-    } else if (viewToShow === 'dashboard') {\r\n-        dashboardView.classList.remove('hidden');\r\n-        viewDashboardBtn.classList.add('bg-indigo-600');\r\n-        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderDashboard();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Atualiza os cartões de KPI no dashboard.\r\n- * @param {object} kpiData - Os dados dos KPIs vindos da API.\r\n- */\r\n-function updateKpiCards(kpiData) {\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n-\r\n-    // Popula os novos campos\r\n-    if (kpiContasVencidas) kpiContasVencidas.textContent = formatCurrency(kpiData.totalVencido);\r\n-    \r\n-    // Popula os campos existentes\r\n-    document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n-    document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n-    document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n-}\r\n-\r\n-/**\r\n- * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n- */\r\n-async function renderDashboard() {\r\n-    showLoader();\r\n-    try {\r\n-        const dateRange = getDateRangeFromPreset();\r\n-\r\n-        // ATUALIZADO: Passa o 'dashboardStatusFilter' para as chamadas da API\r\n-        const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n-            api.getExpensesByCategory(dateRange, dashboardStatusFilter),\r\n-            api.getMonthlySummary(dateRange, dashboardStatusFilter),\r\n-            api.getKpiSummary(dateRange),\r\n-            api.getUpcomingPayments()\r\n-        ]);\r\n-\r\n-        updateKpiCards(kpiData);\r\n-        renderPieChart(pieData);\r\n-        renderBarChart(barData);\r\n-        renderUpcomingPayments(upcomingData);\r\n-        renderTopExpensesChart(pieData);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de pizza de despesas por categoria.\r\n- */\r\n-function renderPieChart(data) {\r\n-    const canvas = document.getElementById('expensesByCategoryChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    if (expensesPieChart) {\r\n-        expensesPieChart.destroy();\r\n-    }\r\n-\r\n-    expensesPieChart = new Chart(ctx, {\r\n-        type: 'pie',\r\n-        data: {\r\n-            labels: data.map(item => item.categoryName),\r\n-            datasets: [{\r\n-                data: data.map(item => item.totalAmount),\r\n-                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n-                borderColor: '#1f2937',\r\n-                borderWidth: 2\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n- */\r\n-function renderBarChart(data) {\r\n-    const canvas = document.getElementById('monthlyExpensesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n-    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n-    const values = data.map(item => item.totalAmount);\r\n-\r\n-    if (expensesBarChart) {\r\n-        expensesBarChart.destroy();\r\n-    }\r\n-    \r\n-    expensesBarChart = new Chart(ctx, {\r\n-        type: 'bar',\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Total',\r\n-                data: values,\r\n-                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n-                borderColor: 'rgba(79, 70, 229, 1)',\r\n-                borderWidth: 1\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n-                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n-            },\r\n-            plugins: { legend: { display: false } }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Busca categorias da API e preenche um elemento <select> do HTML.\r\n- * @param {HTMLSelectElement} selectElement - O elemento dropdown a ser preenchido.\r\n- */\r\n-async function populateCategorySelect(selectElement) {\r\n-    if (!selectElement) return;\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        selectElement.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            const option = document.createElement('option');\r\n-            option.value = category._id;\r\n-            option.textContent = category.name;\r\n-            selectElement.appendChild(option);\r\n-        });\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n- * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n- */\r\n-function initializeDashboardDragAndDrop() {\r\n-    const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n-    const mainGrid = document.getElementById('dashboard-main-grid');\r\n-\r\n-    // Vamos guardar as instâncias do Sortable em variáveis\r\n-    let kpiSortable, mainSortable;\r\n-\r\n-    const saveOrder = (gridType) => {\r\n-        if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n-\r\n-        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n-        let order;\r\n-\r\n-        // Usamos a instância correta para obter a ordem\r\n-        if (gridType === 'kpi' && kpiSortable) {\r\n-            order = kpiSortable.toArray();\r\n-        } else if (gridType === 'main' && mainSortable) {\r\n-            order = mainSortable.toArray();\r\n-        }\r\n-\r\n-        if (order) {\r\n-            localStorage.setItem(key, JSON.stringify(order));\r\n-        }\r\n-    };\r\n-\r\n-    if (kpiGrid) {\r\n-        // Guardamos a instância na nossa variável\r\n-        kpiSortable = new Sortable(kpiGrid, {\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-            // A chamada agora é mais simples\r\n-            onEnd: () => saveOrder('kpi'),\r\n-        });\r\n-    }\r\n-\r\n-    if (mainGrid) {\r\n-        // Guardamos a instância na nossa variável\r\n-        mainSortable = new Sortable(mainGrid, {\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-            onEnd: () => saveOrder('main'),\r\n-        });\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Verifica o localStorage por uma ordem de cartões salva para o utilizador atual\r\n- * e, se encontrar, reordena os elementos no ecrã.\r\n- */\r\n-function applySavedDashboardOrder() {\r\n-    if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n-\r\n-    const applyOrder = (gridType) => {\r\n-        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n-        const savedOrder = localStorage.getItem(key);\r\n-        const grid = document.getElementById(`dashboard-${gridType}-grid`);\r\n-\r\n-        if (savedOrder && grid) {\r\n-            const order = JSON.parse(savedOrder);\r\n-            // Para cada id na ordem salva, encontramos o elemento correspondente\r\n-            // e o movemos para o final do container. Ao fazer isto em sequência,\r\n-            // a ordem final corresponde à ordem salva.\r\n-            order.forEach(dataId => {\r\n-                const card = grid.querySelector(`[data-id=\"${dataId}\"]`);\r\n-                if (card) {\r\n-                    grid.appendChild(card);\r\n-                }\r\n-            });\r\n-        }\r\n-    };\r\n-\r\n-    applyOrder('kpi');\r\n-    applyOrder('main');\r\n-}\r\n-\r\n-/**\r\n- * Captura a área do dashboard como uma imagem e gera um ficheiro PDF para download.\r\n- */\r\n-async function handleVisualExportPDF() {\r\n-    // Mostra o loader para dar feedback ao utilizador\r\n-    showLoader();\r\n-\r\n-    // Seleciona o elemento do DOM que queremos \"fotografar\"\r\n-    const dashboardElement = document.getElementById('dashboardView');\r\n-    \r\n-    // Esconde temporariamente os botões de filtro e exportação para não aparecerem no PDF\r\n-    const filterContainer = document.getElementById('dashboard-date-filter-container');\r\n-    if (filterContainer) filterContainer.style.display = 'none';\r\n-\r\n-    try {\r\n-        // Usa a biblioteca html2canvas para criar um \"canvas\" (uma imagem) do elemento\r\n-        const canvas = await html2canvas(dashboardElement, {\r\n-            scale: 2, // Aumenta a resolução da imagem para melhor qualidade\r\n-            backgroundColor: '#1e293b' // Garante um fundo consistente\r\n-        });\r\n-\r\n-        // Converte o canvas para uma imagem no formato PNG\r\n-        const imageData = canvas.toDataURL('image/png');\r\n-\r\n-        // Usa a biblioteca jsPDF para criar o documento\r\n-        // A orientação 'p' é retrato (portrait), 'mm' é milímetros, 'a4' é o tamanho da página\r\n-        const pdf = new jspdf.jsPDF({\r\n-            orientation: 'p',\r\n-            unit: 'mm',\r\n-            format: 'a4'\r\n-        });\r\n-\r\n-        // Calcula as dimensões da imagem para que ela caiba na página A4, mantendo a proporção\r\n-        const pageWidth = pdf.internal.pageSize.getWidth();\r\n-        const pageHeight = pdf.internal.pageSize.getHeight();\r\n-        const imageWidth = canvas.width;\r\n-        const imageHeight = canvas.height;\r\n-        const ratio = imageWidth / imageHeight;\r\n-        let pdfImageWidth = pageWidth - 20; // Deixa uma margem de 10mm de cada lado\r\n-        let pdfImageHeight = pdfImageWidth / ratio;\r\n-        \r\n-        // Se a imagem ainda for muito alta, ajusta pela altura\r\n-        if (pdfImageHeight > pageHeight - 20) {\r\n-            pdfImageHeight = pageHeight - 20;\r\n-            pdfImageWidth = pdfImageHeight * ratio;\r\n-        }\r\n-        \r\n-        // Adiciona a imagem ao PDF, centralizada\r\n-        const x = (pageWidth - pdfImageWidth) / 2;\r\n-        const y = 10; // Margem de 10mm no topo\r\n-        pdf.addImage(imageData, 'PNG', x, y, pdfImageWidth, pdfImageHeight);\r\n-\r\n-        // Força o download do ficheiro\r\n-        pdf.save('dashboard-relatorio.pdf');\r\n-\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao gerar PDF visual:\", error);\r\n-        showToast('Ocorreu um erro ao gerar o PDF.', 'error');\r\n-    } finally {\r\n-        // Mostra novamente os botões de filtro, quer a exportação tenha funcionado ou não\r\n-        if (filterContainer) filterContainer.style.display = 'block';\r\n-        // Esconde o loader\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n- * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n- */\r\n-function switchAddBillMode(mode) {\r\n-    if (!manualAddForm || !xmlAddForm || !csvImportForm || !recurrentAddForm) return;\r\n-\r\n-    // Esconde todos os painéis\r\n-    manualAddForm.classList.add('hidden');\r\n-    xmlAddForm.classList.add('hidden');\r\n-    csvImportForm.classList.add('hidden');\r\n-    recurrentAddForm.classList.add('hidden'); // Esconde o novo painel\r\n-\r\n-    // Reseta o estilo de todos os botões\r\n-    [manualAddBtn, xmlAddBtn, csvImportBtn, recurrentAddBtn].forEach(btn => { // Adiciona o novo botão\r\n-        if(btn) {\r\n-            btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-            btn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n-        }\r\n-    });\r\n-\r\n-    // Ativa o painel e o botão corretos\r\n-    let activeBtn, activeForm;\r\n-    if (mode === 'manual') {\r\n-        activeBtn = manualAddBtn;\r\n-        activeForm = manualAddForm;\r\n-    } else if (mode === 'xml') {\r\n-        activeBtn = xmlAddBtn;\r\n-        activeForm = xmlAddForm;\r\n-    } else if (mode === 'recurrent') { // Adiciona a nova condição\r\n-        activeBtn = recurrentAddBtn;\r\n-        activeForm = recurrentAddForm;\r\n-    } else if (mode === 'csv') {\r\n-        activeBtn = csvImportBtn;\r\n-        activeForm = csvImportForm;\r\n-    }\r\n-\r\n-    if (activeBtn && activeForm) {\r\n-        activeForm.classList.remove('hidden');\r\n-        activeBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n-        activeBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com a seleção de um ficheiro CSV, lê e pré-visualiza os dados.\r\n- */\r\n-function handleCsvFileSelect(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) return;\r\n-\r\n-    // Usa o PapaParse para ler o ficheiro\r\n-    Papa.parse(file, {\r\n-        header: true, // Trata a primeira linha como cabeçalho\r\n-        skipEmptyLines: true,\r\n-        complete: (results) => {\r\n-            // Guarda os dados processados no estado da aplicação\r\n-            parsedCsvData = results.data;\r\n-            renderCsvPreview(parsedCsvData);\r\n-        },\r\n-        error: (err) => {\r\n-            showToast(`Erro ao ler o ficheiro CSV: ${err.message}`, 'error');\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Renderiza a tabela de pré-visualização com os dados lidos do CSV.\r\n- */\r\n-function renderCsvPreview(data) {\r\n-    // Verificação de segurança para garantir que 'data' é um array\r\n-    if (!Array.isArray(data)) {\r\n-        console.error(\"renderCsvPreview foi chamada com dados inválidos:\", data);\r\n-        data = []; // Assume um array vazio para não quebrar a execução\r\n-    }\r\n-\r\n-    if (!csvPreviewTableBody || !csvPreviewArea || !csvImportSummary) {\r\n-        console.error(\"Elementos da pré-visualização do CSV não foram encontrados no HTML.\");\r\n-        return;\r\n-    }\r\n-\r\n-    csvPreviewTableBody.innerHTML = '';\r\n-    if (data.length === 0) {\r\n-        csvPreviewArea.classList.add('hidden');\r\n-        return;\r\n-    }\r\n-    \r\n-    const formatCurrency = (valueStr) => {\r\n-        const value = parseFloat(String(valueStr).replace(',', '.'));\r\n-        return isNaN(value) ? 'Inválido' : value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-    };\r\n-\r\n-    data.forEach(row => {\r\n-        const values = Object.values(row);\r\n-        const tr = `\r\n-            <tr>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${values[0] || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${values[1] || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${values[2] || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700 text-right\">${formatCurrency(values[3])}</td>\r\n-            </tr>\r\n-        `;\r\n-        csvPreviewTableBody.insertAdjacentHTML('beforeend', tr);\r\n-    });\r\n-\r\n-    csvImportSummary.textContent = `${data.length} boletos prontos para serem importados.`;\r\n-    csvPreviewArea.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Envia os dados do CSV para a API para serem salvos na base de dados.\r\n- */\r\n-async function handleConfirmImport() {\r\n-    if (parsedCsvData.length === 0) {\r\n-        return showToast('Não há dados para importar.', 'info');\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const response = await api.importBoletos(parsedCsvData);\r\n-        showToast(response.message, 'success');\r\n-\r\n-        // Fecha o modal e atualiza a aplicação\r\n-        addBillModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-\r\n-        // Limpa os dados da pré-visualização\r\n-        csvPreviewArea.classList.add('hidden');\r\n-        csvFileInput.value = '';\r\n-        parsedCsvData = [];\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a visibilidade e a contagem do botão de pagamento em massa.\r\n- */\r\n-function updateMassPaymentButton() {\r\n-    const count = selectedItems.size;\r\n-    selectedCountSpan.textContent = count;\r\n-    massActionsContainer.classList.toggle('hidden', count === 0);\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Pagar Selecionados\".\r\n- */\r\n-async function handleMarkSelectedAsPaid() {\r\n-    if (selectedItems.size === 0) {\r\n-        return showToast('Nenhuma parcela selecionada.', 'info');\r\n-    }\r\n-\r\n-    if (!confirm(`Tem a certeza que deseja marcar ${selectedItems.size} parcela(s) como paga(s)?`)) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const parcelIds = Array.from(selectedItems.keys());\r\n-\r\n-        // Chama a função da API com o array de IDs correto.\r\n-        const response = await api.markParcelsAsPaid(parcelIds);\r\n-\r\n-        showToast(response.message, 'success');\r\n-\r\n-        // Limpa a seleção e atualiza a interface\r\n-        selectedItems.clear();\r\n-        updateMassPaymentButton();\r\n-        await updateBillsOrganizer(); // Recarrega o calendário\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Seleciona todos os checkboxes de boletos visíveis no calendário.\r\n- */\r\n-function handleSelectAllVisible() {\r\n-    // Pega todos os checkboxes que estão atualmente no calendário\r\n-    document.querySelectorAll('.mass-payment-checkbox').forEach(checkbox => {\r\n-        // Marca apenas os que ainda não estão marcados\r\n-        if (!checkbox.checked) {\r\n-            checkbox.checked = true;\r\n-\r\n-            // --- LÓGICA CORRIGIDA ---\r\n-            const parcelId = checkbox.dataset.parcelId;\r\n-            // Pega o boletoId do elemento pai mais próximo\r\n-            const boletoId = checkbox.closest('.bill-card-draggable').dataset.boletoId;\r\n-\r\n-            // Garante que temos os dois IDs antes de adicionar ao mapa\r\n-            if (parcelId && boletoId) {\r\n-                // Usa o método .set(key, value), que é o correto para um Map\r\n-                selectedItems.set(parcelId, boletoId);\r\n-            }\r\n-        }\r\n-    });\r\n-    // Atualiza o botão para refletir a nova contagem\r\n-    updateMassPaymentButton();\r\n-}\r\n-\r\n-/**\r\n- * Desmarca todos os checkboxes de boletos selecionados.\r\n- */\r\n-function handleDeselectAll() {\r\n-    // Limpa o nosso Set de seleção\r\n-    selectedItems.clear();\r\n-    // Desmarca todos os checkboxes que estão no calendário\r\n-    document.querySelectorAll('.mass-payment-checkbox:checked').forEach(checkbox => {\r\n-        checkbox.checked = false;\r\n-    });\r\n-    // Atualiza o botão (que será escondido, pois a contagem é 0)\r\n-    updateMassPaymentButton();\r\n-}\r\n-\r\n-/**\r\n- * Busca os dados do utilizador e abre o modal de perfil.\r\n- */\r\n-async function openProfileModal() {\r\n-    // Usa as variáveis globais que já temos da inicialização\r\n-    if (!currentLoggedInUser || !currentLoggedInCompany) {\r\n-        showToast('Não foi possível carregar os dados do perfil.', 'error');\r\n-        return;\r\n-    }\r\n-\r\n-    // Preenche o modal com os dados\r\n-    profileUsername.textContent = currentLoggedInUser.username;\r\n-    profileRole.textContent = currentLoggedInUser.role;\r\n-    profileCompany.textContent = currentLoggedInCompany.nomeEmpresa;\r\n-\r\n-    // Mostra o modal\r\n-    profileModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Busca o anúncio ativo mais recente e o exibe no banner.\r\n- */\r\n-async function fetchAndDisplayAnnouncement() {\r\n-    try {\r\n-        const announcement = await api.getActiveAnnouncement();\r\n-\r\n-        // Se existir um anúncio e ele tiver uma mensagem\r\n-        if (announcement && announcement.message) {\r\n-            let messageHtml = announcement.message;\r\n-            // Se o anúncio tiver um link, transforma a mensagem num link clicável\r\n-            if (announcement.link) {\r\n-                messageHtml = `<a href=\"${announcement.link}\" target=\"_blank\" class=\"hover:underline\">${announcement.message} <i class=\"fas fa-external-link-alt fa-xs ml-1\"></i></a>`;\r\n-            }\r\n-            announcementMessage.innerHTML = messageHtml;\r\n-            globalAnnouncementBanner.classList.remove('hidden');\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(\"Não foi possível buscar o anúncio:\", error);\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-\r\n-async function handleForgotPasswordRequest(e) {\r\n-    e.preventDefault();\r\n-    const email = document.getElementById('recoveryEmailInput').value;\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.requestPasswordReset(email);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n-        forgotPasswordModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList(); // Se tiver essa função\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // CORREÇÃO: Capturamos a nova lista 'masterUsers' da API\r\n-                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-                // CORREÇÃO: Passamos a lista para a função do modal\r\n-                openCompanyDetailsModal(company, users, masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // CORREÇÃO: Capturamos a nova lista 'masterUsers'\r\n-                const { users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-\r\n-                // CORREÇÃO: Verificamos se existem usuários na lista do banco Mestre\r\n-                if (!masterUsers || masterUsers.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários (no registro mestre) para representar.', 'info');\r\n-                }\r\n-\r\n-                // CORREÇÃO: Usamos o ID do primeiro usuário da lista do banco Mestre\r\n-                const userIdToImpersonate = masterUsers[0]._id; \r\n-\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                // O resto da lógica continua igual...\r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-async function handleCalculateInstallments(e) {\r\n-    e.preventDefault(); // Impede a submissão padrão do formulário\r\n-\r\n-    const activeTabButton = document.querySelector('#addBillModal .flex button.bg-indigo-600');\r\n-    if (!activeTabButton) {\r\n-        return showToast('Erro: Não foi possível identificar a aba ativa.', 'error');\r\n-    }\r\n-    const activeModeId = activeTabButton.id;\r\n-\r\n-    currentBill = null;\r\n-\r\n-    if (activeModeId === 'manual-add-btn') {\r\n-        const billName = document.getElementById('billName').value;\r\n-        const dueDate = document.getElementById('dueDate').value;\r\n-        const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(',', '.'));\r\n-        const installments = parseInt(document.getElementById('installments').value);\r\n-        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-        const description = document.getElementById('description').value;\r\n-\r\n-        // Validação feita aqui no JavaScript\r\n-        if (!billName || !dueDate || !installments || isNaN(totalAmount) || totalAmount <= 0 || installments <= 0) {\r\n-            return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n-        }\r\n-\r\n-        currentBill = { name: billName, description, parcels: [], category: null };\r\n-        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-\r\n-        for (let i = 0; i < installments; i++) {\r\n-            const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-            parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-            currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n-        }\r\n-\r\n-    } else if (activeModeId === 'recurrent-add-btn') {\r\n-        const billName = document.getElementById('recurrentBillName').value;\r\n-        const startDate = document.getElementById('recurrentStartDate').value;\r\n-        const amount = parseFloat(document.getElementById('recurrentAmount').value);\r\n-        const months = parseInt(document.getElementById('recurrentInstallments').value);\r\n-        const description = document.getElementById('recurrentDescription').value;\r\n-\r\n-        // Validação feita aqui no JavaScript\r\n-        if (!billName || !startDate || !months || isNaN(amount) || amount <= 0 || months <= 0) {\r\n-            return showToast(\"Preencha todos os campos do pagamento recorrente.\", \"error\");\r\n-        }\r\n-\r\n-        currentBill = { name: billName, description, parcels: [], category: null };\r\n-\r\n-        for (let i = 0; i < months; i++) {\r\n-            const parcelDate = new Date(startDate + 'T00:00:00');\r\n-            parcelDate.setMonth(parcelDate.getMonth() + i);\r\n-            currentBill.parcels.push({ number: i + 1, amount: amount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n-        }\r\n-    }\r\n-\r\n-    // Este bloco só será executado se `currentBill` tiver sido preenchido com sucesso\r\n-    if (currentBill && currentBill.parcels.length > 0) {\r\n-        installmentsList.innerHTML = '';\r\n-        currentBill.parcels.forEach((parcel, index) => {\r\n-             installmentsList.insertAdjacentHTML('beforeend', `\r\n-                <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                    <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                    <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                    <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                    <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                </div>\r\n-            `);\r\n-        });\r\n-\r\n-        addEventListenersToInstallmentInputs();\r\n-        updatePreviewTotal();\r\n-        previewBillNameInput.value = currentBill.name;\r\n-        previewNfeNumber.textContent = 'N/A';\r\n-        addBillModal.classList.add('hidden');\r\n-        await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n-        installmentsPreviewModal.classList.remove('hidden');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n- */\r\n-function updatePreviewTotal() {\r\n-    if (!currentBill.parcels) return;\r\n-    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    currentBill.category = document.getElementById('previewBillCategorySelect').value || null;\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill); // O objeto currentBill agora tem a categoria correta\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-        clearBillForm();\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-\r\n-    // Guarda os dados atualizados do formulário\r\n-    const updatedParcelData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    const updatedBillData = {\r\n-        category: modalBillCategorySelect.value || null\r\n-    };\r\n-\r\n-    // Encontra o boleto pai na nossa lista local\r\n-    const parentBoleto = userBoletos.find(b => b._id === selectedParcel.parentId);\r\n-\r\n-    // Verifica se a parcela é recorrente (se o boleto pai tem mais de 1 parcela)\r\n-    if (parentBoleto && parentBoleto.parcels.length > 1) {\r\n-        // Se for recorrente, guarda os dados e abre o modal de escolha\r\n-        pendingUpdateData = { updatedParcelData, updatedBillData };\r\n-\r\n-        // Atualiza a data no texto do botão para dar mais contexto ao utilizador\r\n-        const date = new Date(updatedParcelData.dueDate + 'T00:00:00');\r\n-        singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n-\r\n-        recurrentEditModal.classList.remove('hidden');\r\n-    } else {\r\n-        // Se não for recorrente, salva diretamente como antes\r\n-        showLoader();\r\n-        try {\r\n-            await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n-            await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n-            showToast('Alterações salvas com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            await updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- * Verifica a sessão e o estado da assinatura.\r\n- */\r\n-async function initializeApp() {\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n-    const action = urlParams.get('action');\r\n-\r\n-    if (action === 'forgot_password') {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    const token = localStorage.getItem('authToken');\r\n-\r\n-    if (!token) {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        showAdminLogin();\r\n-    } finally {\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-function logout() {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-\r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        // CORREÇÃO: Buscamos os detalhes da empresa, que agora incluem 'users' (do tenant)\r\n-        // e 'masterUsers' (do banco mestre).\r\n-        const { users, masterUsers } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n-\r\n-        companyUsersList.innerHTML = ''; \r\n-\r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        // Usamos a lista de 'masterUsers' para construir o modal, pois ela tem os IDs corretos.\r\n-        if (masterUsers && masterUsers.length > 0) {\r\n-            masterUsers.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-\r\n-                const roleOptions = assignableRoles.map(role =>\r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                const roleHtml = isOwner\r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    // CORREÇÃO: O data-user-id agora usa o ID do masterUser\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-\r\n-        // Adiciona evento de clique para remover (precisará de ajuste futuro se necessário)\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            // ...\r\n-        });\r\n-\r\n-        // Adiciona evento para alterar o cargo (agora com o ID correto)\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n-                const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n-\r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    // Lógica para reverter a seleção visual\r\n-                    const originalUser = (await api.getCompanyDetails(companyId)).masterUsers.find(u => u._id === userId);\r\n-                    if(originalUser) e.target.value = originalUser.role;\r\n-                    return;\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    // A chamada à API agora envia o ID correto\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n- * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n- * @param {Event} event - O evento 'change' do input do ficheiro.\r\n- */\r\n-async function handleNfeXmlUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) {\r\n-        return;\r\n-    }\r\n-\r\n-    const reader = new FileReader();\r\n-\r\n-    reader.onload = async (e) => {\r\n-        try {\r\n-            const xmlString = e.target.result;\r\n-            const parser = new DOMParser();\r\n-            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-\r\n-            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n-                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n-            }\r\n-\r\n-            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n-            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n-            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-\r\n-            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n-            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n-            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n-\r\n-            let parcelsData = [];\r\n-\r\n-            if (duplicatas.length > 0) {\r\n-                parcelsData = duplicatas.map((dup, i) => ({\r\n-                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n-                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n-                    dueDate: getTagValue(\"dVenc\", dup)\r\n-                }));\r\n-            } else {\r\n-                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n-                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n-\r\n-                if (cobrancaMatch && cobrancaMatch[1]) {\r\n-                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n-                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n-                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n-                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n-\r\n-                    parcelsData = dias.map((dia, i) => {\r\n-                        const vencimento = new Date(dataEmissao);\r\n-                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n-                        return {\r\n-                            number: i + 1,\r\n-                            amount: parcelAmount,\r\n-                            dueDate: vencimento.toISOString().split('T')[0]\r\n-                        };\r\n-                    });\r\n-                }\r\n-            }\r\n-\r\n-            if (parcelsData.length > 0) {\r\n-                // ALTERAÇÃO AQUI: Removemos o prefixo \"NFe - \" do nome.\r\n-                currentBill = { name: nomeFornecedor, nfeNumber: nfeNumber, parcels: parcelsData };\r\n-\r\n-                installmentsList.innerHTML = '';\r\n-                currentBill.parcels.forEach((parcel, index) => {\r\n-                    installmentsList.insertAdjacentHTML('beforeend', `\r\n-                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                        </div>\r\n-                    `);\r\n-                });\r\n-\r\n-                addEventListenersToInstallmentInputs();\r\n-                updatePreviewTotal();\r\n-                previewBillNameInput.value = currentBill.name;\r\n-                previewNfeNumber.textContent = nfeNumber;\r\n-                await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n-                installmentsPreviewModal.classList.remove('hidden');\r\n-\r\n-            } else {\r\n-                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n-                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n-\r\n-                // ALTERAÇÃO AQUI TAMBÉM: Removemos o prefixo no caso de fallback.\r\n-                document.getElementById('billName').value = nomeFornecedor;\r\n-                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n-                if (vencimento) {\r\n-                    document.getElementById('dueDate').value = vencimento;\r\n-                }\r\n-\r\n-                addBillModal.classList.remove('hidden');\r\n-            }\r\n-\r\n-            showToast('Dados do XML carregados com sucesso!', 'success');\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            console.error(\"Erro ao processar XML:\", error);\r\n-        } finally {\r\n-            event.target.value = '';\r\n-        }\r\n-    };\r\n-\r\n-    reader.onerror = () => {\r\n-        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n-    };\r\n-\r\n-    reader.readAsText(file);\r\n-}\r\n-\r\n-/**\r\n- * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n- */\r\n-function addEventListenersToInstallmentInputs() {\r\n-    // Listener para o campo de VALOR\r\n-    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n-            }\r\n-            updatePreviewTotal();\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de DATA\r\n-    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-        input.addEventListener('change', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    /**\r\n-     * Mostra a tela de login de administrador.\r\n-     */\r\n-    function showAdminLogin() {\r\n-        hideAllScreens(); // Função de utils.js\r\n-        if (adminLoginForm) adminLoginForm.reset();\r\n-        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    // Listener para o campo de CÓDIGO DE BARRAS\r\n-    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n-        // Evento para guardar o valor quando é digitado\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].barcode = e.target.value;\r\n-            }\r\n-        });\r\n-\r\n-        input.addEventListener('keydown', (e) => {\r\n-            if (e.key === 'Enter') {\r\n-                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n-\r\n-                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n-                const nextIndex = currentIndex + 1;\r\n-                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n-\r\n-                if (nextInput) {\r\n-                    // Se houver um próximo campo de código de barras, foca nele.\r\n-                    nextInput.focus();\r\n-                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n-                } else {\r\n-                    // Se for o último campo, foca no botão de salvar.\r\n-                    document.getElementById('addToOrganizer').focus();\r\n-                }\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n- */\r\n-function handleShowFullScreenBarcode() {\r\n-    const barcodeValue = modalBillBarcodeInput.value;\r\n-    if (!barcodeValue) {\r\n-        return showToast('Não há código de barras para mostrar.', 'info');\r\n-    }\r\n-\r\n-    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n-    if (!barcodeImageContainer) return;\r\n-\r\n-    // Limpa qualquer código de barras anterior\r\n-    barcodeImageContainer.innerHTML = '';\r\n-\r\n-    try {\r\n-        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n-        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n-\r\n-        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n-        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n-            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n-            lineColor: \"#000000\",\r\n-            width: 2,\r\n-            height: 100,\r\n-            displayValue: true, // Mostra os números abaixo das barras\r\n-            fontSize: 18\r\n-        });\r\n-\r\n-        // Mostra o modal de ecrã inteiro\r\n-        barcodeFullScreenModal.classList.remove('hidden');\r\n-\r\n-    } catch (e) {\r\n-        console.error(\"Erro ao gerar código de barras:\", e);\r\n-        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n-    }\r\n-}\r\n-\r\n-async function handleAttachmentUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file || !selectedParcel) return;\r\n-\r\n-    // Cria um objeto FormData para enviar o ficheiro\r\n-    const formData = new FormData();\r\n-    formData.append('comprovante', file);\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Atualiza a UI para mostrar o link do novo anexo\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n-\r\n-        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para remover um anexo de comprovativo.\r\n- * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n- */\r\n-async function handleRemoveAttachment() {\r\n-    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n-    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader(); // Mostra o ícone de carregamento\r\n-    try {\r\n-        // Chama a nossa função da API para apagar o anexo\r\n-        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n-\r\n-        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-\r\n-        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-\r\n-        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n-        await updateBillsOrganizer();\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n- */\r\n-function applyFiltersAndSearch() {\r\n-    const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n-    const selectedCategoryId = categoryFilterSelect.value;\r\n-\r\n-    let filteredBoletos = userBoletos.filter(bill => {\r\n-        // Filtro de pesquisa\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n-            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        if (!matchesSearch) return false;\r\n-\r\n-        // Filtro de categoria\r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-        if (!matchesCategory) return false;\r\n-\r\n-        // Filtro de status\r\n-        if (activeStatusFilter === 'all') return true;\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        return bill.parcels.some(parcel => {\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n-            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n-            return false;\r\n-        });\r\n-    });\r\n-\r\n-    renderCalendar(filteredBoletos);\r\n-    updateMonthlySummary(filteredBoletos);\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n- * agora com lógica para parcelas recorrentes.\r\n- */\r\n-function initializeDragAndDrop() {\r\n-    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n-\r\n-    dayCells.forEach(cell => {\r\n-        new Sortable(cell, {\r\n-            group: 'calendar-bills',\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-\r\n-            onEnd: async function (evt) {\r\n-                const item = evt.item;\r\n-                const toCell = evt.to;\r\n-                const boletoId = item.dataset.boletoId;\r\n-                const parcelId = item.dataset.parcelId;\r\n-                const newDate = toCell.dataset.date;\r\n-\r\n-                if (!boletoId || !parcelId || !newDate) return;\r\n-\r\n-                const parentBoleto = userBoletos.find(b => b._id === boletoId);\r\n-                const originalParcel = parentBoleto?.parcels.find(p => p._id === parcelId);\r\n-\r\n-                if (!parentBoleto || !originalParcel) return;\r\n-\r\n-                if (parentBoleto.parcels.length > 1) {\r\n-                    // --- CORREÇÃO AQUI ---\r\n-                    // 1. Definimos a variável 'selectedParcel' que estava em falta.\r\n-                    selectedParcel = { ...originalParcel, parentId: parentBoleto._id };\r\n-\r\n-                    // 2. O resto da lógica continua a mesma\r\n-                    const updatedParcelData = {\r\n-                        ...originalParcel,\r\n-                        dueDate: newDate,\r\n-                    };\r\n-\r\n-                    pendingUpdateData = { \r\n-                        updatedParcelData, \r\n-                        updatedBillData: { category: parentBoleto.category?._id || null }\r\n-                    };\r\n-\r\n-                    const date = new Date(newDate + 'T00:00:00');\r\n-                    singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n-\r\n-                    recurrentEditModal.classList.remove('hidden');\r\n-                    renderCalendar();\r\n-\r\n-                } else {\r\n-                    // Lógica para parcela única (continua a mesma)\r\n-                    showLoader();\r\n-                    try {\r\n-                        await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n-                        showToast('Data da parcela atualizada com sucesso!', 'success');\r\n-                        await updateBillsOrganizer();\r\n-                    } catch (error) {\r\n-                        showToast(error.message, 'error');\r\n-                        await updateBillsOrganizer();\r\n-                    } finally {\r\n-                        hideLoader();\r\n-                    }\r\n-                }\r\n-            },\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Calcula o startDate e endDate com base numa predefinição do seletor.\r\n- * @returns {{startDate?: string, endDate?: string}} - As datas ou um objeto vazio.\r\n- */\r\n-function getDateRangeFromPreset() {\r\n-    const preset = dateRangePresetSelect.value;\r\n-    const now = new Date();\r\n-    let startDate, endDate;\r\n-\r\n-    switch (preset) {\r\n-        case 'thisMonth':\r\n-            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n-            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n-            break;\r\n-        case 'lastMonth':\r\n-            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n-            endDate = new Date(now.getFullYear(), now.getMonth(), 0);\r\n-            break;\r\n-        case 'thisQuarter':\r\n-            const quarter = Math.floor(now.getMonth() / 3);\r\n-            startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n-            endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n-            break;\r\n-        case 'thisYear':\r\n-            startDate = new Date(now.getFullYear(), 0, 1);\r\n-            endDate = new Date(now.getFullYear(), 11, 31);\r\n-            break;\r\n-        case 'custom':\r\n-            if (startDateInput.value && endDateInput.value) {\r\n-                return {\r\n-                    startDate: startDateInput.value,\r\n-                    endDate: endDateInput.value\r\n-                };\r\n-            }\r\n-            return {}; // Retorna vazio se o intervalo personalizado não estiver completo\r\n-        default:\r\n-            return {}; // Padrão sem filtro\r\n-    }\r\n-\r\n-    // Formata as datas para o formato YYYY-MM-DD\r\n-    return {\r\n-        startDate: startDate.toISOString().split('T')[0],\r\n-        endDate: endDate.toISOString().split('T')[0]\r\n-    };\r\n-}\r\n-\r\n-/**\r\n- * Renderiza a lista de próximos vencimentos no dashboard.\r\n- * @param {Array} payments - A lista de pagamentos vinda da API.\r\n- */\r\n-function renderUpcomingPayments(payments) {\r\n-    if (!upcomingPaymentsList || !noUpcomingPaymentsMessage) return;\r\n-\r\n-    upcomingPaymentsList.innerHTML = ''; // Limpa a lista\r\n-\r\n-    if (payments.length === 0) {\r\n-        upcomingPaymentsList.appendChild(noUpcomingPaymentsMessage);\r\n-        noUpcomingPaymentsMessage.classList.remove('hidden');\r\n-    } else {\r\n-        noUpcomingPaymentsMessage.classList.add('hidden');\r\n-        const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-        payments.forEach(payment => {\r\n-            const dueDate = new Date(payment.dueDate + 'T00:00:00');\r\n-            const formattedDate = dueDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\r\n-\r\n-            const paymentHtml = `\r\n-                <div class=\"flex items-center justify-between bg-gray-700/50 p-3 rounded-md\">\r\n-                    <div>\r\n-                        <p class=\"font-medium text-white\">${payment.billName} (${payment.parcelNumber}ª)</p>\r\n-                        <p class=\"text-sm text-gray-400\">Vence em: ${formattedDate}</p>\r\n-                    </div>\r\n-                    <p class=\"font-semibold text-lg text-yellow-400\">${formatCurrency(payment.amount)}</p>\r\n-                </div>\r\n-            `;\r\n-            upcomingPaymentsList.insertAdjacentHTML('beforeend', paymentHtml);\r\n-        });\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de barras horizontais com as 5 maiores despesas por categoria.\r\n- * @param {Array} data - Os dados de despesas vindos da API.\r\n- */\r\n-function renderTopExpensesChart(data) {\r\n-    const canvas = document.getElementById('topExpensesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    // Destrói o gráfico anterior, se existir, para evitar sobreposições\r\n-    if (topExpensesChart) {\r\n-        topExpensesChart.destroy();\r\n-    }\r\n-    \r\n-    // 1. Ordena os dados do maior para o menor\r\n-    const sortedData = [...data].sort((a, b) => b.totalAmount - a.totalAmount);\r\n-    \r\n-    // 2. Pega apenas nos 5 primeiros resultados\r\n-    const top5Data = sortedData.slice(0, 5);\r\n-\r\n-    // 3. Prepara os dados para o Chart.js\r\n-    const labels = top5Data.map(item => item.categoryName);\r\n-    const values = top5Data.map(item => item.totalAmount);\r\n-\r\n-    topExpensesChart = new Chart(ctx, {\r\n-        type: 'bar', // Tipo de gráfico\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Total Gasto',\r\n-                data: values,\r\n-                backgroundColor: 'rgba(239, 68, 68, 0.6)', // Vermelho\r\n-                borderColor: 'rgba(239, 68, 68, 1)',\r\n-                borderWidth: 1\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            indexAxis: 'y', // <-- Isto é o que torna o gráfico horizontal!\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                x: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n-                y: { ticks: { color: '#d1d5db' }, grid: { display: false } }\r\n-            },\r\n-            plugins: {\r\n-                legend: { display: false },\r\n-                tooltip: {\r\n-                    callbacks: {\r\n-                        label: function(context) {\r\n-                            return ` Total: ${context.raw.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-                        }\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de alteração de senha.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleChangePassword(e) {\r\n-    e.preventDefault(); // Impede o recarregamento da página\r\n-\r\n-    const currentPassword = document.getElementById('currentPassword').value;\r\n-    const newPassword = document.getElementById('newPassword').value;\r\n-    const confirmPassword = document.getElementById('confirmPassword').value;\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.changePassword({ currentPassword, newPassword, confirmPassword });\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Limpa os campos e fecha o modal após o sucesso\r\n-        changePasswordForm.reset();\r\n-        profileModal.classList.add('hidden');\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', async () => {\r\n-// --- Lógica de inicialização que estava em initializeApp() ---\r\n-const today = new Date();\r\n-currentMonth = today.getMonth();\r\n-currentYear = today.getFullYear();\r\n-\r\n-const token = localStorage.getItem('authToken');\r\n-if (!token) {\r\n-    // Se não houver token, redireciona para a página de login\r\n-    window.location.href = 'Index.html';\r\n-    return;\r\n-}\r\n-\r\n-try {\r\n-    const data = await api.checkSession();\r\n-    if (data.user.role === 'SuperAdmin') {\r\n-        isAdminLoggedIn = true;\r\n-        await showAdminDashboard();\r\n-    } else {\r\n-        currentLoggedInUser = data.user;\r\n-        currentLoggedInCompany = data.company;\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            await showMainApp();\r\n-        } else {\r\n-            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                // Se for o dono da empresa, mostra o modal para renovar\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    }\r\n-} catch (error) {\r\n-    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n-    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n-    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    setTimeout(() => {\r\n-        window.location.href = 'Index.html';\r\n-    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n-} finally {\r\n-    // Esconde a tela de carregamento inicial\r\n-    document.getElementById('loadingScreen').classList.add('hidden');\r\n-}\r\n-\r\n-\r\n-// Submissão de formulários\r\n-if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-if (logoutBtn) {\r\n-    logoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-\r\n-\r\n-// Ações na App Principal\r\n-addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-// Ações do Modal de Edição de Boleto\r\n-closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-// Navegação do Calendário\r\n-prevMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-    if (currentMonth === 11) currentYear--;\r\n-    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-\r\n-nextMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-    if (currentMonth === 0) currentYear++;\r\n-    // A mesma mudança aqui\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-}\r\n-\r\n-if (openAddBillModalBtn) {\r\n-    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-}\r\n-\r\n-const handleRedirectToHome = () => {\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-const handleFullLogoutAndRedirect = () => {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-if (subscriptionLogoutBtn) {\r\n-    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-}\r\n-\r\n-if (blockedAccessLogoutBtn) {\r\n-    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-\r\n-// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-if (settingsBtn) {\r\n-    settingsBtn.addEventListener('click', (e) => {\r\n-        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-        settingsDropdown.classList.toggle('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Links dentro do menu dropdown\r\n-if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCompanyInfoModal();\r\n-});\r\n-\r\n-if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openPermissionsModal();\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n-\r\n-// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openManageUsersModal();\r\n-});\r\n-\r\n-// Botões do modal de gerir utilizadores\r\n-if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-    manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-    openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n-});\r\n-\r\n-/**\r\n- * Lida com o clique no botão de criar/renovar assinatura.\r\n- */\r\n-async function handleCreateSubscription() {\r\n-    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-    subscriptionActionBtn.disabled = true;\r\n-    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-    try {\r\n-        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-        const data = await api.createSubscriptionLink();\r\n-\r\n-        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-        if (data.init_point) {\r\n-            window.location.href = data.init_point;\r\n-        } else {\r\n-            throw new Error('Link de pagamento não recebido.');\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-        subscriptionActionBtn.disabled = false;\r\n-        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-    }\r\n-}\r\n-\r\n-// Liga a função ao clique do botão.\r\n-if (subscriptionActionBtn) {\r\n-    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-}\r\n-\r\n-if (closePreviewModalBtn) {\r\n-    closePreviewModalBtn.addEventListener('click', () => {\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-if (nfeXmlInput) {\r\n-    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-}\r\n-\r\n-if (previewBillNameInput) {\r\n-    previewBillNameInput.addEventListener('input', (e) => {\r\n-        if (currentBill) {\r\n-            currentBill.name = e.target.value;\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Liga a função ao clique do botão\r\n-if (showFullScreenBarcodeBtn) {\r\n-    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-}\r\n-\r\n-// Listener para o campo de pesquisa\r\n-if (searchInput) {\r\n-    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Listeners para os botões de filtro\r\n-if (filterButtons) {\r\n-    filterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões\r\n-            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona a classe 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Aplica o filtro\r\n-            applyFiltersAndSearch();\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCategoriesModal();\r\n-});\r\n-\r\n-if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-if (addCategoryForm) {\r\n-    addCategoryForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const name = newCategoryNameInput.value.trim();\r\n-        if (!name) return;\r\n-        try {\r\n-            await api.createCategory(name);\r\n-            newCategoryNameInput.value = '';\r\n-            await openCategoriesModal(); // Recarrega a lista do modal\r\n-            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-if (categoryListDiv) {\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-if (categoryFilterSelect) {\r\n-    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Configuração dos botões do dashboard\r\n-if (viewCalendarBtn) {\r\n-    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-}\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-if (dateRangePresetSelect) {\r\n-    dateRangePresetSelect.addEventListener('change', () => {\r\n-        const isCustom = dateRangePresetSelect.value === 'custom';\r\n-        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n-\r\n-        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n-        // o dashboard é atualizado imediatamente.\r\n-        if (!isCustom) {\r\n-            renderDashboard();\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Para o intervalo personalizado, atualizamos o dashboard\r\n-// assim que ambas as datas estiverem preenchidas.\r\n-if (startDateInput) {\r\n-    startDateInput.addEventListener('change', () => {\r\n-        if (endDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-if (endDateInput) {\r\n-    endDateInput.addEventListener('change', () => {\r\n-        if (startDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-// Listeners para os botões de exportação\r\n-const handleExport = (format) => {\r\n-    // 1. Pega no período de tempo atual do filtro do dashboard\r\n-    const dateRange = getDateRangeFromPreset();\r\n-\r\n-    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n-    const queryString = new URLSearchParams(dateRange).toString();\r\n-\r\n-    // 3. Monta o URL completo para o download\r\n-    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n-    \r\n-    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n-    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n-    fetch(downloadUrl, {\r\n-        headers: {\r\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n-        }\r\n-    })\r\n-    .then(res => res.blob())\r\n-    .then(blob => {\r\n-        const url = window.URL.createObjectURL(blob);\r\n-        const a = document.createElement('a');\r\n-        a.style.display = 'none';\r\n-        a.href = url;\r\n-        a.download = `relatorio-despesas.${format}`;\r\n-        document.body.appendChild(a);\r\n-        a.click();\r\n-        window.URL.revokeObjectURL(url);\r\n-        a.remove();\r\n-    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n-};\r\n-\r\n-if (exportCsvBtn) {\r\n-    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n-}\r\n-if (exportPdfBtn) {\r\n-    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n-}\r\n-\r\n-if (manualAddBtn) {\r\n-    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-}\r\n-if (xmlAddBtn) {\r\n-    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-}\r\n-\r\n-if (csvImportBtn) {\r\n-    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n-}\r\n-if (csvFileInput) {\r\n-    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n-}\r\n-if (importCsvBtn) {\r\n-    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n-}\r\n-if (markSelectedAsPaidBtn) {\r\n-    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n-}\r\n-if (selectAllVisibleBtn) {\r\n-    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n-}\r\n-\r\n-if (deselectAllVisibleBtn) {\r\n-    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n-}\r\n-if (dashboardFilterButtons) {\r\n-    dashboardFilterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões do dashboard\r\n-            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Atualiza a variável de estado com o novo filtro\r\n-            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n-            // Renderiza o dashboard novamente com os dados filtrados\r\n-            renderDashboard();\r\n-        });\r\n-    });\r\n-}\r\n-// Abre o modal de alteração de categoria\r\n-if (changeCategoryBtn) {\r\n-    changeCategoryBtn.addEventListener('click', async () => {\r\n-        showLoader();\r\n-        // Popula o dropdown do modal com as categorias existentes\r\n-        await populateCategorySelect(batchCategorySelect);\r\n-        hideLoader();\r\n-        categoryBatchModal.classList.remove('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de cancelar no modal\r\n-if (cancelCategoryBatchBtn) {\r\n-    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n-        categoryBatchModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de confirmar a alteração\r\n-if (confirmCategoryBatchBtn) {\r\n-    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n-        const categoryId = batchCategorySelect.value;\r\n-        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n-        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n-\r\n-        if (boletoIds.length === 0) {\r\n-            return showToast('Nenhum item selecionado.', 'info');\r\n-        }\r\n-\r\n-        showLoader();\r\n-        try {\r\n-            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n-            showToast(response.message, 'success');\r\n-            selectedItems.clear();\r\n-            updateMassPaymentButton();\r\n-            await updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-            categoryBatchModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-}\r\n-if (openProfileModalBtn) {\r\n-    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n-}\r\n-if (closeProfileModalBtn) {\r\n-    closeProfileModalBtn.addEventListener('click', () => {\r\n-        profileModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-if (changePasswordForm) {\r\n-    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n-}\r\n-if (resendVerificationBtn) {\r\n-    resendVerificationBtn.addEventListener('click', async () => {\r\n-        resendVerificationBtn.disabled = true;\r\n-        resendVerificationBtn.textContent = 'A reenviar...';\r\n-\r\n-        try {\r\n-            const data = await api.resendVerificationEmail();\r\n-            showToast(data.message, 'success');\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            resendVerificationBtn.disabled = false;\r\n-            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n-        }\r\n-    });\r\n-}\r\n-if (recurrentAddBtn) {\r\n-    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n-}\r\n-if (recurrentEditModal) {\r\n-    // Botões de escolha (Somente esta, futuras, todas)\r\n-    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const scope = e.currentTarget.dataset.scope;\r\n-            if (!pendingUpdateData || !selectedParcel) return;\r\n-\r\n-            recurrentEditModal.classList.add('hidden');\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a nova rota da API com o escopo escolhido\r\n-                await api.bulkUpdateParcels(\r\n-                    selectedParcel.parentId, \r\n-                    selectedParcel._id, \r\n-                    pendingUpdateData.updatedParcelData, \r\n-                    scope\r\n-                );\r\n-\r\n-                // Atualiza a categoria do boleto, se foi alterada\r\n-                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n-\r\n-                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n-                billModal.classList.add('hidden');\r\n-                await updateBillsOrganizer();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-                pendingUpdateData = null; // Limpa os dados pendentes\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Botão de cancelar\r\n-    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n-        recurrentEditModal.classList.add('hidden');\r\n-        pendingUpdateData = null; // Limpa os dados pendentes\r\n-    });\r\n-}\r\n-\r\n-// CHAME A NOVA FUNÇÃO AQUI\r\n-initializeDashboardDragAndDrop(); \r\n-\r\n-\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753808660378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1586,98 +1586,8 @@\n }\r\n \r\n \r\n \r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // CORREÇÃO: Capturamos a nova lista 'masterUsers' da API\r\n-                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-                // CORREÇÃO: Passamos a lista para a função do modal\r\n-                openCompanyDetailsModal(company, users, masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // CORREÇÃO: Capturamos a nova lista 'masterUsers'\r\n-                const { users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-\r\n-                // CORREÇÃO: Verificamos se existem usuários na lista do banco Mestre\r\n-                if (!masterUsers || masterUsers.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários (no registro mestre) para representar.', 'info');\r\n-                }\r\n-\r\n-                // CORREÇÃO: Usamos o ID do primeiro usuário da lista do banco Mestre\r\n-                const userIdToImpersonate = masterUsers[0]._id; \r\n-\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                // O resto da lógica continua igual...\r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n-\r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n async function handleCalculateInstallments(e) {\r\n     e.preventDefault(); // Impede a submissão padrão do formulário\r\n \r\n     const activeTabButton = document.querySelector('#addBillModal .flex button.bg-indigo-600');\r\n"
                },
                {
                    "date": 1753808737505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -558,59 +558,10 @@\n     });\r\n }\r\n \r\n \r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n- */\r\n-function openCompanyDetailsModal(company, users, masterUsers) {\r\n-    selectedCompanyForAdmin = company;\r\n \r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n \r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (masterUsers && masterUsers.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        masterUsers.forEach(user => {\r\n-            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n-\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona os eventos DEPOIS de criar os botões\r\n-    addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-}\r\n-\r\n /**\r\n  * Abre o modal para adicionar um novo utilizador.\r\n  */\r\n function openAddUserModal() {\r\n"
                },
                {
                    "date": 1753809094184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n // =================================================================================\r\n import { API_BASE_URL } from './config.js';\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+import { showAdminDashboard } from './admin.js';\r\n \r\n \r\n // =================================================================================\r\n // ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n@@ -503,65 +504,13 @@\n /**\r\n  * Adiciona os eventos de clique e mudança aos elementos dinâmicos do modal de detalhes da empresa.\r\n  * Esta é a função que estava em falta.\r\n  */\r\n-function addEventListenersToCompanyDetailsModal() {\r\n-    // Evento para os seletores de cargo (role)\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n \r\n-            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n-                return;\r\n-            }\r\n \r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                // Recarrega os dados do modal para garantir consistência\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n \r\n-    // Evento para os botões de remover utilizador\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.currentTarget.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n \r\n-            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n-                return;\r\n-            }\r\n \r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                // Recarrega os dados do modal\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n /**\r\n  * Abre o modal para adicionar um novo utilizador.\r\n  */\r\n function openAddUserModal() {\r\n@@ -618,80 +567,16 @@\n }\r\n \r\n // --- Handlers para os botões DENTRO do modal ---\r\n \r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n \r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n \r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n \r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n \r\n+\r\n+\r\n+\r\n+\r\n /**\r\n  * Configura e exibe o modal de assinatura para o Proprietário.\r\n  * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n  */\r\n@@ -724,48 +609,16 @@\n \r\n /**\r\n  * Abre o modal para criar uma nova empresa.\r\n  */\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n \r\n+\r\n /**\r\n  * Fecha o modal de criar empresa.\r\n  */\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n \r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n \r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n \r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n \r\n /**\r\n  * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n  */\r\n"
                },
                {
                    "date": 1753809720102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2347,23 +2347,9 @@\n }\r\n \r\n \r\n // Submissão de formulários\r\n-if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n-if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n-if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n"
                },
                {
                    "date": 1753809941370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2347,9 +2347,8 @@\n }\r\n \r\n \r\n // Submissão de formulários\r\n-if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n"
                },
                {
                    "date": 1753810037374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -509,23 +509,9 @@\n \r\n \r\n \r\n \r\n-/**\r\n- * Abre o modal para adicionar um novo utilizador.\r\n- */\r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n \r\n-/**\r\n- * Fecha o modal de adicionar utilizador.\r\n- */\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n \r\n /**\r\n  * Lida com a submissão do formulário de novo utilizador.\r\n  * @param {Event} e - O evento de submissão do formulário.\r\n"
                },
                {
                    "date": 1753810079262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -501,19 +501,8 @@\n     return element?.textContent || '';\r\n }\r\n \r\n /**\r\n- * Adiciona os eventos de clique e mudança aos elementos dinâmicos do modal de detalhes da empresa.\r\n- * Esta é a função que estava em falta.\r\n- */\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-/**\r\n  * Lida com a submissão do formulário de novo utilizador.\r\n  * @param {Event} e - O evento de submissão do formulário.\r\n  */\r\n async function handleAddUserSubmit(e) {\r\n"
                },
                {
                    "date": 1753810154792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -500,48 +500,10 @@\n     const element = parentElement?.getElementsByTagName(tagName)[0];\r\n     return element?.textContent || '';\r\n }\r\n \r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n \r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n-    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n \r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        // Passa os novos dados para a função da API\r\n-        const data = await api.registerUser(username, password, email, role, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n-\r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n // --- Handlers para os botões DENTRO do modal ---\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1753810220385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1572,34 +1572,10 @@\n \r\n /**\r\n  * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n  */\r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n \r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n \r\n-    if (!adminToken) {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n-    }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-\r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n-}\r\n-\r\n /**\r\n  * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n  */\r\n async function openManageUsersModal() {\r\n"
                },
                {
                    "date": 1753810410451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -500,20 +500,8 @@\n     const element = parentElement?.getElementsByTagName(tagName)[0];\r\n     return element?.textContent || '';\r\n }\r\n \r\n-\r\n-\r\n-// --- Handlers para os botões DENTRO do modal ---\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n /**\r\n  * Configura e exibe o modal de assinatura para o Proprietário.\r\n  * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n  */\r\n@@ -1569,16 +1557,8 @@\n     localStorage.removeItem('superAdminToken');\r\n     window.location.href = 'Index.html';\r\n }\r\n \r\n-/**\r\n- * Lida com o clique no botão \"Voltar ao Admin\", restaurando a sessão do SuperAdmin.\r\n- */\r\n-\r\n-\r\n-/**\r\n- * Abre o modal para o Proprietário gerir os utilizadores da sua empresa.\r\n- */\r\n async function openManageUsersModal() {\r\n     showLoader();\r\n     try {\r\n         // CORREÇÃO: Buscamos os detalhes da empresa, que agora incluem 'users' (do tenant)\r\n"
                },
                {
                    "date": 1753810831809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1557,88 +1557,10 @@\n     localStorage.removeItem('superAdminToken');\r\n     window.location.href = 'Index.html';\r\n }\r\n \r\n-async function openManageUsersModal() {\r\n-    showLoader();\r\n-    try {\r\n-        // CORREÇÃO: Buscamos os detalhes da empresa, que agora incluem 'users' (do tenant)\r\n-        // e 'masterUsers' (do banco mestre).\r\n-        const { users, masterUsers } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n \r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n \r\n-        companyUsersList.innerHTML = ''; \r\n-\r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        // Usamos a lista de 'masterUsers' para construir o modal, pois ela tem os IDs corretos.\r\n-        if (masterUsers && masterUsers.length > 0) {\r\n-            masterUsers.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-\r\n-                const roleOptions = assignableRoles.map(role =>\r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                const roleHtml = isOwner\r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    // CORREÇÃO: O data-user-id agora usa o ID do masterUser\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-\r\n-        // Adiciona evento de clique para remover (precisará de ajuste futuro se necessário)\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            // ...\r\n-        });\r\n-\r\n-        // Adiciona evento para alterar o cargo (agora com o ID correto)\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n-                const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n-\r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    // Lógica para reverter a seleção visual\r\n-                    const originalUser = (await api.getCompanyDetails(companyId)).masterUsers.find(u => u._id === userId);\r\n-                    if(originalUser) e.target.value = originalUser.role;\r\n-                    return;\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    // A chamada à API agora envia o ID correto\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        manageUsersModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n /**\r\n  * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n  * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n  * @param {Event} event - O evento 'change' do input do ficheiro.\r\n"
                },
                {
                    "date": 1753811112054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,13 +37,9 @@\n // =================================================================================\r\n // ELEMENTOS DO DOM - Referências aos elementos HTML\r\n // =================================================================================\r\n \r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n const mainAppContent = document.getElementById('mainAppContent');\r\n const logoutBtn = document.getElementById('logoutBtn');\r\n const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n@@ -53,16 +49,11 @@\n const prevMonthBtn = document.getElementById('prevMonth');\r\n const nextMonthBtn = document.getElementById('nextMonth');\r\n const calendarDays = document.getElementById('calendarDays');\r\n const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const summaryOverdue = document.getElementById('summaryOverdue');\r\n-const summaryTotal = document.getElementById('summaryTotal');\r\n-const summaryPaid = document.getElementById('summaryPaid');\r\n-const summaryUnpaid = document.getElementById('summaryUnpaid');\r\n const billForm = document.getElementById('billForm');\r\n const addBillModal = document.getElementById('addBillModal');\r\n const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsPreview = document.getElementById('installmentsPreview');\r\n const installmentsList = document.getElementById('installmentsList');\r\n const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n const addToOrganizer = document.getElementById('addToOrganizer');\r\n const billModal = document.getElementById('billModal');\r\n@@ -78,39 +69,15 @@\n const deleteBillBtn = document.getElementById('deleteBill');\r\n const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n-const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n-const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n-const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-const daysToAddInput = document.getElementById('daysToAddInput');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n const subscriptionModal = document.getElementById('subscriptionModal');\r\n const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addUserModal = document.getElementById('addUserModal');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyModal = document.getElementById('addCompanyModal');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModalBtn');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n const settingsBtn = document.getElementById('settingsBtn');\r\n const settingsDropdown = document.getElementById('settingsDropdown');\r\n const menuEmpresa = document.getElementById('menuEmpresa');\r\n@@ -123,9 +90,8 @@\n const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n const manageUsersModal = document.getElementById('manageUsersModal');\r\n const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const companyUsersList = document.getElementById('companyUsersList');\r\n const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n@@ -138,9 +104,8 @@\n const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n const addCategoryForm = document.getElementById('addCategoryForm');\r\n const newCategoryNameInput = document.getElementById('newCategoryName');\r\n const categoryListDiv = document.getElementById('categoryList');\r\n-const billCategorySelect = document.getElementById('billCategorySelect');\r\n const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n \r\n const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n"
                },
                {
                    "date": 1753811414062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1468,22 +1468,15 @@\n async function initializeApp() {\r\n     const today = new Date();\r\n     currentMonth = today.getMonth();\r\n     currentYear = today.getFullYear();\r\n-    const urlParams = new URLSearchParams(window.location.search);\r\n-    const action = urlParams.get('action');\r\n \r\n-    if (action === 'forgot_password') {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-        return;\r\n-    }\r\n-\r\n     const token = localStorage.getItem('authToken');\r\n-\r\n     if (!token) {\r\n-        showAdminLogin();\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n+        // Se não houver token, o utilizador não está logado.\r\n+        // Idealmente, a página de login (Index.html) deveria ser mostrada.\r\n+        // Como estamos em OrgBoletos.html, vamos redirecionar.\r\n+        window.location.href = 'Index.html';\r\n         return;\r\n     }\r\n \r\n     try {\r\n@@ -1507,13 +1500,17 @@\n                 }\r\n             }\r\n         }\r\n     } catch (error) {\r\n-        showToast(error.message, 'error');\r\n+        // Se o token for inválido ou a API falhar, o utilizador é deslogado\r\n+        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n         localStorage.removeItem('authToken');\r\n         localStorage.removeItem('superAdminToken');\r\n-        showAdminLogin();\r\n+        setTimeout(() => {\r\n+            window.location.href = 'Index.html';\r\n+        }, 2000); // Aguarda 2 segundos para o utilizador ler a mensagem\r\n     } finally {\r\n+        // Esconde a tela de carregamento inicial\r\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n     }\r\n }\r\n \r\n@@ -2126,8 +2123,12 @@\n     document.getElementById('loadingScreen').classList.add('hidden');\r\n }\r\n \r\n \r\n+if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+if (addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+\r\n // Submissão de formulários\r\n if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n"
                },
                {
                    "date": 1753811549382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2108,18 +2108,18 @@\n                 showAccessBlockedModal();\r\n             }\r\n         }\r\n     }\r\n-} catch (error) {\r\n-    // LÓGICA DE ERRO DE SESSÃO (PREENCHIDA)\r\n-    // Se o token for inválido ou a API falhar, o usuário é deslogado\r\n-    showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    setTimeout(() => {\r\n-        window.location.href = 'Index.html';\r\n-    }, 2000); // Aguarda 2 segundos para o usuário ler a mensagem\r\n-} finally {\r\n+    } catch (error) {\r\n+        console.error(\"Erro original capturado:\", error); // <--- ADICIONE ESTA LINHA\r\n+        // Se o token for inválido ou a API falhar, o utilizador é deslogado\r\n+        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        setTimeout(() => {\r\n+            window.location.href = 'Index.html';\r\n+        }, 2000); \r\n+    }  finally {\r\n     // Esconde a tela de carregamento inicial\r\n     document.getElementById('loadingScreen').classList.add('hidden');\r\n }\r\n \r\n"
                },
                {
                    "date": 1753811835550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1519,10 +1519,26 @@\n     localStorage.removeItem('superAdminToken');\r\n     window.location.href = 'Index.html';\r\n }\r\n \r\n+/**\r\n+ * Define a sessão de representação do admin.\r\n+ * Esta função é chamada pelo painel de admin quando clica em \"Entrar\".\r\n+ * @param {object} data - Os dados recebidos da API (token, user, company).\r\n+ */\r\n+export async function setImpersonationSession(data) {\r\n+    localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+    localStorage.setItem('authToken', data.token);\r\n \r\n+    currentLoggedInCompany = data.company;\r\n+    currentLoggedInUser = data.user;\r\n+    loggedInViaAdmin = true;\r\n \r\n+    await showMainApp();\r\n+}\r\n+\r\n+\r\n+\r\n /**\r\n  * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n  * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n  * @param {Event} event - O evento 'change' do input do ficheiro.\r\n"
                },
                {
                    "date": 1753811993406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2104,9 +2104,11 @@\n try {\r\n     const data = await api.checkSession();\r\n     if (data.user.role === 'SuperAdmin') {\r\n         isAdminLoggedIn = true;\r\n-        await showAdminDashboard();\r\n+        // Usamos import() dinâmico para evitar dependência circular\r\n+        const adminModule = await import('./admin.js');\r\n+        await adminModule.showAdminDashboard();\r\n     } else {\r\n         currentLoggedInUser = data.user;\r\n         currentLoggedInCompany = data.company;\r\n         const subscription = currentLoggedInCompany.subscription;\r\n"
                },
                {
                    "date": 1753812196219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1535,10 +1535,34 @@\n \r\n     await showMainApp();\r\n }\r\n \r\n+/**\r\n+ * Restaura a sessão original do SuperAdmin.\r\n+ * Limpa as variáveis de estado de representação e restaura o token do admin.\r\n+ * @returns {boolean} - Retorna true se o token do admin foi encontrado, senão false.\r\n+ */\r\n+export function restoreAdminSession() {\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+    if (!adminToken) {\r\n+        console.error(\"Token de superAdmin não encontrado para restaurar a sessão.\");\r\n+        return false;\r\n+    }\r\n \r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken');\r\n \r\n+    // Redefine as variáveis de estado da aplicação para o modo admin\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+\r\n+    return true;\r\n+}\r\n+\r\n+\r\n+\r\n /**\r\n  * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n  * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n  * @param {Event} event - O evento 'change' do input do ficheiro.\r\n"
                },
                {
                    "date": 1753814717884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n // ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n // =================================================================================\r\n let currentLoggedInCompany = null;\r\n let currentLoggedInUser = null;\r\n-let isAdminLoggedIn = false;\r\n+export let isAdminLoggedIn = false;\r\n let loggedInViaAdmin = false;\r\n let selectedCompanyForAdmin = null;\r\n let currentBill = {};\r\n let selectedParcel = null;\r\n"
                },
                {
                    "date": 1753815589391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n import { API_BASE_URL } from './config.js';\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n import { showAdminDashboard } from './admin.js';\r\n+import { openManageUsersModal } from './admin.js';\r\n \r\n \r\n // =================================================================================\r\n // ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n"
                },
                {
                    "date": 1753815644307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n import { API_BASE_URL } from './config.js';\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n import { showAdminDashboard } from './admin.js';\r\n-import { openManageUsersModal } from './admin.js';\r\n \r\n \r\n // =================================================================================\r\n // ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n"
                },
                {
                    "date": 1753817307492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n // =================================================================================\r\n import { API_BASE_URL } from './config.js';\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-import { showAdminDashboard } from './admin.js';\r\n+import { showAdminDashboard, openManageUsersModal } from './admin.js';\r\n \r\n \r\n // =================================================================================\r\n // ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n"
                },
                {
                    "date": 1753817597030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2266,9 +2266,9 @@\n // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n     e.preventDefault();\r\n     settingsDropdown.classList.add('hidden');\r\n-    openManageUsersModal();\r\n+    openManageUsersModal(currentLoggedInCompany);\r\n });\r\n \r\n // Botões do modal de gerir utilizadores\r\n if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n"
                },
                {
                    "date": 1753817798092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2266,9 +2266,9 @@\n // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n     e.preventDefault();\r\n     settingsDropdown.classList.add('hidden');\r\n-    openManageUsersModal(currentLoggedInCompany);\r\n+    openManageUsersModal();\r\n });\r\n \r\n // Botões do modal de gerir utilizadores\r\n if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n"
                },
                {
                    "date": 1753817917350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2266,9 +2266,9 @@\n // Link 'Gerenciar Usuários' dentro do menu dropdown\r\n if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n     e.preventDefault();\r\n     settingsDropdown.classList.add('hidden');\r\n-    openManageUsersModal();\r\n+    openManageUsersModal(currentLoggedInCompany);\r\n });\r\n \r\n // Botões do modal de gerir utilizadores\r\n if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n"
                },
                {
                    "date": 1753818017697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n // =================================================================================\r\n import { API_BASE_URL } from './config.js';\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-import { showAdminDashboard, openManageUsersModal } from './admin.js';\r\n+import { showAdminDashboard, openManageUsersModal, openAddUserModal } from './admin.js';\r\n \r\n \r\n // =================================================================================\r\n // ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n"
                },
                {
                    "date": 1753818603119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2273,10 +2273,10 @@\n // Botões do modal de gerir utilizadores\r\n if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-    manageUsersModal.classList.add('hidden'); // Fecha o modal atual\r\n-    openAddUserModal(); // Abre o modal de adicionar utilizador que já corrigimos\r\n+    manageUsersModal.classList.add('hidden');\r\n+    openAddUserModal(currentLoggedInCompany._id); \r\n });\r\n \r\n /**\r\n  * Lida com o clique no botão de criar/renovar assinatura.\r\n"
                },
                {
                    "date": 1753822284024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n const singleParcelDate = document.getElementById('single-parcel-date');\r\n \r\n const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n-const announcementMessage = document.getElementById('announcementMessage');\r\n+const announcementMessage = document.getElementById('announcementBannerMessage');\r\n const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n"
                },
                {
                    "date": 1753822562654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -438,19 +438,40 @@\n     }\r\n }\r\n \r\n async function showMainApp() {\r\n+    console.log('1. Entrando em showMainApp...');\r\n     hideAllScreens();\r\n     mainAppContent.classList.remove('hidden');\r\n     openAddBillModalBtn.classList.remove('hidden');\r\n \r\n+    console.log('2. Conteúdo principal e botão \"+\" tornados visíveis.');\r\n+    console.log('3. Verificando currentLoggedInUser:', currentLoggedInUser);\r\n+\r\n+    // Adicionamos uma verificação de segurança aqui\r\n+    if (!currentLoggedInUser) {\r\n+        console.error(\"ERRO CRÍTICO: currentLoggedInUser é nulo ou indefinido!\");\r\n+        showToast('Erro crítico ao carregar dados do utilizador.', 'error');\r\n+        return; // Interrompe a função para evitar mais erros\r\n+    }\r\n+\r\n     loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n     backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n     settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n \r\n+    console.log('4. Informações do utilizador exibidas. A buscar anúncio...');\r\n+\r\n     await fetchAndDisplayAnnouncement();\r\n+    \r\n+    console.log('5. Anúncio buscado. A popular categorias...');\r\n+\r\n     await populateCategoryFilter();\r\n+\r\n+    console.log('6. Categorias populadas. A atualizar boletos...');\r\n+\r\n     await updateBillsOrganizer();\r\n+\r\n+    console.log('7. showMainApp concluída com sucesso!');\r\n }\r\n \r\n // Adicionar ao bloco de funções de Lógica e UI\r\n \r\n"
                },
                {
                    "date": 1753823088015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -438,40 +438,24 @@\n     }\r\n }\r\n \r\n async function showMainApp() {\r\n-    console.log('1. Entrando em showMainApp...');\r\n     hideAllScreens();\r\n+    // Removemos a classe 'hidden' e definimos o display diretamente\r\n     mainAppContent.classList.remove('hidden');\r\n+    mainAppContent.style.display = 'block';\r\n+\r\n     openAddBillModalBtn.classList.remove('hidden');\r\n+    openAddBillModalBtn.style.display = 'flex'; // O botão é um flex container\r\n \r\n-    console.log('2. Conteúdo principal e botão \"+\" tornados visíveis.');\r\n-    console.log('3. Verificando currentLoggedInUser:', currentLoggedInUser);\r\n-\r\n-    // Adicionamos uma verificação de segurança aqui\r\n-    if (!currentLoggedInUser) {\r\n-        console.error(\"ERRO CRÍTICO: currentLoggedInUser é nulo ou indefinido!\");\r\n-        showToast('Erro crítico ao carregar dados do utilizador.', 'error');\r\n-        return; // Interrompe a função para evitar mais erros\r\n-    }\r\n-\r\n+    // O resto da função continua igual...\r\n     loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n     backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n     settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n \r\n-    console.log('4. Informações do utilizador exibidas. A buscar anúncio...');\r\n-\r\n     await fetchAndDisplayAnnouncement();\r\n-    \r\n-    console.log('5. Anúncio buscado. A popular categorias...');\r\n-\r\n     await populateCategoryFilter();\r\n-\r\n-    console.log('6. Categorias populadas. A atualizar boletos...');\r\n-\r\n     await updateBillsOrganizer();\r\n-\r\n-    console.log('7. showMainApp concluída com sucesso!');\r\n }\r\n \r\n // Adicionar ao bloco de funções de Lógica e UI\r\n \r\n"
                },
                {
                    "date": 1753824357085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,17 +425,36 @@\n  * Atualiza a interface principal com os dados dos boletos.\r\n  */\r\n async function updateBillsOrganizer() {\r\n     try {\r\n+        console.log(\"PASSO 1: A iniciar updateBillsOrganizer...\");\r\n         userBoletos = await api.getBoletos();\r\n+        console.log(\"PASSO 2: Boletos recebidos do servidor:\", userBoletos);\r\n+\r\n+        if (!userBoletos || userBoletos.length === 0) {\r\n+            console.log(\"AVISO: Nenhum boleto foi encontrado na base de dados para esta empresa.\");\r\n+        }\r\n+\r\n         const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        totalBillsSpan.textContent = totalParcels;\r\n+        const totalBillsSpan = document.getElementById('totalBills');\r\n+        \r\n+        if (totalBillsSpan) {\r\n+            totalBillsSpan.textContent = totalParcels;\r\n+            console.log(\"PASSO 3: Total de parcelas (\" + totalParcels + \") atualizado no ecrã.\");\r\n+        } else {\r\n+            console.error(\"FALHA CRÍTICA: O elemento HTML com o id 'totalBills' não foi encontrado!\");\r\n+            return; // Para a execução se o elemento não existir\r\n+        }\r\n \r\n+        console.log(\"PASSO 4: A chamar a função updateMonthlySummary...\");\r\n         updateMonthlySummary();\r\n+        console.log(\"PASSO 5: A chamar a função principal renderCalendar...\");\r\n         renderCalendar();\r\n+        console.log(\"PASSO 6: A função renderCalendar terminou a sua execução.\");\r\n+\r\n     } catch (error) {\r\n+        console.error(\"ERRO GRAVE DENTRO DE updateBillsOrganizer:\", error);\r\n         showToast(error.message, 'error');\r\n-        showInitialLogin();\r\n     }\r\n }\r\n \r\n async function showMainApp() {\r\n"
                },
                {
                    "date": 1753824470460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -424,8 +424,9 @@\n /**\r\n  * Atualiza a interface principal com os dados dos boletos.\r\n  */\r\n async function updateBillsOrganizer() {\r\n+    boletosToRender = boletosToRender.slice(0, 5);\r\n     try {\r\n         console.log(\"PASSO 1: A iniciar updateBillsOrganizer...\");\r\n         userBoletos = await api.getBoletos();\r\n         console.log(\"PASSO 2: Boletos recebidos do servidor:\", userBoletos);\r\n"
                },
                {
                    "date": 1753824519158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,8 +218,9 @@\n  * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n+    boletosToRender = boletosToRender.slice(0, 5);\r\n     const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n     currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n     calendarDays.innerHTML = '';\r\n     const today = new Date(); // Variável para verificar boletos vencidos\r\n@@ -424,9 +425,8 @@\n /**\r\n  * Atualiza a interface principal com os dados dos boletos.\r\n  */\r\n async function updateBillsOrganizer() {\r\n-    boletosToRender = boletosToRender.slice(0, 5);\r\n     try {\r\n         console.log(\"PASSO 1: A iniciar updateBillsOrganizer...\");\r\n         userBoletos = await api.getBoletos();\r\n         console.log(\"PASSO 2: Boletos recebidos do servidor:\", userBoletos);\r\n"
                },
                {
                    "date": 1753824966944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,9 +218,8 @@\n  * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n-    boletosToRender = boletosToRender.slice(0, 5);\r\n     const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n     currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n     calendarDays.innerHTML = '';\r\n     const today = new Date(); // Variável para verificar boletos vencidos\r\n"
                },
                {
                    "date": 1753825435148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,126 +218,41 @@\n  * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    console.log(\"--- INICIANDO renderCalendar (versão de teste) ---\");\r\n+    \r\n+    // Vamos garantir que estamos a pegar no elemento certo\r\n+    const calendarDays = document.getElementById('calendarDays');\r\n+\r\n+    if (!calendarDays) {\r\n+        console.error(\"FALHA CRÍTICA: Não foi possível encontrar o <div id='calendarDays'> na página.\");\r\n+        return; // Para a função aqui\r\n+    }\r\n+\r\n+    // 1. Limpa o calendário\r\n     calendarDays.innerHTML = '';\r\n-    const today = new Date(); // Variável para verificar boletos vencidos\r\n-    today.setHours(0, 0, 0, 0); // Zera a hora para uma comparação precisa do dia\r\n+    console.log(\"Calendário foi limpo.\");\r\n \r\n-    // ETAPA 1: Otimização - Agrupa todas as parcelas por data de vencimento.\r\n-    const parcelsByDate = new Map();\r\n-    boletosToRender.forEach(bill => {\r\n-        bill.parcels.forEach(parcel => {\r\n-            const date = parcel.dueDate;\r\n-            if (!parcelsByDate.has(date)) {\r\n-                parcelsByDate.set(date, []);\r\n-            }\r\n-            // Adiciona uma referência ao boleto pai para cada parcela, para facilitar.\r\n-            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n-        });\r\n-    });\r\n-\r\n-    // ETAPA 2: Renderização do Calendário\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    // 2. Calcula quantos dias existem no mês atual\r\n     const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+    console.log(`Este mês tem ${daysInMonth} dias.`);\r\n \r\n-    // Cria as células vazias do início do mês\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    // Cria as células para cada dia do mês\r\n+    // 3. O teste principal: Tenta adicionar um div para cada dia do mês\r\n     for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n         const dayCell = document.createElement('div');\r\n-        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-\r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        // Adiciona evento de clique na célula para criar novos boletos\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card-draggable')) return;\r\n-            openAddBillModal(e.currentTarget.dataset.date);\r\n-        });\r\n-\r\n-        // Verifica se existem parcelas para este dia no mapa\r\n-        if (parcelsByDate.has(dateStr)) {\r\n-            // Se existirem, itera apenas sobre as parcelas daquele dia\r\n-            parcelsByDate.get(dateStr).forEach(parcel => {\r\n-                const bill = parcel.parentBill; // Pega a referência do boleto pai\r\n-                const parcelElement = document.createElement('div');\r\n-                \r\n-                // Lógica de Status, Cores e Ícones\r\n-                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                const isOverdue = !parcel.paid && dueDate < today;\r\n-                let statusClass = 'bg-indigo-700 text-indigo-100'; // Padrão: Pendente\r\n-                let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n-            \r\n-                if (parcel.paid) {\r\n-                    statusClass = 'bg-green-700 text-green-100'; // Pago\r\n-                    statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n-                } else if (isOverdue) {\r\n-                    statusClass = 'bg-red-700 text-red-100'; // Vencido\r\n-                    statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n-                }\r\n-            \r\n-                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n-                parcelElement.dataset.boletoId = bill._id;\r\n-                parcelElement.dataset.parcelId = parcel._id;\r\n-    \r\n-                // HTML do card com layout aprimorado\r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"flex items-start space-x-2\">\r\n-                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n-                        <div class=\"flex-1 min-w-0\">\r\n-                            <div class=\"flex justify-between items-center\">\r\n-                                <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n-                                    ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n-                                </span>\r\n-                                <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n-                                    ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n-                                </span>\r\n-                            </div>\r\n-                            \r\n-                            ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                            ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n-                        </div>\r\n-                    </div>\r\n-                `;\r\n-    \r\n-                // Adiciona evento de clique no card para abrir o modal\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                \r\n-                // Lógica para o checkbox\r\n-                const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n-                checkbox.addEventListener('change', (e) => {\r\n-                    const parcelId = e.target.dataset.parcelId;\r\n-                    const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n-                    if (e.target.checked) {\r\n-                        selectedItems.set(parcelId, boletoId);\r\n-                    } else {\r\n-                        selectedItems.delete(parcelId);\r\n-                    }\r\n-                    updateMassPaymentButton();\r\n-                });\r\n-                checkbox.addEventListener('click', (e) => {\r\n-                    e.stopPropagation(); // Impede o clique de abrir o modal\r\n-                });\r\n-                \r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        }\r\n-        \r\n+        dayCell.className = 'border p-2 text-center'; // Estilo simples para ser visível\r\n+        dayCell.textContent = day; // Adiciona apenas o número do dia\r\n         calendarDays.appendChild(dayCell);\r\n     }\r\n \r\n-    initializeDragAndDrop();\r\n+    // 4. Verificação final\r\n+    if (calendarDays.children.length > 0) {\r\n+        console.log(`SUCESSO! ${calendarDays.children.length} dias foram desenhados no calendário.`);\r\n+    } else {\r\n+        console.error(\"FALHA! O loop para criar os dias terminou, mas nada foi adicionado ao calendário.\");\r\n+    }\r\n+    console.log(\"--- FINALIZANDO renderCalendar (versão de teste) ---\");\r\n }\r\n \r\n /**\r\n  * Abre o modal para ver/editar os detalhes de uma parcela.\r\n"
                },
                {
                    "date": 1753825722440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,41 +218,126 @@\n  * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n-    console.log(\"--- INICIANDO renderCalendar (versão de teste) ---\");\r\n-    \r\n-    // Vamos garantir que estamos a pegar no elemento certo\r\n-    const calendarDays = document.getElementById('calendarDays');\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+    const today = new Date(); // Variável para verificar boletos vencidos\r\n+    today.setHours(0, 0, 0, 0); // Zera a hora para uma comparação precisa do dia\r\n \r\n-    if (!calendarDays) {\r\n-        console.error(\"FALHA CRÍTICA: Não foi possível encontrar o <div id='calendarDays'> na página.\");\r\n-        return; // Para a função aqui\r\n-    }\r\n+    // ETAPA 1: Otimização - Agrupa todas as parcelas por data de vencimento.\r\n+    const parcelsByDate = new Map();\r\n+    boletosToRender.forEach(bill => {\r\n+        bill.parcels.forEach(parcel => {\r\n+            const date = parcel.dueDate;\r\n+            if (!parcelsByDate.has(date)) {\r\n+                parcelsByDate.set(date, []);\r\n+            }\r\n+            // Adiciona uma referência ao boleto pai para cada parcela, para facilitar.\r\n+            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n+        });\r\n+    });\r\n \r\n-    // 1. Limpa o calendário\r\n-    calendarDays.innerHTML = '';\r\n-    console.log(\"Calendário foi limpo.\");\r\n-\r\n-    // 2. Calcula quantos dias existem no mês atual\r\n+    // ETAPA 2: Renderização do Calendário\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n     const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-    console.log(`Este mês tem ${daysInMonth} dias.`);\r\n \r\n-    // 3. O teste principal: Tenta adicionar um div para cada dia do mês\r\n+    // Cria as células vazias do início do mês\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    // Cria as células para cada dia do mês\r\n     for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n         const dayCell = document.createElement('div');\r\n-        dayCell.className = 'border p-2 text-center'; // Estilo simples para ser visível\r\n-        dayCell.textContent = day; // Adiciona apenas o número do dia\r\n+        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+\r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        // Adiciona evento de clique na célula para criar novos boletos\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card-draggable')) return;\r\n+            openAddBillModal(e.currentTarget.dataset.date);\r\n+        });\r\n+\r\n+        // Verifica se existem parcelas para este dia no mapa\r\n+        if (parcelsByDate.has(dateStr)) {\r\n+            // Se existirem, itera apenas sobre as parcelas daquele dia\r\n+            parcelsByDate.get(dateStr).forEach(parcel => {\r\n+                const bill = parcel.parentBill; // Pega a referência do boleto pai\r\n+                const parcelElement = document.createElement('div');\r\n+                \r\n+                // Lógica de Status, Cores e Ícones\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                const isOverdue = !parcel.paid && dueDate < today;\r\n+                let statusClass = 'bg-indigo-700 text-indigo-100'; // Padrão: Pendente\r\n+                let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n+            \r\n+                if (parcel.paid) {\r\n+                    statusClass = 'bg-green-700 text-green-100'; // Pago\r\n+                    statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n+                } else if (isOverdue) {\r\n+                    statusClass = 'bg-red-700 text-red-100'; // Vencido\r\n+                    statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n+                }\r\n+            \r\n+                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n+                parcelElement.dataset.boletoId = bill._id;\r\n+                parcelElement.dataset.parcelId = parcel._id;\r\n+    \r\n+                // HTML do card com layout aprimorado\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"flex items-start space-x-2\">\r\n+                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n+                        <div class=\"flex-1 min-w-0\">\r\n+                            <div class=\"flex justify-between items-center\">\r\n+                                <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n+                                    ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n+                                </span>\r\n+                                <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n+                                    ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n+                                </span>\r\n+                            </div>\r\n+                            \r\n+                            ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                            ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n+                        </div>\r\n+                    </div>\r\n+                `;\r\n+    \r\n+                // Adiciona evento de clique no card para abrir o modal\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                \r\n+                // Lógica para o checkbox\r\n+                const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n+                checkbox.addEventListener('change', (e) => {\r\n+                    const parcelId = e.target.dataset.parcelId;\r\n+                    const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n+                    if (e.target.checked) {\r\n+                        selectedItems.set(parcelId, boletoId);\r\n+                    } else {\r\n+                        selectedItems.delete(parcelId);\r\n+                    }\r\n+                    updateMassPaymentButton();\r\n+                });\r\n+                checkbox.addEventListener('click', (e) => {\r\n+                    e.stopPropagation(); // Impede o clique de abrir o modal\r\n+                });\r\n+                \r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        }\r\n+        \r\n         calendarDays.appendChild(dayCell);\r\n     }\r\n \r\n-    // 4. Verificação final\r\n-    if (calendarDays.children.length > 0) {\r\n-        console.log(`SUCESSO! ${calendarDays.children.length} dias foram desenhados no calendário.`);\r\n-    } else {\r\n-        console.error(\"FALHA! O loop para criar os dias terminou, mas nada foi adicionado ao calendário.\");\r\n-    }\r\n-    console.log(\"--- FINALIZANDO renderCalendar (versão de teste) ---\");\r\n+    initializeDragAndDrop();\r\n }\r\n \r\n /**\r\n  * Abre o modal para ver/editar os detalhes de uma parcela.\r\n"
                },
                {
                    "date": 1753825948160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,11 +425,9 @@\n  * Atualiza a interface principal com os dados dos boletos.\r\n  */\r\n async function updateBillsOrganizer() {\r\n     try {\r\n-        console.log(\"PASSO 1: A iniciar updateBillsOrganizer...\");\r\n         userBoletos = await api.getBoletos();\r\n-        console.log(\"PASSO 2: Boletos recebidos do servidor:\", userBoletos);\r\n \r\n         if (!userBoletos || userBoletos.length === 0) {\r\n             console.log(\"AVISO: Nenhum boleto foi encontrado na base de dados para esta empresa.\");\r\n         }\r\n@@ -438,19 +436,15 @@\n         const totalBillsSpan = document.getElementById('totalBills');\r\n         \r\n         if (totalBillsSpan) {\r\n             totalBillsSpan.textContent = totalParcels;\r\n-            console.log(\"PASSO 3: Total de parcelas (\" + totalParcels + \") atualizado no ecrã.\");\r\n         } else {\r\n             console.error(\"FALHA CRÍTICA: O elemento HTML com o id 'totalBills' não foi encontrado!\");\r\n             return; // Para a execução se o elemento não existir\r\n         }\r\n \r\n-        console.log(\"PASSO 4: A chamar a função updateMonthlySummary...\");\r\n         updateMonthlySummary();\r\n-        console.log(\"PASSO 5: A chamar a função principal renderCalendar...\");\r\n         renderCalendar();\r\n-        console.log(\"PASSO 6: A função renderCalendar terminou a sua execução.\");\r\n \r\n     } catch (error) {\r\n         console.error(\"ERRO GRAVE DENTRO DE updateBillsOrganizer:\", error);\r\n         showToast(error.message, 'error');\r\n"
                },
                {
                    "date": 1753826140730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2130,537 +2130,16 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-// --- Lógica de inicialização que estava em initializeApp() ---\r\n-const today = new Date();\r\n-currentMonth = today.getMonth();\r\n-currentYear = today.getFullYear();\r\n+    console.log(\"A EXECUTAR VERSÃO DE TESTE MÍNIMA DO main.js\");\r\n \r\n-const token = localStorage.getItem('authToken');\r\n-if (!token) {\r\n-    // Se não houver token, redireciona para a página de login\r\n-    window.location.href = 'Index.html';\r\n-    return;\r\n-}\r\n+    // Simula as variáveis globais que a função renderCalendar precisa\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n \r\n-try {\r\n-    const data = await api.checkSession();\r\n-    if (data.user.role === 'SuperAdmin') {\r\n-        isAdminLoggedIn = true;\r\n-        // Usamos import() dinâmico para evitar dependência circular\r\n-        const adminModule = await import('./admin.js');\r\n-        await adminModule.showAdminDashboard();\r\n-    } else {\r\n-        currentLoggedInUser = data.user;\r\n-        currentLoggedInCompany = data.company;\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            await showMainApp();\r\n-        } else {\r\n-            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                // Se for o dono da empresa, mostra o modal para renovar\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    }\r\n-    } catch (error) {\r\n-        console.error(\"Erro original capturado:\", error); // <--- ADICIONE ESTA LINHA\r\n-        // Se o token for inválido ou a API falhar, o utilizador é deslogado\r\n-        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        setTimeout(() => {\r\n-            window.location.href = 'Index.html';\r\n-        }, 2000); \r\n-    }  finally {\r\n-    // Esconde a tela de carregamento inicial\r\n-    document.getElementById('loadingScreen').classList.add('hidden');\r\n-}\r\n-\r\n-\r\n-if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n-if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-if (addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-\r\n-// Submissão de formulários\r\n-if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-if (logoutBtn) {\r\n-    logoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-\r\n-\r\n-// Ações na App Principal\r\n-addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-// Ações do Modal de Edição de Boleto\r\n-closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-// Navegação do Calendário\r\n-prevMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-    if (currentMonth === 11) currentYear--;\r\n-    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-\r\n-nextMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-    if (currentMonth === 0) currentYear++;\r\n-    // A mesma mudança aqui\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-}\r\n-\r\n-if (openAddBillModalBtn) {\r\n-    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-}\r\n-\r\n-const handleRedirectToHome = () => {\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-const handleFullLogoutAndRedirect = () => {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-if (subscriptionLogoutBtn) {\r\n-    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-}\r\n-\r\n-if (blockedAccessLogoutBtn) {\r\n-    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-\r\n-// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-if (settingsBtn) {\r\n-    settingsBtn.addEventListener('click', (e) => {\r\n-        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-        settingsDropdown.classList.toggle('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Links dentro do menu dropdown\r\n-if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCompanyInfoModal();\r\n-});\r\n-\r\n-if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openPermissionsModal();\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n-\r\n-// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openManageUsersModal(currentLoggedInCompany);\r\n-});\r\n-\r\n-// Botões do modal de gerir utilizadores\r\n-if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-    manageUsersModal.classList.add('hidden');\r\n-    openAddUserModal(currentLoggedInCompany._id); \r\n-});\r\n-\r\n-/**\r\n- * Lida com o clique no botão de criar/renovar assinatura.\r\n- */\r\n-async function handleCreateSubscription() {\r\n-    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-    subscriptionActionBtn.disabled = true;\r\n-    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-    try {\r\n-        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-        const data = await api.createSubscriptionLink();\r\n-\r\n-        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-        if (data.init_point) {\r\n-            window.location.href = data.init_point;\r\n-        } else {\r\n-            throw new Error('Link de pagamento não recebido.');\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-        subscriptionActionBtn.disabled = false;\r\n-        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-    }\r\n-}\r\n-\r\n-// Liga a função ao clique do botão.\r\n-if (subscriptionActionBtn) {\r\n-    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-}\r\n-\r\n-if (closePreviewModalBtn) {\r\n-    closePreviewModalBtn.addEventListener('click', () => {\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-if (nfeXmlInput) {\r\n-    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-}\r\n-\r\n-if (previewBillNameInput) {\r\n-    previewBillNameInput.addEventListener('input', (e) => {\r\n-        if (currentBill) {\r\n-            currentBill.name = e.target.value;\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Liga a função ao clique do botão\r\n-if (showFullScreenBarcodeBtn) {\r\n-    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-}\r\n-\r\n-// Listener para o campo de pesquisa\r\n-if (searchInput) {\r\n-    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Listeners para os botões de filtro\r\n-if (filterButtons) {\r\n-    filterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões\r\n-            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona a classe 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Aplica o filtro\r\n-            applyFiltersAndSearch();\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCategoriesModal();\r\n-});\r\n-\r\n-if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-if (addCategoryForm) {\r\n-    addCategoryForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const name = newCategoryNameInput.value.trim();\r\n-        if (!name) return;\r\n-        try {\r\n-            await api.createCategory(name);\r\n-            newCategoryNameInput.value = '';\r\n-            await openCategoriesModal(); // Recarrega a lista do modal\r\n-            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-if (categoryListDiv) {\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-if (categoryFilterSelect) {\r\n-    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Configuração dos botões do dashboard\r\n-if (viewCalendarBtn) {\r\n-    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-}\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-if (dateRangePresetSelect) {\r\n-    dateRangePresetSelect.addEventListener('change', () => {\r\n-        const isCustom = dateRangePresetSelect.value === 'custom';\r\n-        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n-\r\n-        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n-        // o dashboard é atualizado imediatamente.\r\n-        if (!isCustom) {\r\n-            renderDashboard();\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Para o intervalo personalizado, atualizamos o dashboard\r\n-// assim que ambas as datas estiverem preenchidas.\r\n-if (startDateInput) {\r\n-    startDateInput.addEventListener('change', () => {\r\n-        if (endDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-if (endDateInput) {\r\n-    endDateInput.addEventListener('change', () => {\r\n-        if (startDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-// Listeners para os botões de exportação\r\n-const handleExport = (format) => {\r\n-    // 1. Pega no período de tempo atual do filtro do dashboard\r\n-    const dateRange = getDateRangeFromPreset();\r\n-\r\n-    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n-    const queryString = new URLSearchParams(dateRange).toString();\r\n-\r\n-    // 3. Monta o URL completo para o download\r\n-    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n-    \r\n-    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n-    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n-    fetch(downloadUrl, {\r\n-        headers: {\r\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n-        }\r\n-    })\r\n-    .then(res => res.blob())\r\n-    .then(blob => {\r\n-        const url = window.URL.createObjectURL(blob);\r\n-        const a = document.createElement('a');\r\n-        a.style.display = 'none';\r\n-        a.href = url;\r\n-        a.download = `relatorio-despesas.${format}`;\r\n-        document.body.appendChild(a);\r\n-        a.click();\r\n-        window.URL.revokeObjectURL(url);\r\n-        a.remove();\r\n-    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n-};\r\n-\r\n-if (exportCsvBtn) {\r\n-    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n-}\r\n-if (exportPdfBtn) {\r\n-    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n-}\r\n-\r\n-if (manualAddBtn) {\r\n-    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-}\r\n-if (xmlAddBtn) {\r\n-    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-}\r\n-\r\n-if (csvImportBtn) {\r\n-    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n-}\r\n-if (csvFileInput) {\r\n-    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n-}\r\n-if (importCsvBtn) {\r\n-    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n-}\r\n-if (markSelectedAsPaidBtn) {\r\n-    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n-}\r\n-if (selectAllVisibleBtn) {\r\n-    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n-}\r\n-\r\n-if (deselectAllVisibleBtn) {\r\n-    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n-}\r\n-if (dashboardFilterButtons) {\r\n-    dashboardFilterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões do dashboard\r\n-            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Atualiza a variável de estado com o novo filtro\r\n-            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n-            // Renderiza o dashboard novamente com os dados filtrados\r\n-            renderDashboard();\r\n-        });\r\n-    });\r\n-}\r\n-// Abre o modal de alteração de categoria\r\n-if (changeCategoryBtn) {\r\n-    changeCategoryBtn.addEventListener('click', async () => {\r\n-        showLoader();\r\n-        // Popula o dropdown do modal com as categorias existentes\r\n-        await populateCategorySelect(batchCategorySelect);\r\n-        hideLoader();\r\n-        categoryBatchModal.classList.remove('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de cancelar no modal\r\n-if (cancelCategoryBatchBtn) {\r\n-    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n-        categoryBatchModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de confirmar a alteração\r\n-if (confirmCategoryBatchBtn) {\r\n-    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n-        const categoryId = batchCategorySelect.value;\r\n-        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n-        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n-\r\n-        if (boletoIds.length === 0) {\r\n-            return showToast('Nenhum item selecionado.', 'info');\r\n-        }\r\n-\r\n-        showLoader();\r\n-        try {\r\n-            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n-            showToast(response.message, 'success');\r\n-            selectedItems.clear();\r\n-            updateMassPaymentButton();\r\n-            await updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-            categoryBatchModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-}\r\n-if (openProfileModalBtn) {\r\n-    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n-}\r\n-if (closeProfileModalBtn) {\r\n-    closeProfileModalBtn.addEventListener('click', () => {\r\n-        profileModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-if (changePasswordForm) {\r\n-    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n-}\r\n-if (resendVerificationBtn) {\r\n-    resendVerificationBtn.addEventListener('click', async () => {\r\n-        resendVerificationBtn.disabled = true;\r\n-        resendVerificationBtn.textContent = 'A reenviar...';\r\n-\r\n-        try {\r\n-            const data = await api.resendVerificationEmail();\r\n-            showToast(data.message, 'success');\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            resendVerificationBtn.disabled = false;\r\n-            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n-        }\r\n-    });\r\n-}\r\n-if (recurrentAddBtn) {\r\n-    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n-}\r\n-if (recurrentEditModal) {\r\n-    // Botões de escolha (Somente esta, futuras, todas)\r\n-    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const scope = e.currentTarget.dataset.scope;\r\n-            if (!pendingUpdateData || !selectedParcel) return;\r\n-\r\n-            recurrentEditModal.classList.add('hidden');\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a nova rota da API com o escopo escolhido\r\n-                await api.bulkUpdateParcels(\r\n-                    selectedParcel.parentId, \r\n-                    selectedParcel._id, \r\n-                    pendingUpdateData.updatedParcelData, \r\n-                    scope\r\n-                );\r\n-\r\n-                // Atualiza a categoria do boleto, se foi alterada\r\n-                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n-\r\n-                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n-                billModal.classList.add('hidden');\r\n-                await updateBillsOrganizer();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-                pendingUpdateData = null; // Limpa os dados pendentes\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Botão de cancelar\r\n-    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n-        recurrentEditModal.classList.add('hidden');\r\n-        pendingUpdateData = null; // Limpa os dados pendentes\r\n-    });\r\n-}\r\n-if (closeAnnouncementBtn) {\r\n-    closeAnnouncementBtn.addEventListener('click', () => {\r\n-        globalAnnouncementBanner.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-// CHAME A NOVA FUNÇÃO AQUI\r\n-initializeDashboardDragAndDrop(); \r\n-\r\n-\r\n+    // Removemos TODA a lógica de API e autenticação.\r\n+    // Apenas chamamos diretamente a função de renderizar o calendário.\r\n+    // Vamos usar a versão de teste do renderCalendar que já tínhamos criado.\r\n+    renderCalendar();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753826278447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,37 +218,43 @@\n  * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n+    // --- INÍCIO DA CORREÇÃO ---\r\n+    const calendarDays = document.getElementById('calendarDays');\r\n+    const currentMonthYear = document.getElementById('currentMonthYear');\r\n+\r\n+    // VERIFICAÇÃO DE SEGURANÇA: Se os elementos essenciais não existirem, a função para.\r\n+    if (!calendarDays || !currentMonthYear) {\r\n+        console.error(\"ERRO CRÍTICO: Elementos essenciais do calendário (#calendarDays ou #currentMonthYear) não foram encontrados no HTML.\");\r\n+        return; // Para a execução da função para evitar mais erros.\r\n+    }\r\n+    // --- FIM DA CORREÇÃO ---\r\n+\r\n     const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n     currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n     calendarDays.innerHTML = '';\r\n-    const today = new Date(); // Variável para verificar boletos vencidos\r\n-    today.setHours(0, 0, 0, 0); // Zera a hora para uma comparação precisa do dia\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n \r\n-    // ETAPA 1: Otimização - Agrupa todas as parcelas por data de vencimento.\r\n     const parcelsByDate = new Map();\r\n     boletosToRender.forEach(bill => {\r\n         bill.parcels.forEach(parcel => {\r\n             const date = parcel.dueDate;\r\n             if (!parcelsByDate.has(date)) {\r\n                 parcelsByDate.set(date, []);\r\n             }\r\n-            // Adiciona uma referência ao boleto pai para cada parcela, para facilitar.\r\n             parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n         });\r\n     });\r\n \r\n-    // ETAPA 2: Renderização do Calendário\r\n     const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n     const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n \r\n-    // Cria as células vazias do início do mês\r\n     for (let i = 0; i < firstDayOfMonth; i++) {\r\n         calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n     }\r\n \r\n-    // Cria as células para cada dia do mês\r\n     for (let day = 1; day <= daysInMonth; day++) {\r\n         const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n         const dayCell = document.createElement('div');\r\n         dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n@@ -258,40 +264,34 @@\n         dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n         dayHeader.textContent = day;\r\n         dayCell.appendChild(dayHeader);\r\n \r\n-        // Adiciona evento de clique na célula para criar novos boletos\r\n         dayCell.addEventListener('click', (e) => {\r\n             if (e.target.closest('.bill-card-draggable')) return;\r\n             openAddBillModal(e.currentTarget.dataset.date);\r\n         });\r\n \r\n-        // Verifica se existem parcelas para este dia no mapa\r\n         if (parcelsByDate.has(dateStr)) {\r\n-            // Se existirem, itera apenas sobre as parcelas daquele dia\r\n             parcelsByDate.get(dateStr).forEach(parcel => {\r\n-                const bill = parcel.parentBill; // Pega a referência do boleto pai\r\n+                const bill = parcel.parentBill;\r\n                 const parcelElement = document.createElement('div');\r\n-                \r\n-                // Lógica de Status, Cores e Ícones\r\n                 const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n                 const isOverdue = !parcel.paid && dueDate < today;\r\n-                let statusClass = 'bg-indigo-700 text-indigo-100'; // Padrão: Pendente\r\n+                let statusClass = 'bg-indigo-700 text-indigo-100';\r\n                 let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n             \r\n                 if (parcel.paid) {\r\n-                    statusClass = 'bg-green-700 text-green-100'; // Pago\r\n+                    statusClass = 'bg-green-700 text-green-100';\r\n                     statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n                 } else if (isOverdue) {\r\n-                    statusClass = 'bg-red-700 text-red-100'; // Vencido\r\n+                    statusClass = 'bg-red-700 text-red-100';\r\n                     statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n                 }\r\n             \r\n                 parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n                 parcelElement.dataset.boletoId = bill._id;\r\n                 parcelElement.dataset.parcelId = parcel._id;\r\n     \r\n-                // HTML do card com layout aprimorado\r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"flex items-start space-x-2\">\r\n                         <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n                         <div class=\"flex-1 min-w-0\">\r\n@@ -309,12 +309,10 @@\n                         </div>\r\n                     </div>\r\n                 `;\r\n     \r\n-                // Adiciona evento de clique no card para abrir o modal\r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n                 \r\n-                // Lógica para o checkbox\r\n                 const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n                 checkbox.addEventListener('change', (e) => {\r\n                     const parcelId = e.target.dataset.parcelId;\r\n                     const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n@@ -324,11 +322,9 @@\n                         selectedItems.delete(parcelId);\r\n                     }\r\n                     updateMassPaymentButton();\r\n                 });\r\n-                checkbox.addEventListener('click', (e) => {\r\n-                    e.stopPropagation(); // Impede o clique de abrir o modal\r\n-                });\r\n+                checkbox.addEventListener('click', (e) => e.stopPropagation());\r\n                 \r\n                 dayCell.appendChild(parcelElement);\r\n             });\r\n         }\r\n@@ -2130,16 +2126,537 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-    console.log(\"A EXECUTAR VERSÃO DE TESTE MÍNIMA DO main.js\");\r\n+// --- Lógica de inicialização que estava em initializeApp() ---\r\n+const today = new Date();\r\n+currentMonth = today.getMonth();\r\n+currentYear = today.getFullYear();\r\n \r\n-    // Simula as variáveis globais que a função renderCalendar precisa\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n+const token = localStorage.getItem('authToken');\r\n+if (!token) {\r\n+    // Se não houver token, redireciona para a página de login\r\n+    window.location.href = 'Index.html';\r\n+    return;\r\n+}\r\n \r\n-    // Removemos TODA a lógica de API e autenticação.\r\n-    // Apenas chamamos diretamente a função de renderizar o calendário.\r\n-    // Vamos usar a versão de teste do renderCalendar que já tínhamos criado.\r\n-    renderCalendar();\r\n+try {\r\n+    const data = await api.checkSession();\r\n+    if (data.user.role === 'SuperAdmin') {\r\n+        isAdminLoggedIn = true;\r\n+        // Usamos import() dinâmico para evitar dependência circular\r\n+        const adminModule = await import('./admin.js');\r\n+        await adminModule.showAdminDashboard();\r\n+    } else {\r\n+        currentLoggedInUser = data.user;\r\n+        currentLoggedInCompany = data.company;\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            await showMainApp();\r\n+        } else {\r\n+            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                // Se for o dono da empresa, mostra o modal para renovar\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    }\r\n+    } catch (error) {\r\n+        console.error(\"Erro original capturado:\", error); // <--- ADICIONE ESTA LINHA\r\n+        // Se o token for inválido ou a API falhar, o utilizador é deslogado\r\n+        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        setTimeout(() => {\r\n+            window.location.href = 'Index.html';\r\n+        }, 2000); \r\n+    }  finally {\r\n+    // Esconde a tela de carregamento inicial\r\n+    document.getElementById('loadingScreen').classList.add('hidden');\r\n+}\r\n+\r\n+\r\n+if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+if (addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+\r\n+// Submissão de formulários\r\n+if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+if (logoutBtn) {\r\n+    logoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n+    });\r\n+}\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+\r\n+\r\n+// Ações na App Principal\r\n+addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+// Ações do Modal de Edição de Boleto\r\n+closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+// Navegação do Calendário\r\n+prevMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+    if (currentMonth === 11) currentYear--;\r\n+    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+\r\n+nextMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+    if (currentMonth === 0) currentYear++;\r\n+    // A mesma mudança aqui\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+}\r\n+\r\n+if (openAddBillModalBtn) {\r\n+    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+}\r\n+\r\n+const handleRedirectToHome = () => {\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+const handleFullLogoutAndRedirect = () => {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+if (subscriptionLogoutBtn) {\r\n+    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+}\r\n+\r\n+if (blockedAccessLogoutBtn) {\r\n+    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n+    });\r\n+}\r\n+\r\n+// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+if (settingsBtn) {\r\n+    settingsBtn.addEventListener('click', (e) => {\r\n+        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+        settingsDropdown.classList.toggle('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Links dentro do menu dropdown\r\n+if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCompanyInfoModal();\r\n+});\r\n+\r\n+if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openPermissionsModal();\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n+\r\n+// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openManageUsersModal(currentLoggedInCompany);\r\n+});\r\n+\r\n+// Botões do modal de gerir utilizadores\r\n+if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+    manageUsersModal.classList.add('hidden');\r\n+    openAddUserModal(currentLoggedInCompany._id); \r\n+});\r\n+\r\n+/**\r\n+ * Lida com o clique no botão de criar/renovar assinatura.\r\n+ */\r\n+async function handleCreateSubscription() {\r\n+    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+    subscriptionActionBtn.disabled = true;\r\n+    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+    try {\r\n+        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+        const data = await api.createSubscriptionLink();\r\n+\r\n+        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+        if (data.init_point) {\r\n+            window.location.href = data.init_point;\r\n+        } else {\r\n+            throw new Error('Link de pagamento não recebido.');\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+        subscriptionActionBtn.disabled = false;\r\n+        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+    }\r\n+}\r\n+\r\n+// Liga a função ao clique do botão.\r\n+if (subscriptionActionBtn) {\r\n+    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+}\r\n+\r\n+if (closePreviewModalBtn) {\r\n+    closePreviewModalBtn.addEventListener('click', () => {\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+if (nfeXmlInput) {\r\n+    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+}\r\n+\r\n+if (previewBillNameInput) {\r\n+    previewBillNameInput.addEventListener('input', (e) => {\r\n+        if (currentBill) {\r\n+            currentBill.name = e.target.value;\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Liga a função ao clique do botão\r\n+if (showFullScreenBarcodeBtn) {\r\n+    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+}\r\n+\r\n+// Listener para o campo de pesquisa\r\n+if (searchInput) {\r\n+    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Listeners para os botões de filtro\r\n+if (filterButtons) {\r\n+    filterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões\r\n+            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona a classe 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Aplica o filtro\r\n+            applyFiltersAndSearch();\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCategoriesModal();\r\n+});\r\n+\r\n+if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+if (addCategoryForm) {\r\n+    addCategoryForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const name = newCategoryNameInput.value.trim();\r\n+        if (!name) return;\r\n+        try {\r\n+            await api.createCategory(name);\r\n+            newCategoryNameInput.value = '';\r\n+            await openCategoriesModal(); // Recarrega a lista do modal\r\n+            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+if (categoryListDiv) {\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+if (categoryFilterSelect) {\r\n+    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Configuração dos botões do dashboard\r\n+if (viewCalendarBtn) {\r\n+    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+}\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+if (dateRangePresetSelect) {\r\n+    dateRangePresetSelect.addEventListener('change', () => {\r\n+        const isCustom = dateRangePresetSelect.value === 'custom';\r\n+        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n+\r\n+        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n+        // o dashboard é atualizado imediatamente.\r\n+        if (!isCustom) {\r\n+            renderDashboard();\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Para o intervalo personalizado, atualizamos o dashboard\r\n+// assim que ambas as datas estiverem preenchidas.\r\n+if (startDateInput) {\r\n+    startDateInput.addEventListener('change', () => {\r\n+        if (endDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+if (endDateInput) {\r\n+    endDateInput.addEventListener('change', () => {\r\n+        if (startDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+// Listeners para os botões de exportação\r\n+const handleExport = (format) => {\r\n+    // 1. Pega no período de tempo atual do filtro do dashboard\r\n+    const dateRange = getDateRangeFromPreset();\r\n+\r\n+    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n+    const queryString = new URLSearchParams(dateRange).toString();\r\n+\r\n+    // 3. Monta o URL completo para o download\r\n+    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n+    \r\n+    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n+    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n+    fetch(downloadUrl, {\r\n+        headers: {\r\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n+        }\r\n+    })\r\n+    .then(res => res.blob())\r\n+    .then(blob => {\r\n+        const url = window.URL.createObjectURL(blob);\r\n+        const a = document.createElement('a');\r\n+        a.style.display = 'none';\r\n+        a.href = url;\r\n+        a.download = `relatorio-despesas.${format}`;\r\n+        document.body.appendChild(a);\r\n+        a.click();\r\n+        window.URL.revokeObjectURL(url);\r\n+        a.remove();\r\n+    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n+};\r\n+\r\n+if (exportCsvBtn) {\r\n+    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+}\r\n+if (exportPdfBtn) {\r\n+    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n+}\r\n+\r\n+if (manualAddBtn) {\r\n+    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+}\r\n+if (xmlAddBtn) {\r\n+    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+}\r\n+\r\n+if (csvImportBtn) {\r\n+    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n+}\r\n+if (csvFileInput) {\r\n+    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n+}\r\n+if (importCsvBtn) {\r\n+    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n+}\r\n+if (markSelectedAsPaidBtn) {\r\n+    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n+}\r\n+if (selectAllVisibleBtn) {\r\n+    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n+}\r\n+\r\n+if (deselectAllVisibleBtn) {\r\n+    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n+}\r\n+if (dashboardFilterButtons) {\r\n+    dashboardFilterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões do dashboard\r\n+            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Atualiza a variável de estado com o novo filtro\r\n+            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n+            // Renderiza o dashboard novamente com os dados filtrados\r\n+            renderDashboard();\r\n+        });\r\n+    });\r\n+}\r\n+// Abre o modal de alteração de categoria\r\n+if (changeCategoryBtn) {\r\n+    changeCategoryBtn.addEventListener('click', async () => {\r\n+        showLoader();\r\n+        // Popula o dropdown do modal com as categorias existentes\r\n+        await populateCategorySelect(batchCategorySelect);\r\n+        hideLoader();\r\n+        categoryBatchModal.classList.remove('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de cancelar no modal\r\n+if (cancelCategoryBatchBtn) {\r\n+    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n+        categoryBatchModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de confirmar a alteração\r\n+if (confirmCategoryBatchBtn) {\r\n+    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n+        const categoryId = batchCategorySelect.value;\r\n+        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n+        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n+\r\n+        if (boletoIds.length === 0) {\r\n+            return showToast('Nenhum item selecionado.', 'info');\r\n+        }\r\n+\r\n+        showLoader();\r\n+        try {\r\n+            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n+            showToast(response.message, 'success');\r\n+            selectedItems.clear();\r\n+            updateMassPaymentButton();\r\n+            await updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+            categoryBatchModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+}\r\n+if (openProfileModalBtn) {\r\n+    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n+}\r\n+if (closeProfileModalBtn) {\r\n+    closeProfileModalBtn.addEventListener('click', () => {\r\n+        profileModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+if (changePasswordForm) {\r\n+    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n+}\r\n+if (resendVerificationBtn) {\r\n+    resendVerificationBtn.addEventListener('click', async () => {\r\n+        resendVerificationBtn.disabled = true;\r\n+        resendVerificationBtn.textContent = 'A reenviar...';\r\n+\r\n+        try {\r\n+            const data = await api.resendVerificationEmail();\r\n+            showToast(data.message, 'success');\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            resendVerificationBtn.disabled = false;\r\n+            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n+        }\r\n+    });\r\n+}\r\n+if (recurrentAddBtn) {\r\n+    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n+}\r\n+if (recurrentEditModal) {\r\n+    // Botões de escolha (Somente esta, futuras, todas)\r\n+    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const scope = e.currentTarget.dataset.scope;\r\n+            if (!pendingUpdateData || !selectedParcel) return;\r\n+\r\n+            recurrentEditModal.classList.add('hidden');\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a nova rota da API com o escopo escolhido\r\n+                await api.bulkUpdateParcels(\r\n+                    selectedParcel.parentId, \r\n+                    selectedParcel._id, \r\n+                    pendingUpdateData.updatedParcelData, \r\n+                    scope\r\n+                );\r\n+\r\n+                // Atualiza a categoria do boleto, se foi alterada\r\n+                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n+\r\n+                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n+                billModal.classList.add('hidden');\r\n+                await updateBillsOrganizer();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+                pendingUpdateData = null; // Limpa os dados pendentes\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Botão de cancelar\r\n+    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n+        recurrentEditModal.classList.add('hidden');\r\n+        pendingUpdateData = null; // Limpa os dados pendentes\r\n+    });\r\n+}\r\n+if (closeAnnouncementBtn) {\r\n+    closeAnnouncementBtn.addEventListener('click', () => {\r\n+        globalAnnouncementBanner.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+// CHAME A NOVA FUNÇÃO AQUI\r\n+initializeDashboardDragAndDrop(); \r\n+\r\n+\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753826779986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2126,537 +2126,16 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-// --- Lógica de inicialização que estava em initializeApp() ---\r\n-const today = new Date();\r\n-currentMonth = today.getMonth();\r\n-currentYear = today.getFullYear();\r\n+    console.log(\"A EXECUTAR VERSÃO DE TESTE MÍNIMA DO main.js\");\r\n \r\n-const token = localStorage.getItem('authToken');\r\n-if (!token) {\r\n-    // Se não houver token, redireciona para a página de login\r\n-    window.location.href = 'Index.html';\r\n-    return;\r\n-}\r\n+    // Simula as variáveis globais que a função renderCalendar precisa\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n \r\n-try {\r\n-    const data = await api.checkSession();\r\n-    if (data.user.role === 'SuperAdmin') {\r\n-        isAdminLoggedIn = true;\r\n-        // Usamos import() dinâmico para evitar dependência circular\r\n-        const adminModule = await import('./admin.js');\r\n-        await adminModule.showAdminDashboard();\r\n-    } else {\r\n-        currentLoggedInUser = data.user;\r\n-        currentLoggedInCompany = data.company;\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            await showMainApp();\r\n-        } else {\r\n-            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                // Se for o dono da empresa, mostra o modal para renovar\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    }\r\n-    } catch (error) {\r\n-        console.error(\"Erro original capturado:\", error); // <--- ADICIONE ESTA LINHA\r\n-        // Se o token for inválido ou a API falhar, o utilizador é deslogado\r\n-        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        setTimeout(() => {\r\n-            window.location.href = 'Index.html';\r\n-        }, 2000); \r\n-    }  finally {\r\n-    // Esconde a tela de carregamento inicial\r\n-    document.getElementById('loadingScreen').classList.add('hidden');\r\n-}\r\n-\r\n-\r\n-if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n-if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-if (addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-\r\n-// Submissão de formulários\r\n-if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-if (logoutBtn) {\r\n-    logoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-\r\n-\r\n-// Ações na App Principal\r\n-addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-// Ações do Modal de Edição de Boleto\r\n-closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-// Navegação do Calendário\r\n-prevMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-    if (currentMonth === 11) currentYear--;\r\n-    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-\r\n-nextMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-    if (currentMonth === 0) currentYear++;\r\n-    // A mesma mudança aqui\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-}\r\n-\r\n-if (openAddBillModalBtn) {\r\n-    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-}\r\n-\r\n-const handleRedirectToHome = () => {\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-const handleFullLogoutAndRedirect = () => {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-if (subscriptionLogoutBtn) {\r\n-    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-}\r\n-\r\n-if (blockedAccessLogoutBtn) {\r\n-    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-\r\n-// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-if (settingsBtn) {\r\n-    settingsBtn.addEventListener('click', (e) => {\r\n-        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-        settingsDropdown.classList.toggle('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Links dentro do menu dropdown\r\n-if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCompanyInfoModal();\r\n-});\r\n-\r\n-if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openPermissionsModal();\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n-\r\n-// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openManageUsersModal(currentLoggedInCompany);\r\n-});\r\n-\r\n-// Botões do modal de gerir utilizadores\r\n-if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-    manageUsersModal.classList.add('hidden');\r\n-    openAddUserModal(currentLoggedInCompany._id); \r\n-});\r\n-\r\n-/**\r\n- * Lida com o clique no botão de criar/renovar assinatura.\r\n- */\r\n-async function handleCreateSubscription() {\r\n-    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-    subscriptionActionBtn.disabled = true;\r\n-    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-    try {\r\n-        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-        const data = await api.createSubscriptionLink();\r\n-\r\n-        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-        if (data.init_point) {\r\n-            window.location.href = data.init_point;\r\n-        } else {\r\n-            throw new Error('Link de pagamento não recebido.');\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-        subscriptionActionBtn.disabled = false;\r\n-        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-    }\r\n-}\r\n-\r\n-// Liga a função ao clique do botão.\r\n-if (subscriptionActionBtn) {\r\n-    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-}\r\n-\r\n-if (closePreviewModalBtn) {\r\n-    closePreviewModalBtn.addEventListener('click', () => {\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-if (nfeXmlInput) {\r\n-    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-}\r\n-\r\n-if (previewBillNameInput) {\r\n-    previewBillNameInput.addEventListener('input', (e) => {\r\n-        if (currentBill) {\r\n-            currentBill.name = e.target.value;\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Liga a função ao clique do botão\r\n-if (showFullScreenBarcodeBtn) {\r\n-    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-}\r\n-\r\n-// Listener para o campo de pesquisa\r\n-if (searchInput) {\r\n-    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Listeners para os botões de filtro\r\n-if (filterButtons) {\r\n-    filterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões\r\n-            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona a classe 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Aplica o filtro\r\n-            applyFiltersAndSearch();\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCategoriesModal();\r\n-});\r\n-\r\n-if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-if (addCategoryForm) {\r\n-    addCategoryForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const name = newCategoryNameInput.value.trim();\r\n-        if (!name) return;\r\n-        try {\r\n-            await api.createCategory(name);\r\n-            newCategoryNameInput.value = '';\r\n-            await openCategoriesModal(); // Recarrega a lista do modal\r\n-            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-if (categoryListDiv) {\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-if (categoryFilterSelect) {\r\n-    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Configuração dos botões do dashboard\r\n-if (viewCalendarBtn) {\r\n-    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-}\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-if (dateRangePresetSelect) {\r\n-    dateRangePresetSelect.addEventListener('change', () => {\r\n-        const isCustom = dateRangePresetSelect.value === 'custom';\r\n-        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n-\r\n-        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n-        // o dashboard é atualizado imediatamente.\r\n-        if (!isCustom) {\r\n-            renderDashboard();\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Para o intervalo personalizado, atualizamos o dashboard\r\n-// assim que ambas as datas estiverem preenchidas.\r\n-if (startDateInput) {\r\n-    startDateInput.addEventListener('change', () => {\r\n-        if (endDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-if (endDateInput) {\r\n-    endDateInput.addEventListener('change', () => {\r\n-        if (startDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-// Listeners para os botões de exportação\r\n-const handleExport = (format) => {\r\n-    // 1. Pega no período de tempo atual do filtro do dashboard\r\n-    const dateRange = getDateRangeFromPreset();\r\n-\r\n-    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n-    const queryString = new URLSearchParams(dateRange).toString();\r\n-\r\n-    // 3. Monta o URL completo para o download\r\n-    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n-    \r\n-    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n-    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n-    fetch(downloadUrl, {\r\n-        headers: {\r\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n-        }\r\n-    })\r\n-    .then(res => res.blob())\r\n-    .then(blob => {\r\n-        const url = window.URL.createObjectURL(blob);\r\n-        const a = document.createElement('a');\r\n-        a.style.display = 'none';\r\n-        a.href = url;\r\n-        a.download = `relatorio-despesas.${format}`;\r\n-        document.body.appendChild(a);\r\n-        a.click();\r\n-        window.URL.revokeObjectURL(url);\r\n-        a.remove();\r\n-    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n-};\r\n-\r\n-if (exportCsvBtn) {\r\n-    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n-}\r\n-if (exportPdfBtn) {\r\n-    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n-}\r\n-\r\n-if (manualAddBtn) {\r\n-    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-}\r\n-if (xmlAddBtn) {\r\n-    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-}\r\n-\r\n-if (csvImportBtn) {\r\n-    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n-}\r\n-if (csvFileInput) {\r\n-    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n-}\r\n-if (importCsvBtn) {\r\n-    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n-}\r\n-if (markSelectedAsPaidBtn) {\r\n-    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n-}\r\n-if (selectAllVisibleBtn) {\r\n-    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n-}\r\n-\r\n-if (deselectAllVisibleBtn) {\r\n-    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n-}\r\n-if (dashboardFilterButtons) {\r\n-    dashboardFilterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões do dashboard\r\n-            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Atualiza a variável de estado com o novo filtro\r\n-            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n-            // Renderiza o dashboard novamente com os dados filtrados\r\n-            renderDashboard();\r\n-        });\r\n-    });\r\n-}\r\n-// Abre o modal de alteração de categoria\r\n-if (changeCategoryBtn) {\r\n-    changeCategoryBtn.addEventListener('click', async () => {\r\n-        showLoader();\r\n-        // Popula o dropdown do modal com as categorias existentes\r\n-        await populateCategorySelect(batchCategorySelect);\r\n-        hideLoader();\r\n-        categoryBatchModal.classList.remove('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de cancelar no modal\r\n-if (cancelCategoryBatchBtn) {\r\n-    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n-        categoryBatchModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de confirmar a alteração\r\n-if (confirmCategoryBatchBtn) {\r\n-    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n-        const categoryId = batchCategorySelect.value;\r\n-        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n-        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n-\r\n-        if (boletoIds.length === 0) {\r\n-            return showToast('Nenhum item selecionado.', 'info');\r\n-        }\r\n-\r\n-        showLoader();\r\n-        try {\r\n-            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n-            showToast(response.message, 'success');\r\n-            selectedItems.clear();\r\n-            updateMassPaymentButton();\r\n-            await updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-            categoryBatchModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-}\r\n-if (openProfileModalBtn) {\r\n-    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n-}\r\n-if (closeProfileModalBtn) {\r\n-    closeProfileModalBtn.addEventListener('click', () => {\r\n-        profileModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-if (changePasswordForm) {\r\n-    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n-}\r\n-if (resendVerificationBtn) {\r\n-    resendVerificationBtn.addEventListener('click', async () => {\r\n-        resendVerificationBtn.disabled = true;\r\n-        resendVerificationBtn.textContent = 'A reenviar...';\r\n-\r\n-        try {\r\n-            const data = await api.resendVerificationEmail();\r\n-            showToast(data.message, 'success');\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            resendVerificationBtn.disabled = false;\r\n-            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n-        }\r\n-    });\r\n-}\r\n-if (recurrentAddBtn) {\r\n-    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n-}\r\n-if (recurrentEditModal) {\r\n-    // Botões de escolha (Somente esta, futuras, todas)\r\n-    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const scope = e.currentTarget.dataset.scope;\r\n-            if (!pendingUpdateData || !selectedParcel) return;\r\n-\r\n-            recurrentEditModal.classList.add('hidden');\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a nova rota da API com o escopo escolhido\r\n-                await api.bulkUpdateParcels(\r\n-                    selectedParcel.parentId, \r\n-                    selectedParcel._id, \r\n-                    pendingUpdateData.updatedParcelData, \r\n-                    scope\r\n-                );\r\n-\r\n-                // Atualiza a categoria do boleto, se foi alterada\r\n-                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n-\r\n-                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n-                billModal.classList.add('hidden');\r\n-                await updateBillsOrganizer();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-                pendingUpdateData = null; // Limpa os dados pendentes\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Botão de cancelar\r\n-    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n-        recurrentEditModal.classList.add('hidden');\r\n-        pendingUpdateData = null; // Limpa os dados pendentes\r\n-    });\r\n-}\r\n-if (closeAnnouncementBtn) {\r\n-    closeAnnouncementBtn.addEventListener('click', () => {\r\n-        globalAnnouncementBanner.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-// CHAME A NOVA FUNÇÃO AQUI\r\n-initializeDashboardDragAndDrop(); \r\n-\r\n-\r\n+    // Removemos TODA a lógica de API e autenticação.\r\n+    // Apenas chamamos diretamente a função de renderizar o calendário.\r\n+    // Vamos usar a versão de teste do renderCalendar que já tínhamos criado.\r\n+    renderCalendar();\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753826897974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2126,16 +2126,537 @@\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n-    console.log(\"A EXECUTAR VERSÃO DE TESTE MÍNIMA DO main.js\");\r\n+// --- Lógica de inicialização que estava em initializeApp() ---\r\n+const today = new Date();\r\n+currentMonth = today.getMonth();\r\n+currentYear = today.getFullYear();\r\n \r\n-    // Simula as variáveis globais que a função renderCalendar precisa\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n+const token = localStorage.getItem('authToken');\r\n+if (!token) {\r\n+    // Se não houver token, redireciona para a página de login\r\n+    window.location.href = 'Index.html';\r\n+    return;\r\n+}\r\n \r\n-    // Removemos TODA a lógica de API e autenticação.\r\n-    // Apenas chamamos diretamente a função de renderizar o calendário.\r\n-    // Vamos usar a versão de teste do renderCalendar que já tínhamos criado.\r\n-    renderCalendar();\r\n+try {\r\n+    const data = await api.checkSession();\r\n+    if (data.user.role === 'SuperAdmin') {\r\n+        isAdminLoggedIn = true;\r\n+        // Usamos import() dinâmico para evitar dependência circular\r\n+        const adminModule = await import('./admin.js');\r\n+        await adminModule.showAdminDashboard();\r\n+    } else {\r\n+        currentLoggedInUser = data.user;\r\n+        currentLoggedInCompany = data.company;\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            await showMainApp();\r\n+        } else {\r\n+            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                // Se for o dono da empresa, mostra o modal para renovar\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    }\r\n+    } catch (error) {\r\n+        console.error(\"Erro original capturado:\", error); // <--- ADICIONE ESTA LINHA\r\n+        // Se o token for inválido ou a API falhar, o utilizador é deslogado\r\n+        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        setTimeout(() => {\r\n+            window.location.href = 'Index.html';\r\n+        }, 2000); \r\n+    }  finally {\r\n+    // Esconde a tela de carregamento inicial\r\n+    document.getElementById('loadingScreen').classList.add('hidden');\r\n+}\r\n+\r\n+\r\n+if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+if (addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+\r\n+// Submissão de formulários\r\n+if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+if (logoutBtn) {\r\n+    logoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n+    });\r\n+}\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+\r\n+\r\n+// Ações na App Principal\r\n+addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+// Ações do Modal de Edição de Boleto\r\n+closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+// Navegação do Calendário\r\n+prevMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+    if (currentMonth === 11) currentYear--;\r\n+    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+\r\n+nextMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+    if (currentMonth === 0) currentYear++;\r\n+    // A mesma mudança aqui\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+}\r\n+\r\n+if (openAddBillModalBtn) {\r\n+    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+}\r\n+\r\n+const handleRedirectToHome = () => {\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+const handleFullLogoutAndRedirect = () => {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+if (subscriptionLogoutBtn) {\r\n+    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+}\r\n+\r\n+if (blockedAccessLogoutBtn) {\r\n+    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n+    });\r\n+}\r\n+\r\n+// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+if (settingsBtn) {\r\n+    settingsBtn.addEventListener('click', (e) => {\r\n+        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+        settingsDropdown.classList.toggle('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Links dentro do menu dropdown\r\n+if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCompanyInfoModal();\r\n+});\r\n+\r\n+if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openPermissionsModal();\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n+\r\n+// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openManageUsersModal(currentLoggedInCompany);\r\n+});\r\n+\r\n+// Botões do modal de gerir utilizadores\r\n+if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+    manageUsersModal.classList.add('hidden');\r\n+    openAddUserModal(currentLoggedInCompany._id); \r\n+});\r\n+\r\n+/**\r\n+ * Lida com o clique no botão de criar/renovar assinatura.\r\n+ */\r\n+async function handleCreateSubscription() {\r\n+    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+    subscriptionActionBtn.disabled = true;\r\n+    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+    try {\r\n+        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+        const data = await api.createSubscriptionLink();\r\n+\r\n+        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+        if (data.init_point) {\r\n+            window.location.href = data.init_point;\r\n+        } else {\r\n+            throw new Error('Link de pagamento não recebido.');\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+        subscriptionActionBtn.disabled = false;\r\n+        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+    }\r\n+}\r\n+\r\n+// Liga a função ao clique do botão.\r\n+if (subscriptionActionBtn) {\r\n+    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+}\r\n+\r\n+if (closePreviewModalBtn) {\r\n+    closePreviewModalBtn.addEventListener('click', () => {\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+if (nfeXmlInput) {\r\n+    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+}\r\n+\r\n+if (previewBillNameInput) {\r\n+    previewBillNameInput.addEventListener('input', (e) => {\r\n+        if (currentBill) {\r\n+            currentBill.name = e.target.value;\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Liga a função ao clique do botão\r\n+if (showFullScreenBarcodeBtn) {\r\n+    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+}\r\n+\r\n+// Listener para o campo de pesquisa\r\n+if (searchInput) {\r\n+    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Listeners para os botões de filtro\r\n+if (filterButtons) {\r\n+    filterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões\r\n+            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona a classe 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Aplica o filtro\r\n+            applyFiltersAndSearch();\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCategoriesModal();\r\n+});\r\n+\r\n+if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+if (addCategoryForm) {\r\n+    addCategoryForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const name = newCategoryNameInput.value.trim();\r\n+        if (!name) return;\r\n+        try {\r\n+            await api.createCategory(name);\r\n+            newCategoryNameInput.value = '';\r\n+            await openCategoriesModal(); // Recarrega a lista do modal\r\n+            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+if (categoryListDiv) {\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+if (categoryFilterSelect) {\r\n+    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Configuração dos botões do dashboard\r\n+if (viewCalendarBtn) {\r\n+    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+}\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+if (dateRangePresetSelect) {\r\n+    dateRangePresetSelect.addEventListener('change', () => {\r\n+        const isCustom = dateRangePresetSelect.value === 'custom';\r\n+        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n+\r\n+        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n+        // o dashboard é atualizado imediatamente.\r\n+        if (!isCustom) {\r\n+            renderDashboard();\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Para o intervalo personalizado, atualizamos o dashboard\r\n+// assim que ambas as datas estiverem preenchidas.\r\n+if (startDateInput) {\r\n+    startDateInput.addEventListener('change', () => {\r\n+        if (endDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+if (endDateInput) {\r\n+    endDateInput.addEventListener('change', () => {\r\n+        if (startDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+// Listeners para os botões de exportação\r\n+const handleExport = (format) => {\r\n+    // 1. Pega no período de tempo atual do filtro do dashboard\r\n+    const dateRange = getDateRangeFromPreset();\r\n+\r\n+    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n+    const queryString = new URLSearchParams(dateRange).toString();\r\n+\r\n+    // 3. Monta o URL completo para o download\r\n+    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n+    \r\n+    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n+    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n+    fetch(downloadUrl, {\r\n+        headers: {\r\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n+        }\r\n+    })\r\n+    .then(res => res.blob())\r\n+    .then(blob => {\r\n+        const url = window.URL.createObjectURL(blob);\r\n+        const a = document.createElement('a');\r\n+        a.style.display = 'none';\r\n+        a.href = url;\r\n+        a.download = `relatorio-despesas.${format}`;\r\n+        document.body.appendChild(a);\r\n+        a.click();\r\n+        window.URL.revokeObjectURL(url);\r\n+        a.remove();\r\n+    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n+};\r\n+\r\n+if (exportCsvBtn) {\r\n+    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+}\r\n+if (exportPdfBtn) {\r\n+    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n+}\r\n+\r\n+if (manualAddBtn) {\r\n+    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+}\r\n+if (xmlAddBtn) {\r\n+    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+}\r\n+\r\n+if (csvImportBtn) {\r\n+    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n+}\r\n+if (csvFileInput) {\r\n+    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n+}\r\n+if (importCsvBtn) {\r\n+    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n+}\r\n+if (markSelectedAsPaidBtn) {\r\n+    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n+}\r\n+if (selectAllVisibleBtn) {\r\n+    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n+}\r\n+\r\n+if (deselectAllVisibleBtn) {\r\n+    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n+}\r\n+if (dashboardFilterButtons) {\r\n+    dashboardFilterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões do dashboard\r\n+            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Atualiza a variável de estado com o novo filtro\r\n+            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n+            // Renderiza o dashboard novamente com os dados filtrados\r\n+            renderDashboard();\r\n+        });\r\n+    });\r\n+}\r\n+// Abre o modal de alteração de categoria\r\n+if (changeCategoryBtn) {\r\n+    changeCategoryBtn.addEventListener('click', async () => {\r\n+        showLoader();\r\n+        // Popula o dropdown do modal com as categorias existentes\r\n+        await populateCategorySelect(batchCategorySelect);\r\n+        hideLoader();\r\n+        categoryBatchModal.classList.remove('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de cancelar no modal\r\n+if (cancelCategoryBatchBtn) {\r\n+    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n+        categoryBatchModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de confirmar a alteração\r\n+if (confirmCategoryBatchBtn) {\r\n+    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n+        const categoryId = batchCategorySelect.value;\r\n+        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n+        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n+\r\n+        if (boletoIds.length === 0) {\r\n+            return showToast('Nenhum item selecionado.', 'info');\r\n+        }\r\n+\r\n+        showLoader();\r\n+        try {\r\n+            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n+            showToast(response.message, 'success');\r\n+            selectedItems.clear();\r\n+            updateMassPaymentButton();\r\n+            await updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+            categoryBatchModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+}\r\n+if (openProfileModalBtn) {\r\n+    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n+}\r\n+if (closeProfileModalBtn) {\r\n+    closeProfileModalBtn.addEventListener('click', () => {\r\n+        profileModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+if (changePasswordForm) {\r\n+    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n+}\r\n+if (resendVerificationBtn) {\r\n+    resendVerificationBtn.addEventListener('click', async () => {\r\n+        resendVerificationBtn.disabled = true;\r\n+        resendVerificationBtn.textContent = 'A reenviar...';\r\n+\r\n+        try {\r\n+            const data = await api.resendVerificationEmail();\r\n+            showToast(data.message, 'success');\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            resendVerificationBtn.disabled = false;\r\n+            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n+        }\r\n+    });\r\n+}\r\n+if (recurrentAddBtn) {\r\n+    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n+}\r\n+if (recurrentEditModal) {\r\n+    // Botões de escolha (Somente esta, futuras, todas)\r\n+    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const scope = e.currentTarget.dataset.scope;\r\n+            if (!pendingUpdateData || !selectedParcel) return;\r\n+\r\n+            recurrentEditModal.classList.add('hidden');\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a nova rota da API com o escopo escolhido\r\n+                await api.bulkUpdateParcels(\r\n+                    selectedParcel.parentId, \r\n+                    selectedParcel._id, \r\n+                    pendingUpdateData.updatedParcelData, \r\n+                    scope\r\n+                );\r\n+\r\n+                // Atualiza a categoria do boleto, se foi alterada\r\n+                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n+\r\n+                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n+                billModal.classList.add('hidden');\r\n+                await updateBillsOrganizer();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+                pendingUpdateData = null; // Limpa os dados pendentes\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Botão de cancelar\r\n+    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n+        recurrentEditModal.classList.add('hidden');\r\n+        pendingUpdateData = null; // Limpa os dados pendentes\r\n+    });\r\n+}\r\n+if (closeAnnouncementBtn) {\r\n+    closeAnnouncementBtn.addEventListener('click', () => {\r\n+        globalAnnouncementBanner.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+// CHAME A NOVA FUNÇÃO AQUI\r\n+initializeDashboardDragAndDrop(); \r\n+\r\n+\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753827032688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,18 +218,17 @@\n  * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n-    // --- INÍCIO DA CORREÇÃO ---\r\n+    // --- INÍCIO DA CORREÇÃO DE SEGURANÇA ---\r\n     const calendarDays = document.getElementById('calendarDays');\r\n     const currentMonthYear = document.getElementById('currentMonthYear');\r\n \r\n-    // VERIFICAÇÃO DE SEGURANÇA: Se os elementos essenciais não existirem, a função para.\r\n     if (!calendarDays || !currentMonthYear) {\r\n         console.error(\"ERRO CRÍTICO: Elementos essenciais do calendário (#calendarDays ou #currentMonthYear) não foram encontrados no HTML.\");\r\n-        return; // Para a execução da função para evitar mais erros.\r\n+        return; // Para a execução para evitar mais erros.\r\n     }\r\n-    // --- FIM DA CORREÇÃO ---\r\n+    // --- FIM DA CORREÇÃO DE SEGURANÇA ---\r\n \r\n     const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n     currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n     calendarDays.innerHTML = '';\r\n@@ -277,21 +276,21 @@\n                 const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n                 const isOverdue = !parcel.paid && dueDate < today;\r\n                 let statusClass = 'bg-indigo-700 text-indigo-100';\r\n                 let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n-            \r\n+\r\n                 if (parcel.paid) {\r\n                     statusClass = 'bg-green-700 text-green-100';\r\n                     statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n                 } else if (isOverdue) {\r\n                     statusClass = 'bg-red-700 text-red-100';\r\n                     statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n                 }\r\n-            \r\n+\r\n                 parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n                 parcelElement.dataset.boletoId = bill._id;\r\n                 parcelElement.dataset.parcelId = parcel._id;\r\n-    \r\n+\r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"flex items-start space-x-2\">\r\n                         <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n                         <div class=\"flex-1 min-w-0\">\r\n@@ -302,17 +301,17 @@\n                                 <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n                                     ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n                                 </span>\r\n                             </div>\r\n-                            \r\n+\r\n                             ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n                             ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n                         </div>\r\n                     </div>\r\n                 `;\r\n-    \r\n+\r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-                \r\n+\r\n                 const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n                 checkbox.addEventListener('change', (e) => {\r\n                     const parcelId = e.target.dataset.parcelId;\r\n                     const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n@@ -323,13 +322,13 @@\n                     }\r\n                     updateMassPaymentButton();\r\n                 });\r\n                 checkbox.addEventListener('click', (e) => e.stopPropagation());\r\n-                \r\n+\r\n                 dayCell.appendChild(parcelElement);\r\n             });\r\n         }\r\n-        \r\n+\r\n         calendarDays.appendChild(dayCell);\r\n     }\r\n \r\n     initializeDragAndDrop();\r\n"
                },
                {
                    "date": 1753882658166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2682 @@\n+/**\r\n+ * main.js\r\n+ * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n+ * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n+ */\r\n+\r\n+// =================================================================================\r\n+// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n+// =================================================================================\r\n+import { API_BASE_URL } from './config.js';\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+import { showAdminDashboard, openManageUsersModal, openAddUserModal } from './admin.js';\r\n+\r\n+\r\n+// =================================================================================\r\n+// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n+// =================================================================================\r\n+let currentLoggedInCompany = null;\r\n+let currentLoggedInUser = null;\r\n+export let isAdminLoggedIn = false;\r\n+let loggedInViaAdmin = false;\r\n+let selectedCompanyForAdmin = null;\r\n+let currentBill = {};\r\n+let selectedParcel = null;\r\n+let userBoletos = [];\r\n+let currentMonth, currentYear;\r\n+let expensesPieChart = null;\r\n+let expensesBarChart = null;\r\n+let topExpensesChart = null;\r\n+let parsedCsvData = [];\r\n+let selectedParcels = new Set();\r\n+let dashboardStatusFilter = 'all';\r\n+let selectedItems = new Map();\r\n+let pendingUpdateData = null;\r\n+\r\n+// =================================================================================\r\n+// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n+// =================================================================================\r\n+\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const mainAppContent = document.getElementById('mainAppContent');\r\n+const logoutBtn = document.getElementById('logoutBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n+const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n+const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+const totalBillsSpan = document.getElementById('totalBills');\r\n+const prevMonthBtn = document.getElementById('prevMonth');\r\n+const nextMonthBtn = document.getElementById('nextMonth');\r\n+const calendarDays = document.getElementById('calendarDays');\r\n+const currentMonthYear = document.getElementById('currentMonthYear');\r\n+const billForm = document.getElementById('billForm');\r\n+const addBillModal = document.getElementById('addBillModal');\r\n+const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n+const installmentsList = document.getElementById('installmentsList');\r\n+const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n+const addToOrganizer = document.getElementById('addToOrganizer');\r\n+const billModal = document.getElementById('billModal');\r\n+const closeModalBtn = document.getElementById('closeModal');\r\n+const modalBillName = document.getElementById('modalBillName');\r\n+const modalBillAmount = document.getElementById('modalBillAmount');\r\n+const modalBillDate = document.getElementById('modalBillDate');\r\n+const modalBillDescription = document.getElementById('modalBillDescription');\r\n+const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n+const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n+const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n+const saveBillBtn = document.getElementById('saveBill');\r\n+const deleteBillBtn = document.getElementById('deleteBill');\r\n+const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n+const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n+const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n+const subscriptionModal = document.getElementById('subscriptionModal');\r\n+const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n+const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n+const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n+const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n+const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n+const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n+const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n+const settingsBtn = document.getElementById('settingsBtn');\r\n+const settingsDropdown = document.getElementById('settingsDropdown');\r\n+const menuEmpresa = document.getElementById('menuEmpresa');\r\n+const menuUsuarios = document.getElementById('menuUsuarios');\r\n+const menuPermissoes = document.getElementById('menuPermissoes');\r\n+const companyInfoModal = document.getElementById('companyInfoModal');\r\n+const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n+const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n+const permissionsModal = document.getElementById('permissionsModal');\r\n+const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n+const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n+const manageUsersModal = document.getElementById('manageUsersModal');\r\n+const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n+const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n+const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n+const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n+const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n+const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n+const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n+const searchInput = document.getElementById('searchInput');\r\n+const filterButtons = document.querySelectorAll('.filter-btn');\r\n+const menuCategorias = document.getElementById('menuCategorias');\r\n+const categoriesModal = document.getElementById('categoriesModal');\r\n+const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n+const addCategoryForm = document.getElementById('addCategoryForm');\r\n+const newCategoryNameInput = document.getElementById('newCategoryName');\r\n+const categoryListDiv = document.getElementById('categoryList');\r\n+const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n+const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+\r\n+const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n+const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n+const calendarView = document.getElementById('calendarView');\r\n+const dashboardView = document.getElementById('dashboardView');\r\n+const dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\n+const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n+const startDateInput = document.getElementById('start-date-input');\r\n+const endDateInput = document.getElementById('end-date-input');\r\n+const kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\n+const upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\n+const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n+const exportCsvBtn = document.getElementById('export-csv-btn');\r\n+const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n+const dashboardFilterButtons = document.querySelectorAll('.dashboard-filter-btn');\r\n+\r\n+const manualAddBtn = document.getElementById('manual-add-btn');\r\n+const xmlAddBtn = document.getElementById('xml-add-btn');\r\n+const manualAddForm = document.getElementById('manual-add-form');\r\n+const xmlAddForm = document.getElementById('xml-add-form');\r\n+\r\n+const csvImportBtn = document.getElementById('csv-import-btn');\r\n+const csvImportForm = document.getElementById('csv-import-form');\r\n+const csvFileInput = document.getElementById('csv-file-input');\r\n+const csvPreviewArea = document.getElementById('csv-preview-area');\r\n+const csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\n+const csvImportSummary = document.getElementById('csv-import-summary');\r\n+const importCsvBtn = document.getElementById('import-csv-btn');\r\n+\r\n+const markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\n+const selectedCountSpan = document.getElementById('selectedCount');\r\n+const massActionsContainer = document.getElementById('massActionsContainer');\r\n+const selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\n+const deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n+\r\n+const changeCategoryBtn = document.getElementById('changeCategoryBtn');\r\n+const categoryBatchModal = document.getElementById('categoryBatchModal');\r\n+const batchCategorySelect = document.getElementById('batchCategorySelect');\r\n+const cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\n+const confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n+\r\n+const openProfileModalBtn = document.getElementById('openProfileModalBtn');\r\n+const profileModal = document.getElementById('profileModal');\r\n+const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\n+const profileUsername = document.getElementById('profileUsername');\r\n+const profileRole = document.getElementById('profileRole');\r\n+const profileCompany = document.getElementById('profileCompany');\r\n+const changePasswordForm = document.getElementById('changePasswordForm');\r\n+const verificationNotice = document.getElementById('verificationNotice');\r\n+const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n+\r\n+const recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\n+const recurrentAddForm = document.getElementById('recurrent-add-form');\r\n+const recurrentEditModal = document.getElementById('recurrentEditModal');\r\n+const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n+const singleParcelDate = document.getElementById('single-parcel-date');\r\n+\r\n+const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n+const announcementMessage = document.getElementById('announcementBannerMessage');\r\n+const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n+\r\n+// =================================================================================\r\n+// FUNÇÕES DE LÓGICA E UI\r\n+// =================================================================================\r\n+\r\n+/**\r\n+ * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n+ * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n+ */\r\n+function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+\r\n+    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n+\r\n+    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n+    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => {\r\n+            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+        });\r\n+\r\n+    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n+    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n+\r\n+    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n+\r\n+    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n+    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n+    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+\r\n+    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n+\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    // Atualiza os elementos HTML com os valores corretos\r\n+    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n+    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n+    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Renderiza o calendário com uma lista específica de boletos.\r\n+ * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n+ * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n+ */\r\n+function renderCalendar(boletosToRender = userBoletos) {\r\n+    // --- INÍCIO DA CORREÇÃO DE SEGURANÇA ---\r\n+    const calendarDays = document.getElementById('calendarDays');\r\n+    const currentMonthYear = document.getElementById('currentMonthYear');\r\n+\r\n+    if (!calendarDays || !currentMonthYear) {\r\n+        console.error(\"ERRO CRÍTICO: Elementos essenciais do calendário (#calendarDays ou #currentMonthYear) não foram encontrados no HTML.\");\r\n+        return; // Para a execução para evitar mais erros.\r\n+    }\r\n+    // --- FIM DA CORREÇÃO DE SEGURANÇA ---\r\n+\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n+    calendarDays.innerHTML = '';\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+\r\n+    const parcelsByDate = new Map();\r\n+    boletosToRender.forEach(bill => {\r\n+        bill.parcels.forEach(parcel => {\r\n+            const date = parcel.dueDate;\r\n+            if (!parcelsByDate.has(date)) {\r\n+                parcelsByDate.set(date, []);\r\n+            }\r\n+            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n+        });\r\n+    });\r\n+\r\n+    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n+    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n+\r\n+    for (let i = 0; i < firstDayOfMonth; i++) {\r\n+        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n+    }\r\n+\r\n+    for (let day = 1; day <= daysInMonth; day++) {\r\n+        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n+        const dayCell = document.createElement('div');\r\n+        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n+        dayCell.dataset.date = dateStr;\r\n+\r\n+        const dayHeader = document.createElement('div');\r\n+        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n+        dayHeader.textContent = day;\r\n+        dayCell.appendChild(dayHeader);\r\n+\r\n+        dayCell.addEventListener('click', (e) => {\r\n+            if (e.target.closest('.bill-card-draggable')) return;\r\n+            openAddBillModal(e.currentTarget.dataset.date);\r\n+        });\r\n+\r\n+        if (parcelsByDate.has(dateStr)) {\r\n+            parcelsByDate.get(dateStr).forEach(parcel => {\r\n+                const bill = parcel.parentBill;\r\n+                const parcelElement = document.createElement('div');\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                const isOverdue = !parcel.paid && dueDate < today;\r\n+                let statusClass = 'bg-indigo-700 text-indigo-100';\r\n+                let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n+\r\n+                if (parcel.paid) {\r\n+                    statusClass = 'bg-green-700 text-green-100';\r\n+                    statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n+                } else if (isOverdue) {\r\n+                    statusClass = 'bg-red-700 text-red-100';\r\n+                    statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n+                }\r\n+\r\n+                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n+                parcelElement.dataset.boletoId = bill._id;\r\n+                parcelElement.dataset.parcelId = parcel._id;\r\n+\r\n+                parcelElement.innerHTML = `\r\n+                    <div class=\"flex items-start space-x-2\">\r\n+                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n+                        <div class=\"flex-1 min-w-0\">\r\n+                            <div class=\"flex justify-between items-center\">\r\n+                                <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n+                                    ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n+                                </span>\r\n+                                <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n+                                    ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n+                                </span>\r\n+                            </div>\r\n+\r\n+                            ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n+                            ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n+                        </div>\r\n+                    </div>\r\n+                `;\r\n+\r\n+                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n+\r\n+                const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n+                checkbox.addEventListener('change', (e) => {\r\n+                    const parcelId = e.target.dataset.parcelId;\r\n+                    const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n+                    if (e.target.checked) {\r\n+                        selectedItems.set(parcelId, boletoId);\r\n+                    } else {\r\n+                        selectedItems.delete(parcelId);\r\n+                    }\r\n+                    updateMassPaymentButton();\r\n+                });\r\n+                checkbox.addEventListener('click', (e) => e.stopPropagation());\r\n+\r\n+                dayCell.appendChild(parcelElement);\r\n+            });\r\n+        }\r\n+\r\n+        calendarDays.appendChild(dayCell);\r\n+    }\r\n+\r\n+    initializeDragAndDrop();\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para ver/editar os detalhes de uma parcela.\r\n+ * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n+ * @param {object} parcel - O objeto da parcela específica.\r\n+ */\r\n+async function openBillModal(bill, parcel) {\r\n+    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n+    selectedParcel = { ...parcel, parentId: bill._id };\r\n+\r\n+    // Preenche todos os campos do modal com os dados da parcela clicada\r\n+    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n+    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n+    modalBillAmount.value = parcel.amount.toFixed(2);\r\n+    modalBillDate.value = parcel.dueDate;\r\n+    modalBillDescription.value = parcel.description || '';\r\n+    modalBillBarcodeInput.value = parcel.barcode || '';\r\n+    modalBillPaidCheckbox.checked = parcel.paid;\r\n+\r\n+    // Mostra o botão de gerar código de barras apenas se houver um código\r\n+    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n+\r\n+    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n+    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n+    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n+    if (bill.nfeNumber) {\r\n+        nfeNumberEl.textContent = bill.nfeNumber;\r\n+        nfeContainer.classList.remove('hidden');\r\n+    } else {\r\n+        nfeContainer.classList.add('hidden');\r\n+    }\r\n+\r\n+    // Lógica dinâmica para a secção de anexos\r\n+    const attachmentContainer = document.getElementById('attachment-container');\r\n+    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n+\r\n+    if (parcel.attachmentUrl) {\r\n+        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n+        attachmentContainer.innerHTML = `\r\n+            <div class=\"flex items-center justify-between\">\r\n+                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n+                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n+                </a>\r\n+                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n+            </div>\r\n+        `;\r\n+        // Adiciona o evento de clique ao novo botão de remover\r\n+        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n+    } else {\r\n+        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+        // Adiciona o evento de 'change' ao novo input de upload\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+    }\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n+        categories.forEach(cat => {\r\n+            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n+        });\r\n+        if (bill.category) {\r\n+            modalBillCategorySelect.value = bill.category._id;\r\n+        } else {\r\n+            modalBillCategorySelect.value = \"\";\r\n+        }\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+\r\n+    billModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n+ */\r\n+function clearBillForm() {\r\n+    if (billForm) {\r\n+        billForm.reset();\r\n+    }\r\n+    currentBill = {};\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a interface principal com os dados dos boletos.\r\n+ */\r\n+async function updateBillsOrganizer() {\r\n+    try {\r\n+        userBoletos = await api.getBoletos();\r\n+\r\n+        if (!userBoletos || userBoletos.length === 0) {\r\n+            console.log(\"AVISO: Nenhum boleto foi encontrado na base de dados para esta empresa.\");\r\n+        }\r\n+\r\n+        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n+        const totalBillsSpan = document.getElementById('totalBills');\r\n+        \r\n+        if (totalBillsSpan) {\r\n+            totalBillsSpan.textContent = totalParcels;\r\n+        } else {\r\n+            console.error(\"FALHA CRÍTICA: O elemento HTML com o id 'totalBills' não foi encontrado!\");\r\n+            return; // Para a execução se o elemento não existir\r\n+        }\r\n+\r\n+        updateMonthlySummary();\r\n+        renderCalendar();\r\n+\r\n+    } catch (error) {\r\n+        console.error(\"ERRO GRAVE DENTRO DE updateBillsOrganizer:\", error);\r\n+        showToast(error.message, 'error');\r\n+    }\r\n+}\r\n+\r\n+async function showMainApp() {\r\n+    hideAllScreens();\r\n+    // Removemos a classe 'hidden' e definimos o display diretamente\r\n+    mainAppContent.classList.remove('hidden');\r\n+    mainAppContent.style.display = 'block';\r\n+\r\n+    openAddBillModalBtn.classList.remove('hidden');\r\n+    openAddBillModalBtn.style.display = 'flex'; // O botão é um flex container\r\n+\r\n+    // O resto da função continua igual...\r\n+    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+\r\n+    await fetchAndDisplayAnnouncement();\r\n+    await populateCategoryFilter();\r\n+    await updateBillsOrganizer();\r\n+}\r\n+\r\n+// Adicionar ao bloco de funções de Lógica e UI\r\n+\r\n+/**\r\n+ * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n+ * @param {string} tagName - O nome da tag a ser procurada.\r\n+ * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n+ * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n+ */\r\n+function getTagValue(tagName, parentElement) {\r\n+    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n+    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n+    return element?.textContent || '';\r\n+}\r\n+\r\n+/**\r\n+ * Configura e exibe o modal de assinatura para o Proprietário.\r\n+ * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n+ */\r\n+function showSubscriptionModal(company) {\r\n+    hideAllScreens();\r\n+    const status = company.subscription?.status;\r\n+\r\n+    if (status === 'inactive' || status === 'trial') {\r\n+        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n+        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n+    } else { // 'past_due' ou outro estado\r\n+        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n+        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n+        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n+        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n+    }\r\n+    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n+ */\r\n+function showAccessBlockedModal() {\r\n+    hideAllScreens();\r\n+    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n+    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para criar uma nova empresa.\r\n+ */\r\n+\r\n+\r\n+/**\r\n+ * Fecha o modal de criar empresa.\r\n+ */\r\n+\r\n+\r\n+\r\n+\r\n+/**\r\n+ * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n+ */\r\n+async function openCompanyInfoModal() {\r\n+    showLoader();\r\n+    try {\r\n+        // A chamada à API já retorna os dados completos da empresa, incluindo 'isVerified'\r\n+        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n+        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n+        document.getElementById('companyInfoEmail').value = company.email || '';\r\n+        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n+        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n+\r\n+        // LÓGICA PARA MOSTRAR/ESCONDER O AVISO\r\n+        if (company.isVerified) {\r\n+            verificationNotice.classList.add('hidden');\r\n+        } else {\r\n+            verificationNotice.classList.remove('hidden');\r\n+        }\r\n+\r\n+        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n+        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n+\r\n+        companyInfoModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de permissões para o Proprietário.\r\n+ */\r\n+async function openPermissionsModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const permissions = await api.getPermissions();\r\n+\r\n+        // Preenche o modal com as permissões atuais\r\n+        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n+        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n+\r\n+        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n+        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n+        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n+\r\n+        permissionsModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+// --- Handlers para os botões DENTRO dos novos modais ---\r\n+\r\n+async function handleSaveCompanyInfo() {\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n+        email: document.getElementById('companyInfoEmail').value,\r\n+        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n+        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n+        showToast('Dados da empresa atualizados!', 'success');\r\n+        companyInfoModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSavePermissions() {\r\n+    const newPermissions = {\r\n+        Gerente: {\r\n+            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n+        },\r\n+        Funcionário: {\r\n+            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n+            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n+            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n+        }\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updatePermissions(newPermissions);\r\n+        showToast('Permissões salvas com sucesso!', 'success');\r\n+        permissionsModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function openCategoriesModal() {\r\n+    showLoader();\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        renderCategoryList(categories);\r\n+        categoriesModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function renderCategoryList(categories) {\r\n+    categoryListDiv.innerHTML = '';\r\n+    if (categories.length === 0) {\r\n+        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n+        return;\r\n+    }\r\n+    categories.forEach(category => {\r\n+        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n+            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n+                <span class=\"text-white\">${category.name}</span>\r\n+                <div>\r\n+                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n+                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                </div>\r\n+            </div>\r\n+        `);\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal para adicionar um novo boleto,\r\n+ * e opcionalmente pré-preenchendo a data.\r\n+ * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n+ */\r\n+async function openAddBillModal(preselectedDate = null) {\r\n+    clearBillForm();\r\n+    switchAddBillMode('manual');\r\n+    showLoader();\r\n+    try {\r\n+        // Se uma data foi passada como parâmetro (ou seja, o utilizador clicou no calendário)\r\n+        if (preselectedDate) {\r\n+            // Preenche o campo da aba \"Adicionar Manual\" (comportamento que já existia)\r\n+            document.getElementById('dueDate').value = preselectedDate;\r\n+\r\n+            // NOVA LINHA: Preenche também o campo da aba \"Pagamento Recorrente\"\r\n+            document.getElementById('recurrentStartDate').value = preselectedDate;\r\n+        }\r\n+\r\n+        addBillModal.classList.remove('hidden');\r\n+    } catch (error)\r\n+ {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function populateCategoryFilter() {\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n+        // Se der erro, garante que a opção padrão exista\r\n+        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Alterna a visualização entre o Calendário e o Dashboard.\r\n+ */\r\n+function switchView(viewToShow) {\r\n+    // Esconde ambas as vistas\r\n+    calendarView.classList.add('hidden');\r\n+    dashboardView.classList.add('hidden');\r\n+\r\n+    // Reseta o estilo dos botões\r\n+    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n+    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n+    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+\r\n+    // Mostra a vista correta e ativa o botão correspondente\r\n+    if (viewToShow === 'calendar') {\r\n+        calendarView.classList.remove('hidden');\r\n+        viewCalendarBtn.classList.add('bg-indigo-600');\r\n+        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    } else if (viewToShow === 'dashboard') {\r\n+        dashboardView.classList.remove('hidden');\r\n+        viewDashboardBtn.classList.add('bg-indigo-600');\r\n+        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderDashboard();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza os cartões de KPI no dashboard.\r\n+ * @param {object} kpiData - Os dados dos KPIs vindos da API.\r\n+ */\r\n+function updateKpiCards(kpiData) {\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+    const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n+\r\n+    // Popula os novos campos\r\n+    if (kpiContasVencidas) kpiContasVencidas.textContent = formatCurrency(kpiData.totalVencido);\r\n+    \r\n+    // Popula os campos existentes\r\n+    document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n+    document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n+    document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n+}\r\n+\r\n+/**\r\n+ * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n+ */\r\n+async function renderDashboard() {\r\n+    showLoader();\r\n+    try {\r\n+        const dateRange = getDateRangeFromPreset();\r\n+\r\n+        // ATUALIZADO: Passa o 'dashboardStatusFilter' para as chamadas da API\r\n+        const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n+            api.getExpensesByCategory(dateRange, dashboardStatusFilter),\r\n+            api.getMonthlySummary(dateRange, dashboardStatusFilter),\r\n+            api.getKpiSummary(dateRange),\r\n+            api.getUpcomingPayments()\r\n+        ]);\r\n+\r\n+        updateKpiCards(kpiData);\r\n+        renderPieChart(pieData);\r\n+        renderBarChart(barData);\r\n+        renderUpcomingPayments(upcomingData);\r\n+        renderTopExpensesChart(pieData);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de pizza de despesas por categoria.\r\n+ */\r\n+function renderPieChart(data) {\r\n+    const canvas = document.getElementById('expensesByCategoryChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    if (expensesPieChart) {\r\n+        expensesPieChart.destroy();\r\n+    }\r\n+\r\n+    expensesPieChart = new Chart(ctx, {\r\n+        type: 'pie',\r\n+        data: {\r\n+            labels: data.map(item => item.categoryName),\r\n+            datasets: [{\r\n+                data: data.map(item => item.totalAmount),\r\n+                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n+                borderColor: '#1f2937',\r\n+                borderWidth: 2\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n+ */\r\n+function renderBarChart(data) {\r\n+    const canvas = document.getElementById('monthlyExpensesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n+    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n+    const values = data.map(item => item.totalAmount);\r\n+\r\n+    if (expensesBarChart) {\r\n+        expensesBarChart.destroy();\r\n+    }\r\n+    \r\n+    expensesBarChart = new Chart(ctx, {\r\n+        type: 'bar',\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n+                borderColor: 'rgba(79, 70, 229, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n+            },\r\n+            plugins: { legend: { display: false } }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Busca categorias da API e preenche um elemento <select> do HTML.\r\n+ * @param {HTMLSelectElement} selectElement - O elemento dropdown a ser preenchido.\r\n+ */\r\n+async function populateCategorySelect(selectElement) {\r\n+    if (!selectElement) return;\r\n+\r\n+    try {\r\n+        const categories = await api.getCategories();\r\n+        selectElement.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n+        categories.forEach(category => {\r\n+            const option = document.createElement('option');\r\n+            option.value = category._id;\r\n+            option.textContent = category.name;\r\n+            selectElement.appendChild(option);\r\n+        });\r\n+    } catch (error) {\r\n+        showToast('Erro ao carregar categorias.', 'error');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n+ * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n+ */\r\n+function initializeDashboardDragAndDrop() {\r\n+    const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n+    const mainGrid = document.getElementById('dashboard-main-grid');\r\n+\r\n+    // Vamos guardar as instâncias do Sortable em variáveis\r\n+    let kpiSortable, mainSortable;\r\n+\r\n+    const saveOrder = (gridType) => {\r\n+        if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n+\r\n+        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n+        let order;\r\n+\r\n+        // Usamos a instância correta para obter a ordem\r\n+        if (gridType === 'kpi' && kpiSortable) {\r\n+            order = kpiSortable.toArray();\r\n+        } else if (gridType === 'main' && mainSortable) {\r\n+            order = mainSortable.toArray();\r\n+        }\r\n+\r\n+        if (order) {\r\n+            localStorage.setItem(key, JSON.stringify(order));\r\n+        }\r\n+    };\r\n+\r\n+    if (kpiGrid) {\r\n+        // Guardamos a instância na nossa variável\r\n+        kpiSortable = new Sortable(kpiGrid, {\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+            // A chamada agora é mais simples\r\n+            onEnd: () => saveOrder('kpi'),\r\n+        });\r\n+    }\r\n+\r\n+    if (mainGrid) {\r\n+        // Guardamos a instância na nossa variável\r\n+        mainSortable = new Sortable(mainGrid, {\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+            onEnd: () => saveOrder('main'),\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Verifica o localStorage por uma ordem de cartões salva para o utilizador atual\r\n+ * e, se encontrar, reordena os elementos no ecrã.\r\n+ */\r\n+function applySavedDashboardOrder() {\r\n+    if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n+\r\n+    const applyOrder = (gridType) => {\r\n+        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n+        const savedOrder = localStorage.getItem(key);\r\n+        const grid = document.getElementById(`dashboard-${gridType}-grid`);\r\n+\r\n+        if (savedOrder && grid) {\r\n+            const order = JSON.parse(savedOrder);\r\n+            // Para cada id na ordem salva, encontramos o elemento correspondente\r\n+            // e o movemos para o final do container. Ao fazer isto em sequência,\r\n+            // a ordem final corresponde à ordem salva.\r\n+            order.forEach(dataId => {\r\n+                const card = grid.querySelector(`[data-id=\"${dataId}\"]`);\r\n+                if (card) {\r\n+                    grid.appendChild(card);\r\n+                }\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    applyOrder('kpi');\r\n+    applyOrder('main');\r\n+}\r\n+\r\n+/**\r\n+ * Captura a área do dashboard como uma imagem e gera um ficheiro PDF para download.\r\n+ */\r\n+async function handleVisualExportPDF() {\r\n+    // Mostra o loader para dar feedback ao utilizador\r\n+    showLoader();\r\n+\r\n+    // Seleciona o elemento do DOM que queremos \"fotografar\"\r\n+    const dashboardElement = document.getElementById('dashboardView');\r\n+    \r\n+    // Esconde temporariamente os botões de filtro e exportação para não aparecerem no PDF\r\n+    const filterContainer = document.getElementById('dashboard-date-filter-container');\r\n+    if (filterContainer) filterContainer.style.display = 'none';\r\n+\r\n+    try {\r\n+        // Usa a biblioteca html2canvas para criar um \"canvas\" (uma imagem) do elemento\r\n+        const canvas = await html2canvas(dashboardElement, {\r\n+            scale: 2, // Aumenta a resolução da imagem para melhor qualidade\r\n+            backgroundColor: '#1e293b' // Garante um fundo consistente\r\n+        });\r\n+\r\n+        // Converte o canvas para uma imagem no formato PNG\r\n+        const imageData = canvas.toDataURL('image/png');\r\n+\r\n+        // Usa a biblioteca jsPDF para criar o documento\r\n+        // A orientação 'p' é retrato (portrait), 'mm' é milímetros, 'a4' é o tamanho da página\r\n+        const pdf = new jspdf.jsPDF({\r\n+            orientation: 'p',\r\n+            unit: 'mm',\r\n+            format: 'a4'\r\n+        });\r\n+\r\n+        // Calcula as dimensões da imagem para que ela caiba na página A4, mantendo a proporção\r\n+        const pageWidth = pdf.internal.pageSize.getWidth();\r\n+        const pageHeight = pdf.internal.pageSize.getHeight();\r\n+        const imageWidth = canvas.width;\r\n+        const imageHeight = canvas.height;\r\n+        const ratio = imageWidth / imageHeight;\r\n+        let pdfImageWidth = pageWidth - 20; // Deixa uma margem de 10mm de cada lado\r\n+        let pdfImageHeight = pdfImageWidth / ratio;\r\n+        \r\n+        // Se a imagem ainda for muito alta, ajusta pela altura\r\n+        if (pdfImageHeight > pageHeight - 20) {\r\n+            pdfImageHeight = pageHeight - 20;\r\n+            pdfImageWidth = pdfImageHeight * ratio;\r\n+        }\r\n+        \r\n+        // Adiciona a imagem ao PDF, centralizada\r\n+        const x = (pageWidth - pdfImageWidth) / 2;\r\n+        const y = 10; // Margem de 10mm no topo\r\n+        pdf.addImage(imageData, 'PNG', x, y, pdfImageWidth, pdfImageHeight);\r\n+\r\n+        // Força o download do ficheiro\r\n+        pdf.save('dashboard-relatorio.pdf');\r\n+\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao gerar PDF visual:\", error);\r\n+        showToast('Ocorreu um erro ao gerar o PDF.', 'error');\r\n+    } finally {\r\n+        // Mostra novamente os botões de filtro, quer a exportação tenha funcionado ou não\r\n+        if (filterContainer) filterContainer.style.display = 'block';\r\n+        // Esconde o loader\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n+ * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n+ */\r\n+function switchAddBillMode(mode) {\r\n+    if (!manualAddForm || !xmlAddForm || !csvImportForm || !recurrentAddForm) return;\r\n+\r\n+    // Esconde todos os painéis\r\n+    manualAddForm.classList.add('hidden');\r\n+    xmlAddForm.classList.add('hidden');\r\n+    csvImportForm.classList.add('hidden');\r\n+    recurrentAddForm.classList.add('hidden'); // Esconde o novo painel\r\n+\r\n+    // Reseta o estilo de todos os botões\r\n+    [manualAddBtn, xmlAddBtn, csvImportBtn, recurrentAddBtn].forEach(btn => { // Adiciona o novo botão\r\n+        if(btn) {\r\n+            btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+            btn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+        }\r\n+    });\r\n+\r\n+    // Ativa o painel e o botão corretos\r\n+    let activeBtn, activeForm;\r\n+    if (mode === 'manual') {\r\n+        activeBtn = manualAddBtn;\r\n+        activeForm = manualAddForm;\r\n+    } else if (mode === 'xml') {\r\n+        activeBtn = xmlAddBtn;\r\n+        activeForm = xmlAddForm;\r\n+    } else if (mode === 'recurrent') { // Adiciona a nova condição\r\n+        activeBtn = recurrentAddBtn;\r\n+        activeForm = recurrentAddForm;\r\n+    } else if (mode === 'csv') {\r\n+        activeBtn = csvImportBtn;\r\n+        activeForm = csvImportForm;\r\n+    }\r\n+\r\n+    if (activeBtn && activeForm) {\r\n+        activeForm.classList.remove('hidden');\r\n+        activeBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n+        activeBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a seleção de um ficheiro CSV, lê e pré-visualiza os dados.\r\n+ */\r\n+function handleCsvFileSelect(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) return;\r\n+\r\n+    // Usa o PapaParse para ler o ficheiro\r\n+    Papa.parse(file, {\r\n+        header: true, // Trata a primeira linha como cabeçalho\r\n+        skipEmptyLines: true,\r\n+        complete: (results) => {\r\n+            // Guarda os dados processados no estado da aplicação\r\n+            parsedCsvData = results.data;\r\n+            renderCsvPreview(parsedCsvData);\r\n+        },\r\n+        error: (err) => {\r\n+            showToast(`Erro ao ler o ficheiro CSV: ${err.message}`, 'error');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a tabela de pré-visualização com os dados lidos do CSV.\r\n+ */\r\n+function renderCsvPreview(data) {\r\n+    // Verificação de segurança para garantir que 'data' é um array\r\n+    if (!Array.isArray(data)) {\r\n+        console.error(\"renderCsvPreview foi chamada com dados inválidos:\", data);\r\n+        data = []; // Assume um array vazio para não quebrar a execução\r\n+    }\r\n+\r\n+    if (!csvPreviewTableBody || !csvPreviewArea || !csvImportSummary) {\r\n+        console.error(\"Elementos da pré-visualização do CSV não foram encontrados no HTML.\");\r\n+        return;\r\n+    }\r\n+\r\n+    csvPreviewTableBody.innerHTML = '';\r\n+    if (data.length === 0) {\r\n+        csvPreviewArea.classList.add('hidden');\r\n+        return;\r\n+    }\r\n+    \r\n+    const formatCurrency = (valueStr) => {\r\n+        const value = parseFloat(String(valueStr).replace(',', '.'));\r\n+        return isNaN(value) ? 'Inválido' : value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+    };\r\n+\r\n+    data.forEach(row => {\r\n+        const values = Object.values(row);\r\n+        const tr = `\r\n+            <tr>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[0] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[1] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700\">${values[2] || ''}</td>\r\n+                <td class=\"px-4 py-2 border-b border-gray-700 text-right\">${formatCurrency(values[3])}</td>\r\n+            </tr>\r\n+        `;\r\n+        csvPreviewTableBody.insertAdjacentHTML('beforeend', tr);\r\n+    });\r\n+\r\n+    csvImportSummary.textContent = `${data.length} boletos prontos para serem importados.`;\r\n+    csvPreviewArea.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Envia os dados do CSV para a API para serem salvos na base de dados.\r\n+ */\r\n+async function handleConfirmImport() {\r\n+    if (parsedCsvData.length === 0) {\r\n+        return showToast('Não há dados para importar.', 'info');\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const response = await api.importBoletos(parsedCsvData);\r\n+        showToast(response.message, 'success');\r\n+\r\n+        // Fecha o modal e atualiza a aplicação\r\n+        addBillModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+\r\n+        // Limpa os dados da pré-visualização\r\n+        csvPreviewArea.classList.add('hidden');\r\n+        csvFileInput.value = '';\r\n+        parsedCsvData = [];\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Atualiza a visibilidade e a contagem do botão de pagamento em massa.\r\n+ */\r\n+function updateMassPaymentButton() {\r\n+    const count = selectedItems.size;\r\n+    selectedCountSpan.textContent = count;\r\n+    massActionsContainer.classList.toggle('hidden', count === 0);\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão \"Pagar Selecionados\".\r\n+ */\r\n+async function handleMarkSelectedAsPaid() {\r\n+    if (selectedItems.size === 0) {\r\n+        return showToast('Nenhuma parcela selecionada.', 'info');\r\n+    }\r\n+\r\n+    if (!confirm(`Tem a certeza que deseja marcar ${selectedItems.size} parcela(s) como paga(s)?`)) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const parcelIds = Array.from(selectedItems.keys());\r\n+\r\n+        // Chama a função da API com o array de IDs correto.\r\n+        const response = await api.markParcelsAsPaid(parcelIds);\r\n+\r\n+        showToast(response.message, 'success');\r\n+\r\n+        // Limpa a seleção e atualiza a interface\r\n+        selectedItems.clear();\r\n+        updateMassPaymentButton();\r\n+        await updateBillsOrganizer(); // Recarrega o calendário\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Seleciona todos os checkboxes de boletos visíveis no calendário.\r\n+ */\r\n+function handleSelectAllVisible() {\r\n+    // Pega todos os checkboxes que estão atualmente no calendário\r\n+    document.querySelectorAll('.mass-payment-checkbox').forEach(checkbox => {\r\n+        // Marca apenas os que ainda não estão marcados\r\n+        if (!checkbox.checked) {\r\n+            checkbox.checked = true;\r\n+\r\n+            // --- LÓGICA CORRIGIDA ---\r\n+            const parcelId = checkbox.dataset.parcelId;\r\n+            // Pega o boletoId do elemento pai mais próximo\r\n+            const boletoId = checkbox.closest('.bill-card-draggable').dataset.boletoId;\r\n+\r\n+            // Garante que temos os dois IDs antes de adicionar ao mapa\r\n+            if (parcelId && boletoId) {\r\n+                // Usa o método .set(key, value), que é o correto para um Map\r\n+                selectedItems.set(parcelId, boletoId);\r\n+            }\r\n+        }\r\n+    });\r\n+    // Atualiza o botão para refletir a nova contagem\r\n+    updateMassPaymentButton();\r\n+}\r\n+\r\n+/**\r\n+ * Desmarca todos os checkboxes de boletos selecionados.\r\n+ */\r\n+function handleDeselectAll() {\r\n+    // Limpa o nosso Set de seleção\r\n+    selectedItems.clear();\r\n+    // Desmarca todos os checkboxes que estão no calendário\r\n+    document.querySelectorAll('.mass-payment-checkbox:checked').forEach(checkbox => {\r\n+        checkbox.checked = false;\r\n+    });\r\n+    // Atualiza o botão (que será escondido, pois a contagem é 0)\r\n+    updateMassPaymentButton();\r\n+}\r\n+\r\n+/**\r\n+ * Busca os dados do utilizador e abre o modal de perfil.\r\n+ */\r\n+async function openProfileModal() {\r\n+    // Usa as variáveis globais que já temos da inicialização\r\n+    if (!currentLoggedInUser || !currentLoggedInCompany) {\r\n+        showToast('Não foi possível carregar os dados do perfil.', 'error');\r\n+        return;\r\n+    }\r\n+\r\n+    // Preenche o modal com os dados\r\n+    profileUsername.textContent = currentLoggedInUser.username;\r\n+    profileRole.textContent = currentLoggedInUser.role;\r\n+    profileCompany.textContent = currentLoggedInCompany.nomeEmpresa;\r\n+\r\n+    // Mostra o modal\r\n+    profileModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Busca o anúncio ativo mais recente e o exibe no banner.\r\n+ */\r\n+async function fetchAndDisplayAnnouncement() {\r\n+    try {\r\n+        const announcement = await api.getActiveAnnouncement();\r\n+\r\n+        // Se existir um anúncio e ele tiver uma mensagem\r\n+        if (announcement && announcement.message) {\r\n+            let messageHtml = announcement.message;\r\n+            // Se o anúncio tiver um link, transforma a mensagem num link clicável\r\n+            if (announcement.link) {\r\n+                messageHtml = `<a href=\"${announcement.link}\" target=\"_blank\" class=\"hover:underline\">${announcement.message} <i class=\"fas fa-external-link-alt fa-xs ml-1\"></i></a>`;\r\n+            }\r\n+            announcementMessage.innerHTML = messageHtml;\r\n+            globalAnnouncementBanner.classList.remove('hidden');\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(\"Não foi possível buscar o anúncio:\", error);\r\n+    }\r\n+}\r\n+\r\n+// =================================================================================\r\n+// =================================================================================\r\n+// EVENT HANDLERS - Funções que respondem aos eventos\r\n+// =================================================================================\r\n+// =================================================================================\r\n+\r\n+async function handleForgotPasswordRequest(e) {\r\n+    e.preventDefault();\r\n+    const email = document.getElementById('recoveryEmailInput').value;\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.requestPasswordReset(email);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n+        forgotPasswordModal.classList.add('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+async function handleCalculateInstallments(e) {\r\n+    e.preventDefault(); // Impede a submissão padrão do formulário\r\n+\r\n+    const activeTabButton = document.querySelector('#addBillModal .flex button.bg-indigo-600');\r\n+    if (!activeTabButton) {\r\n+        return showToast('Erro: Não foi possível identificar a aba ativa.', 'error');\r\n+    }\r\n+    const activeModeId = activeTabButton.id;\r\n+\r\n+    currentBill = null;\r\n+\r\n+    if (activeModeId === 'manual-add-btn') {\r\n+        const billName = document.getElementById('billName').value;\r\n+        const dueDate = document.getElementById('dueDate').value;\r\n+        const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(',', '.'));\r\n+        const installments = parseInt(document.getElementById('installments').value);\r\n+        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n+        const description = document.getElementById('description').value;\r\n+\r\n+        // Validação feita aqui no JavaScript\r\n+        if (!billName || !dueDate || !installments || isNaN(totalAmount) || totalAmount <= 0 || installments <= 0) {\r\n+            return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n+        }\r\n+\r\n+        currentBill = { name: billName, description, parcels: [], category: null };\r\n+        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n+\r\n+        for (let i = 0; i < installments; i++) {\r\n+            const parcelDate = new Date(dueDate + 'T00:00:00');\r\n+            parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n+            currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n+        }\r\n+\r\n+    } else if (activeModeId === 'recurrent-add-btn') {\r\n+        const billName = document.getElementById('recurrentBillName').value;\r\n+        const startDate = document.getElementById('recurrentStartDate').value;\r\n+        const amount = parseFloat(document.getElementById('recurrentAmount').value);\r\n+        const months = parseInt(document.getElementById('recurrentInstallments').value);\r\n+        const description = document.getElementById('recurrentDescription').value;\r\n+\r\n+        // Validação feita aqui no JavaScript\r\n+        if (!billName || !startDate || !months || isNaN(amount) || amount <= 0 || months <= 0) {\r\n+            return showToast(\"Preencha todos os campos do pagamento recorrente.\", \"error\");\r\n+        }\r\n+\r\n+        currentBill = { name: billName, description, parcels: [], category: null };\r\n+\r\n+        for (let i = 0; i < months; i++) {\r\n+            const parcelDate = new Date(startDate + 'T00:00:00');\r\n+            parcelDate.setMonth(parcelDate.getMonth() + i);\r\n+            currentBill.parcels.push({ number: i + 1, amount: amount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n+        }\r\n+    }\r\n+\r\n+    // Este bloco só será executado se `currentBill` tiver sido preenchido com sucesso\r\n+    if (currentBill && currentBill.parcels.length > 0) {\r\n+        installmentsList.innerHTML = '';\r\n+        currentBill.parcels.forEach((parcel, index) => {\r\n+             installmentsList.insertAdjacentHTML('beforeend', `\r\n+                <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                    <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                    <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                    <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                    <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                </div>\r\n+            `);\r\n+        });\r\n+\r\n+        addEventListenersToInstallmentInputs();\r\n+        updatePreviewTotal();\r\n+        previewBillNameInput.value = currentBill.name;\r\n+        previewNfeNumber.textContent = 'N/A';\r\n+        addBillModal.classList.add('hidden');\r\n+        await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n+        installmentsPreviewModal.classList.remove('hidden');\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n+ */\r\n+function updatePreviewTotal() {\r\n+    if (!currentBill.parcels) return;\r\n+    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+}\r\n+\r\n+async function handleAddToOrganizer() {\r\n+    currentBill.category = document.getElementById('previewBillCategorySelect').value || null;\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        await api.createBoleto(currentBill); // O objeto currentBill agora tem a categoria correta\r\n+        showToast('Boleto criado com sucesso!', 'success');\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+        clearBillForm();\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleSaveChanges() {\r\n+    if (!selectedParcel) return;\r\n+\r\n+    // Guarda os dados atualizados do formulário\r\n+    const updatedParcelData = {\r\n+        paid: modalBillPaidCheckbox.checked,\r\n+        amount: parseFloat(modalBillAmount.value),\r\n+        dueDate: modalBillDate.value,\r\n+        description: modalBillDescription.value,\r\n+        barcode: modalBillBarcodeInput.value,\r\n+    };\r\n+    const updatedBillData = {\r\n+        category: modalBillCategorySelect.value || null\r\n+    };\r\n+\r\n+    // Encontra o boleto pai na nossa lista local\r\n+    const parentBoleto = userBoletos.find(b => b._id === selectedParcel.parentId);\r\n+\r\n+    // Verifica se a parcela é recorrente (se o boleto pai tem mais de 1 parcela)\r\n+    if (parentBoleto && parentBoleto.parcels.length > 1) {\r\n+        // Se for recorrente, guarda os dados e abre o modal de escolha\r\n+        pendingUpdateData = { updatedParcelData, updatedBillData };\r\n+\r\n+        // Atualiza a data no texto do botão para dar mais contexto ao utilizador\r\n+        const date = new Date(updatedParcelData.dueDate + 'T00:00:00');\r\n+        singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n+\r\n+        recurrentEditModal.classList.remove('hidden');\r\n+    } else {\r\n+        // Se não for recorrente, salva diretamente como antes\r\n+        showLoader();\r\n+        try {\r\n+            await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n+            await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n+            showToast('Alterações salvas com sucesso!', 'success');\r\n+            billModal.classList.add('hidden');\r\n+            await updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteParcel() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast('Parcela excluída com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteEntireBill() {\r\n+    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteBoleto(selectedParcel.parentId);\r\n+        showToast('Boleto completo excluído com sucesso!', 'success');\r\n+        billModal.classList.add('hidden');\r\n+\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função de inicialização principal da aplicação.\r\n+ * Verifica a sessão e o estado da assinatura.\r\n+ */\r\n+async function initializeApp() {\r\n+    const today = new Date();\r\n+    currentMonth = today.getMonth();\r\n+    currentYear = today.getFullYear();\r\n+\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        // Se não houver token, o utilizador não está logado.\r\n+        // Idealmente, a página de login (Index.html) deveria ser mostrada.\r\n+        // Como estamos em OrgBoletos.html, vamos redirecionar.\r\n+        window.location.href = 'Index.html';\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const data = await api.checkSession();\r\n+        if (data.user.role === 'SuperAdmin') {\r\n+            isAdminLoggedIn = true;\r\n+            await showAdminDashboard();\r\n+        } else {\r\n+            currentLoggedInUser = data.user;\r\n+            currentLoggedInCompany = data.company;\r\n+            const subscription = currentLoggedInCompany.subscription;\r\n+            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+            if (isSubscriptionActive) {\r\n+                await showMainApp();\r\n+            } else {\r\n+                if (currentLoggedInUser.role === 'Proprietário') {\r\n+                    showSubscriptionModal(currentLoggedInCompany);\r\n+                } else {\r\n+                    showAccessBlockedModal();\r\n+                }\r\n+            }\r\n+        }\r\n+    } catch (error) {\r\n+        // Se o token for inválido ou a API falhar, o utilizador é deslogado\r\n+        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        setTimeout(() => {\r\n+            window.location.href = 'Index.html';\r\n+        }, 2000); // Aguarda 2 segundos para o utilizador ler a mensagem\r\n+    } finally {\r\n+        // Esconde a tela de carregamento inicial\r\n+        document.getElementById('loadingScreen').classList.add('hidden');\r\n+    }\r\n+}\r\n+\r\n+function logout() {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+}\r\n+\r\n+/**\r\n+ * Define a sessão de representação do admin.\r\n+ * Esta função é chamada pelo painel de admin quando clica em \"Entrar\".\r\n+ * @param {object} data - Os dados recebidos da API (token, user, company).\r\n+ */\r\n+export async function setImpersonationSession(data) {\r\n+    localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+    localStorage.setItem('authToken', data.token);\r\n+\r\n+    currentLoggedInCompany = data.company;\r\n+    currentLoggedInUser = data.user;\r\n+    loggedInViaAdmin = true;\r\n+\r\n+    await showMainApp();\r\n+}\r\n+\r\n+/**\r\n+ * Restaura a sessão original do SuperAdmin.\r\n+ * Limpa as variáveis de estado de representação e restaura o token do admin.\r\n+ * @returns {boolean} - Retorna true se o token do admin foi encontrado, senão false.\r\n+ */\r\n+export function restoreAdminSession() {\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n+    if (!adminToken) {\r\n+        console.error(\"Token de superAdmin não encontrado para restaurar a sessão.\");\r\n+        return false;\r\n+    }\r\n+\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken');\r\n+\r\n+    // Redefine as variáveis de estado da aplicação para o modo admin\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+\r\n+    return true;\r\n+}\r\n+\r\n+\r\n+\r\n+/**\r\n+ * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n+ * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n+ * @param {Event} event - O evento 'change' do input do ficheiro.\r\n+ */\r\n+async function handleNfeXmlUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file) {\r\n+        return;\r\n+    }\r\n+\r\n+    const reader = new FileReader();\r\n+\r\n+    reader.onload = async (e) => {\r\n+        try {\r\n+            const xmlString = e.target.result;\r\n+            const parser = new DOMParser();\r\n+            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n+\r\n+            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n+                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n+            }\r\n+\r\n+            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n+            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n+            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n+\r\n+            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n+            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n+            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n+\r\n+            let parcelsData = [];\r\n+\r\n+            if (duplicatas.length > 0) {\r\n+                parcelsData = duplicatas.map((dup, i) => ({\r\n+                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n+                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n+                    dueDate: getTagValue(\"dVenc\", dup)\r\n+                }));\r\n+            } else {\r\n+                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n+                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n+\r\n+                if (cobrancaMatch && cobrancaMatch[1]) {\r\n+                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n+                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n+                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n+                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n+\r\n+                    parcelsData = dias.map((dia, i) => {\r\n+                        const vencimento = new Date(dataEmissao);\r\n+                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n+                        return {\r\n+                            number: i + 1,\r\n+                            amount: parcelAmount,\r\n+                            dueDate: vencimento.toISOString().split('T')[0]\r\n+                        };\r\n+                    });\r\n+                }\r\n+            }\r\n+\r\n+            if (parcelsData.length > 0) {\r\n+                // ALTERAÇÃO AQUI: Removemos o prefixo \"NFe - \" do nome.\r\n+                currentBill = { name: nomeFornecedor, nfeNumber: nfeNumber, parcels: parcelsData };\r\n+\r\n+                installmentsList.innerHTML = '';\r\n+                currentBill.parcels.forEach((parcel, index) => {\r\n+                    installmentsList.insertAdjacentHTML('beforeend', `\r\n+                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n+                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n+                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n+                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n+                        </div>\r\n+                    `);\r\n+                });\r\n+\r\n+                addEventListenersToInstallmentInputs();\r\n+                updatePreviewTotal();\r\n+                previewBillNameInput.value = currentBill.name;\r\n+                previewNfeNumber.textContent = nfeNumber;\r\n+                await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n+                installmentsPreviewModal.classList.remove('hidden');\r\n+\r\n+            } else {\r\n+                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n+                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n+\r\n+                // ALTERAÇÃO AQUI TAMBÉM: Removemos o prefixo no caso de fallback.\r\n+                document.getElementById('billName').value = nomeFornecedor;\r\n+                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n+                if (vencimento) {\r\n+                    document.getElementById('dueDate').value = vencimento;\r\n+                }\r\n+\r\n+                addBillModal.classList.remove('hidden');\r\n+            }\r\n+\r\n+            showToast('Dados do XML carregados com sucesso!', 'success');\r\n+\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+            console.error(\"Erro ao processar XML:\", error);\r\n+        } finally {\r\n+            event.target.value = '';\r\n+        }\r\n+    };\r\n+\r\n+    reader.onerror = () => {\r\n+        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n+    };\r\n+\r\n+    reader.readAsText(file);\r\n+}\r\n+\r\n+/**\r\n+ * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n+ */\r\n+function addEventListenersToInstallmentInputs() {\r\n+    // Listener para o campo de VALOR\r\n+    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n+            }\r\n+            updatePreviewTotal();\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para o campo de DATA\r\n+    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n+        input.addEventListener('change', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].dueDate = e.target.value;\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    /**\r\n+     * Mostra a tela de login de administrador.\r\n+     */\r\n+    function showAdminLogin() {\r\n+        hideAllScreens(); // Função de utils.js\r\n+        if (adminLoginForm) adminLoginForm.reset();\r\n+        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n+    }\r\n+\r\n+    // Listener para o campo de CÓDIGO DE BARRAS\r\n+    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n+        // Evento para guardar o valor quando é digitado\r\n+        input.addEventListener('input', (e) => {\r\n+            const index = parseInt(e.target.dataset.parcelIndex);\r\n+            if (currentBill.parcels[index]) {\r\n+                currentBill.parcels[index].barcode = e.target.value;\r\n+            }\r\n+        });\r\n+\r\n+        input.addEventListener('keydown', (e) => {\r\n+            if (e.key === 'Enter') {\r\n+                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n+\r\n+                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n+                const nextIndex = currentIndex + 1;\r\n+                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n+\r\n+                if (nextInput) {\r\n+                    // Se houver um próximo campo de código de barras, foca nele.\r\n+                    nextInput.focus();\r\n+                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n+                } else {\r\n+                    // Se for o último campo, foca no botão de salvar.\r\n+                    document.getElementById('addToOrganizer').focus();\r\n+                }\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n+ */\r\n+function handleShowFullScreenBarcode() {\r\n+    const barcodeValue = modalBillBarcodeInput.value;\r\n+    if (!barcodeValue) {\r\n+        return showToast('Não há código de barras para mostrar.', 'info');\r\n+    }\r\n+\r\n+    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n+    if (!barcodeImageContainer) return;\r\n+\r\n+    // Limpa qualquer código de barras anterior\r\n+    barcodeImageContainer.innerHTML = '';\r\n+\r\n+    try {\r\n+        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n+        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n+\r\n+        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n+        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n+            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n+            lineColor: \"#000000\",\r\n+            width: 2,\r\n+            height: 100,\r\n+            displayValue: true, // Mostra os números abaixo das barras\r\n+            fontSize: 18\r\n+        });\r\n+\r\n+        // Mostra o modal de ecrã inteiro\r\n+        barcodeFullScreenModal.classList.remove('hidden');\r\n+\r\n+    } catch (e) {\r\n+        console.error(\"Erro ao gerar código de barras:\", e);\r\n+        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n+    }\r\n+}\r\n+\r\n+async function handleAttachmentUpload(event) {\r\n+    const file = event.target.files[0];\r\n+    if (!file || !selectedParcel) return;\r\n+\r\n+    // Cria um objeto FormData para enviar o ficheiro\r\n+    const formData = new FormData();\r\n+    formData.append('comprovante', file);\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Atualiza a UI para mostrar o link do novo anexo\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n+\r\n+        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n+        await updateBillsOrganizer();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com o clique no botão para remover um anexo de comprovativo.\r\n+ * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n+ */\r\n+async function handleRemoveAttachment() {\r\n+    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n+    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader(); // Mostra o ícone de carregamento\r\n+    try {\r\n+        // Chama a nossa função da API para apagar o anexo\r\n+        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n+        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n+\r\n+        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n+        const attachmentContainer = document.getElementById('attachment-container');\r\n+        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n+\r\n+        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n+        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n+\r\n+        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n+        await updateBillsOrganizer();\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n+ */\r\n+function applyFiltersAndSearch() {\r\n+    const searchTerm = searchInput.value.toLowerCase();\r\n+    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n+\r\n+    let filteredBoletos = userBoletos.filter(bill => {\r\n+        // Filtro de pesquisa\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n+            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+        if (!matchesSearch) return false;\r\n+\r\n+        // Filtro de categoria\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+        if (!matchesCategory) return false;\r\n+\r\n+        // Filtro de status\r\n+        if (activeStatusFilter === 'all') return true;\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        return bill.parcels.some(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeStatusFilter === 'paid') return parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            return false;\r\n+        });\r\n+    });\r\n+\r\n+    renderCalendar(filteredBoletos);\r\n+    updateMonthlySummary(filteredBoletos);\r\n+}\r\n+\r\n+/**\r\n+ * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n+ * agora com lógica para parcelas recorrentes.\r\n+ */\r\n+function initializeDragAndDrop() {\r\n+    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n+\r\n+    dayCells.forEach(cell => {\r\n+        new Sortable(cell, {\r\n+            group: 'calendar-bills',\r\n+            animation: 150,\r\n+            ghostClass: 'opacity-50',\r\n+\r\n+            onEnd: async function (evt) {\r\n+                const item = evt.item;\r\n+                const toCell = evt.to;\r\n+                const boletoId = item.dataset.boletoId;\r\n+                const parcelId = item.dataset.parcelId;\r\n+                const newDate = toCell.dataset.date;\r\n+\r\n+                if (!boletoId || !parcelId || !newDate) return;\r\n+\r\n+                const parentBoleto = userBoletos.find(b => b._id === boletoId);\r\n+                const originalParcel = parentBoleto?.parcels.find(p => p._id === parcelId);\r\n+\r\n+                if (!parentBoleto || !originalParcel) return;\r\n+\r\n+                if (parentBoleto.parcels.length > 1) {\r\n+                    // --- CORREÇÃO AQUI ---\r\n+                    // 1. Definimos a variável 'selectedParcel' que estava em falta.\r\n+                    selectedParcel = { ...originalParcel, parentId: parentBoleto._id };\r\n+\r\n+                    // 2. O resto da lógica continua a mesma\r\n+                    const updatedParcelData = {\r\n+                        ...originalParcel,\r\n+                        dueDate: newDate,\r\n+                    };\r\n+\r\n+                    pendingUpdateData = { \r\n+                        updatedParcelData, \r\n+                        updatedBillData: { category: parentBoleto.category?._id || null }\r\n+                    };\r\n+\r\n+                    const date = new Date(newDate + 'T00:00:00');\r\n+                    singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n+\r\n+                    recurrentEditModal.classList.remove('hidden');\r\n+                    renderCalendar();\r\n+\r\n+                } else {\r\n+                    // Lógica para parcela única (continua a mesma)\r\n+                    showLoader();\r\n+                    try {\r\n+                        await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n+                        showToast('Data da parcela atualizada com sucesso!', 'success');\r\n+                        await updateBillsOrganizer();\r\n+                    } catch (error) {\r\n+                        showToast(error.message, 'error');\r\n+                        await updateBillsOrganizer();\r\n+                    } finally {\r\n+                        hideLoader();\r\n+                    }\r\n+                }\r\n+            },\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Calcula o startDate e endDate com base numa predefinição do seletor.\r\n+ * @returns {{startDate?: string, endDate?: string}} - As datas ou um objeto vazio.\r\n+ */\r\n+function getDateRangeFromPreset() {\r\n+    const preset = dateRangePresetSelect.value;\r\n+    const now = new Date();\r\n+    let startDate, endDate;\r\n+\r\n+    switch (preset) {\r\n+        case 'thisMonth':\r\n+            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n+            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n+            break;\r\n+        case 'lastMonth':\r\n+            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n+            endDate = new Date(now.getFullYear(), now.getMonth(), 0);\r\n+            break;\r\n+        case 'thisQuarter':\r\n+            const quarter = Math.floor(now.getMonth() / 3);\r\n+            startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n+            endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n+            break;\r\n+        case 'thisYear':\r\n+            startDate = new Date(now.getFullYear(), 0, 1);\r\n+            endDate = new Date(now.getFullYear(), 11, 31);\r\n+            break;\r\n+        case 'custom':\r\n+            if (startDateInput.value && endDateInput.value) {\r\n+                return {\r\n+                    startDate: startDateInput.value,\r\n+                    endDate: endDateInput.value\r\n+                };\r\n+            }\r\n+            return {}; // Retorna vazio se o intervalo personalizado não estiver completo\r\n+        default:\r\n+            return {}; // Padrão sem filtro\r\n+    }\r\n+\r\n+    // Formata as datas para o formato YYYY-MM-DD\r\n+    return {\r\n+        startDate: startDate.toISOString().split('T')[0],\r\n+        endDate: endDate.toISOString().split('T')[0]\r\n+    };\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a lista de próximos vencimentos no dashboard.\r\n+ * @param {Array} payments - A lista de pagamentos vinda da API.\r\n+ */\r\n+function renderUpcomingPayments(payments) {\r\n+    if (!upcomingPaymentsList || !noUpcomingPaymentsMessage) return;\r\n+\r\n+    upcomingPaymentsList.innerHTML = ''; // Limpa a lista\r\n+\r\n+    if (payments.length === 0) {\r\n+        upcomingPaymentsList.appendChild(noUpcomingPaymentsMessage);\r\n+        noUpcomingPaymentsMessage.classList.remove('hidden');\r\n+    } else {\r\n+        noUpcomingPaymentsMessage.classList.add('hidden');\r\n+        const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+        payments.forEach(payment => {\r\n+            const dueDate = new Date(payment.dueDate + 'T00:00:00');\r\n+            const formattedDate = dueDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\r\n+\r\n+            const paymentHtml = `\r\n+                <div class=\"flex items-center justify-between bg-gray-700/50 p-3 rounded-md\">\r\n+                    <div>\r\n+                        <p class=\"font-medium text-white\">${payment.billName} (${payment.parcelNumber}ª)</p>\r\n+                        <p class=\"text-sm text-gray-400\">Vence em: ${formattedDate}</p>\r\n+                    </div>\r\n+                    <p class=\"font-semibold text-lg text-yellow-400\">${formatCurrency(payment.amount)}</p>\r\n+                </div>\r\n+            `;\r\n+            upcomingPaymentsList.insertAdjacentHTML('beforeend', paymentHtml);\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de barras horizontais com as 5 maiores despesas por categoria.\r\n+ * @param {Array} data - Os dados de despesas vindos da API.\r\n+ */\r\n+function renderTopExpensesChart(data) {\r\n+    const canvas = document.getElementById('topExpensesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    // Destrói o gráfico anterior, se existir, para evitar sobreposições\r\n+    if (topExpensesChart) {\r\n+        topExpensesChart.destroy();\r\n+    }\r\n+    \r\n+    // 1. Ordena os dados do maior para o menor\r\n+    const sortedData = [...data].sort((a, b) => b.totalAmount - a.totalAmount);\r\n+    \r\n+    // 2. Pega apenas nos 5 primeiros resultados\r\n+    const top5Data = sortedData.slice(0, 5);\r\n+\r\n+    // 3. Prepara os dados para o Chart.js\r\n+    const labels = top5Data.map(item => item.categoryName);\r\n+    const values = top5Data.map(item => item.totalAmount);\r\n+\r\n+    topExpensesChart = new Chart(ctx, {\r\n+        type: 'bar', // Tipo de gráfico\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Total Gasto',\r\n+                data: values,\r\n+                backgroundColor: 'rgba(239, 68, 68, 0.6)', // Vermelho\r\n+                borderColor: 'rgba(239, 68, 68, 1)',\r\n+                borderWidth: 1\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            indexAxis: 'y', // <-- Isto é o que torna o gráfico horizontal!\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                x: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n+                y: { ticks: { color: '#d1d5db' }, grid: { display: false } }\r\n+            },\r\n+            plugins: {\r\n+                legend: { display: false },\r\n+                tooltip: {\r\n+                    callbacks: {\r\n+                        label: function(context) {\r\n+                            return ` Total: ${context.raw.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n+                        }\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de alteração de senha.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleChangePassword(e) {\r\n+    e.preventDefault(); // Impede o recarregamento da página\r\n+\r\n+    const currentPassword = document.getElementById('currentPassword').value;\r\n+    const newPassword = document.getElementById('newPassword').value;\r\n+    const confirmPassword = document.getElementById('confirmPassword').value;\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.changePassword({ currentPassword, newPassword, confirmPassword });\r\n+        showToast(data.message, 'success');\r\n+\r\n+        // Limpa os campos e fecha o modal após o sucesso\r\n+        changePasswordForm.reset();\r\n+        profileModal.classList.add('hidden');\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+\r\n+// =================================================================================\r\n+// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n+// =================================================================================\r\n+\r\n+document.addEventListener('DOMContentLoaded', async () => {\r\n+// --- Lógica de inicialização que estava em initializeApp() ---\r\n+const today = new Date();\r\n+currentMonth = today.getMonth();\r\n+currentYear = today.getFullYear();\r\n+\r\n+const token = localStorage.getItem('authToken');\r\n+if (!token) {\r\n+    // Se não houver token, redireciona para a página de login\r\n+    window.location.href = 'Index.html';\r\n+    return;\r\n+}\r\n+\r\n+try {\r\n+    const data = await api.checkSession();\r\n+    if (data.user.role === 'SuperAdmin') {\r\n+        isAdminLoggedIn = true;\r\n+        // Usamos import() dinâmico para evitar dependência circular\r\n+        const adminModule = await import('./admin.js');\r\n+        await adminModule.showAdminDashboard();\r\n+    } else {\r\n+        currentLoggedInUser = data.user;\r\n+        currentLoggedInCompany = data.company;\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+        if (isSubscriptionActive) {\r\n+            await showMainApp();\r\n+        } else {\r\n+            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                // Se for o dono da empresa, mostra o modal para renovar\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n+                showAccessBlockedModal();\r\n+            }\r\n+        }\r\n+    }\r\n+    } catch (error) {\r\n+        console.error(\"Erro original capturado:\", error); // <--- ADICIONE ESTA LINHA\r\n+        // Se o token for inválido ou a API falhar, o utilizador é deslogado\r\n+        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n+        localStorage.removeItem('authToken');\r\n+        localStorage.removeItem('superAdminToken');\r\n+        setTimeout(() => {\r\n+            window.location.href = 'Index.html';\r\n+        }, 2000); \r\n+    }  finally {\r\n+    // Esconde a tela de carregamento inicial\r\n+    document.getElementById('loadingScreen').classList.add('hidden');\r\n+}\r\n+\r\n+\r\n+if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+if (addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+\r\n+// Submissão de formulários\r\n+if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n+if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n+if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n+if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n+if (logoutBtn) {\r\n+    logoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n+    });\r\n+}\r\n+if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n+\r\n+\r\n+// Ações na App Principal\r\n+addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n+closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n+\r\n+// Ações do Modal de Edição de Boleto\r\n+closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n+saveBillBtn.addEventListener('click', handleSaveChanges);\r\n+deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n+deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n+closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n+\r\n+// Navegação do Calendário\r\n+prevMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n+    if (currentMonth === 11) currentYear--;\r\n+    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+\r\n+nextMonthBtn.addEventListener('click', () => {\r\n+    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n+    if (currentMonth === 0) currentYear++;\r\n+    // A mesma mudança aqui\r\n+    applyFiltersAndSearch(); \r\n+});\r\n+if (addCompanyCnpjInput) {\r\n+    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n+}\r\n+\r\n+if (openAddBillModalBtn) {\r\n+    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n+}\r\n+\r\n+const handleRedirectToHome = () => {\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+const handleFullLogoutAndRedirect = () => {\r\n+    localStorage.removeItem('authToken');\r\n+    localStorage.removeItem('superAdminToken');\r\n+    window.location.href = 'Index.html';\r\n+};\r\n+\r\n+if (subscriptionLogoutBtn) {\r\n+    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n+}\r\n+\r\n+if (blockedAccessLogoutBtn) {\r\n+    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n+        window.location.href = 'Index.html';\r\n+    });\r\n+}\r\n+\r\n+// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n+if (settingsBtn) {\r\n+    settingsBtn.addEventListener('click', (e) => {\r\n+        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n+        settingsDropdown.classList.toggle('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Links dentro do menu dropdown\r\n+if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCompanyInfoModal();\r\n+});\r\n+\r\n+if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openPermissionsModal();\r\n+});\r\n+\r\n+window.addEventListener('click', () => {\r\n+    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n+        settingsDropdown.classList.add('hidden');\r\n+    }\r\n+});\r\n+\r\n+// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n+if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openManageUsersModal(currentLoggedInCompany);\r\n+});\r\n+\r\n+// Botões do modal de gerir utilizadores\r\n+if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n+// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n+if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n+    manageUsersModal.classList.add('hidden');\r\n+    openAddUserModal(currentLoggedInCompany._id); \r\n+});\r\n+\r\n+/**\r\n+ * Lida com o clique no botão de criar/renovar assinatura.\r\n+ */\r\n+async function handleCreateSubscription() {\r\n+    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n+    subscriptionActionBtn.disabled = true;\r\n+    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n+\r\n+    try {\r\n+        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n+        const data = await api.createSubscriptionLink();\r\n+\r\n+        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n+        if (data.init_point) {\r\n+            window.location.href = data.init_point;\r\n+        } else {\r\n+            throw new Error('Link de pagamento não recebido.');\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n+        subscriptionActionBtn.disabled = false;\r\n+        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n+    }\r\n+}\r\n+\r\n+// Liga a função ao clique do botão.\r\n+if (subscriptionActionBtn) {\r\n+    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n+}\r\n+\r\n+if (closePreviewModalBtn) {\r\n+    closePreviewModalBtn.addEventListener('click', () => {\r\n+        installmentsPreviewModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+if (nfeXmlInput) {\r\n+    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n+}\r\n+\r\n+if (previewBillNameInput) {\r\n+    previewBillNameInput.addEventListener('input', (e) => {\r\n+        if (currentBill) {\r\n+            currentBill.name = e.target.value;\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Liga a função ao clique do botão\r\n+if (showFullScreenBarcodeBtn) {\r\n+    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n+}\r\n+\r\n+// Listener para o campo de pesquisa\r\n+if (searchInput) {\r\n+    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Listeners para os botões de filtro\r\n+if (filterButtons) {\r\n+    filterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões\r\n+            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona a classe 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Aplica o filtro\r\n+            applyFiltersAndSearch();\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    settingsDropdown.classList.add('hidden');\r\n+    openCategoriesModal();\r\n+});\r\n+\r\n+if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n+\r\n+if (addCategoryForm) {\r\n+    addCategoryForm.addEventListener('submit', async (e) => {\r\n+        e.preventDefault();\r\n+        const name = newCategoryNameInput.value.trim();\r\n+        if (!name) return;\r\n+        try {\r\n+            await api.createCategory(name);\r\n+            newCategoryNameInput.value = '';\r\n+            await openCategoriesModal(); // Recarrega a lista do modal\r\n+            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+if (categoryListDiv) {\r\n+    categoryListDiv.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-category-btn');\r\n+        const deleteBtn = e.target.closest('.delete-category-btn');\r\n+\r\n+        if (editBtn) {\r\n+            const { id, name } = editBtn.dataset;\r\n+            const newName = prompt(\"Editar nome da categoria:\", name);\r\n+            if (newName && newName.trim() && newName.trim() !== name) {\r\n+                await api.updateCategory(id, newName.trim());\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            const { id } = deleteBtn.dataset;\r\n+            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n+                await api.deleteCategory(id);\r\n+                await openCategoriesModal();\r\n+                await populateCategoryFilter();\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+if (categoryFilterSelect) {\r\n+    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+}\r\n+\r\n+// Configuração dos botões do dashboard\r\n+if (viewCalendarBtn) {\r\n+    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n+}\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+if (dateRangePresetSelect) {\r\n+    dateRangePresetSelect.addEventListener('change', () => {\r\n+        const isCustom = dateRangePresetSelect.value === 'custom';\r\n+        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n+\r\n+        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n+        // o dashboard é atualizado imediatamente.\r\n+        if (!isCustom) {\r\n+            renderDashboard();\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Para o intervalo personalizado, atualizamos o dashboard\r\n+// assim que ambas as datas estiverem preenchidas.\r\n+if (startDateInput) {\r\n+    startDateInput.addEventListener('change', () => {\r\n+        if (endDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+if (endDateInput) {\r\n+    endDateInput.addEventListener('change', () => {\r\n+        if (startDateInput.value) renderDashboard();\r\n+    });\r\n+}\r\n+\r\n+if (viewDashboardBtn) {\r\n+    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n+}\r\n+\r\n+// Listeners para os botões de exportação\r\n+const handleExport = (format) => {\r\n+    // 1. Pega no período de tempo atual do filtro do dashboard\r\n+    const dateRange = getDateRangeFromPreset();\r\n+\r\n+    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n+    const queryString = new URLSearchParams(dateRange).toString();\r\n+\r\n+    // 3. Monta o URL completo para o download\r\n+    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n+    \r\n+    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n+    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n+    fetch(downloadUrl, {\r\n+        headers: {\r\n+            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n+        }\r\n+    })\r\n+    .then(res => res.blob())\r\n+    .then(blob => {\r\n+        const url = window.URL.createObjectURL(blob);\r\n+        const a = document.createElement('a');\r\n+        a.style.display = 'none';\r\n+        a.href = url;\r\n+        a.download = `relatorio-despesas.${format}`;\r\n+        document.body.appendChild(a);\r\n+        a.click();\r\n+        window.URL.revokeObjectURL(url);\r\n+        a.remove();\r\n+    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n+};\r\n+\r\n+if (exportCsvBtn) {\r\n+    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n+}\r\n+if (exportPdfBtn) {\r\n+    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n+}\r\n+\r\n+if (manualAddBtn) {\r\n+    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n+}\r\n+if (xmlAddBtn) {\r\n+    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n+}\r\n+\r\n+if (csvImportBtn) {\r\n+    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n+}\r\n+if (csvFileInput) {\r\n+    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n+}\r\n+if (importCsvBtn) {\r\n+    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n+}\r\n+if (markSelectedAsPaidBtn) {\r\n+    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n+}\r\n+if (selectAllVisibleBtn) {\r\n+    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n+}\r\n+\r\n+if (deselectAllVisibleBtn) {\r\n+    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n+}\r\n+if (dashboardFilterButtons) {\r\n+    dashboardFilterButtons.forEach(button => {\r\n+        button.addEventListener('click', (e) => {\r\n+            // Remove a classe 'active' de todos os botões do dashboard\r\n+            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n+            // Adiciona 'active' apenas ao botão clicado\r\n+            e.currentTarget.classList.add('active');\r\n+            // Atualiza a variável de estado com o novo filtro\r\n+            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n+            // Renderiza o dashboard novamente com os dados filtrados\r\n+            renderDashboard();\r\n+        });\r\n+    });\r\n+}\r\n+// Abre o modal de alteração de categoria\r\n+if (changeCategoryBtn) {\r\n+    changeCategoryBtn.addEventListener('click', async () => {\r\n+        showLoader();\r\n+        // Popula o dropdown do modal com as categorias existentes\r\n+        await populateCategorySelect(batchCategorySelect);\r\n+        hideLoader();\r\n+        categoryBatchModal.classList.remove('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de cancelar no modal\r\n+if (cancelCategoryBatchBtn) {\r\n+    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n+        categoryBatchModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+// Botão de confirmar a alteração\r\n+if (confirmCategoryBatchBtn) {\r\n+    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n+        const categoryId = batchCategorySelect.value;\r\n+        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n+        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n+\r\n+        if (boletoIds.length === 0) {\r\n+            return showToast('Nenhum item selecionado.', 'info');\r\n+        }\r\n+\r\n+        showLoader();\r\n+        try {\r\n+            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n+            showToast(response.message, 'success');\r\n+            selectedItems.clear();\r\n+            updateMassPaymentButton();\r\n+            await updateBillsOrganizer();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+            categoryBatchModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+}\r\n+if (openProfileModalBtn) {\r\n+    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n+}\r\n+if (closeProfileModalBtn) {\r\n+    closeProfileModalBtn.addEventListener('click', () => {\r\n+        profileModal.classList.add('hidden');\r\n+    });\r\n+}\r\n+if (changePasswordForm) {\r\n+    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n+}\r\n+if (resendVerificationBtn) {\r\n+    resendVerificationBtn.addEventListener('click', async () => {\r\n+        resendVerificationBtn.disabled = true;\r\n+        resendVerificationBtn.textContent = 'A reenviar...';\r\n+\r\n+        try {\r\n+            const data = await api.resendVerificationEmail();\r\n+            showToast(data.message, 'success');\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            resendVerificationBtn.disabled = false;\r\n+            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n+        }\r\n+    });\r\n+}\r\n+if (recurrentAddBtn) {\r\n+    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n+}\r\n+if (recurrentEditModal) {\r\n+    // Botões de escolha (Somente esta, futuras, todas)\r\n+    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const scope = e.currentTarget.dataset.scope;\r\n+            if (!pendingUpdateData || !selectedParcel) return;\r\n+\r\n+            recurrentEditModal.classList.add('hidden');\r\n+            showLoader();\r\n+            try {\r\n+                // Chama a nova rota da API com o escopo escolhido\r\n+                await api.bulkUpdateParcels(\r\n+                    selectedParcel.parentId, \r\n+                    selectedParcel._id, \r\n+                    pendingUpdateData.updatedParcelData, \r\n+                    scope\r\n+                );\r\n+\r\n+                // Atualiza a categoria do boleto, se foi alterada\r\n+                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n+\r\n+                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n+                billModal.classList.add('hidden');\r\n+                await updateBillsOrganizer();\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+                pendingUpdateData = null; // Limpa os dados pendentes\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Botão de cancelar\r\n+    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n+        recurrentEditModal.classList.add('hidden');\r\n+        pendingUpdateData = null; // Limpa os dados pendentes\r\n+    });\r\n+}\r\n+if (closeAnnouncementBtn) {\r\n+    closeAnnouncementBtn.addEventListener('click', () => {\r\n+        globalAnnouncementBanner.classList.add('hidden');\r\n+    });\r\n+}\r\n+\r\n+if (backToAdminBtn) {\r\n+    backToAdminBtn.addEventListener('click', async () => {\r\n+        // Chama a função que troca os tokens de volta\r\n+        const success = restoreAdminSession();\r\n+\r\n+        if (success) {\r\n+            // Se a troca foi bem sucedida, mostramos o painel de admin.\r\n+            // A função showAdminDashboard já esconde os outros ecrãs.\r\n+            showLoader(); // Mostra o spinner para uma transição suave\r\n+            // Precisamos garantir que a função showAdminDashboard está disponível aqui.\r\n+            // Se ela estiver noutro ficheiro, certifique-se de que está exportada/importada.\r\n+            await showAdminDashboard(); \r\n+            hideLoader();\r\n+        } else {\r\n+            // Se não encontrou o token de admin, desloga por segurança\r\n+            showToast('Não foi possível restaurar a sessão de admin.', 'error');\r\n+            logout();\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// CHAME A NOVA FUNÇÃO AQUI\r\n+initializeDashboardDragAndDrop(); \r\n+\r\n+\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753883231661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1538,15 +1538,21 @@\n  * Esta função é chamada pelo painel de admin quando clica em \"Entrar\".\r\n  * @param {object} data - Os dados recebidos da API (token, user, company).\r\n  */\r\n export async function setImpersonationSession(data) {\r\n+    // Guarda o token de admin atual ANTES de o substituir\r\n     localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+\r\n+    // Define o novo token de representação\r\n     localStorage.setItem('authToken', data.token);\r\n \r\n+    // Atualiza o estado da aplicação\r\n     currentLoggedInCompany = data.company;\r\n     currentLoggedInUser = data.user;\r\n     loggedInViaAdmin = true;\r\n+    isAdminLoggedIn = false; // Importante: você não é mais admin nesta vista\r\n \r\n+    // Mostra a aplicação principal\r\n     await showMainApp();\r\n }\r\n \r\n /**\r\n@@ -2678,2666 +2684,5 @@\n // CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n \r\n-});\n-/**\r\n- * main.js\r\n- * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n- * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n- */\r\n-\r\n-// =================================================================================\r\n-// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n-// =================================================================================\r\n-import { API_BASE_URL } from './config.js';\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-import { showAdminDashboard, openManageUsersModal, openAddUserModal } from './admin.js';\r\n-\r\n-\r\n-// =================================================================================\r\n-// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n-// =================================================================================\r\n-let currentLoggedInCompany = null;\r\n-let currentLoggedInUser = null;\r\n-export let isAdminLoggedIn = false;\r\n-let loggedInViaAdmin = false;\r\n-let selectedCompanyForAdmin = null;\r\n-let currentBill = {};\r\n-let selectedParcel = null;\r\n-let userBoletos = [];\r\n-let currentMonth, currentYear;\r\n-let expensesPieChart = null;\r\n-let expensesBarChart = null;\r\n-let topExpensesChart = null;\r\n-let parsedCsvData = [];\r\n-let selectedParcels = new Set();\r\n-let dashboardStatusFilter = 'all';\r\n-let selectedItems = new Map();\r\n-let pendingUpdateData = null;\r\n-\r\n-// =================================================================================\r\n-// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n-// =================================================================================\r\n-\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const mainAppContent = document.getElementById('mainAppContent');\r\n-const logoutBtn = document.getElementById('logoutBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\n-const settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\n-const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-const totalBillsSpan = document.getElementById('totalBills');\r\n-const prevMonthBtn = document.getElementById('prevMonth');\r\n-const nextMonthBtn = document.getElementById('nextMonth');\r\n-const calendarDays = document.getElementById('calendarDays');\r\n-const currentMonthYear = document.getElementById('currentMonthYear');\r\n-const billForm = document.getElementById('billForm');\r\n-const addBillModal = document.getElementById('addBillModal');\r\n-const closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\n-const installmentsList = document.getElementById('installmentsList');\r\n-const parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\n-const addToOrganizer = document.getElementById('addToOrganizer');\r\n-const billModal = document.getElementById('billModal');\r\n-const closeModalBtn = document.getElementById('closeModal');\r\n-const modalBillName = document.getElementById('modalBillName');\r\n-const modalBillAmount = document.getElementById('modalBillAmount');\r\n-const modalBillDate = document.getElementById('modalBillDate');\r\n-const modalBillDescription = document.getElementById('modalBillDescription');\r\n-const modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\n-const showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\n-const modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\n-const saveBillBtn = document.getElementById('saveBill');\r\n-const deleteBillBtn = document.getElementById('deleteBill');\r\n-const deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\n-const barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\n-const closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n-const subscriptionModal = document.getElementById('subscriptionModal');\r\n-const subscriptionTitle = document.getElementById('subscriptionTitle');\r\n-const subscriptionMessage = document.getElementById('subscriptionMessage');\r\n-const subscriptionIcon = document.getElementById('subscriptionIcon');\r\n-const subscriptionActionBtn = document.getElementById('subscriptionActionBtn');\r\n-const subscriptionLogoutBtn = document.getElementById('subscriptionLogoutBtn');\r\n-const blockedAccessLogoutBtn = document.getElementById('blockedAccessLogoutBtn');\r\n-const addCompanyCnpjInput = document.getElementById('addCompanyCnpjInput');\r\n-const settingsBtn = document.getElementById('settingsBtn');\r\n-const settingsDropdown = document.getElementById('settingsDropdown');\r\n-const menuEmpresa = document.getElementById('menuEmpresa');\r\n-const menuUsuarios = document.getElementById('menuUsuarios');\r\n-const menuPermissoes = document.getElementById('menuPermissoes');\r\n-const companyInfoModal = document.getElementById('companyInfoModal');\r\n-const closeCompanyInfoModal = document.getElementById('closeCompanyInfoModal');\r\n-const saveCompanyInfoBtn = document.getElementById('saveCompanyInfoBtn');\r\n-const permissionsModal = document.getElementById('permissionsModal');\r\n-const closePermissionsModal = document.getElementById('closePermissionsModal');\r\n-const savePermissionsBtn = document.getElementById('savePermissionsBtn');\r\n-const manageUsersModal = document.getElementById('manageUsersModal');\r\n-const closeManageUsersModal = document.getElementById('closeManageUsersModal');\r\n-const addCompanyUserBtn = document.getElementById('addCompanyUserBtn');\r\n-const installmentsPreviewModal = document.getElementById('installmentsPreviewModal');\r\n-const closePreviewModalBtn = document.getElementById('closePreviewModalBtn');\r\n-const nfeXmlInput = document.getElementById('nfeXmlInput');\r\n-const previewBillNameInput = document.getElementById('previewBillNameInput');\r\n-const previewNfeNumber = document.getElementById('previewNfeNumber');\r\n-const searchInput = document.getElementById('searchInput');\r\n-const filterButtons = document.querySelectorAll('.filter-btn');\r\n-const menuCategorias = document.getElementById('menuCategorias');\r\n-const categoriesModal = document.getElementById('categoriesModal');\r\n-const closeCategoriesModal = document.getElementById('closeCategoriesModal');\r\n-const addCategoryForm = document.getElementById('addCategoryForm');\r\n-const newCategoryNameInput = document.getElementById('newCategoryName');\r\n-const categoryListDiv = document.getElementById('categoryList');\r\n-const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n-const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n-\r\n-const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n-const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n-const calendarView = document.getElementById('calendarView');\r\n-const dashboardView = document.getElementById('dashboardView');\r\n-const dateRangePresetSelect = document.getElementById('date-range-preset-select');\r\n-const customDateRangeInputs = document.getElementById('custom-date-range-inputs');\r\n-const startDateInput = document.getElementById('start-date-input');\r\n-const endDateInput = document.getElementById('end-date-input');\r\n-const kpiContasVencidas = document.getElementById('kpiContasVencidas');\r\n-const upcomingPaymentsList = document.getElementById('upcoming-payments-list');\r\n-const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n-const exportCsvBtn = document.getElementById('export-csv-btn');\r\n-const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n-const dashboardFilterButtons = document.querySelectorAll('.dashboard-filter-btn');\r\n-\r\n-const manualAddBtn = document.getElementById('manual-add-btn');\r\n-const xmlAddBtn = document.getElementById('xml-add-btn');\r\n-const manualAddForm = document.getElementById('manual-add-form');\r\n-const xmlAddForm = document.getElementById('xml-add-form');\r\n-\r\n-const csvImportBtn = document.getElementById('csv-import-btn');\r\n-const csvImportForm = document.getElementById('csv-import-form');\r\n-const csvFileInput = document.getElementById('csv-file-input');\r\n-const csvPreviewArea = document.getElementById('csv-preview-area');\r\n-const csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\n-const csvImportSummary = document.getElementById('csv-import-summary');\r\n-const importCsvBtn = document.getElementById('import-csv-btn');\r\n-\r\n-const markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\n-const selectedCountSpan = document.getElementById('selectedCount');\r\n-const massActionsContainer = document.getElementById('massActionsContainer');\r\n-const selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\n-const deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n-\r\n-const changeCategoryBtn = document.getElementById('changeCategoryBtn');\r\n-const categoryBatchModal = document.getElementById('categoryBatchModal');\r\n-const batchCategorySelect = document.getElementById('batchCategorySelect');\r\n-const cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\n-const confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n-\r\n-const openProfileModalBtn = document.getElementById('openProfileModalBtn');\r\n-const profileModal = document.getElementById('profileModal');\r\n-const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\n-const profileUsername = document.getElementById('profileUsername');\r\n-const profileRole = document.getElementById('profileRole');\r\n-const profileCompany = document.getElementById('profileCompany');\r\n-const changePasswordForm = document.getElementById('changePasswordForm');\r\n-const verificationNotice = document.getElementById('verificationNotice');\r\n-const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n-\r\n-const recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\n-const recurrentAddForm = document.getElementById('recurrent-add-form');\r\n-const recurrentEditModal = document.getElementById('recurrentEditModal');\r\n-const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n-const singleParcelDate = document.getElementById('single-parcel-date');\r\n-\r\n-const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n-const announcementMessage = document.getElementById('announcementBannerMessage');\r\n-const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n-\r\n-// =================================================================================\r\n-// FUNÇÕES DE LÓGICA E UI\r\n-// =================================================================================\r\n-\r\n-/**\r\n- * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n- * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n- */\r\n-function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-\r\n-    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n-\r\n-    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n-    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n-\r\n-    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n-\r\n-    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n-\r\n-    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n-    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-\r\n-    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n-\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    // Atualiza os elementos HTML com os valores corretos\r\n-    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n-    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n-    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n-}\r\n-\r\n-\r\n-/**\r\n- * Renderiza o calendário com uma lista específica de boletos.\r\n- * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n- * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n- */\r\n-function renderCalendar(boletosToRender = userBoletos) {\r\n-    // --- INÍCIO DA CORREÇÃO DE SEGURANÇA ---\r\n-    const calendarDays = document.getElementById('calendarDays');\r\n-    const currentMonthYear = document.getElementById('currentMonthYear');\r\n-\r\n-    if (!calendarDays || !currentMonthYear) {\r\n-        console.error(\"ERRO CRÍTICO: Elementos essenciais do calendário (#calendarDays ou #currentMonthYear) não foram encontrados no HTML.\");\r\n-        return; // Para a execução para evitar mais erros.\r\n-    }\r\n-    // --- FIM DA CORREÇÃO DE SEGURANÇA ---\r\n-\r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n-    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n-    calendarDays.innerHTML = '';\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-\r\n-    const parcelsByDate = new Map();\r\n-    boletosToRender.forEach(bill => {\r\n-        bill.parcels.forEach(parcel => {\r\n-            const date = parcel.dueDate;\r\n-            if (!parcelsByDate.has(date)) {\r\n-                parcelsByDate.set(date, []);\r\n-            }\r\n-            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n-        });\r\n-    });\r\n-\r\n-    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n-    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n-\r\n-    for (let i = 0; i < firstDayOfMonth; i++) {\r\n-        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n-    }\r\n-\r\n-    for (let day = 1; day <= daysInMonth; day++) {\r\n-        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n-        const dayCell = document.createElement('div');\r\n-        dayCell.className = 'day-cell day-cell-droppable p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n-        dayCell.dataset.date = dateStr;\r\n-\r\n-        const dayHeader = document.createElement('div');\r\n-        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n-        dayHeader.textContent = day;\r\n-        dayCell.appendChild(dayHeader);\r\n-\r\n-        dayCell.addEventListener('click', (e) => {\r\n-            if (e.target.closest('.bill-card-draggable')) return;\r\n-            openAddBillModal(e.currentTarget.dataset.date);\r\n-        });\r\n-\r\n-        if (parcelsByDate.has(dateStr)) {\r\n-            parcelsByDate.get(dateStr).forEach(parcel => {\r\n-                const bill = parcel.parentBill;\r\n-                const parcelElement = document.createElement('div');\r\n-                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                const isOverdue = !parcel.paid && dueDate < today;\r\n-                let statusClass = 'bg-indigo-700 text-indigo-100';\r\n-                let statusIcon = '<i class=\"fas fa-clock fa-xs\"></i>';\r\n-\r\n-                if (parcel.paid) {\r\n-                    statusClass = 'bg-green-700 text-green-100';\r\n-                    statusIcon = '<i class=\"fas fa-check fa-xs\"></i>';\r\n-                } else if (isOverdue) {\r\n-                    statusClass = 'bg-red-700 text-red-100';\r\n-                    statusIcon = '<i class=\"fas fa-exclamation-triangle fa-xs\"></i>';\r\n-                }\r\n-\r\n-                parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n-                parcelElement.dataset.boletoId = bill._id;\r\n-                parcelElement.dataset.parcelId = parcel._id;\r\n-\r\n-                parcelElement.innerHTML = `\r\n-                    <div class=\"flex items-start space-x-2\">\r\n-                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n-                        <div class=\"flex-1 min-w-0\">\r\n-                            <div class=\"flex justify-between items-center\">\r\n-                                <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n-                                    ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n-                                </span>\r\n-                                <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n-                                    ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n-                                </span>\r\n-                            </div>\r\n-\r\n-                            ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n-                            ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n-                        </div>\r\n-                    </div>\r\n-                `;\r\n-\r\n-                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-\r\n-                const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n-                checkbox.addEventListener('change', (e) => {\r\n-                    const parcelId = e.target.dataset.parcelId;\r\n-                    const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n-                    if (e.target.checked) {\r\n-                        selectedItems.set(parcelId, boletoId);\r\n-                    } else {\r\n-                        selectedItems.delete(parcelId);\r\n-                    }\r\n-                    updateMassPaymentButton();\r\n-                });\r\n-                checkbox.addEventListener('click', (e) => e.stopPropagation());\r\n-\r\n-                dayCell.appendChild(parcelElement);\r\n-            });\r\n-        }\r\n-\r\n-        calendarDays.appendChild(dayCell);\r\n-    }\r\n-\r\n-    initializeDragAndDrop();\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para ver/editar os detalhes de uma parcela.\r\n- * @param {object} bill - O objeto do boleto pai, que contém o nome e o nfeNumber.\r\n- * @param {object} parcel - O objeto da parcela específica.\r\n- */\r\n-async function openBillModal(bill, parcel) {\r\n-    // Guarda a referência da parcela selecionada para ser usada por outras funções (salvar, apagar, etc.)\r\n-    selectedParcel = { ...parcel, parentId: bill._id };\r\n-\r\n-    // Preenche todos os campos do modal com os dados da parcela clicada\r\n-    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n-    modalBillName.title = `${bill.name} (Parcela ${parcel.number})`; // Adiciona o nome completo no hover\r\n-    modalBillAmount.value = parcel.amount.toFixed(2);\r\n-    modalBillDate.value = parcel.dueDate;\r\n-    modalBillDescription.value = parcel.description || '';\r\n-    modalBillBarcodeInput.value = parcel.barcode || '';\r\n-    modalBillPaidCheckbox.checked = parcel.paid;\r\n-\r\n-    // Mostra o botão de gerar código de barras apenas se houver um código\r\n-    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n-\r\n-    // Mostra o número da NFe apenas se o boleto tiver um associado\r\n-    const nfeContainer = document.getElementById('modalNfeNumberContainer');\r\n-    const nfeNumberEl = document.getElementById('modalNfeNumber');\r\n-    if (bill.nfeNumber) {\r\n-        nfeNumberEl.textContent = bill.nfeNumber;\r\n-        nfeContainer.classList.remove('hidden');\r\n-    } else {\r\n-        nfeContainer.classList.add('hidden');\r\n-    }\r\n-\r\n-    // Lógica dinâmica para a secção de anexos\r\n-    const attachmentContainer = document.getElementById('attachment-container');\r\n-    attachmentContainer.innerHTML = ''; // Limpa o conteúdo anterior\r\n-\r\n-    if (parcel.attachmentUrl) {\r\n-        // Se já existe um anexo, mostra o link para o ver e um botão para o remover\r\n-        attachmentContainer.innerHTML = `\r\n-            <div class=\"flex items-center justify-between\">\r\n-                <a href=\"${parcel.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\">\r\n-                    <i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo\r\n-                </a>\r\n-                <button id=\"removeAttachmentBtn\" class=\"bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700\">Remover</button>\r\n-            </div>\r\n-        `;\r\n-        // Adiciona o evento de clique ao novo botão de remover\r\n-        document.getElementById('removeAttachmentBtn').addEventListener('click', handleRemoveAttachment);\r\n-    } else {\r\n-        // Se não existe um anexo, mostra o input para fazer o upload de um ficheiro\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-        // Adiciona o evento de 'change' ao novo input de upload\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-    }\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        modalBillCategorySelect.innerHTML = '<option value=\"\">Nenhuma</option>';\r\n-        categories.forEach(cat => {\r\n-            modalBillCategorySelect.innerHTML += `<option value=\"${cat._id}\">${cat.name}</option>`;\r\n-        });\r\n-        if (bill.category) {\r\n-            modalBillCategorySelect.value = bill.category._id;\r\n-        } else {\r\n-            modalBillCategorySelect.value = \"\";\r\n-        }\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-\r\n-    billModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n- */\r\n-function clearBillForm() {\r\n-    if (billForm) {\r\n-        billForm.reset();\r\n-    }\r\n-    currentBill = {};\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a interface principal com os dados dos boletos.\r\n- */\r\n-async function updateBillsOrganizer() {\r\n-    try {\r\n-        userBoletos = await api.getBoletos();\r\n-\r\n-        if (!userBoletos || userBoletos.length === 0) {\r\n-            console.log(\"AVISO: Nenhum boleto foi encontrado na base de dados para esta empresa.\");\r\n-        }\r\n-\r\n-        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n-        const totalBillsSpan = document.getElementById('totalBills');\r\n-        \r\n-        if (totalBillsSpan) {\r\n-            totalBillsSpan.textContent = totalParcels;\r\n-        } else {\r\n-            console.error(\"FALHA CRÍTICA: O elemento HTML com o id 'totalBills' não foi encontrado!\");\r\n-            return; // Para a execução se o elemento não existir\r\n-        }\r\n-\r\n-        updateMonthlySummary();\r\n-        renderCalendar();\r\n-\r\n-    } catch (error) {\r\n-        console.error(\"ERRO GRAVE DENTRO DE updateBillsOrganizer:\", error);\r\n-        showToast(error.message, 'error');\r\n-    }\r\n-}\r\n-\r\n-async function showMainApp() {\r\n-    hideAllScreens();\r\n-    // Removemos a classe 'hidden' e definimos o display diretamente\r\n-    mainAppContent.classList.remove('hidden');\r\n-    mainAppContent.style.display = 'block';\r\n-\r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-    openAddBillModalBtn.style.display = 'flex'; // O botão é um flex container\r\n-\r\n-    // O resto da função continua igual...\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n-\r\n-    await fetchAndDisplayAnnouncement();\r\n-    await populateCategoryFilter();\r\n-    await updateBillsOrganizer();\r\n-}\r\n-\r\n-// Adicionar ao bloco de funções de Lógica e UI\r\n-\r\n-/**\r\n- * Função de ajuda para obter o conteúdo de uma tag de um documento XML.\r\n- * @param {string} tagName - O nome da tag a ser procurada.\r\n- * @param {Document|Element} parentElement - O elemento pai onde procurar.\r\n- * @returns {string} - O conteúdo da tag ou uma string vazia.\r\n- */\r\n-function getTagValue(tagName, parentElement) {\r\n-    // Verifica se o elemento pai existe antes de procurar a tag dentro dele\r\n-    const element = parentElement?.getElementsByTagName(tagName)[0];\r\n-    return element?.textContent || '';\r\n-}\r\n-\r\n-/**\r\n- * Configura e exibe o modal de assinatura para o Proprietário.\r\n- * @param {object} company - O objeto da empresa com os dados da assinatura.\r\n- */\r\n-function showSubscriptionModal(company) {\r\n-    hideAllScreens();\r\n-    const status = company.subscription?.status;\r\n-\r\n-    if (status === 'inactive' || status === 'trial') {\r\n-        subscriptionTitle.textContent = 'Ative sua Assinatura';\r\n-        subscriptionMessage.textContent = 'Para usar o Organizador de Boletos, por favor, realize a sua assinatura e desbloqueie todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Realizar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-star text-yellow-400 text-3xl';\r\n-    } else { // 'past_due' ou outro estado\r\n-        subscriptionTitle.textContent = 'Assinatura Pendente';\r\n-        subscriptionMessage.textContent = 'Sua assinatura do Organizador de Boletos está pendente. Por favor, renove para continuar usando todas as funcionalidades.';\r\n-        subscriptionActionBtn.textContent = 'Renovar Assinatura';\r\n-        subscriptionIcon.className = 'fas fa-exclamation-triangle text-red-400 text-3xl';\r\n-    }\r\n-    if (subscriptionModal) subscriptionModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Exibe o modal informando a funcionários que o acesso está bloqueado.\r\n- */\r\n-function showAccessBlockedModal() {\r\n-    hideAllScreens();\r\n-    const accessBlockedModal = document.getElementById('accessBlockedModal');\r\n-    if (accessBlockedModal) accessBlockedModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para criar uma nova empresa.\r\n- */\r\n-\r\n-\r\n-/**\r\n- * Fecha o modal de criar empresa.\r\n- */\r\n-\r\n-\r\n-\r\n-\r\n-/**\r\n- * Abre o modal com os detalhes da empresa para o Proprietário editar.\r\n- */\r\n-async function openCompanyInfoModal() {\r\n-    showLoader();\r\n-    try {\r\n-        // A chamada à API já retorna os dados completos da empresa, incluindo 'isVerified'\r\n-        const { company } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n-\r\n-        document.getElementById('companyInfoCnpj').textContent = formatCnpj(company.cnpj);\r\n-        document.getElementById('companyInfoName').value = company.nomeEmpresa || '';\r\n-        document.getElementById('companyInfoEmail').value = company.email || '';\r\n-        document.getElementById('companyInfoTelefone').value = company.telefoneFixo || '';\r\n-        document.getElementById('companyInfoWhatsapp').value = company.telefoneWhatsapp || '';\r\n-\r\n-        // LÓGICA PARA MOSTRAR/ESCONDER O AVISO\r\n-        if (company.isVerified) {\r\n-            verificationNotice.classList.add('hidden');\r\n-        } else {\r\n-            verificationNotice.classList.remove('hidden');\r\n-        }\r\n-\r\n-        IMask(document.getElementById('companyInfoTelefone'), { mask: '(00) 0000-0000' });\r\n-        IMask(document.getElementById('companyInfoWhatsapp'), { mask: '(00) 00000-0000' });\r\n-\r\n-        companyInfoModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de permissões para o Proprietário.\r\n- */\r\n-async function openPermissionsModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const permissions = await api.getPermissions();\r\n-\r\n-        // Preenche o modal com as permissões atuais\r\n-        document.getElementById('gerente-canCreate-boleto').checked = permissions.Gerente.canCreate;\r\n-        document.querySelector(`input[name=\"gerente-canUpdate\"][value=\"${permissions.Gerente.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"gerente-canDelete\"][value=\"${permissions.Gerente.canDelete}\"]`).checked = true;\r\n-\r\n-        document.getElementById('funcionario-canCreate-boleto').checked = permissions.Funcionário.canCreate;\r\n-        document.querySelector(`input[name=\"funcionario-canUpdate\"][value=\"${permissions.Funcionário.canUpdate}\"]`).checked = true;\r\n-        document.querySelector(`input[name=\"funcionario-canDelete\"][value=\"${permissions.Funcionário.canDelete}\"]`).checked = true;\r\n-\r\n-        permissionsModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// --- Handlers para os botões DENTRO dos novos modais ---\r\n-\r\n-async function handleSaveCompanyInfo() {\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('companyInfoName').value,\r\n-        email: document.getElementById('companyInfoEmail').value,\r\n-        telefoneFixo: document.getElementById('companyInfoTelefone').value,\r\n-        telefoneWhatsapp: document.getElementById('companyInfoWhatsapp').value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(currentLoggedInCompany._id, payload);\r\n-        showToast('Dados da empresa atualizados!', 'success');\r\n-        companyInfoModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSavePermissions() {\r\n-    const newPermissions = {\r\n-        Gerente: {\r\n-            canCreate: document.getElementById('gerente-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"gerente-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"gerente-canDelete\"]:checked').value,\r\n-        },\r\n-        Funcionário: {\r\n-            canCreate: document.getElementById('funcionario-canCreate-boleto').checked,\r\n-            canUpdate: document.querySelector('input[name=\"funcionario-canUpdate\"]:checked').value,\r\n-            canDelete: document.querySelector('input[name=\"funcionario-canDelete\"]:checked').value,\r\n-        }\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updatePermissions(newPermissions);\r\n-        showToast('Permissões salvas com sucesso!', 'success');\r\n-        permissionsModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function openCategoriesModal() {\r\n-    showLoader();\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        renderCategoryList(categories);\r\n-        categoriesModal.classList.remove('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function renderCategoryList(categories) {\r\n-    categoryListDiv.innerHTML = '';\r\n-    if (categories.length === 0) {\r\n-        categoryListDiv.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhuma categoria criada.</p>';\r\n-        return;\r\n-    }\r\n-    categories.forEach(category => {\r\n-        categoryListDiv.insertAdjacentHTML('beforeend', `\r\n-            <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center\">\r\n-                <span class=\"text-white\">${category.name}</span>\r\n-                <div>\r\n-                    <button class=\"edit-category-btn text-blue-400 hover:text-blue-300 mr-2\" data-id=\"${category._id}\" data-name=\"${category.name}\"><i class=\"fas fa-edit\"></i></button>\r\n-                    <button class=\"delete-category-btn text-red-400 hover:text-red-300\" data-id=\"${category._id}\"><i class=\"fas fa-trash\"></i></button>\r\n-                </div>\r\n-            </div>\r\n-        `);\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal para adicionar um novo boleto,\r\n- * e opcionalmente pré-preenchendo a data.\r\n- * @param {string | null} preselectedDate - A data para pré-preencher no formulário.\r\n- */\r\n-async function openAddBillModal(preselectedDate = null) {\r\n-    clearBillForm();\r\n-    switchAddBillMode('manual');\r\n-    showLoader();\r\n-    try {\r\n-        // Se uma data foi passada como parâmetro (ou seja, o utilizador clicou no calendário)\r\n-        if (preselectedDate) {\r\n-            // Preenche o campo da aba \"Adicionar Manual\" (comportamento que já existia)\r\n-            document.getElementById('dueDate').value = preselectedDate;\r\n-\r\n-            // NOVA LINHA: Preenche também o campo da aba \"Pagamento Recorrente\"\r\n-            document.getElementById('recurrentStartDate').value = preselectedDate;\r\n-        }\r\n-\r\n-        addBillModal.classList.remove('hidden');\r\n-    } catch (error)\r\n- {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function populateCategoryFilter() {\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            categoryFilterSelect.innerHTML += `<option value=\"${category._id}\">${category.name}</option>`;\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao popular filtro de categorias:\", error);\r\n-        // Se der erro, garante que a opção padrão exista\r\n-        categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Alterna a visualização entre o Calendário e o Dashboard.\r\n- */\r\n-function switchView(viewToShow) {\r\n-    // Esconde ambas as vistas\r\n-    calendarView.classList.add('hidden');\r\n-    dashboardView.classList.add('hidden');\r\n-\r\n-    // Reseta o estilo dos botões\r\n-    viewCalendarBtn.classList.remove('bg-indigo-600');\r\n-    viewCalendarBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-    viewDashboardBtn.classList.remove('bg-indigo-600');\r\n-    viewDashboardBtn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-\r\n-    // Mostra a vista correta e ativa o botão correspondente\r\n-    if (viewToShow === 'calendar') {\r\n-        calendarView.classList.remove('hidden');\r\n-        viewCalendarBtn.classList.add('bg-indigo-600');\r\n-        viewCalendarBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-    } else if (viewToShow === 'dashboard') {\r\n-        dashboardView.classList.remove('hidden');\r\n-        viewDashboardBtn.classList.add('bg-indigo-600');\r\n-        viewDashboardBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderDashboard();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Atualiza os cartões de KPI no dashboard.\r\n- * @param {object} kpiData - Os dados dos KPIs vindos da API.\r\n- */\r\n-function updateKpiCards(kpiData) {\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    const pendenteMes = kpiData.totalMes - kpiData.pagoMes;\r\n-\r\n-    // Popula os novos campos\r\n-    if (kpiContasVencidas) kpiContasVencidas.textContent = formatCurrency(kpiData.totalVencido);\r\n-    \r\n-    // Popula os campos existentes\r\n-    document.getElementById('kpiTotalMes').textContent = formatCurrency(kpiData.totalMes);\r\n-    document.getElementById('kpiPagoMes').textContent = formatCurrency(kpiData.pagoMes);\r\n-    document.getElementById('kpiPendenteMes').textContent = formatCurrency(pendenteMes);\r\n-}\r\n-\r\n-/**\r\n- * Função principal que busca todos os dados e orquestra a renderização do dashboard.\r\n- */\r\n-async function renderDashboard() {\r\n-    showLoader();\r\n-    try {\r\n-        const dateRange = getDateRangeFromPreset();\r\n-\r\n-        // ATUALIZADO: Passa o 'dashboardStatusFilter' para as chamadas da API\r\n-        const [pieData, barData, kpiData, upcomingData] = await Promise.all([\r\n-            api.getExpensesByCategory(dateRange, dashboardStatusFilter),\r\n-            api.getMonthlySummary(dateRange, dashboardStatusFilter),\r\n-            api.getKpiSummary(dateRange),\r\n-            api.getUpcomingPayments()\r\n-        ]);\r\n-\r\n-        updateKpiCards(kpiData);\r\n-        renderPieChart(pieData);\r\n-        renderBarChart(barData);\r\n-        renderUpcomingPayments(upcomingData);\r\n-        renderTopExpensesChart(pieData);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de pizza de despesas por categoria.\r\n- */\r\n-function renderPieChart(data) {\r\n-    const canvas = document.getElementById('expensesByCategoryChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    if (expensesPieChart) {\r\n-        expensesPieChart.destroy();\r\n-    }\r\n-\r\n-    expensesPieChart = new Chart(ctx, {\r\n-        type: 'pie',\r\n-        data: {\r\n-            labels: data.map(item => item.categoryName),\r\n-            datasets: [{\r\n-                data: data.map(item => item.totalAmount),\r\n-                backgroundColor: ['#4f46e5', '#10b981', '#ef4444', '#f59e0b', '#3b82f6', '#8b5cf6'],\r\n-                borderColor: '#1f2937',\r\n-                borderWidth: 2\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            plugins: { legend: { position: 'top', labels: { color: '#d1d5db' } } }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de barras com o resumo dos últimos meses.\r\n- */\r\n-function renderBarChart(data) {\r\n-    const canvas = document.getElementById('monthlyExpensesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\r\n-    const labels = data.map(item => `${monthNames[item._id.month - 1]}/${String(item._id.year).slice(2)}`);\r\n-    const values = data.map(item => item.totalAmount);\r\n-\r\n-    if (expensesBarChart) {\r\n-        expensesBarChart.destroy();\r\n-    }\r\n-    \r\n-    expensesBarChart = new Chart(ctx, {\r\n-        type: 'bar',\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Total',\r\n-                data: values,\r\n-                backgroundColor: 'rgba(79, 70, 229, 0.6)',\r\n-                borderColor: 'rgba(79, 70, 229, 1)',\r\n-                borderWidth: 1\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n-                x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } }\r\n-            },\r\n-            plugins: { legend: { display: false } }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Busca categorias da API e preenche um elemento <select> do HTML.\r\n- * @param {HTMLSelectElement} selectElement - O elemento dropdown a ser preenchido.\r\n- */\r\n-async function populateCategorySelect(selectElement) {\r\n-    if (!selectElement) return;\r\n-\r\n-    try {\r\n-        const categories = await api.getCategories();\r\n-        selectElement.innerHTML = '<option value=\"\">Nenhuma</option>'; // Opção padrão\r\n-        categories.forEach(category => {\r\n-            const option = document.createElement('option');\r\n-            option.value = category._id;\r\n-            option.textContent = category.name;\r\n-            selectElement.appendChild(option);\r\n-        });\r\n-    } catch (error) {\r\n-        showToast('Erro ao carregar categorias.', 'error');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n- * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n- */\r\n-function initializeDashboardDragAndDrop() {\r\n-    const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n-    const mainGrid = document.getElementById('dashboard-main-grid');\r\n-\r\n-    // Vamos guardar as instâncias do Sortable em variáveis\r\n-    let kpiSortable, mainSortable;\r\n-\r\n-    const saveOrder = (gridType) => {\r\n-        if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n-\r\n-        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n-        let order;\r\n-\r\n-        // Usamos a instância correta para obter a ordem\r\n-        if (gridType === 'kpi' && kpiSortable) {\r\n-            order = kpiSortable.toArray();\r\n-        } else if (gridType === 'main' && mainSortable) {\r\n-            order = mainSortable.toArray();\r\n-        }\r\n-\r\n-        if (order) {\r\n-            localStorage.setItem(key, JSON.stringify(order));\r\n-        }\r\n-    };\r\n-\r\n-    if (kpiGrid) {\r\n-        // Guardamos a instância na nossa variável\r\n-        kpiSortable = new Sortable(kpiGrid, {\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-            // A chamada agora é mais simples\r\n-            onEnd: () => saveOrder('kpi'),\r\n-        });\r\n-    }\r\n-\r\n-    if (mainGrid) {\r\n-        // Guardamos a instância na nossa variável\r\n-        mainSortable = new Sortable(mainGrid, {\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-            onEnd: () => saveOrder('main'),\r\n-        });\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Verifica o localStorage por uma ordem de cartões salva para o utilizador atual\r\n- * e, se encontrar, reordena os elementos no ecrã.\r\n- */\r\n-function applySavedDashboardOrder() {\r\n-    if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n-\r\n-    const applyOrder = (gridType) => {\r\n-        const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n-        const savedOrder = localStorage.getItem(key);\r\n-        const grid = document.getElementById(`dashboard-${gridType}-grid`);\r\n-\r\n-        if (savedOrder && grid) {\r\n-            const order = JSON.parse(savedOrder);\r\n-            // Para cada id na ordem salva, encontramos o elemento correspondente\r\n-            // e o movemos para o final do container. Ao fazer isto em sequência,\r\n-            // a ordem final corresponde à ordem salva.\r\n-            order.forEach(dataId => {\r\n-                const card = grid.querySelector(`[data-id=\"${dataId}\"]`);\r\n-                if (card) {\r\n-                    grid.appendChild(card);\r\n-                }\r\n-            });\r\n-        }\r\n-    };\r\n-\r\n-    applyOrder('kpi');\r\n-    applyOrder('main');\r\n-}\r\n-\r\n-/**\r\n- * Captura a área do dashboard como uma imagem e gera um ficheiro PDF para download.\r\n- */\r\n-async function handleVisualExportPDF() {\r\n-    // Mostra o loader para dar feedback ao utilizador\r\n-    showLoader();\r\n-\r\n-    // Seleciona o elemento do DOM que queremos \"fotografar\"\r\n-    const dashboardElement = document.getElementById('dashboardView');\r\n-    \r\n-    // Esconde temporariamente os botões de filtro e exportação para não aparecerem no PDF\r\n-    const filterContainer = document.getElementById('dashboard-date-filter-container');\r\n-    if (filterContainer) filterContainer.style.display = 'none';\r\n-\r\n-    try {\r\n-        // Usa a biblioteca html2canvas para criar um \"canvas\" (uma imagem) do elemento\r\n-        const canvas = await html2canvas(dashboardElement, {\r\n-            scale: 2, // Aumenta a resolução da imagem para melhor qualidade\r\n-            backgroundColor: '#1e293b' // Garante um fundo consistente\r\n-        });\r\n-\r\n-        // Converte o canvas para uma imagem no formato PNG\r\n-        const imageData = canvas.toDataURL('image/png');\r\n-\r\n-        // Usa a biblioteca jsPDF para criar o documento\r\n-        // A orientação 'p' é retrato (portrait), 'mm' é milímetros, 'a4' é o tamanho da página\r\n-        const pdf = new jspdf.jsPDF({\r\n-            orientation: 'p',\r\n-            unit: 'mm',\r\n-            format: 'a4'\r\n-        });\r\n-\r\n-        // Calcula as dimensões da imagem para que ela caiba na página A4, mantendo a proporção\r\n-        const pageWidth = pdf.internal.pageSize.getWidth();\r\n-        const pageHeight = pdf.internal.pageSize.getHeight();\r\n-        const imageWidth = canvas.width;\r\n-        const imageHeight = canvas.height;\r\n-        const ratio = imageWidth / imageHeight;\r\n-        let pdfImageWidth = pageWidth - 20; // Deixa uma margem de 10mm de cada lado\r\n-        let pdfImageHeight = pdfImageWidth / ratio;\r\n-        \r\n-        // Se a imagem ainda for muito alta, ajusta pela altura\r\n-        if (pdfImageHeight > pageHeight - 20) {\r\n-            pdfImageHeight = pageHeight - 20;\r\n-            pdfImageWidth = pdfImageHeight * ratio;\r\n-        }\r\n-        \r\n-        // Adiciona a imagem ao PDF, centralizada\r\n-        const x = (pageWidth - pdfImageWidth) / 2;\r\n-        const y = 10; // Margem de 10mm no topo\r\n-        pdf.addImage(imageData, 'PNG', x, y, pdfImageWidth, pdfImageHeight);\r\n-\r\n-        // Força o download do ficheiro\r\n-        pdf.save('dashboard-relatorio.pdf');\r\n-\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao gerar PDF visual:\", error);\r\n-        showToast('Ocorreu um erro ao gerar o PDF.', 'error');\r\n-    } finally {\r\n-        // Mostra novamente os botões de filtro, quer a exportação tenha funcionado ou não\r\n-        if (filterContainer) filterContainer.style.display = 'block';\r\n-        // Esconde o loader\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Alterna a visualização no modal de adicionar boleto entre o modo manual e o de importação de XML.\r\n- * @param {string} mode - O modo a ser ativado ('manual' ou 'xml').\r\n- */\r\n-function switchAddBillMode(mode) {\r\n-    if (!manualAddForm || !xmlAddForm || !csvImportForm || !recurrentAddForm) return;\r\n-\r\n-    // Esconde todos os painéis\r\n-    manualAddForm.classList.add('hidden');\r\n-    xmlAddForm.classList.add('hidden');\r\n-    csvImportForm.classList.add('hidden');\r\n-    recurrentAddForm.classList.add('hidden'); // Esconde o novo painel\r\n-\r\n-    // Reseta o estilo de todos os botões\r\n-    [manualAddBtn, xmlAddBtn, csvImportBtn, recurrentAddBtn].forEach(btn => { // Adiciona o novo botão\r\n-        if(btn) {\r\n-            btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-            btn.classList.remove('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n-        }\r\n-    });\r\n-\r\n-    // Ativa o painel e o botão corretos\r\n-    let activeBtn, activeForm;\r\n-    if (mode === 'manual') {\r\n-        activeBtn = manualAddBtn;\r\n-        activeForm = manualAddForm;\r\n-    } else if (mode === 'xml') {\r\n-        activeBtn = xmlAddBtn;\r\n-        activeForm = xmlAddForm;\r\n-    } else if (mode === 'recurrent') { // Adiciona a nova condição\r\n-        activeBtn = recurrentAddBtn;\r\n-        activeForm = recurrentAddForm;\r\n-    } else if (mode === 'csv') {\r\n-        activeBtn = csvImportBtn;\r\n-        activeForm = csvImportForm;\r\n-    }\r\n-\r\n-    if (activeBtn && activeForm) {\r\n-        activeForm.classList.remove('hidden');\r\n-        activeBtn.classList.add('bg-indigo-600', 'border-gray-700', 'border-b-0', '-mb-px', 'text-white');\r\n-        activeBtn.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com a seleção de um ficheiro CSV, lê e pré-visualiza os dados.\r\n- */\r\n-function handleCsvFileSelect(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) return;\r\n-\r\n-    // Usa o PapaParse para ler o ficheiro\r\n-    Papa.parse(file, {\r\n-        header: true, // Trata a primeira linha como cabeçalho\r\n-        skipEmptyLines: true,\r\n-        complete: (results) => {\r\n-            // Guarda os dados processados no estado da aplicação\r\n-            parsedCsvData = results.data;\r\n-            renderCsvPreview(parsedCsvData);\r\n-        },\r\n-        error: (err) => {\r\n-            showToast(`Erro ao ler o ficheiro CSV: ${err.message}`, 'error');\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Renderiza a tabela de pré-visualização com os dados lidos do CSV.\r\n- */\r\n-function renderCsvPreview(data) {\r\n-    // Verificação de segurança para garantir que 'data' é um array\r\n-    if (!Array.isArray(data)) {\r\n-        console.error(\"renderCsvPreview foi chamada com dados inválidos:\", data);\r\n-        data = []; // Assume um array vazio para não quebrar a execução\r\n-    }\r\n-\r\n-    if (!csvPreviewTableBody || !csvPreviewArea || !csvImportSummary) {\r\n-        console.error(\"Elementos da pré-visualização do CSV não foram encontrados no HTML.\");\r\n-        return;\r\n-    }\r\n-\r\n-    csvPreviewTableBody.innerHTML = '';\r\n-    if (data.length === 0) {\r\n-        csvPreviewArea.classList.add('hidden');\r\n-        return;\r\n-    }\r\n-    \r\n-    const formatCurrency = (valueStr) => {\r\n-        const value = parseFloat(String(valueStr).replace(',', '.'));\r\n-        return isNaN(value) ? 'Inválido' : value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-    };\r\n-\r\n-    data.forEach(row => {\r\n-        const values = Object.values(row);\r\n-        const tr = `\r\n-            <tr>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${values[0] || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${values[1] || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700\">${values[2] || ''}</td>\r\n-                <td class=\"px-4 py-2 border-b border-gray-700 text-right\">${formatCurrency(values[3])}</td>\r\n-            </tr>\r\n-        `;\r\n-        csvPreviewTableBody.insertAdjacentHTML('beforeend', tr);\r\n-    });\r\n-\r\n-    csvImportSummary.textContent = `${data.length} boletos prontos para serem importados.`;\r\n-    csvPreviewArea.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Envia os dados do CSV para a API para serem salvos na base de dados.\r\n- */\r\n-async function handleConfirmImport() {\r\n-    if (parsedCsvData.length === 0) {\r\n-        return showToast('Não há dados para importar.', 'info');\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const response = await api.importBoletos(parsedCsvData);\r\n-        showToast(response.message, 'success');\r\n-\r\n-        // Fecha o modal e atualiza a aplicação\r\n-        addBillModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-\r\n-        // Limpa os dados da pré-visualização\r\n-        csvPreviewArea.classList.add('hidden');\r\n-        csvFileInput.value = '';\r\n-        parsedCsvData = [];\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Atualiza a visibilidade e a contagem do botão de pagamento em massa.\r\n- */\r\n-function updateMassPaymentButton() {\r\n-    const count = selectedItems.size;\r\n-    selectedCountSpan.textContent = count;\r\n-    massActionsContainer.classList.toggle('hidden', count === 0);\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão \"Pagar Selecionados\".\r\n- */\r\n-async function handleMarkSelectedAsPaid() {\r\n-    if (selectedItems.size === 0) {\r\n-        return showToast('Nenhuma parcela selecionada.', 'info');\r\n-    }\r\n-\r\n-    if (!confirm(`Tem a certeza que deseja marcar ${selectedItems.size} parcela(s) como paga(s)?`)) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const parcelIds = Array.from(selectedItems.keys());\r\n-\r\n-        // Chama a função da API com o array de IDs correto.\r\n-        const response = await api.markParcelsAsPaid(parcelIds);\r\n-\r\n-        showToast(response.message, 'success');\r\n-\r\n-        // Limpa a seleção e atualiza a interface\r\n-        selectedItems.clear();\r\n-        updateMassPaymentButton();\r\n-        await updateBillsOrganizer(); // Recarrega o calendário\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Seleciona todos os checkboxes de boletos visíveis no calendário.\r\n- */\r\n-function handleSelectAllVisible() {\r\n-    // Pega todos os checkboxes que estão atualmente no calendário\r\n-    document.querySelectorAll('.mass-payment-checkbox').forEach(checkbox => {\r\n-        // Marca apenas os que ainda não estão marcados\r\n-        if (!checkbox.checked) {\r\n-            checkbox.checked = true;\r\n-\r\n-            // --- LÓGICA CORRIGIDA ---\r\n-            const parcelId = checkbox.dataset.parcelId;\r\n-            // Pega o boletoId do elemento pai mais próximo\r\n-            const boletoId = checkbox.closest('.bill-card-draggable').dataset.boletoId;\r\n-\r\n-            // Garante que temos os dois IDs antes de adicionar ao mapa\r\n-            if (parcelId && boletoId) {\r\n-                // Usa o método .set(key, value), que é o correto para um Map\r\n-                selectedItems.set(parcelId, boletoId);\r\n-            }\r\n-        }\r\n-    });\r\n-    // Atualiza o botão para refletir a nova contagem\r\n-    updateMassPaymentButton();\r\n-}\r\n-\r\n-/**\r\n- * Desmarca todos os checkboxes de boletos selecionados.\r\n- */\r\n-function handleDeselectAll() {\r\n-    // Limpa o nosso Set de seleção\r\n-    selectedItems.clear();\r\n-    // Desmarca todos os checkboxes que estão no calendário\r\n-    document.querySelectorAll('.mass-payment-checkbox:checked').forEach(checkbox => {\r\n-        checkbox.checked = false;\r\n-    });\r\n-    // Atualiza o botão (que será escondido, pois a contagem é 0)\r\n-    updateMassPaymentButton();\r\n-}\r\n-\r\n-/**\r\n- * Busca os dados do utilizador e abre o modal de perfil.\r\n- */\r\n-async function openProfileModal() {\r\n-    // Usa as variáveis globais que já temos da inicialização\r\n-    if (!currentLoggedInUser || !currentLoggedInCompany) {\r\n-        showToast('Não foi possível carregar os dados do perfil.', 'error');\r\n-        return;\r\n-    }\r\n-\r\n-    // Preenche o modal com os dados\r\n-    profileUsername.textContent = currentLoggedInUser.username;\r\n-    profileRole.textContent = currentLoggedInUser.role;\r\n-    profileCompany.textContent = currentLoggedInCompany.nomeEmpresa;\r\n-\r\n-    // Mostra o modal\r\n-    profileModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Busca o anúncio ativo mais recente e o exibe no banner.\r\n- */\r\n-async function fetchAndDisplayAnnouncement() {\r\n-    try {\r\n-        const announcement = await api.getActiveAnnouncement();\r\n-\r\n-        // Se existir um anúncio e ele tiver uma mensagem\r\n-        if (announcement && announcement.message) {\r\n-            let messageHtml = announcement.message;\r\n-            // Se o anúncio tiver um link, transforma a mensagem num link clicável\r\n-            if (announcement.link) {\r\n-                messageHtml = `<a href=\"${announcement.link}\" target=\"_blank\" class=\"hover:underline\">${announcement.message} <i class=\"fas fa-external-link-alt fa-xs ml-1\"></i></a>`;\r\n-            }\r\n-            announcementMessage.innerHTML = messageHtml;\r\n-            globalAnnouncementBanner.classList.remove('hidden');\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(\"Não foi possível buscar o anúncio:\", error);\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// =================================================================================\r\n-// EVENT HANDLERS - Funções que respondem aos eventos\r\n-// =================================================================================\r\n-// =================================================================================\r\n-\r\n-async function handleForgotPasswordRequest(e) {\r\n-    e.preventDefault();\r\n-    const email = document.getElementById('recoveryEmailInput').value;\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.requestPasswordReset(email);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem genérica de sucesso\r\n-        forgotPasswordModal.classList.add('hidden');\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-async function handleCalculateInstallments(e) {\r\n-    e.preventDefault(); // Impede a submissão padrão do formulário\r\n-\r\n-    const activeTabButton = document.querySelector('#addBillModal .flex button.bg-indigo-600');\r\n-    if (!activeTabButton) {\r\n-        return showToast('Erro: Não foi possível identificar a aba ativa.', 'error');\r\n-    }\r\n-    const activeModeId = activeTabButton.id;\r\n-\r\n-    currentBill = null;\r\n-\r\n-    if (activeModeId === 'manual-add-btn') {\r\n-        const billName = document.getElementById('billName').value;\r\n-        const dueDate = document.getElementById('dueDate').value;\r\n-        const totalAmount = parseFloat(document.getElementById('totalAmount').value.replace(',', '.'));\r\n-        const installments = parseInt(document.getElementById('installments').value);\r\n-        const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n-        const description = document.getElementById('description').value;\r\n-\r\n-        // Validação feita aqui no JavaScript\r\n-        if (!billName || !dueDate || !installments || isNaN(totalAmount) || totalAmount <= 0 || installments <= 0) {\r\n-            return showToast(\"Preencha todos os campos obrigatórios com valores válidos.\", \"error\");\r\n-        }\r\n-\r\n-        currentBill = { name: billName, description, parcels: [], category: null };\r\n-        const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n-\r\n-        for (let i = 0; i < installments; i++) {\r\n-            const parcelDate = new Date(dueDate + 'T00:00:00');\r\n-            parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n-            currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n-        }\r\n-\r\n-    } else if (activeModeId === 'recurrent-add-btn') {\r\n-        const billName = document.getElementById('recurrentBillName').value;\r\n-        const startDate = document.getElementById('recurrentStartDate').value;\r\n-        const amount = parseFloat(document.getElementById('recurrentAmount').value);\r\n-        const months = parseInt(document.getElementById('recurrentInstallments').value);\r\n-        const description = document.getElementById('recurrentDescription').value;\r\n-\r\n-        // Validação feita aqui no JavaScript\r\n-        if (!billName || !startDate || !months || isNaN(amount) || amount <= 0 || months <= 0) {\r\n-            return showToast(\"Preencha todos os campos do pagamento recorrente.\", \"error\");\r\n-        }\r\n-\r\n-        currentBill = { name: billName, description, parcels: [], category: null };\r\n-\r\n-        for (let i = 0; i < months; i++) {\r\n-            const parcelDate = new Date(startDate + 'T00:00:00');\r\n-            parcelDate.setMonth(parcelDate.getMonth() + i);\r\n-            currentBill.parcels.push({ number: i + 1, amount: amount, dueDate: parcelDate.toISOString().split('T')[0], barcode: '' });\r\n-        }\r\n-    }\r\n-\r\n-    // Este bloco só será executado se `currentBill` tiver sido preenchido com sucesso\r\n-    if (currentBill && currentBill.parcels.length > 0) {\r\n-        installmentsList.innerHTML = '';\r\n-        currentBill.parcels.forEach((parcel, index) => {\r\n-             installmentsList.insertAdjacentHTML('beforeend', `\r\n-                <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                    <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                    <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                    <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                    <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                </div>\r\n-            `);\r\n-        });\r\n-\r\n-        addEventListenersToInstallmentInputs();\r\n-        updatePreviewTotal();\r\n-        previewBillNameInput.value = currentBill.name;\r\n-        previewNfeNumber.textContent = 'N/A';\r\n-        addBillModal.classList.add('hidden');\r\n-        await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n-        installmentsPreviewModal.classList.remove('hidden');\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Recalcula e atualiza o valor total na pré-visualização das parcelas.\r\n- */\r\n-function updatePreviewTotal() {\r\n-    if (!currentBill.parcels) return;\r\n-    const total = currentBill.parcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    parcelPreviewTotalSpan.textContent = `Total: ${total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-}\r\n-\r\n-async function handleAddToOrganizer() {\r\n-    currentBill.category = document.getElementById('previewBillCategorySelect').value || null;\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        await api.createBoleto(currentBill); // O objeto currentBill agora tem a categoria correta\r\n-        showToast('Boleto criado com sucesso!', 'success');\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-        clearBillForm();\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleSaveChanges() {\r\n-    if (!selectedParcel) return;\r\n-\r\n-    // Guarda os dados atualizados do formulário\r\n-    const updatedParcelData = {\r\n-        paid: modalBillPaidCheckbox.checked,\r\n-        amount: parseFloat(modalBillAmount.value),\r\n-        dueDate: modalBillDate.value,\r\n-        description: modalBillDescription.value,\r\n-        barcode: modalBillBarcodeInput.value,\r\n-    };\r\n-    const updatedBillData = {\r\n-        category: modalBillCategorySelect.value || null\r\n-    };\r\n-\r\n-    // Encontra o boleto pai na nossa lista local\r\n-    const parentBoleto = userBoletos.find(b => b._id === selectedParcel.parentId);\r\n-\r\n-    // Verifica se a parcela é recorrente (se o boleto pai tem mais de 1 parcela)\r\n-    if (parentBoleto && parentBoleto.parcels.length > 1) {\r\n-        // Se for recorrente, guarda os dados e abre o modal de escolha\r\n-        pendingUpdateData = { updatedParcelData, updatedBillData };\r\n-\r\n-        // Atualiza a data no texto do botão para dar mais contexto ao utilizador\r\n-        const date = new Date(updatedParcelData.dueDate + 'T00:00:00');\r\n-        singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n-\r\n-        recurrentEditModal.classList.remove('hidden');\r\n-    } else {\r\n-        // Se não for recorrente, salva diretamente como antes\r\n-        showLoader();\r\n-        try {\r\n-            await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updatedParcelData);\r\n-            await api.updateBoleto(selectedParcel.parentId, updatedBillData);\r\n-            showToast('Alterações salvas com sucesso!', 'success');\r\n-            billModal.classList.add('hidden');\r\n-            await updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteParcel() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast('Parcela excluída com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteEntireBill() {\r\n-    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteBoleto(selectedParcel.parentId);\r\n-        showToast('Boleto completo excluído com sucesso!', 'success');\r\n-        billModal.classList.add('hidden');\r\n-\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função de inicialização principal da aplicação.\r\n- * Verifica a sessão e o estado da assinatura.\r\n- */\r\n-async function initializeApp() {\r\n-    const today = new Date();\r\n-    currentMonth = today.getMonth();\r\n-    currentYear = today.getFullYear();\r\n-\r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        // Se não houver token, o utilizador não está logado.\r\n-        // Idealmente, a página de login (Index.html) deveria ser mostrada.\r\n-        // Como estamos em OrgBoletos.html, vamos redirecionar.\r\n-        window.location.href = 'Index.html';\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n-            isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n-        } else {\r\n-            currentLoggedInUser = data.user;\r\n-            currentLoggedInCompany = data.company;\r\n-            const subscription = currentLoggedInCompany.subscription;\r\n-            const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-            if (isSubscriptionActive) {\r\n-                await showMainApp();\r\n-            } else {\r\n-                if (currentLoggedInUser.role === 'Proprietário') {\r\n-                    showSubscriptionModal(currentLoggedInCompany);\r\n-                } else {\r\n-                    showAccessBlockedModal();\r\n-                }\r\n-            }\r\n-        }\r\n-    } catch (error) {\r\n-        // Se o token for inválido ou a API falhar, o utilizador é deslogado\r\n-        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        setTimeout(() => {\r\n-            window.location.href = 'Index.html';\r\n-        }, 2000); // Aguarda 2 segundos para o utilizador ler a mensagem\r\n-    } finally {\r\n-        // Esconde a tela de carregamento inicial\r\n-        document.getElementById('loadingScreen').classList.add('hidden');\r\n-    }\r\n-}\r\n-\r\n-function logout() {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-}\r\n-\r\n-/**\r\n- * Define a sessão de representação do admin.\r\n- * Esta função é chamada pelo painel de admin quando clica em \"Entrar\".\r\n- * @param {object} data - Os dados recebidos da API (token, user, company).\r\n- */\r\n-export async function setImpersonationSession(data) {\r\n-    localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-    localStorage.setItem('authToken', data.token);\r\n-\r\n-    currentLoggedInCompany = data.company;\r\n-    currentLoggedInUser = data.user;\r\n-    loggedInViaAdmin = true;\r\n-\r\n-    await showMainApp();\r\n-}\r\n-\r\n-/**\r\n- * Restaura a sessão original do SuperAdmin.\r\n- * Limpa as variáveis de estado de representação e restaura o token do admin.\r\n- * @returns {boolean} - Retorna true se o token do admin foi encontrado, senão false.\r\n- */\r\n-export function restoreAdminSession() {\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n-    if (!adminToken) {\r\n-        console.error(\"Token de superAdmin não encontrado para restaurar a sessão.\");\r\n-        return false;\r\n-    }\r\n-\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken');\r\n-\r\n-    // Redefine as variáveis de estado da aplicação para o modo admin\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-\r\n-    return true;\r\n-}\r\n-\r\n-\r\n-\r\n-/**\r\n- * Lida com o upload de um ficheiro XML de NFe, lê os dados e preenche o formulário\r\n- * ou vai direto para a pré-visualização se as parcelas estiverem definidas.\r\n- * @param {Event} event - O evento 'change' do input do ficheiro.\r\n- */\r\n-async function handleNfeXmlUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file) {\r\n-        return;\r\n-    }\r\n-\r\n-    const reader = new FileReader();\r\n-\r\n-    reader.onload = async (e) => {\r\n-        try {\r\n-            const xmlString = e.target.result;\r\n-            const parser = new DOMParser();\r\n-            const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\r\n-\r\n-            if (xmlDoc.getElementsByTagName(\"nfeProc\").length === 0) {\r\n-                throw new Error(\"O ficheiro fornecido não parece ser um XML de NFe válido.\");\r\n-            }\r\n-\r\n-            const emitenteNode = xmlDoc.getElementsByTagName(\"emit\")[0];\r\n-            const ideNode = xmlDoc.getElementsByTagName(\"ide\")[0];\r\n-            const totalNode = xmlDoc.getElementsByTagName(\"ICMSTot\")[0];\r\n-\r\n-            const nomeFornecedor = getTagValue(\"xNome\", emitenteNode);\r\n-            const nfeNumber = getTagValue(\"nNF\", ideNode);\r\n-            const duplicatas = Array.from(xmlDoc.getElementsByTagName(\"dup\"));\r\n-\r\n-            let parcelsData = [];\r\n-\r\n-            if (duplicatas.length > 0) {\r\n-                parcelsData = duplicatas.map((dup, i) => ({\r\n-                    number: parseInt(getTagValue(\"nDup\", dup)) || (i + 1),\r\n-                    amount: parseFloat(getTagValue(\"vDup\", dup)) || 0,\r\n-                    dueDate: getTagValue(\"dVenc\", dup)\r\n-                }));\r\n-            } else {\r\n-                const infoCpl = getTagValue(\"infCpl\", xmlDoc);\r\n-                const cobrancaMatch = infoCpl.match(/BOLETO:\\s*([\\d\\/\\s]+)/i);\r\n-\r\n-                if (cobrancaMatch && cobrancaMatch[1]) {\r\n-                    const dias = cobrancaMatch[1].trim().split(/[/\\s]+/);\r\n-                    const totalAmount = parseFloat(getTagValue(\"vNF\", totalNode));\r\n-                    const parcelAmount = parseFloat((totalAmount / dias.length).toFixed(2));\r\n-                    const dataEmissao = new Date(getTagValue(\"dhEmi\", ideNode));\r\n-\r\n-                    parcelsData = dias.map((dia, i) => {\r\n-                        const vencimento = new Date(dataEmissao);\r\n-                        vencimento.setDate(vencimento.getDate() + parseInt(dia));\r\n-                        return {\r\n-                            number: i + 1,\r\n-                            amount: parcelAmount,\r\n-                            dueDate: vencimento.toISOString().split('T')[0]\r\n-                        };\r\n-                    });\r\n-                }\r\n-            }\r\n-\r\n-            if (parcelsData.length > 0) {\r\n-                // ALTERAÇÃO AQUI: Removemos o prefixo \"NFe - \" do nome.\r\n-                currentBill = { name: nomeFornecedor, nfeNumber: nfeNumber, parcels: parcelsData };\r\n-\r\n-                installmentsList.innerHTML = '';\r\n-                currentBill.parcels.forEach((parcel, index) => {\r\n-                    installmentsList.insertAdjacentHTML('beforeend', `\r\n-                        <div class=\"grid grid-cols-12 gap-4 items-center bg-gray-700/50 p-2 rounded-md\">\r\n-                            <div class=\"col-span-1\"><span class=\"font-medium text-gray-200\">Parcela ${parcel.number}</span></div>\r\n-                            <div class=\"col-span-2\"><input type=\"date\" class=\"parcel-date-input bg-gray-600 text-white p-2 rounded text-sm w-full\" value=\"${parcel.dueDate}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-2\"><input type=\"number\" step=\"0.01\" class=\"parcel-amount-input bg-gray-600 text-white p-2 rounded w-full text-right font-bold\" value=\"${parcel.amount.toFixed(2)}\" data-parcel-index=\"${index}\"></div>\r\n-                            <div class=\"col-span-7\"><input type=\"text\" class=\"parcel-barcode-input bg-gray-600 text-white p-2 rounded text-sm w-full\" placeholder=\"Insira o código de barras da parcela\" value=\"\" data-parcel-index=\"${index}\"></div>\r\n-                        </div>\r\n-                    `);\r\n-                });\r\n-\r\n-                addEventListenersToInstallmentInputs();\r\n-                updatePreviewTotal();\r\n-                previewBillNameInput.value = currentBill.name;\r\n-                previewNfeNumber.textContent = nfeNumber;\r\n-                await populateCategorySelect(document.getElementById('previewBillCategorySelect'));\r\n-                installmentsPreviewModal.classList.remove('hidden');\r\n-\r\n-            } else {\r\n-                const valorNFe = getTagValue(\"vNF\", totalNode);\r\n-                const vencimento = getTagValue(\"dhEmi\", ideNode).split('T')[0];\r\n-\r\n-                // ALTERAÇÃO AQUI TAMBÉM: Removemos o prefixo no caso de fallback.\r\n-                document.getElementById('billName').value = nomeFornecedor;\r\n-                document.getElementById('totalAmount').value = parseFloat(valorNFe).toFixed(2);\r\n-                if (vencimento) {\r\n-                    document.getElementById('dueDate').value = vencimento;\r\n-                }\r\n-\r\n-                addBillModal.classList.remove('hidden');\r\n-            }\r\n-\r\n-            showToast('Dados do XML carregados com sucesso!', 'success');\r\n-\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-            console.error(\"Erro ao processar XML:\", error);\r\n-        } finally {\r\n-            event.target.value = '';\r\n-        }\r\n-    };\r\n-\r\n-    reader.onerror = () => {\r\n-        showToast('Não foi possível ler o ficheiro selecionado.', 'error');\r\n-    };\r\n-\r\n-    reader.readAsText(file);\r\n-}\r\n-\r\n-/**\r\n- * Adiciona todos os eventos necessários aos inputs da lista de parcelas.\r\n- */\r\n-function addEventListenersToInstallmentInputs() {\r\n-    // Listener para o campo de VALOR\r\n-    document.querySelectorAll('.parcel-amount-input').forEach(input => {\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].amount = parseFloat(e.target.value) || 0;\r\n-            }\r\n-            updatePreviewTotal();\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para o campo de DATA\r\n-    document.querySelectorAll('.parcel-date-input').forEach(input => {\r\n-        input.addEventListener('change', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].dueDate = e.target.value;\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    /**\r\n-     * Mostra a tela de login de administrador.\r\n-     */\r\n-    function showAdminLogin() {\r\n-        hideAllScreens(); // Função de utils.js\r\n-        if (adminLoginForm) adminLoginForm.reset();\r\n-        if (adminLoginScreen) adminLoginScreen.classList.remove('hidden');\r\n-    }\r\n-\r\n-    // Listener para o campo de CÓDIGO DE BARRAS\r\n-    document.querySelectorAll('.parcel-barcode-input').forEach(input => {\r\n-        // Evento para guardar o valor quando é digitado\r\n-        input.addEventListener('input', (e) => {\r\n-            const index = parseInt(e.target.dataset.parcelIndex);\r\n-            if (currentBill.parcels[index]) {\r\n-                currentBill.parcels[index].barcode = e.target.value;\r\n-            }\r\n-        });\r\n-\r\n-        input.addEventListener('keydown', (e) => {\r\n-            if (e.key === 'Enter') {\r\n-                e.preventDefault(); // Impede que o 'Enter' submeta um formulário ou quebre a linha\r\n-\r\n-                const currentIndex = parseInt(e.target.dataset.parcelIndex);\r\n-                const nextIndex = currentIndex + 1;\r\n-                const nextInput = document.querySelector(`.parcel-barcode-input[data-parcel-index=\"${nextIndex}\"]`);\r\n-\r\n-                if (nextInput) {\r\n-                    // Se houver um próximo campo de código de barras, foca nele.\r\n-                    nextInput.focus();\r\n-                    nextInput.select(); // Seleciona todo o texto para facilitar a substituição\r\n-                } else {\r\n-                    // Se for o último campo, foca no botão de salvar.\r\n-                    document.getElementById('addToOrganizer').focus();\r\n-                }\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para mostrar o código de barras em ecrã inteiro.\r\n- */\r\n-function handleShowFullScreenBarcode() {\r\n-    const barcodeValue = modalBillBarcodeInput.value;\r\n-    if (!barcodeValue) {\r\n-        return showToast('Não há código de barras para mostrar.', 'info');\r\n-    }\r\n-\r\n-    const barcodeImageContainer = document.getElementById('fullScreenBarcodeImage');\r\n-    if (!barcodeImageContainer) return;\r\n-\r\n-    // Limpa qualquer código de barras anterior\r\n-    barcodeImageContainer.innerHTML = '';\r\n-\r\n-    try {\r\n-        // Limpa o valor, removendo tudo o que não for número, para garantir a compatibilidade.\r\n-        const cleanBarcode = barcodeValue.replace(/\\D/g, '');\r\n-\r\n-        // Usa a biblioteca JsBarcode para desenhar o código de barras\r\n-        JsBarcode(barcodeImageContainer, cleanBarcode, {\r\n-            format: \"CODE128\", // <-- MUDANÇA PRINCIPAL: Usamos um formato mais flexível\r\n-            lineColor: \"#000000\",\r\n-            width: 2,\r\n-            height: 100,\r\n-            displayValue: true, // Mostra os números abaixo das barras\r\n-            fontSize: 18\r\n-        });\r\n-\r\n-        // Mostra o modal de ecrã inteiro\r\n-        barcodeFullScreenModal.classList.remove('hidden');\r\n-\r\n-    } catch (e) {\r\n-        console.error(\"Erro ao gerar código de barras:\", e);\r\n-        showToast('Erro ao gerar código de barras. Verifique se o código é válido.', 'error');\r\n-    }\r\n-}\r\n-\r\n-async function handleAttachmentUpload(event) {\r\n-    const file = event.target.files[0];\r\n-    if (!file || !selectedParcel) return;\r\n-\r\n-    // Cria um objeto FormData para enviar o ficheiro\r\n-    const formData = new FormData();\r\n-    formData.append('comprovante', file);\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.uploadAttachment(selectedParcel.parentId, selectedParcel._id, formData);\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Atualiza a UI para mostrar o link do novo anexo\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<a href=\"${data.attachmentUrl}\" target=\"_blank\" class=\"text-indigo-400 hover:underline flex items-center\"><i class=\"fas fa-paperclip mr-2\"></i>Ver Comprovativo</a>`;\r\n-\r\n-        // Atualiza o nosso estado local para que a mudança persista se o modal for reaberto\r\n-        await updateBillsOrganizer();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com o clique no botão para remover um anexo de comprovativo.\r\n- * Pede confirmação, chama a API para apagar o ficheiro e atualiza a interface.\r\n- */\r\n-async function handleRemoveAttachment() {\r\n-    // Garante que uma parcela está selecionada e pede confirmação ao utilizador\r\n-    if (!selectedParcel || !confirm(\"Tem a certeza que deseja remover este comprovativo? Esta ação não pode ser desfeita.\")) {\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader(); // Mostra o ícone de carregamento\r\n-    try {\r\n-        // Chama a nossa função da API para apagar o anexo\r\n-        const data = await api.deleteAttachment(selectedParcel.parentId, selectedParcel._id);\r\n-        showToast(data.message, 'success'); // Mostra a mensagem de sucesso\r\n-\r\n-        // Atualiza a interface do modal para mostrar novamente o botão de upload\r\n-        const attachmentContainer = document.getElementById('attachment-container');\r\n-        attachmentContainer.innerHTML = `<input type=\"file\" id=\"attachmentUploadInput\" accept=\".pdf,.jpg,.jpeg,.png\" class=\"block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-gray-600 hover:file:bg-gray-700 cursor-pointer\"/>`;\r\n-\r\n-        // Adiciona o evento ao novo botão de upload que acabámos de criar\r\n-        document.getElementById('attachmentUploadInput').addEventListener('change', handleAttachmentUpload);\r\n-\r\n-        // Atualiza o estado geral da aplicação para garantir que tudo fique sincronizado\r\n-        await updateBillsOrganizer();\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader(); // Esconde o ícone de carregamento, quer tenha dado erro ou não\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n- */\r\n-function applyFiltersAndSearch() {\r\n-    const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n-    const selectedCategoryId = categoryFilterSelect.value;\r\n-\r\n-    let filteredBoletos = userBoletos.filter(bill => {\r\n-        // Filtro de pesquisa\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n-            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        if (!matchesSearch) return false;\r\n-\r\n-        // Filtro de categoria\r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-        if (!matchesCategory) return false;\r\n-\r\n-        // Filtro de status\r\n-        if (activeStatusFilter === 'all') return true;\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        return bill.parcels.some(parcel => {\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n-            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n-            return false;\r\n-        });\r\n-    });\r\n-\r\n-    renderCalendar(filteredBoletos);\r\n-    updateMonthlySummary(filteredBoletos);\r\n-}\r\n-\r\n-/**\r\n- * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n- * agora com lógica para parcelas recorrentes.\r\n- */\r\n-function initializeDragAndDrop() {\r\n-    const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n-\r\n-    dayCells.forEach(cell => {\r\n-        new Sortable(cell, {\r\n-            group: 'calendar-bills',\r\n-            animation: 150,\r\n-            ghostClass: 'opacity-50',\r\n-\r\n-            onEnd: async function (evt) {\r\n-                const item = evt.item;\r\n-                const toCell = evt.to;\r\n-                const boletoId = item.dataset.boletoId;\r\n-                const parcelId = item.dataset.parcelId;\r\n-                const newDate = toCell.dataset.date;\r\n-\r\n-                if (!boletoId || !parcelId || !newDate) return;\r\n-\r\n-                const parentBoleto = userBoletos.find(b => b._id === boletoId);\r\n-                const originalParcel = parentBoleto?.parcels.find(p => p._id === parcelId);\r\n-\r\n-                if (!parentBoleto || !originalParcel) return;\r\n-\r\n-                if (parentBoleto.parcels.length > 1) {\r\n-                    // --- CORREÇÃO AQUI ---\r\n-                    // 1. Definimos a variável 'selectedParcel' que estava em falta.\r\n-                    selectedParcel = { ...originalParcel, parentId: parentBoleto._id };\r\n-\r\n-                    // 2. O resto da lógica continua a mesma\r\n-                    const updatedParcelData = {\r\n-                        ...originalParcel,\r\n-                        dueDate: newDate,\r\n-                    };\r\n-\r\n-                    pendingUpdateData = { \r\n-                        updatedParcelData, \r\n-                        updatedBillData: { category: parentBoleto.category?._id || null }\r\n-                    };\r\n-\r\n-                    const date = new Date(newDate + 'T00:00:00');\r\n-                    singleParcelDate.textContent = date.toLocaleDateString('pt-BR');\r\n-\r\n-                    recurrentEditModal.classList.remove('hidden');\r\n-                    renderCalendar();\r\n-\r\n-                } else {\r\n-                    // Lógica para parcela única (continua a mesma)\r\n-                    showLoader();\r\n-                    try {\r\n-                        await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n-                        showToast('Data da parcela atualizada com sucesso!', 'success');\r\n-                        await updateBillsOrganizer();\r\n-                    } catch (error) {\r\n-                        showToast(error.message, 'error');\r\n-                        await updateBillsOrganizer();\r\n-                    } finally {\r\n-                        hideLoader();\r\n-                    }\r\n-                }\r\n-            },\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Calcula o startDate e endDate com base numa predefinição do seletor.\r\n- * @returns {{startDate?: string, endDate?: string}} - As datas ou um objeto vazio.\r\n- */\r\n-function getDateRangeFromPreset() {\r\n-    const preset = dateRangePresetSelect.value;\r\n-    const now = new Date();\r\n-    let startDate, endDate;\r\n-\r\n-    switch (preset) {\r\n-        case 'thisMonth':\r\n-            startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n-            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n-            break;\r\n-        case 'lastMonth':\r\n-            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n-            endDate = new Date(now.getFullYear(), now.getMonth(), 0);\r\n-            break;\r\n-        case 'thisQuarter':\r\n-            const quarter = Math.floor(now.getMonth() / 3);\r\n-            startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n-            endDate = new Date(now.getFullYear(), quarter * 3 + 3, 0);\r\n-            break;\r\n-        case 'thisYear':\r\n-            startDate = new Date(now.getFullYear(), 0, 1);\r\n-            endDate = new Date(now.getFullYear(), 11, 31);\r\n-            break;\r\n-        case 'custom':\r\n-            if (startDateInput.value && endDateInput.value) {\r\n-                return {\r\n-                    startDate: startDateInput.value,\r\n-                    endDate: endDateInput.value\r\n-                };\r\n-            }\r\n-            return {}; // Retorna vazio se o intervalo personalizado não estiver completo\r\n-        default:\r\n-            return {}; // Padrão sem filtro\r\n-    }\r\n-\r\n-    // Formata as datas para o formato YYYY-MM-DD\r\n-    return {\r\n-        startDate: startDate.toISOString().split('T')[0],\r\n-        endDate: endDate.toISOString().split('T')[0]\r\n-    };\r\n-}\r\n-\r\n-/**\r\n- * Renderiza a lista de próximos vencimentos no dashboard.\r\n- * @param {Array} payments - A lista de pagamentos vinda da API.\r\n- */\r\n-function renderUpcomingPayments(payments) {\r\n-    if (!upcomingPaymentsList || !noUpcomingPaymentsMessage) return;\r\n-\r\n-    upcomingPaymentsList.innerHTML = ''; // Limpa a lista\r\n-\r\n-    if (payments.length === 0) {\r\n-        upcomingPaymentsList.appendChild(noUpcomingPaymentsMessage);\r\n-        noUpcomingPaymentsMessage.classList.remove('hidden');\r\n-    } else {\r\n-        noUpcomingPaymentsMessage.classList.add('hidden');\r\n-        const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-        payments.forEach(payment => {\r\n-            const dueDate = new Date(payment.dueDate + 'T00:00:00');\r\n-            const formattedDate = dueDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });\r\n-\r\n-            const paymentHtml = `\r\n-                <div class=\"flex items-center justify-between bg-gray-700/50 p-3 rounded-md\">\r\n-                    <div>\r\n-                        <p class=\"font-medium text-white\">${payment.billName} (${payment.parcelNumber}ª)</p>\r\n-                        <p class=\"text-sm text-gray-400\">Vence em: ${formattedDate}</p>\r\n-                    </div>\r\n-                    <p class=\"font-semibold text-lg text-yellow-400\">${formatCurrency(payment.amount)}</p>\r\n-                </div>\r\n-            `;\r\n-            upcomingPaymentsList.insertAdjacentHTML('beforeend', paymentHtml);\r\n-        });\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de barras horizontais com as 5 maiores despesas por categoria.\r\n- * @param {Array} data - Os dados de despesas vindos da API.\r\n- */\r\n-function renderTopExpensesChart(data) {\r\n-    const canvas = document.getElementById('topExpensesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    // Destrói o gráfico anterior, se existir, para evitar sobreposições\r\n-    if (topExpensesChart) {\r\n-        topExpensesChart.destroy();\r\n-    }\r\n-    \r\n-    // 1. Ordena os dados do maior para o menor\r\n-    const sortedData = [...data].sort((a, b) => b.totalAmount - a.totalAmount);\r\n-    \r\n-    // 2. Pega apenas nos 5 primeiros resultados\r\n-    const top5Data = sortedData.slice(0, 5);\r\n-\r\n-    // 3. Prepara os dados para o Chart.js\r\n-    const labels = top5Data.map(item => item.categoryName);\r\n-    const values = top5Data.map(item => item.totalAmount);\r\n-\r\n-    topExpensesChart = new Chart(ctx, {\r\n-        type: 'bar', // Tipo de gráfico\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Total Gasto',\r\n-                data: values,\r\n-                backgroundColor: 'rgba(239, 68, 68, 0.6)', // Vermelho\r\n-                borderColor: 'rgba(239, 68, 68, 1)',\r\n-                borderWidth: 1\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            indexAxis: 'y', // <-- Isto é o que torna o gráfico horizontal!\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                x: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(156, 163, 175, 0.1)' } },\r\n-                y: { ticks: { color: '#d1d5db' }, grid: { display: false } }\r\n-            },\r\n-            plugins: {\r\n-                legend: { display: false },\r\n-                tooltip: {\r\n-                    callbacks: {\r\n-                        label: function(context) {\r\n-                            return ` Total: ${context.raw.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n-                        }\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de alteração de senha.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleChangePassword(e) {\r\n-    e.preventDefault(); // Impede o recarregamento da página\r\n-\r\n-    const currentPassword = document.getElementById('currentPassword').value;\r\n-    const newPassword = document.getElementById('newPassword').value;\r\n-    const confirmPassword = document.getElementById('confirmPassword').value;\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.changePassword({ currentPassword, newPassword, confirmPassword });\r\n-        showToast(data.message, 'success');\r\n-\r\n-        // Limpa os campos e fecha o modal após o sucesso\r\n-        changePasswordForm.reset();\r\n-        profileModal.classList.add('hidden');\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-\r\n-// =================================================================================\r\n-// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n-// =================================================================================\r\n-\r\n-document.addEventListener('DOMContentLoaded', async () => {\r\n-// --- Lógica de inicialização que estava em initializeApp() ---\r\n-const today = new Date();\r\n-currentMonth = today.getMonth();\r\n-currentYear = today.getFullYear();\r\n-\r\n-const token = localStorage.getItem('authToken');\r\n-if (!token) {\r\n-    // Se não houver token, redireciona para a página de login\r\n-    window.location.href = 'Index.html';\r\n-    return;\r\n-}\r\n-\r\n-try {\r\n-    const data = await api.checkSession();\r\n-    if (data.user.role === 'SuperAdmin') {\r\n-        isAdminLoggedIn = true;\r\n-        // Usamos import() dinâmico para evitar dependência circular\r\n-        const adminModule = await import('./admin.js');\r\n-        await adminModule.showAdminDashboard();\r\n-    } else {\r\n-        currentLoggedInUser = data.user;\r\n-        currentLoggedInCompany = data.company;\r\n-        const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n-\r\n-        if (isSubscriptionActive) {\r\n-            await showMainApp();\r\n-        } else {\r\n-            // LÓGICA DE ASSINATURA EXPIRADA / INATIVA (PREENCHIDA)\r\n-            if (currentLoggedInUser.role === 'Proprietário') {\r\n-                // Se for o dono da empresa, mostra o modal para renovar\r\n-                showSubscriptionModal(currentLoggedInCompany);\r\n-            } else {\r\n-                // Se for um funcionário/gerente, mostra o modal de acesso bloqueado\r\n-                showAccessBlockedModal();\r\n-            }\r\n-        }\r\n-    }\r\n-    } catch (error) {\r\n-        console.error(\"Erro original capturado:\", error); // <--- ADICIONE ESTA LINHA\r\n-        // Se o token for inválido ou a API falhar, o utilizador é deslogado\r\n-        showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n-        localStorage.removeItem('authToken');\r\n-        localStorage.removeItem('superAdminToken');\r\n-        setTimeout(() => {\r\n-            window.location.href = 'Index.html';\r\n-        }, 2000); \r\n-    }  finally {\r\n-    // Esconde a tela de carregamento inicial\r\n-    document.getElementById('loadingScreen').classList.add('hidden');\r\n-}\r\n-\r\n-\r\n-if (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n-if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-if (addToOrganizer) addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-\r\n-// Submissão de formulários\r\n-if (closeCompanyInfoModal) closeCompanyInfoModal.addEventListener('click', () => companyInfoModal.classList.add('hidden'));\r\n-if (saveCompanyInfoBtn) saveCompanyInfoBtn.addEventListener('click', handleSaveCompanyInfo);\r\n-if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n-if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n-if (logoutBtn) {\r\n-    logoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n-\r\n-\r\n-// Ações na App Principal\r\n-addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n-closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n-\r\n-// Ações do Modal de Edição de Boleto\r\n-closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n-saveBillBtn.addEventListener('click', handleSaveChanges);\r\n-deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n-deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n-closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n-\r\n-// Navegação do Calendário\r\n-prevMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n-    if (currentMonth === 11) currentYear--;\r\n-    // Em vez de renderizar tudo, chamamos a função que já sabe como filtrar\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-\r\n-nextMonthBtn.addEventListener('click', () => {\r\n-    currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n-    if (currentMonth === 0) currentYear++;\r\n-    // A mesma mudança aqui\r\n-    applyFiltersAndSearch(); \r\n-});\r\n-if (addCompanyCnpjInput) {\r\n-    IMask(addCompanyCnpjInput, { mask: '00.000.000/0000-00' });\r\n-}\r\n-\r\n-if (openAddBillModalBtn) {\r\n-    openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n-}\r\n-\r\n-const handleRedirectToHome = () => {\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-const handleFullLogoutAndRedirect = () => {\r\n-    localStorage.removeItem('authToken');\r\n-    localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n-};\r\n-\r\n-if (subscriptionLogoutBtn) {\r\n-    subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n-}\r\n-\r\n-if (blockedAccessLogoutBtn) {\r\n-    blockedAccessLogoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n-    });\r\n-}\r\n-\r\n-// --- Lógica do Menu de Configurações (Engrenagem) ---\r\n-if (settingsBtn) {\r\n-    settingsBtn.addEventListener('click', (e) => {\r\n-        e.stopPropagation(); // Impede que o clique feche o menu imediatamente\r\n-        settingsDropdown.classList.toggle('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Links dentro do menu dropdown\r\n-if (menuEmpresa) menuEmpresa.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCompanyInfoModal();\r\n-});\r\n-\r\n-if (menuPermissoes) menuPermissoes.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openPermissionsModal();\r\n-});\r\n-\r\n-window.addEventListener('click', () => {\r\n-    if (settingsDropdown && !settingsDropdown.classList.contains('hidden')) {\r\n-        settingsDropdown.classList.add('hidden');\r\n-    }\r\n-});\r\n-\r\n-// Link 'Gerenciar Usuários' dentro do menu dropdown\r\n-if (menuUsuarios) menuUsuarios.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openManageUsersModal(currentLoggedInCompany);\r\n-});\r\n-\r\n-// Botões do modal de gerir utilizadores\r\n-if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n-// O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n-if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n-    manageUsersModal.classList.add('hidden');\r\n-    openAddUserModal(currentLoggedInCompany._id); \r\n-});\r\n-\r\n-/**\r\n- * Lida com o clique no botão de criar/renovar assinatura.\r\n- */\r\n-async function handleCreateSubscription() {\r\n-    // Desativa o botão para evitar múltiplos cliques e informa o utilizador.\r\n-    subscriptionActionBtn.disabled = true;\r\n-    subscriptionActionBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> A gerar link de pagamento...';\r\n-\r\n-    try {\r\n-        // Chama a nossa função da API para obter o link do Mercado Pago.\r\n-        const data = await api.createSubscriptionLink();\r\n-\r\n-        // Se a API retornar um link (init_point), redireciona o utilizador.\r\n-        if (data.init_point) {\r\n-            window.location.href = data.init_point;\r\n-        } else {\r\n-            throw new Error('Link de pagamento não recebido.');\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        // Reativa o botão em caso de erro para que o utilizador possa tentar novamente.\r\n-        subscriptionActionBtn.disabled = false;\r\n-        subscriptionActionBtn.textContent = 'Tentar Novamente';\r\n-    }\r\n-}\r\n-\r\n-// Liga a função ao clique do botão.\r\n-if (subscriptionActionBtn) {\r\n-    subscriptionActionBtn.addEventListener('click', handleCreateSubscription);\r\n-}\r\n-\r\n-if (closePreviewModalBtn) {\r\n-    closePreviewModalBtn.addEventListener('click', () => {\r\n-        installmentsPreviewModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-if (nfeXmlInput) {\r\n-    nfeXmlInput.addEventListener('change', handleNfeXmlUpload);\r\n-}\r\n-\r\n-if (previewBillNameInput) {\r\n-    previewBillNameInput.addEventListener('input', (e) => {\r\n-        if (currentBill) {\r\n-            currentBill.name = e.target.value;\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Liga a função ao clique do botão\r\n-if (showFullScreenBarcodeBtn) {\r\n-    showFullScreenBarcodeBtn.addEventListener('click', handleShowFullScreenBarcode);\r\n-}\r\n-\r\n-// Listener para o campo de pesquisa\r\n-if (searchInput) {\r\n-    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Listeners para os botões de filtro\r\n-if (filterButtons) {\r\n-    filterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões\r\n-            filterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona a classe 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Aplica o filtro\r\n-            applyFiltersAndSearch();\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-if (menuCategorias) menuCategorias.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    settingsDropdown.classList.add('hidden');\r\n-    openCategoriesModal();\r\n-});\r\n-\r\n-if (closeCategoriesModal) closeCategoriesModal.addEventListener('click', () => categoriesModal.classList.add('hidden'));\r\n-\r\n-if (addCategoryForm) {\r\n-    addCategoryForm.addEventListener('submit', async (e) => {\r\n-        e.preventDefault();\r\n-        const name = newCategoryNameInput.value.trim();\r\n-        if (!name) return;\r\n-        try {\r\n-            await api.createCategory(name);\r\n-            newCategoryNameInput.value = '';\r\n-            await openCategoriesModal(); // Recarrega a lista do modal\r\n-            await populateCategoryFilter(); // <-- ADICIONAMOS ESTA LINHA para atualizar o filtro\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-if (categoryListDiv) {\r\n-    categoryListDiv.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-category-btn');\r\n-        const deleteBtn = e.target.closest('.delete-category-btn');\r\n-\r\n-        if (editBtn) {\r\n-            const { id, name } = editBtn.dataset;\r\n-            const newName = prompt(\"Editar nome da categoria:\", name);\r\n-            if (newName && newName.trim() && newName.trim() !== name) {\r\n-                await api.updateCategory(id, newName.trim());\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            const { id } = deleteBtn.dataset;\r\n-            if (confirm(\"Tem a certeza que deseja apagar esta categoria?\")) {\r\n-                await api.deleteCategory(id);\r\n-                await openCategoriesModal();\r\n-                await populateCategoryFilter();\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-if (categoryFilterSelect) {\r\n-    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-}\r\n-\r\n-// Configuração dos botões do dashboard\r\n-if (viewCalendarBtn) {\r\n-    viewCalendarBtn.addEventListener('click', () => switchView('calendar'));\r\n-}\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-if (dateRangePresetSelect) {\r\n-    dateRangePresetSelect.addEventListener('change', () => {\r\n-        const isCustom = dateRangePresetSelect.value === 'custom';\r\n-        customDateRangeInputs.classList.toggle('hidden', !isCustom);\r\n-\r\n-        // Se o utilizador selecionar uma opção que não seja \"Personalizado\",\r\n-        // o dashboard é atualizado imediatamente.\r\n-        if (!isCustom) {\r\n-            renderDashboard();\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Para o intervalo personalizado, atualizamos o dashboard\r\n-// assim que ambas as datas estiverem preenchidas.\r\n-if (startDateInput) {\r\n-    startDateInput.addEventListener('change', () => {\r\n-        if (endDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-if (endDateInput) {\r\n-    endDateInput.addEventListener('change', () => {\r\n-        if (startDateInput.value) renderDashboard();\r\n-    });\r\n-}\r\n-\r\n-if (viewDashboardBtn) {\r\n-    viewDashboardBtn.addEventListener('click', () => switchView('dashboard'));\r\n-}\r\n-\r\n-// Listeners para os botões de exportação\r\n-const handleExport = (format) => {\r\n-    // 1. Pega no período de tempo atual do filtro do dashboard\r\n-    const dateRange = getDateRangeFromPreset();\r\n-\r\n-    // 2. Constrói a query string (ex: \"?startDate=2025-07-01&endDate=2025-07-31\")\r\n-    const queryString = new URLSearchParams(dateRange).toString();\r\n-\r\n-    // 3. Monta o URL completo para o download\r\n-    const downloadUrl = `${API_BASE_URL}/api/export/${format}?${queryString}`;\r\n-    \r\n-    // 4. Abre o URL numa nova aba, o que irá acionar o download do ficheiro\r\n-    // É importante passar o token de autenticação para a API saber quem está a pedir o ficheiro.\r\n-    fetch(downloadUrl, {\r\n-        headers: {\r\n-            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n-        }\r\n-    })\r\n-    .then(res => res.blob())\r\n-    .then(blob => {\r\n-        const url = window.URL.createObjectURL(blob);\r\n-        const a = document.createElement('a');\r\n-        a.style.display = 'none';\r\n-        a.href = url;\r\n-        a.download = `relatorio-despesas.${format}`;\r\n-        document.body.appendChild(a);\r\n-        a.click();\r\n-        window.URL.revokeObjectURL(url);\r\n-        a.remove();\r\n-    }).catch(() => showToast('Erro ao exportar o ficheiro.', 'error'));\r\n-};\r\n-\r\n-if (exportCsvBtn) {\r\n-    exportCsvBtn.addEventListener('click', () => handleExport('csv'));\r\n-}\r\n-if (exportPdfBtn) {\r\n-    exportPdfBtn.addEventListener('click', () => handleVisualExportPDF());\r\n-}\r\n-\r\n-if (manualAddBtn) {\r\n-    manualAddBtn.addEventListener('click', () => switchAddBillMode('manual'));\r\n-}\r\n-if (xmlAddBtn) {\r\n-    xmlAddBtn.addEventListener('click', () => switchAddBillMode('xml'));\r\n-}\r\n-\r\n-if (csvImportBtn) {\r\n-    csvImportBtn.addEventListener('click', () => switchAddBillMode('csv'));\r\n-}\r\n-if (csvFileInput) {\r\n-    csvFileInput.addEventListener('change', handleCsvFileSelect);\r\n-}\r\n-if (importCsvBtn) {\r\n-    importCsvBtn.addEventListener('click', handleConfirmImport);\r\n-}\r\n-if (markSelectedAsPaidBtn) {\r\n-    markSelectedAsPaidBtn.addEventListener('click', handleMarkSelectedAsPaid);\r\n-}\r\n-if (selectAllVisibleBtn) {\r\n-    selectAllVisibleBtn.addEventListener('click', handleSelectAllVisible);\r\n-}\r\n-\r\n-if (deselectAllVisibleBtn) {\r\n-    deselectAllVisibleBtn.addEventListener('click', handleDeselectAll);\r\n-}\r\n-if (dashboardFilterButtons) {\r\n-    dashboardFilterButtons.forEach(button => {\r\n-        button.addEventListener('click', (e) => {\r\n-            // Remove a classe 'active' de todos os botões do dashboard\r\n-            dashboardFilterButtons.forEach(btn => btn.classList.remove('active'));\r\n-            // Adiciona 'active' apenas ao botão clicado\r\n-            e.currentTarget.classList.add('active');\r\n-            // Atualiza a variável de estado com o novo filtro\r\n-            dashboardStatusFilter = e.currentTarget.dataset.filter;\r\n-            // Renderiza o dashboard novamente com os dados filtrados\r\n-            renderDashboard();\r\n-        });\r\n-    });\r\n-}\r\n-// Abre o modal de alteração de categoria\r\n-if (changeCategoryBtn) {\r\n-    changeCategoryBtn.addEventListener('click', async () => {\r\n-        showLoader();\r\n-        // Popula o dropdown do modal com as categorias existentes\r\n-        await populateCategorySelect(batchCategorySelect);\r\n-        hideLoader();\r\n-        categoryBatchModal.classList.remove('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de cancelar no modal\r\n-if (cancelCategoryBatchBtn) {\r\n-    cancelCategoryBatchBtn.addEventListener('click', () => {\r\n-        categoryBatchModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-// Botão de confirmar a alteração\r\n-if (confirmCategoryBatchBtn) {\r\n-    confirmCategoryBatchBtn.addEventListener('click', async () => {\r\n-        const categoryId = batchCategorySelect.value;\r\n-        // Pega apenas os IDs únicos de boletos da nossa seleção\r\n-        const boletoIds = [...new Set(Array.from(selectedItems.values()))];\r\n-\r\n-        if (boletoIds.length === 0) {\r\n-            return showToast('Nenhum item selecionado.', 'info');\r\n-        }\r\n-\r\n-        showLoader();\r\n-        try {\r\n-            const response = await api.bulkUpdateCategory(boletoIds, categoryId);\r\n-            showToast(response.message, 'success');\r\n-            selectedItems.clear();\r\n-            updateMassPaymentButton();\r\n-            await updateBillsOrganizer();\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-            categoryBatchModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-}\r\n-if (openProfileModalBtn) {\r\n-    openProfileModalBtn.addEventListener('click', openProfileModal);\r\n-}\r\n-if (closeProfileModalBtn) {\r\n-    closeProfileModalBtn.addEventListener('click', () => {\r\n-        profileModal.classList.add('hidden');\r\n-    });\r\n-}\r\n-if (changePasswordForm) {\r\n-    changePasswordForm.addEventListener('submit', handleChangePassword);\r\n-}\r\n-if (resendVerificationBtn) {\r\n-    resendVerificationBtn.addEventListener('click', async () => {\r\n-        resendVerificationBtn.disabled = true;\r\n-        resendVerificationBtn.textContent = 'A reenviar...';\r\n-\r\n-        try {\r\n-            const data = await api.resendVerificationEmail();\r\n-            showToast(data.message, 'success');\r\n-        } catch (error) {\r\n-            showToast(error.message, 'error');\r\n-        } finally {\r\n-            resendVerificationBtn.disabled = false;\r\n-            resendVerificationBtn.textContent = 'Reenviar E-mail de Verificação';\r\n-        }\r\n-    });\r\n-}\r\n-if (recurrentAddBtn) {\r\n-    recurrentAddBtn.addEventListener('click', () => switchAddBillMode('recurrent'));\r\n-}\r\n-if (recurrentEditModal) {\r\n-    // Botões de escolha (Somente esta, futuras, todas)\r\n-    recurrentEditModal.querySelectorAll('.recurrent-choice-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const scope = e.currentTarget.dataset.scope;\r\n-            if (!pendingUpdateData || !selectedParcel) return;\r\n-\r\n-            recurrentEditModal.classList.add('hidden');\r\n-            showLoader();\r\n-            try {\r\n-                // Chama a nova rota da API com o escopo escolhido\r\n-                await api.bulkUpdateParcels(\r\n-                    selectedParcel.parentId, \r\n-                    selectedParcel._id, \r\n-                    pendingUpdateData.updatedParcelData, \r\n-                    scope\r\n-                );\r\n-\r\n-                // Atualiza a categoria do boleto, se foi alterada\r\n-                await api.updateBoleto(selectedParcel.parentId, pendingUpdateData.updatedBillData);\r\n-\r\n-                showToast('Parcelas atualizadas com sucesso!', 'success');\r\n-                billModal.classList.add('hidden');\r\n-                await updateBillsOrganizer();\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-                pendingUpdateData = null; // Limpa os dados pendentes\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Botão de cancelar\r\n-    cancelRecurrentEditBtn.addEventListener('click', () => {\r\n-        recurrentEditModal.classList.add('hidden');\r\n-        pendingUpdateData = null; // Limpa os dados pendentes\r\n-    });\r\n-}\r\n-if (closeAnnouncementBtn) {\r\n-    closeAnnouncementBtn.addEventListener('click', () => {\r\n-        globalAnnouncementBanner.classList.add('hidden');\r\n-    });\r\n-}\r\n-\r\n-// CHAME A NOVA FUNÇÃO AQUI\r\n-initializeDashboardDragAndDrop(); \r\n-\r\n-\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753883251899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1561,17 +1561,18 @@\n  * @returns {boolean} - Retorna true se o token do admin foi encontrado, senão false.\r\n  */\r\n export function restoreAdminSession() {\r\n     const adminToken = localStorage.getItem('superAdminToken');\r\n+\r\n+    // A verificação crucial que estava a falhar\r\n     if (!adminToken) {\r\n-        console.error(\"Token de superAdmin não encontrado para restaurar a sessão.\");\r\n+        console.error(\"Token de superAdmin não foi encontrado no localStorage.\");\r\n         return false;\r\n     }\r\n \r\n+    // Restaura o token de admin\r\n     localStorage.setItem('authToken', adminToken);\r\n     localStorage.removeItem('superAdminToken');\r\n-\r\n-    // Redefine as variáveis de estado da aplicação para o modo admin\r\n     currentLoggedInUser = null;\r\n     currentLoggedInCompany = null;\r\n     loggedInViaAdmin = false;\r\n     isAdminLoggedIn = true;\r\n"
                },
                {
                    "date": 1753883290020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1538,21 +1538,15 @@\n  * Esta função é chamada pelo painel de admin quando clica em \"Entrar\".\r\n  * @param {object} data - Os dados recebidos da API (token, user, company).\r\n  */\r\n export async function setImpersonationSession(data) {\r\n-    // Guarda o token de admin atual ANTES de o substituir\r\n     localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-\r\n-    // Define o novo token de representação\r\n     localStorage.setItem('authToken', data.token);\r\n \r\n-    // Atualiza o estado da aplicação\r\n     currentLoggedInCompany = data.company;\r\n     currentLoggedInUser = data.user;\r\n     loggedInViaAdmin = true;\r\n-    isAdminLoggedIn = false; // Importante: você não é mais admin nesta vista\r\n \r\n-    // Mostra a aplicação principal\r\n     await showMainApp();\r\n }\r\n \r\n /**\r\n@@ -1561,18 +1555,17 @@\n  * @returns {boolean} - Retorna true se o token do admin foi encontrado, senão false.\r\n  */\r\n export function restoreAdminSession() {\r\n     const adminToken = localStorage.getItem('superAdminToken');\r\n-\r\n-    // A verificação crucial que estava a falhar\r\n     if (!adminToken) {\r\n-        console.error(\"Token de superAdmin não foi encontrado no localStorage.\");\r\n+        console.error(\"Token de superAdmin não encontrado para restaurar a sessão.\");\r\n         return false;\r\n     }\r\n \r\n-    // Restaura o token de admin\r\n     localStorage.setItem('authToken', adminToken);\r\n     localStorage.removeItem('superAdminToken');\r\n+\r\n+    // Redefine as variáveis de estado da aplicação para o modo admin\r\n     currentLoggedInUser = null;\r\n     currentLoggedInCompany = null;\r\n     loggedInViaAdmin = false;\r\n     isAdminLoggedIn = true;\r\n"
                },
                {
                    "date": 1753884288838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2287,9 +2287,9 @@\n if (closeManageUsersModal) closeManageUsersModal.addEventListener('click', () => manageUsersModal.classList.add('hidden'));\r\n // O botão para adicionar utilizador dentro deste modal deve abrir o outro modal\r\n if (addCompanyUserBtn) addCompanyUserBtn.addEventListener('click', () => {\r\n     manageUsersModal.classList.add('hidden');\r\n-    openAddUserModal(currentLoggedInCompany._id); \r\n+    openAddUserModal(currentLoggedInCompany._id, false); \r\n });\r\n \r\n /**\r\n  * Lida com o clique no botão de criar/renovar assinatura.\r\n"
                },
                {
                    "date": 1753885386632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n // =================================================================================\r\n import { API_BASE_URL } from './config.js';\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-import { showAdminDashboard, openManageUsersModal, openAddUserModal } from './admin.js';\r\n \r\n \r\n // =================================================================================\r\n // ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n@@ -2660,13 +2659,16 @@\n         const success = restoreAdminSession();\r\n \r\n         if (success) {\r\n             // Se a troca foi bem sucedida, mostramos o painel de admin.\r\n-            // A função showAdminDashboard já esconde os outros ecrãs.\r\n-            showLoader(); // Mostra o spinner para uma transição suave\r\n-            // Precisamos garantir que a função showAdminDashboard está disponível aqui.\r\n-            // Se ela estiver noutro ficheiro, certifique-se de que está exportada/importada.\r\n-            await showAdminDashboard(); \r\n+            showLoader();\r\n+\r\n+            // --- INÍCIO DA CORREÇÃO ---\r\n+            // Em vez de chamar a função diretamente, importamos o módulo primeiro.\r\n+            const adminModule = await import('./admin.js');\r\n+            await adminModule.showAdminDashboard(); \r\n+            // --- FIM DA CORREÇÃO ---\r\n+\r\n             hideLoader();\r\n         } else {\r\n             // Se não encontrou o token de admin, desloga por segurança\r\n             showToast('Não foi possível restaurar a sessão de admin.', 'error');\r\n"
                },
                {
                    "date": 1753896321006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n const singleParcelDate = document.getElementById('single-parcel-date');\r\n \r\n const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n-const announcementMessage = document.getElementById('announcementBannerMessage');\r\n+const announcementMessage = document.getElementById('announcementMessage');\r\n const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n"
                },
                {
                    "date": 1753896349191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n const singleParcelDate = document.getElementById('single-parcel-date');\r\n \r\n const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n-const announcementMessage = document.getElementById('announcementMessage');\r\n+const announcementMessage = document.getElementById('announcementBannerMessage');\r\n const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n"
                },
                {
                    "date": 1753896467961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n const singleParcelDate = document.getElementById('single-parcel-date');\r\n \r\n const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n-const announcementMessage = document.getElementById('announcementBannerMessage');\r\n+const announcementMessage = document.getElementById('announcementMessage');\r\n const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n \r\n // =================================================================================\r\n // FUNÇÕES DE LÓGICA E UI\r\n"
                },
                {
                    "date": 1753897163747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1534,19 +1534,36 @@\n \r\n /**\r\n  * Define a sessão de representação do admin.\r\n  * Esta função é chamada pelo painel de admin quando clica em \"Entrar\".\r\n+ * VERSÃO CORRIGIDA: Agora verifica o estado da assinatura, tal como no login direto.\r\n  * @param {object} data - Os dados recebidos da API (token, user, company).\r\n  */\r\n export async function setImpersonationSession(data) {\r\n+    // 1. Define os tokens e os dados do utilizador representado\r\n     localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n     localStorage.setItem('authToken', data.token);\r\n \r\n     currentLoggedInCompany = data.company;\r\n     currentLoggedInUser = data.user;\r\n     loggedInViaAdmin = true;\r\n \r\n-    await showMainApp();\r\n+    // 2. ADIÇÃO DA LÓGICA DE VERIFICAÇÃO DE ASSINATURA\r\n+    // Exatamente a mesma lógica do login direto\r\n+    const subscription = currentLoggedInCompany.subscription;\r\n+    const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+\r\n+    if (isSubscriptionActive) {\r\n+        // Se a assinatura da empresa estiver ativa, mostra a aplicação principal\r\n+        await showMainApp();\r\n+    } else {\r\n+        // Caso contrário, mostra o ecrã de subscrição (para o Proprietário) ou de bloqueio (para outros)\r\n+        if (currentLoggedInUser.role === 'Proprietário') {\r\n+            showSubscriptionModal(currentLoggedInCompany);\r\n+        } else {\r\n+            showAccessBlockedModal();\r\n+        }\r\n+    }\r\n }\r\n \r\n /**\r\n  * Restaura a sessão original do SuperAdmin.\r\n"
                },
                {
                    "date": 1753897485937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2155,8 +2155,9 @@\n }\r\n \r\n try {\r\n     const data = await api.checkSession();\r\n+    console.log('DEBUG: Dados da sessão recebidos:', data);\r\n     if (data.user.role === 'SuperAdmin') {\r\n         isAdminLoggedIn = true;\r\n         // Usamos import() dinâmico para evitar dependência circular\r\n         const adminModule = await import('./admin.js');\r\n"
                },
                {
                    "date": 1753897820247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2139,8 +2139,14 @@\n \r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n+window.addEventListener('startImpersonation', (event) => {\r\n+    const sessionData = event.detail;\r\n+    if (sessionData) {\r\n+        setImpersonationSession(sessionData);\r\n+    }\r\n+});\r\n \r\n document.addEventListener('DOMContentLoaded', async () => {\r\n // --- Lógica de inicialização que estava em initializeApp() ---\r\n const today = new Date();\r\n"
                },
                {
                    "date": 1753898122848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2162,9 +2162,9 @@\n \r\n try {\r\n     const data = await api.checkSession();\r\n     console.log('DEBUG: Dados da sessão recebidos:', data);\r\n-    if (data.user.role === 'SuperAdmin') {\r\n+    if (data.user && data.user.role && data.user.role.trim() === 'SuperAdmin') {\r\n         isAdminLoggedIn = true;\r\n         // Usamos import() dinâmico para evitar dependência circular\r\n         const adminModule = await import('./admin.js');\r\n         await adminModule.showAdminDashboard();\r\n"
                },
                {
                    "date": 1753898287003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2139,15 +2139,10 @@\n \r\n // =================================================================================\r\n // EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n // =================================================================================\r\n-window.addEventListener('startImpersonation', (event) => {\r\n-    const sessionData = event.detail;\r\n-    if (sessionData) {\r\n-        setImpersonationSession(sessionData);\r\n-    }\r\n-});\r\n \r\n+\r\n document.addEventListener('DOMContentLoaded', async () => {\r\n // --- Lógica de inicialização que estava em initializeApp() ---\r\n const today = new Date();\r\n currentMonth = today.getMonth();\r\n@@ -2162,9 +2157,9 @@\n \r\n try {\r\n     const data = await api.checkSession();\r\n     console.log('DEBUG: Dados da sessão recebidos:', data);\r\n-    if (data.user && data.user.role && data.user.role.trim() === 'SuperAdmin') {\r\n+    if (data.user.role === 'SuperAdmin') {\r\n         isAdminLoggedIn = true;\r\n         // Usamos import() dinâmico para evitar dependência circular\r\n         const adminModule = await import('./admin.js');\r\n         await adminModule.showAdminDashboard();\r\n"
                },
                {
                    "date": 1753899588628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1538,31 +1538,36 @@\n  * VERSÃO CORRIGIDA: Agora verifica o estado da assinatura, tal como no login direto.\r\n  * @param {object} data - Os dados recebidos da API (token, user, company).\r\n  */\r\n export async function setImpersonationSession(data) {\r\n-    // 1. Define os tokens e os dados do utilizador representado\r\n-    localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-    localStorage.setItem('authToken', data.token);\r\n+    try {\r\n+        localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+        localStorage.setItem('authToken', data.token);\r\n \r\n-    currentLoggedInCompany = data.company;\r\n-    currentLoggedInUser = data.user;\r\n-    loggedInViaAdmin = true;\r\n+        currentLoggedInCompany = data.company;\r\n+        currentLoggedInUser = data.user;\r\n+        loggedInViaAdmin = true;\r\n \r\n-    // 2. ADIÇÃO DA LÓGICA DE VERIFICAÇÃO DE ASSINATURA\r\n-    // Exatamente a mesma lógica do login direto\r\n-    const subscription = currentLoggedInCompany.subscription;\r\n-    const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n+        const subscription = currentLoggedInCompany.subscription;\r\n+        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n \r\n-    if (isSubscriptionActive) {\r\n-        // Se a assinatura da empresa estiver ativa, mostra a aplicação principal\r\n-        await showMainApp();\r\n-    } else {\r\n-        // Caso contrário, mostra o ecrã de subscrição (para o Proprietário) ou de bloqueio (para outros)\r\n-        if (currentLoggedInUser.role === 'Proprietário') {\r\n-            showSubscriptionModal(currentLoggedInCompany);\r\n+        if (isSubscriptionActive) {\r\n+            await showMainApp(); // A função showMainApp agora vai chamar hideLoader()\r\n         } else {\r\n-            showAccessBlockedModal();\r\n+            // Se a assinatura não estiver ativa, mostramos o modal apropriado\r\n+            if (currentLoggedInUser.role === 'Proprietário') {\r\n+                showSubscriptionModal(currentLoggedInCompany);\r\n+            } else {\r\n+                showAccessBlockedModal();\r\n+            }\r\n+            // E escondemos a animação, pois o processo terminou aqui\r\n+            hideLoader();\r\n         }\r\n+    } catch (error) {\r\n+        console.error(\"Erro ao tentar representar o utilizador:\", error);\r\n+        showToast(\"Ocorreu um erro ao tentar entrar na empresa.\", \"error\");\r\n+        // Escondemos a animação em caso de erro\r\n+        hideLoader();\r\n     }\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1753899599059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -445,24 +445,31 @@\n     }\r\n }\r\n \r\n async function showMainApp() {\r\n-    hideAllScreens();\r\n-    // Removemos a classe 'hidden' e definimos o display diretamente\r\n-    mainAppContent.classList.remove('hidden');\r\n-    mainAppContent.style.display = 'block';\r\n+    try {\r\n+        hideAllScreens();\r\n+        mainAppContent.classList.remove('hidden');\r\n+        mainAppContent.style.display = 'block';\r\n \r\n-    openAddBillModalBtn.classList.remove('hidden');\r\n-    openAddBillModalBtn.style.display = 'flex'; // O botão é um flex container\r\n+        openAddBillModalBtn.classList.remove('hidden');\r\n+        openAddBillModalBtn.style.display = 'flex';\r\n \r\n-    // O resto da função continua igual...\r\n-    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n-    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n-    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n+        loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n+        backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n+        settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n \r\n-    await fetchAndDisplayAnnouncement();\r\n-    await populateCategoryFilter();\r\n-    await updateBillsOrganizer();\r\n+        await fetchAndDisplayAnnouncement();\r\n+        await populateCategoryFilter();\r\n+        await updateBillsOrganizer();\r\n+    } catch(error) {\r\n+         console.error(\"Erro ao exibir a aplicação principal:\", error);\r\n+         showToast(\"Não foi possível carregar os dados da empresa.\", \"error\");\r\n+    } finally {\r\n+        // LINHA ADICIONADA:\r\n+        // No final, quer tenha sucesso ou falhe, a animação é escondida.\r\n+        hideLoader();\r\n+    }\r\n }\r\n \r\n // Adicionar ao bloco de funções de Lógica e UI\r\n \r\n"
                },
                {
                    "date": 1753899876481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2168,14 +2168,12 @@\n }\r\n \r\n try {\r\n     const data = await api.checkSession();\r\n-    console.log('DEBUG: Dados da sessão recebidos:', data);\r\n-    if (data.user.role === 'SuperAdmin') {\r\n+    if (data.user && data.user.role && data.user.role.trim() === 'SuperAdmin') {\r\n         isAdminLoggedIn = true;\r\n-        // Usamos import() dinâmico para evitar dependência circular\r\n         const adminModule = await import('./admin.js');\r\n-        await adminModule.showAdminDashboard();\r\n+        await adminModule.showAdminDashboard(setImpersonationSession);\r\n     } else {\r\n         currentLoggedInUser = data.user;\r\n         currentLoggedInCompany = data.company;\r\n         const subscription = currentLoggedInCompany.subscription;\r\n"
                },
                {
                    "date": 1753900253805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1554,26 +1554,41 @@\n         currentLoggedInUser = data.user;\r\n         loggedInViaAdmin = true;\r\n \r\n         const subscription = currentLoggedInCompany.subscription;\r\n-        const isSubscriptionActive = subscription && subscription.status === 'active' && new Date(subscription.endDate) > new Date();\r\n \r\n+        // --- INÍCIO DA CORREÇÃO ---\r\n+\r\n+        let endDate = null;\r\n+        // Verifica se a data de expiração existe\r\n+        if (subscription && subscription.endDate) {\r\n+            // Cria um objeto de data a partir do que veio da API\r\n+            endDate = new Date(subscription.endDate);\r\n+            // Ajusta a hora para o último segundo do dia\r\n+            endDate.setHours(23, 59, 59, 999);\r\n+        }\r\n+\r\n+        // A nova verificação usa a data ajustada 'endDate'\r\n+        const isSubscriptionActive = subscription &&\r\n+                                     subscription.status === 'active' &&\r\n+                                     endDate && // Garante que a data é válida\r\n+                                     endDate > new Date();\r\n+\r\n+        // --- FIM DA CORREÇÃO ---\r\n+\r\n         if (isSubscriptionActive) {\r\n-            await showMainApp(); // A função showMainApp agora vai chamar hideLoader()\r\n+            await showMainApp();\r\n         } else {\r\n-            // Se a assinatura não estiver ativa, mostramos o modal apropriado\r\n             if (currentLoggedInUser.role === 'Proprietário') {\r\n                 showSubscriptionModal(currentLoggedInCompany);\r\n             } else {\r\n                 showAccessBlockedModal();\r\n             }\r\n-            // E escondemos a animação, pois o processo terminou aqui\r\n             hideLoader();\r\n         }\r\n     } catch (error) {\r\n         console.error(\"Erro ao tentar representar o utilizador:\", error);\r\n         showToast(\"Ocorreu um erro ao tentar entrar na empresa.\", \"error\");\r\n-        // Escondemos a animação em caso de erro\r\n         hideLoader();\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1753900385041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1551,34 +1551,35 @@\n         localStorage.setItem('authToken', data.token);\r\n \r\n         currentLoggedInCompany = data.company;\r\n         currentLoggedInUser = data.user;\r\n-        loggedInViaAdmin = true;\r\n+        loggedInViaAdmin = true; // Esta variável é a chave!\r\n \r\n         const subscription = currentLoggedInCompany.subscription;\r\n \r\n-        // --- INÍCIO DA CORREÇÃO ---\r\n-\r\n+        // A lógica de verificação de data que corrigimos anteriormente\r\n         let endDate = null;\r\n-        // Verifica se a data de expiração existe\r\n         if (subscription && subscription.endDate) {\r\n-            // Cria um objeto de data a partir do que veio da API\r\n             endDate = new Date(subscription.endDate);\r\n-            // Ajusta a hora para o último segundo do dia\r\n             endDate.setHours(23, 59, 59, 999);\r\n         }\r\n \r\n-        // A nova verificação usa a data ajustada 'endDate'\r\n         const isSubscriptionActive = subscription &&\r\n                                      subscription.status === 'active' &&\r\n-                                     endDate && // Garante que a data é válida\r\n+                                     endDate &&\r\n                                      endDate > new Date();\r\n \r\n-        // --- FIM DA CORREÇÃO ---\r\n+        // --- INÍCIO DA ALTERAÇÃO ---\r\n \r\n-        if (isSubscriptionActive) {\r\n+        // A condição agora é: A assinatura está ativa OU é um admin a entrar?\r\n+        if (isSubscriptionActive || loggedInViaAdmin) {\r\n+            // Se qualquer uma das condições for verdadeira, mostra a aplicação.\r\n             await showMainApp();\r\n+\r\n+        // --- FIM DA ALTERAÇÃO ---\r\n+        \r\n         } else {\r\n+            // Este bloco agora só será executado para utilizadores normais com assinaturas pendentes\r\n             if (currentLoggedInUser.role === 'Proprietário') {\r\n                 showSubscriptionModal(currentLoggedInCompany);\r\n             } else {\r\n                 showAccessBlockedModal();\r\n"
                },
                {
                    "date": 1753900776232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n // =================================================================================\r\n import { API_BASE_URL } from './config.js';\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+import { openManageUsersModal } from './admin.js';\r\n \r\n \r\n // =================================================================================\r\n // ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n"
                },
                {
                    "date": 1753900851524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n // =================================================================================\r\n import { API_BASE_URL } from './config.js';\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n-import { openManageUsersModal } from './admin.js';\r\n+import { openManageUsersModal, openAddUserModal } from './admin.js';\r\n \r\n \r\n // =================================================================================\r\n // ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n"
                },
                {
                    "date": 1754054189192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1500,11 +1500,13 @@\n     }\r\n \r\n     try {\r\n         const data = await api.checkSession();\r\n-        if (data.user.role === 'SuperAdmin') {\r\n+        if (data.user && data.user.role && data.user.role.trim() === 'SuperAdmin') {\r\n             isAdminLoggedIn = true;\r\n-            await showAdminDashboard();\r\n+            window.impersonationCallback = setImpersonationSession;\r\n+            const adminModule = await import('./admin.js');\r\n+            await adminModule.showAdminDashboard();\r\n         } else {\r\n             currentLoggedInUser = data.user;\r\n             currentLoggedInCompany = data.company;\r\n             const subscription = currentLoggedInCompany.subscription;\r\n"
                },
                {
                    "date": 1754055014112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1502,11 +1502,10 @@\n     try {\r\n         const data = await api.checkSession();\r\n         if (data.user && data.user.role && data.user.role.trim() === 'SuperAdmin') {\r\n             isAdminLoggedIn = true;\r\n-            window.impersonationCallback = setImpersonationSession;\r\n             const adminModule = await import('./admin.js');\r\n-            await adminModule.showAdminDashboard();\r\n+            await adminModule.showAdminDashboard(setImpersonationSession); \r\n         } else {\r\n             currentLoggedInUser = data.user;\r\n             currentLoggedInCompany = data.company;\r\n             const subscription = currentLoggedInCompany.subscription;\r\n"
                },
                {
                    "date": 1754055491090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2708,13 +2708,17 @@\n         if (success) {\r\n             // Se a troca foi bem sucedida, mostramos o painel de admin.\r\n             showLoader();\r\n \r\n-            // --- INÍCIO DA CORREÇÃO ---\r\n-            // Em vez de chamar a função diretamente, importamos o módulo primeiro.\r\n             const adminModule = await import('./admin.js');\r\n-            await adminModule.showAdminDashboard(); \r\n-            // --- FIM DA CORREÇÃO ---\r\n+            \r\n+            // ======================================================================\r\n+            // A LINHA ABAIXO É A CAUSA DO BUG\r\n+            // await adminModule.showAdminDashboard(); \r\n+            \r\n+            // CORRIJA PARA A LINHA ABAIXO, PASSANDO A FUNÇÃO NOVAMENTE\r\n+            await adminModule.showAdminDashboard(setImpersonationSession);\r\n+            // ======================================================================\r\n \r\n             hideLoader();\r\n         } else {\r\n             // Se não encontrou o token de admin, desloga por segurança\r\n"
                },
                {
                    "date": 1754055551873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2705,31 +2705,18 @@\n         // Chama a função que troca os tokens de volta\r\n         const success = restoreAdminSession();\r\n \r\n         if (success) {\r\n-            // Se a troca foi bem sucedida, mostramos o painel de admin.\r\n             showLoader();\r\n-\r\n             const adminModule = await import('./admin.js');\r\n-            \r\n-            // ======================================================================\r\n-            // A LINHA ABAIXO É A CAUSA DO BUG\r\n-            // await adminModule.showAdminDashboard(); \r\n-            \r\n-            // CORRIJA PARA A LINHA ABAIXO, PASSANDO A FUNÇÃO NOVAMENTE\r\n             await adminModule.showAdminDashboard(setImpersonationSession);\r\n-            // ======================================================================\r\n-\r\n             hideLoader();\r\n         } else {\r\n-            // Se não encontrou o token de admin, desloga por segurança\r\n             showToast('Não foi possível restaurar a sessão de admin.', 'error');\r\n             logout();\r\n         }\r\n     });\r\n }\r\n \r\n-// CHAME A NOVA FUNÇÃO AQUI\r\n initializeDashboardDragAndDrop(); \r\n \r\n-\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754066651840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,12 +447,22 @@\n }\r\n \r\n async function showMainApp() {\r\n     try {\r\n-        hideAllScreens();\r\n-        mainAppContent.classList.remove('hidden');\r\n-        mainAppContent.style.display = 'block';\r\n+        // --- NOVA ABORDAGEM DIRETA ---\r\n+        const adminPanel = document.getElementById('adminDashboardScreen');\r\n+        const mainPanel = document.getElementById('mainAppContent');\r\n \r\n+        // Escondemos explicitamente o painel de admin\r\n+        if (adminPanel) {\r\n+            adminPanel.style.display = 'none';\r\n+        }\r\n+        // E mostramos explicitamente o painel da aplicação principal\r\n+        if (mainPanel) {\r\n+            mainPanel.style.display = 'block';\r\n+        }\r\n+        // --- FIM DA NOVA ABORDAGEM ---\r\n+\r\n         openAddBillModalBtn.classList.remove('hidden');\r\n         openAddBillModalBtn.style.display = 'flex';\r\n \r\n         loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n@@ -465,10 +475,8 @@\n     } catch(error) {\r\n          console.error(\"Erro ao exibir a aplicação principal:\", error);\r\n          showToast(\"Não foi possível carregar os dados da empresa.\", \"error\");\r\n     } finally {\r\n-        // LINHA ADICIONADA:\r\n-        // No final, quer tenha sucesso ou falhe, a animação é escondida.\r\n         hideLoader();\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1754329211822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2723,8 +2723,11 @@\n             logout();\r\n         }\r\n     });\r\n }\r\n+if (billForm) {\r\n+    billForm.addEventListener('submit', handleCalculateInstallments);\r\n+}\r\n \r\n initializeDashboardDragAndDrop(); \r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754329433499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -423,9 +423,9 @@\n     try {\r\n         userBoletos = await api.getBoletos();\r\n \r\n         if (!userBoletos || userBoletos.length === 0) {\r\n-            console.log(\"AVISO: Nenhum boleto foi encontrado na base de dados para esta empresa.\");\r\n+            //console.log(\"AVISO: Nenhum boleto foi encontrado na base de dados para esta empresa.\");\r\n         }\r\n \r\n         const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n         const totalBillsSpan = document.getElementById('totalBills');\r\n"
                },
                {
                    "date": 1754411347698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1910,9 +1910,9 @@\n  * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n  */\r\n function applyFiltersAndSearch() {\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.querySelector('.filter-btn.active').dataset.filter;\r\n+    const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n     const selectedCategoryId = categoryFilterSelect.value;\r\n \r\n     let filteredBoletos = userBoletos.filter(bill => {\r\n         // Filtro de pesquisa\r\n@@ -2726,8 +2726,20 @@\n }\r\n if (billForm) {\r\n     billForm.addEventListener('submit', handleCalculateInstallments);\r\n }\r\n+const toggleFiltersBtn = document.getElementById('toggleFiltersBtn');\r\n+const filterContainer = document.getElementById('filter-container');\r\n+const filterChevron = document.getElementById('filter-chevron');\r\n \r\n+if (toggleFiltersBtn && filterContainer && filterChevron) {\r\n+    toggleFiltersBtn.addEventListener('click', () => {\r\n+        // Mostra ou esconde o container dos filtros\r\n+        filterContainer.classList.toggle('hidden');\r\n+        // Gira a seta para indicar o estado (aberto/fechado)\r\n+        filterChevron.classList.toggle('rotate-180');\r\n+    });\r\n+}\r\n+\r\n initializeDashboardDragAndDrop(); \r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754411532219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n let currentBill = {};\r\n let selectedParcel = null;\r\n let userBoletos = [];\r\n let currentMonth, currentYear;\r\n+let currentDailyViewDate;\r\n let expensesPieChart = null;\r\n let expensesBarChart = null;\r\n let topExpensesChart = null;\r\n let parsedCsvData = [];\r\n"
                },
                {
                    "date": 1754411556548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1286,8 +1286,78 @@\n         console.error(\"Não foi possível buscar o anúncio:\", error);\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Renderiza a visualização de lista diária para dispositivos móveis.\r\n+ * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n+ */\r\n+function renderDailyView(boletosToRender = userBoletos) {\r\n+    const listContainer = document.getElementById('dailyBillsList');\r\n+    const dateDisplay = document.getElementById('currentDailyDate');\r\n+    const noBillsMessage = document.getElementById('noDailyBills');\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+\r\n+    // Garante que os elementos HTML existem antes de continuar\r\n+    if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n+        return;\r\n+    }\r\n+\r\n+    // Atualiza o texto da data que está sendo exibida\r\n+    dateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n+        weekday: 'long',\r\n+        day: '2-digit',\r\n+        month: 'long'\r\n+    });\r\n+\r\n+    // Filtra para encontrar apenas as parcelas que vencem no dia selecionado\r\n+    const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n+    const parcelsForDay = boletosToRender\r\n+        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel, parentBill: bill })))\r\n+        .filter(parcel => parcel.dueDate === dateStr);\r\n+\r\n+    listContainer.innerHTML = ''; // Limpa a lista anterior\r\n+\r\n+    if (parcelsForDay.length === 0) {\r\n+        noBillsMessage.classList.remove('hidden');\r\n+    } else {\r\n+        noBillsMessage.classList.add('hidden');\r\n+        parcelsForDay.forEach(parcel => {\r\n+            const bill = parcel.parentBill;\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            const isOverdue = !parcel.paid && dueDate < today;\r\n+            let statusClass = 'border-l-4 border-indigo-500'; // Padrão: A vencer\r\n+            \r\n+            if (parcel.paid) {\r\n+                statusClass = 'border-l-4 border-green-500'; // Pago\r\n+            } else if (isOverdue) {\r\n+                statusClass = 'border-l-4 border-red-500'; // Vencido\r\n+            }\r\n+\r\n+            const parcelElementHTML = `\r\n+                <div class=\"bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}\">\r\n+                    <div class=\"flex-1 min-w-0\">\r\n+                        <p class=\"text-white font-semibold truncate\">${bill.name} (${parcel.number}ª)</p>\r\n+                        <p class=\"text-sm text-gray-400\">${bill.category ? bill.category.name : 'Sem Categoria'}</p>\r\n+                    </div>\r\n+                    <div class=\"text-right ml-4\">\r\n+                        <p class=\"text-lg font-bold text-white\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</p>\r\n+                        <p class=\"text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}\">\r\n+                            ${parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar'}\r\n+                        </p>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            const parcelElement = document.createElement('div');\r\n+            parcelElement.innerHTML = parcelElementHTML;\r\n+            parcelElement.firstElementChild.addEventListener('click', () => openBillModal(bill, parcel));\r\n+            \r\n+            listContainer.appendChild(parcelElement);\r\n+        });\r\n+    }\r\n+}\r\n+\r\n // =================================================================================\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n // =================================================================================\r\n"
                },
                {
                    "date": 1754411637385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,8 +439,9 @@\n         }\r\n \r\n         updateMonthlySummary();\r\n         renderCalendar();\r\n+        renderDailyView();\r\n \r\n     } catch (error) {\r\n         console.error(\"ERRO GRAVE DENTRO DE updateBillsOrganizer:\", error);\r\n         showToast(error.message, 'error');\r\n@@ -2008,8 +2009,9 @@\n         });\r\n     });\r\n \r\n     renderCalendar(filteredBoletos);\r\n+    renderDailyView(filteredBoletos);\r\n     updateMonthlySummary(filteredBoletos);\r\n }\r\n \r\n /**\r\n@@ -2809,8 +2811,28 @@\n         // Gira a seta para indicar o estado (aberto/fechado)\r\n         filterChevron.classList.toggle('rotate-180');\r\n     });\r\n }\r\n+currentDailyViewDate = new Date();\r\n+currentDailyViewDate.setHours(0, 0, 0, 0); // Normaliza para o início do dia\r\n \r\n+// --- Conecta os botões de navegação da visão diária ---\r\n+const prevDayBtn = document.getElementById('prevDay');\r\n+const nextDayBtn = document.getElementById('nextDay');\r\n+\r\n+if (prevDayBtn) {\r\n+    prevDayBtn.addEventListener('click', () => {\r\n+        currentDailyViewDate.setDate(currentDailyViewDate.getDate() - 1);\r\n+        applyFiltersAndSearch(); // Re-renderiza a lista com a nova data\r\n+    });\r\n+}\r\n+\r\n+if (nextDayBtn) {\r\n+    nextDayBtn.addEventListener('click', () => {\r\n+        currentDailyViewDate.setDate(currentDailyViewDate.getDate() + 1);\r\n+        applyFiltersAndSearch(); // Re-renderiza a lista com a nova data\r\n+    });\r\n+}\r\n+\r\n initializeDashboardDragAndDrop(); \r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754411745308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n let currentBill = {};\r\n let selectedParcel = null;\r\n let userBoletos = [];\r\n let currentMonth, currentYear;\r\n-let currentDailyViewDate;\r\n+let currentDailyViewDate = new Date();\r\n let expensesPieChart = null;\r\n let expensesBarChart = null;\r\n let topExpensesChart = null;\r\n let parsedCsvData = [];\r\n"
                },
                {
                    "date": 1754412796597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2821,18 +2821,52 @@\n \r\n if (prevDayBtn) {\r\n     prevDayBtn.addEventListener('click', () => {\r\n         currentDailyViewDate.setDate(currentDailyViewDate.getDate() - 1);\r\n-        applyFiltersAndSearch(); // Re-renderiza a lista com a nova data\r\n+        // Chamamos diretamente a função que renderiza a visão diária.\r\n+        // Usamos a lista de boletos já filtrada, se houver, ou a lista completa.\r\n+        renderDailyView(getFilteredBoletos()); \r\n     });\r\n }\r\n \r\n if (nextDayBtn) {\r\n     nextDayBtn.addEventListener('click', () => {\r\n         currentDailyViewDate.setDate(currentDailyViewDate.getDate() + 1);\r\n-        applyFiltersAndSearch(); // Re-renderiza a lista com a nova data\r\n+        // A mesma lógica aqui.\r\n+        renderDailyView(getFilteredBoletos());\r\n     });\r\n }\r\n \r\n+/**\r\n+ * Função auxiliar para obter a lista de boletos já filtrada.\r\n+ * Se nenhum filtro estiver ativo, retorna a lista completa.\r\n+ */\r\n+function getFilteredBoletos() {\r\n+    const searchTerm = searchInput.value.toLowerCase();\r\n+    const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n+    \r\n+    // Se não houver filtros ativos, retorna a lista completa para melhor performance.\r\n+    if (searchTerm === '' && activeStatusFilter === 'all' && selectedCategoryId === 'all') {\r\n+        return userBoletos;\r\n+    }\r\n+    \r\n+    // Se houver filtros, aplica-os. (Esta é a mesma lógica de applyFiltersAndSearch)\r\n+    return userBoletos.filter(bill => {\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) || (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+        if (!matchesSearch || !matchesCategory) return false;\r\n+        if (activeStatusFilter === 'all') return true;\r\n+        const today = new Date(); today.setHours(0, 0, 0, 0);\r\n+        return bill.parcels.some(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeStatusFilter === 'paid') return parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            return false;\r\n+        });\r\n+    });\r\n+}\r\n+\r\n initializeDashboardDragAndDrop(); \r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754412838176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1356,8 +1356,38 @@\n             listContainer.appendChild(parcelElement);\r\n         });\r\n     }\r\n }\r\n+/**\r\n+ * Função auxiliar para obter a lista de boletos já filtrada.\r\n+ * Se nenhum filtro estiver ativo, retorna a lista completa.\r\n+ */\r\n+function getFilteredBoletos() {\r\n+    const searchTerm = searchInput.value.toLowerCase();\r\n+    const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n+    \r\n+    // Se não houver filtros ativos, retorna a lista completa para melhor performance.\r\n+    if (searchTerm === '' && activeStatusFilter === 'all' && selectedCategoryId === 'all') {\r\n+        return userBoletos;\r\n+    }\r\n+    \r\n+    // Se houver filtros, aplica-os. (Esta é a mesma lógica de applyFiltersAndSearch)\r\n+    return userBoletos.filter(bill => {\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) || (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+        if (!matchesSearch || !matchesCategory) return false;\r\n+        if (activeStatusFilter === 'all') return true;\r\n+        const today = new Date(); today.setHours(0, 0, 0, 0);\r\n+        return bill.parcels.some(parcel => {\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeStatusFilter === 'paid') return parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            return false;\r\n+        });\r\n+    });\r\n+}\r\n \r\n // =================================================================================\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n@@ -2835,38 +2865,9 @@\n         renderDailyView(getFilteredBoletos());\r\n     });\r\n }\r\n \r\n-/**\r\n- * Função auxiliar para obter a lista de boletos já filtrada.\r\n- * Se nenhum filtro estiver ativo, retorna a lista completa.\r\n- */\r\n-function getFilteredBoletos() {\r\n-    const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n-    const selectedCategoryId = categoryFilterSelect.value;\r\n-    \r\n-    // Se não houver filtros ativos, retorna a lista completa para melhor performance.\r\n-    if (searchTerm === '' && activeStatusFilter === 'all' && selectedCategoryId === 'all') {\r\n-        return userBoletos;\r\n-    }\r\n-    \r\n-    // Se houver filtros, aplica-os. (Esta é a mesma lógica de applyFiltersAndSearch)\r\n-    return userBoletos.filter(bill => {\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) || (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-        if (!matchesSearch || !matchesCategory) return false;\r\n-        if (activeStatusFilter === 'all') return true;\r\n-        const today = new Date(); today.setHours(0, 0, 0, 0);\r\n-        return bill.parcels.some(parcel => {\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n-            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n-            return false;\r\n-        });\r\n-    });\r\n-}\r\n \r\n+\r\n initializeDashboardDragAndDrop(); \r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754413528657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,8 @@\n const newCategoryNameInput = document.getElementById('newCategoryName');\r\n const categoryListDiv = document.getElementById('categoryList');\r\n const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n-\r\n const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n const calendarView = document.getElementById('calendarView');\r\n const dashboardView = document.getElementById('dashboardView');\r\n@@ -122,34 +121,29 @@\n const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n const exportCsvBtn = document.getElementById('export-csv-btn');\r\n const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n const dashboardFilterButtons = document.querySelectorAll('.dashboard-filter-btn');\r\n-\r\n const manualAddBtn = document.getElementById('manual-add-btn');\r\n const xmlAddBtn = document.getElementById('xml-add-btn');\r\n const manualAddForm = document.getElementById('manual-add-form');\r\n const xmlAddForm = document.getElementById('xml-add-form');\r\n-\r\n const csvImportBtn = document.getElementById('csv-import-btn');\r\n const csvImportForm = document.getElementById('csv-import-form');\r\n const csvFileInput = document.getElementById('csv-file-input');\r\n const csvPreviewArea = document.getElementById('csv-preview-area');\r\n const csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\n const csvImportSummary = document.getElementById('csv-import-summary');\r\n const importCsvBtn = document.getElementById('import-csv-btn');\r\n-\r\n const markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\n const selectedCountSpan = document.getElementById('selectedCount');\r\n const massActionsContainer = document.getElementById('massActionsContainer');\r\n const selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\n const deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n-\r\n const changeCategoryBtn = document.getElementById('changeCategoryBtn');\r\n const categoryBatchModal = document.getElementById('categoryBatchModal');\r\n const batchCategorySelect = document.getElementById('batchCategorySelect');\r\n const cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\n const confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n-\r\n const openProfileModalBtn = document.getElementById('openProfileModalBtn');\r\n const profileModal = document.getElementById('profileModal');\r\n const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\n const profileUsername = document.getElementById('profileUsername');\r\n@@ -157,15 +151,13 @@\n const profileCompany = document.getElementById('profileCompany');\r\n const changePasswordForm = document.getElementById('changePasswordForm');\r\n const verificationNotice = document.getElementById('verificationNotice');\r\n const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n-\r\n const recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\n const recurrentAddForm = document.getElementById('recurrent-add-form');\r\n const recurrentEditModal = document.getElementById('recurrentEditModal');\r\n const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n const singleParcelDate = document.getElementById('single-parcel-date');\r\n-\r\n const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n const announcementMessage = document.getElementById('announcementMessage');\r\n const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n \r\n@@ -1298,43 +1290,31 @@\n     const noBillsMessage = document.getElementById('noDailyBills');\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n \r\n-    // Garante que os elementos HTML existem antes de continuar\r\n-    if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n-        return;\r\n-    }\r\n+    if (!listContainer || !dateDisplay || !noBillsMessage) return;\r\n \r\n-    // Atualiza o texto da data que está sendo exibida\r\n     dateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n-        weekday: 'long',\r\n-        day: '2-digit',\r\n-        month: 'long'\r\n+        weekday: 'long', day: '2-digit', month: 'long'\r\n     });\r\n \r\n-    // Filtra para encontrar apenas as parcelas que vencem no dia selecionado\r\n     const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n     const parcelsForDay = boletosToRender\r\n         .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel, parentBill: bill })))\r\n         .filter(parcel => parcel.dueDate === dateStr);\r\n \r\n-    listContainer.innerHTML = ''; // Limpa a lista anterior\r\n-\r\n+    listContainer.innerHTML = ''; \r\n     if (parcelsForDay.length === 0) {\r\n         noBillsMessage.classList.remove('hidden');\r\n     } else {\r\n         noBillsMessage.classList.add('hidden');\r\n         parcelsForDay.forEach(parcel => {\r\n             const bill = parcel.parentBill;\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             const isOverdue = !parcel.paid && dueDate < today;\r\n-            let statusClass = 'border-l-4 border-indigo-500'; // Padrão: A vencer\r\n-            \r\n-            if (parcel.paid) {\r\n-                statusClass = 'border-l-4 border-green-500'; // Pago\r\n-            } else if (isOverdue) {\r\n-                statusClass = 'border-l-4 border-red-500'; // Vencido\r\n-            }\r\n+            let statusClass = 'border-l-4 border-indigo-500'; \r\n+            if (parcel.paid) statusClass = 'border-l-4 border-green-500';\r\n+            else if (isOverdue) statusClass = 'border-l-4 border-red-500';\r\n \r\n             const parcelElementHTML = `\r\n                 <div class=\"bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}\">\r\n                     <div class=\"flex-1 min-w-0\">\r\n@@ -1346,14 +1326,12 @@\n                         <p class=\"text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}\">\r\n                             ${parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar'}\r\n                         </p>\r\n                     </div>\r\n-                </div>\r\n-            `;\r\n+                </div>`;\r\n             const parcelElement = document.createElement('div');\r\n             parcelElement.innerHTML = parcelElementHTML;\r\n             parcelElement.firstElementChild.addEventListener('click', () => openBillModal(bill, parcel));\r\n-            \r\n             listContainer.appendChild(parcelElement);\r\n         });\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1754413709250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1340,28 +1340,29 @@\n  * Se nenhum filtro estiver ativo, retorna a lista completa.\r\n  */\r\n function getFilteredBoletos() {\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n+    const activeStatusFilter = statusFilterSelect.value;\r\n     const selectedCategoryId = categoryFilterSelect.value;\r\n     \r\n-    // Se não houver filtros ativos, retorna a lista completa para melhor performance.\r\n     if (searchTerm === '' && activeStatusFilter === 'all' && selectedCategoryId === 'all') {\r\n         return userBoletos;\r\n     }\r\n     \r\n-    // Se houver filtros, aplica-os. (Esta é a mesma lógica de applyFiltersAndSearch)\r\n     return userBoletos.filter(bill => {\r\n         const matchesSearch = bill.name.toLowerCase().includes(searchTerm) || (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n         const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n         if (!matchesSearch || !matchesCategory) return false;\r\n+        \r\n         if (activeStatusFilter === 'all') return true;\r\n-        const today = new Date(); today.setHours(0, 0, 0, 0);\r\n+        const today = new Date(); \r\n+        today.setHours(0, 0, 0, 0);\r\n         return bill.parcels.some(parcel => {\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            const isOverdue = !parcel.paid && dueDate < today;\r\n             if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n-            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid && !isOverdue;\r\n+            if (activeStatusFilter === 'overdue') return isOverdue;\r\n             return false;\r\n         });\r\n     });\r\n }\r\n@@ -1990,36 +1991,34 @@\n  * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n  */\r\n function applyFiltersAndSearch() {\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n+    const activeStatusFilter = statusFilterSelect.value;\r\n     const selectedCategoryId = categoryFilterSelect.value;\r\n \r\n-    let filteredBoletos = userBoletos.filter(bill => {\r\n-        // Filtro de pesquisa\r\n+    const filteredBoletos = userBoletos.filter(bill => {\r\n         const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n             (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n         if (!matchesSearch) return false;\r\n \r\n-        // Filtro de categoria\r\n         const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n         if (!matchesCategory) return false;\r\n \r\n-        // Filtro de status\r\n         if (activeStatusFilter === 'all') return true;\r\n         const today = new Date();\r\n         today.setHours(0, 0, 0, 0);\r\n         return bill.parcels.some(parcel => {\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid && !isOverdue; // Corrigido para não incluir vencidos\r\n             if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n             return false;\r\n         });\r\n     });\r\n \r\n+    // Renderiza AMBAS as visualizações com os dados filtrados\r\n     renderCalendar(filteredBoletos);\r\n-    renderDailyView(filteredBoletos);\r\n+    renderDailyView(filteredBoletos); // ESSENCIAL: Atualiza a visão mobile\r\n     updateMonthlySummary(filteredBoletos);\r\n }\r\n \r\n /**\r\n@@ -2265,8 +2264,9 @@\n // --- Lógica de inicialização que estava em initializeApp() ---\r\n const today = new Date();\r\n currentMonth = today.getMonth();\r\n currentYear = today.getFullYear();\r\n+currentDailyViewDate.setHours(0,0,0,0);\r\n \r\n const token = localStorage.getItem('authToken');\r\n if (!token) {\r\n     // Se não houver token, redireciona para a página de login\r\n@@ -2829,21 +2829,29 @@\n \r\n if (prevDayBtn) {\r\n     prevDayBtn.addEventListener('click', () => {\r\n         currentDailyViewDate.setDate(currentDailyViewDate.getDate() - 1);\r\n-        // Chamamos diretamente a função que renderiza a visão diária.\r\n-        // Usamos a lista de boletos já filtrada, se houver, ou a lista completa.\r\n-        renderDailyView(getFilteredBoletos()); \r\n+        // Apenas redesenha a lista do dia, respeitando os filtros atuais.\r\n+        renderDailyView(getFilteredBoletos());\r\n     });\r\n }\r\n \r\n if (nextDayBtn) {\r\n     nextDayBtn.addEventListener('click', () => {\r\n         currentDailyViewDate.setDate(currentDailyViewDate.getDate() + 1);\r\n-        // A mesma lógica aqui.\r\n+        // Apenas redesenha a lista do dia, respeitando os filtros atuais.\r\n         renderDailyView(getFilteredBoletos());\r\n     });\r\n }\r\n+if (searchInput) {\r\n+    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n+}\r\n+if (categoryFilterSelect) {\r\n+    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+}\r\n+if (statusFilterSelect) {\r\n+    statusFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+}\r\n \r\n \r\n \r\n initializeDashboardDragAndDrop(); \r\n"
                },
                {
                    "date": 1754413909753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n let currentBill = {};\r\n let selectedParcel = null;\r\n let userBoletos = [];\r\n let currentMonth, currentYear;\r\n-let currentDailyViewDate = new Date();\r\n+let currentDailyViewDate;\r\n let expensesPieChart = null;\r\n let expensesBarChart = null;\r\n let topExpensesChart = null;\r\n let parsedCsvData = [];\r\n@@ -107,8 +107,9 @@\n const newCategoryNameInput = document.getElementById('newCategoryName');\r\n const categoryListDiv = document.getElementById('categoryList');\r\n const modalBillCategorySelect = document.getElementById('modalBillCategorySelect');\r\n const categoryFilterSelect = document.getElementById('categoryFilterSelect');\r\n+\r\n const viewCalendarBtn = document.getElementById('viewCalendarBtn');\r\n const viewDashboardBtn = document.getElementById('viewDashboardBtn');\r\n const calendarView = document.getElementById('calendarView');\r\n const dashboardView = document.getElementById('dashboardView');\r\n@@ -121,29 +122,34 @@\n const noUpcomingPaymentsMessage = document.getElementById('no-upcoming-payments-message');\r\n const exportCsvBtn = document.getElementById('export-csv-btn');\r\n const exportPdfBtn = document.getElementById('export-pdf-btn');\r\n const dashboardFilterButtons = document.querySelectorAll('.dashboard-filter-btn');\r\n+\r\n const manualAddBtn = document.getElementById('manual-add-btn');\r\n const xmlAddBtn = document.getElementById('xml-add-btn');\r\n const manualAddForm = document.getElementById('manual-add-form');\r\n const xmlAddForm = document.getElementById('xml-add-form');\r\n+\r\n const csvImportBtn = document.getElementById('csv-import-btn');\r\n const csvImportForm = document.getElementById('csv-import-form');\r\n const csvFileInput = document.getElementById('csv-file-input');\r\n const csvPreviewArea = document.getElementById('csv-preview-area');\r\n const csvPreviewTableBody = document.getElementById('csv-preview-table-body');\r\n const csvImportSummary = document.getElementById('csv-import-summary');\r\n const importCsvBtn = document.getElementById('import-csv-btn');\r\n+\r\n const markSelectedAsPaidBtn = document.getElementById('markSelectedAsPaidBtn');\r\n const selectedCountSpan = document.getElementById('selectedCount');\r\n const massActionsContainer = document.getElementById('massActionsContainer');\r\n const selectAllVisibleBtn = document.getElementById('selectAllVisibleBtn');\r\n const deselectAllVisibleBtn = document.getElementById('deselectAllVisibleBtn');\r\n+\r\n const changeCategoryBtn = document.getElementById('changeCategoryBtn');\r\n const categoryBatchModal = document.getElementById('categoryBatchModal');\r\n const batchCategorySelect = document.getElementById('batchCategorySelect');\r\n const cancelCategoryBatchBtn = document.getElementById('cancelCategoryBatchBtn');\r\n const confirmCategoryBatchBtn = document.getElementById('confirmCategoryBatchBtn');\r\n+\r\n const openProfileModalBtn = document.getElementById('openProfileModalBtn');\r\n const profileModal = document.getElementById('profileModal');\r\n const closeProfileModalBtn = document.getElementById('closeProfileModalBtn');\r\n const profileUsername = document.getElementById('profileUsername');\r\n@@ -151,13 +157,15 @@\n const profileCompany = document.getElementById('profileCompany');\r\n const changePasswordForm = document.getElementById('changePasswordForm');\r\n const verificationNotice = document.getElementById('verificationNotice');\r\n const resendVerificationBtn = document.getElementById('resendVerificationBtn');\r\n+\r\n const recurrentAddBtn = document.getElementById('recurrent-add-btn');\r\n const recurrentAddForm = document.getElementById('recurrent-add-form');\r\n const recurrentEditModal = document.getElementById('recurrentEditModal');\r\n const cancelRecurrentEditBtn = document.getElementById('cancelRecurrentEditBtn');\r\n const singleParcelDate = document.getElementById('single-parcel-date');\r\n+\r\n const globalAnnouncementBanner = document.getElementById('globalAnnouncementBanner');\r\n const announcementMessage = document.getElementById('announcementMessage');\r\n const closeAnnouncementBtn = document.getElementById('closeAnnouncementBtn');\r\n \r\n@@ -431,9 +439,8 @@\n         }\r\n \r\n         updateMonthlySummary();\r\n         renderCalendar();\r\n-        renderDailyView();\r\n \r\n     } catch (error) {\r\n         console.error(\"ERRO GRAVE DENTRO DE updateBillsOrganizer:\", error);\r\n         showToast(error.message, 'error');\r\n@@ -1290,31 +1297,43 @@\n     const noBillsMessage = document.getElementById('noDailyBills');\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n \r\n-    if (!listContainer || !dateDisplay || !noBillsMessage) return;\r\n+    // Garante que os elementos HTML existem antes de continuar\r\n+    if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n+        return;\r\n+    }\r\n \r\n+    // Atualiza o texto da data que está sendo exibida\r\n     dateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n-        weekday: 'long', day: '2-digit', month: 'long'\r\n+        weekday: 'long',\r\n+        day: '2-digit',\r\n+        month: 'long'\r\n     });\r\n \r\n+    // Filtra para encontrar apenas as parcelas que vencem no dia selecionado\r\n     const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n     const parcelsForDay = boletosToRender\r\n         .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel, parentBill: bill })))\r\n         .filter(parcel => parcel.dueDate === dateStr);\r\n \r\n-    listContainer.innerHTML = ''; \r\n+    listContainer.innerHTML = ''; // Limpa a lista anterior\r\n+\r\n     if (parcelsForDay.length === 0) {\r\n         noBillsMessage.classList.remove('hidden');\r\n     } else {\r\n         noBillsMessage.classList.add('hidden');\r\n         parcelsForDay.forEach(parcel => {\r\n             const bill = parcel.parentBill;\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             const isOverdue = !parcel.paid && dueDate < today;\r\n-            let statusClass = 'border-l-4 border-indigo-500'; \r\n-            if (parcel.paid) statusClass = 'border-l-4 border-green-500';\r\n-            else if (isOverdue) statusClass = 'border-l-4 border-red-500';\r\n+            let statusClass = 'border-l-4 border-indigo-500'; // Padrão: A vencer\r\n+            \r\n+            if (parcel.paid) {\r\n+                statusClass = 'border-l-4 border-green-500'; // Pago\r\n+            } else if (isOverdue) {\r\n+                statusClass = 'border-l-4 border-red-500'; // Vencido\r\n+            }\r\n \r\n             const parcelElementHTML = `\r\n                 <div class=\"bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}\">\r\n                     <div class=\"flex-1 min-w-0\">\r\n@@ -1326,47 +1345,18 @@\n                         <p class=\"text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}\">\r\n                             ${parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar'}\r\n                         </p>\r\n                     </div>\r\n-                </div>`;\r\n+                </div>\r\n+            `;\r\n             const parcelElement = document.createElement('div');\r\n             parcelElement.innerHTML = parcelElementHTML;\r\n             parcelElement.firstElementChild.addEventListener('click', () => openBillModal(bill, parcel));\r\n+            \r\n             listContainer.appendChild(parcelElement);\r\n         });\r\n     }\r\n }\r\n-/**\r\n- * Função auxiliar para obter a lista de boletos já filtrada.\r\n- * Se nenhum filtro estiver ativo, retorna a lista completa.\r\n- */\r\n-function getFilteredBoletos() {\r\n-    const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = statusFilterSelect.value;\r\n-    const selectedCategoryId = categoryFilterSelect.value;\r\n-    \r\n-    if (searchTerm === '' && activeStatusFilter === 'all' && selectedCategoryId === 'all') {\r\n-        return userBoletos;\r\n-    }\r\n-    \r\n-    return userBoletos.filter(bill => {\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) || (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-        if (!matchesSearch || !matchesCategory) return false;\r\n-        \r\n-        if (activeStatusFilter === 'all') return true;\r\n-        const today = new Date(); \r\n-        today.setHours(0, 0, 0, 0);\r\n-        return bill.parcels.some(parcel => {\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            const isOverdue = !parcel.paid && dueDate < today;\r\n-            if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid && !isOverdue;\r\n-            if (activeStatusFilter === 'overdue') return isOverdue;\r\n-            return false;\r\n-        });\r\n-    });\r\n-}\r\n \r\n // =================================================================================\r\n // =================================================================================\r\n // EVENT HANDLERS - Funções que respondem aos eventos\r\n@@ -1991,34 +1981,35 @@\n  * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n  */\r\n function applyFiltersAndSearch() {\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = statusFilterSelect.value;\r\n+    const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n     const selectedCategoryId = categoryFilterSelect.value;\r\n \r\n-    const filteredBoletos = userBoletos.filter(bill => {\r\n+    let filteredBoletos = userBoletos.filter(bill => {\r\n+        // Filtro de pesquisa\r\n         const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n             (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n         if (!matchesSearch) return false;\r\n \r\n+        // Filtro de categoria\r\n         const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n         if (!matchesCategory) return false;\r\n \r\n+        // Filtro de status\r\n         if (activeStatusFilter === 'all') return true;\r\n         const today = new Date();\r\n         today.setHours(0, 0, 0, 0);\r\n         return bill.parcels.some(parcel => {\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid && !isOverdue; // Corrigido para não incluir vencidos\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n             if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n             return false;\r\n         });\r\n     });\r\n \r\n-    // Renderiza AMBAS as visualizações com os dados filtrados\r\n     renderCalendar(filteredBoletos);\r\n-    renderDailyView(filteredBoletos); // ESSENCIAL: Atualiza a visão mobile\r\n     updateMonthlySummary(filteredBoletos);\r\n }\r\n \r\n /**\r\n@@ -2264,9 +2255,8 @@\n // --- Lógica de inicialização que estava em initializeApp() ---\r\n const today = new Date();\r\n currentMonth = today.getMonth();\r\n currentYear = today.getFullYear();\r\n-currentDailyViewDate.setHours(0,0,0,0);\r\n \r\n const token = localStorage.getItem('authToken');\r\n if (!token) {\r\n     // Se não houver token, redireciona para a página de login\r\n@@ -2819,41 +2809,9 @@\n         // Gira a seta para indicar o estado (aberto/fechado)\r\n         filterChevron.classList.toggle('rotate-180');\r\n     });\r\n }\r\n-currentDailyViewDate = new Date();\r\n-currentDailyViewDate.setHours(0, 0, 0, 0); // Normaliza para o início do dia\r\n \r\n-// --- Conecta os botões de navegação da visão diária ---\r\n-const prevDayBtn = document.getElementById('prevDay');\r\n-const nextDayBtn = document.getElementById('nextDay');\r\n \r\n-if (prevDayBtn) {\r\n-    prevDayBtn.addEventListener('click', () => {\r\n-        currentDailyViewDate.setDate(currentDailyViewDate.getDate() - 1);\r\n-        // Apenas redesenha a lista do dia, respeitando os filtros atuais.\r\n-        renderDailyView(getFilteredBoletos());\r\n-    });\r\n-}\r\n-\r\n-if (nextDayBtn) {\r\n-    nextDayBtn.addEventListener('click', () => {\r\n-        currentDailyViewDate.setDate(currentDailyViewDate.getDate() + 1);\r\n-        // Apenas redesenha a lista do dia, respeitando os filtros atuais.\r\n-        renderDailyView(getFilteredBoletos());\r\n-    });\r\n-}\r\n-if (searchInput) {\r\n-    searchInput.addEventListener('input', applyFiltersAndSearch);\r\n-}\r\n-if (categoryFilterSelect) {\r\n-    categoryFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-}\r\n-if (statusFilterSelect) {\r\n-    statusFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n-}\r\n-\r\n-\r\n-\r\n initializeDashboardDragAndDrop(); \r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754414347515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2255,8 +2255,9 @@\n // --- Lógica de inicialização que estava em initializeApp() ---\r\n const today = new Date();\r\n currentMonth = today.getMonth();\r\n currentYear = today.getFullYear();\r\n+currentDailyViewDate = today;\r\n \r\n const token = localStorage.getItem('authToken');\r\n if (!token) {\r\n     // Se não houver token, redireciona para a página de login\r\n"
                },
                {
                    "date": 1754414423293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2810,8 +2810,16 @@\n         // Gira a seta para indicar o estado (aberto/fechado)\r\n         filterChevron.classList.toggle('rotate-180');\r\n     });\r\n }\r\n+const adminNavSelect = document.getElementById('admin-nav-select');\r\n+if (adminNavSelect) {\r\n+    adminNavSelect.addEventListener('change', (e) => {\r\n+        // Chama a função que já usas para trocar de vista,\r\n+        // passando o valor da opção selecionada.\r\n+        switchAdminView(e.target.value);\r\n+    });\r\n+}\r\n \r\n \r\n initializeDashboardDragAndDrop(); \r\n \r\n"
                },
                {
                    "date": 1754414690260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2810,17 +2810,10 @@\n         // Gira a seta para indicar o estado (aberto/fechado)\r\n         filterChevron.classList.toggle('rotate-180');\r\n     });\r\n }\r\n-const adminNavSelect = document.getElementById('admin-nav-select');\r\n-if (adminNavSelect) {\r\n-    adminNavSelect.addEventListener('change', (e) => {\r\n-        // Chama a função que já usas para trocar de vista,\r\n-        // passando o valor da opção selecionada.\r\n-        switchAdminView(e.target.value);\r\n-    });\r\n-}\r\n \r\n \r\n+\r\n initializeDashboardDragAndDrop(); \r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754415023172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2810,10 +2810,31 @@\n         // Gira a seta para indicar o estado (aberto/fechado)\r\n         filterChevron.classList.toggle('rotate-180');\r\n     });\r\n }\r\n+const prevDayBtn = document.getElementById('prevDay');\r\n+const nextDayBtn = document.getElementById('nextDay');\r\n \r\n+if (prevDayBtn) {\r\n+    prevDayBtn.addEventListener('click', () => {\r\n+        // Subtrai um dia da data atual da vista diária\r\n+        currentDailyViewDate.setDate(currentDailyViewDate.getDate() - 1);\r\n \r\n+        // Renderiza novamente a vista diária com a nova data\r\n+        renderDailyView(); \r\n+    });\r\n+}\r\n \r\n+if (nextDayBtn) {\r\n+    nextDayBtn.addEventListener('click', () => {\r\n+        // Adiciona um dia à data atual da vista diária\r\n+        currentDailyViewDate.setDate(currentDailyViewDate.getDate() + 1);\r\n+\r\n+        // Renderiza novamente a vista diária com a nova data\r\n+        renderDailyView();\r\n+    });\r\n+}\r\n+\r\n+\r\n initializeDashboardDragAndDrop(); \r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754415189829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2810,31 +2810,10 @@\n         // Gira a seta para indicar o estado (aberto/fechado)\r\n         filterChevron.classList.toggle('rotate-180');\r\n     });\r\n }\r\n-const prevDayBtn = document.getElementById('prevDay');\r\n-const nextDayBtn = document.getElementById('nextDay');\r\n \r\n-if (prevDayBtn) {\r\n-    prevDayBtn.addEventListener('click', () => {\r\n-        // Subtrai um dia da data atual da vista diária\r\n-        currentDailyViewDate.setDate(currentDailyViewDate.getDate() - 1);\r\n \r\n-        // Renderiza novamente a vista diária com a nova data\r\n-        renderDailyView(); \r\n-    });\r\n-}\r\n \r\n-if (nextDayBtn) {\r\n-    nextDayBtn.addEventListener('click', () => {\r\n-        // Adiciona um dia à data atual da vista diária\r\n-        currentDailyViewDate.setDate(currentDailyViewDate.getDate() + 1);\r\n-\r\n-        // Renderiza novamente a vista diária com a nova data\r\n-        renderDailyView();\r\n-    });\r\n-}\r\n-\r\n-\r\n initializeDashboardDragAndDrop(); \r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754415845189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2810,8 +2810,12 @@\n         // Gira a seta para indicar o estado (aberto/fechado)\r\n         filterChevron.classList.toggle('rotate-180');\r\n     });\r\n }\r\n+const statusFilterSelect = document.getElementById('statusFilterSelect');\r\n+if (statusFilterSelect) {\r\n+    statusFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n+}\r\n \r\n \r\n \r\n initializeDashboardDragAndDrop(); \r\n"
                },
                {
                    "date": 1754416178820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,8 +439,9 @@\n         }\r\n \r\n         updateMonthlySummary();\r\n         renderCalendar();\r\n+        renderDailyView();\r\n \r\n     } catch (error) {\r\n         console.error(\"ERRO GRAVE DENTRO DE updateBillsOrganizer:\", error);\r\n         showToast(error.message, 'error');\r\n"
                },
                {
                    "date": 1754416210907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2009,8 +2009,9 @@\n         });\r\n     });\r\n \r\n     renderCalendar(filteredBoletos);\r\n+    renderDailyView(filteredBoletos);\r\n     updateMonthlySummary(filteredBoletos);\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1754416320012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2816,10 +2816,29 @@\n const statusFilterSelect = document.getElementById('statusFilterSelect');\r\n if (statusFilterSelect) {\r\n     statusFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n }\r\n+const prevDayBtn = document.getElementById('prevDay');\r\n+const nextDayBtn = document.getElementById('nextDay');\r\n \r\n+if (prevDayBtn) {\r\n+    prevDayBtn.addEventListener('click', () => {\r\n+        // Subtrai um dia da data atual\r\n+        currentDailyViewDate.setDate(currentDailyViewDate.getDate() - 1);\r\n+        // Redesenha a lista de boletos para a nova data\r\n+        renderDailyView(); \r\n+    });\r\n+}\r\n \r\n+if (nextDayBtn) {\r\n+    nextDayBtn.addEventListener('click', () => {\r\n+        // Adiciona um dia à data atual\r\n+        currentDailyViewDate.setDate(currentDailyViewDate.getDate() + 1);\r\n+        // Redesenha a lista de boletos para a nova data\r\n+        renderDailyView();\r\n+    });\r\n+}\r\n \r\n+\r\n initializeDashboardDragAndDrop(); \r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754416431905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2821,21 +2821,17 @@\n const nextDayBtn = document.getElementById('nextDay');\r\n \r\n if (prevDayBtn) {\r\n     prevDayBtn.addEventListener('click', () => {\r\n-        // Subtrai um dia da data atual\r\n         currentDailyViewDate.setDate(currentDailyViewDate.getDate() - 1);\r\n-        // Redesenha a lista de boletos para a nova data\r\n-        renderDailyView(); \r\n+        applyFiltersAndSearch(); // <-- MUDANÇA IMPORTANTE\r\n     });\r\n }\r\n \r\n if (nextDayBtn) {\r\n     nextDayBtn.addEventListener('click', () => {\r\n-        // Adiciona um dia à data atual\r\n         currentDailyViewDate.setDate(currentDailyViewDate.getDate() + 1);\r\n-        // Redesenha a lista de boletos para a nova data\r\n-        renderDailyView();\r\n+        applyFiltersAndSearch(); // <-- MUDANÇA IMPORTANTE\r\n     });\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1754416589558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1985,19 +1985,17 @@\n     const searchTerm = searchInput.value.toLowerCase();\r\n     const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n     const selectedCategoryId = categoryFilterSelect.value;\r\n \r\n+    // 1. Filtra a lista principal de boletos\r\n     let filteredBoletos = userBoletos.filter(bill => {\r\n-        // Filtro de pesquisa\r\n         const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n             (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n         if (!matchesSearch) return false;\r\n \r\n-        // Filtro de categoria\r\n         const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n         if (!matchesCategory) return false;\r\n \r\n-        // Filtro de status\r\n         if (activeStatusFilter === 'all') return true;\r\n         const today = new Date();\r\n         today.setHours(0, 0, 0, 0);\r\n         return bill.parcels.some(parcel => {\r\n@@ -2008,11 +2006,12 @@\n             return false;\r\n         });\r\n     });\r\n \r\n+    // 2. Atualiza todas as partes da interface com a lista filtrada\r\n     renderCalendar(filteredBoletos);\r\n-    renderDailyView(filteredBoletos);\r\n-    updateMonthlySummary(filteredBoletos);\r\n+    renderDailyView(filteredBoletos); // <-- Passa a lista filtrada para a vista diária\r\n+    updateMonthlySummary(filteredBoletos); // <-- Passa a lista filtrada para o resumo\r\n }\r\n \r\n /**\r\n  * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n"
                },
                {
                    "date": 1754416868436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2833,7 +2833,7 @@\n     });\r\n }\r\n \r\n \r\n-initializeDashboardDragAndDrop(); \r\n+initializeDashboardDragAndDrop();\r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754417072626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2820,17 +2820,21 @@\n const nextDayBtn = document.getElementById('nextDay');\r\n \r\n if (prevDayBtn) {\r\n     prevDayBtn.addEventListener('click', () => {\r\n+        // Decrementa a data atual da visualização diária\r\n         currentDailyViewDate.setDate(currentDailyViewDate.getDate() - 1);\r\n-        applyFiltersAndSearch(); // <-- MUDANÇA IMPORTANTE\r\n+        // Chama a função principal que aplica filtros e redesenha a tela\r\n+        applyFiltersAndSearch(); \r\n     });\r\n }\r\n \r\n if (nextDayBtn) {\r\n     nextDayBtn.addEventListener('click', () => {\r\n+        // Incrementa a data atual da visualização diária\r\n         currentDailyViewDate.setDate(currentDailyViewDate.getDate() + 1);\r\n-        applyFiltersAndSearch(); // <-- MUDANÇA IMPORTANTE\r\n+        // Chama a função principal que aplica filtros e redesenha a tela\r\n+        applyFiltersAndSearch(); \r\n     });\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1754417364301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,11 @@\n             const date = parcel.dueDate;\r\n             if (!parcelsByDate.has(date)) {\r\n                 parcelsByDate.set(date, []);\r\n             }\r\n-            parcelsByDate.get(date).push({ ...parcel, parentBill: bill });\r\n+            parcelsByDate.get(date).push({ ...parcel,\r\n+                parentBill: bill\r\n+            });\r\n         });\r\n     });\r\n \r\n     const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n@@ -290,11 +292,12 @@\n                 parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n                 parcelElement.dataset.boletoId = bill._id;\r\n                 parcelElement.dataset.parcelId = parcel._id;\r\n \r\n+                // A CORREÇÃO ESTÁ APLICADA AQUI, na linha do <input>, com o acréscimo de: id=\"checkbox-${parcel._id}\"\r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"flex items-start space-x-2\">\r\n-                        <input type=\"checkbox\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n+                        <input type=\"checkbox\" id=\"checkbox-${parcel._id}\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n                         <div class=\"flex-1 min-w-0\">\r\n                             <div class=\"flex justify-between items-center\">\r\n                                 <span class=\"font-medium text-white truncate\" title=\"${bill.name} (${parcel.number}ª)\">\r\n                                     ${statusIcon} ${bill.name} (${parcel.number}ª)\r\n"
                },
                {
                    "date": 1754417561818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,34 +180,32 @@\n function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n \r\n-    // --- CÁLCULOS PARA O MÊS ATUAL ---\r\n-\r\n-    // 1. Primeiro, filtramos APENAS as parcelas que pertencem ao mês que está a ser exibido\r\n+    // --- CÁLCULOS PARA O MÊS ATUAL (JÁ ESTAVAM CORRETOS) ---\r\n     const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n         .filter(parcel => {\r\n             const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n         });\r\n \r\n-    // 2. Agora, todos os cálculos do mês são baseados nesta lista filtrada\r\n     const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n     const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n     const totalNaoPagoMes = totalMes - totalPagoMes;\r\n \r\n-    // --- CÁLCULO GLOBAL DE VENCIDOS ---\r\n-\r\n-    // 3. O \"Contas Vencidas\" é um alerta global, por isso, ele olha para TODAS as parcelas de todos os meses.\r\n-    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n+    // --- CÁLCULO GLOBAL DE VENCIDOS (AQUI ESTAVA O BUG) ---\r\n+    \r\n+    // CORREÇÃO: Trocado \"userBoletos\" por \"boletosForSummary\" para usar a lista já filtrada.\r\n+    const overdueParcels = boletosForSummary.flatMap(bill => bill.parcels)\r\n         .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n     const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n \r\n     // --- ATUALIZAÇÃO DA INTERFACE ---\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', {\r\n+        style: 'currency',\r\n+        currency: 'BRL'\r\n+    });\r\n \r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-    // Atualiza os elementos HTML com os valores corretos\r\n     document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n     document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n     document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n     document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n"
                },
                {
                    "date": 1754417714312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,19 +217,20 @@\n  * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n-    // --- INÍCIO DA CORREÇÃO DE SEGURANÇA ---\r\n+    const calendarContainer = document.getElementById('calendarDays')?.parentElement;\r\n+    // Otimização: Se o container do calendário não estiver visível (telas pequenas), não executa a renderização.\r\n+    if (!calendarContainer || calendarContainer.offsetParent === null) {\r\n+        return;\r\n+    }\r\n+\r\n+    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n+    const currentMonthYear = document.getElementById('currentMonthYear');\r\n     const calendarDays = document.getElementById('calendarDays');\r\n-    const currentMonthYear = document.getElementById('currentMonthYear');\r\n \r\n-    if (!calendarDays || !currentMonthYear) {\r\n-        console.error(\"ERRO CRÍTICO: Elementos essenciais do calendário (#calendarDays ou #currentMonthYear) não foram encontrados no HTML.\");\r\n-        return; // Para a execução para evitar mais erros.\r\n-    }\r\n-    // --- FIM DA CORREÇÃO DE SEGURANÇA ---\r\n+    if (!currentMonthYear || !calendarDays) return;\r\n \r\n-    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n     currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n     calendarDays.innerHTML = '';\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n@@ -290,9 +291,8 @@\n                 parcelElement.className = `bill-card-draggable text-xs p-2 mb-1 rounded cursor-grab ${statusClass}`;\r\n                 parcelElement.dataset.boletoId = bill._id;\r\n                 parcelElement.dataset.parcelId = parcel._id;\r\n \r\n-                // A CORREÇÃO ESTÁ APLICADA AQUI, na linha do <input>, com o acréscimo de: id=\"checkbox-${parcel._id}\"\r\n                 parcelElement.innerHTML = `\r\n                     <div class=\"flex items-start space-x-2\">\r\n                         <input type=\"checkbox\" id=\"checkbox-${parcel._id}\" class=\"mass-payment-checkbox mt-1 flex-shrink-0\" data-parcel-id=\"${parcel._id}\" ${selectedItems.has(parcel._id) ? 'checked' : ''}>\r\n                         <div class=\"flex-1 min-w-0\">\r\n@@ -303,17 +303,14 @@\n                                 <span class=\"font-semibold text-white flex-shrink-0 ml-2\">\r\n                                     ${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\r\n                                 </span>\r\n                             </div>\r\n-\r\n                             ${bill.nfeNumber ? `<div class=\"text-xs text-gray-300 truncate mt-1\" title=\"NFe Nº ${bill.nfeNumber}\">COD: ${bill.nfeNumber}</div>` : ''}\r\n                             ${bill.category ? `<div class=\"text-xs text-gray-300 truncate mt-1\"><i class=\"fas fa-tag fa-xs mr-1 opacity-70\"></i>${bill.category.name}</div>` : ''}\r\n                         </div>\r\n                     </div>\r\n                 `;\r\n-\r\n                 parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n-\r\n                 const checkbox = parcelElement.querySelector('.mass-payment-checkbox');\r\n                 checkbox.addEventListener('change', (e) => {\r\n                     const parcelId = e.target.dataset.parcelId;\r\n                     const boletoId = e.target.closest('.bill-card-draggable').dataset.boletoId;\r\n@@ -324,16 +321,13 @@\n                     }\r\n                     updateMassPaymentButton();\r\n                 });\r\n                 checkbox.addEventListener('click', (e) => e.stopPropagation());\r\n-\r\n                 dayCell.appendChild(parcelElement);\r\n             });\r\n         }\r\n-\r\n         calendarDays.appendChild(dayCell);\r\n     }\r\n-\r\n     initializeDragAndDrop();\r\n }\r\n \r\n /**\r\n@@ -1293,33 +1287,38 @@\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n+    const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n+    // Otimização: Se o container da vista diária não estiver visível (telas grandes), não executa a renderização.\r\n+    if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n+        return;\r\n+    }\r\n+\r\n     const listContainer = document.getElementById('dailyBillsList');\r\n     const dateDisplay = document.getElementById('currentDailyDate');\r\n     const noBillsMessage = document.getElementById('noDailyBills');\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n \r\n-    // Garante que os elementos HTML existem antes de continuar\r\n     if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n         return;\r\n     }\r\n \r\n-    // Atualiza o texto da data que está sendo exibida\r\n     dateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n         weekday: 'long',\r\n         day: '2-digit',\r\n         month: 'long'\r\n     });\r\n \r\n-    // Filtra para encontrar apenas as parcelas que vencem no dia selecionado\r\n     const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n     const parcelsForDay = boletosToRender\r\n-        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel, parentBill: bill })))\r\n+        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel,\r\n+            parentBill: bill\r\n+        })))\r\n         .filter(parcel => parcel.dueDate === dateStr);\r\n \r\n-    listContainer.innerHTML = ''; // Limpa a lista anterior\r\n+    listContainer.innerHTML = '';\r\n \r\n     if (parcelsForDay.length === 0) {\r\n         noBillsMessage.classList.remove('hidden');\r\n     } else {\r\n@@ -1327,14 +1326,14 @@\n         parcelsForDay.forEach(parcel => {\r\n             const bill = parcel.parentBill;\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             const isOverdue = !parcel.paid && dueDate < today;\r\n-            let statusClass = 'border-l-4 border-indigo-500'; // Padrão: A vencer\r\n-            \r\n+            let statusClass = 'border-l-4 border-indigo-500';\r\n+\r\n             if (parcel.paid) {\r\n-                statusClass = 'border-l-4 border-green-500'; // Pago\r\n+                statusClass = 'border-l-4 border-green-500';\r\n             } else if (isOverdue) {\r\n-                statusClass = 'border-l-4 border-red-500'; // Vencido\r\n+                statusClass = 'border-l-4 border-red-500';\r\n             }\r\n \r\n             const parcelElementHTML = `\r\n                 <div class=\"bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}\">\r\n@@ -1352,9 +1351,9 @@\n             `;\r\n             const parcelElement = document.createElement('div');\r\n             parcelElement.innerHTML = parcelElementHTML;\r\n             parcelElement.firstElementChild.addEventListener('click', () => openBillModal(bill, parcel));\r\n-            \r\n+\r\n             listContainer.appendChild(parcelElement);\r\n         });\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1754417863325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1981,22 +1981,28 @@\n /**\r\n  * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n  */\r\n function applyFiltersAndSearch() {\r\n+    console.log(\"---\"); // Separador para cada execução\r\n+    console.log(\"1. 'applyFiltersAndSearch' foi chamada.\");\r\n+\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n     const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n     const selectedCategoryId = categoryFilterSelect.value;\r\n \r\n-    // 1. Filtra a lista principal de boletos\r\n+    console.log(`2. Filtros Ativos: Pesquisa='${searchTerm}', Status='${activeStatusFilter}'`);\r\n+    console.log(`3. Boletos antes de filtrar: ${userBoletos.length} itens.`);\r\n+\r\n     let filteredBoletos = userBoletos.filter(bill => {\r\n         const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n             (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n         if (!matchesSearch) return false;\r\n \r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category ? ._id === selectedCategoryId);\r\n         if (!matchesCategory) return false;\r\n \r\n         if (activeStatusFilter === 'all') return true;\r\n+\r\n         const today = new Date();\r\n         today.setHours(0, 0, 0, 0);\r\n         return bill.parcels.some(parcel => {\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n@@ -2006,12 +2012,15 @@\n             return false;\r\n         });\r\n     });\r\n \r\n-    // 2. Atualiza todas as partes da interface com a lista filtrada\r\n+    console.log(`4. Boletos DEPOIS de filtrar: ${filteredBoletos.length} itens.`);\r\n+\r\n+    console.log(\"5. A chamar as funções de renderização...\");\r\n+    updateMonthlySummary(filteredBoletos);\r\n     renderCalendar(filteredBoletos);\r\n-    renderDailyView(filteredBoletos); // <-- Passa a lista filtrada para a vista diária\r\n-    updateMonthlySummary(filteredBoletos); // <-- Passa a lista filtrada para o resumo\r\n+    renderDailyView(filteredBoletos);\r\n+    console.log(\"6. Fim da execução de 'applyFiltersAndSearch'.\");\r\n }\r\n \r\n /**\r\n  * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n"
                },
                {
                    "date": 1754418107095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,12 +217,14 @@\n  * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n+    console.log(`-> 'renderCalendar' recebeu ${boletosToRender.length} boletos.`);\r\n     const calendarContainer = document.getElementById('calendarDays')?.parentElement;\r\n     // Otimização: Se o container do calendário não estiver visível (telas pequenas), não executa a renderização.\r\n     if (!calendarContainer || calendarContainer.offsetParent === null) {\r\n         return;\r\n+        console.log(\"-> 'renderCalendar' PAROU (container invisível).\");\r\n     }\r\n \r\n     const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n     const currentMonthYear = document.getElementById('currentMonthYear');\r\n@@ -1287,12 +1289,14 @@\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n+    console.log(`-> 'renderDailyView' recebeu ${boletosToRender.length} boletos.`);\r\n     const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n     // Otimização: Se o container da vista diária não estiver visível (telas grandes), não executa a renderização.\r\n     if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n         return;\r\n+        console.log(\"-> 'renderDailyView' PAROU (container invisível).\");\r\n     }\r\n \r\n     const listContainer = document.getElementById('dailyBillsList');\r\n     const dateDisplay = document.getElementById('currentDailyDate');\r\n@@ -1983,26 +1987,24 @@\n  */\r\n function applyFiltersAndSearch() {\r\n     console.log(\"---\"); // Separador para cada execução\r\n     console.log(\"1. 'applyFiltersAndSearch' foi chamada.\");\r\n-\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n     const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n     const selectedCategoryId = categoryFilterSelect.value;\r\n-\r\n     console.log(`2. Filtros Ativos: Pesquisa='${searchTerm}', Status='${activeStatusFilter}'`);\r\n     console.log(`3. Boletos antes de filtrar: ${userBoletos.length} itens.`);\r\n \r\n+    // 1. Filtra a lista principal de boletos\r\n     let filteredBoletos = userBoletos.filter(bill => {\r\n         const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n             (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n         if (!matchesSearch) return false;\r\n \r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category ? ._id === selectedCategoryId);\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n         if (!matchesCategory) return false;\r\n \r\n         if (activeStatusFilter === 'all') return true;\r\n-\r\n         const today = new Date();\r\n         today.setHours(0, 0, 0, 0);\r\n         return bill.parcels.some(parcel => {\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n@@ -2011,15 +2013,15 @@\n             if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n             return false;\r\n         });\r\n     });\r\n-\r\n     console.log(`4. Boletos DEPOIS de filtrar: ${filteredBoletos.length} itens.`);\r\n+    console.log(\"5. A chamar as funções de renderização...\");\r\n \r\n-    console.log(\"5. A chamar as funções de renderização...\");\r\n-    updateMonthlySummary(filteredBoletos);\r\n+    // 2. Atualiza todas as partes da interface com a lista filtrada\r\n     renderCalendar(filteredBoletos);\r\n-    renderDailyView(filteredBoletos);\r\n+    renderDailyView(filteredBoletos); // <-- Passa a lista filtrada para a vista diária\r\n+    updateMonthlySummary(filteredBoletos); // <-- Passa a lista filtrada para o resumo\r\n     console.log(\"6. Fim da execução de 'applyFiltersAndSearch'.\");\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1754418281049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1289,14 +1289,11 @@\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n-    console.log(`-> 'renderDailyView' recebeu ${boletosToRender.length} boletos.`);\r\n     const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n-    // Otimização: Se o container da vista diária não estiver visível (telas grandes), não executa a renderização.\r\n     if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n         return;\r\n-        console.log(\"-> 'renderDailyView' PAROU (container invisível).\");\r\n     }\r\n \r\n     const listContainer = document.getElementById('dailyBillsList');\r\n     const dateDisplay = document.getElementById('currentDailyDate');\r\n@@ -1320,10 +1317,14 @@\n             parentBill: bill\r\n         })))\r\n         .filter(parcel => parcel.dueDate === dateStr);\r\n \r\n-    listContainer.innerHTML = '';\r\n+    // Limpa a lista existente\r\n+    while (listContainer.firstChild) {\r\n+        listContainer.removeChild(listContainer.firstChild);\r\n+    }\r\n \r\n+\r\n     if (parcelsForDay.length === 0) {\r\n         noBillsMessage.classList.remove('hidden');\r\n     } else {\r\n         noBillsMessage.classList.add('hidden');\r\n@@ -1337,28 +1338,49 @@\n                 statusClass = 'border-l-4 border-green-500';\r\n             } else if (isOverdue) {\r\n                 statusClass = 'border-l-4 border-red-500';\r\n             }\r\n+            \r\n+            // --- INÍCIO DA MUDANÇA DE TÉCNICA ---\r\n+            \r\n+            // Cria os elementos um por um\r\n+            const containerDiv = document.createElement('div');\r\n+            containerDiv.className = `bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}`;\r\n+            containerDiv.addEventListener('click', () => openBillModal(bill, parcel));\r\n \r\n-            const parcelElementHTML = `\r\n-                <div class=\"bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}\">\r\n-                    <div class=\"flex-1 min-w-0\">\r\n-                        <p class=\"text-white font-semibold truncate\">${bill.name} (${parcel.number}ª)</p>\r\n-                        <p class=\"text-sm text-gray-400\">${bill.category ? bill.category.name : 'Sem Categoria'}</p>\r\n-                    </div>\r\n-                    <div class=\"text-right ml-4\">\r\n-                        <p class=\"text-lg font-bold text-white\">${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</p>\r\n-                        <p class=\"text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}\">\r\n-                            ${parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar'}\r\n-                        </p>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            const parcelElement = document.createElement('div');\r\n-            parcelElement.innerHTML = parcelElementHTML;\r\n-            parcelElement.firstElementChild.addEventListener('click', () => openBillModal(bill, parcel));\r\n+            const leftDiv = document.createElement('div');\r\n+            leftDiv.className = 'flex-1 min-w-0';\r\n \r\n-            listContainer.appendChild(parcelElement);\r\n+            const nameP = document.createElement('p');\r\n+            nameP.className = 'text-white font-semibold truncate';\r\n+            nameP.textContent = `${bill.name} (${parcel.number}ª)`;\r\n+\r\n+            const categoryP = document.createElement('p');\r\n+            categoryP.className = 'text-sm text-gray-400';\r\n+            categoryP.textContent = bill.category ? bill.category.name : 'Sem Categoria';\r\n+\r\n+            leftDiv.appendChild(nameP);\r\n+            leftDiv.appendChild(categoryP);\r\n+\r\n+            const rightDiv = document.createElement('div');\r\n+            rightDiv.className = 'text-right ml-4';\r\n+\r\n+            const amountP = document.createElement('p');\r\n+            amountP.className = 'text-lg font-bold text-white';\r\n+            amountP.textContent = parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+\r\n+            const statusP = document.createElement('p');\r\n+            statusP.className = `text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}`;\r\n+            statusP.textContent = parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar';\r\n+\r\n+            rightDiv.appendChild(amountP);\r\n+            rightDiv.appendChild(statusP);\r\n+            \r\n+            containerDiv.appendChild(leftDiv);\r\n+            containerDiv.appendChild(rightDiv);\r\n+\r\n+            listContainer.appendChild(containerDiv);\r\n+            // --- FIM DA MUDANÇA DE TÉCNICA ---\r\n         });\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1754418364712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1289,99 +1289,96 @@\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n-    const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n-    if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n-        return;\r\n-    }\r\n+    try {\r\n+        console.log(`--- INICIANDO renderDailyView (versão final) ---`);\r\n+        console.log(`Recebeu ${boletosToRender.length} boletos para renderizar.`);\r\n \r\n-    const listContainer = document.getElementById('dailyBillsList');\r\n-    const dateDisplay = document.getElementById('currentDailyDate');\r\n-    const noBillsMessage = document.getElementById('noDailyBills');\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n+        const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n+        if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n+            console.log(\"-> PAROU: O container da vista diária está invisível.\");\r\n+            return;\r\n+        }\r\n \r\n-    if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n-        return;\r\n-    }\r\n+        const listContainer = document.getElementById('dailyBillsList');\r\n+        const dateDisplay = document.getElementById('currentDailyDate');\r\n+        const noBillsMessage = document.getElementById('noDailyBills');\r\n \r\n-    dateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n-        weekday: 'long',\r\n-        day: '2-digit',\r\n-        month: 'long'\r\n-    });\r\n+        if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n+            console.error(\"-> ERRO: Não foi possível encontrar os elementos HTML da lista diária.\");\r\n+            return;\r\n+        }\r\n \r\n-    const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n-    const parcelsForDay = boletosToRender\r\n-        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel,\r\n-            parentBill: bill\r\n-        })))\r\n-        .filter(parcel => parcel.dueDate === dateStr);\r\n+        console.log(\"Limpando a lista antiga de boletos...\");\r\n+        while (listContainer.firstChild) {\r\n+            listContainer.removeChild(listContainer.firstChild);\r\n+        }\r\n \r\n-    // Limpa a lista existente\r\n-    while (listContainer.firstChild) {\r\n-        listContainer.removeChild(listContainer.firstChild);\r\n-    }\r\n+        const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n+        const parcelsForDay = boletosToRender\r\n+            .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel,\r\n+                parentBill: bill\r\n+            })))\r\n+            .filter(parcel => parcel.dueDate === dateStr);\r\n \r\n+        console.log(`Encontradas ${parcelsForDay.length} parcelas para a data ${dateStr}.`);\r\n \r\n-    if (parcelsForDay.length === 0) {\r\n-        noBillsMessage.classList.remove('hidden');\r\n-    } else {\r\n-        noBillsMessage.classList.add('hidden');\r\n-        parcelsForDay.forEach(parcel => {\r\n-            const bill = parcel.parentBill;\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            const isOverdue = !parcel.paid && dueDate < today;\r\n-            let statusClass = 'border-l-4 border-indigo-500';\r\n+        if (parcelsForDay.length === 0) {\r\n+            noBillsMessage.classList.remove('hidden');\r\n+            console.log(\"Exibindo mensagem de 'Nenhum boleto'.\");\r\n+        } else {\r\n+            noBillsMessage.classList.add('hidden');\r\n+            console.log(\"Iniciando a criação dos novos elementos da lista...\");\r\n+            parcelsForDay.forEach((parcel, index) => {\r\n+                const bill = parcel.parentBill;\r\n+                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                const isOverdue = !parcel.paid && dueDate < today;\r\n+                let statusClass = 'border-l-4 border-indigo-500';\r\n \r\n-            if (parcel.paid) {\r\n-                statusClass = 'border-l-4 border-green-500';\r\n-            } else if (isOverdue) {\r\n-                statusClass = 'border-l-4 border-red-500';\r\n-            }\r\n-            \r\n-            // --- INÍCIO DA MUDANÇA DE TÉCNICA ---\r\n-            \r\n-            // Cria os elementos um por um\r\n-            const containerDiv = document.createElement('div');\r\n-            containerDiv.className = `bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}`;\r\n-            containerDiv.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                if (parcel.paid) {\r\n+                    statusClass = 'border-l-4 border-green-500';\r\n+                } else if (isOverdue) {\r\n+                    statusClass = 'border-l-4 border-red-500';\r\n+                }\r\n \r\n-            const leftDiv = document.createElement('div');\r\n-            leftDiv.className = 'flex-1 min-w-0';\r\n+                const containerDiv = document.createElement('div');\r\n+                containerDiv.className = `bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}`;\r\n+                containerDiv.addEventListener('click', () => openBillModal(bill, parcel));\r\n+                const leftDiv = document.createElement('div');\r\n+                leftDiv.className = 'flex-1 min-w-0';\r\n+                const nameP = document.createElement('p');\r\n+                nameP.className = 'text-white font-semibold truncate';\r\n+                nameP.textContent = `${bill.name} (${parcel.number}ª)`;\r\n+                const categoryP = document.createElement('p');\r\n+                categoryP.className = 'text-sm text-gray-400';\r\n+                categoryP.textContent = bill.category ? bill.category.name : 'Sem Categoria';\r\n+                leftDiv.appendChild(nameP);\r\n+                leftDiv.appendChild(categoryP);\r\n+                const rightDiv = document.createElement('div');\r\n+                rightDiv.className = 'text-right ml-4';\r\n+                const amountP = document.createElement('p');\r\n+                amountP.className = 'text-lg font-bold text-white';\r\n+                amountP.textContent = parcel.amount.toLocaleString('pt-BR', {\r\n+                    style: 'currency',\r\n+                    currency: 'BRL'\r\n+                });\r\n+                const statusP = document.createElement('p');\r\n+                statusP.className = `text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}`;\r\n+                statusP.textContent = parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar';\r\n+                rightDiv.appendChild(amountP);\r\n+                rightDiv.appendChild(statusP);\r\n+                containerDiv.appendChild(leftDiv);\r\n+                containerDiv.appendChild(rightDiv);\r\n+                listContainer.appendChild(containerDiv);\r\n+            });\r\n+            console.log(`Renderização do loop concluída. ${parcelsForDay.length} itens adicionados.`);\r\n+        }\r\n \r\n-            const nameP = document.createElement('p');\r\n-            nameP.className = 'text-white font-semibold truncate';\r\n-            nameP.textContent = `${bill.name} (${parcel.number}ª)`;\r\n+        console.log(\"--- FIM da execução de renderDailyView ---\");\r\n \r\n-            const categoryP = document.createElement('p');\r\n-            categoryP.className = 'text-sm text-gray-400';\r\n-            categoryP.textContent = bill.category ? bill.category.name : 'Sem Categoria';\r\n-\r\n-            leftDiv.appendChild(nameP);\r\n-            leftDiv.appendChild(categoryP);\r\n-\r\n-            const rightDiv = document.createElement('div');\r\n-            rightDiv.className = 'text-right ml-4';\r\n-\r\n-            const amountP = document.createElement('p');\r\n-            amountP.className = 'text-lg font-bold text-white';\r\n-            amountP.textContent = parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n-\r\n-            const statusP = document.createElement('p');\r\n-            statusP.className = `text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}`;\r\n-            statusP.textContent = parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar';\r\n-\r\n-            rightDiv.appendChild(amountP);\r\n-            rightDiv.appendChild(statusP);\r\n-            \r\n-            containerDiv.appendChild(leftDiv);\r\n-            containerDiv.appendChild(rightDiv);\r\n-\r\n-            listContainer.appendChild(containerDiv);\r\n-            // --- FIM DA MUDANÇA DE TÉCNICA ---\r\n-        });\r\n+    } catch (error) {\r\n+        console.error(\"!!! ERRO CRÍTICO DENTRO DE renderDailyView:\", error);\r\n     }\r\n }\r\n \r\n // =================================================================================\r\n"
                },
                {
                    "date": 1754418447701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1290,50 +1290,55 @@\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n     try {\r\n-        console.log(`--- INICIANDO renderDailyView (versão final) ---`);\r\n-        console.log(`Recebeu ${boletosToRender.length} boletos para renderizar.`);\r\n-\r\n         const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n         if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n-            console.log(\"-> PAROU: O container da vista diária está invisível.\");\r\n             return;\r\n         }\r\n \r\n         const listContainer = document.getElementById('dailyBillsList');\r\n         const dateDisplay = document.getElementById('currentDailyDate');\r\n         const noBillsMessage = document.getElementById('noDailyBills');\r\n+        \r\n+        // --- LINHA DA CORREÇÃO ADICIONADA AQUI ---\r\n+        const today = new Date();\r\n+        today.setHours(0, 0, 0, 0);\r\n+        // --- FIM DA CORREÇÃO ---\r\n \r\n         if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n-            console.error(\"-> ERRO: Não foi possível encontrar os elementos HTML da lista diária.\");\r\n+            console.error(\"ERRO: Não foi possível encontrar os elementos HTML da lista diária.\");\r\n             return;\r\n         }\r\n \r\n-        console.log(\"Limpando a lista antiga de boletos...\");\r\n-        while (listContainer.firstChild) {\r\n-            listContainer.removeChild(listContainer.firstChild);\r\n-        }\r\n+        dateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n+            weekday: 'long',\r\n+            day: '2-digit',\r\n+            month: 'long'\r\n+        });\r\n \r\n         const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n         const parcelsForDay = boletosToRender\r\n             .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel,\r\n                 parentBill: bill\r\n             })))\r\n             .filter(parcel => parcel.dueDate === dateStr);\r\n \r\n-        console.log(`Encontradas ${parcelsForDay.length} parcelas para a data ${dateStr}.`);\r\n+        while (listContainer.firstChild) {\r\n+            listContainer.removeChild(listContainer.firstChild);\r\n+        }\r\n \r\n         if (parcelsForDay.length === 0) {\r\n             noBillsMessage.classList.remove('hidden');\r\n-            console.log(\"Exibindo mensagem de 'Nenhum boleto'.\");\r\n         } else {\r\n             noBillsMessage.classList.add('hidden');\r\n-            console.log(\"Iniciando a criação dos novos elementos da lista...\");\r\n-            parcelsForDay.forEach((parcel, index) => {\r\n+            parcelsForDay.forEach(parcel => {\r\n                 const bill = parcel.parentBill;\r\n                 const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                \r\n+                // Esta linha agora funcionará, pois a variável 'today' existe.\r\n                 const isOverdue = !parcel.paid && dueDate < today;\r\n+                \r\n                 let statusClass = 'border-l-4 border-indigo-500';\r\n \r\n                 if (parcel.paid) {\r\n                     statusClass = 'border-l-4 border-green-500';\r\n@@ -1343,8 +1348,9 @@\n \r\n                 const containerDiv = document.createElement('div');\r\n                 containerDiv.className = `bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}`;\r\n                 containerDiv.addEventListener('click', () => openBillModal(bill, parcel));\r\n+\r\n                 const leftDiv = document.createElement('div');\r\n                 leftDiv.className = 'flex-1 min-w-0';\r\n                 const nameP = document.createElement('p');\r\n                 nameP.className = 'text-white font-semibold truncate';\r\n@@ -1353,8 +1359,9 @@\n                 categoryP.className = 'text-sm text-gray-400';\r\n                 categoryP.textContent = bill.category ? bill.category.name : 'Sem Categoria';\r\n                 leftDiv.appendChild(nameP);\r\n                 leftDiv.appendChild(categoryP);\r\n+\r\n                 const rightDiv = document.createElement('div');\r\n                 rightDiv.className = 'text-right ml-4';\r\n                 const amountP = document.createElement('p');\r\n                 amountP.className = 'text-lg font-bold text-white';\r\n@@ -1366,17 +1373,15 @@\n                 statusP.className = `text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}`;\r\n                 statusP.textContent = parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar';\r\n                 rightDiv.appendChild(amountP);\r\n                 rightDiv.appendChild(statusP);\r\n+                \r\n                 containerDiv.appendChild(leftDiv);\r\n                 containerDiv.appendChild(rightDiv);\r\n+\r\n                 listContainer.appendChild(containerDiv);\r\n             });\r\n-            console.log(`Renderização do loop concluída. ${parcelsForDay.length} itens adicionados.`);\r\n         }\r\n-\r\n-        console.log(\"--- FIM da execução de renderDailyView ---\");\r\n-\r\n     } catch (error) {\r\n         console.error(\"!!! ERRO CRÍTICO DENTRO DE renderDailyView:\", error);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1754418558614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,13 @@\n let userBoletos = [];\r\n let currentMonth, currentYear;\r\n let currentDailyViewDate;\r\n let expensesPieChart = null;\r\n+\r\n+let dailyListContainer = null;\r\n+let dailyDateDisplay = null;\r\n+let noDailyBillsMessage = null;\r\n+\r\n let expensesBarChart = null;\r\n let topExpensesChart = null;\r\n let parsedCsvData = [];\r\n let selectedParcels = new Set();\r\n"
                },
                {
                    "date": 1754418622303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1294,101 +1294,89 @@\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n-    try {\r\n-        const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n-        if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n-            return;\r\n-        }\r\n+    const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n+    if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n+        return;\r\n+    }\r\n \r\n-        const listContainer = document.getElementById('dailyBillsList');\r\n-        const dateDisplay = document.getElementById('currentDailyDate');\r\n-        const noBillsMessage = document.getElementById('noDailyBills');\r\n-        \r\n-        // --- LINHA DA CORREÇÃO ADICIONADA AQUI ---\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        // --- FIM DA CORREÇÃO ---\r\n+    // A função agora usa as variáveis globais que já foram carregadas.\r\n+    // Isto evita o erro de \"elemento não encontrado\".\r\n+    if (!dailyListContainer || !dailyDateDisplay || !noDailyBillsMessage) {\r\n+        console.error(\"Os elementos da vista diária não foram inicializados corretamente.\");\r\n+        return;\r\n+    }\r\n \r\n-        if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n-            console.error(\"ERRO: Não foi possível encontrar os elementos HTML da lista diária.\");\r\n-            return;\r\n-        }\r\n+    dailyDateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n+        weekday: 'long',\r\n+        day: '2-digit',\r\n+        month: 'long'\r\n+    });\r\n \r\n-        dateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n-            weekday: 'long',\r\n-            day: '2-digit',\r\n-            month: 'long'\r\n-        });\r\n+    const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n+    const parcelsForDay = boletosToRender\r\n+        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel,\r\n+            parentBill: bill\r\n+        })))\r\n+        .filter(parcel => parcel.dueDate === dateStr);\r\n \r\n-        const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n-        const parcelsForDay = boletosToRender\r\n-            .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel,\r\n-                parentBill: bill\r\n-            })))\r\n-            .filter(parcel => parcel.dueDate === dateStr);\r\n+    while (dailyListContainer.firstChild) {\r\n+        dailyListContainer.removeChild(dailyListContainer.firstChild);\r\n+    }\r\n \r\n-        while (listContainer.firstChild) {\r\n-            listContainer.removeChild(listContainer.firstChild);\r\n-        }\r\n+    if (parcelsForDay.length === 0) {\r\n+        noDailyBillsMessage.classList.remove('hidden');\r\n+    } else {\r\n+        noDailyBillsMessage.classList.add('hidden');\r\n+        parcelsForDay.forEach(parcel => {\r\n+            const bill = parcel.parentBill;\r\n+            const today = new Date(); // Declarando a variável 'today' aqui para garantir o escopo\r\n+            today.setHours(0, 0, 0, 0);\r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            const isOverdue = !parcel.paid && dueDate < today;\r\n+            let statusClass = 'border-l-4 border-indigo-500';\r\n \r\n-        if (parcelsForDay.length === 0) {\r\n-            noBillsMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noBillsMessage.classList.add('hidden');\r\n-            parcelsForDay.forEach(parcel => {\r\n-                const bill = parcel.parentBill;\r\n-                const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-                \r\n-                // Esta linha agora funcionará, pois a variável 'today' existe.\r\n-                const isOverdue = !parcel.paid && dueDate < today;\r\n-                \r\n-                let statusClass = 'border-l-4 border-indigo-500';\r\n+            if (parcel.paid) {\r\n+                statusClass = 'border-l-4 border-green-500';\r\n+            } else if (isOverdue) {\r\n+                statusClass = 'border-l-4 border-red-500';\r\n+            }\r\n \r\n-                if (parcel.paid) {\r\n-                    statusClass = 'border-l-4 border-green-500';\r\n-                } else if (isOverdue) {\r\n-                    statusClass = 'border-l-4 border-red-500';\r\n-                }\r\n+            const containerDiv = document.createElement('div');\r\n+            containerDiv.className = `bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}`;\r\n+            containerDiv.addEventListener('click', () => openBillModal(bill, parcel));\r\n \r\n-                const containerDiv = document.createElement('div');\r\n-                containerDiv.className = `bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}`;\r\n-                containerDiv.addEventListener('click', () => openBillModal(bill, parcel));\r\n+            const leftDiv = document.createElement('div');\r\n+            leftDiv.className = 'flex-1 min-w-0';\r\n+            const nameP = document.createElement('p');\r\n+            nameP.className = 'text-white font-semibold truncate';\r\n+            nameP.textContent = `${bill.name} (${parcel.number}ª)`;\r\n+            const categoryP = document.createElement('p');\r\n+            categoryP.className = 'text-sm text-gray-400';\r\n+            categoryP.textContent = bill.category ? bill.category.name : 'Sem Categoria';\r\n+            leftDiv.appendChild(nameP);\r\n+            leftDiv.appendChild(categoryP);\r\n \r\n-                const leftDiv = document.createElement('div');\r\n-                leftDiv.className = 'flex-1 min-w-0';\r\n-                const nameP = document.createElement('p');\r\n-                nameP.className = 'text-white font-semibold truncate';\r\n-                nameP.textContent = `${bill.name} (${parcel.number}ª)`;\r\n-                const categoryP = document.createElement('p');\r\n-                categoryP.className = 'text-sm text-gray-400';\r\n-                categoryP.textContent = bill.category ? bill.category.name : 'Sem Categoria';\r\n-                leftDiv.appendChild(nameP);\r\n-                leftDiv.appendChild(categoryP);\r\n+            const rightDiv = document.createElement('div');\r\n+            rightDiv.className = 'text-right ml-4';\r\n+            const amountP = document.createElement('p');\r\n+            amountP.className = 'text-lg font-bold text-white';\r\n+            amountP.textContent = parcel.amount.toLocaleString('pt-BR', {\r\n+                style: 'currency',\r\n+                currency: 'BRL'\r\n+            });\r\n+            const statusP = document.createElement('p');\r\n+            statusP.className = `text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}`;\r\n+            statusP.textContent = parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar';\r\n+            rightDiv.appendChild(amountP);\r\n+            rightDiv.appendChild(statusP);\r\n+            \r\n+            containerDiv.appendChild(leftDiv);\r\n+            containerDiv.appendChild(rightDiv);\r\n \r\n-                const rightDiv = document.createElement('div');\r\n-                rightDiv.className = 'text-right ml-4';\r\n-                const amountP = document.createElement('p');\r\n-                amountP.className = 'text-lg font-bold text-white';\r\n-                amountP.textContent = parcel.amount.toLocaleString('pt-BR', {\r\n-                    style: 'currency',\r\n-                    currency: 'BRL'\r\n-                });\r\n-                const statusP = document.createElement('p');\r\n-                statusP.className = `text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}`;\r\n-                statusP.textContent = parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar';\r\n-                rightDiv.appendChild(amountP);\r\n-                rightDiv.appendChild(statusP);\r\n-                \r\n-                containerDiv.appendChild(leftDiv);\r\n-                containerDiv.appendChild(rightDiv);\r\n-\r\n-                listContainer.appendChild(containerDiv);\r\n-            });\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(\"!!! ERRO CRÍTICO DENTRO DE renderDailyView:\", error);\r\n+            dailyListContainer.appendChild(containerDiv);\r\n+        });\r\n     }\r\n }\r\n \r\n // =================================================================================\r\n@@ -2857,8 +2845,11 @@\n     statusFilterSelect.addEventListener('change', applyFiltersAndSearch);\r\n }\r\n const prevDayBtn = document.getElementById('prevDay');\r\n const nextDayBtn = document.getElementById('nextDay');\r\n+dailyListContainer = document.getElementById('dailyBillsList');\r\n+dailyDateDisplay = document.getElementById('currentDailyDate');\r\n+noDailyBillsMessage = document.getElementById('noDailyBills');\r\n \r\n if (prevDayBtn) {\r\n     prevDayBtn.addEventListener('click', () => {\r\n         // Decrementa a data atual da visualização diária\r\n"
                },
                {
                    "date": 1754418841481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1294,21 +1294,26 @@\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n+    // MÉTODO ALTERNATIVO: Procura os elementos sempre que a função é chamada.\r\n     const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n+    \r\n+    // Se a vista móvel estiver escondida, não faz nada.\r\n     if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n         return;\r\n     }\r\n \r\n-    // A função agora usa as variáveis globais que já foram carregadas.\r\n-    // Isto evita o erro de \"elemento não encontrado\".\r\n-    if (!dailyListContainer || !dailyDateDisplay || !noDailyBillsMessage) {\r\n-        console.error(\"Os elementos da vista diária não foram inicializados corretamente.\");\r\n+    const listContainer = document.getElementById('dailyBillsList');\r\n+    const dateDisplay = document.getElementById('currentDailyDate');\r\n+    const noBillsMessage = document.getElementById('noDailyBills');\r\n+\r\n+    // Se, mesmo assim, não encontrar os elementos, cancela a operação.\r\n+    if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n         return;\r\n     }\r\n \r\n-    dailyDateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n+    dateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n         weekday: 'long',\r\n         day: '2-digit',\r\n         month: 'long'\r\n     });\r\n@@ -1319,19 +1324,19 @@\n             parentBill: bill\r\n         })))\r\n         .filter(parcel => parcel.dueDate === dateStr);\r\n \r\n-    while (dailyListContainer.firstChild) {\r\n-        dailyListContainer.removeChild(dailyListContainer.firstChild);\r\n+    while (listContainer.firstChild) {\r\n+        listContainer.removeChild(listContainer.firstChild);\r\n     }\r\n \r\n     if (parcelsForDay.length === 0) {\r\n-        noDailyBillsMessage.classList.remove('hidden');\r\n+        noBillsMessage.classList.remove('hidden');\r\n     } else {\r\n-        noDailyBillsMessage.classList.add('hidden');\r\n+        noBillsMessage.classList.add('hidden');\r\n         parcelsForDay.forEach(parcel => {\r\n             const bill = parcel.parentBill;\r\n-            const today = new Date(); // Declarando a variável 'today' aqui para garantir o escopo\r\n+            const today = new Date();\r\n             today.setHours(0, 0, 0, 0);\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             const isOverdue = !parcel.paid && dueDate < today;\r\n             let statusClass = 'border-l-4 border-indigo-500';\r\n@@ -1373,9 +1378,9 @@\n             \r\n             containerDiv.appendChild(leftDiv);\r\n             containerDiv.appendChild(rightDiv);\r\n \r\n-            dailyListContainer.appendChild(containerDiv);\r\n+            listContainer.appendChild(containerDiv);\r\n         });\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1754418935706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2007,15 +2007,11 @@\n /**\r\n  * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n  */\r\n function applyFiltersAndSearch() {\r\n-    console.log(\"---\"); // Separador para cada execução\r\n-    console.log(\"1. 'applyFiltersAndSearch' foi chamada.\");\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n     const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n     const selectedCategoryId = categoryFilterSelect.value;\r\n-    console.log(`2. Filtros Ativos: Pesquisa='${searchTerm}', Status='${activeStatusFilter}'`);\r\n-    console.log(`3. Boletos antes de filtrar: ${userBoletos.length} itens.`);\r\n \r\n     // 1. Filtra a lista principal de boletos\r\n     let filteredBoletos = userBoletos.filter(bill => {\r\n         const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n@@ -2035,16 +2031,13 @@\n             if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n             return false;\r\n         });\r\n     });\r\n-    console.log(`4. Boletos DEPOIS de filtrar: ${filteredBoletos.length} itens.`);\r\n-    console.log(\"5. A chamar as funções de renderização...\");\r\n \r\n     // 2. Atualiza todas as partes da interface com a lista filtrada\r\n     renderCalendar(filteredBoletos);\r\n     renderDailyView(filteredBoletos); // <-- Passa a lista filtrada para a vista diária\r\n     updateMonthlySummary(filteredBoletos); // <-- Passa a lista filtrada para o resumo\r\n-    console.log(\"6. Fim da execução de 'applyFiltersAndSearch'.\");\r\n }\r\n \r\n /**\r\n  * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n"
                },
                {
                    "date": 1754418952588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,8 @@\n  * VERSÃO FINAL - Otimizada, com melhorias visuais e todas as funcionalidades.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser exibida.\r\n  */\r\n function renderCalendar(boletosToRender = userBoletos) {\r\n-    console.log(`-> 'renderCalendar' recebeu ${boletosToRender.length} boletos.`);\r\n     const calendarContainer = document.getElementById('calendarDays')?.parentElement;\r\n     // Otimização: Se o container do calendário não estiver visível (telas pequenas), não executa a renderização.\r\n     if (!calendarContainer || calendarContainer.offsetParent === null) {\r\n         return;\r\n"
                },
                {
                    "date": 1754419279555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2009,34 +2009,46 @@\n function applyFiltersAndSearch() {\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n     const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n     const selectedCategoryId = categoryFilterSelect.value;\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n \r\n-    // 1. Filtra a lista principal de boletos\r\n-    let filteredBoletos = userBoletos.filter(bill => {\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n-            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        if (!matchesSearch) return false;\r\n-\r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-        if (!matchesCategory) return false;\r\n-\r\n-        if (activeStatusFilter === 'all') return true;\r\n-        const today = new Date();\r\n-        today.setHours(0, 0, 0, 0);\r\n-        return bill.parcels.some(parcel => {\r\n+    // PASSO 1: Mapeia cada boleto para um novo objeto que contém apenas as parcelas que correspondem ao FILTRO DE STATUS.\r\n+    const billsWithFilteredParcels = userBoletos.map(bill => {\r\n+        const filteredParcels = bill.parcels.filter(parcel => {\r\n+            if (activeStatusFilter === 'all') return true;\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             if (activeStatusFilter === 'paid') return parcel.paid;\r\n             if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n             if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n             return false;\r\n         });\r\n+        \r\n+        // Retorna uma cópia do boleto com a lista de parcelas já filtrada\r\n+        return { ...bill, parcels: filteredParcels };\r\n     });\r\n \r\n-    // 2. Atualiza todas as partes da interface com a lista filtrada\r\n-    renderCalendar(filteredBoletos);\r\n-    renderDailyView(filteredBoletos); // <-- Passa a lista filtrada para a vista diária\r\n-    updateMonthlySummary(filteredBoletos); // <-- Passa a lista filtrada para o resumo\r\n+    // PASSO 2: Filtra a lista principal de boletos com base no NOME, CÓD. NF, CATEGORIA e se ainda possuem parcelas após o filtro do passo 1.\r\n+    let finalFilteredBoletos = billsWithFilteredParcels.filter(bill => {\r\n+        // Remove boletos que ficaram sem nenhuma parcela correspondente\r\n+        if (bill.parcels.length === 0) {\r\n+            return false;\r\n+        }\r\n+\r\n+        // Aplica os outros filtros\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n+            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+        \r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+\r\n+        return matchesSearch && matchesCategory;\r\n+    });\r\n+\r\n+    // PASSO 3: Atualiza todas as partes da interface com a lista final e profundamente filtrada.\r\n+    renderCalendar(finalFilteredBoletos);\r\n+    renderDailyView(finalFilteredBoletos);\r\n+    updateMonthlySummary(finalFilteredBoletos);\r\n }\r\n \r\n /**\r\n  * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n"
                },
                {
                    "date": 1754419362312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1318,11 +1318,9 @@\n     });\r\n \r\n     const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n     const parcelsForDay = boletosToRender\r\n-        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel,\r\n-            parentBill: bill\r\n-        })))\r\n+        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel, parentBill: bill })))\r\n         .filter(parcel => parcel.dueDate === dateStr);\r\n \r\n     while (listContainer.firstChild) {\r\n         listContainer.removeChild(listContainer.firstChild);\r\n"
                },
                {
                    "date": 1754419487406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2004,8 +2004,9 @@\n /**\r\n  * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n  */\r\n function applyFiltersAndSearch() {\r\n+    console.log(\"A função applyFiltersAndSearch FOI ACIONADA às:\", new Date().toLocaleTimeString());\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n     const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n     const selectedCategoryId = categoryFilterSelect.value;\r\n     const today = new Date();\r\n"
                },
                {
                    "date": 1754419591197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2004,43 +2004,50 @@\n /**\r\n  * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n  */\r\n function applyFiltersAndSearch() {\r\n-    console.log(\"A função applyFiltersAndSearch FOI ACIONADA às:\", new Date().toLocaleTimeString());\r\n+    // Para depuração, pode manter esta linha por enquanto\r\n+    console.log(\"Filtro acionado! Termo:\", searchInput.value);\r\n+\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n     const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n     const selectedCategoryId = categoryFilterSelect.value;\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n \r\n-    // PASSO 1: Mapeia cada boleto para um novo objeto que contém apenas as parcelas que correspondem ao FILTRO DE STATUS.\r\n+    // PASSO 1: Mapeia cada boleto para um novo objeto que contém APENAS as parcelas que correspondem ao FILTRO DE STATUS.\r\n     const billsWithFilteredParcels = userBoletos.map(bill => {\r\n         const filteredParcels = bill.parcels.filter(parcel => {\r\n             if (activeStatusFilter === 'all') return true;\r\n+            \r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             if (activeStatusFilter === 'paid') return parcel.paid;\r\n             if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n             if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            \r\n             return false;\r\n         });\r\n         \r\n-        // Retorna uma cópia do boleto com a lista de parcelas já filtrada\r\n+        // Retorna uma cópia do boleto com a lista de parcelas já filtrada por status\r\n         return { ...bill, parcels: filteredParcels };\r\n     });\r\n \r\n-    // PASSO 2: Filtra a lista principal de boletos com base no NOME, CÓD. NF, CATEGORIA e se ainda possuem parcelas após o filtro do passo 1.\r\n+    // PASSO 2: Agora, filtra a lista de boletos com base nos outros critérios (NOME, CÓD. NF, CATEGORIA)\r\n+    // e remove os boletos que ficaram sem nenhuma parcela após o filtro do passo 1.\r\n     let finalFilteredBoletos = billsWithFilteredParcels.filter(bill => {\r\n-        // Remove boletos que ficaram sem nenhuma parcela correspondente\r\n+        // Se o boleto não tiver mais parcelas após o filtro de status, remova-o.\r\n         if (bill.parcels.length === 0) {\r\n             return false;\r\n         }\r\n \r\n-        // Aplica os outros filtros\r\n+        // Verifica se o boleto corresponde ao termo de pesquisa\r\n         const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n             (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n         \r\n+        // Verifica se o boleto corresponde à categoria selecionada\r\n         const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n \r\n+        // O boleto só será incluído se corresponder a tudo\r\n         return matchesSearch && matchesCategory;\r\n     });\r\n \r\n     // PASSO 3: Atualiza todas as partes da interface com a lista final e profundamente filtrada.\r\n"
                },
                {
                    "date": 1754419661658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2004,54 +2004,49 @@\n /**\r\n  * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n  */\r\n function applyFiltersAndSearch() {\r\n-    // Para depuração, pode manter esta linha por enquanto\r\n-    console.log(\"Filtro acionado! Termo:\", searchInput.value);\r\n+    console.clear(); // Limpa a consola para facilitar a leitura a cada nova letra digitada\r\n+    console.log(\"--- INICIANDO NOVA FILTRAGEM ---\");\r\n \r\n     const searchTerm = searchInput.value.toLowerCase();\r\n     const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n     const selectedCategoryId = categoryFilterSelect.value;\r\n+    \r\n+    // Log 1: Mostra os filtros que estão a ser aplicados\r\n+    console.log(\"Filtros Atuais:\", { termo: searchTerm, status: activeStatusFilter, categoria: selectedCategoryId });\r\n+\r\n+    // Log 2: Mostra os dados originais antes de qualquer filtro\r\n+    console.log(\"Dados Originais (userBoletos):\", userBoletos);\r\n+\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n \r\n-    // PASSO 1: Mapeia cada boleto para um novo objeto que contém APENAS as parcelas que correspondem ao FILTRO DE STATUS.\r\n     const billsWithFilteredParcels = userBoletos.map(bill => {\r\n         const filteredParcels = bill.parcels.filter(parcel => {\r\n             if (activeStatusFilter === 'all') return true;\r\n-            \r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             if (activeStatusFilter === 'paid') return parcel.paid;\r\n             if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n             if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n-            \r\n             return false;\r\n         });\r\n-        \r\n-        // Retorna uma cópia do boleto com a lista de parcelas já filtrada por status\r\n         return { ...bill, parcels: filteredParcels };\r\n     });\r\n \r\n-    // PASSO 2: Agora, filtra a lista de boletos com base nos outros critérios (NOME, CÓD. NF, CATEGORIA)\r\n-    // e remove os boletos que ficaram sem nenhuma parcela após o filtro do passo 1.\r\n     let finalFilteredBoletos = billsWithFilteredParcels.filter(bill => {\r\n-        // Se o boleto não tiver mais parcelas após o filtro de status, remova-o.\r\n-        if (bill.parcels.length === 0) {\r\n-            return false;\r\n-        }\r\n-\r\n-        // Verifica se o boleto corresponde ao termo de pesquisa\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) ||\r\n-            (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        \r\n-        // Verifica se o boleto corresponde à categoria selecionada\r\n+        if (bill.parcels.length === 0) return false;\r\n+        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) || (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n         const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-\r\n-        // O boleto só será incluído se corresponder a tudo\r\n         return matchesSearch && matchesCategory;\r\n     });\r\n \r\n-    // PASSO 3: Atualiza todas as partes da interface com a lista final e profundamente filtrada.\r\n+    // Log 3: Mostra a lista final que DEVERIA ser desenhada na tela\r\n+    console.log(\"Dados Finais a Serem Renderizados (finalFilteredBoletos):\", finalFilteredBoletos);\r\n+    \r\n+    console.log(\"--- FIM DA FILTRAGEM, INICIANDO RENDERIZAÇÃO ---\");\r\n+\r\n+    // Estas são as funções que atualizam a interface\r\n     renderCalendar(finalFilteredBoletos);\r\n     renderDailyView(finalFilteredBoletos);\r\n     updateMonthlySummary(finalFilteredBoletos);\r\n }\r\n"
                },
                {
                    "date": 1754419754862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2004,52 +2004,39 @@\n /**\r\n  * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n  */\r\n function applyFiltersAndSearch() {\r\n-    console.clear(); // Limpa a consola para facilitar a leitura a cada nova letra digitada\r\n-    console.log(\"--- INICIANDO NOVA FILTRAGEM ---\");\r\n+    console.clear();\r\n+    console.log(\"--- EXECUTANDO FILTRO SIMPLIFICADO ---\");\r\n \r\n     const searchTerm = searchInput.value.toLowerCase();\r\n-    const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n-    const selectedCategoryId = categoryFilterSelect.value;\r\n-    \r\n-    // Log 1: Mostra os filtros que estão a ser aplicados\r\n-    console.log(\"Filtros Atuais:\", { termo: searchTerm, status: activeStatusFilter, categoria: selectedCategoryId });\r\n+    console.log(\"Termo de pesquisa:\", searchTerm);\r\n \r\n-    // Log 2: Mostra os dados originais antes de qualquer filtro\r\n-    console.log(\"Dados Originais (userBoletos):\", userBoletos);\r\n+    // Se o campo de pesquisa estiver vazio, não faz nada e mostra tudo (comportamento padrão)\r\n+    if (!searchTerm) {\r\n+        renderDailyView(userBoletos);\r\n+        renderCalendar(userBoletos);\r\n+        updateMonthlySummary(userBoletos);\r\n+        return;\r\n+    }\r\n \r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-\r\n-    const billsWithFilteredParcels = userBoletos.map(bill => {\r\n-        const filteredParcels = bill.parcels.filter(parcel => {\r\n-            if (activeStatusFilter === 'all') return true;\r\n-            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            if (activeStatusFilter === 'paid') return parcel.paid;\r\n-            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n-            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+    // A MÁGICA ESTÁ AQUI: Filtra a lista original de boletos\r\n+    const boletosFiltrados = userBoletos.filter(bill => {\r\n+        // Primeiro, uma verificação de segurança para garantir que 'bill.name' existe\r\n+        if (!bill.name || typeof bill.name !== 'string') {\r\n             return false;\r\n-        });\r\n-        return { ...bill, parcels: filteredParcels };\r\n+        }\r\n+        // Retorna true apenas se o nome do boleto (em minúsculas) incluir o termo de pesquisa\r\n+        return bill.name.toLowerCase().includes(searchTerm);\r\n     });\r\n \r\n-    let finalFilteredBoletos = billsWithFilteredParcels.filter(bill => {\r\n-        if (bill.parcels.length === 0) return false;\r\n-        const matchesSearch = bill.name.toLowerCase().includes(searchTerm) || (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n-        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n-        return matchesSearch && matchesCategory;\r\n-    });\r\n+    // Mostra o resultado do filtro simplificado\r\n+    console.log(\"Resultado do filtro simplificado:\", boletosFiltrados);\r\n \r\n-    // Log 3: Mostra a lista final que DEVERIA ser desenhada na tela\r\n-    console.log(\"Dados Finais a Serem Renderizados (finalFilteredBoletos):\", finalFilteredBoletos);\r\n-    \r\n-    console.log(\"--- FIM DA FILTRAGEM, INICIANDO RENDERIZAÇÃO ---\");\r\n-\r\n-    // Estas são as funções que atualizam a interface\r\n-    renderCalendar(finalFilteredBoletos);\r\n-    renderDailyView(finalFilteredBoletos);\r\n-    updateMonthlySummary(finalFilteredBoletos);\r\n+    // Envia a lista filtrada (e apenas ela) para TODAS as funções de renderização\r\n+    renderDailyView(boletosFiltrados);\r\n+    renderCalendar(boletosFiltrados);\r\n+    updateMonthlySummary(boletosFiltrados);\r\n }\r\n \r\n /**\r\n  * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n"
                },
                {
                    "date": 1754419850744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1293,21 +1293,18 @@\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n-    // MÉTODO ALTERNATIVO: Procura os elementos sempre que a função é chamada.\r\n     const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n     \r\n-    // Se a vista móvel estiver escondida, não faz nada.\r\n     if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n         return;\r\n     }\r\n \r\n     const listContainer = document.getElementById('dailyBillsList');\r\n     const dateDisplay = document.getElementById('currentDailyDate');\r\n     const noBillsMessage = document.getElementById('noDailyBills');\r\n \r\n-    // Se, mesmo assim, não encontrar os elementos, cancela a operação.\r\n     if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n         return;\r\n     }\r\n \r\n@@ -1318,18 +1315,25 @@\n     });\r\n \r\n     const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n     const parcelsForDay = boletosToRender\r\n-        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel, parentBill: bill })))\r\n+        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel,\r\n+            parentBill: bill\r\n+        })))\r\n         .filter(parcel => parcel.dueDate === dateStr);\r\n \r\n-    while (listContainer.firstChild) {\r\n-        listContainer.removeChild(listContainer.firstChild);\r\n-    }\r\n+    // ===================================================================\r\n+    // AQUI ESTÁ A CORREÇÃO PRINCIPAL\r\n+    // Esta linha apaga de forma direta todos os boletos antigos da tela.\r\n+    listContainer.innerHTML = '';\r\n+    // ===================================================================\r\n \r\n     if (parcelsForDay.length === 0) {\r\n+        // Se não houver boletos para o dia após o filtro, mostra a mensagem.\r\n         noBillsMessage.classList.remove('hidden');\r\n+        listContainer.appendChild(noBillsMessage);\r\n     } else {\r\n+        // Se houver boletos, esconde a mensagem e desenha os novos.\r\n         noBillsMessage.classList.add('hidden');\r\n         parcelsForDay.forEach(parcel => {\r\n             const bill = parcel.parentBill;\r\n             const today = new Date();\r\n"
                },
                {
                    "date": 1754420057824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1293,66 +1293,54 @@\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n-    const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n+    console.log(\"--- Dentro de renderDailyView ---\");\r\n     \r\n-    if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n+    const listContainer = document.getElementById('dailyBillsList');\r\n+    if (!listContainer) {\r\n+        console.error(\"ERRO CRÍTICO: O elemento 'dailyBillsList' não foi encontrado!\");\r\n         return;\r\n     }\r\n-\r\n-    const listContainer = document.getElementById('dailyBillsList');\r\n-    const dateDisplay = document.getElementById('currentDailyDate');\r\n+    console.log(\"Elemento 'listContainer' encontrado:\", listContainer);\r\n+    \r\n     const noBillsMessage = document.getElementById('noDailyBills');\r\n-\r\n-    if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n-        return;\r\n-    }\r\n-\r\n-    dateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n-        weekday: 'long',\r\n-        day: '2-digit',\r\n-        month: 'long'\r\n-    });\r\n-\r\n+    \r\n     const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n+    \r\n     const parcelsForDay = boletosToRender\r\n-        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel,\r\n-            parentBill: bill\r\n-        })))\r\n+        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel, parentBill: bill })))\r\n         .filter(parcel => parcel.dueDate === dateStr);\r\n+        \r\n+    console.log(`Encontradas ${parcelsForDay.length} parcelas para o dia ${dateStr}`);\r\n \r\n-    // ===================================================================\r\n-    // AQUI ESTÁ A CORREÇÃO PRINCIPAL\r\n-    // Esta linha apaga de forma direta todos os boletos antigos da tela.\r\n+    console.log(\"1. Limpando a lista antiga da tela...\");\r\n     listContainer.innerHTML = '';\r\n-    // ===================================================================\r\n+    console.log(\"2. Lista teoricamente limpa.\");\r\n \r\n     if (parcelsForDay.length === 0) {\r\n-        // Se não houver boletos para o dia após o filtro, mostra a mensagem.\r\n+        console.log(\"3. Nenhuma parcela para mostrar, exibindo mensagem de 'Nenhum boleto'.\");\r\n+        if(noBillsMessage) listContainer.appendChild(noBillsMessage);\r\n         noBillsMessage.classList.remove('hidden');\r\n-        listContainer.appendChild(noBillsMessage);\r\n     } else {\r\n-        // Se houver boletos, esconde a mensagem e desenha os novos.\r\n-        noBillsMessage.classList.add('hidden');\r\n-        parcelsForDay.forEach(parcel => {\r\n+        console.log(`3. Encontradas ${parcelsForDay.length} parcelas. Iniciando a adição de elementos...`);\r\n+        if(noBillsMessage) noBillsMessage.classList.add('hidden');\r\n+        \r\n+        parcelsForDay.forEach((parcel, index) => {\r\n+            console.log(`Adicionando o item ${index + 1}: ${parcel.parentBill.name}`);\r\n+            \r\n+            // ... (todo o código de criação de elementos permanece o mesmo)\r\n             const bill = parcel.parentBill;\r\n             const today = new Date();\r\n             today.setHours(0, 0, 0, 0);\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             const isOverdue = !parcel.paid && dueDate < today;\r\n             let statusClass = 'border-l-4 border-indigo-500';\r\n-\r\n-            if (parcel.paid) {\r\n-                statusClass = 'border-l-4 border-green-500';\r\n-            } else if (isOverdue) {\r\n-                statusClass = 'border-l-4 border-red-500';\r\n-            }\r\n-\r\n+            if (parcel.paid) statusClass = 'border-l-4 border-green-500';\r\n+            else if (isOverdue) statusClass = 'border-l-4 border-red-500';\r\n             const containerDiv = document.createElement('div');\r\n             containerDiv.className = `bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}`;\r\n             containerDiv.addEventListener('click', () => openBillModal(bill, parcel));\r\n-\r\n             const leftDiv = document.createElement('div');\r\n             leftDiv.className = 'flex-1 min-w-0';\r\n             const nameP = document.createElement('p');\r\n             nameP.className = 'text-white font-semibold truncate';\r\n@@ -1361,28 +1349,23 @@\n             categoryP.className = 'text-sm text-gray-400';\r\n             categoryP.textContent = bill.category ? bill.category.name : 'Sem Categoria';\r\n             leftDiv.appendChild(nameP);\r\n             leftDiv.appendChild(categoryP);\r\n-\r\n             const rightDiv = document.createElement('div');\r\n             rightDiv.className = 'text-right ml-4';\r\n             const amountP = document.createElement('p');\r\n             amountP.className = 'text-lg font-bold text-white';\r\n-            amountP.textContent = parcel.amount.toLocaleString('pt-BR', {\r\n-                style: 'currency',\r\n-                currency: 'BRL'\r\n-            });\r\n+            amountP.textContent = parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n             const statusP = document.createElement('p');\r\n             statusP.className = `text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}`;\r\n             statusP.textContent = parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar';\r\n             rightDiv.appendChild(amountP);\r\n             rightDiv.appendChild(statusP);\r\n-            \r\n             containerDiv.appendChild(leftDiv);\r\n             containerDiv.appendChild(rightDiv);\r\n-\r\n             listContainer.appendChild(containerDiv);\r\n         });\r\n+        console.log(\"4. Adição de todos os elementos concluída.\");\r\n     }\r\n }\r\n \r\n // =================================================================================\r\n"
                },
                {
                    "date": 1754420241862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1991,39 +1991,56 @@\n /**\r\n  * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n  */\r\n function applyFiltersAndSearch() {\r\n-    console.clear();\r\n-    console.log(\"--- EXECUTANDO FILTRO SIMPLIFICADO ---\");\r\n-\r\n+    // 1. Obtém os valores de todos os filtros da tela\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n-    console.log(\"Termo de pesquisa:\", searchTerm);\r\n+    const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n \r\n-    // Se o campo de pesquisa estiver vazio, não faz nada e mostra tudo (comportamento padrão)\r\n-    if (!searchTerm) {\r\n-        renderDailyView(userBoletos);\r\n-        renderCalendar(userBoletos);\r\n-        updateMonthlySummary(userBoletos);\r\n-        return;\r\n-    }\r\n+    // 2. Inicia o processo de filtragem em duas etapas\r\n+    const finalFilteredBoletos = userBoletos.map(bill => {\r\n+        // Etapa A: Filtra as PARCELAS dentro de cada boleto com base no STATUS\r\n+        const filteredParcels = bill.parcels.filter(parcel => {\r\n+            if (activeStatusFilter === 'all') return true;\r\n+            \r\n+            const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+            if (activeStatusFilter === 'paid') return parcel.paid;\r\n+            if (activeStatusFilter === 'unpaid') return !parcel.paid;\r\n+            if (activeStatusFilter === 'overdue') return !parcel.paid && dueDate < today;\r\n+            \r\n+            return false;\r\n+        });\r\n+        \r\n+        // Retorna uma cópia do boleto contendo apenas as parcelas que passaram no filtro de status\r\n+        return { ...bill, parcels: filteredParcels };\r\n \r\n-    // A MÁGICA ESTÁ AQUI: Filtra a lista original de boletos\r\n-    const boletosFiltrados = userBoletos.filter(bill => {\r\n-        // Primeiro, uma verificação de segurança para garantir que 'bill.name' existe\r\n-        if (!bill.name || typeof bill.name !== 'string') {\r\n+    }).filter(bill => {\r\n+        // Etapa B: Filtra a lista de BOLETOS com base nos outros critérios\r\n+\r\n+        // Critério 1: O boleto deve ter sobrado com alguma parcela após o filtro de status\r\n+        if (bill.parcels.length === 0) {\r\n             return false;\r\n         }\r\n-        // Retorna true apenas se o nome do boleto (em minúsculas) incluir o termo de pesquisa\r\n-        return bill.name.toLowerCase().includes(searchTerm);\r\n+\r\n+        // Critério 2: O nome do boleto deve corresponder ao termo de pesquisa\r\n+        // (com uma verificação de segurança para garantir que o nome existe)\r\n+        const matchesSearch = (bill.name && typeof bill.name === 'string' && bill.name.toLowerCase().includes(searchTerm)) || \r\n+                              (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n+\r\n+        // Critério 3: O boleto deve corresponder à categoria selecionada\r\n+        const matchesCategory = (selectedCategoryId === 'all') || (bill.category?._id === selectedCategoryId);\r\n+\r\n+        // O boleto só é mantido na lista final se passar em todos os critérios\r\n+        return matchesSearch && matchesCategory;\r\n     });\r\n \r\n-    // Mostra o resultado do filtro simplificado\r\n-    console.log(\"Resultado do filtro simplificado:\", boletosFiltrados);\r\n-\r\n-    // Envia a lista filtrada (e apenas ela) para TODAS as funções de renderização\r\n-    renderDailyView(boletosFiltrados);\r\n-    renderCalendar(boletosFiltrados);\r\n-    updateMonthlySummary(boletosFiltrados);\r\n+    // 3. Envia a lista final, completamente filtrada, para as funções que desenham a tela\r\n+    renderCalendar(finalFilteredBoletos);\r\n+    renderDailyView(finalFilteredBoletos);\r\n+    updateMonthlySummary(finalFilteredBoletos);\r\n }\r\n \r\n /**\r\n  * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n"
                },
                {
                    "date": 1754420431476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1293,54 +1293,68 @@\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n-    console.log(\"--- Dentro de renderDailyView ---\");\r\n-    \r\n+    const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n+\r\n+    // Se a vista móvel não estiver visível na tela, a função não executa.\r\n+    if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n+        return;\r\n+    }\r\n+\r\n     const listContainer = document.getElementById('dailyBillsList');\r\n-    if (!listContainer) {\r\n-        console.error(\"ERRO CRÍTICO: O elemento 'dailyBillsList' não foi encontrado!\");\r\n+    const dateDisplay = document.getElementById('currentDailyDate');\r\n+    const noBillsMessage = document.getElementById('noDailyBills');\r\n+\r\n+    if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n+        // Se algum elemento essencial não for encontrado, interrompe a função.\r\n         return;\r\n     }\r\n-    console.log(\"Elemento 'listContainer' encontrado:\", listContainer);\r\n-    \r\n-    const noBillsMessage = document.getElementById('noDailyBills');\r\n-    \r\n+\r\n+    // Atualiza a data exibida no topo da lista.\r\n+    dateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n+        weekday: 'long',\r\n+        day: '2-digit',\r\n+        month: 'long'\r\n+    });\r\n+\r\n     const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n-    \r\n+\r\n+    // Filtra a lista recebida para encontrar apenas as parcelas do dia que está sendo visualizado.\r\n     const parcelsForDay = boletosToRender\r\n-        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel, parentBill: bill })))\r\n+        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel,\r\n+            parentBill: bill\r\n+        })))\r\n         .filter(parcel => parcel.dueDate === dateStr);\r\n-        \r\n-    console.log(`Encontradas ${parcelsForDay.length} parcelas para o dia ${dateStr}`);\r\n \r\n-    console.log(\"1. Limpando a lista antiga da tela...\");\r\n+    // Limpa de forma direta todos os boletos que estavam na tela.\r\n     listContainer.innerHTML = '';\r\n-    console.log(\"2. Lista teoricamente limpa.\");\r\n \r\n     if (parcelsForDay.length === 0) {\r\n-        console.log(\"3. Nenhuma parcela para mostrar, exibindo mensagem de 'Nenhum boleto'.\");\r\n-        if(noBillsMessage) listContainer.appendChild(noBillsMessage);\r\n+        // Se não houver parcelas para o dia, mostra a mensagem de \"Nenhum boleto\".\r\n         noBillsMessage.classList.remove('hidden');\r\n+        listContainer.appendChild(noBillsMessage); // Garante que a mensagem esteja dentro do container.\r\n     } else {\r\n-        console.log(`3. Encontradas ${parcelsForDay.length} parcelas. Iniciando a adição de elementos...`);\r\n-        if(noBillsMessage) noBillsMessage.classList.add('hidden');\r\n-        \r\n-        parcelsForDay.forEach((parcel, index) => {\r\n-            console.log(`Adicionando o item ${index + 1}: ${parcel.parentBill.name}`);\r\n-            \r\n-            // ... (todo o código de criação de elementos permanece o mesmo)\r\n+        // Se houver parcelas, esconde a mensagem e começa a criar os elementos.\r\n+        noBillsMessage.classList.add('hidden');\r\n+        parcelsForDay.forEach(parcel => {\r\n             const bill = parcel.parentBill;\r\n             const today = new Date();\r\n             today.setHours(0, 0, 0, 0);\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             const isOverdue = !parcel.paid && dueDate < today;\r\n             let statusClass = 'border-l-4 border-indigo-500';\r\n-            if (parcel.paid) statusClass = 'border-l-4 border-green-500';\r\n-            else if (isOverdue) statusClass = 'border-l-4 border-red-500';\r\n+\r\n+            if (parcel.paid) {\r\n+                statusClass = 'border-l-4 border-green-500';\r\n+            } else if (isOverdue) {\r\n+                statusClass = 'border-l-4 border-red-500';\r\n+            }\r\n+\r\n             const containerDiv = document.createElement('div');\r\n             containerDiv.className = `bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}`;\r\n             containerDiv.addEventListener('click', () => openBillModal(bill, parcel));\r\n+\r\n             const leftDiv = document.createElement('div');\r\n             leftDiv.className = 'flex-1 min-w-0';\r\n             const nameP = document.createElement('p');\r\n             nameP.className = 'text-white font-semibold truncate';\r\n@@ -1349,23 +1363,28 @@\n             categoryP.className = 'text-sm text-gray-400';\r\n             categoryP.textContent = bill.category ? bill.category.name : 'Sem Categoria';\r\n             leftDiv.appendChild(nameP);\r\n             leftDiv.appendChild(categoryP);\r\n+\r\n             const rightDiv = document.createElement('div');\r\n             rightDiv.className = 'text-right ml-4';\r\n             const amountP = document.createElement('p');\r\n             amountP.className = 'text-lg font-bold text-white';\r\n-            amountP.textContent = parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+            amountP.textContent = parcel.amount.toLocaleString('pt-BR', {\r\n+                style: 'currency',\r\n+                currency: 'BRL'\r\n+            });\r\n             const statusP = document.createElement('p');\r\n             statusP.className = `text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}`;\r\n             statusP.textContent = parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar';\r\n             rightDiv.appendChild(amountP);\r\n             rightDiv.appendChild(statusP);\r\n+\r\n             containerDiv.appendChild(leftDiv);\r\n             containerDiv.appendChild(rightDiv);\r\n+\r\n             listContainer.appendChild(containerDiv);\r\n         });\r\n-        console.log(\"4. Adição de todos os elementos concluída.\");\r\n     }\r\n }\r\n \r\n // =================================================================================\r\n"
                },
                {
                    "date": 1754420452224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1293,68 +1293,54 @@\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n-    const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n-\r\n-    // Se a vista móvel não estiver visível na tela, a função não executa.\r\n-    if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n+    console.log(\"--- Dentro de renderDailyView ---\");\r\n+    \r\n+    const listContainer = document.getElementById('dailyBillsList');\r\n+    if (!listContainer) {\r\n+        console.error(\"ERRO CRÍTICO: O elemento 'dailyBillsList' não foi encontrado!\");\r\n         return;\r\n     }\r\n-\r\n-    const listContainer = document.getElementById('dailyBillsList');\r\n-    const dateDisplay = document.getElementById('currentDailyDate');\r\n+    console.log(\"Elemento 'listContainer' encontrado:\", listContainer);\r\n+    \r\n     const noBillsMessage = document.getElementById('noDailyBills');\r\n-\r\n-    if (!listContainer || !dateDisplay || !noBillsMessage) {\r\n-        // Se algum elemento essencial não for encontrado, interrompe a função.\r\n-        return;\r\n-    }\r\n-\r\n-    // Atualiza a data exibida no topo da lista.\r\n-    dateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n-        weekday: 'long',\r\n-        day: '2-digit',\r\n-        month: 'long'\r\n-    });\r\n-\r\n+    \r\n     const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n-\r\n-    // Filtra a lista recebida para encontrar apenas as parcelas do dia que está sendo visualizado.\r\n+    \r\n     const parcelsForDay = boletosToRender\r\n-        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel,\r\n-            parentBill: bill\r\n-        })))\r\n+        .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel, parentBill: bill })))\r\n         .filter(parcel => parcel.dueDate === dateStr);\r\n+        \r\n+    console.log(`Encontradas ${parcelsForDay.length} parcelas para o dia ${dateStr}`);\r\n \r\n-    // Limpa de forma direta todos os boletos que estavam na tela.\r\n+    console.log(\"1. Limpando a lista antiga da tela...\");\r\n     listContainer.innerHTML = '';\r\n+    console.log(\"2. Lista teoricamente limpa.\");\r\n \r\n     if (parcelsForDay.length === 0) {\r\n-        // Se não houver parcelas para o dia, mostra a mensagem de \"Nenhum boleto\".\r\n+        console.log(\"3. Nenhuma parcela para mostrar, exibindo mensagem de 'Nenhum boleto'.\");\r\n+        if(noBillsMessage) listContainer.appendChild(noBillsMessage);\r\n         noBillsMessage.classList.remove('hidden');\r\n-        listContainer.appendChild(noBillsMessage); // Garante que a mensagem esteja dentro do container.\r\n     } else {\r\n-        // Se houver parcelas, esconde a mensagem e começa a criar os elementos.\r\n-        noBillsMessage.classList.add('hidden');\r\n-        parcelsForDay.forEach(parcel => {\r\n+        console.log(`3. Encontradas ${parcelsForDay.length} parcelas. Iniciando a adição de elementos...`);\r\n+        if(noBillsMessage) noBillsMessage.classList.add('hidden');\r\n+        \r\n+        parcelsForDay.forEach((parcel, index) => {\r\n+            console.log(`Adicionando o item ${index + 1}: ${parcel.parentBill.name}`);\r\n+            \r\n+            // ... (todo o código de criação de elementos permanece o mesmo)\r\n             const bill = parcel.parentBill;\r\n             const today = new Date();\r\n             today.setHours(0, 0, 0, 0);\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             const isOverdue = !parcel.paid && dueDate < today;\r\n             let statusClass = 'border-l-4 border-indigo-500';\r\n-\r\n-            if (parcel.paid) {\r\n-                statusClass = 'border-l-4 border-green-500';\r\n-            } else if (isOverdue) {\r\n-                statusClass = 'border-l-4 border-red-500';\r\n-            }\r\n-\r\n+            if (parcel.paid) statusClass = 'border-l-4 border-green-500';\r\n+            else if (isOverdue) statusClass = 'border-l-4 border-red-500';\r\n             const containerDiv = document.createElement('div');\r\n             containerDiv.className = `bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}`;\r\n             containerDiv.addEventListener('click', () => openBillModal(bill, parcel));\r\n-\r\n             const leftDiv = document.createElement('div');\r\n             leftDiv.className = 'flex-1 min-w-0';\r\n             const nameP = document.createElement('p');\r\n             nameP.className = 'text-white font-semibold truncate';\r\n@@ -1363,28 +1349,23 @@\n             categoryP.className = 'text-sm text-gray-400';\r\n             categoryP.textContent = bill.category ? bill.category.name : 'Sem Categoria';\r\n             leftDiv.appendChild(nameP);\r\n             leftDiv.appendChild(categoryP);\r\n-\r\n             const rightDiv = document.createElement('div');\r\n             rightDiv.className = 'text-right ml-4';\r\n             const amountP = document.createElement('p');\r\n             amountP.className = 'text-lg font-bold text-white';\r\n-            amountP.textContent = parcel.amount.toLocaleString('pt-BR', {\r\n-                style: 'currency',\r\n-                currency: 'BRL'\r\n-            });\r\n+            amountP.textContent = parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n             const statusP = document.createElement('p');\r\n             statusP.className = `text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}`;\r\n             statusP.textContent = parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar';\r\n             rightDiv.appendChild(amountP);\r\n             rightDiv.appendChild(statusP);\r\n-\r\n             containerDiv.appendChild(leftDiv);\r\n             containerDiv.appendChild(rightDiv);\r\n-\r\n             listContainer.appendChild(containerDiv);\r\n         });\r\n+        console.log(\"4. Adição de todos os elementos concluída.\");\r\n     }\r\n }\r\n \r\n // =================================================================================\r\n"
                },
                {
                    "date": 1754420520669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1293,43 +1293,28 @@\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n-    console.log(\"--- Dentro de renderDailyView ---\");\r\n-    \r\n     const listContainer = document.getElementById('dailyBillsList');\r\n     if (!listContainer) {\r\n         console.error(\"ERRO CRÍTICO: O elemento 'dailyBillsList' não foi encontrado!\");\r\n         return;\r\n     }\r\n-    console.log(\"Elemento 'listContainer' encontrado:\", listContainer);\r\n     \r\n     const noBillsMessage = document.getElementById('noDailyBills');\r\n-    \r\n-    const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n-    \r\n+    const dateStr = currentDailyViewDate.toISOString().split('T')[0];  \r\n     const parcelsForDay = boletosToRender\r\n         .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel, parentBill: bill })))\r\n         .filter(parcel => parcel.dueDate === dateStr);\r\n-        \r\n-    console.log(`Encontradas ${parcelsForDay.length} parcelas para o dia ${dateStr}`);\r\n-\r\n-    console.log(\"1. Limpando a lista antiga da tela...\");\r\n     listContainer.innerHTML = '';\r\n-    console.log(\"2. Lista teoricamente limpa.\");\r\n \r\n     if (parcelsForDay.length === 0) {\r\n-        console.log(\"3. Nenhuma parcela para mostrar, exibindo mensagem de 'Nenhum boleto'.\");\r\n         if(noBillsMessage) listContainer.appendChild(noBillsMessage);\r\n         noBillsMessage.classList.remove('hidden');\r\n     } else {\r\n-        console.log(`3. Encontradas ${parcelsForDay.length} parcelas. Iniciando a adição de elementos...`);\r\n         if(noBillsMessage) noBillsMessage.classList.add('hidden');\r\n         \r\n         parcelsForDay.forEach((parcel, index) => {\r\n-            console.log(`Adicionando o item ${index + 1}: ${parcel.parentBill.name}`);\r\n-            \r\n-            // ... (todo o código de criação de elementos permanece o mesmo)\r\n             const bill = parcel.parentBill;\r\n             const today = new Date();\r\n             today.setHours(0, 0, 0, 0);\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n@@ -1363,9 +1348,8 @@\n             containerDiv.appendChild(leftDiv);\r\n             containerDiv.appendChild(rightDiv);\r\n             listContainer.appendChild(containerDiv);\r\n         });\r\n-        console.log(\"4. Adição de todos os elementos concluída.\");\r\n     }\r\n }\r\n \r\n // =================================================================================\r\n"
                },
                {
                    "date": 1754420624408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1293,39 +1293,61 @@\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n  */\r\n function renderDailyView(boletosToRender = userBoletos) {\r\n+    const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n+    if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n+        return;\r\n+    }\r\n+\r\n     const listContainer = document.getElementById('dailyBillsList');\r\n-    if (!listContainer) {\r\n-        console.error(\"ERRO CRÍTICO: O elemento 'dailyBillsList' não foi encontrado!\");\r\n+    const dateDisplay = document.getElementById('currentDailyDate');\r\n+\r\n+    if (!listContainer || !dateDisplay) {\r\n         return;\r\n     }\r\n-    \r\n-    const noBillsMessage = document.getElementById('noDailyBills');\r\n-    const dateStr = currentDailyViewDate.toISOString().split('T')[0];  \r\n+\r\n+    dateDisplay.textContent = currentDailyViewDate.toLocaleDateString('pt-BR', {\r\n+        weekday: 'long',\r\n+        day: '2-digit',\r\n+        month: 'long'\r\n+    });\r\n+\r\n+    const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n     const parcelsForDay = boletosToRender\r\n         .flatMap(bill => bill.parcels.map(parcel => ({ ...parcel, parentBill: bill })))\r\n         .filter(parcel => parcel.dueDate === dateStr);\r\n+\r\n+    // Limpa de forma direta todos os boletos antigos E a mensagem \"Nenhum boleto\".\r\n     listContainer.innerHTML = '';\r\n \r\n     if (parcelsForDay.length === 0) {\r\n-        if(noBillsMessage) listContainer.appendChild(noBillsMessage);\r\n-        noBillsMessage.classList.remove('hidden');\r\n+        // Se não houver parcelas, recria e exibe a mensagem de \"Nenhum boleto\".\r\n+        const noBillsMessage = document.createElement('div');\r\n+        noBillsMessage.id = 'noDailyBills';\r\n+        noBillsMessage.className = 'text-center text-gray-400 py-4';\r\n+        noBillsMessage.textContent = 'Nenhum boleto encontrado para este dia/filtro.';\r\n+        listContainer.appendChild(noBillsMessage);\r\n     } else {\r\n-        if(noBillsMessage) noBillsMessage.classList.add('hidden');\r\n-        \r\n-        parcelsForDay.forEach((parcel, index) => {\r\n+        // Se houver parcelas, começa a criar e adicionar os novos elementos.\r\n+        parcelsForDay.forEach(parcel => {\r\n             const bill = parcel.parentBill;\r\n             const today = new Date();\r\n             today.setHours(0, 0, 0, 0);\r\n             const dueDate = new Date(parcel.dueDate + 'T00:00:00');\r\n             const isOverdue = !parcel.paid && dueDate < today;\r\n             let statusClass = 'border-l-4 border-indigo-500';\r\n-            if (parcel.paid) statusClass = 'border-l-4 border-green-500';\r\n-            else if (isOverdue) statusClass = 'border-l-4 border-red-500';\r\n+\r\n+            if (parcel.paid) {\r\n+                statusClass = 'border-l-4 border-green-500';\r\n+            } else if (isOverdue) {\r\n+                statusClass = 'border-l-4 border-red-500';\r\n+            }\r\n+\r\n             const containerDiv = document.createElement('div');\r\n             containerDiv.className = `bg-gray-700/50 p-4 rounded-lg flex items-center justify-between cursor-pointer hover:bg-gray-700 ${statusClass}`;\r\n             containerDiv.addEventListener('click', () => openBillModal(bill, parcel));\r\n+\r\n             const leftDiv = document.createElement('div');\r\n             leftDiv.className = 'flex-1 min-w-0';\r\n             const nameP = document.createElement('p');\r\n             nameP.className = 'text-white font-semibold truncate';\r\n@@ -1334,20 +1356,26 @@\n             categoryP.className = 'text-sm text-gray-400';\r\n             categoryP.textContent = bill.category ? bill.category.name : 'Sem Categoria';\r\n             leftDiv.appendChild(nameP);\r\n             leftDiv.appendChild(categoryP);\r\n+\r\n             const rightDiv = document.createElement('div');\r\n             rightDiv.className = 'text-right ml-4';\r\n             const amountP = document.createElement('p');\r\n             amountP.className = 'text-lg font-bold text-white';\r\n-            amountP.textContent = parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+            amountP.textContent = parcel.amount.toLocaleString('pt-BR', {\r\n+                style: 'currency',\r\n+                currency: 'BRL'\r\n+            });\r\n             const statusP = document.createElement('p');\r\n             statusP.className = `text-xs ${parcel.paid ? 'text-green-400' : isOverdue ? 'text-red-400' : 'text-yellow-400'}`;\r\n             statusP.textContent = parcel.paid ? 'Pago' : isOverdue ? 'Vencido' : 'A Pagar';\r\n             rightDiv.appendChild(amountP);\r\n             rightDiv.appendChild(statusP);\r\n+            \r\n             containerDiv.appendChild(leftDiv);\r\n             containerDiv.appendChild(rightDiv);\r\n+\r\n             listContainer.appendChild(containerDiv);\r\n         });\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1754420941150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,43 +178,78 @@\n // FUNÇÕES DE LÓGICA E UI\r\n // =================================================================================\r\n \r\n /**\r\n- * Atualiza o resumo financeiro com base na lista de boletos e no mês/ano atuais.\r\n+ * Atualiza o resumo financeiro. A lógica agora é adaptativa:\r\n+ * - Em vistas desktop, mostra os totais do MÊS.\r\n+ * - Em vistas móveis, mostra os totais do DIA.\r\n  * @param {Array} boletosForSummary - A lista de boletos a ser usada (filtrada ou completa).\r\n  */\r\n function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n+    const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n+    const isMobileView = dailyViewContainer && dailyViewContainer.offsetParent !== null;\r\n \r\n-    // --- CÁLCULOS PARA O MÊS ATUAL (JÁ ESTAVAM CORRETOS) ---\r\n-    const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n-        .filter(parcel => {\r\n-            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n-            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n-        });\r\n+    // --- Referências aos elementos da UI ---\r\n+    const totalLabel = document.getElementById('summaryTotalLabel');\r\n+    const paidLabel = document.getElementById('summaryPaidLabel');\r\n+    const unpaidLabel = document.getElementById('summaryUnpaidLabel');\r\n \r\n-    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n-    const totalNaoPagoMes = totalMes - totalPagoMes;\r\n+    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n \r\n-    // --- CÁLCULO GLOBAL DE VENCIDOS (AQUI ESTAVA O BUG) ---\r\n-    \r\n-    // CORREÇÃO: Trocado \"userBoletos\" por \"boletosForSummary\" para usar a lista já filtrada.\r\n+    // --- CÁLCULO DE CONTAS VENCIDAS (é global e igual para ambas as vistas) ---\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n     const overdueParcels = boletosForSummary.flatMap(bill => bill.parcels)\r\n         .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n     const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n \r\n-    // --- ATUALIZAÇÃO DA INTERFACE ---\r\n-    const formatCurrency = (value) => value.toLocaleString('pt-BR', {\r\n-        style: 'currency',\r\n-        currency: 'BRL'\r\n-    });\r\n+    if (isMobileView) {\r\n+        // --- LÓGICA PARA A VISTA MÓVEL (DIÁRIA) ---\r\n \r\n-    document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n-    document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n-    document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n-    document.getElementById('summaryOverdue').textContent = formatCurrency(totalOverdue);\r\n+        // Atualiza os títulos dos cartões para o contexto diário\r\n+        if (totalLabel) totalLabel.textContent = 'TOTAL NO DIA';\r\n+        if (paidLabel) paidLabel.textContent = 'PAGO NO DIA';\r\n+        if (unpaidLabel) unpaidLabel.textContent = 'NÃO PAGO NO DIA';\r\n+\r\n+        // Calcula os valores para o dia atualmente em visualização\r\n+        const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n+        const parcelsForDay = boletosForSummary.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => parcel.dueDate === dateStr);\r\n+\r\n+        const totalDia = parcelsForDay.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalPagoDia = parcelsForDay.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalNaoPagoDia = totalDia - totalPagoDia;\r\n+\r\n+        // Atualiza a interface com os valores diários\r\n+        document.getElementById('summaryTotal').textContent = formatCurrency(totalDia);\r\n+        document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoDia);\r\n+        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoDia);\r\n+\r\n+    } else {\r\n+        // --- LÓGICA PARA A VISTA DESKTOP (MENSAL) ---\r\n+\r\n+        // Garante que os títulos dos cartões estão no contexto mensal\r\n+        if (totalLabel) totalLabel.textContent = 'TOTAL NO MÊS';\r\n+        if (paidLabel) paidLabel.textContent = 'TOTAL PAGO';\r\n+        if (unpaidLabel) unpaidLabel.textContent = 'NÃO PAGO';\r\n+\r\n+        // Lógica original de cálculo mensal\r\n+        const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n+            .filter(parcel => {\r\n+                const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n+                return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n+            });\r\n+\r\n+        const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n+        const totalNaoPagoMes = totalMes - totalPagoMes;\r\n+\r\n+        // Atualiza a interface com os valores mensais\r\n+        document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n+        document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n+        document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n+    }\r\n }\r\n \r\n \r\n /**\r\n"
                },
                {
                    "date": 1754422360374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2093,8 +2093,14 @@\n  * Inicializa a funcionalidade de arrastar e soltar (drag and drop) no calendário,\r\n  * agora com lógica para parcelas recorrentes.\r\n  */\r\n function initializeDragAndDrop() {\r\n+    // Adicionamos esta condição no início da função\r\n+    // 1024px é o breakpoint 'lg' do Tailwind, onde o calendário completo aparece.\r\n+    if (window.innerWidth < 1024) {\r\n+        return; // Em telas menores que 1024px, a função para aqui e não ativa o drag-and-drop.\r\n+    }\r\n+\r\n     const dayCells = document.querySelectorAll('.day-cell-droppable');\r\n \r\n     dayCells.forEach(cell => {\r\n         new Sortable(cell, {\r\n@@ -2116,13 +2122,10 @@\n \r\n                 if (!parentBoleto || !originalParcel) return;\r\n \r\n                 if (parentBoleto.parcels.length > 1) {\r\n-                    // --- CORREÇÃO AQUI ---\r\n-                    // 1. Definimos a variável 'selectedParcel' que estava em falta.\r\n                     selectedParcel = { ...originalParcel, parentId: parentBoleto._id };\r\n \r\n-                    // 2. O resto da lógica continua a mesma\r\n                     const updatedParcelData = {\r\n                         ...originalParcel,\r\n                         dueDate: newDate,\r\n                     };\r\n@@ -2138,9 +2141,8 @@\n                     recurrentEditModal.classList.remove('hidden');\r\n                     renderCalendar();\r\n \r\n                 } else {\r\n-                    // Lógica para parcela única (continua a mesma)\r\n                     showLoader();\r\n                     try {\r\n                         await api.updateParcel(boletoId, parcelId, { dueDate: newDate });\r\n                         showToast('Data da parcela atualizada com sucesso!', 'success');\r\n"
                },
                {
                    "date": 1754422416131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -923,21 +923,24 @@\n  * Inicializa a funcionalidade de arrastar e soltar para os cartões do dashboard\r\n  * e salva a nova ordem no localStorage. (VERSÃO CORRIGIDA)\r\n  */\r\n function initializeDashboardDragAndDrop() {\r\n+    // Mesma verificação de tela\r\n+    if (window.innerWidth < 1024) {\r\n+        return;\r\n+    }\r\n+    \r\n     const kpiGrid = document.getElementById('dashboard-kpi-grid');\r\n     const mainGrid = document.getElementById('dashboard-main-grid');\r\n \r\n-    // Vamos guardar as instâncias do Sortable em variáveis\r\n     let kpiSortable, mainSortable;\r\n \r\n     const saveOrder = (gridType) => {\r\n         if (!currentLoggedInUser || !currentLoggedInUser._id) return;\r\n \r\n         const key = `dashboardOrder_${gridType}_${currentLoggedInUser._id}`;\r\n         let order;\r\n \r\n-        // Usamos a instância correta para obter a ordem\r\n         if (gridType === 'kpi' && kpiSortable) {\r\n             order = kpiSortable.toArray();\r\n         } else if (gridType === 'main' && mainSortable) {\r\n             order = mainSortable.toArray();\r\n@@ -948,19 +951,16 @@\n         }\r\n     };\r\n \r\n     if (kpiGrid) {\r\n-        // Guardamos a instância na nossa variável\r\n         kpiSortable = new Sortable(kpiGrid, {\r\n             animation: 150,\r\n             ghostClass: 'opacity-50',\r\n-            // A chamada agora é mais simples\r\n             onEnd: () => saveOrder('kpi'),\r\n         });\r\n     }\r\n \r\n     if (mainGrid) {\r\n-        // Guardamos a instância na nossa variável\r\n         mainSortable = new Sortable(mainGrid, {\r\n             animation: 150,\r\n             ghostClass: 'opacity-50',\r\n             onEnd: () => saveOrder('main'),\r\n"
                },
                {
                    "date": 1754422753029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,16 +187,14 @@\n function updateMonthlySummary(boletosForSummary = userBoletos) {\r\n     const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n     const isMobileView = dailyViewContainer && dailyViewContainer.offsetParent !== null;\r\n \r\n-    // --- Referências aos elementos da UI ---\r\n     const totalLabel = document.getElementById('summaryTotalLabel');\r\n     const paidLabel = document.getElementById('summaryPaidLabel');\r\n     const unpaidLabel = document.getElementById('summaryUnpaidLabel');\r\n \r\n     const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n \r\n-    // --- CÁLCULO DE CONTAS VENCIDAS (é global e igual para ambas as vistas) ---\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n     const overdueParcels = boletosForSummary.flatMap(bill => bill.parcels)\r\n         .filter(parcel => !parcel.paid && new Date(parcel.dueDate + 'T00:00:00') < today);\r\n@@ -205,36 +203,33 @@\n \r\n     if (isMobileView) {\r\n         // --- LÓGICA PARA A VISTA MÓVEL (DIÁRIA) ---\r\n \r\n-        // Atualiza os títulos dos cartões para o contexto diário\r\n-        if (totalLabel) totalLabel.textContent = 'TOTAL NO DIA';\r\n-        if (paidLabel) paidLabel.textContent = 'PAGO NO DIA';\r\n-        if (unpaidLabel) unpaidLabel.textContent = 'NÃO PAGO NO DIA';\r\n+        // Altera os títulos para as versões curtas que você pediu\r\n+        if (totalLabel) totalLabel.textContent = 'Total';\r\n+        if (paidLabel) paidLabel.textContent = 'Pago';\r\n+        if (unpaidLabel) unpaidLabel.textContent = 'Não Pago';\r\n \r\n-        // Calcula os valores para o dia atualmente em visualização\r\n         const dateStr = currentDailyViewDate.toISOString().split('T')[0];\r\n         const parcelsForDay = boletosForSummary.flatMap(bill => bill.parcels)\r\n             .filter(parcel => parcel.dueDate === dateStr);\r\n \r\n         const totalDia = parcelsForDay.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n         const totalPagoDia = parcelsForDay.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n         const totalNaoPagoDia = totalDia - totalPagoDia;\r\n \r\n-        // Atualiza a interface com os valores diários\r\n         document.getElementById('summaryTotal').textContent = formatCurrency(totalDia);\r\n         document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoDia);\r\n         document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoDia);\r\n \r\n     } else {\r\n         // --- LÓGICA PARA A VISTA DESKTOP (MENSAL) ---\r\n \r\n-        // Garante que os títulos dos cartões estão no contexto mensal\r\n-        if (totalLabel) totalLabel.textContent = 'TOTAL NO MÊS';\r\n-        if (paidLabel) paidLabel.textContent = 'TOTAL PAGO';\r\n-        if (unpaidLabel) unpaidLabel.textContent = 'NÃO PAGO';\r\n+        // Garante que os títulos na vista desktop também sejam de uma linha\r\n+        if (totalLabel) totalLabel.textContent = 'Total no Mês';\r\n+        if (paidLabel) paidLabel.textContent = 'Total Pago';\r\n+        if (unpaidLabel) unpaidLabel.textContent = 'Não Pago';\r\n \r\n-        // Lógica original de cálculo mensal\r\n         const parcelsThisMonth = boletosForSummary.flatMap(bill => bill.parcels)\r\n             .filter(parcel => {\r\n                 const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n                 return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n@@ -243,9 +238,8 @@\n         const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n         const totalPagoMes = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n         const totalNaoPagoMes = totalMes - totalPagoMes;\r\n \r\n-        // Atualiza a interface com os valores mensais\r\n         document.getElementById('summaryTotal').textContent = formatCurrency(totalMes);\r\n         document.getElementById('summaryPaid').textContent = formatCurrency(totalPagoMes);\r\n         document.getElementById('summaryUnpaid').textContent = formatCurrency(totalNaoPagoMes);\r\n     }\r\n"
                },
                {
                    "date": 1754665901512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1623,11 +1623,11 @@\n \r\n     const token = localStorage.getItem('authToken');\r\n     if (!token) {\r\n         // Se não houver token, o utilizador não está logado.\r\n-        // Idealmente, a página de login (Index.html) deveria ser mostrada.\r\n+        // Idealmente, a página de login (index.html) deveria ser mostrada.\r\n         // Como estamos em OrgBoletos.html, vamos redirecionar.\r\n-        window.location.href = 'Index.html';\r\n+        window.location.href = 'index.html';\r\n         return;\r\n     }\r\n \r\n     try {\r\n@@ -1657,9 +1657,9 @@\n         showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n         localStorage.removeItem('authToken');\r\n         localStorage.removeItem('superAdminToken');\r\n         setTimeout(() => {\r\n-            window.location.href = 'Index.html';\r\n+            window.location.href = 'index.html';\r\n         }, 2000); // Aguarda 2 segundos para o utilizador ler a mensagem\r\n     } finally {\r\n         // Esconde a tela de carregamento inicial\r\n         document.getElementById('loadingScreen').classList.add('hidden');\r\n@@ -1668,9 +1668,9 @@\n \r\n function logout() {\r\n     localStorage.removeItem('authToken');\r\n     localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n+    window.location.href = 'index.html';\r\n }\r\n \r\n /**\r\n  * Define a sessão de representação do admin.\r\n@@ -2333,9 +2333,9 @@\n \r\n const token = localStorage.getItem('authToken');\r\n if (!token) {\r\n     // Se não houver token, redireciona para a página de login\r\n-    window.location.href = 'Index.html';\r\n+    window.location.href = 'index.html';\r\n     return;\r\n }\r\n \r\n try {\r\n@@ -2369,9 +2369,9 @@\n         showToast('Sua sessão expirou ou é inválida. Por favor, faça login novamente.', 'error');\r\n         localStorage.removeItem('authToken');\r\n         localStorage.removeItem('superAdminToken');\r\n         setTimeout(() => {\r\n-            window.location.href = 'Index.html';\r\n+            window.location.href = 'index.html';\r\n         }, 2000); \r\n     }  finally {\r\n     // Esconde a tela de carregamento inicial\r\n     document.getElementById('loadingScreen').classList.add('hidden');\r\n@@ -2388,9 +2388,9 @@\n if (closePermissionsModal) closePermissionsModal.addEventListener('click', () => permissionsModal.classList.add('hidden'));\r\n if (savePermissionsBtn) savePermissionsBtn.addEventListener('click', handleSavePermissions);\r\n if (logoutBtn) {\r\n     logoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n+        window.location.href = 'index.html';\r\n     });\r\n }\r\n if (adminLogoutBtn) adminLogoutBtn.addEventListener('click', logout);\r\n \r\n@@ -2428,24 +2428,24 @@\n     openAddBillModalBtn.addEventListener('click', openAddBillModal);\r\n }\r\n \r\n const handleRedirectToHome = () => {\r\n-    window.location.href = 'Index.html';\r\n+    window.location.href = 'index.html';\r\n };\r\n \r\n const handleFullLogoutAndRedirect = () => {\r\n     localStorage.removeItem('authToken');\r\n     localStorage.removeItem('superAdminToken');\r\n-    window.location.href = 'Index.html';\r\n+    window.location.href = 'index.html';\r\n };\r\n \r\n if (subscriptionLogoutBtn) {\r\n     subscriptionLogoutBtn.addEventListener('click', handleRedirectToHome);\r\n }\r\n \r\n if (blockedAccessLogoutBtn) {\r\n     blockedAccessLogoutBtn.addEventListener('click', () => {\r\n-        window.location.href = 'Index.html';\r\n+        window.location.href = 'index.html';\r\n     });\r\n }\r\n \r\n // --- Lógica do Menu de Configurações (Engrenagem) ---\r\n"
                },
                {
                    "date": 1754665995140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1624,9 +1624,9 @@\n     const token = localStorage.getItem('authToken');\r\n     if (!token) {\r\n         // Se não houver token, o utilizador não está logado.\r\n         // Idealmente, a página de login (index.html) deveria ser mostrada.\r\n-        // Como estamos em OrgBoletos.html, vamos redirecionar.\r\n+        // Como estamos em orgboletos.html, vamos redirecionar.\r\n         window.location.href = 'index.html';\r\n         return;\r\n     }\r\n \r\n"
                },
                {
                    "date": 1754685854251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -450,8 +450,9 @@\n /**\r\n  * Atualiza a interface principal com os dados dos boletos.\r\n  */\r\n async function updateBillsOrganizer() {\r\n+    showLoader();\r\n     try {\r\n         userBoletos = await api.getBoletos();\r\n \r\n         if (!userBoletos || userBoletos.length === 0) {\r\n@@ -474,8 +475,10 @@\n \r\n     } catch (error) {\r\n         console.error(\"ERRO GRAVE DENTRO DE updateBillsOrganizer:\", error);\r\n         showToast(error.message, 'error');\r\n+    }finally {\r\n+        hideLoader(); // Adicionado\r\n     }\r\n }\r\n \r\n async function showMainApp() {\r\n@@ -733,8 +736,9 @@\n     }\r\n }\r\n \r\n async function populateCategoryFilter() {\r\n+    showLoader();\r\n     try {\r\n         const categories = await api.getCategories();\r\n         categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>'; // Opção padrão\r\n         categories.forEach(category => {\r\n@@ -743,8 +747,10 @@\n     } catch (error) {\r\n         console.error(\"Erro ao popular filtro de categorias:\", error);\r\n         // Se der erro, garante que a opção padrão exista\r\n         categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n+    } finally {\r\n+        hideLoader(); // Adicionado\r\n     }\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1754685879180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -748,9 +748,9 @@\n         console.error(\"Erro ao popular filtro de categorias:\", error);\r\n         // Se der erro, garante que a opção padrão exista\r\n         categoryFilterSelect.innerHTML = '<option value=\"all\">Todas as Categorias</option>';\r\n     } finally {\r\n-        hideLoader(); // Adicionado\r\n+        hideLoader();\r\n     }\r\n }\r\n \r\n /**\r\n@@ -1305,8 +1305,9 @@\n /**\r\n  * Busca o anúncio ativo mais recente e o exibe no banner.\r\n  */\r\n async function fetchAndDisplayAnnouncement() {\r\n+    showLoader();\r\n     try {\r\n         const announcement = await api.getActiveAnnouncement();\r\n \r\n         // Se existir um anúncio e ele tiver uma mensagem\r\n@@ -1320,8 +1321,10 @@\n             globalAnnouncementBanner.classList.remove('hidden');\r\n         }\r\n     } catch (error) {\r\n         console.error(\"Não foi possível buscar o anúncio:\", error);\r\n+    } finally {\r\n+        hideLoader();\r\n     }\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1754701326919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2920,8 +2920,42 @@\n         applyFiltersAndSearch(); \r\n     });\r\n }\r\n \r\n+// NOVO: Lógica para navegar entre os dias com swipe no mobile\r\n+const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n+if (dailyViewContainer) {\r\n+    let touchStartX = 0;\r\n+    let touchEndX = 0;\r\n+    const swipeThreshold = 50; // Distância mínima para o gesto ser considerado um swipe\r\n \r\n+    dailyViewContainer.addEventListener('touchstart', function(event) {\r\n+        touchStartX = event.changedTouches[0].screenX;\r\n+    }, { passive: true });\r\n+\r\n+    dailyViewContainer.addEventListener('touchend', function(event) {\r\n+        touchEndX = event.changedTouches[0].screenX;\r\n+        handleSwipe();\r\n+    });\r\n+\r\n+    function handleSwipe() {\r\n+        const swipeDistance = touchEndX - touchStartX;\r\n+\r\n+        // Ignora toques que não são swipes longos o suficiente\r\n+        if (Math.abs(swipeDistance) < swipeThreshold) {\r\n+            return;\r\n+        }\r\n+\r\n+        if (swipeDistance > 0) {\r\n+            // Swipe para a direita -> Dia anterior\r\n+            if (prevDayBtn) prevDayBtn.click();\r\n+        } else {\r\n+            // Swipe para a esquerda -> Próximo dia\r\n+            if (nextDayBtn) nextDayBtn.click();\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n initializeDashboardDragAndDrop();\r\n \r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754701721778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1329,10 +1329,11 @@\n \r\n /**\r\n  * Renderiza a visualização de lista diária para dispositivos móveis.\r\n  * @param {Array} boletosToRender - A lista de boletos a ser usada para a renderização.\r\n+ * @param {string|null} slideDirection - A direção do swipe ('left' ou 'right') para aplicar a animação de entrada correta.\r\n  */\r\n-function renderDailyView(boletosToRender = userBoletos) {\r\n+function renderDailyView(boletosToRender = userBoletos, slideDirection = null) {\r\n     const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n     if (!dailyViewContainer || dailyViewContainer.offsetParent === null) {\r\n         return;\r\n     }\r\n@@ -1357,8 +1358,20 @@\n \r\n     // Limpa de forma direta todos os boletos antigos E a mensagem \"Nenhum boleto\".\r\n     listContainer.innerHTML = '';\r\n \r\n+    // Adiciona a animação de entrada se uma direção foi fornecida\r\n+    if (slideDirection) {\r\n+        const animationClass = slideDirection === 'right' ? 'slide-in-from-left' : 'slide-in-from-right';\r\n+        listContainer.classList.add(animationClass);\r\n+\r\n+        // Remove a classe após a animação para não interferir em futuros swipes\r\n+        listContainer.addEventListener('animationend', () => {\r\n+            listContainer.classList.remove(animationClass);\r\n+        }, { once: true });\r\n+    }\r\n+\r\n+\r\n     if (parcelsForDay.length === 0) {\r\n         // Se não houver parcelas, recria e exibe a mensagem de \"Nenhum boleto\".\r\n         const noBillsMessage = document.createElement('div');\r\n         noBillsMessage.id = 'noDailyBills';\r\n"
                },
                {
                    "date": 1754701873675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2052,14 +2052,15 @@\n }\r\n \r\n /**\r\n  * Aplica o filtro e a pesquisa atuais à lista de boletos e atualiza a UI.\r\n+ * @param {string|null} slideDirection - A direção do swipe ('left' ou 'right') para passar para as funções de renderização.\r\n  */\r\n-function applyFiltersAndSearch() {\r\n+function applyFiltersAndSearch(slideDirection = null) {\r\n     // 1. Obtém os valores de todos os filtros da tela\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n     const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n-    const selectedCategoryId = categoryFilterSelect.value;\r\n+    const selectedCategoryId = categoryFilterselect.value;\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n \r\n     // 2. Inicia o processo de filtragem em duas etapas\r\n@@ -2086,10 +2087,9 @@\n         if (bill.parcels.length === 0) {\r\n             return false;\r\n         }\r\n \r\n-        // Critério 2: O nome do boleto deve corresponder ao termo de pesquisa\r\n-        // (com uma verificação de segurança para garantir que o nome existe)\r\n+        // Critério 2: O nome do boleto ou o código da NFE devem corresponder ao termo de pesquisa\r\n         const matchesSearch = (bill.name && typeof bill.name === 'string' && bill.name.toLowerCase().includes(searchTerm)) || \r\n                               (bill.nfeNumber && bill.nfeNumber.includes(searchTerm));\r\n \r\n         // Critério 3: O boleto deve corresponder à categoria selecionada\r\n@@ -2100,9 +2100,9 @@\n     });\r\n \r\n     // 3. Envia a lista final, completamente filtrada, para as funções que desenham a tela\r\n     renderCalendar(finalFilteredBoletos);\r\n-    renderDailyView(finalFilteredBoletos);\r\n+    renderDailyView(finalFilteredBoletos, slideDirection);\r\n     updateMonthlySummary(finalFilteredBoletos);\r\n }\r\n \r\n /**\r\n@@ -2937,37 +2937,81 @@\n // NOVO: Lógica para navegar entre os dias com swipe no mobile\r\n const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n if (dailyViewContainer) {\r\n     let touchStartX = 0;\r\n-    let touchEndX = 0;\r\n-    const swipeThreshold = 50; // Distância mínima para o gesto ser considerado um swipe\r\n+    let touchCurrentX = 0;\r\n+    let isSwiping = false;\r\n+    const swipeThreshold = window.innerWidth / 3; // Precisa arrastar 1/3 da tela para mudar\r\n \r\n-    dailyViewContainer.addEventListener('touchstart', function(event) {\r\n-        touchStartX = event.changedTouches[0].screenX;\r\n+    dailyViewContainer.addEventListener('touchstart', (e) => {\r\n+        touchStartX = e.touches[0].clientX;\r\n+        isSwiping = true;\r\n+        // Prepara o elemento para o arraste\r\n+        const list = document.getElementById('dailyBillsList');\r\n+        if (list) {\r\n+            list.classList.add('swiping');\r\n+            list.classList.remove('snap-back');\r\n+        }\r\n     }, { passive: true });\r\n \r\n-    dailyViewContainer.addEventListener('touchend', function(event) {\r\n-        touchEndX = event.changedTouches[0].screenX;\r\n-        handleSwipe();\r\n-    });\r\n+    dailyViewContainer.addEventListener('touchmove', (e) => {\r\n+        if (!isSwiping) return;\r\n+        touchCurrentX = e.touches[0].clientX;\r\n+        const deltaX = touchCurrentX - touchStartX;\r\n \r\n-    function handleSwipe() {\r\n-        const swipeDistance = touchEndX - touchStartX;\r\n-\r\n-        // Ignora toques que não são swipes longos o suficiente\r\n-        if (Math.abs(swipeDistance) < swipeThreshold) {\r\n-            return;\r\n+        // Move a lista em tempo real com o dedo\r\n+        const list = document.getElementById('dailyBillsList');\r\n+        if (list) {\r\n+            list.style.transform = `translateX(${deltaX}px)`;\r\n+            list.style.opacity = 1 - Math.abs(deltaX) / window.innerWidth;\r\n         }\r\n+    }, { passive: true });\r\n \r\n-        if (swipeDistance > 0) {\r\n-            // Swipe para a direita -> Dia anterior\r\n-            if (prevDayBtn) prevDayBtn.click();\r\n+    dailyViewContainer.addEventListener('touchend', (e) => {\r\n+        if (!isSwiping) return;\r\n+        isSwiping = false;\r\n+\r\n+        const deltaX = touchCurrentX - touchStartX;\r\n+        const list = document.getElementById('dailyBillsList');\r\n+        \r\n+        if (Math.abs(deltaX) > swipeThreshold) {\r\n+            // Swipe bem-sucedido, mudar o dia\r\n+            const direction = deltaX > 0 ? 'right' : 'left'; // right = dia anterior, left = próximo dia\r\n+            const animationClass = deltaX > 0 ? 'slide-out-right' : 'slide-out-left';\r\n+            \r\n+            if (list) {\r\n+                list.classList.add(animationClass);\r\n+                // Espera a animação de saída terminar para carregar o novo dia\r\n+                list.addEventListener('animationend', () => {\r\n+                    list.style.transform = ''; // Limpa o estilo inline\r\n+                    list.style.opacity = 1;\r\n+                    list.classList.remove('swiping', animationClass);\r\n+\r\n+                    if (direction === 'right') {\r\n+                        currentDailyViewDate.setDate(currentDailyViewDate.getDate() - 1);\r\n+                    } else {\r\n+                        currentDailyViewDate.setDate(currentDailyViewDate.getDate() + 1);\r\n+                    }\r\n+                    // Chama a função de renderização passando a direção para a animação de entrada\r\n+                    applyFiltersAndSearch(direction);\r\n+\r\n+                }, { once: true });\r\n+            }\r\n         } else {\r\n-            // Swipe para a esquerda -> Próximo dia\r\n-            if (nextDayBtn) nextDayBtn.click();\r\n+            // Swipe não foi longo o suficiente, voltar à posição original\r\n+            if (list) {\r\n+                list.classList.add('snap-back');\r\n+                list.style.transform = '';\r\n+                list.style.opacity = 1;\r\n+                list.addEventListener('transitionend', () => {\r\n+                    list.classList.remove('swiping', 'snap-back');\r\n+                }, { once: true });\r\n+            }\r\n         }\r\n-    }\r\n-}\r\n+        // Reseta as posições para o próximo swipe\r\n+        touchStartX = 0;\r\n+        touchCurrentX = 0;\r\n+    });\r\n \r\n \r\n initializeDashboardDragAndDrop();\r\n \r\n"
                },
                {
                    "date": 1754702031881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2933,9 +2933,8 @@\n         applyFiltersAndSearch(); \r\n     });\r\n }\r\n \r\n-// NOVO: Lógica para navegar entre os dias com swipe no mobile\r\n const dailyViewContainer = document.getElementById('dailyBillsViewer');\r\n if (dailyViewContainer) {\r\n     let touchStartX = 0;\r\n     let touchCurrentX = 0;\r\n"
                },
                {
                    "date": 1754702220405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3009,9 +3009,9 @@\n         // Reseta as posições para o próximo swipe\r\n         touchStartX = 0;\r\n         touchCurrentX = 0;\r\n     });\r\n+}\r\n \r\n+    initializeDashboardDragAndDrop();\r\n \r\n-initializeDashboardDragAndDrop();\r\n-\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754702305507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2058,9 +2058,9 @@\n function applyFiltersAndSearch(slideDirection = null) {\r\n     // 1. Obtém os valores de todos os filtros da tela\r\n     const searchTerm = searchInput.value.toLowerCase();\r\n     const activeStatusFilter = document.getElementById('statusFilterSelect').value;\r\n-    const selectedCategoryId = categoryFilterselect.value;\r\n+    const selectedCategoryId = categoryFilterSelect.value;\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n \r\n     // 2. Inicia o processo de filtragem em duas etapas\r\n"
                },
                {
                    "date": 1754702799293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2968,36 +2968,38 @@\n     dailyViewContainer.addEventListener('touchend', (e) => {\r\n         if (!isSwiping) return;\r\n         isSwiping = false;\r\n \r\n-        const deltaX = touchCurrentX - touchStartX;\r\n+        // A mágica está aqui: pegamos a posição final EXATA do toque.\r\n+        // Num clique, touchEndX será quase igual a touchStartX.\r\n+        const touchEndX = e.changedTouches[0].clientX;\r\n+        const deltaX = touchEndX - touchStartX; // <--- CÁLCULO CORRETO\r\n+\r\n         const list = document.getElementById('dailyBillsList');\r\n         \r\n         if (Math.abs(deltaX) > swipeThreshold) {\r\n             // Swipe bem-sucedido, mudar o dia\r\n-            const direction = deltaX > 0 ? 'right' : 'left'; // right = dia anterior, left = próximo dia\r\n+            const direction = deltaX > 0 ? 'right' : 'left';\r\n             const animationClass = deltaX > 0 ? 'slide-out-right' : 'slide-out-left';\r\n             \r\n             if (list) {\r\n                 list.classList.add(animationClass);\r\n-                // Espera a animação de saída terminar para carregar o novo dia\r\n                 list.addEventListener('animationend', () => {\r\n-                    list.style.transform = ''; // Limpa o estilo inline\r\n+                    list.style.transform = '';\r\n                     list.style.opacity = 1;\r\n                     list.classList.remove('swiping', animationClass);\r\n \r\n                     if (direction === 'right') {\r\n                         currentDailyViewDate.setDate(currentDailyViewDate.getDate() - 1);\r\n                     } else {\r\n                         currentDailyViewDate.setDate(currentDailyViewDate.getDate() + 1);\r\n                     }\r\n-                    // Chama a função de renderização passando a direção para a animação de entrada\r\n                     applyFiltersAndSearch(direction);\r\n \r\n                 }, { once: true });\r\n             }\r\n         } else {\r\n-            // Swipe não foi longo o suficiente, voltar à posição original\r\n+            // Swipe não foi longo o suficiente (ou foi um clique), voltar à posição original\r\n             if (list) {\r\n                 list.classList.add('snap-back');\r\n                 list.style.transform = '';\r\n                 list.style.opacity = 1;\r\n@@ -3005,9 +3007,10 @@\n                     list.classList.remove('swiping', 'snap-back');\r\n                 }, { once: true });\r\n             }\r\n         }\r\n-        // Reseta as posições para o próximo swipe\r\n+        \r\n+        // Reseta as posições para o próximo toque\r\n         touchStartX = 0;\r\n         touchCurrentX = 0;\r\n     });\r\n }\r\n"
                }
            ],
            "date": 1752672273587,
            "name": "Commit-0",
            "content": "/**\r\n * main.js\r\n * Ponto de entrada e orquestrador principal para a aplicação Organizador de Boletos.\r\n * Este ficheiro inicializa a aplicação, gere o estado e configura todos os eventos.\r\n */\r\n\r\n// =================================================================================\r\n// IMPORTS - Trazemos as ferramentas dos outros módulos\r\n// =================================================================================\r\nimport * as api from './api.js';\r\nimport { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n\r\n\r\n// =================================================================================\r\n// ESTADO DA APLICAÇÃO - Variáveis que guardam o estado atual\r\n// =================================================================================\r\nlet currentLoggedInCompany = null;\r\nlet currentLoggedInUser = null;\r\nlet isAdminLoggedIn = false;\r\nlet loggedInViaAdmin = false;\r\nlet selectedCompanyForAdmin = null;\r\nlet currentBill = {};\r\nlet selectedParcel = null;\r\nlet userBoletos = [];\r\nlet currentMonth, currentYear;\r\nlet inactivityTimer;\r\n\r\n\r\n// =================================================================================\r\n// ELEMENTOS DO DOM - Referências aos elementos HTML\r\n// =================================================================================\r\nconst initialLoginScreen = document.getElementById('initialLoginScreen');\r\nconst showCnpjLoginBtn = document.getElementById('showCnpjLoginBtn');\r\nconst showAdminLoginBtn = document.getElementById('showAdminLoginBtn');\r\nconst cnpjLoginScreen = document.getElementById('cnpjLoginScreen');\r\nconst cnpjLoginForm = document.getElementById('cnpjLoginForm');\r\nconst cnpjInput = document.getElementById('cnpjInput');\r\nconst cnpjPasswordInput = document.getElementById('cnpjPasswordInput');\r\nconst backToInitialLoginBtnCnpj = document.getElementById('backToInitialLoginBtnCnpj');\r\nconst adminLoginScreen = document.getElementById('adminLoginScreen');\r\nconst adminLoginForm = document.getElementById('adminLoginForm');\r\nconst adminUsernameInput = document.getElementById('adminUsernameInput');\r\nconst adminPasswordInput = document.getElementById('adminPasswordInput');\r\nconst backToInitialLoginBtnAdmin = document.getElementById('backToInitialLoginBtnAdmin');\r\nconst userLoginScreen = document.getElementById('userLoginScreen');\r\nconst userLoginForm = document.getElementById('userLoginForm');\r\nconst welcomeUserText = document.getElementById('welcomeUserText');\r\nconst userInput = document.getElementById('userInput');\r\nconst userPasswordInput = document.getElementById('userPasswordInput');\r\nconst backToCnpjLoginBtn = document.getElementById('backToCnpjLoginBtn');\r\nconst adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\nconst companyListDiv = document.getElementById('companyList');\r\nconst noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\nconst adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\nconst createCompanyBtn = document.getElementById('createCompanyBtn');\r\nconst mainAppContent = document.getElementById('mainAppContent');\r\nconst logoutBtn = document.getElementById('logoutBtn');\r\nconst backToAdminBtn = document.getElementById('backToAdminBtn');\r\nconst loggedInUserDisplay = document.getElementById('loggedInUserDisplay');\r\nconst settingsMenuContainer = document.getElementById('settingsMenuContainer');\r\nconst openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\nconst totalBillsSpan = document.getElementById('totalBills');\r\nconst prevMonthBtn = document.getElementById('prevMonth');\r\nconst nextMonthBtn = document.getElementById('nextMonth');\r\nconst calendarDays = document.getElementById('calendarDays');\r\nconst currentMonthYear = document.getElementById('currentMonthYear');\r\nconst summaryOverdue = document.getElementById('summaryOverdue');\r\nconst summaryTotal = document.getElementById('summaryTotal');\r\nconst summaryPaid = document.getElementById('summaryPaid');\r\nconst summaryUnpaid = document.getElementById('summaryUnpaid');\r\nconst billForm = document.getElementById('billForm');\r\nconst clearFormBtn = document.getElementById('clearFormBtn');\r\nconst addBillModal = document.getElementById('addBillModal');\r\nconst closeAddBillModalBtn = document.getElementById('closeAddBillModalBtn');\r\nconst installmentsPreview = document.getElementById('installmentsPreview');\r\nconst installmentsList = document.getElementById('installmentsList');\r\nconst parcelPreviewTotalSpan = document.getElementById('parcelPreviewTotal');\r\nconst addToOrganizer = document.getElementById('addToOrganizer');\r\nconst billModal = document.getElementById('billModal');\r\nconst closeModalBtn = document.getElementById('closeModal');\r\nconst modalBillName = document.getElementById('modalBillName');\r\nconst modalBillAmount = document.getElementById('modalBillAmount');\r\nconst modalBillDate = document.getElementById('modalBillDate');\r\nconst modalBillDescription = document.getElementById('modalBillDescription');\r\nconst modalBillBarcodeInput = document.getElementById('modalBillBarcode');\r\nconst showFullScreenBarcodeBtn = document.getElementById('showFullScreenBarcodeBtn');\r\nconst modalBillPaidCheckbox = document.getElementById('modalBillPaid');\r\nconst saveBillBtn = document.getElementById('saveBill');\r\nconst deleteBillBtn = document.getElementById('deleteBill');\r\nconst deleteEntireBillBtn = document.getElementById('deleteEntireBillBtn');\r\nconst barcodeFullScreenModal = document.getElementById('barcodeFullScreenModal');\r\nconst closeFullScreenBarcodeBtn = document.getElementById('closeFullScreenBarcodeBtn');\r\n\r\n\r\n// =================================================================================\r\n// FUNÇÕES DE LÓGICA E UI\r\n// =================================================================================\r\n\r\n/**\r\n * Atualiza o resumo financeiro do mês (vencido, total, pago, não pago).\r\n */\r\nfunction updateMonthlySummary() {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    const parcelsThisMonth = userBoletos.flatMap(bill => bill.parcels)\r\n        .filter(parcel => {\r\n            const parcelDate = new Date(parcel.dueDate + 'T00:00:00');\r\n            return parcelDate.getMonth() === currentMonth && parcelDate.getFullYear() === currentYear;\r\n        });\r\n\r\n    const totalMes = parcelsThisMonth.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n    const totalPago = parcelsThisMonth.filter(p => p.paid).reduce((sum, parcel) => sum + parcel.amount, 0);\r\n    const totalNaoPago = totalMes - totalPago;\r\n    \r\n    const overdueParcels = userBoletos.flatMap(bill => bill.parcels)\r\n        .filter(parcel => new Date(parcel.dueDate + 'T00:00:00') < today && !parcel.paid);\r\n    const totalOverdue = overdueParcels.reduce((sum, parcel) => sum + parcel.amount, 0);\r\n\r\n    const formatCurrency = (value) => value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n\r\n    summaryOverdue.textContent = formatCurrency(totalOverdue);\r\n    summaryTotal.textContent = formatCurrency(totalMes);\r\n    summaryPaid.textContent = formatCurrency(totalPago);\r\n    summaryUnpaid.textContent = formatCurrency(totalNaoPago);\r\n}\r\n\r\n\r\n/**\r\n * Renderiza o calendário com os boletos do mês atual.\r\n */\r\nfunction renderCalendar() {\r\n    const monthNames = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"];\r\n    currentMonthYear.textContent = `${monthNames[currentMonth]} de ${currentYear}`;\r\n    calendarDays.innerHTML = '';\r\n\r\n    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\r\n\r\n    for (let i = 0; i < firstDayOfMonth; i++) {\r\n        calendarDays.insertAdjacentHTML('beforeend', '<div class=\"day-cell empty p-1 border border-gray-800\"></div>');\r\n    }\r\n\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\r\n        const dayCell = document.createElement('div');\r\n        dayCell.className = 'day-cell p-1 border border-gray-800 relative cursor-pointer hover:bg-gray-600 transition-colors overflow-y-auto';\r\n        dayCell.dataset.date = dateStr;\r\n        \r\n        const dayHeader = document.createElement('div');\r\n        dayHeader.className = 'text-right font-medium text-sm mb-1 text-gray-300';\r\n        dayHeader.textContent = day;\r\n        dayCell.appendChild(dayHeader);\r\n\r\n        dayCell.addEventListener('click', (e) => {\r\n            if (e.target.closest('.bill-card')) return;\r\n            clearBillForm();\r\n            document.getElementById('dueDate').value = e.currentTarget.dataset.date;\r\n            addBillModal.classList.remove('hidden');\r\n        });\r\n\r\n        userBoletos.forEach(bill => {\r\n            bill.parcels.filter(p => p.dueDate === dateStr).forEach(parcel => {\r\n                const parcelElement = document.createElement('div');\r\n                parcelElement.className = `bill-card text-xs p-1 mb-1 rounded cursor-pointer ${parcel.paid ? 'bg-green-700 text-green-100 hover:bg-green-600' : 'bg-indigo-700 text-indigo-100 hover:bg-indigo-600'}`;\r\n                parcelElement.innerHTML = `<div class=\"font-medium truncate\">${bill.name} - ${parcel.number}ª</div><div>${parcel.amount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</div>`;\r\n                parcelElement.addEventListener('click', () => openBillModal(bill, parcel));\r\n                dayCell.appendChild(parcelElement);\r\n            });\r\n        });\r\n        calendarDays.appendChild(dayCell);\r\n    }\r\n}\r\n\r\n/**\r\n * Abre o modal para ver/editar os detalhes de uma parcela.\r\n * @param {object} bill - O objeto do boleto pai.\r\n * @param {object} parcel - O objeto da parcela específica.\r\n */\r\nfunction openBillModal(bill, parcel) {\r\n    selectedParcel = { ...parcel, parentId: bill._id };\r\n    \r\n    modalBillName.textContent = `${bill.name} (Parcela ${parcel.number})`;\r\n    modalBillAmount.value = parcel.amount.toFixed(2);\r\n    modalBillDate.value = parcel.dueDate;\r\n    modalBillDescription.value = parcel.description || '';\r\n    modalBillBarcodeInput.value = parcel.barcode || '';\r\n    modalBillPaidCheckbox.checked = parcel.paid;\r\n\r\n    showFullScreenBarcodeBtn.classList.toggle('hidden', !parcel.barcode);\r\n    billModal.classList.remove('hidden');\r\n}\r\n\r\n\r\n/**\r\n * Limpa o formulário de adicionar boletos e a pré-visualização.\r\n */\r\nfunction clearBillForm() {\r\n    billForm.reset();\r\n    installmentsPreview.classList.add('hidden');\r\n    installmentsList.innerHTML = '';\r\n    currentBill = {};\r\n}\r\n\r\n/**\r\n * Atualiza a interface principal com os dados dos boletos.\r\n */\r\nasync function updateBillsOrganizer() {\r\n    try {\r\n        userBoletos = await api.getBoletos();\r\n        const totalParcels = userBoletos.reduce((acc, bill) => acc + bill.parcels.length, 0);\r\n        totalBillsSpan.textContent = totalParcels;\r\n\r\n        updateMonthlySummary();\r\n        renderCalendar();\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n        showInitialLogin();\r\n    }\r\n}\r\n\r\n/**\r\n * Funções para mostrar os diferentes ecrãs da aplicação.\r\n */\r\nfunction showInitialLogin() {\r\n    hideAllScreens();\r\n    initialLoginScreen.classList.remove('hidden');\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('superAdminToken');\r\n    currentLoggedInCompany = null;\r\n    currentLoggedInUser = null;\r\n    isAdminLoggedIn = false;\r\n    loggedInViaAdmin = false;\r\n}\r\n\r\nfunction showCnpjLogin() {\r\n    hideAllScreens();\r\n    cnpjLoginForm.reset();\r\n    cnpjLoginScreen.classList.remove('hidden');\r\n}\r\n\r\nfunction showAdminLogin() {\r\n    hideAllScreens();\r\n    adminLoginForm.reset();\r\n    adminLoginScreen.classList.remove('hidden');\r\n}\r\n\r\nfunction showUserLogin(companyName) {\r\n    hideAllScreens();\r\n    userLoginForm.reset();\r\n    welcomeUserText.textContent = `Bem-vindo à ${companyName}`;\r\n    userLoginScreen.classList.remove('hidden');\r\n}\r\n\r\nasync function showMainApp() {\r\n    hideAllScreens();\r\n    mainAppContent.classList.remove('hidden');\r\n    openAddBillModalBtn.classList.remove('hidden');\r\n\r\n    loggedInUserDisplay.textContent = `Usuário: ${currentLoggedInUser.username}`;\r\n    backToAdminBtn.classList.toggle('hidden', !loggedInViaAdmin);\r\n    settingsMenuContainer.classList.toggle('hidden', isAdminLoggedIn || currentLoggedInUser.role !== 'Proprietário');\r\n\r\n    await updateBillsOrganizer();\r\n}\r\n\r\n\r\n// =================================================================================\r\n// EVENT HANDLERS - Funções que respondem aos eventos\r\n// =================================================================================\r\n\r\nasync function handleCnpjLogin(e) {\r\n    e.preventDefault();\r\n    showLoader();\r\n    try {\r\n        const data = await api.loginCompany(cnpjInput.value, cnpjPasswordInput.value);\r\n        localStorage.setItem('authToken', data.token);\r\n        currentLoggedInCompany = data.company;\r\n        showUserLogin(currentLoggedInCompany.nomeEmpresa);\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\nasync function handleAdminLogin(e) {\r\n    e.preventDefault();\r\n    showLoader();\r\n    try {\r\n        const data = await api.loginAdmin(adminUsernameInput.value, adminPasswordInput.value);\r\n        localStorage.setItem('authToken', data.token);\r\n        isAdminLoggedIn = true;\r\n        showToast('Login de Administrador bem-sucedido!', 'success');\r\n        //showAdminDashboard();\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\nasync function handleUserLogin(e) {\r\n    e.preventDefault();\r\n    showLoader();\r\n    try {\r\n        const data = await api.loginUser(userInput.value, userPasswordInput.value, currentLoggedInCompany._id);\r\n        localStorage.setItem('authToken', data.token);\r\n        currentLoggedInUser = data.user;\r\n        await showMainApp();\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\nfunction handleCalculateInstallments(e) {\r\n    e.preventDefault();\r\n    const billName = document.getElementById('billName').value;\r\n    const dueDate = document.getElementById('dueDate').value;\r\n    const totalAmount = parseFloat(document.getElementById('totalAmount').value);\r\n    const installments = parseInt(document.getElementById('installments').value);\r\n    const spacingDays = parseInt(document.getElementById('spacingDays').value) || 30;\r\n    \r\n    if (!billName || !dueDate || !totalAmount || !installments) {\r\n        showToast(\"Preencha todos os campos obrigatórios.\", \"error\");\r\n        return;\r\n    }\r\n    \r\n    currentBill = { name: billName, parcels: [] };\r\n    const parcelAmount = parseFloat((totalAmount / installments).toFixed(2));\r\n    installmentsList.innerHTML = '';\r\n\r\n    for (let i = 0; i < installments; i++) {\r\n        const parcelDate = new Date(dueDate + 'T00:00:00');\r\n        parcelDate.setDate(parcelDate.getDate() + (i * spacingDays));\r\n        const dateForInput = parcelDate.toISOString().split('T')[0];\r\n\r\n        currentBill.parcels.push({ number: i + 1, amount: parcelAmount, dueDate: dateForInput });\r\n        \r\n        installmentsList.insertAdjacentHTML('beforeend', `\r\n            <div class=\"bill-card bg-gray-700 p-3 flex justify-between items-center\">\r\n                <span>Parcela ${i + 1}</span>\r\n                <span>${parcelAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</span>\r\n                <span>Venc: ${parcelDate.toLocaleDateString('pt-BR')}</span>\r\n            </div>\r\n        `);\r\n    }\r\n    installmentsPreview.classList.remove('hidden');\r\n    parcelPreviewTotalSpan.textContent = `Total: ${totalAmount.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\r\n}\r\n\r\nasync function handleAddToOrganizer() {\r\n    showLoader();\r\n    try {\r\n        await api.createBoleto(currentBill);\r\n        showToast('Boleto criado com sucesso!', 'success');\r\n        addBillModal.classList.add('hidden');\r\n        await updateBillsOrganizer();\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\nasync function handleSaveChanges() {\r\n    if (!selectedParcel) return;\r\n    const updateData = {\r\n        paid: modalBillPaidCheckbox.checked,\r\n        amount: parseFloat(modalBillAmount.value),\r\n        dueDate: modalBillDate.value,\r\n        description: modalBillDescription.value,\r\n        barcode: modalBillBarcodeInput.value,\r\n    };\r\n    showLoader();\r\n    try {\r\n        await api.updateParcel(selectedParcel.parentId, selectedParcel._id, updateData);\r\n        showToast('Parcela atualizada com sucesso!', 'success');\r\n        billModal.classList.add('hidden');\r\n        await updateBillsOrganizer();\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\nasync function handleDeleteParcel() {\r\n    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir APENAS esta parcela?\")) return;\r\n    showLoader();\r\n    try {\r\n        await api.deleteParcel(selectedParcel.parentId, selectedParcel._id);\r\n        showToast('Parcela excluída com sucesso!', 'success');\r\n        billModal.classList.add('hidden');\r\n        await updateBillsOrganizer();\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\nasync function handleDeleteEntireBill() {\r\n    if (!selectedParcel || !confirm(\"Tem certeza que deseja excluir o boleto INTEIRO e TODAS as suas parcelas?\")) return;\r\n    showLoader();\r\n    try {\r\n        await api.deleteBoleto(selectedParcel.parentId);\r\n        showToast('Boleto completo excluído com sucesso!', 'success');\r\n        billModal.classList.add('hidden');\r\n\r\n        await updateBillsOrganizer();\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\n/**\r\n * Função de inicialização principal da aplicação.\r\n */\r\nasync function initializeApp() {\r\n    const today = new Date();\r\n    currentMonth = today.getMonth();\r\n    currentYear = today.getFullYear();\r\n\r\n    const token = localStorage.getItem('authToken');\r\n    if (!token) {\r\n        showInitialLogin();\r\n        return;\r\n    }\r\n\r\n    showLoader();\r\n    try {\r\n        const data = await api.checkSession();\r\n        // A lógica de verificação de sessão e redirecionamento continua aqui.\r\n        if (data.user.role === 'SuperAdmin') {\r\n            isAdminLoggedIn = true;\r\n            // showAdminDashboard(); // Descomentar quando a função estiver completa\r\n        } else {\r\n            currentLoggedInUser = data.user;\r\n            currentLoggedInCompany = data.company;\r\n            // ... aqui entra a verificação de assinatura do checkSubscription ...\r\n            // Por simplicidade, vamos direto para a app principal por enquanto.\r\n            await showMainApp();\r\n        }\r\n    } catch (error) {\r\n        showToast(error.message, 'error');\r\n        showInitialLogin();\r\n    } finally {\r\n        hideLoader();\r\n    }\r\n}\r\n\r\n// =================================================================================\r\n// EVENT LISTENERS - Ligamos os eventos do HTML às nossas funções\r\n// =================================================================================\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Navegação entre ecrãs de login\r\n    showCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n    showAdminLoginBtn.addEventListener('click', showAdminLogin);\r\n    backToInitialLoginBtnCnpj.addEventListener('click', showInitialLogin);\r\n    backToInitialLoginBtnAdmin.addEventListener('click', showInitialLogin);\r\n    backToCnpjLoginBtn.addEventListener('click', showCnpjLogin);\r\n\r\n    // Submissão de formulários\r\n    if (cnpjLoginForm) cnpjLoginForm.addEventListener('submit', handleCnpjLogin);\r\n    if (adminLoginForm) adminLoginForm.addEventListener('submit', handleAdminLogin);\r\n    if (userLoginForm) userLoginForm.addEventListener('submit', handleUserLogin);\r\n    if (billForm) billForm.addEventListener('submit', handleCalculateInstallments);\r\n\r\n    // Ações na App Principal\r\n    logoutBtn.addEventListener('click', showInitialLogin);\r\n    clearFormBtn.addEventListener('click', clearBillForm);\r\n    addToOrganizer.addEventListener('click', handleAddToOrganizer);\r\n    openAddBillModalBtn.addEventListener('click', () => addBillModal.classList.remove('hidden'));\r\n    closeAddBillModalBtn.addEventListener('click', () => addBillModal.classList.add('hidden'));\r\n\r\n    // Ações do Modal de Edição de Boleto\r\n    closeModalBtn.addEventListener('click', () => billModal.classList.add('hidden'));\r\n    saveBillBtn.addEventListener('click', handleSaveChanges);\r\n    deleteBillBtn.addEventListener('click', handleDeleteParcel);\r\n    deleteEntireBillBtn.addEventListener('click', handleDeleteEntireBill);\r\n    closeFullScreenBarcodeBtn.addEventListener('click', () => barcodeFullScreenModal.classList.add('hidden'));\r\n\r\n    // Navegação do Calendário\r\n    prevMonthBtn.addEventListener('click', () => {\r\n        currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;\r\n        if (currentMonth === 11) currentYear--;\r\n        renderCalendar();\r\n        updateMonthlySummary();\r\n    });\r\n\r\n    nextMonthBtn.addEventListener('click', () => {\r\n        currentMonth = (currentMonth === 11) ? 0 : currentMonth + 1;\r\n        if (currentMonth === 0) currentYear++;\r\n        renderCalendar();\r\n        updateMonthlySummary();\r\n    });\r\n\r\n    // Inicia a aplicação\r\n    initializeApp();\r\n});"
        }
    ]
}