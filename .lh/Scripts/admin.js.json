{
    "sourceFile": "Scripts/admin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 136,
            "patches": [
                {
                    "date": 1753808555917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753808579983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,5 +57,11 @@\n     if(viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n \r\n     // Garante que a aba de empresas seja a padrão\r\n     switchAdminView('companies');\r\n+}\r\n+\r\n+async function showAdminDashboard() {\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n+    await renderCompanyList(); // Se tiver essa função\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753808632360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,5 +63,39 @@\n async function showAdminDashboard() {\r\n     hideAllScreens();\r\n     adminDashboardScreen.classList.remove('hidden');\r\n     await renderCompanyList(); // Se tiver essa função\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // Adiciona os event listeners para os novos botões criados\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753808656484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,5 +97,61 @@\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n     }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // CORREÇÃO: Capturamos a nova lista 'masterUsers' da API\r\n+                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                // CORREÇÃO: Passamos a lista para a função do modal\r\n+                openCompanyDetailsModal(company, users, masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // CORREÇÃO: Capturamos a nova lista 'masterUsers'\r\n+                const { users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+\r\n+                // CORREÇÃO: Verificamos se existem usuários na lista do banco Mestre\r\n+                if (!masterUsers || masterUsers.length === 0) {\r\n+                    return showToast('Esta empresa não possui usuários (no registro mestre) para representar.', 'info');\r\n+                }\r\n+\r\n+                // CORREÇÃO: Usamos o ID do primeiro usuário da lista do banco Mestre\r\n+                const userIdToImpersonate = masterUsers[0]._id; \r\n+\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                // O resto da lógica continua igual...\r\n+                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n+                localStorage.setItem('authToken', data.token);\r\n+\r\n+                currentLoggedInCompany = data.company;\r\n+                currentLoggedInUser = data.user;\r\n+                loggedInViaAdmin = true;\r\n+\r\n+                await showMainApp();\r\n+\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753808735012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,5 +153,56 @@\n                 hideLoader();\r\n             }\r\n         });\r\n     });\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n+ */\r\n+function openCompanyDetailsModal(company, users, masterUsers) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (masterUsers && masterUsers.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        masterUsers.forEach(user => {\r\n+            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n+\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona os eventos DEPOIS de criar os botões\r\n+    addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n+    companyDetailsModal.classList.remove('hidden');\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753808760587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,5 +204,59 @@\n \r\n     // Adiciona os eventos DEPOIS de criar os botões\r\n     addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n     companyDetailsModal.classList.remove('hidden');\r\n+}\r\n+\r\n+function addEventListenersToCompanyDetailsModal() {\r\n+    // Evento para os seletores de cargo (role)\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                // Recarrega os dados do modal para garantir consistência\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Evento para os botões de remover utilizador\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.currentTarget.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                // Recarrega os dados do modal\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753808793622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,5 +258,26 @@\n                 hideLoader();\r\n             }\r\n         });\r\n     });\r\n+}\r\n+\r\n+// ------ Handlers ------\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753808903571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,5 +279,44 @@\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n     }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753808913455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,5 +318,19 @@\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n     }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753809001454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,8 +260,14 @@\n         });\r\n     });\r\n }\r\n \r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n // ------ Handlers ------\r\n \r\n async function handleUpdateCompany() {\r\n     if (!selectedCompanyForAdmin) return;\r\n"
                },
                {
                    "date": 1753809014258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,8 +266,12 @@\n     if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n     document.getElementById('addCompanyNameInput').focus();\r\n }\r\n \r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n // ------ Handlers ------\r\n \r\n async function handleUpdateCompany() {\r\n     if (!selectedCompanyForAdmin) return;\r\n"
                },
                {
                    "date": 1753809032593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,8 +272,36 @@\n }\r\n \r\n // ------ Handlers ------\r\n \r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n async function handleUpdateCompany() {\r\n     if (!selectedCompanyForAdmin) return;\r\n     const updateData = {\r\n         nomeEmpresa: modalCompanyNameInput.value,\r\n"
                },
                {
                    "date": 1753809065071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,15 +49,20 @@\n  * Função principal que inicializa o painel de admin,\r\n  * renderiza a lista de empresas e configura os eventos.\r\n  */\r\n export async function showAdminDashboard() {\r\n-    // (A lógica de renderização da lista de empresas virá para aqui)\r\n+    // Esconde as telas principais e mostra o painel de admin\r\n+    hideAllScreens();\r\n+    adminDashboardScreen.classList.remove('hidden');\r\n \r\n+    // Renderiza a lista de empresas\r\n+    await renderCompanyList();\r\n+\r\n     // Configura os eventos de clique para as abas\r\n     if(viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n     if(viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n \r\n-    // Garante que a aba de empresas seja a padrão\r\n+    // Garante que a aba de empresas seja a padrão ao carregar\r\n     switchAdminView('companies');\r\n }\r\n \r\n async function showAdminDashboard() {\r\n"
                },
                {
                    "date": 1753809293928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,14 +64,8 @@\n     // Garante que a aba de empresas seja a padrão ao carregar\r\n     switchAdminView('companies');\r\n }\r\n \r\n-async function showAdminDashboard() {\r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    await renderCompanyList(); // Se tiver essa função\r\n-}\r\n-\r\n async function renderCompanyList() {\r\n     showLoader();\r\n     try {\r\n         const companies = await api.getCompanies();\r\n"
                },
                {
                    "date": 1753809436117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,5 +369,40 @@\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n     }\r\n-}\n\\ No newline at end of file\n+}\r\n+\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+    // --- Event Listeners do Painel de Admin ---\r\n+\r\n+    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+    const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+    const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+    const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+    const addUserBtn = document.getElementById('addUserBtn');\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n+    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+    const addCompanyForm = document.getElementById('addCompanyForm');\r\n+    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n+    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+\r\n+    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753810035395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,8 +371,18 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     // --- Event Listeners do Painel de Admin ---\r\n \r\n     const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n"
                },
                {
                    "date": 1753810153409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,8 +269,18 @@\n function closeAddCompanyModal() {\r\n     if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n }\r\n \r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+}\r\n+\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n // ------ Handlers ------\r\n \r\n /**\r\n  * Lida com a submissão do formulário de criação de empresa.\r\n@@ -371,18 +381,50 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n-}\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n \r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n+    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n+\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        // Passa os novos dados para a função da API\r\n+        const data = await api.registerUser(username, password, email, role, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n+\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            await openManageUsersModal();\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n }\r\n \r\n+\r\n+\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     // --- Event Listeners do Painel de Admin ---\r\n \r\n     const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n"
                },
                {
                    "date": 1753810218022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -421,10 +421,36 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+function handleBackToAdmin() {\r\n+    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n \r\n+    // Pega o token original do admin que guardamos anteriormente.\r\n+    const adminToken = localStorage.getItem('superAdminToken');\r\n \r\n+    if (!adminToken) {\r\n+        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n+        showInitialLogin();\r\n+        return;\r\n+    }\r\n+\r\n+    // Restaura o token do admin como o token ativo.\r\n+    localStorage.setItem('authToken', adminToken);\r\n+    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n+\r\n+    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n+    currentLoggedInUser = null;\r\n+    currentLoggedInCompany = null;\r\n+    loggedInViaAdmin = false;\r\n+    isAdminLoggedIn = true;\r\n+\r\n+    // Mostra o painel de administração novamente.\r\n+    showAdminDashboard();\r\n+}\r\n+\r\n+\r\n+\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     // --- Event Listeners do Painel de Admin ---\r\n \r\n     const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n"
                },
                {
                    "date": 1753810829940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,8 +279,88 @@\n function closeAddUserModal() {\r\n     if (addUserModal) addUserModal.classList.add('hidden');\r\n }\r\n \r\n+async function openManageUsersModal() {\r\n+    showLoader();\r\n+    try {\r\n+        // CORREÇÃO: Buscamos os detalhes da empresa, que agora incluem 'users' (do tenant)\r\n+        // e 'masterUsers' (do banco mestre).\r\n+        const { users, masterUsers } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+\r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n+\r\n+        companyUsersList.innerHTML = ''; \r\n+\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+        // Usamos a lista de 'masterUsers' para construir o modal, pois ela tem os IDs corretos.\r\n+        if (masterUsers && masterUsers.length > 0) {\r\n+            masterUsers.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+\r\n+                const roleOptions = assignableRoles.map(role =>\r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                const roleHtml = isOwner\r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    // CORREÇÃO: O data-user-id agora usa o ID do masterUser\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+\r\n+        // Adiciona evento de clique para remover (precisará de ajuste futuro se necessário)\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            // ...\r\n+        });\r\n+\r\n+        // Adiciona evento para alterar o cargo (agora com o ID correto)\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n+                const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n+\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    // Lógica para reverter a seleção visual\r\n+                    const originalUser = (await api.getCompanyDetails(companyId)).masterUsers.find(u => u._id === userId);\r\n+                    if(originalUser) e.target.value = originalUser.role;\r\n+                    return;\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    // A chamada à API agora envia o ID correto\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        manageUsersModal.classList.remove('hidden');\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n // ------ Handlers ------\r\n \r\n /**\r\n  * Lida com a submissão do formulário de criação de empresa.\r\n"
                },
                {
                    "date": 1753811672268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj } from './utils.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n \r\n // Variáveis de estado e elementos do DOM para o painel de admin\r\n let selectedCompanyForAdmin = null;\r\n \r\n"
                },
                {
                    "date": 1753812029949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n+import { setImpersonationSession } from './main.js';\r\n \r\n // Variáveis de estado e elementos do DOM para o painel de admin\r\n let selectedCompanyForAdmin = null;\r\n \r\n"
                },
                {
                    "date": 1753812050692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,22 +123,17 @@\n         button.addEventListener('click', async (e) => {\r\n             const companyId = e.target.dataset.companyId;\r\n             showLoader();\r\n             try {\r\n-                // CORREÇÃO: Capturamos a nova lista 'masterUsers'\r\n                 const { users, masterUsers } = await api.getCompanyDetails(companyId);\r\n \r\n-                // CORREÇÃO: Verificamos se existem usuários na lista do banco Mestre\r\n                 if (!masterUsers || masterUsers.length === 0) {\r\n                     return showToast('Esta empresa não possui usuários (no registro mestre) para representar.', 'info');\r\n                 }\r\n \r\n-                // CORREÇÃO: Usamos o ID do primeiro usuário da lista do banco Mestre\r\n                 const userIdToImpersonate = masterUsers[0]._id; \r\n-\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n-                // O resto da lógica continua igual...\r\n                 localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n                 localStorage.setItem('authToken', data.token);\r\n \r\n                 currentLoggedInCompany = data.company;\r\n"
                },
                {
                    "date": 1753812065904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,27 +123,23 @@\n         button.addEventListener('click', async (e) => {\r\n             const companyId = e.target.dataset.companyId;\r\n             showLoader();\r\n             try {\r\n-                const { users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                const { masterUsers } = await api.getCompanyDetails(companyId);\r\n \r\n                 if (!masterUsers || masterUsers.length === 0) {\r\n                     return showToast('Esta empresa não possui usuários (no registro mestre) para representar.', 'info');\r\n                 }\r\n \r\n-                const userIdToImpersonate = masterUsers[0]._id; \r\n+                const userIdToImpersonate = masterUsers[0]._id;\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n-                localStorage.setItem('superAdminToken', localStorage.getItem('authToken'));\r\n-                localStorage.setItem('authToken', data.token);\r\n+                // Chama a função importada de main.js para gerir a sessão\r\n+                await setImpersonationSession(data);\r\n \r\n-                currentLoggedInCompany = data.company;\r\n-                currentLoggedInUser = data.user;\r\n-                loggedInViaAdmin = true;\r\n-\r\n-                await showMainApp();\r\n-\r\n             } catch (error) {\r\n+                // A função showToast já mostra o erro para o utilizador\r\n+                // A imagem do erro indica que o showToast está a funcionar\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n             }\r\n"
                },
                {
                    "date": 1753812209194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n-import { setImpersonationSession } from './main.js';\r\n+import { setImpersonationSession, restoreAdminSession } from './main.js';\r\n \r\n // Variáveis de estado e elementos do DOM para o painel de admin\r\n let selectedCompanyForAdmin = null;\r\n \r\n"
                },
                {
                    "date": 1753812222691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -496,29 +496,22 @@\n \r\n function handleBackToAdmin() {\r\n     showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n \r\n-    // Pega o token original do admin que guardamos anteriormente.\r\n-    const adminToken = localStorage.getItem('superAdminToken');\r\n+    // Chama a função de main.js para restaurar o estado do admin\r\n+    const success = restoreAdminSession();\r\n \r\n-    if (!adminToken) {\r\n+    if (success) {\r\n+        // Se o estado foi restaurado com sucesso, mostra o painel do admin\r\n+        showAdminDashboard();\r\n+    } else {\r\n         showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        showInitialLogin();\r\n-        return;\r\n+        // Se o token de admin não for encontrado, força o logout para a página inicial\r\n+        setTimeout(() => {\r\n+            localStorage.removeItem('authToken');\r\n+            window.location.href = 'Index.html';\r\n+        }, 2000);\r\n     }\r\n-\r\n-    // Restaura o token do admin como o token ativo.\r\n-    localStorage.setItem('authToken', adminToken);\r\n-    localStorage.removeItem('superAdminToken'); // Limpa o token temporário.\r\n-\r\n-    // Redefine o estado da aplicação para o estado de SuperAdmin.\r\n-    currentLoggedInUser = null;\r\n-    currentLoggedInCompany = null;\r\n-    loggedInViaAdmin = false;\r\n-    isAdminLoggedIn = true;\r\n-\r\n-    // Mostra o painel de administração novamente.\r\n-    showAdminDashboard();\r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1753813081230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,13 +363,17 @@\n \r\n     const payload = {\r\n         nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n         cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        senhaEmpresa: document.getElementById('addCompanyPasswordInput').value,\r\n+        // LINHA ADICIONADA:\r\n+        email: document.getElementById('addCompanyEmailInput').value,\r\n         ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n         ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n     };\r\n \r\n+    // Removemos o campo 'senhaEmpresa' que não está a ser usado no backend\r\n+    // delete payload.senhaEmpresa;\r\n+\r\n     showLoader();\r\n     try {\r\n         const data = await api.createCompany(payload);\r\n         showToast(data.message, 'success');\r\n"
                },
                {
                    "date": 1753814730581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n import { setImpersonationSession, restoreAdminSession } from './main.js';\r\n+import { isAdminLoggedIn } from './main.js';\r\n \r\n // Variáveis de estado e elementos do DOM para o painel de admin\r\n let selectedCompanyForAdmin = null;\r\n \r\n"
                },
                {
                    "date": 1753815193540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -459,44 +459,59 @@\n     }\r\n }\r\n \r\n /**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n+ * Lida com a submissão do formulário para adicionar um novo utilizador.\r\n+ * Esta função deve estar no teu ficheiro de script do painel de admin (provavelmente admin.js).\r\n  * @param {Event} e - O evento de submissão do formulário.\r\n  */\r\n async function handleAddUserSubmit(e) {\r\n+    // 1. Impede que a página recarregue ao submeter o formulário\r\n     e.preventDefault();\r\n \r\n-    const username = document.getElementById('addUsernameInput').value;\r\n+    const form = e.target;\r\n+    const submitButton = form.querySelector('button[type=\"submit\"]');\r\n+\r\n+    // 2. Recolhe os dados do formulário\r\n+    const companyId = form.dataset.companyId; // Pega o ID da empresa guardado no formulário\r\n+    const username = document.getElementById('addUsernameInput').value.trim();\r\n+    const email = document.getElementById('addUserEmailInput').value.trim();\r\n     const password = document.getElementById('addUserPasswordInput').value;\r\n-    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n-    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n+    const role = document.getElementById('addUserRoleSelect').value;\r\n \r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    // 3. Validação simples para garantir que os campos não estão vazios\r\n+    if (!companyId || !username || !email || !password || !role) {\r\n+        showToast('Por favor, preencha todos os campos.', 'error');\r\n+        return;\r\n     }\r\n \r\n+    // 4. Fornece feedback visual ao utilizador\r\n     showLoader();\r\n+    if (submitButton) submitButton.disabled = true;\r\n+\r\n     try {\r\n-        // Passa os novos dados para a função da API\r\n-        const data = await api.registerUser(username, password, email, role, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n+        // 5. Chama a função da API para registar o utilizador\r\n+        // A `companyId` é enviada no corpo para a rota do backend poder tratar o caso do SuperAdmin\r\n+        await api.registerUser(username, password, email, role, companyId);\r\n \r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            await openManageUsersModal();\r\n-        }\r\n+        // 6. Lógica de sucesso\r\n+        showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n \r\n+        // 7. ATUALIZA O MODAL DE DETALHES DA EMPRESA (A CORREÇÃO PRINCIPAL)\r\n+        // Certifica-te que o nome desta função é o mesmo que usas no teu código.\r\n+        await openCompanyDetailsModal(companyId);\r\n+\r\n+        // 8. Fecha o modal de \"Adicionar Usuário\"\r\n+        document.getElementById('addUserModal').classList.add('hidden');\r\n+        form.reset(); // Limpa o formulário para a próxima vez\r\n+\r\n     } catch (error) {\r\n-        showToast(error.message, 'error');\r\n+        // 9. Em caso de erro, mostra a mensagem da API\r\n+        showToast(error.message || 'Ocorreu um erro ao criar o usuário.', 'error');\r\n     } finally {\r\n+        // 10. Garante que o feedback visual é removido no final, quer dê certo ou errado\r\n         hideLoader();\r\n+        if (submitButton) submitButton.disabled = false;\r\n     }\r\n }\r\n \r\n function handleBackToAdmin() {\r\n"
                },
                {
                    "date": 1753815443570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,12 +262,12 @@\n function closeAddCompanyModal() {\r\n     if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n }\r\n \r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+function openAddUserModal(companyId) {\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    addUserForm.dataset.companyId = companyId; // Guarda o ID no dataset do formulário\r\n+    document.getElementById('addUserModal').classList.remove('hidden');\r\n }\r\n \r\n function closeAddUserModal() {\r\n     if (addUserModal) addUserModal.classList.add('hidden');\r\n"
                },
                {
                    "date": 1753815628857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,12 +262,12 @@\n function closeAddCompanyModal() {\r\n     if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n }\r\n \r\n-function openAddUserModal(companyId) {\r\n-    const addUserForm = document.getElementById('addUserForm');\r\n-    addUserForm.dataset.companyId = companyId; // Guarda o ID no dataset do formulário\r\n-    document.getElementById('addUserModal').classList.remove('hidden');\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n }\r\n \r\n function closeAddUserModal() {\r\n     if (addUserModal) addUserModal.classList.add('hidden');\r\n@@ -459,59 +459,44 @@\n     }\r\n }\r\n \r\n /**\r\n- * Lida com a submissão do formulário para adicionar um novo utilizador.\r\n- * Esta função deve estar no teu ficheiro de script do painel de admin (provavelmente admin.js).\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n  * @param {Event} e - O evento de submissão do formulário.\r\n  */\r\n async function handleAddUserSubmit(e) {\r\n-    // 1. Impede que a página recarregue ao submeter o formulário\r\n     e.preventDefault();\r\n \r\n-    const form = e.target;\r\n-    const submitButton = form.querySelector('button[type=\"submit\"]');\r\n-\r\n-    // 2. Recolhe os dados do formulário\r\n-    const companyId = form.dataset.companyId; // Pega o ID da empresa guardado no formulário\r\n-    const username = document.getElementById('addUsernameInput').value.trim();\r\n-    const email = document.getElementById('addUserEmailInput').value.trim();\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n     const password = document.getElementById('addUserPasswordInput').value;\r\n-    const role = document.getElementById('addUserRoleSelect').value;\r\n+    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n+    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n \r\n-    // 3. Validação simples para garantir que os campos não estão vazios\r\n-    if (!companyId || !username || !email || !password || !role) {\r\n-        showToast('Por favor, preencha todos os campos.', 'error');\r\n-        return;\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n     }\r\n \r\n-    // 4. Fornece feedback visual ao utilizador\r\n     showLoader();\r\n-    if (submitButton) submitButton.disabled = true;\r\n-\r\n     try {\r\n-        // 5. Chama a função da API para registar o utilizador\r\n-        // A `companyId` é enviada no corpo para a rota do backend poder tratar o caso do SuperAdmin\r\n-        await api.registerUser(username, password, email, role, companyId);\r\n+        // Passa os novos dados para a função da API\r\n+        const data = await api.registerUser(username, password, email, role, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n \r\n-        // 6. Lógica de sucesso\r\n-        showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            await openManageUsersModal();\r\n+        }\r\n \r\n-        // 7. ATUALIZA O MODAL DE DETALHES DA EMPRESA (A CORREÇÃO PRINCIPAL)\r\n-        // Certifica-te que o nome desta função é o mesmo que usas no teu código.\r\n-        await openCompanyDetailsModal(companyId);\r\n-\r\n-        // 8. Fecha o modal de \"Adicionar Usuário\"\r\n-        document.getElementById('addUserModal').classList.add('hidden');\r\n-        form.reset(); // Limpa o formulário para a próxima vez\r\n-\r\n     } catch (error) {\r\n-        // 9. Em caso de erro, mostra a mensagem da API\r\n-        showToast(error.message || 'Ocorreu um erro ao criar o usuário.', 'error');\r\n+        showToast(error.message, 'error');\r\n     } finally {\r\n-        // 10. Garante que o feedback visual é removido no final, quer dê certo ou errado\r\n         hideLoader();\r\n-        if (submitButton) submitButton.disabled = false;\r\n     }\r\n }\r\n \r\n function handleBackToAdmin() {\r\n"
                },
                {
                    "date": 1753816256297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -459,44 +459,59 @@\n     }\r\n }\r\n \r\n /**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n+ * Lida com a submissão do formulário para adicionar um novo utilizador.\r\n+ * Esta função deve estar no teu ficheiro de script do painel de admin (provavelmente admin.js).\r\n  * @param {Event} e - O evento de submissão do formulário.\r\n  */\r\n async function handleAddUserSubmit(e) {\r\n+    // 1. Impede que a página recarregue ao submeter o formulário\r\n     e.preventDefault();\r\n \r\n-    const username = document.getElementById('addUsernameInput').value;\r\n+    const form = e.target;\r\n+    const submitButton = form.querySelector('button[type=\"submit\"]');\r\n+\r\n+    // 2. Recolhe os dados do formulário\r\n+    const companyId = form.dataset.companyId; // Pega o ID da empresa guardado no formulário\r\n+    const username = document.getElementById('addUsernameInput').value.trim();\r\n+    const email = document.getElementById('addUserEmailInput').value.trim();\r\n     const password = document.getElementById('addUserPasswordInput').value;\r\n-    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n-    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n+    const role = document.getElementById('addUserRoleSelect').value;\r\n \r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    // 3. Validação simples para garantir que os campos não estão vazios\r\n+    if (!companyId || !username || !email || !password || !role) {\r\n+        showToast('Por favor, preencha todos os campos.', 'error');\r\n+        return;\r\n     }\r\n \r\n+    // 4. Fornece feedback visual ao utilizador\r\n     showLoader();\r\n+    if (submitButton) submitButton.disabled = true;\r\n+\r\n     try {\r\n-        // Passa os novos dados para a função da API\r\n-        const data = await api.registerUser(username, password, email, role, companyId);\r\n-        showToast(data.message, 'success');\r\n-        closeAddUserModal();\r\n+        // 5. Chama a função da API para registar o utilizador\r\n+        // A `companyId` é enviada no corpo para a rota do backend poder tratar o caso do SuperAdmin\r\n+        await api.registerUser(username, password, email, role, companyId);\r\n \r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            await openManageUsersModal();\r\n-        }\r\n+        // 6. Lógica de sucesso\r\n+        showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n \r\n+        // 7. ATUALIZA O MODAL DE DETALHES DA EMPRESA (A CORREÇÃO PRINCIPAL)\r\n+        // Certifica-te que o nome desta função é o mesmo que usas no teu código.\r\n+        await openCompanyDetailsModal(companyId);\r\n+\r\n+        // 8. Fecha o modal de \"Adicionar Usuário\"\r\n+        document.getElementById('addUserModal').classList.add('hidden');\r\n+        form.reset(); // Limpa o formulário para a próxima vez\r\n+\r\n     } catch (error) {\r\n-        showToast(error.message, 'error');\r\n+        // 9. Em caso de erro, mostra a mensagem da API\r\n+        showToast(error.message || 'Ocorreu um erro ao criar o usuário.', 'error');\r\n     } finally {\r\n+        // 10. Garante que o feedback visual é removido no final, quer dê certo ou errado\r\n         hideLoader();\r\n+        if (submitButton) submitButton.disabled = false;\r\n     }\r\n }\r\n \r\n function handleBackToAdmin() {\r\n"
                },
                {
                    "date": 1753816292780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,12 +262,12 @@\n function closeAddCompanyModal() {\r\n     if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n }\r\n \r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+function openAddUserModal(companyId) {\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    addUserForm.dataset.companyId = companyId; // Guarda o ID no dataset do formulário\r\n+    document.getElementById('addUserModal').classList.remove('hidden');\r\n }\r\n \r\n function closeAddUserModal() {\r\n     if (addUserModal) addUserModal.classList.add('hidden');\r\n"
                },
                {
                    "date": 1753816470002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,12 +262,12 @@\n function closeAddCompanyModal() {\r\n     if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n }\r\n \r\n-function openAddUserModal(companyId) {\r\n-    const addUserForm = document.getElementById('addUserForm');\r\n-    addUserForm.dataset.companyId = companyId; // Guarda o ID no dataset do formulário\r\n-    document.getElementById('addUserModal').classList.remove('hidden');\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n }\r\n \r\n function closeAddUserModal() {\r\n     if (addUserModal) addUserModal.classList.add('hidden');\r\n@@ -459,59 +459,44 @@\n     }\r\n }\r\n \r\n /**\r\n- * Lida com a submissão do formulário para adicionar um novo utilizador.\r\n- * Esta função deve estar no teu ficheiro de script do painel de admin (provavelmente admin.js).\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n  * @param {Event} e - O evento de submissão do formulário.\r\n  */\r\n async function handleAddUserSubmit(e) {\r\n-    // 1. Impede que a página recarregue ao submeter o formulário\r\n     e.preventDefault();\r\n \r\n-    const form = e.target;\r\n-    const submitButton = form.querySelector('button[type=\"submit\"]');\r\n-\r\n-    // 2. Recolhe os dados do formulário\r\n-    const companyId = form.dataset.companyId; // Pega o ID da empresa guardado no formulário\r\n-    const username = document.getElementById('addUsernameInput').value.trim();\r\n-    const email = document.getElementById('addUserEmailInput').value.trim();\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n     const password = document.getElementById('addUserPasswordInput').value;\r\n-    const role = document.getElementById('addUserRoleSelect').value;\r\n+    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n+    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n \r\n-    // 3. Validação simples para garantir que os campos não estão vazios\r\n-    if (!companyId || !username || !email || !password || !role) {\r\n-        showToast('Por favor, preencha todos os campos.', 'error');\r\n-        return;\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n     }\r\n \r\n-    // 4. Fornece feedback visual ao utilizador\r\n     showLoader();\r\n-    if (submitButton) submitButton.disabled = true;\r\n-\r\n     try {\r\n-        // 5. Chama a função da API para registar o utilizador\r\n-        // A `companyId` é enviada no corpo para a rota do backend poder tratar o caso do SuperAdmin\r\n-        await api.registerUser(username, password, email, role, companyId);\r\n+        // Passa os novos dados para a função da API\r\n+        const data = await api.registerUser(username, password, email, role, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n \r\n-        // 6. Lógica de sucesso\r\n-        showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            await openManageUsersModal();\r\n+        }\r\n \r\n-        // 7. ATUALIZA O MODAL DE DETALHES DA EMPRESA (A CORREÇÃO PRINCIPAL)\r\n-        // Certifica-te que o nome desta função é o mesmo que usas no teu código.\r\n-        await openCompanyDetailsModal(companyId);\r\n-\r\n-        // 8. Fecha o modal de \"Adicionar Usuário\"\r\n-        document.getElementById('addUserModal').classList.add('hidden');\r\n-        form.reset(); // Limpa o formulário para a próxima vez\r\n-\r\n     } catch (error) {\r\n-        // 9. Em caso de erro, mostra a mensagem da API\r\n-        showToast(error.message || 'Ocorreu um erro ao criar o usuário.', 'error');\r\n+        showToast(error.message, 'error');\r\n     } finally {\r\n-        // 10. Garante que o feedback visual é removido no final, quer dê certo ou errado\r\n         hideLoader();\r\n-        if (submitButton) submitButton.disabled = false;\r\n     }\r\n }\r\n \r\n function handleBackToAdmin() {\r\n"
                },
                {
                    "date": 1753816610836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -459,44 +459,59 @@\n     }\r\n }\r\n \r\n /**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n+ * Lida com a submissão do formulário para adicionar um novo utilizador.\r\n  * @param {Event} e - O evento de submissão do formulário.\r\n  */\r\n async function handleAddUserSubmit(e) {\r\n+    // Impede que a página recarregue\r\n     e.preventDefault();\r\n \r\n-    const username = document.getElementById('addUsernameInput').value;\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n-    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n+    const form = e.target;\r\n+    const submitButton = form.querySelector('button[type=\"submit\"]'); // Assumindo que o botão de salvar é do tipo submit\r\n \r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n-\r\n-    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n+    // Pega o ID da empresa que guardámos no dataset do formulário\r\n+    const companyId = form.dataset.companyId;\r\n     if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+        return showToast(\"Erro fatal: ID da empresa não encontrado no formulário.\", \"error\");\r\n     }\r\n \r\n+    // Recolhe os dados dos inputs\r\n+    const username = document.getElementById('addUsernameInput').value.trim();\r\n+    const email = document.getElementById('addUserEmailInput').value.trim();\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const role = document.getElementById('addUserRoleSelect').value;\r\n+\r\n+    if (!username || !email || !password || !role) {\r\n+        return showToast('Por favor, preencha todos os campos.', 'error');\r\n+    }\r\n+\r\n     showLoader();\r\n+    if (submitButton) submitButton.disabled = true;\r\n+\r\n     try {\r\n-        // Passa os novos dados para a função da API\r\n-        const data = await api.registerUser(username, password, email, role, companyId);\r\n-        showToast(data.message, 'success');\r\n+        // Chama a API para criar o utilizador\r\n+        await api.registerUser(username, password, email, role, companyId);\r\n+\r\n+        showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n+\r\n+        // --- AQUI ESTÁ A CORREÇÃO DA ATUALIZAÇÃO ---\r\n+        // 1. Busca os dados mais recentes da empresa, incluindo a nova lista de utilizadores\r\n+        const updatedData = await api.getCompanyDetails(companyId);\r\n+        \r\n+        // 2. Chama a função que redesenha o modal de detalhes com os dados atualizados\r\n+        openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+\r\n+        // 3. Fecha o modal de adicionar utilizador e limpa o formulário\r\n         closeAddUserModal();\r\n+        form.reset();\r\n \r\n-        if (isAdminLoggedIn) {\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n-        } else {\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n+        if (submitButton) submitButton.disabled = false;\r\n     }\r\n }\r\n \r\n function handleBackToAdmin() {\r\n"
                },
                {
                    "date": 1753816622597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,12 +262,19 @@\n function closeAddCompanyModal() {\r\n     if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n }\r\n \r\n-function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+function openAddUserModal(companyId) {\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    if (addUserForm) {\r\n+        addUserForm.reset(); // Limpa o formulário\r\n+        addUserForm.dataset.companyId = companyId; // GUARDA O ID NO FORMULÁRIO\r\n+    }\r\n+    \r\n+    const addUserModal = document.getElementById('addUserModal');\r\n     if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+\r\n+    document.getElementById('addUsernameInput').focus();\r\n }\r\n \r\n function closeAddUserModal() {\r\n     if (addUserModal) addUserModal.classList.add('hidden');\r\n"
                },
                {
                    "date": 1753816640874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -565,9 +565,18 @@\n     if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n     if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n     if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n     if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserBtn) {\r\n+        addUserBtn.addEventListener('click', () => {\r\n+            // Pega o ID da empresa que está guardado no modal de detalhes\r\n+            const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+            const currentCompanyId = companyDetailsModal.dataset.companyId;\r\n+\r\n+            // Chama a função passando o ID correto\r\n+            openAddUserModal(currentCompanyId);\r\n+        });\r\n+    }\r\n     if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n     if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n     if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n     if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n"
                },
                {
                    "date": 1753816796910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,14 +154,24 @@\n  * @param {Array} users - A lista de usuários da empresa.\r\n  * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n  */\r\n function openCompanyDetailsModal(company, users, masterUsers) {\r\n+    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n     selectedCompanyForAdmin = company;\r\n \r\n+    // --- LINHA CRÍTICA ADICIONADA AQUI ---\r\n+    // Guarda o ID da empresa que está a ser visualizada diretamente no elemento do modal\r\n+    companyDetailsModal.dataset.companyId = company._id;\r\n+\r\n     modalCompanyNameInput.value = company.nomeEmpresa;\r\n     modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n     modalCompanyPasswordInput.value = '';\r\n \r\n+    const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+    const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n+    const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n+    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+    \r\n     adminSubscriptionManagement.classList.remove('hidden');\r\n     if (company.subscription && company.subscription.status) {\r\n         subscriptionStatus.textContent = company.subscription.status;\r\n         subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n@@ -193,10 +203,9 @@\n     } else {\r\n         modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n     }\r\n \r\n-    // Adiciona os eventos DEPOIS de criar os botões\r\n-    addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n+    addEventListenersToCompanyDetailsModal();\r\n     companyDetailsModal.classList.remove('hidden');\r\n }\r\n \r\n function addEventListenersToCompanyDetailsModal() {\r\n@@ -264,16 +273,20 @@\n }\r\n \r\n function openAddUserModal(companyId) {\r\n     const addUserForm = document.getElementById('addUserForm');\r\n+    const addUserModal = document.getElementById('addUserModal');\r\n+\r\n     if (addUserForm) {\r\n-        addUserForm.reset(); // Limpa o formulário\r\n-        addUserForm.dataset.companyId = companyId; // GUARDA O ID NO FORMULÁRIO\r\n+        addUserForm.reset();\r\n+        // --- LINHA CRÍTICA ADICIONADA AQUI ---\r\n+        // Guarda o ID recebido no dataset do formulário para ser usado na submissão\r\n+        addUserForm.dataset.companyId = companyId;\r\n     }\r\n     \r\n-    const addUserModal = document.getElementById('addUserModal');\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-\r\n+    if (addUserModal) {\r\n+        addUserModal.classList.remove('hidden');\r\n+    }\r\n     document.getElementById('addUsernameInput').focus();\r\n }\r\n \r\n function closeAddUserModal() {\r\n"
                },
                {
                    "date": 1753816836531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -580,14 +580,18 @@\n     if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n     if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n     if (addUserBtn) {\r\n         addUserBtn.addEventListener('click', () => {\r\n-            // Pega o ID da empresa que está guardado no modal de detalhes\r\n             const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+            // Pega o ID que guardámos no modal de detalhes\r\n             const currentCompanyId = companyDetailsModal.dataset.companyId;\r\n \r\n-            // Chama a função passando o ID correto\r\n-            openAddUserModal(currentCompanyId);\r\n+            if (currentCompanyId) {\r\n+                // Chama a função passando o ID correto\r\n+                openAddUserModal(currentCompanyId);\r\n+            } else {\r\n+                showToast('Erro: Não foi possível identificar a empresa.', 'error');\r\n+            }\r\n         });\r\n     }\r\n     if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n     if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n"
                },
                {
                    "date": 1753816885957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,24 +154,14 @@\n  * @param {Array} users - A lista de usuários da empresa.\r\n  * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n  */\r\n function openCompanyDetailsModal(company, users, masterUsers) {\r\n-    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n     selectedCompanyForAdmin = company;\r\n \r\n-    // --- LINHA CRÍTICA ADICIONADA AQUI ---\r\n-    // Guarda o ID da empresa que está a ser visualizada diretamente no elemento do modal\r\n-    companyDetailsModal.dataset.companyId = company._id;\r\n-\r\n     modalCompanyNameInput.value = company.nomeEmpresa;\r\n     modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n     modalCompanyPasswordInput.value = '';\r\n \r\n-    const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n-    const subscriptionStatus = document.getElementById('subscriptionStatus');\r\n-    const subscriptionEndDate = document.getElementById('subscriptionEndDate');\r\n-    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n-    \r\n     adminSubscriptionManagement.classList.remove('hidden');\r\n     if (company.subscription && company.subscription.status) {\r\n         subscriptionStatus.textContent = company.subscription.status;\r\n         subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n@@ -203,9 +193,10 @@\n     } else {\r\n         modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n     }\r\n \r\n-    addEventListenersToCompanyDetailsModal();\r\n+    // Adiciona os eventos DEPOIS de criar os botões\r\n+    addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n     companyDetailsModal.classList.remove('hidden');\r\n }\r\n \r\n function addEventListenersToCompanyDetailsModal() {\r\n@@ -271,23 +262,12 @@\n function closeAddCompanyModal() {\r\n     if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n }\r\n \r\n-function openAddUserModal(companyId) {\r\n-    const addUserForm = document.getElementById('addUserForm');\r\n-    const addUserModal = document.getElementById('addUserModal');\r\n-\r\n-    if (addUserForm) {\r\n-        addUserForm.reset();\r\n-        // --- LINHA CRÍTICA ADICIONADA AQUI ---\r\n-        // Guarda o ID recebido no dataset do formulário para ser usado na submissão\r\n-        addUserForm.dataset.companyId = companyId;\r\n-    }\r\n-    \r\n-    if (addUserModal) {\r\n-        addUserModal.classList.remove('hidden');\r\n-    }\r\n-    document.getElementById('addUsernameInput').focus();\r\n+function openAddUserModal() {\r\n+    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n+    if (addUserModal) addUserModal.classList.remove('hidden');\r\n+    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n }\r\n \r\n function closeAddUserModal() {\r\n     if (addUserModal) addUserModal.classList.add('hidden');\r\n@@ -479,59 +459,44 @@\n     }\r\n }\r\n \r\n /**\r\n- * Lida com a submissão do formulário para adicionar um novo utilizador.\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n  * @param {Event} e - O evento de submissão do formulário.\r\n  */\r\n async function handleAddUserSubmit(e) {\r\n-    // Impede que a página recarregue\r\n     e.preventDefault();\r\n \r\n-    const form = e.target;\r\n-    const submitButton = form.querySelector('button[type=\"submit\"]'); // Assumindo que o botão de salvar é do tipo submit\r\n+    const username = document.getElementById('addUsernameInput').value;\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n+    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n \r\n-    // Pega o ID da empresa que guardámos no dataset do formulário\r\n-    const companyId = form.dataset.companyId;\r\n+    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+\r\n+    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n     if (!companyId) {\r\n-        return showToast(\"Erro fatal: ID da empresa não encontrado no formulário.\", \"error\");\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n     }\r\n \r\n-    // Recolhe os dados dos inputs\r\n-    const username = document.getElementById('addUsernameInput').value.trim();\r\n-    const email = document.getElementById('addUserEmailInput').value.trim();\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const role = document.getElementById('addUserRoleSelect').value;\r\n-\r\n-    if (!username || !email || !password || !role) {\r\n-        return showToast('Por favor, preencha todos os campos.', 'error');\r\n-    }\r\n-\r\n     showLoader();\r\n-    if (submitButton) submitButton.disabled = true;\r\n-\r\n     try {\r\n-        // Chama a API para criar o utilizador\r\n-        await api.registerUser(username, password, email, role, companyId);\r\n+        // Passa os novos dados para a função da API\r\n+        const data = await api.registerUser(username, password, email, role, companyId);\r\n+        showToast(data.message, 'success');\r\n+        closeAddUserModal();\r\n \r\n-        showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n+        if (isAdminLoggedIn) {\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+        } else {\r\n+            await openManageUsersModal();\r\n+        }\r\n \r\n-        // --- AQUI ESTÁ A CORREÇÃO DA ATUALIZAÇÃO ---\r\n-        // 1. Busca os dados mais recentes da empresa, incluindo a nova lista de utilizadores\r\n-        const updatedData = await api.getCompanyDetails(companyId);\r\n-        \r\n-        // 2. Chama a função que redesenha o modal de detalhes com os dados atualizados\r\n-        openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-\r\n-        // 3. Fecha o modal de adicionar utilizador e limpa o formulário\r\n-        closeAddUserModal();\r\n-        form.reset();\r\n-\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n-        if (submitButton) submitButton.disabled = false;\r\n     }\r\n }\r\n \r\n function handleBackToAdmin() {\r\n@@ -578,22 +543,9 @@\n     if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n     if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n     if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n     if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) {\r\n-        addUserBtn.addEventListener('click', () => {\r\n-            const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-            // Pega o ID que guardámos no modal de detalhes\r\n-            const currentCompanyId = companyDetailsModal.dataset.companyId;\r\n-\r\n-            if (currentCompanyId) {\r\n-                // Chama a função passando o ID correto\r\n-                openAddUserModal(currentCompanyId);\r\n-            } else {\r\n-                showToast('Erro: Não foi possível identificar a empresa.', 'error');\r\n-            }\r\n-        });\r\n-    }\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n     if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n     if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n     if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n     if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n"
                },
                {
                    "date": 1753817081469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -467,29 +467,35 @@\n     e.preventDefault();\r\n \r\n     const username = document.getElementById('addUsernameInput').value;\r\n     const password = document.getElementById('addUserPasswordInput').value;\r\n-    const email = document.getElementById('addUserEmailInput').value; // <-- NOVO\r\n-    const role = document.getElementById('addUserRoleSelect').value; // <-- NOVO\r\n+    const email = document.getElementById('addUserEmailInput').value;\r\n+    const role = document.getElementById('addUserRoleSelect').value;\r\n \r\n-    const companyId = selectedCompanyForAdmin?._id || currentLoggedInCompany?._id;\r\n+    // A variável 'selectedCompanyForAdmin' é definida quando abre os detalhes da empresa.\r\n+    const companyId = selectedCompanyForAdmin?._id;\r\n \r\n-    // O campo 'confirmPassword' não existe mais no novo formulário, então removemos a verificação\r\n     if (!companyId) {\r\n         return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n     }\r\n \r\n     showLoader();\r\n     try {\r\n-        // Passa os novos dados para a função da API\r\n+        // Chama a API para registar o novo utilizador\r\n         const data = await api.registerUser(username, password, email, role, companyId);\r\n         showToast(data.message, 'success');\r\n         closeAddUserModal();\r\n \r\n+        // Se o pedido foi feito pelo admin (que é o caso aqui)\r\n         if (isAdminLoggedIn) {\r\n+            // Busca os dados mais recentes da empresa, incluindo a nova lista de utilizadores\r\n             const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users);\r\n+\r\n+            // --- AQUI ESTÁ A CORREÇÃO ---\r\n+            // Passamos os 3 argumentos que a função espera: company, users e masterUsers\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n         } else {\r\n+            // Esta lógica é para o caso de um proprietário adicionar utilizadores, que também deve funcionar\r\n             await openManageUsersModal();\r\n         }\r\n \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1753817308396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n function closeAddUserModal() {\r\n     if (addUserModal) addUserModal.classList.add('hidden');\r\n }\r\n \r\n-async function openManageUsersModal() {\r\n+export async function openManageUsersModal() {\r\n     showLoader();\r\n     try {\r\n         // CORREÇÃO: Buscamos os detalhes da empresa, que agora incluem 'users' (do tenant)\r\n         // e 'masterUsers' (do banco mestre).\r\n"
                },
                {
                    "date": 1753817699440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,81 +272,127 @@\n function closeAddUserModal() {\r\n     if (addUserModal) addUserModal.classList.add('hidden');\r\n }\r\n \r\n-export async function openManageUsersModal() {\r\n+/**\r\n+ * Abre e preenche o modal de gestão de utilizadores para uma empresa específica.\r\n+ * Busca os dados mais recentes da API e configura os eventos de interação.\r\n+ * @param {object} company - O objeto da empresa cujos utilizadores serão geridos.\r\n+ */\r\n+export async function openManageUsersModal(company) {\r\n+    // Validação inicial para garantir que recebemos a empresa correta\r\n+    if (!company || !company._id) {\r\n+        showToast('Erro: Não foi possível identificar a empresa para gerir os utilizadores.', 'error');\r\n+        return;\r\n+    }\r\n+\r\n     showLoader();\r\n+    const manageUsersModal = document.getElementById('manageUsersModal');\r\n+    const companyUsersList = document.getElementById('companyUsersList');\r\n+\r\n     try {\r\n-        // CORREÇÃO: Buscamos os detalhes da empresa, que agora incluem 'users' (do tenant)\r\n-        // e 'masterUsers' (do banco mestre).\r\n-        const { users, masterUsers } = await api.getCompanyDetails(currentLoggedInCompany._id);\r\n+        // 1. Busca sempre os dados mais recentes da API\r\n+        const { masterUsers } = await api.getCompanyDetails(company._id);\r\n \r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n+        // 2. Limpa a lista de utilizadores anterior\r\n+        if (companyUsersList) {\r\n+            companyUsersList.innerHTML = '';\r\n+        } else {\r\n+            console.error(\"Elemento 'companyUsersList' não foi encontrado no HTML.\");\r\n+            hideLoader();\r\n+            return; // Interrompe a função se o elemento não existir\r\n+        }\r\n \r\n-        companyUsersList.innerHTML = ''; \r\n+        // 3. Constrói o HTML da nova lista de utilizadores\r\n+        if (masterUsers && masterUsers.length > 0) {\r\n+            const assignableRoles = ['Gerente', 'Funcionário'];\r\n \r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        // Usamos a lista de 'masterUsers' para construir o modal, pois ela tem os IDs corretos.\r\n-        if (masterUsers && masterUsers.length > 0) {\r\n             masterUsers.forEach(user => {\r\n                 const isOwner = user.role === 'Proprietário';\r\n \r\n+                // Cria as opções do dropdown de cargos\r\n                 const roleOptions = assignableRoles.map(role =>\r\n                     `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n                 ).join('');\r\n \r\n+                // Se for proprietário, mostra texto; senão, mostra o dropdown.\r\n                 const roleHtml = isOwner\r\n                     ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    // CORREÇÃO: O data-user-id agora usa o ID do masterUser\r\n                     : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+                \r\n+                // Se não for proprietário, mostra o botão de remover.\r\n+                const buttonHtml = isOwner\r\n+                    ? ''\r\n+                    : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`;\r\n \r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                const userRowHtml = `\r\n                     <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n                         <p class=\"font-semibold text-white\">${user.username}</p>\r\n                         <div class=\"flex items-center space-x-2\">\r\n                             ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                            ${buttonHtml}\r\n                         </div>\r\n                     </div>\r\n-                `);\r\n+                `;\r\n+                companyUsersList.insertAdjacentHTML('beforeend', userRowHtml);\r\n             });\r\n+        } else {\r\n+            companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum usuário cadastrado para esta empresa.</p>';\r\n         }\r\n \r\n-        // Adiciona evento de clique para remover (precisará de ajuste futuro se necessário)\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            // ...\r\n-        });\r\n-\r\n-        // Adiciona evento para alterar o cargo (agora com o ID correto)\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+        // 4. Adiciona os eventos aos novos elementos criados dinamicamente\r\n+        \r\n+        // Evento para a mudança de cargo (role)\r\n+        companyUsersList.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n             select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n+                const userId = e.target.dataset.userId;\r\n                 const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n \r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    // Lógica para reverter a seleção visual\r\n-                    const originalUser = (await api.getCompanyDetails(companyId)).masterUsers.find(u => u._id === userId);\r\n-                    if(originalUser) e.target.value = originalUser.role;\r\n+                if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    await openManageUsersModal(company); // Recarrega o modal para reverter a mudança visual\r\n                     return;\r\n                 }\r\n \r\n                 showLoader();\r\n                 try {\r\n-                    // A chamada à API agora envia o ID correto\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    await api.updateUserRole(company._id, userId, newRole);\r\n                     showToast('Cargo do utilizador atualizado com sucesso!');\r\n                 } catch (error) {\r\n                     showToast(error.message, 'error');\r\n                 } finally {\r\n-                    hideLoader();\r\n+                    // Recarrega o modal para garantir que a interface está 100% sincronizada\r\n+                    await openManageUsersModal(company);\r\n                 }\r\n             });\r\n         });\r\n \r\n-        manageUsersModal.classList.remove('hidden');\r\n+        // Evento para o botão de remover utilizador\r\n+        companyUsersList.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                const userId = e.currentTarget.dataset.userId;\r\n+\r\n+                if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+                    return;\r\n+                }\r\n+                \r\n+                showLoader();\r\n+                try {\r\n+                    await api.deleteUserFromCompany(company._id, userId);\r\n+                    showToast('Utilizador removido com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    // Recarrega sempre o modal para mostrar a lista atualizada\r\n+                    await openManageUsersModal(company);\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        // 5. Mostra o modal\r\n+        if (manageUsersModal) {\r\n+            manageUsersModal.classList.remove('hidden');\r\n+        }\r\n+\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n"
                },
                {
                    "date": 1753817778372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,127 +272,78 @@\n function closeAddUserModal() {\r\n     if (addUserModal) addUserModal.classList.add('hidden');\r\n }\r\n \r\n-/**\r\n- * Abre e preenche o modal de gestão de utilizadores para uma empresa específica.\r\n- * Busca os dados mais recentes da API e configura os eventos de interação.\r\n- * @param {object} company - O objeto da empresa cujos utilizadores serão geridos.\r\n- */\r\n-export async function openManageUsersModal(company) {\r\n-    // Validação inicial para garantir que recebemos a empresa correta\r\n-    if (!company || !company._id) {\r\n-        showToast('Erro: Não foi possível identificar a empresa para gerir os utilizadores.', 'error');\r\n-        return;\r\n-    }\r\n-\r\n+export async function openManageUsersModal(company) { // A MUDANÇA COMEÇA AQUI\r\n     showLoader();\r\n-    const manageUsersModal = document.getElementById('manageUsersModal');\r\n-    const companyUsersList = document.getElementById('companyUsersList');\r\n-\r\n     try {\r\n-        // 1. Busca sempre os dados mais recentes da API\r\n-        const { masterUsers } = await api.getCompanyDetails(company._id);\r\n+        // Usa o ID da empresa recebida como argumento\r\n+        const { users, masterUsers } = await api.getCompanyDetails(company._id);\r\n \r\n-        // 2. Limpa a lista de utilizadores anterior\r\n-        if (companyUsersList) {\r\n-            companyUsersList.innerHTML = '';\r\n-        } else {\r\n-            console.error(\"Elemento 'companyUsersList' não foi encontrado no HTML.\");\r\n-            hideLoader();\r\n-            return; // Interrompe a função se o elemento não existir\r\n-        }\r\n+        const companyUsersList = document.getElementById('companyUsersList');\r\n+        if (!companyUsersList) return;\r\n \r\n-        // 3. Constrói o HTML da nova lista de utilizadores\r\n+        companyUsersList.innerHTML = ''; \r\n+\r\n+        const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n         if (masterUsers && masterUsers.length > 0) {\r\n-            const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n             masterUsers.forEach(user => {\r\n                 const isOwner = user.role === 'Proprietário';\r\n \r\n-                // Cria as opções do dropdown de cargos\r\n                 const roleOptions = assignableRoles.map(role =>\r\n                     `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n                 ).join('');\r\n \r\n-                // Se for proprietário, mostra texto; senão, mostra o dropdown.\r\n                 const roleHtml = isOwner\r\n                     ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n                     : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-                \r\n-                // Se não for proprietário, mostra o botão de remover.\r\n-                const buttonHtml = isOwner\r\n-                    ? ''\r\n-                    : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`;\r\n \r\n-                const userRowHtml = `\r\n+                companyUsersList.insertAdjacentHTML('beforeend', `\r\n                     <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n                         <p class=\"font-semibold text-white\">${user.username}</p>\r\n                         <div class=\"flex items-center space-x-2\">\r\n                             ${roleHtml}\r\n-                            ${buttonHtml}\r\n+                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n                         </div>\r\n                     </div>\r\n-                `;\r\n-                companyUsersList.insertAdjacentHTML('beforeend', userRowHtml);\r\n+                `);\r\n             });\r\n-        } else {\r\n-            companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum usuário cadastrado para esta empresa.</p>';\r\n         }\r\n \r\n-        // 4. Adiciona os eventos aos novos elementos criados dinamicamente\r\n-        \r\n-        // Evento para a mudança de cargo (role)\r\n-        companyUsersList.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+        // Adiciona evento de clique para remover (precisará de ajuste futuro se necessário)\r\n+        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            // ...\r\n+        });\r\n+\r\n+        // Adiciona evento para alterar o cargo (agora com o ID correto)\r\n+        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n             select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n+                const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n                 const newRole = e.target.value;\r\n+                const companyId = currentLoggedInCompany._id;\r\n \r\n-                if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    await openManageUsersModal(company); // Recarrega o modal para reverter a mudança visual\r\n+                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    // Lógica para reverter a seleção visual\r\n+                    const originalUser = (await api.getCompanyDetails(companyId)).masterUsers.find(u => u._id === userId);\r\n+                    if(originalUser) e.target.value = originalUser.role;\r\n                     return;\r\n                 }\r\n \r\n                 showLoader();\r\n                 try {\r\n-                    await api.updateUserRole(company._id, userId, newRole);\r\n+                    // A chamada à API agora envia o ID correto\r\n+                    await api.updateUserRole(companyId, userId, newRole);\r\n                     showToast('Cargo do utilizador atualizado com sucesso!');\r\n                 } catch (error) {\r\n                     showToast(error.message, 'error');\r\n                 } finally {\r\n-                    // Recarrega o modal para garantir que a interface está 100% sincronizada\r\n-                    await openManageUsersModal(company);\r\n+                    hideLoader();\r\n                 }\r\n             });\r\n         });\r\n \r\n-        // Evento para o botão de remover utilizador\r\n-        companyUsersList.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                const userId = e.currentTarget.dataset.userId;\r\n-\r\n-                if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n-                    return;\r\n-                }\r\n-                \r\n-                showLoader();\r\n-                try {\r\n-                    await api.deleteUserFromCompany(company._id, userId);\r\n-                    showToast('Utilizador removido com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    // Recarrega sempre o modal para mostrar a lista atualizada\r\n-                    await openManageUsersModal(company);\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        // 5. Mostra o modal\r\n-        if (manageUsersModal) {\r\n-            manageUsersModal.classList.remove('hidden');\r\n-        }\r\n-\r\n+        manageUsersModal.classList.remove('hidden');\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n"
                },
                {
                    "date": 1753817908285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,78 +272,127 @@\n function closeAddUserModal() {\r\n     if (addUserModal) addUserModal.classList.add('hidden');\r\n }\r\n \r\n-export async function openManageUsersModal(company) { // A MUDANÇA COMEÇA AQUI\r\n+/**\r\n+ * Abre e preenche o modal de gestão de utilizadores para uma empresa específica.\r\n+ * Busca os dados mais recentes da API e configura os eventos de interação.\r\n+ * @param {object} company - O objeto da empresa cujos utilizadores serão geridos.\r\n+ */\r\n+export async function openManageUsersModal(company) {\r\n+    // Validação inicial para garantir que recebemos a empresa correta\r\n+    if (!company || !company._id) {\r\n+        showToast('Erro: Não foi possível identificar a empresa para gerir os utilizadores.', 'error');\r\n+        return;\r\n+    }\r\n+\r\n     showLoader();\r\n+    const manageUsersModal = document.getElementById('manageUsersModal');\r\n+    const companyUsersList = document.getElementById('companyUsersList');\r\n+\r\n     try {\r\n-        // Usa o ID da empresa recebida como argumento\r\n-        const { users, masterUsers } = await api.getCompanyDetails(company._id);\r\n+        // 1. Busca sempre os dados mais recentes da API\r\n+        const { masterUsers } = await api.getCompanyDetails(company._id);\r\n \r\n-        const companyUsersList = document.getElementById('companyUsersList');\r\n-        if (!companyUsersList) return;\r\n+        // 2. Limpa a lista de utilizadores anterior\r\n+        if (companyUsersList) {\r\n+            companyUsersList.innerHTML = '';\r\n+        } else {\r\n+            console.error(\"Elemento 'companyUsersList' não foi encontrado no HTML.\");\r\n+            hideLoader();\r\n+            return; // Interrompe a função se o elemento não existir\r\n+        }\r\n \r\n-        companyUsersList.innerHTML = ''; \r\n+        // 3. Constrói o HTML da nova lista de utilizadores\r\n+        if (masterUsers && masterUsers.length > 0) {\r\n+            const assignableRoles = ['Gerente', 'Funcionário'];\r\n \r\n-        const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-        if (masterUsers && masterUsers.length > 0) {\r\n             masterUsers.forEach(user => {\r\n                 const isOwner = user.role === 'Proprietário';\r\n \r\n+                // Cria as opções do dropdown de cargos\r\n                 const roleOptions = assignableRoles.map(role =>\r\n                     `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n                 ).join('');\r\n \r\n+                // Se for proprietário, mostra texto; senão, mostra o dropdown.\r\n                 const roleHtml = isOwner\r\n                     ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n                     : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+                \r\n+                // Se não for proprietário, mostra o botão de remover.\r\n+                const buttonHtml = isOwner\r\n+                    ? ''\r\n+                    : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`;\r\n \r\n-                companyUsersList.insertAdjacentHTML('beforeend', `\r\n+                const userRowHtml = `\r\n                     <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n                         <p class=\"font-semibold text-white\">${user.username}</p>\r\n                         <div class=\"flex items-center space-x-2\">\r\n                             ${roleHtml}\r\n-                            ${isOwner ? '' : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`}\r\n+                            ${buttonHtml}\r\n                         </div>\r\n                     </div>\r\n-                `);\r\n+                `;\r\n+                companyUsersList.insertAdjacentHTML('beforeend', userRowHtml);\r\n             });\r\n+        } else {\r\n+            companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum usuário cadastrado para esta empresa.</p>';\r\n         }\r\n \r\n-        // Adiciona evento de clique para remover (precisará de ajuste futuro se necessário)\r\n-        document.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            // ...\r\n-        });\r\n-\r\n-        // Adiciona evento para alterar o cargo (agora com o ID correto)\r\n-        document.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+        // 4. Adiciona os eventos aos novos elementos criados dinamicamente\r\n+        \r\n+        // Evento para a mudança de cargo (role)\r\n+        companyUsersList.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n             select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId; // Este agora é o ID do MasterUser\r\n+                const userId = e.target.dataset.userId;\r\n                 const newRole = e.target.value;\r\n-                const companyId = currentLoggedInCompany._id;\r\n \r\n-                if (!confirm(`Tem a certeza que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    // Lógica para reverter a seleção visual\r\n-                    const originalUser = (await api.getCompanyDetails(companyId)).masterUsers.find(u => u._id === userId);\r\n-                    if(originalUser) e.target.value = originalUser.role;\r\n+                if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    await openManageUsersModal(company); // Recarrega o modal para reverter a mudança visual\r\n                     return;\r\n                 }\r\n \r\n                 showLoader();\r\n                 try {\r\n-                    // A chamada à API agora envia o ID correto\r\n-                    await api.updateUserRole(companyId, userId, newRole);\r\n+                    await api.updateUserRole(company._id, userId, newRole);\r\n                     showToast('Cargo do utilizador atualizado com sucesso!');\r\n                 } catch (error) {\r\n                     showToast(error.message, 'error');\r\n                 } finally {\r\n-                    hideLoader();\r\n+                    // Recarrega o modal para garantir que a interface está 100% sincronizada\r\n+                    await openManageUsersModal(company);\r\n                 }\r\n             });\r\n         });\r\n \r\n-        manageUsersModal.classList.remove('hidden');\r\n+        // Evento para o botão de remover utilizador\r\n+        companyUsersList.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                const userId = e.currentTarget.dataset.userId;\r\n+\r\n+                if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+                    return;\r\n+                }\r\n+                \r\n+                showLoader();\r\n+                try {\r\n+                    await api.deleteUserFromCompany(company._id, userId);\r\n+                    showToast('Utilizador removido com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    // Recarrega sempre o modal para mostrar a lista atualizada\r\n+                    await openManageUsersModal(company);\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        // 5. Mostra o modal\r\n+        if (manageUsersModal) {\r\n+            manageUsersModal.classList.remove('hidden');\r\n+        }\r\n+\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n"
                },
                {
                    "date": 1753818018436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,9 +262,9 @@\n function closeAddCompanyModal() {\r\n     if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n }\r\n \r\n-function openAddUserModal() {\r\n+export function openAddUserModal() {\r\n     if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n     if (addUserModal) addUserModal.classList.remove('hidden');\r\n     document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n }\r\n"
                },
                {
                    "date": 1753818288986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,12 +262,46 @@\n function closeAddCompanyModal() {\r\n     if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n }\r\n \r\n-export function openAddUserModal() {\r\n-    if (addUserForm) addUserForm.reset(); // Limpa o formulário\r\n-    if (addUserModal) addUserModal.classList.remove('hidden');\r\n-    document.getElementById('addUsernameInput').focus(); // Foca no primeiro campo\r\n+export function openAddUserModal(companyId) {\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    const addUserModal = document.getElementById('addUserModal');\r\n+    const addUserRoleSelect = document.getElementById('addUserRoleSelect');\r\n+\r\n+    // --- INÍCIO DA NOVA LÓGICA ---\r\n+\r\n+    // 1. Define a lista de cargos permitidos com base em quem está logado\r\n+    let availableRoles;\r\n+    if (isAdminLoggedIn) {\r\n+        // Se for o SuperAdmin, pode criar qualquer cargo\r\n+        availableRoles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+    } else {\r\n+        // Se não for o Admin (ou seja, é um Proprietário), só pode criar Gerente ou Funcionário\r\n+        availableRoles = ['Gerente', 'Funcionário'];\r\n+    }\r\n+\r\n+    // 2. Limpa as opções antigas e preenche o dropdown com as opções corretas\r\n+    addUserRoleSelect.innerHTML = ''; // Limpa o select\r\n+    availableRoles.forEach(role => {\r\n+        const option = document.createElement('option');\r\n+        option.value = role;\r\n+        option.textContent = role;\r\n+        addUserRoleSelect.appendChild(option);\r\n+    });\r\n+\r\n+    // --- FIM DA NOVA LÓGICA ---\r\n+\r\n+    // 3. O resto da função continua como antes\r\n+    if (addUserForm) {\r\n+        addUserForm.reset();\r\n+        addUserForm.dataset.companyId = companyId;\r\n+    }\r\n+    \r\n+    if (addUserModal) {\r\n+        addUserModal.classList.remove('hidden');\r\n+    }\r\n+    document.getElementById('addUsernameInput').focus();\r\n }\r\n \r\n function closeAddUserModal() {\r\n     if (addUserModal) addUserModal.classList.add('hidden');\r\n"
                },
                {
                    "date": 1753818644751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,34 +267,26 @@\n     const addUserForm = document.getElementById('addUserForm');\r\n     const addUserModal = document.getElementById('addUserModal');\r\n     const addUserRoleSelect = document.getElementById('addUserRoleSelect');\r\n \r\n-    // --- INÍCIO DA NOVA LÓGICA ---\r\n-\r\n-    // 1. Define a lista de cargos permitidos com base em quem está logado\r\n     let availableRoles;\r\n     if (isAdminLoggedIn) {\r\n-        // Se for o SuperAdmin, pode criar qualquer cargo\r\n         availableRoles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n     } else {\r\n-        // Se não for o Admin (ou seja, é um Proprietário), só pode criar Gerente ou Funcionário\r\n         availableRoles = ['Gerente', 'Funcionário'];\r\n     }\r\n \r\n-    // 2. Limpa as opções antigas e preenche o dropdown com as opções corretas\r\n-    addUserRoleSelect.innerHTML = ''; // Limpa o select\r\n+    addUserRoleSelect.innerHTML = '';\r\n     availableRoles.forEach(role => {\r\n         const option = document.createElement('option');\r\n         option.value = role;\r\n         option.textContent = role;\r\n         addUserRoleSelect.appendChild(option);\r\n     });\r\n \r\n-    // --- FIM DA NOVA LÓGICA ---\r\n-\r\n-    // 3. O resto da função continua como antes\r\n     if (addUserForm) {\r\n         addUserForm.reset();\r\n+        // Guarda o ID recebido no dataset do formulário\r\n         addUserForm.dataset.companyId = companyId;\r\n     }\r\n     \r\n     if (addUserModal) {\r\n@@ -544,45 +536,47 @@\n  * @param {Event} e - O evento de submissão do formulário.\r\n  */\r\n async function handleAddUserSubmit(e) {\r\n     e.preventDefault();\r\n+    const form = e.target;\r\n+    const submitButton = form.querySelector('button[type=\"submit\"]');\r\n \r\n-    const username = document.getElementById('addUsernameInput').value;\r\n+    // AQUI ESTÁ A CORREÇÃO PRINCIPAL: Lê o ID diretamente do formulário\r\n+    const companyId = form.dataset.companyId;\r\n+    if (!companyId) {\r\n+        // Esta mensagem de erro agora só aparecerá se algo estiver muito errado\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    const username = document.getElementById('addUsernameInput').value.trim();\r\n+    const email = document.getElementById('addUserEmailInput').value.trim();\r\n     const password = document.getElementById('addUserPasswordInput').value;\r\n-    const email = document.getElementById('addUserEmailInput').value;\r\n     const role = document.getElementById('addUserRoleSelect').value;\r\n \r\n-    // A variável 'selectedCompanyForAdmin' é definida quando abre os detalhes da empresa.\r\n-    const companyId = selectedCompanyForAdmin?._id;\r\n-\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    if (!username || !email || !password || !role) {\r\n+        return showToast('Por favor, preencha todos os campos.', 'error');\r\n     }\r\n \r\n     showLoader();\r\n+    if (submitButton) submitButton.disabled = true;\r\n+\r\n     try {\r\n-        // Chama a API para registar o novo utilizador\r\n-        const data = await api.registerUser(username, password, email, role, companyId);\r\n-        showToast(data.message, 'success');\r\n+        await api.registerUser(username, password, email, role, companyId);\r\n+        showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n+        \r\n+        // Se for um proprietário a adicionar, recarrega o modal de gestão de utilizadores\r\n+        if (!isAdminLoggedIn) {\r\n+            await openManageUsersModal({ _id: companyId }); // Passa um objeto de empresa simples\r\n+        }\r\n+        \r\n         closeAddUserModal();\r\n+        form.reset();\r\n \r\n-        // Se o pedido foi feito pelo admin (que é o caso aqui)\r\n-        if (isAdminLoggedIn) {\r\n-            // Busca os dados mais recentes da empresa, incluindo a nova lista de utilizadores\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-\r\n-            // --- AQUI ESTÁ A CORREÇÃO ---\r\n-            // Passamos os 3 argumentos que a função espera: company, users e masterUsers\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-        } else {\r\n-            // Esta lógica é para o caso de um proprietário adicionar utilizadores, que também deve funcionar\r\n-            await openManageUsersModal();\r\n-        }\r\n-\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n+        if (submitButton) submitButton.disabled = false;\r\n     }\r\n }\r\n \r\n function handleBackToAdmin() {\r\n"
                },
                {
                    "date": 1753820498588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n const viewAnnouncementsTab = document.getElementById('viewAnnouncementsTab');\r\n const companiesView = document.getElementById('companiesView');\r\n const announcementsView = document.getElementById('announcementsView');\r\n const adminTabButtons = document.querySelectorAll('.admin-tab-btn');\r\n+const AnnouncementSchema = require('../models/Announcement').schema;\r\n \r\n /**\r\n  * Alterna a visualização entre as abas do painel de admin.\r\n  * @param {string} viewToShow - O nome da aba para mostrar ('companies' ou 'announcements').\r\n@@ -597,10 +598,79 @@\n         }, 2000);\r\n     }\r\n }\r\n \r\n+// --- GESTÃO DE ANÚNCIOS ---\r\n \r\n+// Rota para LER todos os anúncios\r\n+router.get('/announcements', async (req, res) => {\r\n+    if (req.user.role !== 'SuperAdmin') return res.status(403).json({ message: 'Acesso negado.' });\r\n+    try {\r\n+        const Announcement = req.masterDb.model('Announcement', AnnouncementSchema);\r\n+        // Ordena para mostrar os mais recentes primeiro\r\n+        const announcements = await Announcement.find({}).sort({ createdAt: -1 });\r\n+        res.status(200).json(announcements);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: 'Erro ao buscar anúncios.' });\r\n+    }\r\n+});\r\n \r\n+// Rota para CRIAR um novo anúncio\r\n+router.post('/announcements', async (req, res) => {\r\n+    if (req.user.role !== 'SuperAdmin') return res.status(403).json({ message: 'Acesso negado.' });\r\n+    try {\r\n+        const { message, link, isActive } = req.body;\r\n+        const Announcement = req.masterDb.model('Announcement', AnnouncementSchema);\r\n+\r\n+        // Lógica para garantir que apenas um anúncio esteja ativo\r\n+        if (isActive) {\r\n+            await Announcement.updateMany({}, { $set: { isActive: false } });\r\n+        }\r\n+\r\n+        const newAnnouncement = await Announcement.create({ message, link, isActive });\r\n+        res.status(201).json(newAnnouncement);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: 'Erro ao criar anúncio.' });\r\n+    }\r\n+});\r\n+\r\n+// Rota para ATUALIZAR um anúncio\r\n+router.patch('/announcements/:id', async (req, res) => {\r\n+    if (req.user.role !== 'SuperAdmin') return res.status(403).json({ message: 'Acesso negado.' });\r\n+    try {\r\n+        const { message, link, isActive } = req.body;\r\n+        const Announcement = req.masterDb.model('Announcement', AnnouncementSchema);\r\n+        \r\n+        // Lógica para garantir que apenas um anúncio esteja ativo\r\n+        if (isActive) {\r\n+            await Announcement.updateMany({}, { $set: { isActive: false } });\r\n+        }\r\n+\r\n+        const updatedAnnouncement = await Announcement.findByIdAndUpdate(\r\n+            req.params.id,\r\n+            { message, link, isActive },\r\n+            { new: true }\r\n+        );\r\n+        res.status(200).json(updatedAnnouncement);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: 'Erro ao atualizar anúncio.' });\r\n+    }\r\n+});\r\n+\r\n+// Rota para APAGAR um anúncio\r\n+router.delete('/announcements/:id', async (req, res) => {\r\n+    if (req.user.role !== 'SuperAdmin') return res.status(403).json({ message: 'Acesso negado.' });\r\n+    try {\r\n+        const Announcement = req.masterDb.model('Announcement', AnnouncementSchema);\r\n+        await Announcement.findByIdAndDelete(req.params.id);\r\n+        res.status(200).json({ message: 'Anúncio apagado com sucesso.' });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: 'Erro ao apagar anúncio.' });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     // --- Event Listeners do Painel de Admin ---\r\n \r\n     const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n"
                },
                {
                    "date": 1753820687039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -598,79 +598,109 @@\n         }, 2000);\r\n     }\r\n }\r\n \r\n-// --- GESTÃO DE ANÚNCIOS ---\r\n+// --- Funções para a Gestão de Anúncios ---\r\n \r\n-// Rota para LER todos os anúncios\r\n-router.get('/announcements', async (req, res) => {\r\n-    if (req.user.role !== 'SuperAdmin') return res.status(403).json({ message: 'Acesso negado.' });\r\n+/**\r\n+ * Busca todos os anúncios da API e os exibe na lista.\r\n+ */\r\n+async function renderAnnouncements() {\r\n+    showLoader();\r\n+    const announcementsList = document.getElementById('announcementsList');\r\n+    announcementsList.innerHTML = ''; // Limpa a lista\r\n     try {\r\n-        const Announcement = req.masterDb.model('Announcement', AnnouncementSchema);\r\n-        // Ordena para mostrar os mais recentes primeiro\r\n-        const announcements = await Announcement.find({}).sort({ createdAt: -1 });\r\n-        res.status(200).json(announcements);\r\n+        const announcements = await api.getAllAnnouncements();\r\n+        if (announcements.length === 0) {\r\n+            announcementsList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum anúncio criado ainda.</p>';\r\n+        } else {\r\n+            announcements.forEach(ann => {\r\n+                const statusClass = ann.isActive ? 'bg-green-500' : 'bg-gray-500';\r\n+                const statusText = ann.isActive ? 'Ativo' : 'Inativo';\r\n+                \r\n+                announcementsList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-4 flex justify-between items-center\">\r\n+                        <div>\r\n+                            <p class=\"text-white\">${ann.message}</p>\r\n+                            <p class=\"text-xs text-gray-400\">${ann.link || 'Sem link'}</p>\r\n+                        </div>\r\n+                        <div class=\"flex items-center space-x-3\">\r\n+                            <span class=\"text-xs font-bold text-white px-2 py-1 rounded-full ${statusClass}\">${statusText}</span>\r\n+                            <button class=\"edit-announcement-btn text-blue-400 hover:text-blue-300\" data-id=\"${ann._id}\"><i class=\"fas fa-edit\"></i></button>\r\n+                            <button class=\"delete-announcement-btn text-red-400 hover:text-red-300\" data-id=\"${ann._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n     } catch (error) {\r\n-        res.status(500).json({ message: 'Erro ao buscar anúncios.' });\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n     }\r\n-});\r\n+}\r\n \r\n-// Rota para CRIAR um novo anúncio\r\n-router.post('/announcements', async (req, res) => {\r\n-    if (req.user.role !== 'SuperAdmin') return res.status(403).json({ message: 'Acesso negado.' });\r\n-    try {\r\n-        const { message, link, isActive } = req.body;\r\n-        const Announcement = req.masterDb.model('Announcement', AnnouncementSchema);\r\n+/**\r\n+ * Abre o modal de anúncios, seja para criar um novo ou editar um existente.\r\n+ * @param {object | null} announcement - O objeto do anúncio para editar, ou null para criar.\r\n+ */\r\n+function openAnnouncementModal(announcement = null) {\r\n+    const modal = document.getElementById('announcementModal');\r\n+    const form = document.getElementById('announcementForm');\r\n+    const title = document.getElementById('announcementModalTitle');\r\n+    \r\n+    form.reset(); // Limpa o formulário\r\n \r\n-        // Lógica para garantir que apenas um anúncio esteja ativo\r\n-        if (isActive) {\r\n-            await Announcement.updateMany({}, { $set: { isActive: false } });\r\n-        }\r\n-\r\n-        const newAnnouncement = await Announcement.create({ message, link, isActive });\r\n-        res.status(201).json(newAnnouncement);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: 'Erro ao criar anúncio.' });\r\n+    if (announcement) {\r\n+        // Modo Edição\r\n+        title.textContent = 'Editar Anúncio';\r\n+        document.getElementById('announcementId').value = announcement._id;\r\n+        document.getElementById('announcementMessage').value = announcement.message;\r\n+        document.getElementById('announcementLink').value = announcement.link;\r\n+        document.getElementById('announcementIsActive').checked = announcement.isActive;\r\n+    } else {\r\n+        // Modo Criação\r\n+        title.textContent = 'Novo Anúncio';\r\n+        document.getElementById('announcementId').value = '';\r\n     }\r\n-});\r\n+    \r\n+    modal.classList.remove('hidden');\r\n+}\r\n \r\n-// Rota para ATUALIZAR um anúncio\r\n-router.patch('/announcements/:id', async (req, res) => {\r\n-    if (req.user.role !== 'SuperAdmin') return res.status(403).json({ message: 'Acesso negado.' });\r\n+/**\r\n+ * Lida com a submissão do formulário de anúncio (criação ou edição).\r\n+ */\r\n+async function handleAnnouncementFormSubmit(e) {\r\n+    e.preventDefault();\r\n+    const id = document.getElementById('announcementId').value;\r\n+    const payload = {\r\n+        message: document.getElementById('announcementMessage').value,\r\n+        link: document.getElementById('announcementLink').value,\r\n+        isActive: document.getElementById('announcementIsActive').checked\r\n+    };\r\n+\r\n+    showLoader();\r\n     try {\r\n-        const { message, link, isActive } = req.body;\r\n-        const Announcement = req.masterDb.model('Announcement', AnnouncementSchema);\r\n-        \r\n-        // Lógica para garantir que apenas um anúncio esteja ativo\r\n-        if (isActive) {\r\n-            await Announcement.updateMany({}, { $set: { isActive: false } });\r\n+        if (id) {\r\n+            // Se tem ID, atualiza\r\n+            await api.updateAnnouncement(id, payload);\r\n+            showToast('Anúncio atualizado com sucesso!', 'success');\r\n+        } else {\r\n+            // Se não tem ID, cria\r\n+            await api.createAnnouncement(payload);\r\n+            showToast('Anúncio criado com sucesso!', 'success');\r\n         }\r\n-\r\n-        const updatedAnnouncement = await Announcement.findByIdAndUpdate(\r\n-            req.params.id,\r\n-            { message, link, isActive },\r\n-            { new: true }\r\n-        );\r\n-        res.status(200).json(updatedAnnouncement);\r\n+        document.getElementById('announcementModal').classList.add('hidden');\r\n+        await renderAnnouncements(); // Atualiza a lista\r\n     } catch (error) {\r\n-        res.status(500).json({ message: 'Erro ao atualizar anúncio.' });\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n     }\r\n-});\r\n+}\r\n \r\n-// Rota para APAGAR um anúncio\r\n-router.delete('/announcements/:id', async (req, res) => {\r\n-    if (req.user.role !== 'SuperAdmin') return res.status(403).json({ message: 'Acesso negado.' });\r\n-    try {\r\n-        const Announcement = req.masterDb.model('Announcement', AnnouncementSchema);\r\n-        await Announcement.findByIdAndDelete(req.params.id);\r\n-        res.status(200).json({ message: 'Anúncio apagado com sucesso.' });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: 'Erro ao apagar anúncio.' });\r\n-    }\r\n-});\r\n \r\n \r\n-\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     // --- Event Listeners do Painel de Admin ---\r\n \r\n     const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n"
                },
                {
                    "date": 1753820771415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n     } else if (viewToShow === 'announcements') {\r\n         announcementsView.classList.remove('hidden');\r\n         viewAnnouncementsTab.classList.add('bg-indigo-600', 'text-white');\r\n         viewAnnouncementsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderAnnouncements();\r\n     }\r\n }\r\n \r\n /**\r\n@@ -718,8 +719,14 @@\n     const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n     const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n     const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n \r\n+    const openAnnouncementModalBtn = document.getElementById('openAnnouncementModalBtn');\r\n+    const announcementModal = document.getElementById('announcementModal');\r\n+    const announcementForm = document.getElementById('announcementForm');\r\n+    const cancelAnnouncementBtn = document.getElementById('cancelAnnouncementBtn');\r\n+    const announcementsList = document.getElementById('announcementsList');\r\n+\r\n     if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n     if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n     if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n     if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n@@ -732,5 +739,44 @@\n     if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n     if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n     if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n     if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+    if(openAnnouncementModalBtn) openAnnouncementModalBtn.addEventListener('click', () => openAnnouncementModal());\r\n+    if(announcementForm) announcementForm.addEventListener('submit', handleAnnouncementFormSubmit);\r\n+    if(cancelAnnouncementBtn) cancelAnnouncementBtn.addEventListener('click', () => announcementModal.classList.add('hidden'));\r\n+\r\n+    if(announcementsList) {\r\n+        announcementsList.addEventListener('click', async (e) => {\r\n+            const editBtn = e.target.closest('.edit-announcement-btn');\r\n+            const deleteBtn = e.target.closest('.delete-announcement-btn');\r\n+\r\n+            if (editBtn) {\r\n+                showLoader();\r\n+                try {\r\n+                    // Para editar, buscamos todos os anúncios e filtramos pelo ID\r\n+                    const allAnnouncements = await api.getAllAnnouncements();\r\n+                    const annToEdit = allAnnouncements.find(a => a._id === editBtn.dataset.id);\r\n+                    if(annToEdit) openAnnouncementModal(annToEdit);\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            }\r\n+            \r\n+            if (deleteBtn) {\r\n+                if (confirm('Tem a certeza que deseja apagar este anúncio?')) {\r\n+                    showLoader();\r\n+                    try {\r\n+                        await api.deleteAnnouncement(deleteBtn.dataset.id);\r\n+                        showToast('Anúncio apagado com sucesso.', 'success');\r\n+                        await renderAnnouncements();\r\n+                    } catch (error) {\r\n+                        showToast(error.message, 'error');\r\n+                    } finally {\r\n+                        hideLoader();\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+    }\r\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753820936195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,8 @@\n const viewAnnouncementsTab = document.getElementById('viewAnnouncementsTab');\r\n const companiesView = document.getElementById('companiesView');\r\n const announcementsView = document.getElementById('announcementsView');\r\n const adminTabButtons = document.querySelectorAll('.admin-tab-btn');\r\n-const AnnouncementSchema = require('../models/Announcement').schema;\r\n \r\n /**\r\n  * Alterna a visualização entre as abas do painel de admin.\r\n  * @param {string} viewToShow - O nome da aba para mostrar ('companies' ou 'announcements').\r\n"
                },
                {
                    "date": 1753821765266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -677,21 +677,22 @@\n         link: document.getElementById('announcementLink').value,\r\n         isActive: document.getElementById('announcementIsActive').checked\r\n     };\r\n \r\n+    // --- ADICIONA ESTA LINHA DE DEPURAÇÃO AQUI ---\r\n+    console.log('Payload a ser enviado:', payload);\r\n+\r\n     showLoader();\r\n     try {\r\n         if (id) {\r\n-            // Se tem ID, atualiza\r\n             await api.updateAnnouncement(id, payload);\r\n             showToast('Anúncio atualizado com sucesso!', 'success');\r\n         } else {\r\n-            // Se não tem ID, cria\r\n             await api.createAnnouncement(payload);\r\n             showToast('Anúncio criado com sucesso!', 'success');\r\n         }\r\n         document.getElementById('announcementModal').classList.add('hidden');\r\n-        await renderAnnouncements(); // Atualiza a lista\r\n+        await renderAnnouncements();\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n"
                },
                {
                    "date": 1753823111054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,20 +52,18 @@\n  * Função principal que inicializa o painel de admin,\r\n  * renderiza a lista de empresas e configura os eventos.\r\n  */\r\n export async function showAdminDashboard() {\r\n-    // Esconde as telas principais e mostra o painel de admin\r\n     hideAllScreens();\r\n+    // Removemos a classe 'hidden' e definimos o display diretamente\r\n     adminDashboardScreen.classList.remove('hidden');\r\n+    adminDashboardScreen.style.display = 'block';\r\n \r\n-    // Renderiza a lista de empresas\r\n     await renderCompanyList();\r\n \r\n-    // Configura os eventos de clique para as abas\r\n     if(viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n     if(viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n \r\n-    // Garante que a aba de empresas seja a padrão ao carregar\r\n     switchAdminView('companies');\r\n }\r\n \r\n async function renderCompanyList() {\r\n"
                },
                {
                    "date": 1753884142353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,20 +261,25 @@\n function closeAddCompanyModal() {\r\n     if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n }\r\n \r\n-export function openAddUserModal(companyId) {\r\n+export function openAddUserModal(companyId, isAdmin = false) {\r\n     const addUserForm = document.getElementById('addUserForm');\r\n     const addUserModal = document.getElementById('addUserModal');\r\n     const addUserRoleSelect = document.getElementById('addUserRoleSelect');\r\n \r\n     let availableRoles;\r\n-    if (isAdminLoggedIn) {\r\n+    // VERSÃO ANTIGA: usava a variável importada 'isAdminLoggedIn'\r\n+    // if (isAdminLoggedIn) { ... }\r\n+\r\n+    // VERSÃO NOVA: usa o parâmetro 'isAdmin'\r\n+    if (isAdmin) {\r\n         availableRoles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n     } else {\r\n         availableRoles = ['Gerente', 'Funcionário'];\r\n     }\r\n \r\n+    // O resto da função continua igual...\r\n     addUserRoleSelect.innerHTML = '';\r\n     availableRoles.forEach(role => {\r\n         const option = document.createElement('option');\r\n         option.value = role;\r\n@@ -283,9 +288,8 @@\n     });\r\n \r\n     if (addUserForm) {\r\n         addUserForm.reset();\r\n-        // Guarda o ID recebido no dataset do formulário\r\n         addUserForm.dataset.companyId = companyId;\r\n     }\r\n     \r\n     if (addUserModal) {\r\n"
                },
                {
                    "date": 1753884226982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n // D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n import { setImpersonationSession, restoreAdminSession } from './main.js';\r\n-import { isAdminLoggedIn } from './main.js';\r\n \r\n // Variáveis de estado e elementos do DOM para o painel de admin\r\n let selectedCompanyForAdmin = null;\r\n \r\n"
                },
                {
                    "date": 1753884267416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -731,9 +731,9 @@\n     if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n     if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n     if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n     if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', openAddUserModal);\r\n+    if (addUserBtn) addUserBtn.addEventListener('click', () => openAddUserModal(selectedCompanyForAdmin._id, true));\r\n     if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n     if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n     if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n     if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n"
                },
                {
                    "date": 1753886343235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,29 @@\n const companiesView = document.getElementById('companiesView');\r\n const announcementsView = document.getElementById('announcementsView');\r\n const adminTabButtons = document.querySelectorAll('.admin-tab-btn');\r\n \r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+\r\n+const openAnnouncementModalBtn = document.getElementById('openAnnouncementModalBtn');\r\n+const announcementModal = document.getElementById('announcementModal');\r\n+const announcementForm = document.getElementById('announcementForm');\r\n+const cancelAnnouncementBtn = document.getElementById('cancelAnnouncementBtn');\r\n+const announcementsList = document.getElementById('announcementsList');\r\n+\r\n /**\r\n  * Alterna a visualização entre as abas do painel de admin.\r\n  * @param {string} viewToShow - O nome da aba para mostrar ('companies' ou 'announcements').\r\n  */\r\n@@ -699,85 +720,57 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+if (addUserBtn) addUserBtn.addEventListener('click', () => openAddUserModal(selectedCompanyForAdmin._id, true));\r\n+if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n+if(openAnnouncementModalBtn) openAnnouncementModalBtn.addEventListener('click', () => openAnnouncementModal());\r\n+if(announcementForm) announcementForm.addEventListener('submit', handleAnnouncementFormSubmit);\r\n+if(cancelAnnouncementBtn) cancelAnnouncementBtn.addEventListener('click', () => announcementModal.classList.add('hidden'));\r\n \r\n+if(announcementsList) {\r\n+    announcementsList.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-announcement-btn');\r\n+        const deleteBtn = e.target.closest('.delete-announcement-btn');\r\n \r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-    // --- Event Listeners do Painel de Admin ---\r\n-\r\n-    const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-    const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-    const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-    const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-    const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-    const addUserBtn = document.getElementById('addUserBtn');\r\n-    const addUserForm = document.getElementById('addUserForm');\r\n-    const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n-    const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-    const addCompanyForm = document.getElementById('addCompanyForm');\r\n-    const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n-    const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-    const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-\r\n-    const openAnnouncementModalBtn = document.getElementById('openAnnouncementModalBtn');\r\n-    const announcementModal = document.getElementById('announcementModal');\r\n-    const announcementForm = document.getElementById('announcementForm');\r\n-    const cancelAnnouncementBtn = document.getElementById('cancelAnnouncementBtn');\r\n-    const announcementsList = document.getElementById('announcementsList');\r\n-\r\n-    if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-    if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-    if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-    if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-    if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n-    if (addUserBtn) addUserBtn.addEventListener('click', () => openAddUserModal(selectedCompanyForAdmin._id, true));\r\n-    if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-    if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-    if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-    if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-    if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-    if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-    if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n-    if(openAnnouncementModalBtn) openAnnouncementModalBtn.addEventListener('click', () => openAnnouncementModal());\r\n-    if(announcementForm) announcementForm.addEventListener('submit', handleAnnouncementFormSubmit);\r\n-    if(cancelAnnouncementBtn) cancelAnnouncementBtn.addEventListener('click', () => announcementModal.classList.add('hidden'));\r\n-\r\n-    if(announcementsList) {\r\n-        announcementsList.addEventListener('click', async (e) => {\r\n-            const editBtn = e.target.closest('.edit-announcement-btn');\r\n-            const deleteBtn = e.target.closest('.delete-announcement-btn');\r\n-\r\n-            if (editBtn) {\r\n+        if (editBtn) {\r\n+            showLoader();\r\n+            try {\r\n+                // Para editar, buscamos todos os anúncios e filtramos pelo ID\r\n+                const allAnnouncements = await api.getAllAnnouncements();\r\n+                const annToEdit = allAnnouncements.find(a => a._id === editBtn.dataset.id);\r\n+                if(annToEdit) openAnnouncementModal(annToEdit);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n\\ No newline at end of file\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        }\r\n+        \r\n+        if (deleteBtn) {\r\n+            if (confirm('Tem a certeza que deseja apagar este anúncio?')) {\r\n                 showLoader();\r\n                 try {\r\n-                    // Para editar, buscamos todos os anúncios e filtramos pelo ID\r\n-                    const allAnnouncements = await api.getAllAnnouncements();\r\n-                    const annToEdit = allAnnouncements.find(a => a._id === editBtn.dataset.id);\r\n-                    if(annToEdit) openAnnouncementModal(annToEdit);\r\n+                    await api.deleteAnnouncement(deleteBtn.dataset.id);\r\n+                    showToast('Anúncio apagado com sucesso.', 'success');\r\n+                    await renderAnnouncements();\r\n                 } catch (error) {\r\n                     showToast(error.message, 'error');\r\n                 } finally {\r\n                     hideLoader();\r\n                 }\r\n             }\r\n-            \r\n-            if (deleteBtn) {\r\n-                if (confirm('Tem a certeza que deseja apagar este anúncio?')) {\r\n-                    showLoader();\r\n-                    try {\r\n-                        await api.deleteAnnouncement(deleteBtn.dataset.id);\r\n-                        showToast('Anúncio apagado com sucesso.', 'success');\r\n-                        await renderAnnouncements();\r\n-                    } catch (error) {\r\n-                        showToast(error.message, 'error');\r\n-                    } finally {\r\n-                        hideLoader();\r\n-                    }\r\n-                }\r\n-            }\r\n-        });\r\n-    }\r\n-});\n+        }\r\n+    });\r\n+}\r\n"
                },
                {
                    "date": 1753886740814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,16 +120,24 @@\n     }\r\n }\r\n \r\n function addEventListenersToAdminButtons() {\r\n+    // LOG 1: Para sabermos se esta função está a ser chamada\r\n+    console.log(\"--- DEBUG: A função addEventListenersToAdminButtons() foi chamada! ---\");\r\n+\r\n     document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        // LOG 2: Para vermos se ele encontra os botões \"Detalhes\" e tenta adicionar o evento\r\n+        console.log(\"--- DEBUG: A adicionar 'ouvinte' de clique a um botão 'Detalhes'. ID da Empresa:\", button.dataset.companyId);\r\n+\r\n         button.addEventListener('click', async (e) => {\r\n+            // LOG 3: Para sabermos se o clique está a ser capturado pelo nosso código\r\n+            console.log(\"--- DEBUG: Botão 'Detalhes' FOI CLICADO! ---\");\r\n+            \r\n+            // O seu código original continua aqui...\r\n             const companyId = e.target.dataset.companyId;\r\n             showLoader();\r\n             try {\r\n-                // CORREÇÃO: Capturamos a nova lista 'masterUsers' da API\r\n                 const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-                // CORREÇÃO: Passamos a lista para a função do modal\r\n                 openCompanyDetailsModal(company, users, masterUsers);\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n"
                },
                {
                    "date": 1753886856577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,26 +124,32 @@\n     // LOG 1: Para sabermos se esta função está a ser chamada\r\n     console.log(\"--- DEBUG: A função addEventListenersToAdminButtons() foi chamada! ---\");\r\n \r\n     document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        // LOG 2: Para vermos se ele encontra os botões \"Detalhes\" e tenta adicionar o evento\r\n-        console.log(\"--- DEBUG: A adicionar 'ouvinte' de clique a um botão 'Detalhes'. ID da Empresa:\", button.dataset.companyId);\r\n+        button.addEventListener('click', async (e) => {\r\n+            // --- INÍCIO DO NOVO BLOCO DE DEPURAÇÃO ---\r\n+            console.log(\"--- DEBUG: Botão 'Detalhes' FOI CLICADO! ---\"); // LOG 3\r\n \r\n-        button.addEventListener('click', async (e) => {\r\n-            // LOG 3: Para sabermos se o clique está a ser capturado pelo nosso código\r\n-            console.log(\"--- DEBUG: Botão 'Detalhes' FOI CLICADO! ---\");\r\n-            \r\n-            // O seu código original continua aqui...\r\n             const companyId = e.target.dataset.companyId;\r\n+            console.log(`--- DEBUG: Company ID é: ${companyId}`); // LOG 4\r\n+\r\n             showLoader();\r\n             try {\r\n+                console.log(\"--- DEBUG: A chamar a API para obter detalhes...\"); // LOG 5\r\n                 const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                console.log(\"--- DEBUG: Detalhes da API recebidos com sucesso.\", { company, users, masterUsers }); // LOG 6\r\n+\r\n+                console.log(\"--- DEBUG: A chamar a função openCompanyDetailsModal...\"); // LOG 7\r\n                 openCompanyDetailsModal(company, users, masterUsers);\r\n+                console.log(\"--- DEBUG: A função openCompanyDetailsModal terminou.\"); // LOG 8\r\n+\r\n             } catch (error) {\r\n+                console.log(\"--- DEBUG: Ocorreu um ERRO no bloco try/catch:\", error); // LOG 9\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n             }\r\n+            // --- FIM DO NOVO BLOCO DE DEPURAÇÃO ---\r\n         });\r\n     });\r\n \r\n     // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n@@ -780,5 +786,5 @@\n                 }\r\n             }\r\n         }\r\n     });\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1753887616348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,8 +229,9 @@\n \r\n     // Adiciona os eventos DEPOIS de criar os botões\r\n     addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n     companyDetailsModal.classList.remove('hidden');\r\n+    companyDetails-modal.style.display = 'flex';\r\n }\r\n \r\n function addEventListenersToCompanyDetailsModal() {\r\n     // Evento para os seletores de cargo (role)\r\n"
                },
                {
                    "date": 1753887742846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,11 +227,11 @@\n         modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n     }\r\n \r\n     // Adiciona os eventos DEPOIS de criar os botões\r\n-    addEventListenersToCompanyDetailsModal(); // AGORA A FUNÇÃO EXISTE E SERÁ CHAMADA CORRETAMENTE\r\n+    addEventListenersToCompanyDetailsModal();\r\n     companyDetailsModal.classList.remove('hidden');\r\n-    companyDetails-modal.style.display = 'flex';\r\n+    companyDetailsModal.style.display = 'flex';\r\n }\r\n \r\n function addEventListenersToCompanyDetailsModal() {\r\n     // Evento para os seletores de cargo (role)\r\n"
                },
                {
                    "date": 1753889833923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -748,9 +748,8 @@\n if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (backToAdminBtn) backToAdminBtn.addEventListener('click', handleBackToAdmin);\r\n if(openAnnouncementModalBtn) openAnnouncementModalBtn.addEventListener('click', () => openAnnouncementModal());\r\n if(announcementForm) announcementForm.addEventListener('submit', handleAnnouncementFormSubmit);\r\n if(cancelAnnouncementBtn) cancelAnnouncementBtn.addEventListener('click', () => announcementModal.classList.add('hidden'));\r\n \r\n"
                },
                {
                    "date": 1753889847533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -616,27 +616,8 @@\n         if (submitButton) submitButton.disabled = false;\r\n     }\r\n }\r\n \r\n-function handleBackToAdmin() {\r\n-    showToast(\"A regressar ao Painel de Administrador...\", \"info\");\r\n-\r\n-    // Chama a função de main.js para restaurar o estado do admin\r\n-    const success = restoreAdminSession();\r\n-\r\n-    if (success) {\r\n-        // Se o estado foi restaurado com sucesso, mostra o painel do admin\r\n-        showAdminDashboard();\r\n-    } else {\r\n-        showToast(\"Erro: Token de administrador não encontrado. A fazer logout.\", \"error\");\r\n-        // Se o token de admin não for encontrado, força o logout para a página inicial\r\n-        setTimeout(() => {\r\n-            localStorage.removeItem('authToken');\r\n-            window.location.href = 'Index.html';\r\n-        }, 2000);\r\n-    }\r\n-}\r\n-\r\n // --- Funções para a Gestão de Anúncios ---\r\n \r\n /**\r\n  * Busca todos os anúncios da API e os exibe na lista.\r\n"
                },
                {
                    "date": 1753889954903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -720,9 +720,14 @@\n if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-if (closeCompanyModal) closeCompanyModal.addEventListener('click', () => companyDetailsModal.classList.add('hidden'));\r\n+if (closeCompanyModal) {\r\n+    closeCompanyModal.addEventListener('click', () => {\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        companyDetailsModal.style.display = 'none'; // Adicione esta linha\r\n+    });\r\n+}\r\n if (addUserBtn) addUserBtn.addEventListener('click', () => openAddUserModal(selectedCompanyForAdmin._id, true));\r\n if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n"
                },
                {
                    "date": 1753890528859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     // Esconde ambos os painéis\r\n     companiesView.classList.add('hidden');\r\n     announcementsView.classList.add('hidden');\r\n \r\n-    // Reseta o estilo dos botões\r\n+    // Reseta o estilo dos botões das abas\r\n     adminTabButtons.forEach(btn => {\r\n         btn.classList.remove('bg-indigo-600', 'text-white');\r\n         btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n     });\r\n@@ -63,9 +63,9 @@\n     } else if (viewToShow === 'announcements') {\r\n         announcementsView.classList.remove('hidden');\r\n         viewAnnouncementsTab.classList.add('bg-indigo-600', 'text-white');\r\n         viewAnnouncementsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderAnnouncements();\r\n+        renderAnnouncements(); // Chama a função para carregar os anúncios\r\n     }\r\n }\r\n \r\n /**\r\n@@ -623,10 +623,9 @@\n  * Busca todos os anúncios da API e os exibe na lista.\r\n  */\r\n async function renderAnnouncements() {\r\n     showLoader();\r\n-    const announcementsList = document.getElementById('announcementsList');\r\n-    announcementsList.innerHTML = ''; // Limpa a lista\r\n+    announcementsList.innerHTML = ''; // Limpa a lista antiga\r\n     try {\r\n         const announcements = await api.getAllAnnouncements();\r\n         if (announcements.length === 0) {\r\n             announcementsList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum anúncio criado ainda.</p>';\r\n@@ -661,63 +660,68 @@\n  * Abre o modal de anúncios, seja para criar um novo ou editar um existente.\r\n  * @param {object | null} announcement - O objeto do anúncio para editar, ou null para criar.\r\n  */\r\n function openAnnouncementModal(announcement = null) {\r\n-    const modal = document.getElementById('announcementModal');\r\n-    const form = document.getElementById('announcementForm');\r\n-    const title = document.getElementById('announcementModalTitle');\r\n-    \r\n-    form.reset(); // Limpa o formulário\r\n+    announcementForm.reset(); // Limpa o formulário\r\n \r\n     if (announcement) {\r\n-        // Modo Edição\r\n-        title.textContent = 'Editar Anúncio';\r\n+        // Modo Edição: Preenche o formulário com os dados existentes\r\n+        announcementModalTitle.textContent = 'Editar Anúncio';\r\n         document.getElementById('announcementId').value = announcement._id;\r\n         document.getElementById('announcementMessage').value = announcement.message;\r\n         document.getElementById('announcementLink').value = announcement.link;\r\n         document.getElementById('announcementIsActive').checked = announcement.isActive;\r\n     } else {\r\n-        // Modo Criação\r\n-        title.textContent = 'Novo Anúncio';\r\n+        // Modo Criação: Deixa o formulário pronto para um novo anúncio\r\n+        announcementModalTitle.textContent = 'Novo Anúncio';\r\n         document.getElementById('announcementId').value = '';\r\n     }\r\n     \r\n-    modal.classList.remove('hidden');\r\n+    announcementModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n  * Lida com a submissão do formulário de anúncio (criação ou edição).\r\n  */\r\n async function handleAnnouncementFormSubmit(e) {\r\n-    e.preventDefault();\r\n+    e.preventDefault(); // Impede que a página recarregue\r\n     const id = document.getElementById('announcementId').value;\r\n     const payload = {\r\n         message: document.getElementById('announcementMessage').value,\r\n         link: document.getElementById('announcementLink').value,\r\n         isActive: document.getElementById('announcementIsActive').checked\r\n     };\r\n \r\n-    // --- ADICIONA ESTA LINHA DE DEPURAÇÃO AQUI ---\r\n-    console.log('Payload a ser enviado:', payload);\r\n-\r\n     showLoader();\r\n     try {\r\n         if (id) {\r\n+            // Se tem um ID, é uma atualização\r\n             await api.updateAnnouncement(id, payload);\r\n             showToast('Anúncio atualizado com sucesso!', 'success');\r\n         } else {\r\n+            // Se não tem ID, é uma criação\r\n             await api.createAnnouncement(payload);\r\n             showToast('Anúncio criado com sucesso!', 'success');\r\n         }\r\n-        document.getElementById('announcementModal').classList.add('hidden');\r\n-        await renderAnnouncements();\r\n+        announcementModal.classList.add('hidden');\r\n+        await renderAnnouncements(); // Atualiza a lista\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n     }\r\n }\r\n \r\n+// =================================================================================\r\n+// =================================================================================\r\n+// EVENT LISTENERS\r\n+// =================================================================================\r\n+// =================================================================================\r\n+\r\n+// Abas\r\n+if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n+if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n+\r\n if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n@@ -734,24 +738,26 @@\n if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-if(openAnnouncementModalBtn) openAnnouncementModalBtn.addEventListener('click', () => openAnnouncementModal());\r\n-if(announcementForm) announcementForm.addEventListener('submit', handleAnnouncementFormSubmit);\r\n-if(cancelAnnouncementBtn) cancelAnnouncementBtn.addEventListener('click', () => announcementModal.classList.add('hidden'));\r\n \r\n-if(announcementsList) {\r\n+// Botões do modal de anúncios\r\n+if (openAnnouncementModalBtn) openAnnouncementModalBtn.addEventListener('click', () => openAnnouncementModal());\r\n+if (announcementForm) announcementForm.addEventListener('submit', handleAnnouncementFormSubmit);\r\n+if (cancelAnnouncementBtn) cancelAnnouncementBtn.addEventListener('click', () => announcementModal.classList.add('hidden'));\r\n+\r\n+// Eventos na lista de anúncios (para os botões de editar e apagar)\r\n+if (announcementsList) {\r\n     announcementsList.addEventListener('click', async (e) => {\r\n         const editBtn = e.target.closest('.edit-announcement-btn');\r\n         const deleteBtn = e.target.closest('.delete-announcement-btn');\r\n \r\n         if (editBtn) {\r\n             showLoader();\r\n             try {\r\n-                // Para editar, buscamos todos os anúncios e filtramos pelo ID\r\n                 const allAnnouncements = await api.getAllAnnouncements();\r\n                 const annToEdit = allAnnouncements.find(a => a._id === editBtn.dataset.id);\r\n-                if(annToEdit) openAnnouncementModal(annToEdit);\r\n+                if (annToEdit) openAnnouncementModal(annToEdit);\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n@@ -772,5 +778,5 @@\n                 }\r\n             }\r\n         }\r\n     });\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753890988105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -472,8 +472,9 @@\n async function handleAddCompanySubmit(e) {\r\n     e.preventDefault();\r\n \r\n     const payload = {\r\n+        message: document.getElementById('announcementMessage').value,\r\n         nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n         cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n         // LINHA ADICIONADA:\r\n         email: document.getElementById('addCompanyEmailInput').value,\r\n"
                },
                {
                    "date": 1753891105506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -472,9 +472,8 @@\n async function handleAddCompanySubmit(e) {\r\n     e.preventDefault();\r\n \r\n     const payload = {\r\n-        message: document.getElementById('announcementMessage').value,\r\n         nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n         cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n         // LINHA ADICIONADA:\r\n         email: document.getElementById('addCompanyEmailInput').value,\r\n"
                },
                {
                    "date": 1753892085010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -740,12 +740,24 @@\n if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n \r\n // Botões do modal de anúncios\r\n-if (openAnnouncementModalBtn) openAnnouncementModalBtn.addEventListener('click', () => openAnnouncementModal());\r\n-if (announcementForm) announcementForm.addEventListener('submit', handleAnnouncementFormSubmit);\r\n-if (cancelAnnouncementBtn) cancelAnnouncementBtn.addEventListener('click', () => announcementModal.classList.add('hidden'));\r\n+if (openAnnouncementModalBtn) {\r\n+    openAnnouncementModalBtn.addEventListener('click', () => openAnnouncementModal());\r\n+}\r\n \r\n+if (announcementForm) {\r\n+    announcementForm.addEventListener('submit', handleAnnouncementFormSubmit);\r\n+}\r\n+\r\n+if (cancelAnnouncementBtn) {\r\n+    cancelAnnouncementBtn.addEventListener('click', () => {\r\n+        if (announcementModal) {\r\n+            announcementModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n // Eventos na lista de anúncios (para os botões de editar e apagar)\r\n if (announcementsList) {\r\n     announcementsList.addEventListener('click', async (e) => {\r\n         const editBtn = e.target.closest('.edit-announcement-btn');\r\n"
                },
                {
                    "date": 1753893065589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -685,11 +685,11 @@\n async function handleAnnouncementFormSubmit(e) {\r\n     e.preventDefault(); // Impede que a página recarregue\r\n     const id = document.getElementById('announcementId').value;\r\n     const payload = {\r\n-        message: document.getElementById('announcementMessage').value,\r\n-        link: document.getElementById('announcementLink').value,\r\n-        isActive: document.getElementById('announcementIsActive').checked\r\n+        message: announcementMessageInput.value, \r\n+        link: announcementLinkInput.value,\r\n+        isActive: announcementIsActiveInput.checked\r\n     };\r\n \r\n     showLoader();\r\n     try {\r\n"
                },
                {
                    "date": 1753893151308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -685,11 +685,11 @@\n async function handleAnnouncementFormSubmit(e) {\r\n     e.preventDefault(); // Impede que a página recarregue\r\n     const id = document.getElementById('announcementId').value;\r\n     const payload = {\r\n-        message: announcementMessageInput.value, \r\n-        link: announcementLinkInput.value,\r\n-        isActive: announcementIsActiveInput.checked\r\n+        message: document.getElementById('announcementMessage').value,\r\n+        link: document.getElementById('announcementLink').value,\r\n+        isActive: document.getElementById('announcementIsActive').checked\r\n     };\r\n \r\n     showLoader();\r\n     try {\r\n"
                },
                {
                    "date": 1753893901810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -683,15 +683,20 @@\n  * Lida com a submissão do formulário de anúncio (criação ou edição).\r\n  */\r\n async function handleAnnouncementFormSubmit(e) {\r\n     e.preventDefault(); // Impede que a página recarregue\r\n+\r\n+    // --- INÍCIO DA CORREÇÃO ---\r\n+    // Vamos buscar os elementos do formulário AQUI, dentro da função.\r\n+    // Isto garante que eles já existem na página quando o botão é clicado.\r\n     const id = document.getElementById('announcementId').value;\r\n-    const payload = {\r\n-        message: document.getElementById('announcementMessage').value,\r\n-        link: document.getElementById('announcementLink').value,\r\n-        isActive: document.getElementById('announcementIsActive').checked\r\n-    };\r\n+    const message = document.getElementById('announcementMessage').value;\r\n+    const link = document.getElementById('announcementLink').value;\r\n+    const isActive = document.getElementById('announcementIsActive').checked;\r\n \r\n+    const payload = { message, link, isActive };\r\n+    // --- FIM DA CORREÇÃO ---\r\n+\r\n     showLoader();\r\n     try {\r\n         if (id) {\r\n             // Se tem um ID, é uma atualização\r\n@@ -701,9 +706,14 @@\n             // Se não tem ID, é uma criação\r\n             await api.createAnnouncement(payload);\r\n             showToast('Anúncio criado com sucesso!', 'success');\r\n         }\r\n-        announcementModal.classList.add('hidden');\r\n+        \r\n+        // A variável 'announcementModal' já está declarada no escopo global do ficheiro\r\n+        if (announcementModal) {\r\n+            announcementModal.classList.add('hidden');\r\n+        }\r\n+        \r\n         await renderAnnouncements(); // Atualiza a lista\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n"
                },
                {
                    "date": 1753896129619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -688,9 +688,9 @@\n     // --- INÍCIO DA CORREÇÃO ---\r\n     // Vamos buscar os elementos do formulário AQUI, dentro da função.\r\n     // Isto garante que eles já existem na página quando o botão é clicado.\r\n     const id = document.getElementById('announcementId').value;\r\n-    const message = document.getElementById('announcementMessage').value;\r\n+    const message = document.getElementById('announcementMessageInput').value;\r\n     const link = document.getElementById('announcementLink').value;\r\n     const isActive = document.getElementById('announcementIsActive').checked;\r\n \r\n     const payload = { message, link, isActive };\r\n"
                },
                {
                    "date": 1753896684098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,12 +78,8 @@\n     adminDashboardScreen.classList.remove('hidden');\r\n     adminDashboardScreen.style.display = 'block';\r\n \r\n     await renderCompanyList();\r\n-\r\n-    if(viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n-    if(viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n-\r\n     switchAdminView('companies');\r\n }\r\n \r\n async function renderCompanyList() {\r\n@@ -726,8 +722,10 @@\n // EVENT LISTENERS\r\n // =================================================================================\r\n // =================================================================================\r\n \r\n+if(viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n+if(viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n // Abas\r\n if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n \r\n"
                },
                {
                    "date": 1753896949187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { setImpersonationSession, restoreAdminSession } from './main.js';\r\n \r\n // Variáveis de estado e elementos do DOM para o painel de admin\r\n let selectedCompanyForAdmin = null;\r\n+let isRenderingAnnouncements = false;\r\n \r\n const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n const companyListDiv = document.getElementById('companyList');\r\n const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n@@ -616,12 +617,22 @@\n // --- Funções para a Gestão de Anúncios ---\r\n \r\n /**\r\n  * Busca todos os anúncios da API e os exibe na lista.\r\n+ * AGORA COM PROTEÇÃO CONTRA EXECUÇÃO DUPLA.\r\n  */\r\n async function renderAnnouncements() {\r\n+    // 1. Verifica se a função já está em execução. Se estiver, para aqui.\r\n+    if (isRenderingAnnouncements) {\r\n+        console.log(\"--- DEBUG: Tentativa de renderizar anúncios duplicada foi bloqueada. ---\");\r\n+        return;\r\n+    }\r\n+\r\n+    // 2. Sinaliza que a renderização começou.\r\n+    isRenderingAnnouncements = true;\r\n     showLoader();\r\n     announcementsList.innerHTML = ''; // Limpa a lista antiga\r\n+\r\n     try {\r\n         const announcements = await api.getAllAnnouncements();\r\n         if (announcements.length === 0) {\r\n             announcementsList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum anúncio criado ainda.</p>';\r\n@@ -647,8 +658,10 @@\n         }\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n+        // 3. Independentemente de sucesso ou erro, sinaliza que a renderização terminou.\r\n+        isRenderingAnnouncements = false;\r\n         hideLoader();\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1753897802860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n // D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n-import { setImpersonationSession, restoreAdminSession } from './main.js';\r\n \r\n // Variáveis de estado e elementos do DOM para o painel de admin\r\n let selectedCompanyForAdmin = null;\r\n let isRenderingAnnouncements = false;\r\n@@ -163,14 +162,20 @@\n \r\n                 const userIdToImpersonate = masterUsers[0]._id;\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n-                // Chama a função importada de main.js para gerir a sessão\r\n-                await setImpersonationSession(data);\r\n+                // VERSÃO ANTIGA (REMOVER):\r\n+                // await setImpersonationSession(data);\r\n \r\n+                // VERSÃO NOVA (ADICIONAR): Despacha um evento com os dados da sessão\r\n+                const impersonationEvent = new CustomEvent('startImpersonation', {\r\n+                    detail: data,\r\n+                    bubbles: true,\r\n+                    composed: true\r\n+                });\r\n+                window.dispatchEvent(impersonationEvent);\r\n+\r\n             } catch (error) {\r\n-                // A função showToast já mostra o erro para o utilizador\r\n-                // A imagem do erro indica que o showToast está a funcionar\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n             }\r\n"
                },
                {
                    "date": 1753898277753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n+import { setImpersonationSession, restoreAdminSession } from './main.js';\r\n \r\n // Variáveis de estado e elementos do DOM para o painel de admin\r\n let selectedCompanyForAdmin = null;\r\n let isRenderingAnnouncements = false;\r\n@@ -162,20 +163,14 @@\n \r\n                 const userIdToImpersonate = masterUsers[0]._id;\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n-                // VERSÃO ANTIGA (REMOVER):\r\n-                // await setImpersonationSession(data);\r\n+                // Chama a função importada de main.js para gerir a sessão\r\n+                await setImpersonationSession(data);\r\n \r\n-                // VERSÃO NOVA (ADICIONAR): Despacha um evento com os dados da sessão\r\n-                const impersonationEvent = new CustomEvent('startImpersonation', {\r\n-                    detail: data,\r\n-                    bubbles: true,\r\n-                    composed: true\r\n-                });\r\n-                window.dispatchEvent(impersonationEvent);\r\n-\r\n             } catch (error) {\r\n+                // A função showToast já mostra o erro para o utilizador\r\n+                // A imagem do erro indica que o showToast está a funcionar\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n             }\r\n"
                },
                {
                    "date": 1753898811967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,19 +299,14 @@\n     const addUserModal = document.getElementById('addUserModal');\r\n     const addUserRoleSelect = document.getElementById('addUserRoleSelect');\r\n \r\n     let availableRoles;\r\n-    // VERSÃO ANTIGA: usava a variável importada 'isAdminLoggedIn'\r\n-    // if (isAdminLoggedIn) { ... }\r\n-\r\n-    // VERSÃO NOVA: usa o parâmetro 'isAdmin'\r\n     if (isAdmin) {\r\n         availableRoles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n     } else {\r\n         availableRoles = ['Gerente', 'Funcionário'];\r\n     }\r\n \r\n-    // O resto da função continua igual...\r\n     addUserRoleSelect.innerHTML = '';\r\n     availableRoles.forEach(role => {\r\n         const option = document.createElement('option');\r\n         option.value = role;\r\n@@ -321,8 +316,9 @@\n \r\n     if (addUserForm) {\r\n         addUserForm.reset();\r\n         addUserForm.dataset.companyId = companyId;\r\n+        addUserForm.dataset.isAdmin = isAdmin; // <<--- LINHA ADICIONADA: Guardamos o status aqui\r\n     }\r\n     \r\n     if (addUserModal) {\r\n         addUserModal.classList.remove('hidden');\r\n"
                },
                {
                    "date": 1753898830337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -570,15 +570,16 @@\n     e.preventDefault();\r\n     const form = e.target;\r\n     const submitButton = form.querySelector('button[type=\"submit\"]');\r\n \r\n-    // AQUI ESTÁ A CORREÇÃO PRINCIPAL: Lê o ID diretamente do formulário\r\n     const companyId = form.dataset.companyId;\r\n     if (!companyId) {\r\n-        // Esta mensagem de erro agora só aparecerá se algo estiver muito errado\r\n         return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n     }\r\n \r\n+    // LINHA ADICIONADA: Lemos o status a partir do formulário\r\n+    const isAdmin = form.dataset.isAdmin === 'true';\r\n+\r\n     const username = document.getElementById('addUsernameInput').value.trim();\r\n     const email = document.getElementById('addUserEmailInput').value.trim();\r\n     const password = document.getElementById('addUserPasswordInput').value;\r\n     const role = document.getElementById('addUserRoleSelect').value;\r\n@@ -593,11 +594,11 @@\n     try {\r\n         await api.registerUser(username, password, email, role, companyId);\r\n         showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n         \r\n-        // Se for um proprietário a adicionar, recarrega o modal de gestão de utilizadores\r\n-        if (!isAdminLoggedIn) {\r\n-            await openManageUsersModal({ _id: companyId }); // Passa um objeto de empresa simples\r\n+        // LINHA MODIFICADA: Usamos a nossa nova variável 'isAdmin'\r\n+        if (!isAdmin) {\r\n+            await openManageUsersModal({ _id: companyId }); \r\n         }\r\n         \r\n         closeAddUserModal();\r\n         form.reset();\r\n"
                },
                {
                    "date": 1753899060033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -569,17 +569,17 @@\n async function handleAddUserSubmit(e) {\r\n     e.preventDefault();\r\n     const form = e.target;\r\n     const submitButton = form.querySelector('button[type=\"submit\"]');\r\n+    const companyId = form.dataset.companyId;\r\n \r\n-    const companyId = form.dataset.companyId;\r\n     if (!companyId) {\r\n         return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n     }\r\n \r\n-    // LINHA ADICIONADA: Lemos o status a partir do formulário\r\n     const isAdmin = form.dataset.isAdmin === 'true';\r\n \r\n+    // (O resto da extração de dados do formulário continua igual)\r\n     const username = document.getElementById('addUsernameInput').value.trim();\r\n     const email = document.getElementById('addUserEmailInput').value.trim();\r\n     const password = document.getElementById('addUserPasswordInput').value;\r\n     const role = document.getElementById('addUserRoleSelect').value;\r\n@@ -594,12 +594,20 @@\n     try {\r\n         await api.registerUser(username, password, email, role, companyId);\r\n         showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n         \r\n-        // LINHA MODIFICADA: Usamos a nossa nova variável 'isAdmin'\r\n+        // --- INÍCIO DA MODIFICAÇÃO ---\r\n+\r\n         if (!isAdmin) {\r\n-            await openManageUsersModal({ _id: companyId }); \r\n+            // Caso 1: Se for o proprietário a adicionar, atualiza o modal de gestão.\r\n+            await openManageUsersModal({ _id: companyId });\r\n+        } else {\r\n+            // Caso 2 (NOVO): Se for o admin, busca os dados atualizados e reabre o modal de detalhes.\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n         }\r\n+\r\n+        // --- FIM DA MODIFICAÇÃO ---\r\n         \r\n         closeAddUserModal();\r\n         form.reset();\r\n \r\n"
                },
                {
                    "date": 1753899218669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,20 +157,35 @@\n             try {\r\n                 const { masterUsers } = await api.getCompanyDetails(companyId);\r\n \r\n                 if (!masterUsers || masterUsers.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários (no registro mestre) para representar.', 'info');\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n                 }\r\n+                \r\n+                // 1. Procura pelo utilizador que é o 'Proprietário'\r\n+                let userToImpersonate = masterUsers.find(user => user.role === 'Proprietário');\r\n \r\n-                const userIdToImpersonate = masterUsers[0]._id;\r\n+                // 2. Se, por alguma razão, não encontrar um proprietário, entra como o primeiro da lista\r\n+                if (!userToImpersonate) {\r\n+                    console.warn(`Nenhum 'Proprietário' encontrado para a empresa ${companyId}. A representar o primeiro utilizador da lista.`);\r\n+                    userToImpersonate = masterUsers[0];\r\n+                }\r\n+\r\n+                // 3. Garante que um utilizador foi selecionado\r\n+                if (!userToImpersonate) {\r\n+                    return showToast('Não foi encontrado um utilizador para representar.', 'error');\r\n+                }\r\n+\r\n+                const userIdToImpersonate = userToImpersonate._id;\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+                const impersonationEvent = new CustomEvent('startImpersonation', {\r\n+                    detail: data,\r\n+                    bubbles: true,\r\n+                    composed: true\r\n+                });\r\n+                window.dispatchEvent(impersonationEvent);\r\n \r\n-                // Chama a função importada de main.js para gerir a sessão\r\n-                await setImpersonationSession(data);\r\n-\r\n             } catch (error) {\r\n-                // A função showToast já mostra o erro para o utilizador\r\n-                // A imagem do erro indica que o showToast está a funcionar\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n             }\r\n"
                },
                {
                    "date": 1753899572249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,32 +152,23 @@\n     // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n     document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n             const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n+            showLoader(); // A animação começa aqui\r\n+\r\n             try {\r\n-                const { masterUsers } = await api.getCompanyDetails(companyId);\r\n-\r\n-                if (!masterUsers || masterUsers.length === 0) {\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n-                }\r\n-                \r\n-                // 1. Procura pelo utilizador que é o 'Proprietário'\r\n+                // (A lógica para encontrar o utilizador a representar continua igual)\r\n                 let userToImpersonate = masterUsers.find(user => user.role === 'Proprietário');\r\n-\r\n-                // 2. Se, por alguma razão, não encontrar um proprietário, entra como o primeiro da lista\r\n                 if (!userToImpersonate) {\r\n-                    console.warn(`Nenhum 'Proprietário' encontrado para a empresa ${companyId}. A representar o primeiro utilizador da lista.`);\r\n                     userToImpersonate = masterUsers[0];\r\n                 }\r\n-\r\n-                // 3. Garante que um utilizador foi selecionado\r\n                 if (!userToImpersonate) {\r\n                     return showToast('Não foi encontrado um utilizador para representar.', 'error');\r\n                 }\r\n-\r\n                 const userIdToImpersonate = userToImpersonate._id;\r\n+                \r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n                 const impersonationEvent = new CustomEvent('startImpersonation', {\r\n                     detail: data,\r\n                     bubbles: true,\r\n                     composed: true\r\n@@ -185,11 +176,12 @@\n                 window.dispatchEvent(impersonationEvent);\r\n \r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n+                // Esconde a animação apenas se ocorrer um erro nesta fase inicial\r\n+                hideLoader(); \r\n+            } \r\n+            // O bloco 'finally' que chamava hideLoader() foi removido\r\n         });\r\n     });\r\n }\r\n \r\n"
                },
                {
                    "date": 1753899687863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,21 +152,40 @@\n     // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n     document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n             const companyId = e.target.dataset.companyId;\r\n-            showLoader(); // A animação começa aqui\r\n+            showLoader(); \r\n \r\n             try {\r\n-                // (A lógica para encontrar o utilizador a representar continua igual)\r\n+                // --- INÍCIO DA CORREÇÃO ---\r\n+\r\n+                // A LINHA QUE FALTAVA FOI ADICIONADA DE VOLTA:\r\n+                const { masterUsers } = await api.getCompanyDetails(companyId);\r\n+\r\n+                // A verificação de segurança para a lista de utilizadores\r\n+                if (!masterUsers || masterUsers.length === 0) {\r\n+                    // Esconde a animação antes de retornar a mensagem\r\n+                    hideLoader(); \r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                }\r\n+\r\n+                // O resto da lógica que já tínhamos para encontrar o proprietário\r\n                 let userToImpersonate = masterUsers.find(user => user.role === 'Proprietário');\r\n+\r\n                 if (!userToImpersonate) {\r\n+                    console.warn(`Nenhum 'Proprietário' encontrado para a empresa ${companyId}. A representar o primeiro utilizador da lista.`);\r\n                     userToImpersonate = masterUsers[0];\r\n                 }\r\n+\r\n                 if (!userToImpersonate) {\r\n+                    hideLoader();\r\n                     return showToast('Não foi encontrado um utilizador para representar.', 'error');\r\n                 }\r\n+\r\n                 const userIdToImpersonate = userToImpersonate._id;\r\n-                \r\n+\r\n+                // --- FIM DA CORREÇÃO ---\r\n+\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n                 const impersonationEvent = new CustomEvent('startImpersonation', {\r\n                     detail: data,\r\n@@ -176,12 +195,10 @@\n                 window.dispatchEvent(impersonationEvent);\r\n \r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n-                // Esconde a animação apenas se ocorrer um erro nesta fase inicial\r\n                 hideLoader(); \r\n             } \r\n-            // O bloco 'finally' que chamava hideLoader() foi removido\r\n         });\r\n     });\r\n }\r\n \r\n"
                },
                {
                    "date": 1753899899406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,15 +72,15 @@\n /**\r\n  * Função principal que inicializa o painel de admin,\r\n  * renderiza a lista de empresas e configura os eventos.\r\n  */\r\n-export async function showAdminDashboard() {\r\n+export async function showAdminDashboard(impersonationCallback) {\r\n     hideAllScreens();\r\n-    // Removemos a classe 'hidden' e definimos o display diretamente\r\n     adminDashboardScreen.classList.remove('hidden');\r\n     adminDashboardScreen.style.display = 'block';\r\n \r\n-    await renderCompanyList();\r\n+    // Passa o callback para a função que renderiza a lista\r\n+    await renderCompanyList(impersonationCallback);\r\n     switchAdminView('companies');\r\n }\r\n \r\n async function renderCompanyList() {\r\n"
                },
                {
                    "date": 1753900025824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n     await renderCompanyList(impersonationCallback);\r\n     switchAdminView('companies');\r\n }\r\n \r\n-async function renderCompanyList() {\r\n+async function renderCompanyList(impersonationCallback) {\r\n     showLoader();\r\n     try {\r\n         const companies = await api.getCompanies();\r\n         companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n@@ -107,18 +107,18 @@\n                 companyListDiv.appendChild(companyCard);\r\n             });\r\n \r\n             // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n+            addEventListenersToAdminButtons(impersonationCallback);\r\n         }\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n     }\r\n }\r\n \r\n-function addEventListenersToAdminButtons() {\r\n+function addEventListenersToAdminButtons(impersonationCallback) {\r\n     // LOG 1: Para sabermos se esta função está a ser chamada\r\n     console.log(\"--- DEBUG: A função addEventListenersToAdminButtons() foi chamada! ---\");\r\n \r\n     document.querySelectorAll('.view-details-btn').forEach(button => {\r\n"
                },
                {
                    "date": 1753900072564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,53 +152,43 @@\n     // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n     document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n             const companyId = e.target.dataset.companyId;\r\n-            showLoader(); \r\n+            showLoader();\r\n \r\n             try {\r\n-                // --- INÍCIO DA CORREÇÃO ---\r\n-\r\n-                // A LINHA QUE FALTAVA FOI ADICIONADA DE VOLTA:\r\n                 const { masterUsers } = await api.getCompanyDetails(companyId);\r\n \r\n-                // A verificação de segurança para a lista de utilizadores\r\n                 if (!masterUsers || masterUsers.length === 0) {\r\n-                    // Esconde a animação antes de retornar a mensagem\r\n-                    hideLoader(); \r\n+                    hideLoader();\r\n                     return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n                 }\r\n \r\n-                // O resto da lógica que já tínhamos para encontrar o proprietário\r\n                 let userToImpersonate = masterUsers.find(user => user.role === 'Proprietário');\r\n-\r\n                 if (!userToImpersonate) {\r\n-                    console.warn(`Nenhum 'Proprietário' encontrado para a empresa ${companyId}. A representar o primeiro utilizador da lista.`);\r\n                     userToImpersonate = masterUsers[0];\r\n                 }\r\n-\r\n                 if (!userToImpersonate) {\r\n                     hideLoader();\r\n                     return showToast('Não foi encontrado um utilizador para representar.', 'error');\r\n                 }\r\n \r\n                 const userIdToImpersonate = userToImpersonate._id;\r\n-\r\n-                // --- FIM DA CORREÇÃO ---\r\n-\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n-                const impersonationEvent = new CustomEvent('startImpersonation', {\r\n-                    detail: data,\r\n-                    bubbles: true,\r\n-                    composed: true\r\n-                });\r\n-                window.dispatchEvent(impersonationEvent);\r\n+                // MODIFICAÇÃO FINAL: Em vez de disparar um evento, chama a função diretamente\r\n+                if (impersonationCallback) {\r\n+                    impersonationCallback(data);\r\n+                } else {\r\n+                    // Medida de segurança caso algo corra mal\r\n+                    console.error(\"Callback de representação não foi fornecido.\");\r\n+                    hideLoader();\r\n+                }\r\n \r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n-                hideLoader(); \r\n-            } \r\n+                hideLoader();\r\n+            }\r\n         });\r\n     });\r\n }\r\n \r\n"
                },
                {
                    "date": 1753901146223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,36 +117,22 @@\n     }\r\n }\r\n \r\n function addEventListenersToAdminButtons(impersonationCallback) {\r\n-    // LOG 1: Para sabermos se esta função está a ser chamada\r\n-    console.log(\"--- DEBUG: A função addEventListenersToAdminButtons() foi chamada! ---\");\r\n-\r\n     document.querySelectorAll('.view-details-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n-            // --- INÍCIO DO NOVO BLOCO DE DEPURAÇÃO ---\r\n-            console.log(\"--- DEBUG: Botão 'Detalhes' FOI CLICADO! ---\"); // LOG 3\r\n \r\n             const companyId = e.target.dataset.companyId;\r\n-            console.log(`--- DEBUG: Company ID é: ${companyId}`); // LOG 4\r\n \r\n             showLoader();\r\n             try {\r\n-                console.log(\"--- DEBUG: A chamar a API para obter detalhes...\"); // LOG 5\r\n                 const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-                console.log(\"--- DEBUG: Detalhes da API recebidos com sucesso.\", { company, users, masterUsers }); // LOG 6\r\n-\r\n-                console.log(\"--- DEBUG: A chamar a função openCompanyDetailsModal...\"); // LOG 7\r\n                 openCompanyDetailsModal(company, users, masterUsers);\r\n-                console.log(\"--- DEBUG: A função openCompanyDetailsModal terminou.\"); // LOG 8\r\n-\r\n             } catch (error) {\r\n-                console.log(\"--- DEBUG: Ocorreu um ERRO no bloco try/catch:\", error); // LOG 9\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n                 hideLoader();\r\n             }\r\n-            // --- FIM DO NOVO BLOCO DE DEPURAÇÃO ---\r\n         });\r\n     });\r\n \r\n     // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n"
                },
                {
                    "date": 1753901303338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,9 +318,9 @@\n         addUserForm.reset();\r\n         addUserForm.dataset.companyId = companyId;\r\n         addUserForm.dataset.isAdmin = isAdmin; // <<--- LINHA ADICIONADA: Guardamos o status aqui\r\n     }\r\n-    \r\n+\r\n     if (addUserModal) {\r\n         addUserModal.classList.remove('hidden');\r\n     }\r\n     document.getElementById('addUsernameInput').focus();\r\n@@ -374,9 +374,9 @@\n                 // Se for proprietário, mostra texto; senão, mostra o dropdown.\r\n                 const roleHtml = isOwner\r\n                     ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n                     : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-                \r\n+\r\n                 // Se não for proprietário, mostra o botão de remover.\r\n                 const buttonHtml = isOwner\r\n                     ? ''\r\n                     : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`;\r\n@@ -396,9 +396,9 @@\n             companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum usuário cadastrado para esta empresa.</p>';\r\n         }\r\n \r\n         // 4. Adiciona os eventos aos novos elementos criados dinamicamente\r\n-        \r\n+\r\n         // Evento para a mudança de cargo (role)\r\n         companyUsersList.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n             select.addEventListener('change', async (e) => {\r\n                 const userId = e.target.dataset.userId;\r\n@@ -429,9 +429,9 @@\n \r\n                 if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n                     return;\r\n                 }\r\n-                \r\n+\r\n                 showLoader();\r\n                 try {\r\n                     await api.deleteUserFromCompany(company._id, userId);\r\n                     showToast('Utilizador removido com sucesso!');\r\n@@ -593,9 +593,9 @@\n \r\n     try {\r\n         await api.registerUser(username, password, email, role, companyId);\r\n         showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n-        \r\n+\r\n         // --- INÍCIO DA MODIFICAÇÃO ---\r\n \r\n         if (!isAdmin) {\r\n             // Caso 1: Se for o proprietário a adicionar, atualiza o modal de gestão.\r\n@@ -606,9 +606,9 @@\n             openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n         }\r\n \r\n         // --- FIM DA MODIFICAÇÃO ---\r\n-        \r\n+\r\n         closeAddUserModal();\r\n         form.reset();\r\n \r\n     } catch (error) {\r\n@@ -622,14 +622,12 @@\n // --- Funções para a Gestão de Anúncios ---\r\n \r\n /**\r\n  * Busca todos os anúncios da API e os exibe na lista.\r\n- * AGORA COM PROTEÇÃO CONTRA EXECUÇÃO DUPLA.\r\n  */\r\n async function renderAnnouncements() {\r\n     // 1. Verifica se a função já está em execução. Se estiver, para aqui.\r\n     if (isRenderingAnnouncements) {\r\n-        console.log(\"--- DEBUG: Tentativa de renderizar anúncios duplicada foi bloqueada. ---\");\r\n         return;\r\n     }\r\n \r\n     // 2. Sinaliza que a renderização começou.\r\n@@ -644,9 +642,9 @@\n         } else {\r\n             announcements.forEach(ann => {\r\n                 const statusClass = ann.isActive ? 'bg-green-500' : 'bg-gray-500';\r\n                 const statusText = ann.isActive ? 'Ativo' : 'Inativo';\r\n-                \r\n+\r\n                 announcementsList.insertAdjacentHTML('beforeend', `\r\n                     <div class=\"bg-gray-700 rounded p-4 flex justify-between items-center\">\r\n                         <div>\r\n                             <p class=\"text-white\">${ann.message}</p>\r\n@@ -688,29 +686,22 @@\n         // Modo Criação: Deixa o formulário pronto para um novo anúncio\r\n         announcementModalTitle.textContent = 'Novo Anúncio';\r\n         document.getElementById('announcementId').value = '';\r\n     }\r\n-    \r\n+\r\n     announcementModal.classList.remove('hidden');\r\n }\r\n \r\n /**\r\n  * Lida com a submissão do formulário de anúncio (criação ou edição).\r\n  */\r\n async function handleAnnouncementFormSubmit(e) {\r\n-    e.preventDefault(); // Impede que a página recarregue\r\n-\r\n-    // --- INÍCIO DA CORREÇÃO ---\r\n-    // Vamos buscar os elementos do formulário AQUI, dentro da função.\r\n-    // Isto garante que eles já existem na página quando o botão é clicado.\r\n+    e.preventDefault();\r\n     const id = document.getElementById('announcementId').value;\r\n     const message = document.getElementById('announcementMessageInput').value;\r\n     const link = document.getElementById('announcementLink').value;\r\n     const isActive = document.getElementById('announcementIsActive').checked;\r\n-\r\n     const payload = { message, link, isActive };\r\n-    // --- FIM DA CORREÇÃO ---\r\n-\r\n     showLoader();\r\n     try {\r\n         if (id) {\r\n             // Se tem um ID, é uma atualização\r\n@@ -720,14 +711,12 @@\n             // Se não tem ID, é uma criação\r\n             await api.createAnnouncement(payload);\r\n             showToast('Anúncio criado com sucesso!', 'success');\r\n         }\r\n-        \r\n-        // A variável 'announcementModal' já está declarada no escopo global do ficheiro\r\n         if (announcementModal) {\r\n             announcementModal.classList.add('hidden');\r\n         }\r\n-        \r\n+\r\n         await renderAnnouncements(); // Atualiza a lista\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n@@ -740,10 +729,10 @@\n // EVENT LISTENERS\r\n // =================================================================================\r\n // =================================================================================\r\n \r\n-if(viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n-if(viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n+if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n+if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n // Abas\r\n if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n \r\n@@ -800,9 +789,9 @@\n             } finally {\r\n                 hideLoader();\r\n             }\r\n         }\r\n-        \r\n+\r\n         if (deleteBtn) {\r\n             if (confirm('Tem a certeza que deseja apagar este anúncio?')) {\r\n                 showLoader();\r\n                 try {\r\n"
                },
                {
                    "date": 1753901353320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -661,9 +661,8 @@\n         }\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n-        // 3. Independentemente de sucesso ou erro, sinaliza que a renderização terminou.\r\n         isRenderingAnnouncements = false;\r\n         hideLoader();\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1754050900092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -677,10 +677,10 @@\n     if (announcement) {\r\n         // Modo Edição: Preenche o formulário com os dados existentes\r\n         announcementModalTitle.textContent = 'Editar Anúncio';\r\n         document.getElementById('announcementId').value = announcement._id;\r\n-        document.getElementById('announcementMessage').value = announcement.message;\r\n-        document.getElementById('announcementLink').value = announcement.link;\r\n+        document.getElementById('announcementMessageInput').value = announcement.message;\r\n+        document.getElementById('announcementLinkInput').value = announcement.link;\r\n         document.getElementById('announcementIsActive').checked = announcement.isActive;\r\n     } else {\r\n         // Modo Criação: Deixa o formulário pronto para um novo anúncio\r\n         announcementModalTitle.textContent = 'Novo Anúncio';\r\n@@ -696,9 +696,9 @@\n async function handleAnnouncementFormSubmit(e) {\r\n     e.preventDefault();\r\n     const id = document.getElementById('announcementId').value;\r\n     const message = document.getElementById('announcementMessageInput').value;\r\n-    const link = document.getElementById('announcementLink').value;\r\n+    const link = document.getElementById('announcementLinkInput').value;\r\n     const isActive = document.getElementById('announcementIsActive').checked;\r\n     const payload = { message, link, isActive };\r\n     showLoader();\r\n     try {\r\n"
                },
                {
                    "date": 1754050928103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -677,10 +677,10 @@\n     if (announcement) {\r\n         // Modo Edição: Preenche o formulário com os dados existentes\r\n         announcementModalTitle.textContent = 'Editar Anúncio';\r\n         document.getElementById('announcementId').value = announcement._id;\r\n-        document.getElementById('announcementMessageInput').value = announcement.message;\r\n-        document.getElementById('announcementLinkInput').value = announcement.link;\r\n+        document.getElementById('announcementMessage').value = announcement.message;\r\n+        document.getElementById('announcementLink').value = announcement.link;\r\n         document.getElementById('announcementIsActive').checked = announcement.isActive;\r\n     } else {\r\n         // Modo Criação: Deixa o formulário pronto para um novo anúncio\r\n         announcementModalTitle.textContent = 'Novo Anúncio';\r\n@@ -696,9 +696,9 @@\n async function handleAnnouncementFormSubmit(e) {\r\n     e.preventDefault();\r\n     const id = document.getElementById('announcementId').value;\r\n     const message = document.getElementById('announcementMessageInput').value;\r\n-    const link = document.getElementById('announcementLinkInput').value;\r\n+    const link = document.getElementById('announcementLink').value;\r\n     const isActive = document.getElementById('announcementIsActive').checked;\r\n     const payload = { message, link, isActive };\r\n     showLoader();\r\n     try {\r\n"
                },
                {
                    "date": 1754052216641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -677,9 +677,9 @@\n     if (announcement) {\r\n         // Modo Edição: Preenche o formulário com os dados existentes\r\n         announcementModalTitle.textContent = 'Editar Anúncio';\r\n         document.getElementById('announcementId').value = announcement._id;\r\n-        document.getElementById('announcementMessage').value = announcement.message;\r\n+        document.getElementById('announcementMessageInput').value = announcement.message;\r\n         document.getElementById('announcementLink').value = announcement.link;\r\n         document.getElementById('announcementIsActive').checked = announcement.isActive;\r\n     } else {\r\n         // Modo Criação: Deixa o formulário pronto para um novo anúncio\r\n"
                },
                {
                    "date": 1754052975641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n import { setImpersonationSession, restoreAdminSession } from './main.js';\r\n+let adminImpersonationCallback = null;\r\n \r\n // Variáveis de estado e elementos do DOM para o painel de admin\r\n let selectedCompanyForAdmin = null;\r\n let isRenderingAnnouncements = false;\r\n@@ -73,8 +74,9 @@\n  * Função principal que inicializa o painel de admin,\r\n  * renderiza a lista de empresas e configura os eventos.\r\n  */\r\n export async function showAdminDashboard(impersonationCallback) {\r\n+    adminImpersonationCallback = impersonationCallback;\r\n     hideAllScreens();\r\n     adminDashboardScreen.classList.remove('hidden');\r\n     adminDashboardScreen.style.display = 'block';\r\n \r\n"
                },
                {
                    "date": 1754053011472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     await renderCompanyList(impersonationCallback);\r\n     switchAdminView('companies');\r\n }\r\n \r\n-async function renderCompanyList(impersonationCallback) {\r\n+async function renderCompanyList() {\r\n     showLoader();\r\n     try {\r\n         const companies = await api.getCompanies();\r\n         companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n"
                },
                {
                    "date": 1754053027360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n-function addEventListenersToAdminButtons(impersonationCallback) {\r\n+function addEventListenersToAdminButtons() {\r\n     document.querySelectorAll('.view-details-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n \r\n             const companyId = e.target.dataset.companyId;\r\n"
                },
                {
                    "date": 1754053136287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,15 +74,17 @@\n  * Função principal que inicializa o painel de admin,\r\n  * renderiza a lista de empresas e configura os eventos.\r\n  */\r\n export async function showAdminDashboard(impersonationCallback) {\r\n+    // Guarda a função na nossa variável \"cache\"\r\n     adminImpersonationCallback = impersonationCallback;\r\n+    \r\n     hideAllScreens();\r\n     adminDashboardScreen.classList.remove('hidden');\r\n     adminDashboardScreen.style.display = 'block';\r\n \r\n-    // Passa o callback para a função que renderiza a lista\r\n-    await renderCompanyList(impersonationCallback);\r\n+    // A chamada a renderCompanyList já não precisa de passar o callback\r\n+    await renderCompanyList();\r\n     switchAdminView('companies');\r\n }\r\n \r\n async function renderCompanyList() {\r\n"
                },
                {
                    "date": 1754053157179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n                 companyListDiv.appendChild(companyCard);\r\n             });\r\n \r\n             // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons(impersonationCallback);\r\n+            addEventListenersToAdminButtons();\r\n         }\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n"
                },
                {
                    "date": 1754053249464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,14 +164,13 @@\n \r\n                 const userIdToImpersonate = userToImpersonate._id;\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n-                // MODIFICAÇÃO FINAL: Em vez de disparar um evento, chama a função diretamente\r\n-                if (impersonationCallback) {\r\n-                    impersonationCallback(data);\r\n+                \r\n+                if (adminImpersonationCallback) {\r\n+                    adminImpersonationCallback(data);\r\n                 } else {\r\n-                    // Medida de segurança caso algo corra mal\r\n-                    console.error(\"Callback de representação não foi fornecido.\");\r\n+                    console.error(\"Callback de representação não disponível!\");\r\n                     hideLoader();\r\n                 }\r\n \r\n             } catch (error) {\r\n"
                },
                {
                    "date": 1754053457204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,18 +56,19 @@\n         btn.classList.remove('bg-indigo-600', 'text-white');\r\n         btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n     });\r\n \r\n-    // Mostra o painel correto e ativa o botão correspondente\r\n     if (viewToShow === 'companies') {\r\n         companiesView.classList.remove('hidden');\r\n         viewCompaniesTab.classList.add('bg-indigo-600', 'text-white');\r\n         viewCompaniesTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderCompanyList();\r\n+\r\n     } else if (viewToShow === 'announcements') {\r\n         announcementsView.classList.remove('hidden');\r\n         viewAnnouncementsTab.classList.add('bg-indigo-600', 'text-white');\r\n         viewAnnouncementsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderAnnouncements(); // Chama a função para carregar os anúncios\r\n+        renderAnnouncements();\r\n     }\r\n }\r\n \r\n /**\r\n"
                },
                {
                    "date": 1754054251389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n // D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n import { setImpersonationSession, restoreAdminSession } from './main.js';\r\n-let adminImpersonationCallback = null;\r\n \r\n // Variáveis de estado e elementos do DOM para o painel de admin\r\n let selectedCompanyForAdmin = null;\r\n let isRenderingAnnouncements = false;\r\n@@ -74,17 +73,13 @@\n /**\r\n  * Função principal que inicializa o painel de admin,\r\n  * renderiza a lista de empresas e configura os eventos.\r\n  */\r\n-export async function showAdminDashboard(impersonationCallback) {\r\n-    // Guarda a função na nossa variável \"cache\"\r\n-    adminImpersonationCallback = impersonationCallback;\r\n-    \r\n+export async function showAdminDashboard() {\r\n     hideAllScreens();\r\n     adminDashboardScreen.classList.remove('hidden');\r\n     adminDashboardScreen.style.display = 'block';\r\n \r\n-    // A chamada a renderCompanyList já não precisa de passar o callback\r\n     await renderCompanyList();\r\n     switchAdminView('companies');\r\n }\r\n \r\n"
                },
                {
                    "date": 1754054605870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,16 +117,18 @@\n     }\r\n }\r\n \r\n function addEventListenersToAdminButtons() {\r\n+\r\n+    // Listener para os botões \"Detalhes\"\r\n     document.querySelectorAll('.view-details-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n-\r\n             const companyId = e.target.dataset.companyId;\r\n-\r\n             showLoader();\r\n             try {\r\n+                // Busca os dados mais recentes da empresa, incluindo os utilizadores\r\n                 const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                // Abre o modal de detalhes com os dados recebidos\r\n                 openCompanyDetailsModal(company, users, masterUsers);\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n@@ -134,39 +136,48 @@\n             }\r\n         });\r\n     });\r\n \r\n-    // A lógica para o botão \"Entrar\" continua a mesma de antes\r\n+    // Listener para os botões \"Entrar\"\r\n     document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n             const companyId = e.target.dataset.companyId;\r\n             showLoader();\r\n \r\n             try {\r\n+                // 1. Busca os detalhes da empresa para obter a lista de utilizadores\r\n                 const { masterUsers } = await api.getCompanyDetails(companyId);\r\n \r\n+                // 2. Valida se existem utilizadores para representar\r\n                 if (!masterUsers || masterUsers.length === 0) {\r\n                     hideLoader();\r\n                     return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n                 }\r\n \r\n+                // 3. Procura pelo 'Proprietário' para dar prioridade à sua representação\r\n                 let userToImpersonate = masterUsers.find(user => user.role === 'Proprietário');\r\n+\r\n+                // 4. Se não encontrar um proprietário, usa o primeiro utilizador da lista como fallback\r\n                 if (!userToImpersonate) {\r\n+                    console.warn(`Nenhum 'Proprietário' encontrado para a empresa ${companyId}. A representar o primeiro utilizador da lista.`);\r\n                     userToImpersonate = masterUsers[0];\r\n                 }\r\n+\r\n+                // 5. Valida se um utilizador foi finalmente encontrado\r\n                 if (!userToImpersonate) {\r\n                     hideLoader();\r\n                     return showToast('Não foi encontrado um utilizador para representar.', 'error');\r\n                 }\r\n \r\n+                // 6. Pede à API para criar uma sessão de representação para este utilizador\r\n                 const userIdToImpersonate = userToImpersonate._id;\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n-                \r\n-                if (adminImpersonationCallback) {\r\n-                    adminImpersonationCallback(data);\r\n+                // 7. Usa a função de callback global (definida no main.js) para iniciar a sessão\r\n+                if (typeof window.impersonationCallback === 'function') {\r\n+                    window.impersonationCallback(data);\r\n                 } else {\r\n-                    console.error(\"Callback de representação não disponível!\");\r\n+                    console.error(\"Callback de representação não disponível na 'window'!\");\r\n                     hideLoader();\r\n                 }\r\n \r\n             } catch (error) {\r\n"
                },
                {
                    "date": 1754054935741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,18 +73,19 @@\n /**\r\n  * Função principal que inicializa o painel de admin,\r\n  * renderiza a lista de empresas e configura os eventos.\r\n  */\r\n-export async function showAdminDashboard() {\r\n+export async function showAdminDashboard(impersonationCallback) {\r\n     hideAllScreens();\r\n     adminDashboardScreen.classList.remove('hidden');\r\n     adminDashboardScreen.style.display = 'block';\r\n \r\n-    await renderCompanyList();\r\n+    // 2. Passe o parâmetro para a função que configura os botões\r\n+    await renderCompanyList(impersonationCallback); \r\n     switchAdminView('companies');\r\n }\r\n \r\n-async function renderCompanyList() {\r\n+async function renderCompanyList(impersonationCallback) {\r\n     showLoader();\r\n     try {\r\n         const companies = await api.getCompanies();\r\n         companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n@@ -106,10 +107,10 @@\n                 `;\r\n                 companyListDiv.appendChild(companyCard);\r\n             });\r\n \r\n-            // Adiciona os event listeners para os novos botões criados\r\n-            addEventListenersToAdminButtons();\r\n+            // Adiciona os event listeners para os novos botões, passando o callback\r\n+            addEventListenersToAdminButtons(impersonationCallback);\r\n         }\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n"
                },
                {
                    "date": 1754054980804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n-function addEventListenersToAdminButtons() {\r\n+function addEventListenersToAdminButtons(impersonationCallback) {\r\n \r\n     // Listener para os botões \"Detalhes\"\r\n     document.querySelectorAll('.view-details-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n@@ -172,13 +172,13 @@\n                 // 6. Pede à API para criar uma sessão de representação para este utilizador\r\n                 const userIdToImpersonate = userToImpersonate._id;\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n-                // 7. Usa a função de callback global (definida no main.js) para iniciar a sessão\r\n-                if (typeof window.impersonationCallback === 'function') {\r\n-                    window.impersonationCallback(data);\r\n+                // 7. Usa a função de callback recebida como parâmetro para iniciar a sessão\r\n+                if (typeof impersonationCallback === 'function') {\r\n+                    impersonationCallback(data);\r\n                 } else {\r\n-                    console.error(\"Callback de representação não disponível na 'window'!\");\r\n+                    console.error(\"A função de callback para representação não foi fornecida ao painel de admin.\");\r\n                     hideLoader();\r\n                 }\r\n \r\n             } catch (error) {\r\n"
                },
                {
                    "date": 1754055192074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n // D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n import * as api from './api.js';\r\n import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n-import { setImpersonationSession, restoreAdminSession } from './main.js';\r\n \r\n+\r\n // Variáveis de estado e elementos do DOM para o painel de admin\r\n let selectedCompanyForAdmin = null;\r\n let isRenderingAnnouncements = false;\r\n+let adminImpersonationCallback = null;\r\n \r\n const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n const companyListDiv = document.getElementById('companyList');\r\n const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n@@ -74,14 +75,16 @@\n  * Função principal que inicializa o painel de admin,\r\n  * renderiza a lista de empresas e configura os eventos.\r\n  */\r\n export async function showAdminDashboard(impersonationCallback) {\r\n+    adminImpersonationCallback = impersonationCallback; // Guarda a função na nossa variável\r\n+\r\n     hideAllScreens();\r\n     adminDashboardScreen.classList.remove('hidden');\r\n     adminDashboardScreen.style.display = 'block';\r\n \r\n-    // 2. Passe o parâmetro para a função que configura os botões\r\n-    await renderCompanyList(impersonationCallback); \r\n+    // A chamada aqui também não precisa mais de passar o parâmetro\r\n+    await renderCompanyList();\r\n     switchAdminView('companies');\r\n }\r\n \r\n async function renderCompanyList(impersonationCallback) {\r\n"
                },
                {
                    "date": 1754055266673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,10 @@\n     if (viewToShow === 'companies') {\r\n         companiesView.classList.remove('hidden');\r\n         viewCompaniesTab.classList.add('bg-indigo-600', 'text-white');\r\n         viewCompaniesTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        \r\n+        // A chamada aqui foi simplificada\r\n         renderCompanyList();\r\n \r\n     } else if (viewToShow === 'announcements') {\r\n         announcementsView.classList.remove('hidden');\r\n"
                },
                {
                    "date": 1754055281113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     await renderCompanyList();\r\n     switchAdminView('companies');\r\n }\r\n \r\n-async function renderCompanyList(impersonationCallback) {\r\n+async function renderCompanyList() {\r\n     showLoader();\r\n     try {\r\n         const companies = await api.getCompanies();\r\n         companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n@@ -112,10 +112,10 @@\n                 `;\r\n                 companyListDiv.appendChild(companyCard);\r\n             });\r\n \r\n-            // Adiciona os event listeners para os novos botões, passando o callback\r\n-            addEventListenersToAdminButtons(impersonationCallback);\r\n+            // A chamada aqui agora é mais simples\r\n+            addEventListenersToAdminButtons();\r\n         }\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n"
                },
                {
                    "date": 1754055295346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,19 +122,16 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n-function addEventListenersToAdminButtons(impersonationCallback) {\r\n-\r\n+function addEventListenersToAdminButtons() {\r\n     // Listener para os botões \"Detalhes\"\r\n     document.querySelectorAll('.view-details-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n             const companyId = e.target.dataset.companyId;\r\n             showLoader();\r\n             try {\r\n-                // Busca os dados mais recentes da empresa, incluindo os utilizadores\r\n                 const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-                // Abre o modal de detalhes com os dados recebidos\r\n                 openCompanyDetailsModal(company, users, masterUsers);\r\n             } catch (error) {\r\n                 showToast(error.message, 'error');\r\n             } finally {\r\n@@ -149,39 +146,33 @@\n             const companyId = e.target.dataset.companyId;\r\n             showLoader();\r\n \r\n             try {\r\n-                // 1. Busca os detalhes da empresa para obter a lista de utilizadores\r\n                 const { masterUsers } = await api.getCompanyDetails(companyId);\r\n \r\n-                // 2. Valida se existem utilizadores para representar\r\n                 if (!masterUsers || masterUsers.length === 0) {\r\n                     hideLoader();\r\n                     return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n                 }\r\n \r\n-                // 3. Procura pelo 'Proprietário' para dar prioridade à sua representação\r\n                 let userToImpersonate = masterUsers.find(user => user.role === 'Proprietário');\r\n \r\n-                // 4. Se não encontrar um proprietário, usa o primeiro utilizador da lista como fallback\r\n                 if (!userToImpersonate) {\r\n                     console.warn(`Nenhum 'Proprietário' encontrado para a empresa ${companyId}. A representar o primeiro utilizador da lista.`);\r\n                     userToImpersonate = masterUsers[0];\r\n                 }\r\n \r\n-                // 5. Valida se um utilizador foi finalmente encontrado\r\n                 if (!userToImpersonate) {\r\n                     hideLoader();\r\n                     return showToast('Não foi encontrado um utilizador para representar.', 'error');\r\n                 }\r\n-\r\n-                // 6. Pede à API para criar uma sessão de representação para este utilizador\r\n+                \r\n                 const userIdToImpersonate = userToImpersonate._id;\r\n                 const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n \r\n-                // 7. Usa a função de callback recebida como parâmetro para iniciar a sessão\r\n-                if (typeof impersonationCallback === 'function') {\r\n-                    impersonationCallback(data);\r\n+                // Utiliza a variável do módulo que guardamos no início\r\n+                if (typeof adminImpersonationCallback === 'function') {\r\n+                    adminImpersonationCallback(data);\r\n                 } else {\r\n                     console.error(\"A função de callback para representação não foi fornecida ao painel de admin.\");\r\n                     hideLoader();\r\n                 }\r\n"
                },
                {
                    "date": 1754061302262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,13 @@\n // Variáveis de estado e elementos do DOM para o painel de admin\r\n let selectedCompanyForAdmin = null;\r\n let isRenderingAnnouncements = false;\r\n let adminImpersonationCallback = null;\r\n+let newCompaniesChart = null;\r\n \r\n+const viewDashboardTab = document.getElementById('viewDashboardTab');\r\n+const adminDashboardView = document.getElementById('adminDashboardView');\r\n+\r\n const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n const companyListDiv = document.getElementById('companyList');\r\n const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n@@ -47,8 +51,9 @@\n  * @param {string} viewToShow - O nome da aba para mostrar ('companies' ou 'announcements').\r\n  */\r\n function switchAdminView(viewToShow) {\r\n     // Esconde ambos os painéis\r\n+    adminDashboardView.classList.add('hidden');\r\n     companiesView.classList.add('hidden');\r\n     announcementsView.classList.add('hidden');\r\n \r\n     // Reseta o estilo dos botões das abas\r\n@@ -56,9 +61,15 @@\n         btn.classList.remove('bg-indigo-600', 'text-white');\r\n         btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n     });\r\n \r\n-    if (viewToShow === 'companies') {\r\n+    if (viewToShow === 'dashboard') { // Adicione este bloco if\r\n+        adminDashboardView.classList.remove('hidden');\r\n+        viewDashboardTab.classList.add('bg-indigo-600', 'text-white');\r\n+        viewDashboardTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderAdminDashboard(); // Chama a função que vai renderizar o dashboard\r\n+\r\n+    }else if (viewToShow === 'companies') {\r\n         companiesView.classList.remove('hidden');\r\n         viewCompaniesTab.classList.add('bg-indigo-600', 'text-white');\r\n         viewCompaniesTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n         \r\n@@ -77,17 +88,15 @@\n  * Função principal que inicializa o painel de admin,\r\n  * renderiza a lista de empresas e configura os eventos.\r\n  */\r\n export async function showAdminDashboard(impersonationCallback) {\r\n-    adminImpersonationCallback = impersonationCallback; // Guarda a função na nossa variável\r\n-\r\n+    adminImpersonationCallback = impersonationCallback; \r\n     hideAllScreens();\r\n     adminDashboardScreen.classList.remove('hidden');\r\n     adminDashboardScreen.style.display = 'block';\r\n \r\n-    // A chamada aqui também não precisa mais de passar o parâmetro\r\n-    await renderCompanyList();\r\n-    switchAdminView('companies');\r\n+    // Inicia na aba do dashboard\r\n+    switchAdminView('dashboard'); \r\n }\r\n \r\n async function renderCompanyList() {\r\n     showLoader();\r\n@@ -462,8 +471,84 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n+/**\r\n+ * Busca os dados da API e preenche o dashboard do admin.\r\n+ */\r\n+async function renderAdminDashboard() {\r\n+    showLoader();\r\n+    try {\r\n+        const stats = await api.getAdminDashboardStats();\r\n+\r\n+        // Preenche os cartões (KPIs)\r\n+        document.getElementById('kpiTotalCompanies').textContent = stats.totalCompanies;\r\n+        document.getElementById('kpiTotalUsers').textContent = stats.totalUsers;\r\n+        document.getElementById('kpiActiveSubscriptions').textContent = stats.activeSubscriptions;\r\n+\r\n+        // Renderiza o gráfico\r\n+        renderNewCompaniesChart(stats.newCompaniesLast30Days);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de novas empresas.\r\n+ * @param {Array} chartData - Os dados para o gráfico.\r\n+ */\r\n+function renderNewCompaniesChart(chartData) {\r\n+    const canvas = document.getElementById('newCompaniesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    // Prepara os dados para o Chart.js\r\n+    const labels = chartData.map(item => new Date(item.date).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' }));\r\n+    const data = chartData.map(item => item.count);\r\n+\r\n+    // Destrói o gráfico anterior se ele já existir (importante ao trocar de abas)\r\n+    if (newCompaniesChart) {\r\n+        newCompaniesChart.destroy();\r\n+    }\r\n+\r\n+    newCompaniesChart = new Chart(ctx, {\r\n+        type: 'line', // Gráfico de linha\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Novas Empresas',\r\n+                data: data,\r\n+                backgroundColor: 'rgba(99, 102, 241, 0.2)',\r\n+                borderColor: 'rgba(99, 102, 241, 1)',\r\n+                borderWidth: 2,\r\n+                tension: 0.3, // Deixa a linha mais suave\r\n+                fill: true\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                y: { \r\n+                    beginAtZero: true, \r\n+                    ticks: { color: '#9ca3af', stepSize: 1 }, // Garante que a escala seja de 1 em 1\r\n+                    grid: { color: 'rgba(156, 163, 175, 0.1)' } \r\n+                },\r\n+                x: { \r\n+                    ticks: { color: '#9ca3af' }, \r\n+                    grid: { color: 'rgba(156, 163, 175, 0.1)' } \r\n+                }\r\n+            },\r\n+            plugins: { \r\n+                legend: { display: false } // Esconde a legenda, já que só temos uma linha\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n // ------ Handlers ------\r\n \r\n /**\r\n  * Lida com a submissão do formulário de criação de empresa.\r\n@@ -735,8 +820,12 @@\n // EVENT LISTENERS\r\n // =================================================================================\r\n // =================================================================================\r\n \r\n+// --- DashBoard ---\r\n+if (viewDashboardTab) viewDashboardTab.addEventListener('click', () => switchAdminView('dashboard'));\r\n+\r\n+\r\n if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n // Abas\r\n if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n@@ -811,5 +900,5 @@\n                 }\r\n             }\r\n         }\r\n     });\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1754062424281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,13 @@\n let selectedCompanyForAdmin = null;\r\n let isRenderingAnnouncements = false;\r\n let adminImpersonationCallback = null;\r\n let newCompaniesChart = null;\r\n+let allSubscriptionsData = [];\r\n \r\n+const viewSubscriptionsTab = document.getElementById('viewSubscriptionsTab');\r\n+const subscriptionsView = document.getElementById('subscriptionsView');\r\n+\r\n const viewDashboardTab = document.getElementById('viewDashboardTab');\r\n const adminDashboardView = document.getElementById('adminDashboardView');\r\n \r\n const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n@@ -75,8 +79,13 @@\n         \r\n         // A chamada aqui foi simplificada\r\n         renderCompanyList();\r\n \r\n+    } else if (viewToShow === 'subscriptions') { // Adicione este bloco\r\n+        subscriptionsView.classList.remove('hidden');\r\n+        viewSubscriptionsTab.classList.add('bg-indigo-600', 'text-white');\r\n+        viewSubscriptionsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderSubscriptionsView();\r\n     } else if (viewToShow === 'announcements') {\r\n         announcementsView.classList.remove('hidden');\r\n         viewAnnouncementsTab.classList.add('bg-indigo-600', 'text-white');\r\n         viewAnnouncementsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n@@ -547,8 +556,151 @@\n         }\r\n     });\r\n }\r\n \r\n+function renderSubscriptionsView() {\r\n+    subscriptionsView.innerHTML = `\r\n+        <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg\">\r\n+            <div class=\"flex justify-between items-center mb-4 flex-wrap gap-4\">\r\n+                <h2 class=\"text-xl font-semibold text-white\">Gestão de Assinaturas</h2>\r\n+                <div class=\"flex items-center space-x-4\">\r\n+                    <input type=\"text\" id=\"subscriptionSearchInput\" placeholder=\"Pesquisar por nome ou CNPJ...\" class=\"w-64 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-indigo-500\">\r\n+                    <div class=\"flex items-center space-x-1 bg-gray-900/50 p-1 rounded-md border border-gray-700\">\r\n+                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors active\" data-status=\"all\">Todos</button>\r\n+                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"active\">Ativas</button>\r\n+                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"inactive\">Inativas</button>\r\n+                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"pending_approval\">Pendentes</button>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+            <div id=\"subscriptionsTableContainer\" class=\"overflow-x-auto\">\r\n+                <p class=\"text-center text-gray-400 py-8\">A carregar dados...</p>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+    \r\n+    // Adiciona os event listeners para os filtros e a pesquisa\r\n+    document.getElementById('subscriptionSearchInput').addEventListener('input', handleSubscriptionFilter);\r\n+    document.querySelectorAll('.sub-filter-btn').forEach(btn => {\r\n+        btn.addEventListener('click', (e) => {\r\n+            document.querySelectorAll('.sub-filter-btn').forEach(b => b.classList.remove('active'));\r\n+            e.currentTarget.classList.add('active');\r\n+            handleSubscriptionFilter();\r\n+        });\r\n+    });\r\n+\r\n+    // Busca os dados da API\r\n+    fetchAndRenderSubscriptions();\r\n+}\r\n+\r\n+async function fetchAndRenderSubscriptions() {\r\n+    showLoader();\r\n+    const container = document.getElementById('subscriptionsTableContainer');\r\n+    try {\r\n+        // Busca os dados e guarda na variável global\r\n+        allSubscriptionsData = await api.getAdminSubscriptions();\r\n+        // Renderiza a tabela com todos os dados\r\n+        renderSubscriptionsTable(allSubscriptionsData);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        container.innerHTML = '<p class=\"text-red-400 text-center py-8\">Não foi possível carregar os dados das assinaturas.</p>';\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function handleSubscriptionFilter() {\r\n+    const searchTerm = document.getElementById('subscriptionSearchInput').value.toLowerCase();\r\n+    const activeStatus = document.querySelector('.sub-filter-btn.active').dataset.status;\r\n+\r\n+    const filteredData = allSubscriptionsData.filter(company => {\r\n+        const subStatus = company.subscription?.status || 'inactive';\r\n+        \r\n+        const matchesStatus = (activeStatus === 'all') || (subStatus === activeStatus);\r\n+        \r\n+        const matchesSearch = company.nomeEmpresa.toLowerCase().includes(searchTerm) ||\r\n+                              company.cnpj.replace(/\\D/g, '').includes(searchTerm.replace(/\\D/g, ''));\r\n+                              \r\n+        return matchesStatus && matchesSearch;\r\n+    });\r\n+\r\n+    renderSubscriptionsTable(filteredData);\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a tabela HTML de assinaturas com base nos dados fornecidos.\r\n+ * @param {Array} data - A lista de empresas com dados de assinatura para exibir.\r\n+ */\r\n+function renderSubscriptionsTable(data) {\r\n+    const container = document.getElementById('subscriptionsTableContainer');\r\n+    if (data.length === 0) {\r\n+        container.innerHTML = '<p class=\"text-gray-400 text-center py-8\">Nenhuma assinatura encontrada para os filtros selecionados.</p>';\r\n+        return;\r\n+    }\r\n+\r\n+    const tableRows = data.map(company => {\r\n+        const sub = company.subscription || {};\r\n+        const endDate = sub.endDate ? new Date(sub.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+        \r\n+        return `\r\n+            <tr class=\"border-b border-gray-700 hover:bg-gray-700/50\">\r\n+                <td class=\"p-4\">${company.nomeEmpresa}</td>\r\n+                <td class=\"p-4 font-mono\">${formatCnpj(company.cnpj)}</td>\r\n+                <td class=\"p-4\">${getStatusBadge(sub.status)}</td>\r\n+                <td class=\"p-4\">${endDate}</td>\r\n+                <td class=\"p-4 font-mono text-xs\">${sub.mercadopagoPreapprovalId || 'N/A'}</td>\r\n+                <td class=\"p-4 text-right\">\r\n+                    <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                </td>\r\n+            </tr>\r\n+        `;\r\n+    }).join('');\r\n+\r\n+    container.innerHTML = `\r\n+        <table class=\"w-full text-sm text-left text-gray-300\">\r\n+            <thead class=\"text-xs text-gray-400 uppercase bg-gray-700\">\r\n+                <tr>\r\n+                    <th class=\"p-4\">Empresa</th>\r\n+                    <th class=\"p-4\">CNPJ</th>\r\n+                    <th class=\"p-4\">Status</th>\r\n+                    <th class=\"p-4\">Expira em</th>\r\n+                    <th class=\"p-4\">ID Mercado Pago</th>\r\n+                    <th class=\"p-4 text-right\">Ações</th>\r\n+                </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+                ${tableRows}\r\n+            </tbody>\r\n+        </table>\r\n+    `;\r\n+}\r\n+\r\n+/**\r\n+ * Retorna uma badge de status colorida em HTML.\r\n+ * @param {string} status - O status da assinatura.\r\n+ */\r\n+function getStatusBadge(status) {\r\n+    // Mapeamento centralizado de status para aparência e texto.\r\n+    // Facilita a adição de novos status no futuro.\r\n+    const statusConfig = {\r\n+        active: { text: 'Ativa', style: 'bg-green-500/80 text-green-100' },\r\n+        inactive: { text: 'Inativa', style: 'bg-red-500/80 text-red-100' },\r\n+        pending_approval: { text: 'Pendente', style: 'bg-yellow-500/80 text-yellow-100' },\r\n+        pending: { text: 'Pendente', style: 'bg-yellow-500/80 text-yellow-100' },\r\n+        cancelled: { text: 'Cancelada', style: 'bg-gray-600 text-gray-200' },\r\n+        // Um caso padrão para qualquer outro status que possa aparecer\r\n+        default: { text: 'Desconhecido', style: 'bg-gray-400 text-gray-800' }\r\n+    };\r\n+\r\n+    // Garante que um status nulo ou indefinido seja tratado como 'inativo'\r\n+    const currentStatus = status || 'inactive';\r\n+\r\n+    // Obtém a configuração para o status atual, ou usa o padrão se não for encontrado\r\n+    const config = statusConfig[currentStatus] || statusConfig.default;\r\n+\r\n+    return `<span class=\"px-2.5 py-1 rounded-full text-xs font-semibold ${config.style}\">${config.text}</span>`;\r\n+}\r\n+\r\n // ------ Handlers ------\r\n \r\n /**\r\n  * Lida com a submissão do formulário de criação de empresa.\r\n@@ -820,8 +972,10 @@\n // EVENT LISTENERS\r\n // =================================================================================\r\n // =================================================================================\r\n \r\n+if (viewSubscriptionsTab) viewSubscriptionsTab.addEventListener('click', () => switchAdminView('subscriptions'));\r\n+\r\n // --- DashBoard ---\r\n if (viewDashboardTab) viewDashboardTab.addEventListener('click', () => switchAdminView('dashboard'));\r\n \r\n \r\n"
                },
                {
                    "date": 1754062823570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -671,8 +671,27 @@\n                 ${tableRows}\r\n             </tbody>\r\n         </table>\r\n     `;\r\n+\r\n+    // --- CÓDIGO NOVO ADICIONADO AQUI ---\r\n+    // Após a tabela ser criada, adicionamos o event listener aos novos botões \"Detalhes\".\r\n+    container.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Reutilizamos a lógica que já funciona para buscar os dados\r\n+                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                // Reutilizamos a função que já abre o modal de detalhes\r\n+                openCompanyDetailsModal(company, users, masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n }\r\n \r\n /**\r\n  * Retorna uma badge de status colorida em HTML.\r\n"
                },
                {
                    "date": 1754062976373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,34 +54,35 @@\n  * Alterna a visualização entre as abas do painel de admin.\r\n  * @param {string} viewToShow - O nome da aba para mostrar ('companies' ou 'announcements').\r\n  */\r\n function switchAdminView(viewToShow) {\r\n-    // Esconde ambos os painéis\r\n+    // --- A CORREÇÃO ESTÁ AQUI ---\r\n+    // Este bloco no início da função é crucial. Ele garante que TODAS as\r\n+    // vistas são escondidas antes de qualquer outra ação.\r\n     adminDashboardView.classList.add('hidden');\r\n     companiesView.classList.add('hidden');\r\n+    subscriptionsView.classList.add('hidden'); // Esta linha era a que provavelmente faltava\r\n     announcementsView.classList.add('hidden');\r\n \r\n-    // Reseta o estilo dos botões das abas\r\n+    // Reseta o estilo de todos os botões das abas\r\n+    // (O seu código para resetar os botões continua aqui)\r\n     adminTabButtons.forEach(btn => {\r\n         btn.classList.remove('bg-indigo-600', 'text-white');\r\n         btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n     });\r\n \r\n-    if (viewToShow === 'dashboard') { // Adicione este bloco if\r\n+    // Agora, ativamos apenas a aba e a vista corretas\r\n+    if (viewToShow === 'dashboard') {\r\n         adminDashboardView.classList.remove('hidden');\r\n         viewDashboardTab.classList.add('bg-indigo-600', 'text-white');\r\n         viewDashboardTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderAdminDashboard(); // Chama a função que vai renderizar o dashboard\r\n-\r\n-    }else if (viewToShow === 'companies') {\r\n+        renderAdminDashboard();\r\n+    } else if (viewToShow === 'companies') {\r\n         companiesView.classList.remove('hidden');\r\n         viewCompaniesTab.classList.add('bg-indigo-600', 'text-white');\r\n         viewCompaniesTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        \r\n-        // A chamada aqui foi simplificada\r\n         renderCompanyList();\r\n-\r\n-    } else if (viewToShow === 'subscriptions') { // Adicione este bloco\r\n+    } else if (viewToShow === 'subscriptions') {\r\n         subscriptionsView.classList.remove('hidden');\r\n         viewSubscriptionsTab.classList.add('bg-indigo-600', 'text-white');\r\n         viewSubscriptionsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n         renderSubscriptionsView();\r\n"
                },
                {
                    "date": 1754066676784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,15 +98,30 @@\n  * Função principal que inicializa o painel de admin,\r\n  * renderiza a lista de empresas e configura os eventos.\r\n  */\r\n export async function showAdminDashboard(impersonationCallback) {\r\n-    adminImpersonationCallback = impersonationCallback; \r\n-    hideAllScreens();\r\n-    adminDashboardScreen.classList.remove('hidden');\r\n-    adminDashboardScreen.style.display = 'block';\r\n+    adminImpersonationCallback = impersonationCallback;\r\n \r\n-    // Inicia na aba do dashboard\r\n-    switchAdminView('dashboard'); \r\n+    // --- NOVA ABORDAGEM DIRETA ---\r\n+    const adminPanel = document.getElementById('adminDashboardScreen');\r\n+    const mainPanel = document.getElementById('mainAppContent');\r\n+    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+\r\n+    // Escondemos explicitamente a aplicação principal e o seu botão flutuante\r\n+    if (mainPanel) {\r\n+        mainPanel.style.display = 'none';\r\n+    }\r\n+    if (openAddBillModalBtn) {\r\n+        openAddBillModalBtn.style.display = 'none';\r\n+    }\r\n+\r\n+    // E mostramos explicitamente o painel de admin usando 'flex' (devido ao nosso layout de CSS)\r\n+    if (adminPanel) {\r\n+        adminPanel.style.display = 'flex';\r\n+    }\r\n+    // --- FIM DA NOVA ABORDAGEM ---\r\n+\r\n+    switchAdminView('dashboard');\r\n }\r\n \r\n async function renderCompanyList() {\r\n     showLoader();\r\n"
                },
                {
                    "date": 1754144941176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1204 @@\n+// D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n+\r\n+\r\n+// Variáveis de estado e elementos do DOM para o painel de admin\r\n+let selectedCompanyForAdmin = null;\r\n+let isRenderingAnnouncements = false;\r\n+let adminImpersonationCallback = null;\r\n+let newCompaniesChart = null;\r\n+let allSubscriptionsData = [];\r\n+let currentEditingTemplateId = null;\r\n+\r\n+const viewSettingsTab = document.getElementById('viewSettingsTab');\r\n+const settingsView = document.getElementById('settingsView');\r\n+\r\n+const viewSubscriptionsTab = document.getElementById('viewSubscriptionsTab');\r\n+const subscriptionsView = document.getElementById('subscriptionsView');\r\n+\r\n+const viewDashboardTab = document.getElementById('viewDashboardTab');\r\n+const adminDashboardView = document.getElementById('adminDashboardView');\r\n+\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+\r\n+// Elementos das novas abas\r\n+const viewCompaniesTab = document.getElementById('viewCompaniesTab');\r\n+const viewAnnouncementsTab = document.getElementById('viewAnnouncementsTab');\r\n+const companiesView = document.getElementById('companiesView');\r\n+const announcementsView = document.getElementById('announcementsView');\r\n+const adminTabButtons = document.querySelectorAll('.admin-tab-btn');\r\n+\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+\r\n+const openAnnouncementModalBtn = document.getElementById('openAnnouncementModalBtn');\r\n+const announcementModal = document.getElementById('announcementModal');\r\n+const announcementForm = document.getElementById('announcementForm');\r\n+const cancelAnnouncementBtn = document.getElementById('cancelAnnouncementBtn');\r\n+const announcementsList = document.getElementById('announcementsList');\r\n+\r\n+/**\r\n+ * Alterna a visualização entre as abas do painel de admin.\r\n+ * @param {string} viewToShow - O nome da aba para mostrar ('companies' ou 'announcements').\r\n+ */\r\n+function switchAdminView(viewToShow) {\r\n+    // --- A CORREÇÃO ESTÁ AQUI ---\r\n+    // Este bloco no início da função é crucial. Ele garante que TODAS as\r\n+    // vistas são escondidas antes de qualquer outra ação.\r\n+    adminDashboardView.classList.add('hidden');\r\n+    companiesView.classList.add('hidden');\r\n+    subscriptionsView.classList.add('hidden'); // Esta linha era a que provavelmente faltava\r\n+    announcementsView.classList.add('hidden');\r\n+    settingsView.classList.add('hidden');\r\n+\r\n+    // Reseta o estilo de todos os botões das abas\r\n+    // (O seu código para resetar os botões continua aqui)\r\n+    adminTabButtons.forEach(btn => {\r\n+        btn.classList.remove('bg-indigo-600', 'text-white');\r\n+        btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+    });\r\n+\r\n+    // Agora, ativamos apenas a aba e a vista corretas\r\n+    if (viewToShow === 'dashboard') {\r\n+        adminDashboardView.classList.remove('hidden');\r\n+        viewDashboardTab.classList.add('bg-indigo-600', 'text-white');\r\n+        viewDashboardTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderAdminDashboard();\r\n+    } else if (viewToShow === 'companies') {\r\n+        companiesView.classList.remove('hidden');\r\n+        viewCompaniesTab.classList.add('bg-indigo-600', 'text-white');\r\n+        viewCompaniesTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderCompanyList();\r\n+    } else if (viewToShow === 'subscriptions') {\r\n+        subscriptionsView.classList.remove('hidden');\r\n+        viewSubscriptionsTab.classList.add('bg-indigo-600', 'text-white');\r\n+        viewSubscriptionsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderSubscriptionsView();\r\n+    } else if (viewToShow === 'announcements') {\r\n+        announcementsView.classList.remove('hidden');\r\n+        viewAnnouncementsTab.classList.add('bg-indigo-600', 'text-white');\r\n+        viewAnnouncementsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderAnnouncements();\r\n+    }else if (viewToShow === 'settings') {\r\n+        settingsView.classList.remove('hidden');\r\n+        viewSettingsTab.classList.add('bg-indigo-600', 'text-white');\r\n+        viewSettingsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderSettingsView();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função principal que inicializa o painel de admin,\r\n+ * renderiza a lista de empresas e configura os eventos.\r\n+ */\r\n+export async function showAdminDashboard(impersonationCallback) {\r\n+    adminImpersonationCallback = impersonationCallback;\r\n+\r\n+    // --- NOVA ABORDAGEM DIRETA ---\r\n+    const adminPanel = document.getElementById('adminDashboardScreen');\r\n+    const mainPanel = document.getElementById('mainAppContent');\r\n+    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+\r\n+    // Escondemos explicitamente a aplicação principal e o seu botão flutuante\r\n+    if (mainPanel) {\r\n+        mainPanel.style.display = 'none';\r\n+    }\r\n+    if (openAddBillModalBtn) {\r\n+        openAddBillModalBtn.style.display = 'none';\r\n+    }\r\n+\r\n+    // E mostramos explicitamente o painel de admin usando 'flex' (devido ao nosso layout de CSS)\r\n+    if (adminPanel) {\r\n+        adminPanel.style.display = 'flex';\r\n+    }\r\n+    // --- FIM DA NOVA ABORDAGEM ---\r\n+\r\n+    switchAdminView('dashboard');\r\n+}\r\n+\r\n+async function renderCompanyList() {\r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n+\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+\r\n+            // A chamada aqui agora é mais simples\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    // Listener para os botões \"Detalhes\"\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(company, users, masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para os botões \"Entrar\"\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+\r\n+            try {\r\n+                const { masterUsers } = await api.getCompanyDetails(companyId);\r\n+\r\n+                if (!masterUsers || masterUsers.length === 0) {\r\n+                    hideLoader();\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                }\r\n+\r\n+                let userToImpersonate = masterUsers.find(user => user.role === 'Proprietário');\r\n+\r\n+                if (!userToImpersonate) {\r\n+                    console.warn(`Nenhum 'Proprietário' encontrado para a empresa ${companyId}. A representar o primeiro utilizador da lista.`);\r\n+                    userToImpersonate = masterUsers[0];\r\n+                }\r\n+\r\n+                if (!userToImpersonate) {\r\n+                    hideLoader();\r\n+                    return showToast('Não foi encontrado um utilizador para representar.', 'error');\r\n+                }\r\n+                \r\n+                const userIdToImpersonate = userToImpersonate._id;\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                // Utiliza a variável do módulo que guardamos no início\r\n+                if (typeof adminImpersonationCallback === 'function') {\r\n+                    adminImpersonationCallback(data);\r\n+                } else {\r\n+                    console.error(\"A função de callback para representação não foi fornecida ao painel de admin.\");\r\n+                    hideLoader();\r\n+                }\r\n+\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n+ */\r\n+function openCompanyDetailsModal(company, users, masterUsers) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (masterUsers && masterUsers.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        masterUsers.forEach(user => {\r\n+            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n+\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona os eventos DEPOIS de criar os botões\r\n+    addEventListenersToCompanyDetailsModal();\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+    companyDetailsModal.style.display = 'flex';\r\n+}\r\n+\r\n+function addEventListenersToCompanyDetailsModal() {\r\n+    // Evento para os seletores de cargo (role)\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                // Recarrega os dados do modal para garantir consistência\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Evento para os botões de remover utilizador\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.currentTarget.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                // Recarrega os dados do modal\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+export function openAddUserModal(companyId, isAdmin = false) {\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    const addUserModal = document.getElementById('addUserModal');\r\n+    const addUserRoleSelect = document.getElementById('addUserRoleSelect');\r\n+\r\n+    let availableRoles;\r\n+    if (isAdmin) {\r\n+        availableRoles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+    } else {\r\n+        availableRoles = ['Gerente', 'Funcionário'];\r\n+    }\r\n+\r\n+    addUserRoleSelect.innerHTML = '';\r\n+    availableRoles.forEach(role => {\r\n+        const option = document.createElement('option');\r\n+        option.value = role;\r\n+        option.textContent = role;\r\n+        addUserRoleSelect.appendChild(option);\r\n+    });\r\n+\r\n+    if (addUserForm) {\r\n+        addUserForm.reset();\r\n+        addUserForm.dataset.companyId = companyId;\r\n+        addUserForm.dataset.isAdmin = isAdmin; // <<--- LINHA ADICIONADA: Guardamos o status aqui\r\n+    }\r\n+\r\n+    if (addUserModal) {\r\n+        addUserModal.classList.remove('hidden');\r\n+    }\r\n+    document.getElementById('addUsernameInput').focus();\r\n+}\r\n+\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal de gestão de utilizadores para uma empresa específica.\r\n+ * Busca os dados mais recentes da API e configura os eventos de interação.\r\n+ * @param {object} company - O objeto da empresa cujos utilizadores serão geridos.\r\n+ */\r\n+export async function openManageUsersModal(company) {\r\n+    // Validação inicial para garantir que recebemos a empresa correta\r\n+    if (!company || !company._id) {\r\n+        showToast('Erro: Não foi possível identificar a empresa para gerir os utilizadores.', 'error');\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader();\r\n+    const manageUsersModal = document.getElementById('manageUsersModal');\r\n+    const companyUsersList = document.getElementById('companyUsersList');\r\n+\r\n+    try {\r\n+        // 1. Busca sempre os dados mais recentes da API\r\n+        const { masterUsers } = await api.getCompanyDetails(company._id);\r\n+\r\n+        // 2. Limpa a lista de utilizadores anterior\r\n+        if (companyUsersList) {\r\n+            companyUsersList.innerHTML = '';\r\n+        } else {\r\n+            console.error(\"Elemento 'companyUsersList' não foi encontrado no HTML.\");\r\n+            hideLoader();\r\n+            return; // Interrompe a função se o elemento não existir\r\n+        }\r\n+\r\n+        // 3. Constrói o HTML da nova lista de utilizadores\r\n+        if (masterUsers && masterUsers.length > 0) {\r\n+            const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+            masterUsers.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+\r\n+                // Cria as opções do dropdown de cargos\r\n+                const roleOptions = assignableRoles.map(role =>\r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                // Se for proprietário, mostra texto; senão, mostra o dropdown.\r\n+                const roleHtml = isOwner\r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                // Se não for proprietário, mostra o botão de remover.\r\n+                const buttonHtml = isOwner\r\n+                    ? ''\r\n+                    : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`;\r\n+\r\n+                const userRowHtml = `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${buttonHtml}\r\n+                        </div>\r\n+                    </div>\r\n+                `;\r\n+                companyUsersList.insertAdjacentHTML('beforeend', userRowHtml);\r\n+            });\r\n+        } else {\r\n+            companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum usuário cadastrado para esta empresa.</p>';\r\n+        }\r\n+\r\n+        // 4. Adiciona os eventos aos novos elementos criados dinamicamente\r\n+\r\n+        // Evento para a mudança de cargo (role)\r\n+        companyUsersList.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+\r\n+                if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    await openManageUsersModal(company); // Recarrega o modal para reverter a mudança visual\r\n+                    return;\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    await api.updateUserRole(company._id, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    // Recarrega o modal para garantir que a interface está 100% sincronizada\r\n+                    await openManageUsersModal(company);\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        // Evento para o botão de remover utilizador\r\n+        companyUsersList.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                const userId = e.currentTarget.dataset.userId;\r\n+\r\n+                if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+                    return;\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    await api.deleteUserFromCompany(company._id, userId);\r\n+                    showToast('Utilizador removido com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    // Recarrega sempre o modal para mostrar a lista atualizada\r\n+                    await openManageUsersModal(company);\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        // 5. Mostra o modal\r\n+        if (manageUsersModal) {\r\n+            manageUsersModal.classList.remove('hidden');\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Busca os dados da API e preenche o dashboard do admin.\r\n+ */\r\n+async function renderAdminDashboard() {\r\n+    showLoader();\r\n+    try {\r\n+        const stats = await api.getAdminDashboardStats();\r\n+\r\n+        // Preenche os cartões (KPIs)\r\n+        document.getElementById('kpiTotalCompanies').textContent = stats.totalCompanies;\r\n+        document.getElementById('kpiTotalUsers').textContent = stats.totalUsers;\r\n+        document.getElementById('kpiActiveSubscriptions').textContent = stats.activeSubscriptions;\r\n+\r\n+        // Renderiza o gráfico\r\n+        renderNewCompaniesChart(stats.newCompaniesLast30Days);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de novas empresas.\r\n+ * @param {Array} chartData - Os dados para o gráfico.\r\n+ */\r\n+function renderNewCompaniesChart(chartData) {\r\n+    const canvas = document.getElementById('newCompaniesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    // Prepara os dados para o Chart.js\r\n+    const labels = chartData.map(item => new Date(item.date).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' }));\r\n+    const data = chartData.map(item => item.count);\r\n+\r\n+    // Destrói o gráfico anterior se ele já existir (importante ao trocar de abas)\r\n+    if (newCompaniesChart) {\r\n+        newCompaniesChart.destroy();\r\n+    }\r\n+\r\n+    newCompaniesChart = new Chart(ctx, {\r\n+        type: 'line', // Gráfico de linha\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Novas Empresas',\r\n+                data: data,\r\n+                backgroundColor: 'rgba(99, 102, 241, 0.2)',\r\n+                borderColor: 'rgba(99, 102, 241, 1)',\r\n+                borderWidth: 2,\r\n+                tension: 0.3, // Deixa a linha mais suave\r\n+                fill: true\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                y: { \r\n+                    beginAtZero: true, \r\n+                    ticks: { color: '#9ca3af', stepSize: 1 }, // Garante que a escala seja de 1 em 1\r\n+                    grid: { color: 'rgba(156, 163, 175, 0.1)' } \r\n+                },\r\n+                x: { \r\n+                    ticks: { color: '#9ca3af' }, \r\n+                    grid: { color: 'rgba(156, 163, 175, 0.1)' } \r\n+                }\r\n+            },\r\n+            plugins: { \r\n+                legend: { display: false } // Esconde a legenda, já que só temos uma linha\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+function renderSubscriptionsView() {\r\n+    subscriptionsView.innerHTML = `\r\n+        <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg\">\r\n+            <div class=\"flex justify-between items-center mb-4 flex-wrap gap-4\">\r\n+                <h2 class=\"text-xl font-semibold text-white\">Gestão de Assinaturas</h2>\r\n+                <div class=\"flex items-center space-x-4\">\r\n+                    <input type=\"text\" id=\"subscriptionSearchInput\" placeholder=\"Pesquisar por nome ou CNPJ...\" class=\"w-64 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-indigo-500\">\r\n+                    <div class=\"flex items-center space-x-1 bg-gray-900/50 p-1 rounded-md border border-gray-700\">\r\n+                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors active\" data-status=\"all\">Todos</button>\r\n+                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"active\">Ativas</button>\r\n+                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"inactive\">Inativas</button>\r\n+                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"pending_approval\">Pendentes</button>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+            <div id=\"subscriptionsTableContainer\" class=\"overflow-x-auto\">\r\n+                <p class=\"text-center text-gray-400 py-8\">A carregar dados...</p>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+    \r\n+    // Adiciona os event listeners para os filtros e a pesquisa\r\n+    document.getElementById('subscriptionSearchInput').addEventListener('input', handleSubscriptionFilter);\r\n+    document.querySelectorAll('.sub-filter-btn').forEach(btn => {\r\n+        btn.addEventListener('click', (e) => {\r\n+            document.querySelectorAll('.sub-filter-btn').forEach(b => b.classList.remove('active'));\r\n+            e.currentTarget.classList.add('active');\r\n+            handleSubscriptionFilter();\r\n+        });\r\n+    });\r\n+\r\n+    // Busca os dados da API\r\n+    fetchAndRenderSubscriptions();\r\n+}\r\n+\r\n+async function fetchAndRenderSubscriptions() {\r\n+    showLoader();\r\n+    const container = document.getElementById('subscriptionsTableContainer');\r\n+    try {\r\n+        // Busca os dados e guarda na variável global\r\n+        allSubscriptionsData = await api.getAdminSubscriptions();\r\n+        // Renderiza a tabela com todos os dados\r\n+        renderSubscriptionsTable(allSubscriptionsData);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        container.innerHTML = '<p class=\"text-red-400 text-center py-8\">Não foi possível carregar os dados das assinaturas.</p>';\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function handleSubscriptionFilter() {\r\n+    const searchTerm = document.getElementById('subscriptionSearchInput').value.toLowerCase();\r\n+    const activeStatus = document.querySelector('.sub-filter-btn.active').dataset.status;\r\n+\r\n+    const filteredData = allSubscriptionsData.filter(company => {\r\n+        const subStatus = company.subscription?.status || 'inactive';\r\n+        \r\n+        const matchesStatus = (activeStatus === 'all') || (subStatus === activeStatus);\r\n+        \r\n+        const matchesSearch = company.nomeEmpresa.toLowerCase().includes(searchTerm) ||\r\n+                              company.cnpj.replace(/\\D/g, '').includes(searchTerm.replace(/\\D/g, ''));\r\n+                              \r\n+        return matchesStatus && matchesSearch;\r\n+    });\r\n+\r\n+    renderSubscriptionsTable(filteredData);\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a tabela HTML de assinaturas com base nos dados fornecidos.\r\n+ * @param {Array} data - A lista de empresas com dados de assinatura para exibir.\r\n+ */\r\n+function renderSubscriptionsTable(data) {\r\n+    const container = document.getElementById('subscriptionsTableContainer');\r\n+    if (data.length === 0) {\r\n+        container.innerHTML = '<p class=\"text-gray-400 text-center py-8\">Nenhuma assinatura encontrada para os filtros selecionados.</p>';\r\n+        return;\r\n+    }\r\n+\r\n+    const tableRows = data.map(company => {\r\n+        const sub = company.subscription || {};\r\n+        const endDate = sub.endDate ? new Date(sub.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+        \r\n+        return `\r\n+            <tr class=\"border-b border-gray-700 hover:bg-gray-700/50\">\r\n+                <td class=\"p-4\">${company.nomeEmpresa}</td>\r\n+                <td class=\"p-4 font-mono\">${formatCnpj(company.cnpj)}</td>\r\n+                <td class=\"p-4\">${getStatusBadge(sub.status)}</td>\r\n+                <td class=\"p-4\">${endDate}</td>\r\n+                <td class=\"p-4 font-mono text-xs\">${sub.mercadopagoPreapprovalId || 'N/A'}</td>\r\n+                <td class=\"p-4 text-right\">\r\n+                    <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                </td>\r\n+            </tr>\r\n+        `;\r\n+    }).join('');\r\n+\r\n+    container.innerHTML = `\r\n+        <table class=\"w-full text-sm text-left text-gray-300\">\r\n+            <thead class=\"text-xs text-gray-400 uppercase bg-gray-700\">\r\n+                <tr>\r\n+                    <th class=\"p-4\">Empresa</th>\r\n+                    <th class=\"p-4\">CNPJ</th>\r\n+                    <th class=\"p-4\">Status</th>\r\n+                    <th class=\"p-4\">Expira em</th>\r\n+                    <th class=\"p-4\">ID Mercado Pago</th>\r\n+                    <th class=\"p-4 text-right\">Ações</th>\r\n+                </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+                ${tableRows}\r\n+            </tbody>\r\n+        </table>\r\n+    `;\r\n+\r\n+    // --- CÓDIGO NOVO ADICIONADO AQUI ---\r\n+    // Após a tabela ser criada, adicionamos o event listener aos novos botões \"Detalhes\".\r\n+    container.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Reutilizamos a lógica que já funciona para buscar os dados\r\n+                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                // Reutilizamos a função que já abre o modal de detalhes\r\n+                openCompanyDetailsModal(company, users, masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Retorna uma badge de status colorida em HTML.\r\n+ * @param {string} status - O status da assinatura.\r\n+ */\r\n+function getStatusBadge(status) {\r\n+    // Mapeamento centralizado de status para aparência e texto.\r\n+    // Facilita a adição de novos status no futuro.\r\n+    const statusConfig = {\r\n+        active: { text: 'Ativa', style: 'bg-green-500/80 text-green-100' },\r\n+        inactive: { text: 'Inativa', style: 'bg-red-500/80 text-red-100' },\r\n+        pending_approval: { text: 'Pendente', style: 'bg-yellow-500/80 text-yellow-100' },\r\n+        pending: { text: 'Pendente', style: 'bg-yellow-500/80 text-yellow-100' },\r\n+        cancelled: { text: 'Cancelada', style: 'bg-gray-600 text-gray-200' },\r\n+        // Um caso padrão para qualquer outro status que possa aparecer\r\n+        default: { text: 'Desconhecido', style: 'bg-gray-400 text-gray-800' }\r\n+    };\r\n+\r\n+    // Garante que um status nulo ou indefinido seja tratado como 'inativo'\r\n+    const currentStatus = status || 'inactive';\r\n+\r\n+    // Obtém a configuração para o status atual, ou usa o padrão se não for encontrado\r\n+    const config = statusConfig[currentStatus] || statusConfig.default;\r\n+\r\n+    return `<span class=\"px-2.5 py-1 rounded-full text-xs font-semibold ${config.style}\">${config.text}</span>`;\r\n+}\r\n+\r\n+// ------ Handlers ------\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        // LINHA ADICIONADA:\r\n+        email: document.getElementById('addCompanyEmailInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    // Removemos o campo 'senhaEmpresa' que não está a ser usado no backend\r\n+    // delete payload.senhaEmpresa;\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+    const form = e.target;\r\n+    const submitButton = form.querySelector('button[type=\"submit\"]');\r\n+    const companyId = form.dataset.companyId;\r\n+\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    const isAdmin = form.dataset.isAdmin === 'true';\r\n+\r\n+    // (O resto da extração de dados do formulário continua igual)\r\n+    const username = document.getElementById('addUsernameInput').value.trim();\r\n+    const email = document.getElementById('addUserEmailInput').value.trim();\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const role = document.getElementById('addUserRoleSelect').value;\r\n+\r\n+    if (!username || !email || !password || !role) {\r\n+        return showToast('Por favor, preencha todos os campos.', 'error');\r\n+    }\r\n+\r\n+    showLoader();\r\n+    if (submitButton) submitButton.disabled = true;\r\n+\r\n+    try {\r\n+        await api.registerUser(username, password, email, role, companyId);\r\n+        showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n+\r\n+        // --- INÍCIO DA MODIFICAÇÃO ---\r\n+\r\n+        if (!isAdmin) {\r\n+            // Caso 1: Se for o proprietário a adicionar, atualiza o modal de gestão.\r\n+            await openManageUsersModal({ _id: companyId });\r\n+        } else {\r\n+            // Caso 2 (NOVO): Se for o admin, busca os dados atualizados e reabre o modal de detalhes.\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+        }\r\n+\r\n+        // --- FIM DA MODIFICAÇÃO ---\r\n+\r\n+        closeAddUserModal();\r\n+        form.reset();\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+        if (submitButton) submitButton.disabled = false;\r\n+    }\r\n+}\r\n+\r\n+// --- Funções para a Gestão de Anúncios ---\r\n+\r\n+/**\r\n+ * Busca todos os anúncios da API e os exibe na lista.\r\n+ */\r\n+async function renderAnnouncements() {\r\n+    // 1. Verifica se a função já está em execução. Se estiver, para aqui.\r\n+    if (isRenderingAnnouncements) {\r\n+        return;\r\n+    }\r\n+\r\n+    // 2. Sinaliza que a renderização começou.\r\n+    isRenderingAnnouncements = true;\r\n+    showLoader();\r\n+    announcementsList.innerHTML = ''; // Limpa a lista antiga\r\n+\r\n+    try {\r\n+        const announcements = await api.getAllAnnouncements();\r\n+        if (announcements.length === 0) {\r\n+            announcementsList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum anúncio criado ainda.</p>';\r\n+        } else {\r\n+            announcements.forEach(ann => {\r\n+                const statusClass = ann.isActive ? 'bg-green-500' : 'bg-gray-500';\r\n+                const statusText = ann.isActive ? 'Ativo' : 'Inativo';\r\n+\r\n+                announcementsList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-4 flex justify-between items-center\">\r\n+                        <div>\r\n+                            <p class=\"text-white\">${ann.message}</p>\r\n+                            <p class=\"text-xs text-gray-400\">${ann.link || 'Sem link'}</p>\r\n+                        </div>\r\n+                        <div class=\"flex items-center space-x-3\">\r\n+                            <span class=\"text-xs font-bold text-white px-2 py-1 rounded-full ${statusClass}\">${statusText}</span>\r\n+                            <button class=\"edit-announcement-btn text-blue-400 hover:text-blue-300\" data-id=\"${ann._id}\"><i class=\"fas fa-edit\"></i></button>\r\n+                            <button class=\"delete-announcement-btn text-red-400 hover:text-red-300\" data-id=\"${ann._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        isRenderingAnnouncements = false;\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de anúncios, seja para criar um novo ou editar um existente.\r\n+ * @param {object | null} announcement - O objeto do anúncio para editar, ou null para criar.\r\n+ */\r\n+function openAnnouncementModal(announcement = null) {\r\n+    announcementForm.reset(); // Limpa o formulário\r\n+\r\n+    if (announcement) {\r\n+        // Modo Edição: Preenche o formulário com os dados existentes\r\n+        announcementModalTitle.textContent = 'Editar Anúncio';\r\n+        document.getElementById('announcementId').value = announcement._id;\r\n+        document.getElementById('announcementMessageInput').value = announcement.message;\r\n+        document.getElementById('announcementLink').value = announcement.link;\r\n+        document.getElementById('announcementIsActive').checked = announcement.isActive;\r\n+    } else {\r\n+        // Modo Criação: Deixa o formulário pronto para um novo anúncio\r\n+        announcementModalTitle.textContent = 'Novo Anúncio';\r\n+        document.getElementById('announcementId').value = '';\r\n+    }\r\n+\r\n+    announcementModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de anúncio (criação ou edição).\r\n+ */\r\n+async function handleAnnouncementFormSubmit(e) {\r\n+    e.preventDefault();\r\n+    const id = document.getElementById('announcementId').value;\r\n+    const message = document.getElementById('announcementMessageInput').value;\r\n+    const link = document.getElementById('announcementLink').value;\r\n+    const isActive = document.getElementById('announcementIsActive').checked;\r\n+    const payload = { message, link, isActive };\r\n+    showLoader();\r\n+    try {\r\n+        if (id) {\r\n+            // Se tem um ID, é uma atualização\r\n+            await api.updateAnnouncement(id, payload);\r\n+            showToast('Anúncio atualizado com sucesso!', 'success');\r\n+        } else {\r\n+            // Se não tem ID, é uma criação\r\n+            await api.createAnnouncement(payload);\r\n+            showToast('Anúncio criado com sucesso!', 'success');\r\n+        }\r\n+        if (announcementModal) {\r\n+            announcementModal.classList.add('hidden');\r\n+        }\r\n+\r\n+        await renderAnnouncements(); // Atualiza a lista\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a estrutura da vista de Configurações e busca os templates de e-mail.\r\n+ */\r\n+function renderSettingsView() {\r\n+    settingsView.innerHTML = `\r\n+        <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg flex space-x-6 h-full\">\r\n+            <div class=\"w-1/3 border-r border-gray-700 pr-6\">\r\n+                <h3 class=\"text-xl font-semibold text-gray-100 mb-4\">Templates de E-mail</h3>\r\n+                <div id=\"emailTemplatesList\" class=\"space-y-2\">\r\n+                    <p class=\"text-gray-400\">A carregar...</p>\r\n+                </div>\r\n+            </div>\r\n+            <div id=\"emailEditorContainer\" class=\"w-2/3 opacity-50 pointer-events-none\">\r\n+                <h4 id=\"editingTemplateName\" class=\"text-lg font-bold text-indigo-400 mb-4\">Selecione um template para editar</h4>\r\n+                <div class=\"space-y-4\">\r\n+                    <div>\r\n+                        <label for=\"templateSubject\" class=\"block text-sm font-medium text-gray-300\">Assunto</label>\r\n+                        <input type=\"text\" id=\"templateSubject\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white\">\r\n+                    </div>\r\n+                    <div>\r\n+                        <label for=\"templateBody\" class=\"block text-sm font-medium text-gray-300\">Corpo do E-mail</label>\r\n+                        <textarea id=\"templateBody\" rows=\"12\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white font-mono text-sm\"></textarea>\r\n+                        <p class=\"text-xs text-gray-400 mt-2\">Use placeholders como {{resetLink}}, {{userName}}, etc. para inserir dados dinâmicos.</p>\r\n+                    </div>\r\n+                    <div class=\"flex justify-end\">\r\n+                        <button id=\"saveEmailTemplateBtn\" class=\"bg-green-600 text-white py-2 px-5 rounded-md hover:bg-green-700\">Salvar Alterações</button>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+\r\n+    // Busca os dados e adiciona os event listeners\r\n+    fetchAndSetupEmailEditor();\r\n+}\r\n+\r\n+/**\r\n+ * Busca os templates e configura os eventos do editor.\r\n+ */\r\n+async function fetchAndSetupEmailEditor() {\r\n+    const templatesListDiv = document.getElementById('emailTemplatesList');\r\n+    const editorContainer = document.getElementById('emailEditorContainer');\r\n+    const saveBtn = document.getElementById('saveEmailTemplateBtn');\r\n+    \r\n+    try {\r\n+        const templates = await api.getEmailTemplates();\r\n+        templatesListDiv.innerHTML = templates.map(t =>\r\n+            `<button class=\"email-template-item text-left w-full p-3 rounded-md hover:bg-indigo-600 focus:outline-none focus:bg-indigo-600\" data-id=\"${t._id}\">\r\n+                <span class=\"font-semibold text-white\">${t.name}</span>\r\n+                <span class=\"block text-xs text-gray-400 truncate\">${t.subject}</span>\r\n+            </button>`\r\n+        ).join('');\r\n+\r\n+        // Adiciona evento de clique a cada item da lista\r\n+        document.querySelectorAll('.email-template-item').forEach(item => {\r\n+            item.addEventListener('click', async (e) => {\r\n+                const target = e.currentTarget;\r\n+                currentEditingTemplateId = target.dataset.id;\r\n+                \r\n+                // Remove o destaque de outros itens e destaca o atual\r\n+                document.querySelectorAll('.email-template-item').forEach(i => i.classList.remove('bg-indigo-600'));\r\n+                target.classList.add('bg-indigo-600');\r\n+                \r\n+                showLoader();\r\n+                try {\r\n+                    const fullTemplate = await api.apiCall(`/api/admin/email-templates/${currentEditingTemplateId}`);\r\n+                    document.getElementById('editingTemplateName').textContent = `A editar: ${fullTemplate.name}`;\r\n+                    document.getElementById('templateSubject').value = fullTemplate.subject;\r\n+                    document.getElementById('templateBody').value = fullTemplate.body;\r\n+                    editorContainer.classList.remove('opacity-50', 'pointer-events-none');\r\n+                } catch (error) {\r\n+                    showToast('Erro ao carregar detalhes do template.', 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        templatesListDiv.innerHTML = '<p class=\"text-red-400\">Erro ao carregar templates.</p>';\r\n+    }\r\n+\r\n+    // Evento para salvar o template\r\n+    saveBtn.addEventListener('click', async () => {\r\n+        if (!currentEditingTemplateId) return;\r\n+        \r\n+        const subject = document.getElementById('templateSubject').value;\r\n+        const body = document.getElementById('templateBody').value;\r\n+        \r\n+        showLoader();\r\n+        try {\r\n+            await api.updateEmailTemplate(currentEditingTemplateId, { subject, body });\r\n+            showToast('Template salvo com sucesso!', 'success');\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar o template.', 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// =================================================================================\r\n+// =================================================================================\r\n+// EVENT LISTENERS\r\n+// =================================================================================\r\n+// =================================================================================\r\n+\r\n+if (viewSubscriptionsTab) viewSubscriptionsTab.addEventListener('click', () => switchAdminView('subscriptions'));\r\n+\r\n+// --- DashBoard ---\r\n+if (viewDashboardTab) viewDashboardTab.addEventListener('click', () => switchAdminView('dashboard'));\r\n+\r\n+\r\n+if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n+if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n+// Abas\r\n+if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n+if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n+\r\n+if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+if (closeCompanyModal) {\r\n+    closeCompanyModal.addEventListener('click', () => {\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        companyDetailsModal.style.display = 'none'; // Adicione esta linha\r\n+    });\r\n+}\r\n+if (addUserBtn) addUserBtn.addEventListener('click', () => openAddUserModal(selectedCompanyForAdmin._id, true));\r\n+if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+\r\n+// Botões do modal de anúncios\r\n+if (openAnnouncementModalBtn) {\r\n+    openAnnouncementModalBtn.addEventListener('click', () => openAnnouncementModal());\r\n+}\r\n+\r\n+if (announcementForm) {\r\n+    announcementForm.addEventListener('submit', handleAnnouncementFormSubmit);\r\n+}\r\n+\r\n+if (cancelAnnouncementBtn) {\r\n+    cancelAnnouncementBtn.addEventListener('click', () => {\r\n+        if (announcementModal) {\r\n+            announcementModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Eventos na lista de anúncios (para os botões de editar e apagar)\r\n+if (announcementsList) {\r\n+    announcementsList.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-announcement-btn');\r\n+        const deleteBtn = e.target.closest('.delete-announcement-btn');\r\n+\r\n+        if (editBtn) {\r\n+            showLoader();\r\n+            try {\r\n+                const allAnnouncements = await api.getAllAnnouncements();\r\n+                const annToEdit = allAnnouncements.find(a => a._id === editBtn.dataset.id);\r\n+                if (annToEdit) openAnnouncementModal(annToEdit);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            if (confirm('Tem a certeza que deseja apagar este anúncio?')) {\r\n+                showLoader();\r\n+                try {\r\n+                    await api.deleteAnnouncement(deleteBtn.dataset.id);\r\n+                    showToast('Anúncio apagado com sucesso.', 'success');\r\n+                    await renderAnnouncements();\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n"
                },
                {
                    "date": 1754144956923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1118,1101 +1118,10 @@\n // EVENT LISTENERS\r\n // =================================================================================\r\n // =================================================================================\r\n \r\n-if (viewSubscriptionsTab) viewSubscriptionsTab.addEventListener('click', () => switchAdminView('subscriptions'));\r\n+if (viewSettingsTab) viewSettingsTab.addEventListener('click', () => switchAdminView('settings'));\r\n \r\n-// --- DashBoard ---\r\n-if (viewDashboardTab) viewDashboardTab.addEventListener('click', () => switchAdminView('dashboard'));\r\n-\r\n-\r\n-if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n-if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n-// Abas\r\n-if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n-if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n-\r\n-if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-if (closeCompanyModal) {\r\n-    closeCompanyModal.addEventListener('click', () => {\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        companyDetailsModal.style.display = 'none'; // Adicione esta linha\r\n-    });\r\n-}\r\n-if (addUserBtn) addUserBtn.addEventListener('click', () => openAddUserModal(selectedCompanyForAdmin._id, true));\r\n-if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-\r\n-// Botões do modal de anúncios\r\n-if (openAnnouncementModalBtn) {\r\n-    openAnnouncementModalBtn.addEventListener('click', () => openAnnouncementModal());\r\n-}\r\n-\r\n-if (announcementForm) {\r\n-    announcementForm.addEventListener('submit', handleAnnouncementFormSubmit);\r\n-}\r\n-\r\n-if (cancelAnnouncementBtn) {\r\n-    cancelAnnouncementBtn.addEventListener('click', () => {\r\n-        if (announcementModal) {\r\n-            announcementModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Eventos na lista de anúncios (para os botões de editar e apagar)\r\n-if (announcementsList) {\r\n-    announcementsList.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-announcement-btn');\r\n-        const deleteBtn = e.target.closest('.delete-announcement-btn');\r\n-\r\n-        if (editBtn) {\r\n-            showLoader();\r\n-            try {\r\n-                const allAnnouncements = await api.getAllAnnouncements();\r\n-                const annToEdit = allAnnouncements.find(a => a._id === editBtn.dataset.id);\r\n-                if (annToEdit) openAnnouncementModal(annToEdit);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            if (confirm('Tem a certeza que deseja apagar este anúncio?')) {\r\n-                showLoader();\r\n-                try {\r\n-                    await api.deleteAnnouncement(deleteBtn.dataset.id);\r\n-                    showToast('Anúncio apagado com sucesso.', 'success');\r\n-                    await renderAnnouncements();\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-// D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n-\r\n-\r\n-// Variáveis de estado e elementos do DOM para o painel de admin\r\n-let selectedCompanyForAdmin = null;\r\n-let isRenderingAnnouncements = false;\r\n-let adminImpersonationCallback = null;\r\n-let newCompaniesChart = null;\r\n-let allSubscriptionsData = [];\r\n-\r\n-const viewSubscriptionsTab = document.getElementById('viewSubscriptionsTab');\r\n-const subscriptionsView = document.getElementById('subscriptionsView');\r\n-\r\n-const viewDashboardTab = document.getElementById('viewDashboardTab');\r\n-const adminDashboardView = document.getElementById('adminDashboardView');\r\n-\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-\r\n-// Elementos das novas abas\r\n-const viewCompaniesTab = document.getElementById('viewCompaniesTab');\r\n-const viewAnnouncementsTab = document.getElementById('viewAnnouncementsTab');\r\n-const companiesView = document.getElementById('companiesView');\r\n-const announcementsView = document.getElementById('announcementsView');\r\n-const adminTabButtons = document.querySelectorAll('.admin-tab-btn');\r\n-\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-\r\n-const openAnnouncementModalBtn = document.getElementById('openAnnouncementModalBtn');\r\n-const announcementModal = document.getElementById('announcementModal');\r\n-const announcementForm = document.getElementById('announcementForm');\r\n-const cancelAnnouncementBtn = document.getElementById('cancelAnnouncementBtn');\r\n-const announcementsList = document.getElementById('announcementsList');\r\n-\r\n-/**\r\n- * Alterna a visualização entre as abas do painel de admin.\r\n- * @param {string} viewToShow - O nome da aba para mostrar ('companies' ou 'announcements').\r\n- */\r\n-function switchAdminView(viewToShow) {\r\n-    // --- A CORREÇÃO ESTÁ AQUI ---\r\n-    // Este bloco no início da função é crucial. Ele garante que TODAS as\r\n-    // vistas são escondidas antes de qualquer outra ação.\r\n-    adminDashboardView.classList.add('hidden');\r\n-    companiesView.classList.add('hidden');\r\n-    subscriptionsView.classList.add('hidden'); // Esta linha era a que provavelmente faltava\r\n-    announcementsView.classList.add('hidden');\r\n-\r\n-    // Reseta o estilo de todos os botões das abas\r\n-    // (O seu código para resetar os botões continua aqui)\r\n-    adminTabButtons.forEach(btn => {\r\n-        btn.classList.remove('bg-indigo-600', 'text-white');\r\n-        btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-    });\r\n-\r\n-    // Agora, ativamos apenas a aba e a vista corretas\r\n-    if (viewToShow === 'dashboard') {\r\n-        adminDashboardView.classList.remove('hidden');\r\n-        viewDashboardTab.classList.add('bg-indigo-600', 'text-white');\r\n-        viewDashboardTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderAdminDashboard();\r\n-    } else if (viewToShow === 'companies') {\r\n-        companiesView.classList.remove('hidden');\r\n-        viewCompaniesTab.classList.add('bg-indigo-600', 'text-white');\r\n-        viewCompaniesTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderCompanyList();\r\n-    } else if (viewToShow === 'subscriptions') {\r\n-        subscriptionsView.classList.remove('hidden');\r\n-        viewSubscriptionsTab.classList.add('bg-indigo-600', 'text-white');\r\n-        viewSubscriptionsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderSubscriptionsView();\r\n-    } else if (viewToShow === 'announcements') {\r\n-        announcementsView.classList.remove('hidden');\r\n-        viewAnnouncementsTab.classList.add('bg-indigo-600', 'text-white');\r\n-        viewAnnouncementsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderAnnouncements();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função principal que inicializa o painel de admin,\r\n- * renderiza a lista de empresas e configura os eventos.\r\n- */\r\n-export async function showAdminDashboard(impersonationCallback) {\r\n-    adminImpersonationCallback = impersonationCallback;\r\n-\r\n-    // --- NOVA ABORDAGEM DIRETA ---\r\n-    const adminPanel = document.getElementById('adminDashboardScreen');\r\n-    const mainPanel = document.getElementById('mainAppContent');\r\n-    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-\r\n-    // Escondemos explicitamente a aplicação principal e o seu botão flutuante\r\n-    if (mainPanel) {\r\n-        mainPanel.style.display = 'none';\r\n-    }\r\n-    if (openAddBillModalBtn) {\r\n-        openAddBillModalBtn.style.display = 'none';\r\n-    }\r\n-\r\n-    // E mostramos explicitamente o painel de admin usando 'flex' (devido ao nosso layout de CSS)\r\n-    if (adminPanel) {\r\n-        adminPanel.style.display = 'flex';\r\n-    }\r\n-    // --- FIM DA NOVA ABORDAGEM ---\r\n-\r\n-    switchAdminView('dashboard');\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // A chamada aqui agora é mais simples\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    // Listener para os botões \"Detalhes\"\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(company, users, masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para os botões \"Entrar\"\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-\r\n-            try {\r\n-                const { masterUsers } = await api.getCompanyDetails(companyId);\r\n-\r\n-                if (!masterUsers || masterUsers.length === 0) {\r\n-                    hideLoader();\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n-                }\r\n-\r\n-                let userToImpersonate = masterUsers.find(user => user.role === 'Proprietário');\r\n-\r\n-                if (!userToImpersonate) {\r\n-                    console.warn(`Nenhum 'Proprietário' encontrado para a empresa ${companyId}. A representar o primeiro utilizador da lista.`);\r\n-                    userToImpersonate = masterUsers[0];\r\n-                }\r\n-\r\n-                if (!userToImpersonate) {\r\n-                    hideLoader();\r\n-                    return showToast('Não foi encontrado um utilizador para representar.', 'error');\r\n-                }\r\n-                \r\n-                const userIdToImpersonate = userToImpersonate._id;\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                // Utiliza a variável do módulo que guardamos no início\r\n-                if (typeof adminImpersonationCallback === 'function') {\r\n-                    adminImpersonationCallback(data);\r\n-                } else {\r\n-                    console.error(\"A função de callback para representação não foi fornecida ao painel de admin.\");\r\n-                    hideLoader();\r\n-                }\r\n-\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n- */\r\n-function openCompanyDetailsModal(company, users, masterUsers) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (masterUsers && masterUsers.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        masterUsers.forEach(user => {\r\n-            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n-\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona os eventos DEPOIS de criar os botões\r\n-    addEventListenersToCompanyDetailsModal();\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-    companyDetailsModal.style.display = 'flex';\r\n-}\r\n-\r\n-function addEventListenersToCompanyDetailsModal() {\r\n-    // Evento para os seletores de cargo (role)\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                // Recarrega os dados do modal para garantir consistência\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Evento para os botões de remover utilizador\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.currentTarget.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                // Recarrega os dados do modal\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-export function openAddUserModal(companyId, isAdmin = false) {\r\n-    const addUserForm = document.getElementById('addUserForm');\r\n-    const addUserModal = document.getElementById('addUserModal');\r\n-    const addUserRoleSelect = document.getElementById('addUserRoleSelect');\r\n-\r\n-    let availableRoles;\r\n-    if (isAdmin) {\r\n-        availableRoles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-    } else {\r\n-        availableRoles = ['Gerente', 'Funcionário'];\r\n-    }\r\n-\r\n-    addUserRoleSelect.innerHTML = '';\r\n-    availableRoles.forEach(role => {\r\n-        const option = document.createElement('option');\r\n-        option.value = role;\r\n-        option.textContent = role;\r\n-        addUserRoleSelect.appendChild(option);\r\n-    });\r\n-\r\n-    if (addUserForm) {\r\n-        addUserForm.reset();\r\n-        addUserForm.dataset.companyId = companyId;\r\n-        addUserForm.dataset.isAdmin = isAdmin; // <<--- LINHA ADICIONADA: Guardamos o status aqui\r\n-    }\r\n-\r\n-    if (addUserModal) {\r\n-        addUserModal.classList.remove('hidden');\r\n-    }\r\n-    document.getElementById('addUsernameInput').focus();\r\n-}\r\n-\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre e preenche o modal de gestão de utilizadores para uma empresa específica.\r\n- * Busca os dados mais recentes da API e configura os eventos de interação.\r\n- * @param {object} company - O objeto da empresa cujos utilizadores serão geridos.\r\n- */\r\n-export async function openManageUsersModal(company) {\r\n-    // Validação inicial para garantir que recebemos a empresa correta\r\n-    if (!company || !company._id) {\r\n-        showToast('Erro: Não foi possível identificar a empresa para gerir os utilizadores.', 'error');\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader();\r\n-    const manageUsersModal = document.getElementById('manageUsersModal');\r\n-    const companyUsersList = document.getElementById('companyUsersList');\r\n-\r\n-    try {\r\n-        // 1. Busca sempre os dados mais recentes da API\r\n-        const { masterUsers } = await api.getCompanyDetails(company._id);\r\n-\r\n-        // 2. Limpa a lista de utilizadores anterior\r\n-        if (companyUsersList) {\r\n-            companyUsersList.innerHTML = '';\r\n-        } else {\r\n-            console.error(\"Elemento 'companyUsersList' não foi encontrado no HTML.\");\r\n-            hideLoader();\r\n-            return; // Interrompe a função se o elemento não existir\r\n-        }\r\n-\r\n-        // 3. Constrói o HTML da nova lista de utilizadores\r\n-        if (masterUsers && masterUsers.length > 0) {\r\n-            const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-            masterUsers.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-\r\n-                // Cria as opções do dropdown de cargos\r\n-                const roleOptions = assignableRoles.map(role =>\r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                // Se for proprietário, mostra texto; senão, mostra o dropdown.\r\n-                const roleHtml = isOwner\r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                // Se não for proprietário, mostra o botão de remover.\r\n-                const buttonHtml = isOwner\r\n-                    ? ''\r\n-                    : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`;\r\n-\r\n-                const userRowHtml = `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${buttonHtml}\r\n-                        </div>\r\n-                    </div>\r\n-                `;\r\n-                companyUsersList.insertAdjacentHTML('beforeend', userRowHtml);\r\n-            });\r\n-        } else {\r\n-            companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum usuário cadastrado para esta empresa.</p>';\r\n-        }\r\n-\r\n-        // 4. Adiciona os eventos aos novos elementos criados dinamicamente\r\n-\r\n-        // Evento para a mudança de cargo (role)\r\n-        companyUsersList.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-\r\n-                if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    await openManageUsersModal(company); // Recarrega o modal para reverter a mudança visual\r\n-                    return;\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    await api.updateUserRole(company._id, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    // Recarrega o modal para garantir que a interface está 100% sincronizada\r\n-                    await openManageUsersModal(company);\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        // Evento para o botão de remover utilizador\r\n-        companyUsersList.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                const userId = e.currentTarget.dataset.userId;\r\n-\r\n-                if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n-                    return;\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    await api.deleteUserFromCompany(company._id, userId);\r\n-                    showToast('Utilizador removido com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    // Recarrega sempre o modal para mostrar a lista atualizada\r\n-                    await openManageUsersModal(company);\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        // 5. Mostra o modal\r\n-        if (manageUsersModal) {\r\n-            manageUsersModal.classList.remove('hidden');\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Busca os dados da API e preenche o dashboard do admin.\r\n- */\r\n-async function renderAdminDashboard() {\r\n-    showLoader();\r\n-    try {\r\n-        const stats = await api.getAdminDashboardStats();\r\n-\r\n-        // Preenche os cartões (KPIs)\r\n-        document.getElementById('kpiTotalCompanies').textContent = stats.totalCompanies;\r\n-        document.getElementById('kpiTotalUsers').textContent = stats.totalUsers;\r\n-        document.getElementById('kpiActiveSubscriptions').textContent = stats.activeSubscriptions;\r\n-\r\n-        // Renderiza o gráfico\r\n-        renderNewCompaniesChart(stats.newCompaniesLast30Days);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de novas empresas.\r\n- * @param {Array} chartData - Os dados para o gráfico.\r\n- */\r\n-function renderNewCompaniesChart(chartData) {\r\n-    const canvas = document.getElementById('newCompaniesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    // Prepara os dados para o Chart.js\r\n-    const labels = chartData.map(item => new Date(item.date).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' }));\r\n-    const data = chartData.map(item => item.count);\r\n-\r\n-    // Destrói o gráfico anterior se ele já existir (importante ao trocar de abas)\r\n-    if (newCompaniesChart) {\r\n-        newCompaniesChart.destroy();\r\n-    }\r\n-\r\n-    newCompaniesChart = new Chart(ctx, {\r\n-        type: 'line', // Gráfico de linha\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Novas Empresas',\r\n-                data: data,\r\n-                backgroundColor: 'rgba(99, 102, 241, 0.2)',\r\n-                borderColor: 'rgba(99, 102, 241, 1)',\r\n-                borderWidth: 2,\r\n-                tension: 0.3, // Deixa a linha mais suave\r\n-                fill: true\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                y: { \r\n-                    beginAtZero: true, \r\n-                    ticks: { color: '#9ca3af', stepSize: 1 }, // Garante que a escala seja de 1 em 1\r\n-                    grid: { color: 'rgba(156, 163, 175, 0.1)' } \r\n-                },\r\n-                x: { \r\n-                    ticks: { color: '#9ca3af' }, \r\n-                    grid: { color: 'rgba(156, 163, 175, 0.1)' } \r\n-                }\r\n-            },\r\n-            plugins: { \r\n-                legend: { display: false } // Esconde a legenda, já que só temos uma linha\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-function renderSubscriptionsView() {\r\n-    subscriptionsView.innerHTML = `\r\n-        <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg\">\r\n-            <div class=\"flex justify-between items-center mb-4 flex-wrap gap-4\">\r\n-                <h2 class=\"text-xl font-semibold text-white\">Gestão de Assinaturas</h2>\r\n-                <div class=\"flex items-center space-x-4\">\r\n-                    <input type=\"text\" id=\"subscriptionSearchInput\" placeholder=\"Pesquisar por nome ou CNPJ...\" class=\"w-64 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-indigo-500\">\r\n-                    <div class=\"flex items-center space-x-1 bg-gray-900/50 p-1 rounded-md border border-gray-700\">\r\n-                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors active\" data-status=\"all\">Todos</button>\r\n-                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"active\">Ativas</button>\r\n-                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"inactive\">Inativas</button>\r\n-                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"pending_approval\">Pendentes</button>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-            <div id=\"subscriptionsTableContainer\" class=\"overflow-x-auto\">\r\n-                <p class=\"text-center text-gray-400 py-8\">A carregar dados...</p>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-    \r\n-    // Adiciona os event listeners para os filtros e a pesquisa\r\n-    document.getElementById('subscriptionSearchInput').addEventListener('input', handleSubscriptionFilter);\r\n-    document.querySelectorAll('.sub-filter-btn').forEach(btn => {\r\n-        btn.addEventListener('click', (e) => {\r\n-            document.querySelectorAll('.sub-filter-btn').forEach(b => b.classList.remove('active'));\r\n-            e.currentTarget.classList.add('active');\r\n-            handleSubscriptionFilter();\r\n-        });\r\n-    });\r\n-\r\n-    // Busca os dados da API\r\n-    fetchAndRenderSubscriptions();\r\n-}\r\n-\r\n-async function fetchAndRenderSubscriptions() {\r\n-    showLoader();\r\n-    const container = document.getElementById('subscriptionsTableContainer');\r\n-    try {\r\n-        // Busca os dados e guarda na variável global\r\n-        allSubscriptionsData = await api.getAdminSubscriptions();\r\n-        // Renderiza a tabela com todos os dados\r\n-        renderSubscriptionsTable(allSubscriptionsData);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        container.innerHTML = '<p class=\"text-red-400 text-center py-8\">Não foi possível carregar os dados das assinaturas.</p>';\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function handleSubscriptionFilter() {\r\n-    const searchTerm = document.getElementById('subscriptionSearchInput').value.toLowerCase();\r\n-    const activeStatus = document.querySelector('.sub-filter-btn.active').dataset.status;\r\n-\r\n-    const filteredData = allSubscriptionsData.filter(company => {\r\n-        const subStatus = company.subscription?.status || 'inactive';\r\n-        \r\n-        const matchesStatus = (activeStatus === 'all') || (subStatus === activeStatus);\r\n-        \r\n-        const matchesSearch = company.nomeEmpresa.toLowerCase().includes(searchTerm) ||\r\n-                              company.cnpj.replace(/\\D/g, '').includes(searchTerm.replace(/\\D/g, ''));\r\n-                              \r\n-        return matchesStatus && matchesSearch;\r\n-    });\r\n-\r\n-    renderSubscriptionsTable(filteredData);\r\n-}\r\n-\r\n-/**\r\n- * Renderiza a tabela HTML de assinaturas com base nos dados fornecidos.\r\n- * @param {Array} data - A lista de empresas com dados de assinatura para exibir.\r\n- */\r\n-function renderSubscriptionsTable(data) {\r\n-    const container = document.getElementById('subscriptionsTableContainer');\r\n-    if (data.length === 0) {\r\n-        container.innerHTML = '<p class=\"text-gray-400 text-center py-8\">Nenhuma assinatura encontrada para os filtros selecionados.</p>';\r\n-        return;\r\n-    }\r\n-\r\n-    const tableRows = data.map(company => {\r\n-        const sub = company.subscription || {};\r\n-        const endDate = sub.endDate ? new Date(sub.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-        \r\n-        return `\r\n-            <tr class=\"border-b border-gray-700 hover:bg-gray-700/50\">\r\n-                <td class=\"p-4\">${company.nomeEmpresa}</td>\r\n-                <td class=\"p-4 font-mono\">${formatCnpj(company.cnpj)}</td>\r\n-                <td class=\"p-4\">${getStatusBadge(sub.status)}</td>\r\n-                <td class=\"p-4\">${endDate}</td>\r\n-                <td class=\"p-4 font-mono text-xs\">${sub.mercadopagoPreapprovalId || 'N/A'}</td>\r\n-                <td class=\"p-4 text-right\">\r\n-                    <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                </td>\r\n-            </tr>\r\n-        `;\r\n-    }).join('');\r\n-\r\n-    container.innerHTML = `\r\n-        <table class=\"w-full text-sm text-left text-gray-300\">\r\n-            <thead class=\"text-xs text-gray-400 uppercase bg-gray-700\">\r\n-                <tr>\r\n-                    <th class=\"p-4\">Empresa</th>\r\n-                    <th class=\"p-4\">CNPJ</th>\r\n-                    <th class=\"p-4\">Status</th>\r\n-                    <th class=\"p-4\">Expira em</th>\r\n-                    <th class=\"p-4\">ID Mercado Pago</th>\r\n-                    <th class=\"p-4 text-right\">Ações</th>\r\n-                </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-                ${tableRows}\r\n-            </tbody>\r\n-        </table>\r\n-    `;\r\n-\r\n-    // --- CÓDIGO NOVO ADICIONADO AQUI ---\r\n-    // Após a tabela ser criada, adicionamos o event listener aos novos botões \"Detalhes\".\r\n-    container.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // Reutilizamos a lógica que já funciona para buscar os dados\r\n-                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-                // Reutilizamos a função que já abre o modal de detalhes\r\n-                openCompanyDetailsModal(company, users, masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Retorna uma badge de status colorida em HTML.\r\n- * @param {string} status - O status da assinatura.\r\n- */\r\n-function getStatusBadge(status) {\r\n-    // Mapeamento centralizado de status para aparência e texto.\r\n-    // Facilita a adição de novos status no futuro.\r\n-    const statusConfig = {\r\n-        active: { text: 'Ativa', style: 'bg-green-500/80 text-green-100' },\r\n-        inactive: { text: 'Inativa', style: 'bg-red-500/80 text-red-100' },\r\n-        pending_approval: { text: 'Pendente', style: 'bg-yellow-500/80 text-yellow-100' },\r\n-        pending: { text: 'Pendente', style: 'bg-yellow-500/80 text-yellow-100' },\r\n-        cancelled: { text: 'Cancelada', style: 'bg-gray-600 text-gray-200' },\r\n-        // Um caso padrão para qualquer outro status que possa aparecer\r\n-        default: { text: 'Desconhecido', style: 'bg-gray-400 text-gray-800' }\r\n-    };\r\n-\r\n-    // Garante que um status nulo ou indefinido seja tratado como 'inativo'\r\n-    const currentStatus = status || 'inactive';\r\n-\r\n-    // Obtém a configuração para o status atual, ou usa o padrão se não for encontrado\r\n-    const config = statusConfig[currentStatus] || statusConfig.default;\r\n-\r\n-    return `<span class=\"px-2.5 py-1 rounded-full text-xs font-semibold ${config.style}\">${config.text}</span>`;\r\n-}\r\n-\r\n-// ------ Handlers ------\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        // LINHA ADICIONADA:\r\n-        email: document.getElementById('addCompanyEmailInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    // Removemos o campo 'senhaEmpresa' que não está a ser usado no backend\r\n-    // delete payload.senhaEmpresa;\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-    const form = e.target;\r\n-    const submitButton = form.querySelector('button[type=\"submit\"]');\r\n-    const companyId = form.dataset.companyId;\r\n-\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    const isAdmin = form.dataset.isAdmin === 'true';\r\n-\r\n-    // (O resto da extração de dados do formulário continua igual)\r\n-    const username = document.getElementById('addUsernameInput').value.trim();\r\n-    const email = document.getElementById('addUserEmailInput').value.trim();\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const role = document.getElementById('addUserRoleSelect').value;\r\n-\r\n-    if (!username || !email || !password || !role) {\r\n-        return showToast('Por favor, preencha todos os campos.', 'error');\r\n-    }\r\n-\r\n-    showLoader();\r\n-    if (submitButton) submitButton.disabled = true;\r\n-\r\n-    try {\r\n-        await api.registerUser(username, password, email, role, companyId);\r\n-        showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n-\r\n-        // --- INÍCIO DA MODIFICAÇÃO ---\r\n-\r\n-        if (!isAdmin) {\r\n-            // Caso 1: Se for o proprietário a adicionar, atualiza o modal de gestão.\r\n-            await openManageUsersModal({ _id: companyId });\r\n-        } else {\r\n-            // Caso 2 (NOVO): Se for o admin, busca os dados atualizados e reabre o modal de detalhes.\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-        }\r\n-\r\n-        // --- FIM DA MODIFICAÇÃO ---\r\n-\r\n-        closeAddUserModal();\r\n-        form.reset();\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-        if (submitButton) submitButton.disabled = false;\r\n-    }\r\n-}\r\n-\r\n-// --- Funções para a Gestão de Anúncios ---\r\n-\r\n-/**\r\n- * Busca todos os anúncios da API e os exibe na lista.\r\n- */\r\n-async function renderAnnouncements() {\r\n-    // 1. Verifica se a função já está em execução. Se estiver, para aqui.\r\n-    if (isRenderingAnnouncements) {\r\n-        return;\r\n-    }\r\n-\r\n-    // 2. Sinaliza que a renderização começou.\r\n-    isRenderingAnnouncements = true;\r\n-    showLoader();\r\n-    announcementsList.innerHTML = ''; // Limpa a lista antiga\r\n-\r\n-    try {\r\n-        const announcements = await api.getAllAnnouncements();\r\n-        if (announcements.length === 0) {\r\n-            announcementsList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum anúncio criado ainda.</p>';\r\n-        } else {\r\n-            announcements.forEach(ann => {\r\n-                const statusClass = ann.isActive ? 'bg-green-500' : 'bg-gray-500';\r\n-                const statusText = ann.isActive ? 'Ativo' : 'Inativo';\r\n-\r\n-                announcementsList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-4 flex justify-between items-center\">\r\n-                        <div>\r\n-                            <p class=\"text-white\">${ann.message}</p>\r\n-                            <p class=\"text-xs text-gray-400\">${ann.link || 'Sem link'}</p>\r\n-                        </div>\r\n-                        <div class=\"flex items-center space-x-3\">\r\n-                            <span class=\"text-xs font-bold text-white px-2 py-1 rounded-full ${statusClass}\">${statusText}</span>\r\n-                            <button class=\"edit-announcement-btn text-blue-400 hover:text-blue-300\" data-id=\"${ann._id}\"><i class=\"fas fa-edit\"></i></button>\r\n-                            <button class=\"delete-announcement-btn text-red-400 hover:text-red-300\" data-id=\"${ann._id}\"><i class=\"fas fa-trash\"></i></button>\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        isRenderingAnnouncements = false;\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de anúncios, seja para criar um novo ou editar um existente.\r\n- * @param {object | null} announcement - O objeto do anúncio para editar, ou null para criar.\r\n- */\r\n-function openAnnouncementModal(announcement = null) {\r\n-    announcementForm.reset(); // Limpa o formulário\r\n-\r\n-    if (announcement) {\r\n-        // Modo Edição: Preenche o formulário com os dados existentes\r\n-        announcementModalTitle.textContent = 'Editar Anúncio';\r\n-        document.getElementById('announcementId').value = announcement._id;\r\n-        document.getElementById('announcementMessageInput').value = announcement.message;\r\n-        document.getElementById('announcementLink').value = announcement.link;\r\n-        document.getElementById('announcementIsActive').checked = announcement.isActive;\r\n-    } else {\r\n-        // Modo Criação: Deixa o formulário pronto para um novo anúncio\r\n-        announcementModalTitle.textContent = 'Novo Anúncio';\r\n-        document.getElementById('announcementId').value = '';\r\n-    }\r\n-\r\n-    announcementModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de anúncio (criação ou edição).\r\n- */\r\n-async function handleAnnouncementFormSubmit(e) {\r\n-    e.preventDefault();\r\n-    const id = document.getElementById('announcementId').value;\r\n-    const message = document.getElementById('announcementMessageInput').value;\r\n-    const link = document.getElementById('announcementLink').value;\r\n-    const isActive = document.getElementById('announcementIsActive').checked;\r\n-    const payload = { message, link, isActive };\r\n-    showLoader();\r\n-    try {\r\n-        if (id) {\r\n-            // Se tem um ID, é uma atualização\r\n-            await api.updateAnnouncement(id, payload);\r\n-            showToast('Anúncio atualizado com sucesso!', 'success');\r\n-        } else {\r\n-            // Se não tem ID, é uma criação\r\n-            await api.createAnnouncement(payload);\r\n-            showToast('Anúncio criado com sucesso!', 'success');\r\n-        }\r\n-        if (announcementModal) {\r\n-            announcementModal.classList.add('hidden');\r\n-        }\r\n-\r\n-        await renderAnnouncements(); // Atualiza a lista\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-// =================================================================================\r\n-// =================================================================================\r\n-// EVENT LISTENERS\r\n-// =================================================================================\r\n-// =================================================================================\r\n-\r\n if (viewSubscriptionsTab) viewSubscriptionsTab.addEventListener('click', () => switchAdminView('subscriptions'));\r\n \r\n // --- DashBoard ---\r\n if (viewDashboardTab) viewDashboardTab.addEventListener('click', () => switchAdminView('dashboard'));\r\n"
                },
                {
                    "date": 1754145375207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1076,13 +1076,17 @@\n                 target.classList.add('bg-indigo-600');\r\n                 \r\n                 showLoader();\r\n                 try {\r\n-                    const fullTemplate = await api.apiCall(`/api/admin/email-templates/${currentEditingTemplateId}`);\r\n+                    // --- AQUI ESTÁ A CORREÇÃO ---\r\n+                    // Usamos a nova função de api.js para buscar o template completo\r\n+                    const fullTemplate = await api.getEmailTemplateById(currentEditingTemplateId);\r\n+                    \r\n                     document.getElementById('editingTemplateName').textContent = `A editar: ${fullTemplate.name}`;\r\n                     document.getElementById('templateSubject').value = fullTemplate.subject;\r\n                     document.getElementById('templateBody').value = fullTemplate.body;\r\n                     editorContainer.classList.remove('opacity-50', 'pointer-events-none');\r\n+\r\n                 } catch (error) {\r\n                     showToast('Erro ao carregar detalhes do template.', 'error');\r\n                 } finally {\r\n                     hideLoader();\r\n@@ -1093,9 +1097,9 @@\n     } catch (error) {\r\n         templatesListDiv.innerHTML = '<p class=\"text-red-400\">Erro ao carregar templates.</p>';\r\n     }\r\n \r\n-    // Evento para salvar o template\r\n+    // Evento para salvar o template (inalterado)\r\n     saveBtn.addEventListener('click', async () => {\r\n         if (!currentEditingTemplateId) return;\r\n         \r\n         const subject = document.getElementById('templateSubject').value;\r\n"
                },
                {
                    "date": 1754146070698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1017,15 +1017,16 @@\n  */\r\n function renderSettingsView() {\r\n     settingsView.innerHTML = `\r\n         <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg flex space-x-6 h-full\">\r\n-            <div class=\"w-1/3 border-r border-gray-700 pr-6\">\r\n+            <div class=\"w-1/4 border-r border-gray-700 pr-6\">\r\n                 <h3 class=\"text-xl font-semibold text-gray-100 mb-4\">Templates de E-mail</h3>\r\n                 <div id=\"emailTemplatesList\" class=\"space-y-2\">\r\n                     <p class=\"text-gray-400\">A carregar...</p>\r\n                 </div>\r\n             </div>\r\n-            <div id=\"emailEditorContainer\" class=\"w-2/3 opacity-50 pointer-events-none\">\r\n+            \r\n+            <div id=\"emailEditorContainer\" class=\"w-5/12 opacity-50 pointer-events-none\">\r\n                 <h4 id=\"editingTemplateName\" class=\"text-lg font-bold text-indigo-400 mb-4\">Selecione um template para editar</h4>\r\n                 <div class=\"space-y-4\">\r\n                     <div>\r\n                         <label for=\"templateSubject\" class=\"block text-sm font-medium text-gray-300\">Assunto</label>\r\n@@ -1033,15 +1034,22 @@\n                     </div>\r\n                     <div>\r\n                         <label for=\"templateBody\" class=\"block text-sm font-medium text-gray-300\">Corpo do E-mail</label>\r\n                         <textarea id=\"templateBody\" rows=\"12\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white font-mono text-sm\"></textarea>\r\n-                        <p class=\"text-xs text-gray-400 mt-2\">Use placeholders como {{resetLink}}, {{userName}}, etc. para inserir dados dinâmicos.</p>\r\n+                        <p class=\"text-xs text-gray-400 mt-2\">Use placeholders como {{resetLink}}, {{userName}}, etc.</p>\r\n                     </div>\r\n                     <div class=\"flex justify-end\">\r\n                         <button id=\"saveEmailTemplateBtn\" class=\"bg-green-600 text-white py-2 px-5 rounded-md hover:bg-green-700\">Salvar Alterações</button>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n+\r\n+            <div class=\"w-1/3\">\r\n+                 <h4 class=\"text-lg font-bold text-gray-400 mb-4\">Pré-visualização</h4>\r\n+                 <div class=\"border border-gray-700 rounded-md h-[85%] bg-white\">\r\n+                    <iframe id=\"emailPreviewFrame\" class=\"w-full h-full\"></iframe>\r\n+                 </div>\r\n+            </div>\r\n         </div>\r\n     `;\r\n \r\n     // Busca os dados e adiciona os event listeners\r\n"
                },
                {
                    "date": 1754146091152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1062,12 +1062,24 @@\n async function fetchAndSetupEmailEditor() {\r\n     const templatesListDiv = document.getElementById('emailTemplatesList');\r\n     const editorContainer = document.getElementById('emailEditorContainer');\r\n     const saveBtn = document.getElementById('saveEmailTemplateBtn');\r\n-    \r\n+    const templateBodyTextarea = document.getElementById('templateBody');\r\n+    const previewFrame = document.getElementById('emailPreviewFrame');\r\n+\r\n+    // Função auxiliar para atualizar o iframe\r\n+    const updateEmailPreview = (htmlContent) => {\r\n+        if (!previewFrame) return;\r\n+        const previewDoc = previewFrame.contentWindow.document;\r\n+        previewDoc.open();\r\n+        previewDoc.write(htmlContent);\r\n+        previewDoc.close();\r\n+    };\r\n+\r\n     try {\r\n         const templates = await api.getEmailTemplates();\r\n         templatesListDiv.innerHTML = templates.map(t =>\r\n+            // ... (o HTML para os botões da lista continua o mesmo)\r\n             `<button class=\"email-template-item text-left w-full p-3 rounded-md hover:bg-indigo-600 focus:outline-none focus:bg-indigo-600\" data-id=\"${t._id}\">\r\n                 <span class=\"font-semibold text-white\">${t.name}</span>\r\n                 <span class=\"block text-xs text-gray-400 truncate\">${t.subject}</span>\r\n             </button>`\r\n@@ -1078,23 +1090,23 @@\n             item.addEventListener('click', async (e) => {\r\n                 const target = e.currentTarget;\r\n                 currentEditingTemplateId = target.dataset.id;\r\n                 \r\n-                // Remove o destaque de outros itens e destaca o atual\r\n                 document.querySelectorAll('.email-template-item').forEach(i => i.classList.remove('bg-indigo-600'));\r\n                 target.classList.add('bg-indigo-600');\r\n                 \r\n                 showLoader();\r\n                 try {\r\n-                    // --- AQUI ESTÁ A CORREÇÃO ---\r\n-                    // Usamos a nova função de api.js para buscar o template completo\r\n                     const fullTemplate = await api.getEmailTemplateById(currentEditingTemplateId);\r\n                     \r\n                     document.getElementById('editingTemplateName').textContent = `A editar: ${fullTemplate.name}`;\r\n                     document.getElementById('templateSubject').value = fullTemplate.subject;\r\n-                    document.getElementById('templateBody').value = fullTemplate.body;\r\n+                    templateBodyTextarea.value = fullTemplate.body;\r\n+                    \r\n+                    // ATUALIZAÇÃO INICIAL DA PRÉ-VISUALIZAÇÃO\r\n+                    updateEmailPreview(fullTemplate.body);\r\n+\r\n                     editorContainer.classList.remove('opacity-50', 'pointer-events-none');\r\n-\r\n                 } catch (error) {\r\n                     showToast('Erro ao carregar detalhes do template.', 'error');\r\n                 } finally {\r\n                     hideLoader();\r\n@@ -1105,14 +1117,18 @@\n     } catch (error) {\r\n         templatesListDiv.innerHTML = '<p class=\"text-red-400\">Erro ao carregar templates.</p>';\r\n     }\r\n \r\n+    // NOVO EVENTO: Atualiza a pré-visualização em tempo real enquanto digita\r\n+    templateBodyTextarea.addEventListener('input', (e) => {\r\n+        updateEmailPreview(e.target.value);\r\n+    });\r\n+\r\n     // Evento para salvar o template (inalterado)\r\n     saveBtn.addEventListener('click', async () => {\r\n         if (!currentEditingTemplateId) return;\r\n-        \r\n         const subject = document.getElementById('templateSubject').value;\r\n-        const body = document.getElementById('templateBody').value;\r\n+        const body = templateBodyTextarea.value;\r\n         \r\n         showLoader();\r\n         try {\r\n             await api.updateEmailTemplate(currentEditingTemplateId, { subject, body });\r\n"
                },
                {
                    "date": 1754163222041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,18 @@\n const announcementForm = document.getElementById('announcementForm');\r\n const cancelAnnouncementBtn = document.getElementById('cancelAnnouncementBtn');\r\n const announcementsList = document.getElementById('announcementsList');\r\n \r\n+function debounce(func, delay = 300) {\r\n+    let timeout;\r\n+    return (...args) => {\r\n+        clearTimeout(timeout);\r\n+        timeout = setTimeout(() => {\r\n+            func.apply(this, args);\r\n+        }, delay);\r\n+    };\r\n+}\r\n+\r\n /**\r\n  * Alterna a visualização entre as abas do painel de admin.\r\n  * @param {string} viewToShow - O nome da aba para mostrar ('companies' ou 'announcements').\r\n  */\r\n"
                },
                {
                    "date": 1754163441377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1342 @@\n+// D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n+import * as api from './api.js';\r\n+import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n+\r\n+\r\n+// Variáveis de estado e elementos do DOM para o painel de admin\r\n+let selectedCompanyForAdmin = null;\r\n+let isRenderingAnnouncements = false;\r\n+let adminImpersonationCallback = null;\r\n+let newCompaniesChart = null;\r\n+let allSubscriptionsData = [];\r\n+let currentEditingTemplateId = null;\r\n+\r\n+const viewSettingsTab = document.getElementById('viewSettingsTab');\r\n+const settingsView = document.getElementById('settingsView');\r\n+\r\n+const viewSubscriptionsTab = document.getElementById('viewSubscriptionsTab');\r\n+const subscriptionsView = document.getElementById('subscriptionsView');\r\n+\r\n+const viewDashboardTab = document.getElementById('viewDashboardTab');\r\n+const adminDashboardView = document.getElementById('adminDashboardView');\r\n+\r\n+const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n+const companyListDiv = document.getElementById('companyList');\r\n+const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n+const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+\r\n+// Elementos das novas abas\r\n+const viewCompaniesTab = document.getElementById('viewCompaniesTab');\r\n+const viewAnnouncementsTab = document.getElementById('viewAnnouncementsTab');\r\n+const companiesView = document.getElementById('companiesView');\r\n+const announcementsView = document.getElementById('announcementsView');\r\n+const adminTabButtons = document.querySelectorAll('.admin-tab-btn');\r\n+\r\n+const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n+const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n+const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n+const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n+const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n+const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n+const addUserBtn = document.getElementById('addUserBtn');\r\n+const addUserForm = document.getElementById('addUserForm');\r\n+const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n+const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n+const addCompanyForm = document.getElementById('addCompanyForm');\r\n+const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n+const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n+const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n+\r\n+const openAnnouncementModalBtn = document.getElementById('openAnnouncementModalBtn');\r\n+const announcementModal = document.getElementById('announcementModal');\r\n+const announcementForm = document.getElementById('announcementForm');\r\n+const cancelAnnouncementBtn = document.getElementById('cancelAnnouncementBtn');\r\n+const announcementsList = document.getElementById('announcementsList');\r\n+\r\n+function debounce(func, delay = 300) {\r\n+    let timeout;\r\n+    return (...args) => {\r\n+        clearTimeout(timeout);\r\n+        timeout = setTimeout(() => {\r\n+            func.apply(this, args);\r\n+        }, delay);\r\n+    };\r\n+}\r\n+\r\n+/**\r\n+ * Alterna a visualização entre as abas do painel de admin.\r\n+ * @param {string} viewToShow - O nome da aba para mostrar ('companies' ou 'announcements').\r\n+ */\r\n+function switchAdminView(viewToShow) {\r\n+    // --- A CORREÇÃO ESTÁ AQUI ---\r\n+    // Este bloco no início da função é crucial. Ele garante que TODAS as\r\n+    // vistas são escondidas antes de qualquer outra ação.\r\n+    adminDashboardView.classList.add('hidden');\r\n+    companiesView.classList.add('hidden');\r\n+    subscriptionsView.classList.add('hidden'); // Esta linha era a que provavelmente faltava\r\n+    announcementsView.classList.add('hidden');\r\n+    settingsView.classList.add('hidden');\r\n+\r\n+    // Reseta o estilo de todos os botões das abas\r\n+    // (O seu código para resetar os botões continua aqui)\r\n+    adminTabButtons.forEach(btn => {\r\n+        btn.classList.remove('bg-indigo-600', 'text-white');\r\n+        btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n+    });\r\n+\r\n+    // Agora, ativamos apenas a aba e a vista corretas\r\n+    if (viewToShow === 'dashboard') {\r\n+        adminDashboardView.classList.remove('hidden');\r\n+        viewDashboardTab.classList.add('bg-indigo-600', 'text-white');\r\n+        viewDashboardTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderAdminDashboard();\r\n+    } else if (viewToShow === 'companies') {\r\n+        companiesView.classList.remove('hidden');\r\n+        viewCompaniesTab.classList.add('bg-indigo-600', 'text-white');\r\n+        viewCompaniesTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+    renderCompaniesView(); // Altere esta linha\r\n+    } else if (viewToShow === 'subscriptions') {\r\n+        subscriptionsView.classList.remove('hidden');\r\n+        viewSubscriptionsTab.classList.add('bg-indigo-600', 'text-white');\r\n+        viewSubscriptionsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderSubscriptionsView();\r\n+    } else if (viewToShow === 'announcements') {\r\n+        announcementsView.classList.remove('hidden');\r\n+        viewAnnouncementsTab.classList.add('bg-indigo-600', 'text-white');\r\n+        viewAnnouncementsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderAnnouncements();\r\n+    }else if (viewToShow === 'settings') {\r\n+        settingsView.classList.remove('hidden');\r\n+        viewSettingsTab.classList.add('bg-indigo-600', 'text-white');\r\n+        viewSettingsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n+        renderSettingsView();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Função principal que inicializa o painel de admin,\r\n+ * renderiza a lista de empresas e configura os eventos.\r\n+ */\r\n+export async function showAdminDashboard(impersonationCallback) {\r\n+    adminImpersonationCallback = impersonationCallback;\r\n+\r\n+    // --- NOVA ABORDAGEM DIRETA ---\r\n+    const adminPanel = document.getElementById('adminDashboardScreen');\r\n+    const mainPanel = document.getElementById('mainAppContent');\r\n+    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n+\r\n+    // Escondemos explicitamente a aplicação principal e o seu botão flutuante\r\n+    if (mainPanel) {\r\n+        mainPanel.style.display = 'none';\r\n+    }\r\n+    if (openAddBillModalBtn) {\r\n+        openAddBillModalBtn.style.display = 'none';\r\n+    }\r\n+\r\n+    // E mostramos explicitamente o painel de admin usando 'flex' (devido ao nosso layout de CSS)\r\n+    if (adminPanel) {\r\n+        adminPanel.style.display = 'flex';\r\n+    }\r\n+    // --- FIM DA NOVA ABORDAGEM ---\r\n+\r\n+    switchAdminView('dashboard');\r\n+}\r\n+\r\n+async function renderCompaniesView() {\r\n+    // 1. Desenha a estrutura da página, incluindo a nova área de pesquisa\r\n+    companiesView.innerHTML = `\r\n+        <div class=\"mb-8\">\r\n+            <input type=\"text\" id=\"globalSearchInput\" placeholder=\"Pesquisar por Utilizador, E-mail, Empresa ou CNPJ...\" class=\"w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-indigo-500\">\r\n+            <div id=\"searchResultsContainer\" class=\"mt-4\"></div>\r\n+        </div>\r\n+        \r\n+        <hr class=\"border-gray-700 mb-8\">\r\n+\r\n+        <div class=\"mb-6 flex justify-center space-x-4\">\r\n+            <button id=\"createCompanyBtn\" class=\"bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition duration-200 flex items-center\">\r\n+                <i class=\"fas fa-plus-circle mr-2\"></i> Criar Nova Empresa\r\n+            </button>\r\n+        </div>\r\n+        <div id=\"companyList\" class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"></div>\r\n+        <div id=\"noCompaniesMessage\" class=\"col-span-full text-center text-gray-400 py-8 hidden\">\r\n+            Nenhuma empresa cadastrada ainda.\r\n+        </div>\r\n+    `;\r\n+\r\n+    // 2. Adiciona o Event Listener para a pesquisa com debounce\r\n+    const searchInput = document.getElementById('globalSearchInput');\r\n+    const debouncedSearch = debounce(async (event) => {\r\n+        const query = event.target.value;\r\n+        const resultsContainer = document.getElementById('searchResultsContainer');\r\n+        \r\n+        if (query.length < 2) {\r\n+            resultsContainer.innerHTML = '';\r\n+            return;\r\n+        }\r\n+        \r\n+        try {\r\n+            const results = await api.globalAdminSearch(query);\r\n+            renderSearchResults(results);\r\n+        } catch (error) {\r\n+            showToast('Erro ao realizar pesquisa.', 'error');\r\n+        }\r\n+    });\r\n+    searchInput.addEventListener('input', debouncedSearch);\r\n+\r\n+    // 3. Carrega a lista de empresas como antes\r\n+    const companyListDiv = document.getElementById('companyList');\r\n+    const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n+    \r\n+    showLoader();\r\n+    try {\r\n+        const companies = await api.getCompanies();\r\n+        companyListDiv.innerHTML = '';\r\n+        if (companies.length === 0) {\r\n+            noCompaniesMessage.classList.remove('hidden');\r\n+        } else {\r\n+            noCompaniesMessage.classList.add('hidden');\r\n+            companies.forEach(company => {\r\n+                const companyCard = document.createElement('div');\r\n+                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n+                companyCard.innerHTML = `\r\n+                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n+                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n+                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n+                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n+                    </div>\r\n+                `;\r\n+                companyListDiv.appendChild(companyCard);\r\n+            });\r\n+            // Adiciona os listeners para os botões de \"Detalhes\" e \"Entrar\" da lista principal\r\n+            addEventListenersToAdminButtons();\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function addEventListenersToAdminButtons() {\r\n+    // Listener para os botões \"Detalhes\"\r\n+    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(company, users, masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Listener para os botões \"Entrar\"\r\n+    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+\r\n+            try {\r\n+                const { masterUsers } = await api.getCompanyDetails(companyId);\r\n+\r\n+                if (!masterUsers || masterUsers.length === 0) {\r\n+                    hideLoader();\r\n+                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n+                }\r\n+\r\n+                let userToImpersonate = masterUsers.find(user => user.role === 'Proprietário');\r\n+\r\n+                if (!userToImpersonate) {\r\n+                    console.warn(`Nenhum 'Proprietário' encontrado para a empresa ${companyId}. A representar o primeiro utilizador da lista.`);\r\n+                    userToImpersonate = masterUsers[0];\r\n+                }\r\n+\r\n+                if (!userToImpersonate) {\r\n+                    hideLoader();\r\n+                    return showToast('Não foi encontrado um utilizador para representar.', 'error');\r\n+                }\r\n+                \r\n+                const userIdToImpersonate = userToImpersonate._id;\r\n+                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n+\r\n+                // Utiliza a variável do módulo que guardamos no início\r\n+                if (typeof adminImpersonationCallback === 'function') {\r\n+                    adminImpersonationCallback(data);\r\n+                } else {\r\n+                    console.error(\"A função de callback para representação não foi fornecida ao painel de admin.\");\r\n+                    hideLoader();\r\n+                }\r\n+\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * @param {object} company - O objeto da empresa.\r\n+ * @param {Array} users - A lista de usuários da empresa.\r\n+ * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n+ */\r\n+function openCompanyDetailsModal(company, users, masterUsers) {\r\n+    selectedCompanyForAdmin = company;\r\n+\r\n+    modalCompanyNameInput.value = company.nomeEmpresa;\r\n+    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n+    modalCompanyPasswordInput.value = '';\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    if (company.subscription && company.subscription.status) {\r\n+        subscriptionStatus.textContent = company.subscription.status;\r\n+        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n+        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+    } else {\r\n+        subscriptionStatus.textContent = 'Não configurada';\r\n+        subscriptionEndDate.textContent = 'N/A';\r\n+    }\r\n+\r\n+    modalCompanyUsers.innerHTML = '';\r\n+    if (masterUsers && masterUsers.length > 0) {\r\n+        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+        masterUsers.forEach(user => {\r\n+            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n+\r\n+            const userHtml = `\r\n+                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n+                    <span class=\"text-white\">${user.username}</span>\r\n+                    <div class=\"flex items-center space-x-2\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                            ${roleOptions}\r\n+                        </select>\r\n+                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n+        });\r\n+    } else {\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+    }\r\n+\r\n+    // Adiciona os eventos DEPOIS de criar os botões\r\n+    addEventListenersToCompanyDetailsModal();\r\n+    companyDetailsModal.classList.remove('hidden');\r\n+    companyDetailsModal.style.display = 'flex';\r\n+}\r\n+\r\n+function addEventListenersToCompanyDetailsModal() {\r\n+    // Evento para os seletores de cargo (role)\r\n+    document.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.updateUserRole(companyId, userId, newRole);\r\n+                showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                // Recarrega os dados do modal para garantir consistência\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // Evento para os botões de remover utilizador\r\n+    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.currentTarget.dataset.userId;\r\n+            const companyId = selectedCompanyForAdmin._id;\r\n+\r\n+            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+                return;\r\n+            }\r\n+\r\n+            showLoader();\r\n+            try {\r\n+                await api.deleteUserFromCompany(companyId, userId);\r\n+                showToast('Utilizador removido com sucesso!');\r\n+                // Recarrega os dados do modal\r\n+                const updatedData = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+function openAddCompanyModal() {\r\n+    if (addCompanyForm) addCompanyForm.reset();\r\n+    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n+    document.getElementById('addCompanyNameInput').focus();\r\n+}\r\n+\r\n+function closeAddCompanyModal() {\r\n+    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n+}\r\n+\r\n+export function openAddUserModal(companyId, isAdmin = false) {\r\n+    const addUserForm = document.getElementById('addUserForm');\r\n+    const addUserModal = document.getElementById('addUserModal');\r\n+    const addUserRoleSelect = document.getElementById('addUserRoleSelect');\r\n+\r\n+    let availableRoles;\r\n+    if (isAdmin) {\r\n+        availableRoles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n+    } else {\r\n+        availableRoles = ['Gerente', 'Funcionário'];\r\n+    }\r\n+\r\n+    addUserRoleSelect.innerHTML = '';\r\n+    availableRoles.forEach(role => {\r\n+        const option = document.createElement('option');\r\n+        option.value = role;\r\n+        option.textContent = role;\r\n+        addUserRoleSelect.appendChild(option);\r\n+    });\r\n+\r\n+    if (addUserForm) {\r\n+        addUserForm.reset();\r\n+        addUserForm.dataset.companyId = companyId;\r\n+        addUserForm.dataset.isAdmin = isAdmin; // <<--- LINHA ADICIONADA: Guardamos o status aqui\r\n+    }\r\n+\r\n+    if (addUserModal) {\r\n+        addUserModal.classList.remove('hidden');\r\n+    }\r\n+    document.getElementById('addUsernameInput').focus();\r\n+}\r\n+\r\n+function closeAddUserModal() {\r\n+    if (addUserModal) addUserModal.classList.add('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal de gestão de utilizadores para uma empresa específica.\r\n+ * Busca os dados mais recentes da API e configura os eventos de interação.\r\n+ * @param {object} company - O objeto da empresa cujos utilizadores serão geridos.\r\n+ */\r\n+export async function openManageUsersModal(company) {\r\n+    // Validação inicial para garantir que recebemos a empresa correta\r\n+    if (!company || !company._id) {\r\n+        showToast('Erro: Não foi possível identificar a empresa para gerir os utilizadores.', 'error');\r\n+        return;\r\n+    }\r\n+\r\n+    showLoader();\r\n+    const manageUsersModal = document.getElementById('manageUsersModal');\r\n+    const companyUsersList = document.getElementById('companyUsersList');\r\n+\r\n+    try {\r\n+        // 1. Busca sempre os dados mais recentes da API\r\n+        const { masterUsers } = await api.getCompanyDetails(company._id);\r\n+\r\n+        // 2. Limpa a lista de utilizadores anterior\r\n+        if (companyUsersList) {\r\n+            companyUsersList.innerHTML = '';\r\n+        } else {\r\n+            console.error(\"Elemento 'companyUsersList' não foi encontrado no HTML.\");\r\n+            hideLoader();\r\n+            return; // Interrompe a função se o elemento não existir\r\n+        }\r\n+\r\n+        // 3. Constrói o HTML da nova lista de utilizadores\r\n+        if (masterUsers && masterUsers.length > 0) {\r\n+            const assignableRoles = ['Gerente', 'Funcionário'];\r\n+\r\n+            masterUsers.forEach(user => {\r\n+                const isOwner = user.role === 'Proprietário';\r\n+\r\n+                // Cria as opções do dropdown de cargos\r\n+                const roleOptions = assignableRoles.map(role =>\r\n+                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n+                ).join('');\r\n+\r\n+                // Se for proprietário, mostra texto; senão, mostra o dropdown.\r\n+                const roleHtml = isOwner\r\n+                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n+                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n+\r\n+                // Se não for proprietário, mostra o botão de remover.\r\n+                const buttonHtml = isOwner\r\n+                    ? ''\r\n+                    : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`;\r\n+\r\n+                const userRowHtml = `\r\n+                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <div class=\"flex items-center space-x-2\">\r\n+                            ${roleHtml}\r\n+                            ${buttonHtml}\r\n+                        </div>\r\n+                    </div>\r\n+                `;\r\n+                companyUsersList.insertAdjacentHTML('beforeend', userRowHtml);\r\n+            });\r\n+        } else {\r\n+            companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum usuário cadastrado para esta empresa.</p>';\r\n+        }\r\n+\r\n+        // 4. Adiciona os eventos aos novos elementos criados dinamicamente\r\n+\r\n+        // Evento para a mudança de cargo (role)\r\n+        companyUsersList.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n+            select.addEventListener('change', async (e) => {\r\n+                const userId = e.target.dataset.userId;\r\n+                const newRole = e.target.value;\r\n+\r\n+                if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                    await openManageUsersModal(company); // Recarrega o modal para reverter a mudança visual\r\n+                    return;\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    await api.updateUserRole(company._id, userId, newRole);\r\n+                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    // Recarrega o modal para garantir que a interface está 100% sincronizada\r\n+                    await openManageUsersModal(company);\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        // Evento para o botão de remover utilizador\r\n+        companyUsersList.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n+            button.addEventListener('click', async (e) => {\r\n+                const userId = e.currentTarget.dataset.userId;\r\n+\r\n+                if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+                    return;\r\n+                }\r\n+\r\n+                showLoader();\r\n+                try {\r\n+                    await api.deleteUserFromCompany(company._id, userId);\r\n+                    showToast('Utilizador removido com sucesso!');\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    // Recarrega sempre o modal para mostrar a lista atualizada\r\n+                    await openManageUsersModal(company);\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+        // 5. Mostra o modal\r\n+        if (manageUsersModal) {\r\n+            manageUsersModal.classList.remove('hidden');\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Busca os dados da API e preenche o dashboard do admin.\r\n+ */\r\n+async function renderAdminDashboard() {\r\n+    showLoader();\r\n+    try {\r\n+        const stats = await api.getAdminDashboardStats();\r\n+\r\n+        // Preenche os cartões (KPIs)\r\n+        document.getElementById('kpiTotalCompanies').textContent = stats.totalCompanies;\r\n+        document.getElementById('kpiTotalUsers').textContent = stats.totalUsers;\r\n+        document.getElementById('kpiActiveSubscriptions').textContent = stats.activeSubscriptions;\r\n+\r\n+        // Renderiza o gráfico\r\n+        renderNewCompaniesChart(stats.newCompaniesLast30Days);\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza o gráfico de novas empresas.\r\n+ * @param {Array} chartData - Os dados para o gráfico.\r\n+ */\r\n+function renderNewCompaniesChart(chartData) {\r\n+    const canvas = document.getElementById('newCompaniesChart');\r\n+    if (!canvas) return;\r\n+    const ctx = canvas.getContext('2d');\r\n+\r\n+    // Prepara os dados para o Chart.js\r\n+    const labels = chartData.map(item => new Date(item.date).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' }));\r\n+    const data = chartData.map(item => item.count);\r\n+\r\n+    // Destrói o gráfico anterior se ele já existir (importante ao trocar de abas)\r\n+    if (newCompaniesChart) {\r\n+        newCompaniesChart.destroy();\r\n+    }\r\n+\r\n+    newCompaniesChart = new Chart(ctx, {\r\n+        type: 'line', // Gráfico de linha\r\n+        data: {\r\n+            labels: labels,\r\n+            datasets: [{\r\n+                label: 'Novas Empresas',\r\n+                data: data,\r\n+                backgroundColor: 'rgba(99, 102, 241, 0.2)',\r\n+                borderColor: 'rgba(99, 102, 241, 1)',\r\n+                borderWidth: 2,\r\n+                tension: 0.3, // Deixa a linha mais suave\r\n+                fill: true\r\n+            }]\r\n+        },\r\n+        options: {\r\n+            responsive: true,\r\n+            maintainAspectRatio: false,\r\n+            scales: {\r\n+                y: { \r\n+                    beginAtZero: true, \r\n+                    ticks: { color: '#9ca3af', stepSize: 1 }, // Garante que a escala seja de 1 em 1\r\n+                    grid: { color: 'rgba(156, 163, 175, 0.1)' } \r\n+                },\r\n+                x: { \r\n+                    ticks: { color: '#9ca3af' }, \r\n+                    grid: { color: 'rgba(156, 163, 175, 0.1)' } \r\n+                }\r\n+            },\r\n+            plugins: { \r\n+                legend: { display: false } // Esconde a legenda, já que só temos uma linha\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+function renderSubscriptionsView() {\r\n+    subscriptionsView.innerHTML = `\r\n+        <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg\">\r\n+            <div class=\"flex justify-between items-center mb-4 flex-wrap gap-4\">\r\n+                <h2 class=\"text-xl font-semibold text-white\">Gestão de Assinaturas</h2>\r\n+                <div class=\"flex items-center space-x-4\">\r\n+                    <input type=\"text\" id=\"subscriptionSearchInput\" placeholder=\"Pesquisar por nome ou CNPJ...\" class=\"w-64 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-indigo-500\">\r\n+                    <div class=\"flex items-center space-x-1 bg-gray-900/50 p-1 rounded-md border border-gray-700\">\r\n+                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors active\" data-status=\"all\">Todos</button>\r\n+                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"active\">Ativas</button>\r\n+                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"inactive\">Inativas</button>\r\n+                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"pending_approval\">Pendentes</button>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+            <div id=\"subscriptionsTableContainer\" class=\"overflow-x-auto\">\r\n+                <p class=\"text-center text-gray-400 py-8\">A carregar dados...</p>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+    \r\n+    // Adiciona os event listeners para os filtros e a pesquisa\r\n+    document.getElementById('subscriptionSearchInput').addEventListener('input', handleSubscriptionFilter);\r\n+    document.querySelectorAll('.sub-filter-btn').forEach(btn => {\r\n+        btn.addEventListener('click', (e) => {\r\n+            document.querySelectorAll('.sub-filter-btn').forEach(b => b.classList.remove('active'));\r\n+            e.currentTarget.classList.add('active');\r\n+            handleSubscriptionFilter();\r\n+        });\r\n+    });\r\n+\r\n+    // Busca os dados da API\r\n+    fetchAndRenderSubscriptions();\r\n+}\r\n+\r\n+async function fetchAndRenderSubscriptions() {\r\n+    showLoader();\r\n+    const container = document.getElementById('subscriptionsTableContainer');\r\n+    try {\r\n+        // Busca os dados e guarda na variável global\r\n+        allSubscriptionsData = await api.getAdminSubscriptions();\r\n+        // Renderiza a tabela com todos os dados\r\n+        renderSubscriptionsTable(allSubscriptionsData);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+        container.innerHTML = '<p class=\"text-red-400 text-center py-8\">Não foi possível carregar os dados das assinaturas.</p>';\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+function handleSubscriptionFilter() {\r\n+    const searchTerm = document.getElementById('subscriptionSearchInput').value.toLowerCase();\r\n+    const activeStatus = document.querySelector('.sub-filter-btn.active').dataset.status;\r\n+\r\n+    const filteredData = allSubscriptionsData.filter(company => {\r\n+        const subStatus = company.subscription?.status || 'inactive';\r\n+        \r\n+        const matchesStatus = (activeStatus === 'all') || (subStatus === activeStatus);\r\n+        \r\n+        const matchesSearch = company.nomeEmpresa.toLowerCase().includes(searchTerm) ||\r\n+                              company.cnpj.replace(/\\D/g, '').includes(searchTerm.replace(/\\D/g, ''));\r\n+                              \r\n+        return matchesStatus && matchesSearch;\r\n+    });\r\n+\r\n+    renderSubscriptionsTable(filteredData);\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a tabela HTML de assinaturas com base nos dados fornecidos.\r\n+ * @param {Array} data - A lista de empresas com dados de assinatura para exibir.\r\n+ */\r\n+function renderSubscriptionsTable(data) {\r\n+    const container = document.getElementById('subscriptionsTableContainer');\r\n+    if (data.length === 0) {\r\n+        container.innerHTML = '<p class=\"text-gray-400 text-center py-8\">Nenhuma assinatura encontrada para os filtros selecionados.</p>';\r\n+        return;\r\n+    }\r\n+\r\n+    const tableRows = data.map(company => {\r\n+        const sub = company.subscription || {};\r\n+        const endDate = sub.endDate ? new Date(sub.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+        \r\n+        return `\r\n+            <tr class=\"border-b border-gray-700 hover:bg-gray-700/50\">\r\n+                <td class=\"p-4\">${company.nomeEmpresa}</td>\r\n+                <td class=\"p-4 font-mono\">${formatCnpj(company.cnpj)}</td>\r\n+                <td class=\"p-4\">${getStatusBadge(sub.status)}</td>\r\n+                <td class=\"p-4\">${endDate}</td>\r\n+                <td class=\"p-4 font-mono text-xs\">${sub.mercadopagoPreapprovalId || 'N/A'}</td>\r\n+                <td class=\"p-4 text-right\">\r\n+                    <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+                </td>\r\n+            </tr>\r\n+        `;\r\n+    }).join('');\r\n+\r\n+    container.innerHTML = `\r\n+        <table class=\"w-full text-sm text-left text-gray-300\">\r\n+            <thead class=\"text-xs text-gray-400 uppercase bg-gray-700\">\r\n+                <tr>\r\n+                    <th class=\"p-4\">Empresa</th>\r\n+                    <th class=\"p-4\">CNPJ</th>\r\n+                    <th class=\"p-4\">Status</th>\r\n+                    <th class=\"p-4\">Expira em</th>\r\n+                    <th class=\"p-4\">ID Mercado Pago</th>\r\n+                    <th class=\"p-4 text-right\">Ações</th>\r\n+                </tr>\r\n+            </thead>\r\n+            <tbody>\r\n+                ${tableRows}\r\n+            </tbody>\r\n+        </table>\r\n+    `;\r\n+\r\n+    // --- CÓDIGO NOVO ADICIONADO AQUI ---\r\n+    // Após a tabela ser criada, adicionamos o event listener aos novos botões \"Detalhes\".\r\n+    container.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                // Reutilizamos a lógica que já funciona para buscar os dados\r\n+                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                // Reutilizamos a função que já abre o modal de detalhes\r\n+                openCompanyDetailsModal(company, users, masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+/**\r\n+ * Retorna uma badge de status colorida em HTML.\r\n+ * @param {string} status - O status da assinatura.\r\n+ */\r\n+function getStatusBadge(status) {\r\n+    // Mapeamento centralizado de status para aparência e texto.\r\n+    // Facilita a adição de novos status no futuro.\r\n+    const statusConfig = {\r\n+        active: { text: 'Ativa', style: 'bg-green-500/80 text-green-100' },\r\n+        inactive: { text: 'Inativa', style: 'bg-red-500/80 text-red-100' },\r\n+        pending_approval: { text: 'Pendente', style: 'bg-yellow-500/80 text-yellow-100' },\r\n+        pending: { text: 'Pendente', style: 'bg-yellow-500/80 text-yellow-100' },\r\n+        cancelled: { text: 'Cancelada', style: 'bg-gray-600 text-gray-200' },\r\n+        // Um caso padrão para qualquer outro status que possa aparecer\r\n+        default: { text: 'Desconhecido', style: 'bg-gray-400 text-gray-800' }\r\n+    };\r\n+\r\n+    // Garante que um status nulo ou indefinido seja tratado como 'inativo'\r\n+    const currentStatus = status || 'inactive';\r\n+\r\n+    // Obtém a configuração para o status atual, ou usa o padrão se não for encontrado\r\n+    const config = statusConfig[currentStatus] || statusConfig.default;\r\n+\r\n+    return `<span class=\"px-2.5 py-1 rounded-full text-xs font-semibold ${config.style}\">${config.text}</span>`;\r\n+}\r\n+\r\n+// ------ Handlers ------\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de criação de empresa.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddCompanySubmit(e) {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n+        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n+        // LINHA ADICIONADA:\r\n+        email: document.getElementById('addCompanyEmailInput').value,\r\n+        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n+        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n+    };\r\n+\r\n+    // Removemos o campo 'senhaEmpresa' que não está a ser usado no backend\r\n+    // delete payload.senhaEmpresa;\r\n+\r\n+    showLoader();\r\n+    try {\r\n+        const data = await api.createCompany(payload);\r\n+        showToast(data.message, 'success');\r\n+        closeAddCompanyModal();\r\n+        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleUpdateCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const updateData = {\r\n+        nomeEmpresa: modalCompanyNameInput.value,\r\n+        newPassword: modalCompanyPasswordInput.value,\r\n+    };\r\n+    showLoader();\r\n+    try {\r\n+        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n+        showToast('Empresa atualizada com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList(); // Atualiza a lista principal\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleDeleteCompany() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n+    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n+        showToast(\"Exclusão cancelada.\", \"info\");\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n+        showToast('Empresa excluída com sucesso!');\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        await renderCompanyList();\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleAddSubscription() {\r\n+    if (!selectedCompanyForAdmin) return;\r\n+    const days = daysToAddInput.value;\r\n+    if (!days || parseInt(days) <= 0) {\r\n+        showToast('Insira um número de dias válido.', 'error');\r\n+        return;\r\n+    }\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n+        showToast('Assinatura adicionada com sucesso!');\r\n+        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+async function handleRemoveSubscription() {\r\n+    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n+    showLoader();\r\n+    try {\r\n+        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n+        showToast('Assinatura removida com sucesso!');\r\n+        openCompanyDetailsModal(company, users);\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de novo utilizador.\r\n+ * @param {Event} e - O evento de submissão do formulário.\r\n+ */\r\n+async function handleAddUserSubmit(e) {\r\n+    e.preventDefault();\r\n+    const form = e.target;\r\n+    const submitButton = form.querySelector('button[type=\"submit\"]');\r\n+    const companyId = form.dataset.companyId;\r\n+\r\n+    if (!companyId) {\r\n+        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n+    }\r\n+\r\n+    const isAdmin = form.dataset.isAdmin === 'true';\r\n+\r\n+    // (O resto da extração de dados do formulário continua igual)\r\n+    const username = document.getElementById('addUsernameInput').value.trim();\r\n+    const email = document.getElementById('addUserEmailInput').value.trim();\r\n+    const password = document.getElementById('addUserPasswordInput').value;\r\n+    const role = document.getElementById('addUserRoleSelect').value;\r\n+\r\n+    if (!username || !email || !password || !role) {\r\n+        return showToast('Por favor, preencha todos os campos.', 'error');\r\n+    }\r\n+\r\n+    showLoader();\r\n+    if (submitButton) submitButton.disabled = true;\r\n+\r\n+    try {\r\n+        await api.registerUser(username, password, email, role, companyId);\r\n+        showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n+\r\n+        // --- INÍCIO DA MODIFICAÇÃO ---\r\n+\r\n+        if (!isAdmin) {\r\n+            // Caso 1: Se for o proprietário a adicionar, atualiza o modal de gestão.\r\n+            await openManageUsersModal({ _id: companyId });\r\n+        } else {\r\n+            // Caso 2 (NOVO): Se for o admin, busca os dados atualizados e reabre o modal de detalhes.\r\n+            const updatedData = await api.getCompanyDetails(companyId);\r\n+            openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n+        }\r\n+\r\n+        // --- FIM DA MODIFICAÇÃO ---\r\n+\r\n+        closeAddUserModal();\r\n+        form.reset();\r\n+\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+        if (submitButton) submitButton.disabled = false;\r\n+    }\r\n+}\r\n+\r\n+// --- Funções para a Gestão de Anúncios ---\r\n+\r\n+/**\r\n+ * Busca todos os anúncios da API e os exibe na lista.\r\n+ */\r\n+async function renderAnnouncements() {\r\n+    // 1. Verifica se a função já está em execução. Se estiver, para aqui.\r\n+    if (isRenderingAnnouncements) {\r\n+        return;\r\n+    }\r\n+\r\n+    // 2. Sinaliza que a renderização começou.\r\n+    isRenderingAnnouncements = true;\r\n+    showLoader();\r\n+    announcementsList.innerHTML = ''; // Limpa a lista antiga\r\n+\r\n+    try {\r\n+        const announcements = await api.getAllAnnouncements();\r\n+        if (announcements.length === 0) {\r\n+            announcementsList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum anúncio criado ainda.</p>';\r\n+        } else {\r\n+            announcements.forEach(ann => {\r\n+                const statusClass = ann.isActive ? 'bg-green-500' : 'bg-gray-500';\r\n+                const statusText = ann.isActive ? 'Ativo' : 'Inativo';\r\n+\r\n+                announcementsList.insertAdjacentHTML('beforeend', `\r\n+                    <div class=\"bg-gray-700 rounded p-4 flex justify-between items-center\">\r\n+                        <div>\r\n+                            <p class=\"text-white\">${ann.message}</p>\r\n+                            <p class=\"text-xs text-gray-400\">${ann.link || 'Sem link'}</p>\r\n+                        </div>\r\n+                        <div class=\"flex items-center space-x-3\">\r\n+                            <span class=\"text-xs font-bold text-white px-2 py-1 rounded-full ${statusClass}\">${statusText}</span>\r\n+                            <button class=\"edit-announcement-btn text-blue-400 hover:text-blue-300\" data-id=\"${ann._id}\"><i class=\"fas fa-edit\"></i></button>\r\n+                            <button class=\"delete-announcement-btn text-red-400 hover:text-red-300\" data-id=\"${ann._id}\"><i class=\"fas fa-trash\"></i></button>\r\n+                        </div>\r\n+                    </div>\r\n+                `);\r\n+            });\r\n+        }\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        isRenderingAnnouncements = false;\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Abre o modal de anúncios, seja para criar um novo ou editar um existente.\r\n+ * @param {object | null} announcement - O objeto do anúncio para editar, ou null para criar.\r\n+ */\r\n+function openAnnouncementModal(announcement = null) {\r\n+    announcementForm.reset(); // Limpa o formulário\r\n+\r\n+    if (announcement) {\r\n+        // Modo Edição: Preenche o formulário com os dados existentes\r\n+        announcementModalTitle.textContent = 'Editar Anúncio';\r\n+        document.getElementById('announcementId').value = announcement._id;\r\n+        document.getElementById('announcementMessageInput').value = announcement.message;\r\n+        document.getElementById('announcementLink').value = announcement.link;\r\n+        document.getElementById('announcementIsActive').checked = announcement.isActive;\r\n+    } else {\r\n+        // Modo Criação: Deixa o formulário pronto para um novo anúncio\r\n+        announcementModalTitle.textContent = 'Novo Anúncio';\r\n+        document.getElementById('announcementId').value = '';\r\n+    }\r\n+\r\n+    announcementModal.classList.remove('hidden');\r\n+}\r\n+\r\n+/**\r\n+ * Lida com a submissão do formulário de anúncio (criação ou edição).\r\n+ */\r\n+async function handleAnnouncementFormSubmit(e) {\r\n+    e.preventDefault();\r\n+    const id = document.getElementById('announcementId').value;\r\n+    const message = document.getElementById('announcementMessageInput').value;\r\n+    const link = document.getElementById('announcementLink').value;\r\n+    const isActive = document.getElementById('announcementIsActive').checked;\r\n+    const payload = { message, link, isActive };\r\n+    showLoader();\r\n+    try {\r\n+        if (id) {\r\n+            // Se tem um ID, é uma atualização\r\n+            await api.updateAnnouncement(id, payload);\r\n+            showToast('Anúncio atualizado com sucesso!', 'success');\r\n+        } else {\r\n+            // Se não tem ID, é uma criação\r\n+            await api.createAnnouncement(payload);\r\n+            showToast('Anúncio criado com sucesso!', 'success');\r\n+        }\r\n+        if (announcementModal) {\r\n+            announcementModal.classList.add('hidden');\r\n+        }\r\n+\r\n+        await renderAnnouncements(); // Atualiza a lista\r\n+    } catch (error) {\r\n+        showToast(error.message, 'error');\r\n+    } finally {\r\n+        hideLoader();\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Renderiza a estrutura da vista de Configurações e busca os templates de e-mail.\r\n+ */\r\n+function renderSettingsView() {\r\n+    settingsView.innerHTML = `\r\n+        <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg flex space-x-6 h-full\">\r\n+            <div class=\"w-1/4 border-r border-gray-700 pr-6\">\r\n+                <h3 class=\"text-xl font-semibold text-gray-100 mb-4\">Templates de E-mail</h3>\r\n+                <div id=\"emailTemplatesList\" class=\"space-y-2\">\r\n+                    <p class=\"text-gray-400\">A carregar...</p>\r\n+                </div>\r\n+            </div>\r\n+            \r\n+            <div id=\"emailEditorContainer\" class=\"w-5/12 opacity-50 pointer-events-none\">\r\n+                <h4 id=\"editingTemplateName\" class=\"text-lg font-bold text-indigo-400 mb-4\">Selecione um template para editar</h4>\r\n+                <div class=\"space-y-4\">\r\n+                    <div>\r\n+                        <label for=\"templateSubject\" class=\"block text-sm font-medium text-gray-300\">Assunto</label>\r\n+                        <input type=\"text\" id=\"templateSubject\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white\">\r\n+                    </div>\r\n+                    <div>\r\n+                        <label for=\"templateBody\" class=\"block text-sm font-medium text-gray-300\">Corpo do E-mail</label>\r\n+                        <textarea id=\"templateBody\" rows=\"12\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white font-mono text-sm\"></textarea>\r\n+                        <p class=\"text-xs text-gray-400 mt-2\">Use placeholders como {{resetLink}}, {{userName}}, etc.</p>\r\n+                    </div>\r\n+                    <div class=\"flex justify-end\">\r\n+                        <button id=\"saveEmailTemplateBtn\" class=\"bg-green-600 text-white py-2 px-5 rounded-md hover:bg-green-700\">Salvar Alterações</button>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+\r\n+            <div class=\"w-1/3\">\r\n+                 <h4 class=\"text-lg font-bold text-gray-400 mb-4\">Pré-visualização</h4>\r\n+                 <div class=\"border border-gray-700 rounded-md h-[85%] bg-white\">\r\n+                    <iframe id=\"emailPreviewFrame\" class=\"w-full h-full\"></iframe>\r\n+                 </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+\r\n+    // Busca os dados e adiciona os event listeners\r\n+    fetchAndSetupEmailEditor();\r\n+}\r\n+\r\n+/**\r\n+ * Busca os templates e configura os eventos do editor.\r\n+ */\r\n+async function fetchAndSetupEmailEditor() {\r\n+    const templatesListDiv = document.getElementById('emailTemplatesList');\r\n+    const editorContainer = document.getElementById('emailEditorContainer');\r\n+    const saveBtn = document.getElementById('saveEmailTemplateBtn');\r\n+    const templateBodyTextarea = document.getElementById('templateBody');\r\n+    const previewFrame = document.getElementById('emailPreviewFrame');\r\n+\r\n+    // Função auxiliar para atualizar o iframe\r\n+    const updateEmailPreview = (htmlContent) => {\r\n+        if (!previewFrame) return;\r\n+        const previewDoc = previewFrame.contentWindow.document;\r\n+        previewDoc.open();\r\n+        previewDoc.write(htmlContent);\r\n+        previewDoc.close();\r\n+    };\r\n+\r\n+    try {\r\n+        const templates = await api.getEmailTemplates();\r\n+        templatesListDiv.innerHTML = templates.map(t =>\r\n+            // ... (o HTML para os botões da lista continua o mesmo)\r\n+            `<button class=\"email-template-item text-left w-full p-3 rounded-md hover:bg-indigo-600 focus:outline-none focus:bg-indigo-600\" data-id=\"${t._id}\">\r\n+                <span class=\"font-semibold text-white\">${t.name}</span>\r\n+                <span class=\"block text-xs text-gray-400 truncate\">${t.subject}</span>\r\n+            </button>`\r\n+        ).join('');\r\n+\r\n+        // Adiciona evento de clique a cada item da lista\r\n+        document.querySelectorAll('.email-template-item').forEach(item => {\r\n+            item.addEventListener('click', async (e) => {\r\n+                const target = e.currentTarget;\r\n+                currentEditingTemplateId = target.dataset.id;\r\n+                \r\n+                document.querySelectorAll('.email-template-item').forEach(i => i.classList.remove('bg-indigo-600'));\r\n+                target.classList.add('bg-indigo-600');\r\n+                \r\n+                showLoader();\r\n+                try {\r\n+                    const fullTemplate = await api.getEmailTemplateById(currentEditingTemplateId);\r\n+                    \r\n+                    document.getElementById('editingTemplateName').textContent = `A editar: ${fullTemplate.name}`;\r\n+                    document.getElementById('templateSubject').value = fullTemplate.subject;\r\n+                    templateBodyTextarea.value = fullTemplate.body;\r\n+                    \r\n+                    // ATUALIZAÇÃO INICIAL DA PRÉ-VISUALIZAÇÃO\r\n+                    updateEmailPreview(fullTemplate.body);\r\n+\r\n+                    editorContainer.classList.remove('opacity-50', 'pointer-events-none');\r\n+                } catch (error) {\r\n+                    showToast('Erro ao carregar detalhes do template.', 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            });\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        templatesListDiv.innerHTML = '<p class=\"text-red-400\">Erro ao carregar templates.</p>';\r\n+    }\r\n+\r\n+    // NOVO EVENTO: Atualiza a pré-visualização em tempo real enquanto digita\r\n+    templateBodyTextarea.addEventListener('input', (e) => {\r\n+        updateEmailPreview(e.target.value);\r\n+    });\r\n+\r\n+    // Evento para salvar o template (inalterado)\r\n+    saveBtn.addEventListener('click', async () => {\r\n+        if (!currentEditingTemplateId) return;\r\n+        const subject = document.getElementById('templateSubject').value;\r\n+        const body = templateBodyTextarea.value;\r\n+        \r\n+        showLoader();\r\n+        try {\r\n+            await api.updateEmailTemplate(currentEditingTemplateId, { subject, body });\r\n+            showToast('Template salvo com sucesso!', 'success');\r\n+        } catch (error) {\r\n+            showToast('Erro ao salvar o template.', 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+function renderSearchResults(results) {\r\n+    const container = document.getElementById('searchResultsContainer');\r\n+    if (!results || (results.users.length === 0 && results.companies.length === 0)) {\r\n+        container.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum resultado encontrado.</p>';\r\n+        return;\r\n+    }\r\n+\r\n+    let html = '';\r\n+\r\n+    // Renderiza os resultados dos utilizadores\r\n+    if (results.users.length > 0) {\r\n+        html += '<h4 class=\"text-lg font-semibold text-indigo-400 mb-2\">Utilizadores Encontrados</h4>';\r\n+        html += results.users.map(user => `\r\n+            <div class=\"bg-gray-700/50 p-3 rounded-md mb-2 flex justify-between items-center\">\r\n+                <div>\r\n+                    <p class=\"font-bold text-white\">${user.username} <span class=\"text-xs font-light text-gray-300\">(${user.email})</span></p>\r\n+                    <p class=\"text-sm text-gray-400\">Empresa: ${user.company.nomeEmpresa}</p>\r\n+                </div>\r\n+                <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${user.company._id}\">Ver Empresa</button>\r\n+            </div>\r\n+        `).join('');\r\n+    }\r\n+\r\n+    // Renderiza os resultados das empresas\r\n+    if (results.companies.length > 0) {\r\n+        html += '<h4 class=\"text-lg font-semibold text-indigo-400 mt-4 mb-2\">Empresas Encontradas</h4>';\r\n+        html += results.companies.map(company => `\r\n+            <div class=\"bg-gray-700/50 p-3 rounded-md mb-2 flex justify-between items-center\">\r\n+                <div>\r\n+                    <p class=\"font-bold text-white\">${company.nomeEmpresa}</p>\r\n+                    <p class=\"text-sm text-gray-400 font-mono\">${formatCnpj(company.cnpj)}</p>\r\n+                </div>\r\n+                <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n+            </div>\r\n+        `).join('');\r\n+    }\r\n+\r\n+    container.innerHTML = html;\r\n+\r\n+    // IMPORTANTE: Adiciona os event listeners aos novos botões de \"Detalhes\" criados na pesquisa\r\n+    container.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(company, users, masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+// =================================================================================\r\n+// =================================================================================\r\n+// EVENT LISTENERS\r\n+// =================================================================================\r\n+// =================================================================================\r\n+\r\n+if (viewSettingsTab) viewSettingsTab.addEventListener('click', () => switchAdminView('settings'));\r\n+\r\n+if (viewSubscriptionsTab) viewSubscriptionsTab.addEventListener('click', () => switchAdminView('subscriptions'));\r\n+\r\n+// --- DashBoard ---\r\n+if (viewDashboardTab) viewDashboardTab.addEventListener('click', () => switchAdminView('dashboard'));\r\n+\r\n+\r\n+if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n+if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n+// Abas\r\n+if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n+if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n+\r\n+if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n+if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n+if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n+if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n+if (closeCompanyModal) {\r\n+    closeCompanyModal.addEventListener('click', () => {\r\n+        companyDetailsModal.classList.add('hidden');\r\n+        companyDetailsModal.style.display = 'none'; // Adicione esta linha\r\n+    });\r\n+}\r\n+if (addUserBtn) addUserBtn.addEventListener('click', () => openAddUserModal(selectedCompanyForAdmin._id, true));\r\n+if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n+if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n+if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n+if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n+if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n+if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n+\r\n+// Botões do modal de anúncios\r\n+if (openAnnouncementModalBtn) {\r\n+    openAnnouncementModalBtn.addEventListener('click', () => openAnnouncementModal());\r\n+}\r\n+\r\n+if (announcementForm) {\r\n+    announcementForm.addEventListener('submit', handleAnnouncementFormSubmit);\r\n+}\r\n+\r\n+if (cancelAnnouncementBtn) {\r\n+    cancelAnnouncementBtn.addEventListener('click', () => {\r\n+        if (announcementModal) {\r\n+            announcementModal.classList.add('hidden');\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// Eventos na lista de anúncios (para os botões de editar e apagar)\r\n+if (announcementsList) {\r\n+    announcementsList.addEventListener('click', async (e) => {\r\n+        const editBtn = e.target.closest('.edit-announcement-btn');\r\n+        const deleteBtn = e.target.closest('.delete-announcement-btn');\r\n+\r\n+        if (editBtn) {\r\n+            showLoader();\r\n+            try {\r\n+                const allAnnouncements = await api.getAllAnnouncements();\r\n+                const annToEdit = allAnnouncements.find(a => a._id === editBtn.dataset.id);\r\n+                if (annToEdit) openAnnouncementModal(annToEdit);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        }\r\n+\r\n+        if (deleteBtn) {\r\n+            if (confirm('Tem a certeza que deseja apagar este anúncio?')) {\r\n+                showLoader();\r\n+                try {\r\n+                    await api.deleteAnnouncement(deleteBtn.dataset.id);\r\n+                    showToast('Anúncio apagado com sucesso.', 'success');\r\n+                    await renderAnnouncements();\r\n+                } catch (error) {\r\n+                    showToast(error.message, 'error');\r\n+                } finally {\r\n+                    hideLoader();\r\n+                }\r\n+            }\r\n+        }\r\n+    });\r\n+}\r\n"
                },
                {
                    "date": 1754164200621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1068,45 +1068,25 @@\n  * Renderiza a estrutura da vista de Configurações e busca os templates de e-mail.\r\n  */\r\n function renderSettingsView() {\r\n     settingsView.innerHTML = `\r\n-        <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg flex space-x-6 h-full\">\r\n-            <div class=\"w-1/4 border-r border-gray-700 pr-6\">\r\n-                <h3 class=\"text-xl font-semibold text-gray-100 mb-4\">Templates de E-mail</h3>\r\n-                <div id=\"emailTemplatesList\" class=\"space-y-2\">\r\n-                    <p class=\"text-gray-400\">A carregar...</p>\r\n-                </div>\r\n+        <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg h-full flex flex-col\">\r\n+            <div class=\"flex border-b border-gray-700 mb-4\">\r\n+                <button id=\"email-submenu-edit\" class=\"email-submenu-btn px-4 py-2 text-sm font-medium\">Editar Templates</button>\r\n+                <button id=\"email-submenu-bulk\" class=\"email-submenu-btn px-4 py-2 text-sm font-medium\">Envio em Massa</button>\r\n             </div>\r\n-            \r\n-            <div id=\"emailEditorContainer\" class=\"w-5/12 opacity-50 pointer-events-none\">\r\n-                <h4 id=\"editingTemplateName\" class=\"text-lg font-bold text-indigo-400 mb-4\">Selecione um template para editar</h4>\r\n-                <div class=\"space-y-4\">\r\n-                    <div>\r\n-                        <label for=\"templateSubject\" class=\"block text-sm font-medium text-gray-300\">Assunto</label>\r\n-                        <input type=\"text\" id=\"templateSubject\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white\">\r\n-                    </div>\r\n-                    <div>\r\n-                        <label for=\"templateBody\" class=\"block text-sm font-medium text-gray-300\">Corpo do E-mail</label>\r\n-                        <textarea id=\"templateBody\" rows=\"12\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white font-mono text-sm\"></textarea>\r\n-                        <p class=\"text-xs text-gray-400 mt-2\">Use placeholders como {{resetLink}}, {{userName}}, etc.</p>\r\n-                    </div>\r\n-                    <div class=\"flex justify-end\">\r\n-                        <button id=\"saveEmailTemplateBtn\" class=\"bg-green-600 text-white py-2 px-5 rounded-md hover:bg-green-700\">Salvar Alterações</button>\r\n-                    </div>\r\n+\r\n+            <div id=\"email-subview-content\" class=\"flex-grow\">\r\n                 </div>\r\n-            </div>\r\n-\r\n-            <div class=\"w-1/3\">\r\n-                 <h4 class=\"text-lg font-bold text-gray-400 mb-4\">Pré-visualização</h4>\r\n-                 <div class=\"border border-gray-700 rounded-md h-[85%] bg-white\">\r\n-                    <iframe id=\"emailPreviewFrame\" class=\"w-full h-full\"></iframe>\r\n-                 </div>\r\n-            </div>\r\n         </div>\r\n     `;\r\n \r\n-    // Busca os dados e adiciona os event listeners\r\n-    fetchAndSetupEmailEditor();\r\n+    // Adiciona os event listeners para os botões do sub-menu\r\n+    document.getElementById('email-submenu-edit').addEventListener('click', () => switchEmailSubView('edit'));\r\n+    document.getElementById('email-submenu-bulk').addEventListener('click', () => switchEmailSubView('bulk'));\r\n+\r\n+    // Abre a vista de \"Editar\" por defeito\r\n+    switchEmailSubView('edit');\r\n }\r\n \r\n /**\r\n  * Busca os templates e configura os eventos do editor.\r\n@@ -1339,1248 +1319,4 @@\n             }\r\n         }\r\n     });\r\n }\r\n-// D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\n-import * as api from './api.js';\r\n-import { showToast, showLoader, hideLoader, formatCnpj, hideAllScreens } from './utils.js'\r\n-\r\n-\r\n-// Variáveis de estado e elementos do DOM para o painel de admin\r\n-let selectedCompanyForAdmin = null;\r\n-let isRenderingAnnouncements = false;\r\n-let adminImpersonationCallback = null;\r\n-let newCompaniesChart = null;\r\n-let allSubscriptionsData = [];\r\n-let currentEditingTemplateId = null;\r\n-\r\n-const viewSettingsTab = document.getElementById('viewSettingsTab');\r\n-const settingsView = document.getElementById('settingsView');\r\n-\r\n-const viewSubscriptionsTab = document.getElementById('viewSubscriptionsTab');\r\n-const subscriptionsView = document.getElementById('subscriptionsView');\r\n-\r\n-const viewDashboardTab = document.getElementById('viewDashboardTab');\r\n-const adminDashboardView = document.getElementById('adminDashboardView');\r\n-\r\n-const adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\n-const companyListDiv = document.getElementById('companyList');\r\n-const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n-const adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\n-const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n-\r\n-// Elementos das novas abas\r\n-const viewCompaniesTab = document.getElementById('viewCompaniesTab');\r\n-const viewAnnouncementsTab = document.getElementById('viewAnnouncementsTab');\r\n-const companiesView = document.getElementById('companiesView');\r\n-const announcementsView = document.getElementById('announcementsView');\r\n-const adminTabButtons = document.querySelectorAll('.admin-tab-btn');\r\n-\r\n-const saveCompanyDetailsBtn = document.getElementById('saveCompanyDetailsBtn');\r\n-const deleteCompanyBtn = document.getElementById('deleteCompanyBtn');\r\n-const addSubscriptionBtn = document.getElementById('addSubscriptionBtn');\r\n-const removeSubscriptionBtn = document.getElementById('removeSubscriptionBtn');\r\n-const closeCompanyModal = document.getElementById('closeCompanyModal');\r\n-const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n-const addUserBtn = document.getElementById('addUserBtn');\r\n-const addUserForm = document.getElementById('addUserForm');\r\n-const closeAddUserModalBtn = document.getElementById('closeAddUserModal');\r\n-const cancelAddUserBtn = document.getElementById('cancelAddUserBtn');\r\n-const addCompanyForm = document.getElementById('addCompanyForm');\r\n-const closeAddCompanyModalBtn = document.getElementById('closeAddCompanyModal');\r\n-const cancelAddCompanyBtn = document.getElementById('cancelAddCompanyBtn');\r\n-const backToAdminBtn = document.getElementById('backToAdminBtn');\r\n-\r\n-const openAnnouncementModalBtn = document.getElementById('openAnnouncementModalBtn');\r\n-const announcementModal = document.getElementById('announcementModal');\r\n-const announcementForm = document.getElementById('announcementForm');\r\n-const cancelAnnouncementBtn = document.getElementById('cancelAnnouncementBtn');\r\n-const announcementsList = document.getElementById('announcementsList');\r\n-\r\n-function debounce(func, delay = 300) {\r\n-    let timeout;\r\n-    return (...args) => {\r\n-        clearTimeout(timeout);\r\n-        timeout = setTimeout(() => {\r\n-            func.apply(this, args);\r\n-        }, delay);\r\n-    };\r\n-}\r\n-\r\n-/**\r\n- * Alterna a visualização entre as abas do painel de admin.\r\n- * @param {string} viewToShow - O nome da aba para mostrar ('companies' ou 'announcements').\r\n- */\r\n-function switchAdminView(viewToShow) {\r\n-    // --- A CORREÇÃO ESTÁ AQUI ---\r\n-    // Este bloco no início da função é crucial. Ele garante que TODAS as\r\n-    // vistas são escondidas antes de qualquer outra ação.\r\n-    adminDashboardView.classList.add('hidden');\r\n-    companiesView.classList.add('hidden');\r\n-    subscriptionsView.classList.add('hidden'); // Esta linha era a que provavelmente faltava\r\n-    announcementsView.classList.add('hidden');\r\n-    settingsView.classList.add('hidden');\r\n-\r\n-    // Reseta o estilo de todos os botões das abas\r\n-    // (O seu código para resetar os botões continua aqui)\r\n-    adminTabButtons.forEach(btn => {\r\n-        btn.classList.remove('bg-indigo-600', 'text-white');\r\n-        btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n-    });\r\n-\r\n-    // Agora, ativamos apenas a aba e a vista corretas\r\n-    if (viewToShow === 'dashboard') {\r\n-        adminDashboardView.classList.remove('hidden');\r\n-        viewDashboardTab.classList.add('bg-indigo-600', 'text-white');\r\n-        viewDashboardTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderAdminDashboard();\r\n-    } else if (viewToShow === 'companies') {\r\n-        companiesView.classList.remove('hidden');\r\n-        viewCompaniesTab.classList.add('bg-indigo-600', 'text-white');\r\n-        viewCompaniesTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderCompanyList();\r\n-    } else if (viewToShow === 'subscriptions') {\r\n-        subscriptionsView.classList.remove('hidden');\r\n-        viewSubscriptionsTab.classList.add('bg-indigo-600', 'text-white');\r\n-        viewSubscriptionsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderSubscriptionsView();\r\n-    } else if (viewToShow === 'announcements') {\r\n-        announcementsView.classList.remove('hidden');\r\n-        viewAnnouncementsTab.classList.add('bg-indigo-600', 'text-white');\r\n-        viewAnnouncementsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderAnnouncements();\r\n-    }else if (viewToShow === 'settings') {\r\n-        settingsView.classList.remove('hidden');\r\n-        viewSettingsTab.classList.add('bg-indigo-600', 'text-white');\r\n-        viewSettingsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n-        renderSettingsView();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Função principal que inicializa o painel de admin,\r\n- * renderiza a lista de empresas e configura os eventos.\r\n- */\r\n-export async function showAdminDashboard(impersonationCallback) {\r\n-    adminImpersonationCallback = impersonationCallback;\r\n-\r\n-    // --- NOVA ABORDAGEM DIRETA ---\r\n-    const adminPanel = document.getElementById('adminDashboardScreen');\r\n-    const mainPanel = document.getElementById('mainAppContent');\r\n-    const openAddBillModalBtn = document.getElementById('openAddBillModalBtn');\r\n-\r\n-    // Escondemos explicitamente a aplicação principal e o seu botão flutuante\r\n-    if (mainPanel) {\r\n-        mainPanel.style.display = 'none';\r\n-    }\r\n-    if (openAddBillModalBtn) {\r\n-        openAddBillModalBtn.style.display = 'none';\r\n-    }\r\n-\r\n-    // E mostramos explicitamente o painel de admin usando 'flex' (devido ao nosso layout de CSS)\r\n-    if (adminPanel) {\r\n-        adminPanel.style.display = 'flex';\r\n-    }\r\n-    // --- FIM DA NOVA ABORDAGEM ---\r\n-\r\n-    switchAdminView('dashboard');\r\n-}\r\n-\r\n-async function renderCompanyList() {\r\n-    showLoader();\r\n-    try {\r\n-        const companies = await api.getCompanies();\r\n-        companyListDiv.innerHTML = ''; // Limpa a lista antes de adicionar os novos itens.\r\n-\r\n-        if (companies.length === 0) {\r\n-            noCompaniesMessage.classList.remove('hidden');\r\n-        } else {\r\n-            noCompaniesMessage.classList.add('hidden');\r\n-            companies.forEach(company => {\r\n-                const companyCard = document.createElement('div');\r\n-                companyCard.className = 'bg-gray-700 rounded-lg shadow-md p-6';\r\n-                companyCard.innerHTML = `\r\n-                    <h3 class=\"text-xl font-bold text-white mb-2\">${company.nomeEmpresa}</h3>\r\n-                    <p class=\"text-gray-300\">CNPJ: ${formatCnpj(company.cnpj)}</p>\r\n-                    <div class=\"mt-4 flex justify-end space-x-2\">\r\n-                        <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                        <button class=\"enter-company-btn bg-blue-600 text-white py-1 px-3 rounded-md hover:bg-blue-700 text-sm\" data-company-id=\"${company._id}\">Entrar</button>\r\n-                    </div>\r\n-                `;\r\n-                companyListDiv.appendChild(companyCard);\r\n-            });\r\n-\r\n-            // A chamada aqui agora é mais simples\r\n-            addEventListenersToAdminButtons();\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function addEventListenersToAdminButtons() {\r\n-    // Listener para os botões \"Detalhes\"\r\n-    document.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(company, users, masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Listener para os botões \"Entrar\"\r\n-    document.querySelectorAll('.enter-company-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-\r\n-            try {\r\n-                const { masterUsers } = await api.getCompanyDetails(companyId);\r\n-\r\n-                if (!masterUsers || masterUsers.length === 0) {\r\n-                    hideLoader();\r\n-                    return showToast('Esta empresa não possui usuários para representar.', 'info');\r\n-                }\r\n-\r\n-                let userToImpersonate = masterUsers.find(user => user.role === 'Proprietário');\r\n-\r\n-                if (!userToImpersonate) {\r\n-                    console.warn(`Nenhum 'Proprietário' encontrado para a empresa ${companyId}. A representar o primeiro utilizador da lista.`);\r\n-                    userToImpersonate = masterUsers[0];\r\n-                }\r\n-\r\n-                if (!userToImpersonate) {\r\n-                    hideLoader();\r\n-                    return showToast('Não foi encontrado um utilizador para representar.', 'error');\r\n-                }\r\n-                \r\n-                const userIdToImpersonate = userToImpersonate._id;\r\n-                const data = await api.impersonateUser(companyId, userIdToImpersonate);\r\n-\r\n-                // Utiliza a variável do módulo que guardamos no início\r\n-                if (typeof adminImpersonationCallback === 'function') {\r\n-                    adminImpersonationCallback(data);\r\n-                } else {\r\n-                    console.error(\"A função de callback para representação não foi fornecida ao painel de admin.\");\r\n-                    hideLoader();\r\n-                }\r\n-\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n- * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n- */\r\n-function openCompanyDetailsModal(company, users, masterUsers) {\r\n-    selectedCompanyForAdmin = company;\r\n-\r\n-    modalCompanyNameInput.value = company.nomeEmpresa;\r\n-    modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n-\r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n-    if (masterUsers && masterUsers.length > 0) {\r\n-        const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-        masterUsers.forEach(user => {\r\n-            const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n-\r\n-            const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n-                            ${roleOptions}\r\n-                        </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n-        });\r\n-    } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n-    }\r\n-\r\n-    // Adiciona os eventos DEPOIS de criar os botões\r\n-    addEventListenersToCompanyDetailsModal();\r\n-    companyDetailsModal.classList.remove('hidden');\r\n-    companyDetailsModal.style.display = 'flex';\r\n-}\r\n-\r\n-function addEventListenersToCompanyDetailsModal() {\r\n-    // Evento para os seletores de cargo (role)\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                // Recarrega os dados do modal para garantir consistência\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Evento para os botões de remover utilizador\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.currentTarget.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                // Recarrega os dados do modal\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-function openAddCompanyModal() {\r\n-    if (addCompanyForm) addCompanyForm.reset();\r\n-    if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n-    document.getElementById('addCompanyNameInput').focus();\r\n-}\r\n-\r\n-function closeAddCompanyModal() {\r\n-    if (addCompanyModal) addCompanyModal.classList.add('hidden');\r\n-}\r\n-\r\n-export function openAddUserModal(companyId, isAdmin = false) {\r\n-    const addUserForm = document.getElementById('addUserForm');\r\n-    const addUserModal = document.getElementById('addUserModal');\r\n-    const addUserRoleSelect = document.getElementById('addUserRoleSelect');\r\n-\r\n-    let availableRoles;\r\n-    if (isAdmin) {\r\n-        availableRoles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n-    } else {\r\n-        availableRoles = ['Gerente', 'Funcionário'];\r\n-    }\r\n-\r\n-    addUserRoleSelect.innerHTML = '';\r\n-    availableRoles.forEach(role => {\r\n-        const option = document.createElement('option');\r\n-        option.value = role;\r\n-        option.textContent = role;\r\n-        addUserRoleSelect.appendChild(option);\r\n-    });\r\n-\r\n-    if (addUserForm) {\r\n-        addUserForm.reset();\r\n-        addUserForm.dataset.companyId = companyId;\r\n-        addUserForm.dataset.isAdmin = isAdmin; // <<--- LINHA ADICIONADA: Guardamos o status aqui\r\n-    }\r\n-\r\n-    if (addUserModal) {\r\n-        addUserModal.classList.remove('hidden');\r\n-    }\r\n-    document.getElementById('addUsernameInput').focus();\r\n-}\r\n-\r\n-function closeAddUserModal() {\r\n-    if (addUserModal) addUserModal.classList.add('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Abre e preenche o modal de gestão de utilizadores para uma empresa específica.\r\n- * Busca os dados mais recentes da API e configura os eventos de interação.\r\n- * @param {object} company - O objeto da empresa cujos utilizadores serão geridos.\r\n- */\r\n-export async function openManageUsersModal(company) {\r\n-    // Validação inicial para garantir que recebemos a empresa correta\r\n-    if (!company || !company._id) {\r\n-        showToast('Erro: Não foi possível identificar a empresa para gerir os utilizadores.', 'error');\r\n-        return;\r\n-    }\r\n-\r\n-    showLoader();\r\n-    const manageUsersModal = document.getElementById('manageUsersModal');\r\n-    const companyUsersList = document.getElementById('companyUsersList');\r\n-\r\n-    try {\r\n-        // 1. Busca sempre os dados mais recentes da API\r\n-        const { masterUsers } = await api.getCompanyDetails(company._id);\r\n-\r\n-        // 2. Limpa a lista de utilizadores anterior\r\n-        if (companyUsersList) {\r\n-            companyUsersList.innerHTML = '';\r\n-        } else {\r\n-            console.error(\"Elemento 'companyUsersList' não foi encontrado no HTML.\");\r\n-            hideLoader();\r\n-            return; // Interrompe a função se o elemento não existir\r\n-        }\r\n-\r\n-        // 3. Constrói o HTML da nova lista de utilizadores\r\n-        if (masterUsers && masterUsers.length > 0) {\r\n-            const assignableRoles = ['Gerente', 'Funcionário'];\r\n-\r\n-            masterUsers.forEach(user => {\r\n-                const isOwner = user.role === 'Proprietário';\r\n-\r\n-                // Cria as opções do dropdown de cargos\r\n-                const roleOptions = assignableRoles.map(role =>\r\n-                    `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`\r\n-                ).join('');\r\n-\r\n-                // Se for proprietário, mostra texto; senão, mostra o dropdown.\r\n-                const roleHtml = isOwner\r\n-                    ? `<p class=\"text-sm text-gray-400 font-semibold\">Proprietário</p>`\r\n-                    : `<select class=\"role-select-owner-view bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">${roleOptions}</select>`;\r\n-\r\n-                // Se não for proprietário, mostra o botão de remover.\r\n-                const buttonHtml = isOwner\r\n-                    ? ''\r\n-                    : `<button class=\"remove-user-btn-owner-view bg-red-600 px-3 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>`;\r\n-\r\n-                const userRowHtml = `\r\n-                    <div class=\"bg-gray-700 rounded p-3 flex justify-between items-center\">\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n-                        <div class=\"flex items-center space-x-2\">\r\n-                            ${roleHtml}\r\n-                            ${buttonHtml}\r\n-                        </div>\r\n-                    </div>\r\n-                `;\r\n-                companyUsersList.insertAdjacentHTML('beforeend', userRowHtml);\r\n-            });\r\n-        } else {\r\n-            companyUsersList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum usuário cadastrado para esta empresa.</p>';\r\n-        }\r\n-\r\n-        // 4. Adiciona os eventos aos novos elementos criados dinamicamente\r\n-\r\n-        // Evento para a mudança de cargo (role)\r\n-        companyUsersList.querySelectorAll('.role-select-owner-view').forEach(select => {\r\n-            select.addEventListener('change', async (e) => {\r\n-                const userId = e.target.dataset.userId;\r\n-                const newRole = e.target.value;\r\n-\r\n-                if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                    await openManageUsersModal(company); // Recarrega o modal para reverter a mudança visual\r\n-                    return;\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    await api.updateUserRole(company._id, userId, newRole);\r\n-                    showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    // Recarrega o modal para garantir que a interface está 100% sincronizada\r\n-                    await openManageUsersModal(company);\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        // Evento para o botão de remover utilizador\r\n-        companyUsersList.querySelectorAll('.remove-user-btn-owner-view').forEach(button => {\r\n-            button.addEventListener('click', async (e) => {\r\n-                const userId = e.currentTarget.dataset.userId;\r\n-\r\n-                if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n-                    return;\r\n-                }\r\n-\r\n-                showLoader();\r\n-                try {\r\n-                    await api.deleteUserFromCompany(company._id, userId);\r\n-                    showToast('Utilizador removido com sucesso!');\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    // Recarrega sempre o modal para mostrar a lista atualizada\r\n-                    await openManageUsersModal(company);\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-        // 5. Mostra o modal\r\n-        if (manageUsersModal) {\r\n-            manageUsersModal.classList.remove('hidden');\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Busca os dados da API e preenche o dashboard do admin.\r\n- */\r\n-async function renderAdminDashboard() {\r\n-    showLoader();\r\n-    try {\r\n-        const stats = await api.getAdminDashboardStats();\r\n-\r\n-        // Preenche os cartões (KPIs)\r\n-        document.getElementById('kpiTotalCompanies').textContent = stats.totalCompanies;\r\n-        document.getElementById('kpiTotalUsers').textContent = stats.totalUsers;\r\n-        document.getElementById('kpiActiveSubscriptions').textContent = stats.activeSubscriptions;\r\n-\r\n-        // Renderiza o gráfico\r\n-        renderNewCompaniesChart(stats.newCompaniesLast30Days);\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza o gráfico de novas empresas.\r\n- * @param {Array} chartData - Os dados para o gráfico.\r\n- */\r\n-function renderNewCompaniesChart(chartData) {\r\n-    const canvas = document.getElementById('newCompaniesChart');\r\n-    if (!canvas) return;\r\n-    const ctx = canvas.getContext('2d');\r\n-\r\n-    // Prepara os dados para o Chart.js\r\n-    const labels = chartData.map(item => new Date(item.date).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' }));\r\n-    const data = chartData.map(item => item.count);\r\n-\r\n-    // Destrói o gráfico anterior se ele já existir (importante ao trocar de abas)\r\n-    if (newCompaniesChart) {\r\n-        newCompaniesChart.destroy();\r\n-    }\r\n-\r\n-    newCompaniesChart = new Chart(ctx, {\r\n-        type: 'line', // Gráfico de linha\r\n-        data: {\r\n-            labels: labels,\r\n-            datasets: [{\r\n-                label: 'Novas Empresas',\r\n-                data: data,\r\n-                backgroundColor: 'rgba(99, 102, 241, 0.2)',\r\n-                borderColor: 'rgba(99, 102, 241, 1)',\r\n-                borderWidth: 2,\r\n-                tension: 0.3, // Deixa a linha mais suave\r\n-                fill: true\r\n-            }]\r\n-        },\r\n-        options: {\r\n-            responsive: true,\r\n-            maintainAspectRatio: false,\r\n-            scales: {\r\n-                y: { \r\n-                    beginAtZero: true, \r\n-                    ticks: { color: '#9ca3af', stepSize: 1 }, // Garante que a escala seja de 1 em 1\r\n-                    grid: { color: 'rgba(156, 163, 175, 0.1)' } \r\n-                },\r\n-                x: { \r\n-                    ticks: { color: '#9ca3af' }, \r\n-                    grid: { color: 'rgba(156, 163, 175, 0.1)' } \r\n-                }\r\n-            },\r\n-            plugins: { \r\n-                legend: { display: false } // Esconde a legenda, já que só temos uma linha\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-function renderSubscriptionsView() {\r\n-    subscriptionsView.innerHTML = `\r\n-        <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg\">\r\n-            <div class=\"flex justify-between items-center mb-4 flex-wrap gap-4\">\r\n-                <h2 class=\"text-xl font-semibold text-white\">Gestão de Assinaturas</h2>\r\n-                <div class=\"flex items-center space-x-4\">\r\n-                    <input type=\"text\" id=\"subscriptionSearchInput\" placeholder=\"Pesquisar por nome ou CNPJ...\" class=\"w-64 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-indigo-500\">\r\n-                    <div class=\"flex items-center space-x-1 bg-gray-900/50 p-1 rounded-md border border-gray-700\">\r\n-                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors active\" data-status=\"all\">Todos</button>\r\n-                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"active\">Ativas</button>\r\n-                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"inactive\">Inativas</button>\r\n-                        <button class=\"sub-filter-btn px-3 py-1 text-sm rounded-md transition-colors\" data-status=\"pending_approval\">Pendentes</button>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-            <div id=\"subscriptionsTableContainer\" class=\"overflow-x-auto\">\r\n-                <p class=\"text-center text-gray-400 py-8\">A carregar dados...</p>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-    \r\n-    // Adiciona os event listeners para os filtros e a pesquisa\r\n-    document.getElementById('subscriptionSearchInput').addEventListener('input', handleSubscriptionFilter);\r\n-    document.querySelectorAll('.sub-filter-btn').forEach(btn => {\r\n-        btn.addEventListener('click', (e) => {\r\n-            document.querySelectorAll('.sub-filter-btn').forEach(b => b.classList.remove('active'));\r\n-            e.currentTarget.classList.add('active');\r\n-            handleSubscriptionFilter();\r\n-        });\r\n-    });\r\n-\r\n-    // Busca os dados da API\r\n-    fetchAndRenderSubscriptions();\r\n-}\r\n-\r\n-async function fetchAndRenderSubscriptions() {\r\n-    showLoader();\r\n-    const container = document.getElementById('subscriptionsTableContainer');\r\n-    try {\r\n-        // Busca os dados e guarda na variável global\r\n-        allSubscriptionsData = await api.getAdminSubscriptions();\r\n-        // Renderiza a tabela com todos os dados\r\n-        renderSubscriptionsTable(allSubscriptionsData);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-        container.innerHTML = '<p class=\"text-red-400 text-center py-8\">Não foi possível carregar os dados das assinaturas.</p>';\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-function handleSubscriptionFilter() {\r\n-    const searchTerm = document.getElementById('subscriptionSearchInput').value.toLowerCase();\r\n-    const activeStatus = document.querySelector('.sub-filter-btn.active').dataset.status;\r\n-\r\n-    const filteredData = allSubscriptionsData.filter(company => {\r\n-        const subStatus = company.subscription?.status || 'inactive';\r\n-        \r\n-        const matchesStatus = (activeStatus === 'all') || (subStatus === activeStatus);\r\n-        \r\n-        const matchesSearch = company.nomeEmpresa.toLowerCase().includes(searchTerm) ||\r\n-                              company.cnpj.replace(/\\D/g, '').includes(searchTerm.replace(/\\D/g, ''));\r\n-                              \r\n-        return matchesStatus && matchesSearch;\r\n-    });\r\n-\r\n-    renderSubscriptionsTable(filteredData);\r\n-}\r\n-\r\n-/**\r\n- * Renderiza a tabela HTML de assinaturas com base nos dados fornecidos.\r\n- * @param {Array} data - A lista de empresas com dados de assinatura para exibir.\r\n- */\r\n-function renderSubscriptionsTable(data) {\r\n-    const container = document.getElementById('subscriptionsTableContainer');\r\n-    if (data.length === 0) {\r\n-        container.innerHTML = '<p class=\"text-gray-400 text-center py-8\">Nenhuma assinatura encontrada para os filtros selecionados.</p>';\r\n-        return;\r\n-    }\r\n-\r\n-    const tableRows = data.map(company => {\r\n-        const sub = company.subscription || {};\r\n-        const endDate = sub.endDate ? new Date(sub.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-        \r\n-        return `\r\n-            <tr class=\"border-b border-gray-700 hover:bg-gray-700/50\">\r\n-                <td class=\"p-4\">${company.nomeEmpresa}</td>\r\n-                <td class=\"p-4 font-mono\">${formatCnpj(company.cnpj)}</td>\r\n-                <td class=\"p-4\">${getStatusBadge(sub.status)}</td>\r\n-                <td class=\"p-4\">${endDate}</td>\r\n-                <td class=\"p-4 font-mono text-xs\">${sub.mercadopagoPreapprovalId || 'N/A'}</td>\r\n-                <td class=\"p-4 text-right\">\r\n-                    <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">Detalhes</button>\r\n-                </td>\r\n-            </tr>\r\n-        `;\r\n-    }).join('');\r\n-\r\n-    container.innerHTML = `\r\n-        <table class=\"w-full text-sm text-left text-gray-300\">\r\n-            <thead class=\"text-xs text-gray-400 uppercase bg-gray-700\">\r\n-                <tr>\r\n-                    <th class=\"p-4\">Empresa</th>\r\n-                    <th class=\"p-4\">CNPJ</th>\r\n-                    <th class=\"p-4\">Status</th>\r\n-                    <th class=\"p-4\">Expira em</th>\r\n-                    <th class=\"p-4\">ID Mercado Pago</th>\r\n-                    <th class=\"p-4 text-right\">Ações</th>\r\n-                </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-                ${tableRows}\r\n-            </tbody>\r\n-        </table>\r\n-    `;\r\n-\r\n-    // --- CÓDIGO NOVO ADICIONADO AQUI ---\r\n-    // Após a tabela ser criada, adicionamos o event listener aos novos botões \"Detalhes\".\r\n-    container.querySelectorAll('.view-details-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const companyId = e.target.dataset.companyId;\r\n-            showLoader();\r\n-            try {\r\n-                // Reutilizamos a lógica que já funciona para buscar os dados\r\n-                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n-                // Reutilizamos a função que já abre o modal de detalhes\r\n-                openCompanyDetailsModal(company, users, masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n-/**\r\n- * Retorna uma badge de status colorida em HTML.\r\n- * @param {string} status - O status da assinatura.\r\n- */\r\n-function getStatusBadge(status) {\r\n-    // Mapeamento centralizado de status para aparência e texto.\r\n-    // Facilita a adição de novos status no futuro.\r\n-    const statusConfig = {\r\n-        active: { text: 'Ativa', style: 'bg-green-500/80 text-green-100' },\r\n-        inactive: { text: 'Inativa', style: 'bg-red-500/80 text-red-100' },\r\n-        pending_approval: { text: 'Pendente', style: 'bg-yellow-500/80 text-yellow-100' },\r\n-        pending: { text: 'Pendente', style: 'bg-yellow-500/80 text-yellow-100' },\r\n-        cancelled: { text: 'Cancelada', style: 'bg-gray-600 text-gray-200' },\r\n-        // Um caso padrão para qualquer outro status que possa aparecer\r\n-        default: { text: 'Desconhecido', style: 'bg-gray-400 text-gray-800' }\r\n-    };\r\n-\r\n-    // Garante que um status nulo ou indefinido seja tratado como 'inativo'\r\n-    const currentStatus = status || 'inactive';\r\n-\r\n-    // Obtém a configuração para o status atual, ou usa o padrão se não for encontrado\r\n-    const config = statusConfig[currentStatus] || statusConfig.default;\r\n-\r\n-    return `<span class=\"px-2.5 py-1 rounded-full text-xs font-semibold ${config.style}\">${config.text}</span>`;\r\n-}\r\n-\r\n-// ------ Handlers ------\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de criação de empresa.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddCompanySubmit(e) {\r\n-    e.preventDefault();\r\n-\r\n-    const payload = {\r\n-        nomeEmpresa: document.getElementById('addCompanyNameInput').value,\r\n-        cnpj: document.getElementById('addCompanyCnpjInput').value,\r\n-        // LINHA ADICIONADA:\r\n-        email: document.getElementById('addCompanyEmailInput').value,\r\n-        ownerUsername: document.getElementById('addOwnerUsernameInput').value,\r\n-        ownerPassword: document.getElementById('addOwnerPasswordInput').value\r\n-    };\r\n-\r\n-    // Removemos o campo 'senhaEmpresa' que não está a ser usado no backend\r\n-    // delete payload.senhaEmpresa;\r\n-\r\n-    showLoader();\r\n-    try {\r\n-        const data = await api.createCompany(payload);\r\n-        showToast(data.message, 'success');\r\n-        closeAddCompanyModal();\r\n-        await renderCompanyList(); // Atualiza a lista de empresas no painel\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de novo utilizador.\r\n- * @param {Event} e - O evento de submissão do formulário.\r\n- */\r\n-async function handleAddUserSubmit(e) {\r\n-    e.preventDefault();\r\n-    const form = e.target;\r\n-    const submitButton = form.querySelector('button[type=\"submit\"]');\r\n-    const companyId = form.dataset.companyId;\r\n-\r\n-    if (!companyId) {\r\n-        return showToast(\"Erro: Nenhuma empresa selecionada.\", \"error\");\r\n-    }\r\n-\r\n-    const isAdmin = form.dataset.isAdmin === 'true';\r\n-\r\n-    // (O resto da extração de dados do formulário continua igual)\r\n-    const username = document.getElementById('addUsernameInput').value.trim();\r\n-    const email = document.getElementById('addUserEmailInput').value.trim();\r\n-    const password = document.getElementById('addUserPasswordInput').value;\r\n-    const role = document.getElementById('addUserRoleSelect').value;\r\n-\r\n-    if (!username || !email || !password || !role) {\r\n-        return showToast('Por favor, preencha todos os campos.', 'error');\r\n-    }\r\n-\r\n-    showLoader();\r\n-    if (submitButton) submitButton.disabled = true;\r\n-\r\n-    try {\r\n-        await api.registerUser(username, password, email, role, companyId);\r\n-        showToast(`Usuário '${username}' criado com sucesso!`, 'success');\r\n-\r\n-        // --- INÍCIO DA MODIFICAÇÃO ---\r\n-\r\n-        if (!isAdmin) {\r\n-            // Caso 1: Se for o proprietário a adicionar, atualiza o modal de gestão.\r\n-            await openManageUsersModal({ _id: companyId });\r\n-        } else {\r\n-            // Caso 2 (NOVO): Se for o admin, busca os dados atualizados e reabre o modal de detalhes.\r\n-            const updatedData = await api.getCompanyDetails(companyId);\r\n-            openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-        }\r\n-\r\n-        // --- FIM DA MODIFICAÇÃO ---\r\n-\r\n-        closeAddUserModal();\r\n-        form.reset();\r\n-\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-        if (submitButton) submitButton.disabled = false;\r\n-    }\r\n-}\r\n-\r\n-// --- Funções para a Gestão de Anúncios ---\r\n-\r\n-/**\r\n- * Busca todos os anúncios da API e os exibe na lista.\r\n- */\r\n-async function renderAnnouncements() {\r\n-    // 1. Verifica se a função já está em execução. Se estiver, para aqui.\r\n-    if (isRenderingAnnouncements) {\r\n-        return;\r\n-    }\r\n-\r\n-    // 2. Sinaliza que a renderização começou.\r\n-    isRenderingAnnouncements = true;\r\n-    showLoader();\r\n-    announcementsList.innerHTML = ''; // Limpa a lista antiga\r\n-\r\n-    try {\r\n-        const announcements = await api.getAllAnnouncements();\r\n-        if (announcements.length === 0) {\r\n-            announcementsList.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum anúncio criado ainda.</p>';\r\n-        } else {\r\n-            announcements.forEach(ann => {\r\n-                const statusClass = ann.isActive ? 'bg-green-500' : 'bg-gray-500';\r\n-                const statusText = ann.isActive ? 'Ativo' : 'Inativo';\r\n-\r\n-                announcementsList.insertAdjacentHTML('beforeend', `\r\n-                    <div class=\"bg-gray-700 rounded p-4 flex justify-between items-center\">\r\n-                        <div>\r\n-                            <p class=\"text-white\">${ann.message}</p>\r\n-                            <p class=\"text-xs text-gray-400\">${ann.link || 'Sem link'}</p>\r\n-                        </div>\r\n-                        <div class=\"flex items-center space-x-3\">\r\n-                            <span class=\"text-xs font-bold text-white px-2 py-1 rounded-full ${statusClass}\">${statusText}</span>\r\n-                            <button class=\"edit-announcement-btn text-blue-400 hover:text-blue-300\" data-id=\"${ann._id}\"><i class=\"fas fa-edit\"></i></button>\r\n-                            <button class=\"delete-announcement-btn text-red-400 hover:text-red-300\" data-id=\"${ann._id}\"><i class=\"fas fa-trash\"></i></button>\r\n-                        </div>\r\n-                    </div>\r\n-                `);\r\n-            });\r\n-        }\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        isRenderingAnnouncements = false;\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Abre o modal de anúncios, seja para criar um novo ou editar um existente.\r\n- * @param {object | null} announcement - O objeto do anúncio para editar, ou null para criar.\r\n- */\r\n-function openAnnouncementModal(announcement = null) {\r\n-    announcementForm.reset(); // Limpa o formulário\r\n-\r\n-    if (announcement) {\r\n-        // Modo Edição: Preenche o formulário com os dados existentes\r\n-        announcementModalTitle.textContent = 'Editar Anúncio';\r\n-        document.getElementById('announcementId').value = announcement._id;\r\n-        document.getElementById('announcementMessageInput').value = announcement.message;\r\n-        document.getElementById('announcementLink').value = announcement.link;\r\n-        document.getElementById('announcementIsActive').checked = announcement.isActive;\r\n-    } else {\r\n-        // Modo Criação: Deixa o formulário pronto para um novo anúncio\r\n-        announcementModalTitle.textContent = 'Novo Anúncio';\r\n-        document.getElementById('announcementId').value = '';\r\n-    }\r\n-\r\n-    announcementModal.classList.remove('hidden');\r\n-}\r\n-\r\n-/**\r\n- * Lida com a submissão do formulário de anúncio (criação ou edição).\r\n- */\r\n-async function handleAnnouncementFormSubmit(e) {\r\n-    e.preventDefault();\r\n-    const id = document.getElementById('announcementId').value;\r\n-    const message = document.getElementById('announcementMessageInput').value;\r\n-    const link = document.getElementById('announcementLink').value;\r\n-    const isActive = document.getElementById('announcementIsActive').checked;\r\n-    const payload = { message, link, isActive };\r\n-    showLoader();\r\n-    try {\r\n-        if (id) {\r\n-            // Se tem um ID, é uma atualização\r\n-            await api.updateAnnouncement(id, payload);\r\n-            showToast('Anúncio atualizado com sucesso!', 'success');\r\n-        } else {\r\n-            // Se não tem ID, é uma criação\r\n-            await api.createAnnouncement(payload);\r\n-            showToast('Anúncio criado com sucesso!', 'success');\r\n-        }\r\n-        if (announcementModal) {\r\n-            announcementModal.classList.add('hidden');\r\n-        }\r\n-\r\n-        await renderAnnouncements(); // Atualiza a lista\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-/**\r\n- * Renderiza a estrutura da vista de Configurações e busca os templates de e-mail.\r\n- */\r\n-function renderSettingsView() {\r\n-    settingsView.innerHTML = `\r\n-        <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg flex space-x-6 h-full\">\r\n-            <div class=\"w-1/4 border-r border-gray-700 pr-6\">\r\n-                <h3 class=\"text-xl font-semibold text-gray-100 mb-4\">Templates de E-mail</h3>\r\n-                <div id=\"emailTemplatesList\" class=\"space-y-2\">\r\n-                    <p class=\"text-gray-400\">A carregar...</p>\r\n-                </div>\r\n-            </div>\r\n-            \r\n-            <div id=\"emailEditorContainer\" class=\"w-5/12 opacity-50 pointer-events-none\">\r\n-                <h4 id=\"editingTemplateName\" class=\"text-lg font-bold text-indigo-400 mb-4\">Selecione um template para editar</h4>\r\n-                <div class=\"space-y-4\">\r\n-                    <div>\r\n-                        <label for=\"templateSubject\" class=\"block text-sm font-medium text-gray-300\">Assunto</label>\r\n-                        <input type=\"text\" id=\"templateSubject\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white\">\r\n-                    </div>\r\n-                    <div>\r\n-                        <label for=\"templateBody\" class=\"block text-sm font-medium text-gray-300\">Corpo do E-mail</label>\r\n-                        <textarea id=\"templateBody\" rows=\"12\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white font-mono text-sm\"></textarea>\r\n-                        <p class=\"text-xs text-gray-400 mt-2\">Use placeholders como {{resetLink}}, {{userName}}, etc.</p>\r\n-                    </div>\r\n-                    <div class=\"flex justify-end\">\r\n-                        <button id=\"saveEmailTemplateBtn\" class=\"bg-green-600 text-white py-2 px-5 rounded-md hover:bg-green-700\">Salvar Alterações</button>\r\n-                    </div>\r\n-                </div>\r\n-            </div>\r\n-\r\n-            <div class=\"w-1/3\">\r\n-                 <h4 class=\"text-lg font-bold text-gray-400 mb-4\">Pré-visualização</h4>\r\n-                 <div class=\"border border-gray-700 rounded-md h-[85%] bg-white\">\r\n-                    <iframe id=\"emailPreviewFrame\" class=\"w-full h-full\"></iframe>\r\n-                 </div>\r\n-            </div>\r\n-        </div>\r\n-    `;\r\n-\r\n-    // Busca os dados e adiciona os event listeners\r\n-    fetchAndSetupEmailEditor();\r\n-}\r\n-\r\n-/**\r\n- * Busca os templates e configura os eventos do editor.\r\n- */\r\n-async function fetchAndSetupEmailEditor() {\r\n-    const templatesListDiv = document.getElementById('emailTemplatesList');\r\n-    const editorContainer = document.getElementById('emailEditorContainer');\r\n-    const saveBtn = document.getElementById('saveEmailTemplateBtn');\r\n-    const templateBodyTextarea = document.getElementById('templateBody');\r\n-    const previewFrame = document.getElementById('emailPreviewFrame');\r\n-\r\n-    // Função auxiliar para atualizar o iframe\r\n-    const updateEmailPreview = (htmlContent) => {\r\n-        if (!previewFrame) return;\r\n-        const previewDoc = previewFrame.contentWindow.document;\r\n-        previewDoc.open();\r\n-        previewDoc.write(htmlContent);\r\n-        previewDoc.close();\r\n-    };\r\n-\r\n-    try {\r\n-        const templates = await api.getEmailTemplates();\r\n-        templatesListDiv.innerHTML = templates.map(t =>\r\n-            // ... (o HTML para os botões da lista continua o mesmo)\r\n-            `<button class=\"email-template-item text-left w-full p-3 rounded-md hover:bg-indigo-600 focus:outline-none focus:bg-indigo-600\" data-id=\"${t._id}\">\r\n-                <span class=\"font-semibold text-white\">${t.name}</span>\r\n-                <span class=\"block text-xs text-gray-400 truncate\">${t.subject}</span>\r\n-            </button>`\r\n-        ).join('');\r\n-\r\n-        // Adiciona evento de clique a cada item da lista\r\n-        document.querySelectorAll('.email-template-item').forEach(item => {\r\n-            item.addEventListener('click', async (e) => {\r\n-                const target = e.currentTarget;\r\n-                currentEditingTemplateId = target.dataset.id;\r\n-                \r\n-                document.querySelectorAll('.email-template-item').forEach(i => i.classList.remove('bg-indigo-600'));\r\n-                target.classList.add('bg-indigo-600');\r\n-                \r\n-                showLoader();\r\n-                try {\r\n-                    const fullTemplate = await api.getEmailTemplateById(currentEditingTemplateId);\r\n-                    \r\n-                    document.getElementById('editingTemplateName').textContent = `A editar: ${fullTemplate.name}`;\r\n-                    document.getElementById('templateSubject').value = fullTemplate.subject;\r\n-                    templateBodyTextarea.value = fullTemplate.body;\r\n-                    \r\n-                    // ATUALIZAÇÃO INICIAL DA PRÉ-VISUALIZAÇÃO\r\n-                    updateEmailPreview(fullTemplate.body);\r\n-\r\n-                    editorContainer.classList.remove('opacity-50', 'pointer-events-none');\r\n-                } catch (error) {\r\n-                    showToast('Erro ao carregar detalhes do template.', 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            });\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        templatesListDiv.innerHTML = '<p class=\"text-red-400\">Erro ao carregar templates.</p>';\r\n-    }\r\n-\r\n-    // NOVO EVENTO: Atualiza a pré-visualização em tempo real enquanto digita\r\n-    templateBodyTextarea.addEventListener('input', (e) => {\r\n-        updateEmailPreview(e.target.value);\r\n-    });\r\n-\r\n-    // Evento para salvar o template (inalterado)\r\n-    saveBtn.addEventListener('click', async () => {\r\n-        if (!currentEditingTemplateId) return;\r\n-        const subject = document.getElementById('templateSubject').value;\r\n-        const body = templateBodyTextarea.value;\r\n-        \r\n-        showLoader();\r\n-        try {\r\n-            await api.updateEmailTemplate(currentEditingTemplateId, { subject, body });\r\n-            showToast('Template salvo com sucesso!', 'success');\r\n-        } catch (error) {\r\n-            showToast('Erro ao salvar o template.', 'error');\r\n-        } finally {\r\n-            hideLoader();\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// =================================================================================\r\n-// =================================================================================\r\n-// EVENT LISTENERS\r\n-// =================================================================================\r\n-// =================================================================================\r\n-\r\n-if (viewSettingsTab) viewSettingsTab.addEventListener('click', () => switchAdminView('settings'));\r\n-\r\n-if (viewSubscriptionsTab) viewSubscriptionsTab.addEventListener('click', () => switchAdminView('subscriptions'));\r\n-\r\n-// --- DashBoard ---\r\n-if (viewDashboardTab) viewDashboardTab.addEventListener('click', () => switchAdminView('dashboard'));\r\n-\r\n-\r\n-if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n-if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n-// Abas\r\n-if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n-if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n-\r\n-if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-if (closeCompanyModal) {\r\n-    closeCompanyModal.addEventListener('click', () => {\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        companyDetailsModal.style.display = 'none'; // Adicione esta linha\r\n-    });\r\n-}\r\n-if (addUserBtn) addUserBtn.addEventListener('click', () => openAddUserModal(selectedCompanyForAdmin._id, true));\r\n-if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n-if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n-if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n-if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n-if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n-if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n-\r\n-// Botões do modal de anúncios\r\n-if (openAnnouncementModalBtn) {\r\n-    openAnnouncementModalBtn.addEventListener('click', () => openAnnouncementModal());\r\n-}\r\n-\r\n-if (announcementForm) {\r\n-    announcementForm.addEventListener('submit', handleAnnouncementFormSubmit);\r\n-}\r\n-\r\n-if (cancelAnnouncementBtn) {\r\n-    cancelAnnouncementBtn.addEventListener('click', () => {\r\n-        if (announcementModal) {\r\n-            announcementModal.classList.add('hidden');\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// Eventos na lista de anúncios (para os botões de editar e apagar)\r\n-if (announcementsList) {\r\n-    announcementsList.addEventListener('click', async (e) => {\r\n-        const editBtn = e.target.closest('.edit-announcement-btn');\r\n-        const deleteBtn = e.target.closest('.delete-announcement-btn');\r\n-\r\n-        if (editBtn) {\r\n-            showLoader();\r\n-            try {\r\n-                const allAnnouncements = await api.getAllAnnouncements();\r\n-                const annToEdit = allAnnouncements.find(a => a._id === editBtn.dataset.id);\r\n-                if (annToEdit) openAnnouncementModal(annToEdit);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        }\r\n-\r\n-        if (deleteBtn) {\r\n-            if (confirm('Tem a certeza que deseja apagar este anúncio?')) {\r\n-                showLoader();\r\n-                try {\r\n-                    await api.deleteAnnouncement(deleteBtn.dataset.id);\r\n-                    showToast('Anúncio apagado com sucesso.', 'success');\r\n-                    await renderAnnouncements();\r\n-                } catch (error) {\r\n-                    showToast(error.message, 'error');\r\n-                } finally {\r\n-                    hideLoader();\r\n-                }\r\n-            }\r\n-        }\r\n-    });\r\n-}\r\n"
                },
                {
                    "date": 1754164242413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1064,8 +1064,35 @@\n     }\r\n }\r\n \r\n /**\r\n+ * Alterna entre as vistas do sub-menu da aba de E-mails.\r\n+ * @param {'edit' | 'bulk'} subViewToShow - A vista a ser mostrada.\r\n+ */\r\n+function switchEmailSubView(subViewToShow) {\r\n+    const editBtn = document.getElementById('email-submenu-edit');\r\n+    const bulkBtn = document.getElementById('email-submenu-bulk');\r\n+    const contentDiv = document.getElementById('email-subview-content');\r\n+    contentDiv.innerHTML = ''; // Limpa o conteúdo anterior\r\n+\r\n+    // Reseta o estilo dos botões\r\n+    [editBtn, bulkBtn].forEach(btn => {\r\n+        btn.classList.remove('bg-indigo-600', 'text-white');\r\n+        btn.classList.add('text-gray-400', 'hover:bg-gray-700');\r\n+    });\r\n+\r\n+    if (subViewToShow === 'edit') {\r\n+        editBtn.classList.add('bg-indigo-600', 'text-white');\r\n+        editBtn.classList.remove('text-gray-400', 'hover:bg-gray-700');\r\n+        renderEmailEditorView(); // Função que desenha o editor de templates\r\n+    } else if (subViewToShow === 'bulk') {\r\n+        bulkBtn.classList.add('bg-indigo-600', 'text-white');\r\n+        bulkBtn.classList.remove('text-gray-400', 'hover:bg-gray-700');\r\n+        renderBulkEmailView(); // Função que desenha o formulário de envio em massa\r\n+    }\r\n+}\r\n+\r\n+/**\r\n  * Renderiza a estrutura da vista de Configurações e busca os templates de e-mail.\r\n  */\r\n function renderSettingsView() {\r\n     settingsView.innerHTML = `\r\n"
                },
                {
                    "date": 1754164364485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1117,9 +1117,49 @@\n \r\n /**\r\n  * Busca os templates e configura os eventos do editor.\r\n  */\r\n-async function fetchAndSetupEmailEditor() {\r\n+async function renderEmailEditorView() {\r\n+    const container = document.getElementById('email-subview-content');\r\n+\r\n+    // 1. Desenha a estrutura HTML completa para esta vista\r\n+    container.innerHTML = `\r\n+        <div class=\"flex space-x-6 h-full\">\r\n+            <div class=\"w-1/4 border-r border-gray-700 pr-6\">\r\n+                <h3 class=\"text-xl font-semibold text-gray-100 mb-4\">Templates de E-mail</h3>\r\n+                <div id=\"emailTemplatesList\" class=\"space-y-2\">\r\n+                    <p class=\"text-gray-400\">A carregar...</p>\r\n+                </div>\r\n+            </div>\r\n+            \r\n+            <div id=\"emailEditorContainer\" class=\"w-5/12 opacity-50 pointer-events-none\">\r\n+                <h4 id=\"editingTemplateName\" class=\"text-lg font-bold text-indigo-400 mb-4\">Selecione um template para editar</h4>\r\n+                <div class=\"space-y-4\">\r\n+                    <div>\r\n+                        <label for=\"templateSubject\" class=\"block text-sm font-medium text-gray-300\">Assunto</label>\r\n+                        <input type=\"text\" id=\"templateSubject\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white\">\r\n+                    </div>\r\n+                    <div>\r\n+                        <label for=\"templateBody\" class=\"block text-sm font-medium text-gray-300\">Corpo do E-mail</label>\r\n+                        <textarea id=\"templateBody\" rows=\"12\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white font-mono text-sm\"></textarea>\r\n+                        <p class=\"text-xs text-gray-400 mt-2\">Use placeholders como {{resetLink}}, {{companyName}}, etc.</p>\r\n+                    </div>\r\n+                    <div class=\"flex justify-end\">\r\n+                        <button id=\"saveEmailTemplateBtn\" class=\"bg-green-600 text-white py-2 px-5 rounded-md hover:bg-green-700\">Salvar Alterações</button>\r\n+                    </div>\r\n+                </div>\r\n+            </div>\r\n+\r\n+            <div class=\"w-1/3\">\r\n+                 <h4 class=\"text-lg font-bold text-gray-400 mb-4\">Pré-visualização</h4>\r\n+                 <div class=\"border border-gray-700 rounded-md h-[85%] bg-white\">\r\n+                    <iframe id=\"emailPreviewFrame\" class=\"w-full h-full\"></iframe>\r\n+                 </div>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+\r\n+    // 2. Após desenhar o HTML, busca os dados e configura os eventos\r\n     const templatesListDiv = document.getElementById('emailTemplatesList');\r\n     const editorContainer = document.getElementById('emailEditorContainer');\r\n     const saveBtn = document.getElementById('saveEmailTemplateBtn');\r\n     const templateBodyTextarea = document.getElementById('templateBody');\r\n@@ -1136,9 +1176,8 @@\n \r\n     try {\r\n         const templates = await api.getEmailTemplates();\r\n         templatesListDiv.innerHTML = templates.map(t =>\r\n-            // ... (o HTML para os botões da lista continua o mesmo)\r\n             `<button class=\"email-template-item text-left w-full p-3 rounded-md hover:bg-indigo-600 focus:outline-none focus:bg-indigo-600\" data-id=\"${t._id}\">\r\n                 <span class=\"font-semibold text-white\">${t.name}</span>\r\n                 <span class=\"block text-xs text-gray-400 truncate\">${t.subject}</span>\r\n             </button>`\r\n@@ -1160,11 +1199,9 @@\n                     document.getElementById('editingTemplateName').textContent = `A editar: ${fullTemplate.name}`;\r\n                     document.getElementById('templateSubject').value = fullTemplate.subject;\r\n                     templateBodyTextarea.value = fullTemplate.body;\r\n                     \r\n-                    // ATUALIZAÇÃO INICIAL DA PRÉ-VISUALIZAÇÃO\r\n                     updateEmailPreview(fullTemplate.body);\r\n-\r\n                     editorContainer.classList.remove('opacity-50', 'pointer-events-none');\r\n                 } catch (error) {\r\n                     showToast('Erro ao carregar detalhes do template.', 'error');\r\n                 } finally {\r\n@@ -1176,16 +1213,17 @@\n     } catch (error) {\r\n         templatesListDiv.innerHTML = '<p class=\"text-red-400\">Erro ao carregar templates.</p>';\r\n     }\r\n \r\n-    // NOVO EVENTO: Atualiza a pré-visualização em tempo real enquanto digita\r\n+    // Evento para atualizar a pré-visualização em tempo real\r\n     templateBodyTextarea.addEventListener('input', (e) => {\r\n         updateEmailPreview(e.target.value);\r\n     });\r\n \r\n-    // Evento para salvar o template (inalterado)\r\n+    // Evento para salvar o template\r\n     saveBtn.addEventListener('click', async () => {\r\n         if (!currentEditingTemplateId) return;\r\n+        \r\n         const subject = document.getElementById('templateSubject').value;\r\n         const body = templateBodyTextarea.value;\r\n         \r\n         showLoader();\r\n"
                },
                {
                    "date": 1754164386256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1237,8 +1237,39 @@\n         }\r\n     });\r\n }\r\n \r\n+function renderBulkEmailView() {\r\n+    const container = document.getElementById('email-subview-content');\r\n+    container.innerHTML = `\r\n+        <div class=\"space-y-4\">\r\n+            <div>\r\n+                <label for=\"bulkEmailAudience\" class=\"block text-sm font-medium text-gray-300\">Enviar Para</label>\r\n+                <select id=\"bulkEmailAudience\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white\">\r\n+                    <option value=\"allProprietors\">Todos os Proprietários</option>\r\n+                    <option value=\"activeSubscribers\">Apenas Empresas com Assinatura Ativa</option>\r\n+                    <option value=\"inactiveSubscribers\">Apenas Empresas com Assinatura Inativa</option>\r\n+                    <option value=\"allUsers\">Todos os Utilizadores (CUIDADO!)</option>\r\n+                </select>\r\n+            </div>\r\n+            <div>\r\n+                <label for=\"bulkEmailSubject\" class=\"block text-sm font-medium text-gray-300\">Assunto</label>\r\n+                <input type=\"text\" id=\"bulkEmailSubject\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white\">\r\n+            </div>\r\n+            <div>\r\n+                <label for=\"bulkEmailBody\" class=\"block text-sm font-medium text-gray-300\">Corpo do E-mail (suporta HTML)</label>\r\n+                <textarea id=\"bulkEmailBody\" rows=\"12\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white font-mono text-sm\"></textarea>\r\n+            </div>\r\n+            <div class=\"flex justify-end\">\r\n+                <button id=\"sendBulkEmailBtn\" class=\"bg-blue-600 text-white py-2 px-5 rounded-md hover:bg-blue-700\">Enviar E-mail em Massa</button>\r\n+            </div>\r\n+        </div>\r\n+    `;\r\n+\r\n+    // Adiciona o event listener para o botão de envio\r\n+    document.getElementById('sendBulkEmailBtn').addEventListener('click', handleSendBulkEmail);\r\n+}\r\n+\r\n function renderSearchResults(results) {\r\n     const container = document.getElementById('searchResultsContainer');\r\n     if (!results || (results.users.length === 0 && results.companies.length === 0)) {\r\n         container.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum resultado encontrado.</p>';\r\n"
                },
                {
                    "date": 1754164394443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1268,8 +1268,31 @@\n     // Adiciona o event listener para o botão de envio\r\n     document.getElementById('sendBulkEmailBtn').addEventListener('click', handleSendBulkEmail);\r\n }\r\n \r\n+async function handleSendBulkEmail() {\r\n+    const audience = document.getElementById('bulkEmailAudience').value;\r\n+    const subject = document.getElementById('bulkEmailSubject').value;\r\n+    const body = document.getElementById('bulkEmailBody').value;\r\n+\r\n+    if (!subject || !body) {\r\n+        showToast('Assunto e Corpo do e-mail são obrigatórios.', 'error');\r\n+        return;\r\n+    }\r\n+\r\n+    if (confirm(`Tem a certeza que deseja enviar este e-mail para o público selecionado: \"${audience}\"?`)) {\r\n+        showLoader();\r\n+        try {\r\n+            const response = await api.sendBulkEmail({ audience, subject, body });\r\n+            showToast(response.message, 'success');\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    }\r\n+}\r\n+\r\n function renderSearchResults(results) {\r\n     const container = document.getElementById('searchResultsContainer');\r\n     if (!results || (results.users.length === 0 && results.companies.length === 0)) {\r\n         container.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum resultado encontrado.</p>';\r\n"
                },
                {
                    "date": 1754320902558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -775,26 +775,21 @@\n  * Retorna uma badge de status colorida em HTML.\r\n  * @param {string} status - O status da assinatura.\r\n  */\r\n function getStatusBadge(status) {\r\n-    // Mapeamento centralizado de status para aparência e texto.\r\n-    // Facilita a adição de novos status no futuro.\r\n+    const currentStatus = status || 'inactive';\r\n+    \r\n     const statusConfig = {\r\n         active: { text: 'Ativa', style: 'bg-green-500/80 text-green-100' },\r\n         inactive: { text: 'Inativa', style: 'bg-red-500/80 text-red-100' },\r\n         pending_approval: { text: 'Pendente', style: 'bg-yellow-500/80 text-yellow-100' },\r\n         pending: { text: 'Pendente', style: 'bg-yellow-500/80 text-yellow-100' },\r\n         cancelled: { text: 'Cancelada', style: 'bg-gray-600 text-gray-200' },\r\n-        // Um caso padrão para qualquer outro status que possa aparecer\r\n+        expired: { text: 'Expirada', style: 'bg-orange-500/80 text-orange-100' }, // <-- NOVA LINHA\r\n         default: { text: 'Desconhecido', style: 'bg-gray-400 text-gray-800' }\r\n     };\r\n \r\n-    // Garante que um status nulo ou indefinido seja tratado como 'inativo'\r\n-    const currentStatus = status || 'inactive';\r\n-\r\n-    // Obtém a configuração para o status atual, ou usa o padrão se não for encontrado\r\n     const config = statusConfig[currentStatus] || statusConfig.default;\r\n-\r\n     return `<span class=\"px-2.5 py-1 rounded-full text-xs font-semibold ${config.style}\">${config.text}</span>`;\r\n }\r\n \r\n // ------ Handlers ------\r\n"
                },
                {
                    "date": 1754321641407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,57 +281,157 @@\n     });\r\n }\r\n \r\n /**\r\n- * Abre e preenche o modal com os detalhes de uma empresa e seus usuários.\r\n+ * Função auxiliar para atualizar os detalhes da assinatura no modal.\r\n+ * @param {object} subscription - O objeto de assinatura da empresa.\r\n+ */\r\n+function updateSubscriptionDetails(subscription) {\r\n+    const statusEl = document.getElementById('subscriptionStatus');\r\n+    const endDateEl = document.getElementById('subscriptionEndDate');\r\n+    const adminSubscriptionManagement = document.getElementById('adminSubscriptionManagement');\r\n+    const today = new Date();\r\n+\r\n+    if (!statusEl || !endDateEl || !adminSubscriptionManagement) return;\r\n+\r\n+    adminSubscriptionManagement.classList.remove('hidden');\r\n+    let currentStatus = subscription?.status || 'inactive';\r\n+    \r\n+    // Calcula o status 'expirada' em tempo real para o modal\r\n+    if (currentStatus === 'active' && subscription.endDate && new Date(subscription.endDate) < today) {\r\n+        currentStatus = 'expired';\r\n+    }\r\n+\r\n+    statusEl.innerHTML = getStatusBadge(currentStatus);\r\n+    endDateEl.textContent = subscription.endDate ? new Date(subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n+}\r\n+\r\n+/**\r\n+ * Abre e preenche o modal com os detalhes de uma empresa específica.\r\n  * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de usuários da empresa.\r\n- * @param {Array} masterUsers - A lista de usuários do banco mestre.\r\n+ * @param {Array} users - A lista de utilizadores do tenant.\r\n+ * @param {Array} masterUsers - A lista de utilizadores do banco de dados mestre.\r\n  */\r\n function openCompanyDetailsModal(company, users, masterUsers) {\r\n+    // 1. Guarda a referência da empresa selecionada para uso nos handlers\r\n     selectedCompanyForAdmin = company;\r\n \r\n+    // 2. Referências aos elementos do Modal\r\n+    const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n+    const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n+    const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n+    const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n+    \r\n+    // 3. Preenche os dados básicos da empresa e da assinatura\r\n     modalCompanyNameInput.value = company.nomeEmpresa;\r\n     modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n-    modalCompanyPasswordInput.value = '';\r\n+    modalCompanyPasswordInput.value = ''; // Limpa o campo de senha por segurança\r\n+    updateSubscriptionDetails(company.subscription);\r\n \r\n-    adminSubscriptionManagement.classList.remove('hidden');\r\n-    if (company.subscription && company.subscription.status) {\r\n-        subscriptionStatus.textContent = company.subscription.status;\r\n-        subscriptionStatus.className = `ml-2 font-bold ${company.subscription.status === 'active' ? 'text-green-400' : 'text-red-400'}`;\r\n-        subscriptionEndDate.textContent = company.subscription.endDate ? new Date(company.subscription.endDate).toLocaleDateString('pt-BR') : 'N/A';\r\n-    } else {\r\n-        subscriptionStatus.textContent = 'Não configurada';\r\n-        subscriptionEndDate.textContent = 'N/A';\r\n-    }\r\n-\r\n-    modalCompanyUsers.innerHTML = '';\r\n+    // 4. Preenche a lista de utilizadores\r\n+    modalCompanyUsers.innerHTML = ''; // Limpa a lista anterior\r\n     if (masterUsers && masterUsers.length > 0) {\r\n         const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n         masterUsers.forEach(user => {\r\n             const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n-\r\n             const userHtml = `\r\n-                <div class=\"bg-gray-700 rounded p-2 flex justify-between items-center mb-2\">\r\n-                    <span class=\"text-white\">${user.username}</span>\r\n-                    <div class=\"flex items-center space-x-2\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n+                <div class=\"bg-gray-800 p-3 rounded-md flex justify-between items-center mb-2\">\r\n+                    <div>\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <p class=\"text-xs text-gray-400\">${user.email || 'Sem e-mail'}</p>\r\n+                    </div>\r\n+                    <div class=\"flex items-center space-x-4\">\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\" ${user.role === 'Proprietário' ? 'disabled' : ''}>\r\n                             ${roleOptions}\r\n                         </select>\r\n-                        <button class=\"remove-user-btn bg-red-600 px-2 py-1 rounded text-xs hover:bg-red-700\" data-user-id=\"${user._id}\">Remover</button>\r\n+                        <button class=\"remove-user-btn text-red-400 hover:text-red-300 ${user.role === 'Proprietário' ? 'hidden' : ''}\" data-user-id=\"${user._id}\" title=\"Remover Utilizador\">\r\n+                            <i class=\"fas fa-trash\"></i>\r\n+                        </button>\r\n                     </div>\r\n-                </div>\r\n-            `;\r\n+                </div>`;\r\n             modalCompanyUsers.insertAdjacentHTML('beforeend', userHtml);\r\n         });\r\n     } else {\r\n-        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400\">Nenhum usuário cadastrado.</p>';\r\n+        modalCompanyUsers.innerHTML = '<p class=\"text-gray-400 text-center\">Nenhum utilizador encontrado para esta empresa.</p>';\r\n     }\r\n \r\n-    // Adiciona os eventos DEPOIS de criar os botões\r\n-    addEventListenersToCompanyDetailsModal();\r\n+    // 5. Configura os eventos para os elementos da lista de utilizadores\r\n+    modalCompanyUsers.querySelectorAll('.role-select').forEach(select => {\r\n+        select.addEventListener('change', async (e) => {\r\n+            const userId = e.target.dataset.userId;\r\n+            const newRole = e.target.value;\r\n+            if (confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n+                showLoader();\r\n+                try {\r\n+                    await api.updateUserRole(company._id, userId, newRole);\r\n+                    showToast('Cargo atualizado com sucesso!');\r\n+                    const data = await api.getCompanyDetails(company._id); // Recarrega os dados\r\n+                    openCompanyDetailsModal(data.company, data.users, data.masterUsers); // Reabre o modal com dados frescos\r\n+                } catch (error) { showToast(error.message, 'error'); } finally { hideLoader(); }\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    modalCompanyUsers.querySelectorAll('.remove-user-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const userId = e.currentTarget.dataset.userId;\r\n+            if (confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+                showLoader();\r\n+                try {\r\n+                    await api.deleteUserFromCompany(company._id, userId);\r\n+                    showToast('Utilizador removido com sucesso!');\r\n+                    const data = await api.getCompanyDetails(company._id); // Recarrega os dados\r\n+                    openCompanyDetailsModal(data.company, data.users, data.masterUsers); // Reabre o modal\r\n+                } catch (error) { showToast(error.message, 'error'); } finally { hideLoader(); }\r\n+            }\r\n+        });\r\n+    });\r\n+\r\n+    // 6. Define as funções de handler para os botões principais do modal\r\n+    const handleSaveDetails = async () => { /* ... sua lógica para salvar ... */ };\r\n+    const handleDelete = async () => { /* ... sua lógica para apagar ... */ };\r\n+    const handleAddUser = () => openAddUserModal(company._id, true);\r\n+    \r\n+    const handleAddSubscription = async () => {\r\n+        const days = document.getElementById('daysToAddInput').value;\r\n+        if (!days || parseInt(days) <= 0) return showToast('Por favor, insira um número de dias válido.', 'error');\r\n+        showLoader();\r\n+        try {\r\n+            const updatedData = await api.addSubscription(company._id, days);\r\n+            showToast('Assinatura adicionada com sucesso!', 'success');\r\n+            updateSubscriptionDetails(updatedData.company.subscription);\r\n+            fetchAndRenderSubscriptions(); // Atualiza a tabela principal em segundo plano\r\n+        } catch (error) { showToast(error.message, 'error'); } finally { hideLoader(); }\r\n+    };\r\n+\r\n+    const handleRemoveSubscription = async () => {\r\n+        if (!confirm(`Tem a certeza que deseja remover a assinatura da empresa ${company.nomeEmpresa}?`)) return;\r\n+        showLoader();\r\n+        try {\r\n+            const updatedData = await api.removeSubscription(company._id);\r\n+            showToast('Assinatura removida com sucesso!', 'success');\r\n+            updateSubscriptionDetails(updatedData.company.subscription);\r\n+            fetchAndRenderSubscriptions(); // Atualiza a tabela principal em segundo plano\r\n+        } catch (error) { showToast(error.message, 'error'); } finally { hideLoader(); }\r\n+    };\r\n+\r\n+    // 7. Limpa listeners antigos e adiciona os novos para evitar bugs de múltiplos cliques\r\n+    const cleanAndSetListener = (btn, handler) => {\r\n+        if (!btn) return;\r\n+        const newBtn = btn.cloneNode(true);\r\n+        btn.parentNode.replaceChild(newBtn, btn);\r\n+        newBtn.addEventListener('click', handler);\r\n+    };\r\n+\r\n+    cleanAndSetListener(document.getElementById('saveCompanyDetailsBtn'), handleSaveDetails);\r\n+    cleanAndSetListener(document.getElementById('deleteCompanyBtn'), handleDelete);\r\n+    cleanAndSetListener(document.getElementById('addUserBtn'), handleAddUser);\r\n+    cleanAndSetListener(document.getElementById('addSubscriptionBtn'), handleAddSubscription);\r\n+    cleanAndSetListener(document.getElementById('removeSubscriptionBtn'), handleRemoveSubscription);\r\n+    cleanAndSetListener(document.getElementById('closeCompanyModal'), () => companyDetailsModal.classList.add('hidden'));\r\n+\r\n+    // 8. Mostra o modal\r\n     companyDetailsModal.classList.remove('hidden');\r\n-    companyDetailsModal.style.display = 'flex';\r\n }\r\n \r\n function addEventListenersToCompanyDetailsModal() {\r\n     // Evento para os seletores de cargo (role)\r\n"
                },
                {
                    "date": 1754321801408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,62 +432,8 @@\n     // 8. Mostra o modal\r\n     companyDetailsModal.classList.remove('hidden');\r\n }\r\n \r\n-function addEventListenersToCompanyDetailsModal() {\r\n-    // Evento para os seletores de cargo (role)\r\n-    document.querySelectorAll('.role-select').forEach(select => {\r\n-        select.addEventListener('change', async (e) => {\r\n-            const userId = e.target.dataset.userId;\r\n-            const newRole = e.target.value;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm(`Tem a certeza de que deseja alterar o cargo deste utilizador para ${newRole}?`)) {\r\n-                e.target.value = e.target.querySelector('option[selected]').value; // Reverte a mudança visual\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.updateUserRole(companyId, userId, newRole);\r\n-                showToast('Cargo do utilizador atualizado com sucesso!');\r\n-                // Recarrega os dados do modal para garantir consistência\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-\r\n-    // Evento para os botões de remover utilizador\r\n-    document.querySelectorAll('.remove-user-btn').forEach(button => {\r\n-        button.addEventListener('click', async (e) => {\r\n-            const userId = e.currentTarget.dataset.userId;\r\n-            const companyId = selectedCompanyForAdmin._id;\r\n-\r\n-            if (!confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n-                return;\r\n-            }\r\n-\r\n-            showLoader();\r\n-            try {\r\n-                await api.deleteUserFromCompany(companyId, userId);\r\n-                showToast('Utilizador removido com sucesso!');\r\n-                // Recarrega os dados do modal\r\n-                const updatedData = await api.getCompanyDetails(companyId);\r\n-                openCompanyDetailsModal(updatedData.company, updatedData.users, updatedData.masterUsers);\r\n-            } catch (error) {\r\n-                showToast(error.message, 'error');\r\n-            } finally {\r\n-                hideLoader();\r\n-            }\r\n-        });\r\n-    });\r\n-}\r\n-\r\n function openAddCompanyModal() {\r\n     if (addCompanyForm) addCompanyForm.reset();\r\n     if (addCompanyModal) addCompanyModal.classList.remove('hidden');\r\n     document.getElementById('addCompanyNameInput').focus();\r\n@@ -925,80 +871,8 @@\n         hideLoader();\r\n     }\r\n }\r\n \r\n-async function handleUpdateCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const updateData = {\r\n-        nomeEmpresa: modalCompanyNameInput.value,\r\n-        newPassword: modalCompanyPasswordInput.value,\r\n-    };\r\n-    showLoader();\r\n-    try {\r\n-        await api.updateCompany(selectedCompanyForAdmin._id, updateData);\r\n-        showToast('Empresa atualizada com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList(); // Atualiza a lista principal\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleDeleteCompany() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const confirmation = prompt(`Para confirmar a exclusão, digite o nome da empresa: \"${selectedCompanyForAdmin.nomeEmpresa}\"`);\r\n-    if (confirmation !== selectedCompanyForAdmin.nomeEmpresa) {\r\n-        showToast(\"Exclusão cancelada.\", \"info\");\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        await api.deleteCompany(selectedCompanyForAdmin._id);\r\n-        showToast('Empresa excluída com sucesso!');\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        await renderCompanyList();\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleAddSubscription() {\r\n-    if (!selectedCompanyForAdmin) return;\r\n-    const days = daysToAddInput.value;\r\n-    if (!days || parseInt(days) <= 0) {\r\n-        showToast('Insira um número de dias válido.', 'error');\r\n-        return;\r\n-    }\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.addSubscription(selectedCompanyForAdmin._id, days);\r\n-        showToast('Assinatura adicionada com sucesso!');\r\n-        openCompanyDetailsModal(company, users); // Reabre o modal com os dados atualizados\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n-async function handleRemoveSubscription() {\r\n-    if (!selectedCompanyForAdmin || !confirm('Tem a certeza que deseja remover a assinatura?')) return;\r\n-    showLoader();\r\n-    try {\r\n-        const { company, users } = await api.removeSubscription(selectedCompanyForAdmin._id);\r\n-        showToast('Assinatura removida com sucesso!');\r\n-        openCompanyDetailsModal(company, users);\r\n-    } catch (error) {\r\n-        showToast(error.message, 'error');\r\n-    } finally {\r\n-        hideLoader();\r\n-    }\r\n-}\r\n-\r\n /**\r\n  * Lida com a submissão do formulário de novo utilizador.\r\n  * @param {Event} e - O evento de submissão do formulário.\r\n  */\r\n@@ -1462,19 +1336,9 @@\n // Abas\r\n if (viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n if (viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n \r\n-if (saveCompanyDetailsBtn) saveCompanyDetailsBtn.addEventListener('click', handleUpdateCompany);\r\n-if (deleteCompanyBtn) deleteCompanyBtn.addEventListener('click', handleDeleteCompany);\r\n-if (addSubscriptionBtn) addSubscriptionBtn.addEventListener('click', handleAddSubscription);\r\n-if (removeSubscriptionBtn) removeSubscriptionBtn.addEventListener('click', handleRemoveSubscription);\r\n-if (closeCompanyModal) {\r\n-    closeCompanyModal.addEventListener('click', () => {\r\n-        companyDetailsModal.classList.add('hidden');\r\n-        companyDetailsModal.style.display = 'none'; // Adicione esta linha\r\n-    });\r\n-}\r\n-if (addUserBtn) addUserBtn.addEventListener('click', () => openAddUserModal(selectedCompanyForAdmin._id, true));\r\n+\r\n if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n"
                },
                {
                    "date": 1754322120539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,9 +342,9 @@\n                     <div class=\"flex items-center space-x-4\">\r\n                         <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\" ${user.role === 'Proprietário' ? 'disabled' : ''}>\r\n                             ${roleOptions}\r\n                         </select>\r\n-                        <button class=\"remove-user-btn text-red-400 hover:text-red-300 ${user.role === 'Proprietário' ? 'hidden' : ''}\" data-user-id=\"${user._id}\" title=\"Remover Utilizador\">\r\n+                        <button class=\"remove-user-btn text-red-400 hover:text-red-300\" data-user-id=\"${user._id}\" title=\"Remover Utilizador\">\r\n                             <i class=\"fas fa-trash\"></i>\r\n                         </button>\r\n                     </div>\r\n                 </div>`;\r\n"
                },
                {
                    "date": 1754322336247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,9 +339,9 @@\n                         <p class=\"font-semibold text-white\">${user.username}</p>\r\n                         <p class=\"text-xs text-gray-400\">${user.email || 'Sem e-mail'}</p>\r\n                     </div>\r\n                     <div class=\"flex items-center space-x-4\">\r\n-                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\" ${user.role === 'Proprietário' ? 'disabled' : ''}>\r\n+                        <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n                             ${roleOptions}\r\n                         </select>\r\n                         <button class=\"remove-user-btn text-red-400 hover:text-red-300\" data-user-id=\"${user._id}\" title=\"Remover Utilizador\">\r\n                             <i class=\"fas fa-trash\"></i>\r\n"
                },
                {
                    "date": 1754323562018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1084,38 +1084,56 @@\n     switchEmailSubView('edit');\r\n }\r\n \r\n /**\r\n- * Busca os templates e configura os eventos do editor.\r\n+ * Renderiza a estrutura completa da vista de edição de e-mails, incluindo o painel de teste.\r\n  */\r\n async function renderEmailEditorView() {\r\n     const container = document.getElementById('email-subview-content');\r\n \r\n-    // 1. Desenha a estrutura HTML completa para esta vista\r\n+    // 1. O HTML agora inclui a nova secção \"Testar Envio\" dentro da coluna do editor.\r\n     container.innerHTML = `\r\n         <div class=\"flex space-x-6 h-full\">\r\n-            <div class=\"w-1/4 border-r border-gray-700 pr-6\">\r\n+            <div class=\"w-1/4 border-r border-gray-700 pr-6 flex flex-col\">\r\n                 <h3 class=\"text-xl font-semibold text-gray-100 mb-4\">Templates de E-mail</h3>\r\n-                <div id=\"emailTemplatesList\" class=\"space-y-2\">\r\n-                    <p class=\"text-gray-400\">A carregar...</p>\r\n-                </div>\r\n+                <div id=\"emailTemplatesList\" class=\"space-y-2 flex-grow overflow-y-auto\"></div>\r\n             </div>\r\n             \r\n-            <div id=\"emailEditorContainer\" class=\"w-5/12 opacity-50 pointer-events-none\">\r\n-                <h4 id=\"editingTemplateName\" class=\"text-lg font-bold text-indigo-400 mb-4\">Selecione um template para editar</h4>\r\n-                <div class=\"space-y-4\">\r\n-                    <div>\r\n-                        <label for=\"templateSubject\" class=\"block text-sm font-medium text-gray-300\">Assunto</label>\r\n-                        <input type=\"text\" id=\"templateSubject\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white\">\r\n+            <div id=\"emailEditorContainer\" class=\"w-5/12 opacity-50 pointer-events-none flex flex-col\">\r\n+                <div class=\"flex-grow\">\r\n+                    <h4 id=\"editingTemplateName\" class=\"text-lg font-bold text-indigo-400 mb-4\">Selecione um template para editar</h4>\r\n+                    <div class=\"space-y-4\">\r\n+                        <div>\r\n+                            <label for=\"templateSubject\" class=\"block text-sm font-medium text-gray-300\">Assunto</label>\r\n+                            <input type=\"text\" id=\"templateSubject\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white\">\r\n+                        </div>\r\n+                        <div>\r\n+                            <label for=\"templateBody\" class=\"block text-sm font-medium text-gray-300\">Corpo do E-mail</label>\r\n+                            <textarea id=\"templateBody\" rows=\"10\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white font-mono text-sm\"></textarea>\r\n+                        </div>\r\n+                        <div class=\"flex justify-end\">\r\n+                            <button id=\"saveEmailTemplateBtn\" class=\"bg-green-600 text-white py-2 px-5 rounded-md hover:bg-green-700\">Salvar Alterações</button>\r\n+                        </div>\r\n                     </div>\r\n-                    <div>\r\n-                        <label for=\"templateBody\" class=\"block text-sm font-medium text-gray-300\">Corpo do E-mail</label>\r\n-                        <textarea id=\"templateBody\" rows=\"12\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white font-mono text-sm\"></textarea>\r\n-                        <p class=\"text-xs text-gray-400 mt-2\">Use placeholders como {{resetLink}}, {{companyName}}, etc.</p>\r\n+                </div>\r\n+                \r\n+                <div id=\"emailTestSendContainer\" class=\"mt-6 border-t border-gray-700 pt-4\">\r\n+                    <h4 class=\"text-lg font-semibold text-gray-300 mb-2\">Testar Envio</h4>\r\n+                    <div class=\"space-y-3\">\r\n+                        <div>\r\n+                            <label for=\"testCompanySelect\" class=\"block text-sm font-medium text-gray-400\">Usar dados da empresa:</label>\r\n+                            <select id=\"testCompanySelect\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white\">\r\n+                                <option>Selecione um template primeiro</option>\r\n+                            </select>\r\n+                        </div>\r\n+                        <div>\r\n+                            <label for=\"testRecipientEmail\" class=\"block text-sm font-medium text-gray-400\">Enviar e-mail de teste para:</label>\r\n+                            <input type=\"email\" id=\"testRecipientEmail\" class=\"w-full mt-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white\" placeholder=\"seu.email@exemplo.com\">\r\n+                        </div>\r\n+                        <div class=\"flex justify-end\">\r\n+                            <button id=\"sendTestEmailBtn\" class=\"bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700\">Enviar Teste</button>\r\n+                        </div>\r\n                     </div>\r\n-                    <div class=\"flex justify-end\">\r\n-                        <button id=\"saveEmailTemplateBtn\" class=\"bg-green-600 text-white py-2 px-5 rounded-md hover:bg-green-700\">Salvar Alterações</button>\r\n-                    </div>\r\n                 </div>\r\n             </div>\r\n \r\n             <div class=\"w-1/3\">\r\n@@ -1126,16 +1144,23 @@\n             </div>\r\n         </div>\r\n     `;\r\n \r\n-    // 2. Após desenhar o HTML, busca os dados e configura os eventos\r\n+    // 2. Chama a função que irá buscar os dados e configurar toda a interatividade\r\n+    await fetchAndSetupEmailEditor();\r\n+}\r\n+\r\n+\r\n+/**\r\n+ * Busca os templates e empresas, e configura todos os eventos do editor e do painel de teste.\r\n+ */\r\n+async function fetchAndSetupEmailEditor() {\r\n     const templatesListDiv = document.getElementById('emailTemplatesList');\r\n     const editorContainer = document.getElementById('emailEditorContainer');\r\n     const saveBtn = document.getElementById('saveEmailTemplateBtn');\r\n     const templateBodyTextarea = document.getElementById('templateBody');\r\n     const previewFrame = document.getElementById('emailPreviewFrame');\r\n \r\n-    // Função auxiliar para atualizar o iframe\r\n     const updateEmailPreview = (htmlContent) => {\r\n         if (!previewFrame) return;\r\n         const previewDoc = previewFrame.contentWindow.document;\r\n         previewDoc.open();\r\n@@ -1145,15 +1170,14 @@\n \r\n     try {\r\n         const templates = await api.getEmailTemplates();\r\n         templatesListDiv.innerHTML = templates.map(t =>\r\n-            `<button class=\"email-template-item text-left w-full p-3 rounded-md hover:bg-indigo-600 focus:outline-none focus:bg-indigo-600\" data-id=\"${t._id}\">\r\n+            `<button class=\"email-template-item text-left w-full p-3 rounded-md hover:bg-indigo-600 focus:outline-none focus:bg-indigo-600\" data-id=\"${t._id}\" data-name=\"${t.name}\">\r\n                 <span class=\"font-semibold text-white\">${t.name}</span>\r\n                 <span class=\"block text-xs text-gray-400 truncate\">${t.subject}</span>\r\n             </button>`\r\n         ).join('');\r\n \r\n-        // Adiciona evento de clique a cada item da lista\r\n         document.querySelectorAll('.email-template-item').forEach(item => {\r\n             item.addEventListener('click', async (e) => {\r\n                 const target = e.currentTarget;\r\n                 currentEditingTemplateId = target.dataset.id;\r\n@@ -1170,8 +1194,14 @@\n                     templateBodyTextarea.value = fullTemplate.body;\r\n                     \r\n                     updateEmailPreview(fullTemplate.body);\r\n                     editorContainer.classList.remove('opacity-50', 'pointer-events-none');\r\n+\r\n+                    // Popula o dropdown de empresas para o teste\r\n+                    const companies = await api.getCompanies();\r\n+                    const companySelect = document.getElementById('testCompanySelect');\r\n+                    companySelect.innerHTML = companies.map(c => `<option value=\"${c._id}\">${c.nomeEmpresa}</option>`).join('');\r\n+\r\n                 } catch (error) {\r\n                     showToast('Erro ao carregar detalhes do template.', 'error');\r\n                 } finally {\r\n                     hideLoader();\r\n@@ -1182,20 +1212,16 @@\n     } catch (error) {\r\n         templatesListDiv.innerHTML = '<p class=\"text-red-400\">Erro ao carregar templates.</p>';\r\n     }\r\n \r\n-    // Evento para atualizar a pré-visualização em tempo real\r\n     templateBodyTextarea.addEventListener('input', (e) => {\r\n         updateEmailPreview(e.target.value);\r\n     });\r\n \r\n-    // Evento para salvar o template\r\n     saveBtn.addEventListener('click', async () => {\r\n         if (!currentEditingTemplateId) return;\r\n-        \r\n         const subject = document.getElementById('templateSubject').value;\r\n         const body = templateBodyTextarea.value;\r\n-        \r\n         showLoader();\r\n         try {\r\n             await api.updateEmailTemplate(currentEditingTemplateId, { subject, body });\r\n             showToast('Template salvo com sucesso!', 'success');\r\n@@ -1204,10 +1230,35 @@\n         } finally {\r\n             hideLoader();\r\n         }\r\n     });\r\n+\r\n+    // Novo listener para o botão de teste\r\n+    document.getElementById('sendTestEmailBtn').addEventListener('click', async () => {\r\n+        const templateNameElement = document.getElementById('editingTemplateName');\r\n+        if (!templateNameElement || !currentEditingTemplateId) {\r\n+            return showToast('Selecione um template para testar.', 'error');\r\n+        }\r\n+        \r\n+        const templateName = templateNameElement.textContent.replace('A editar: ', '');\r\n+        const companyId = document.getElementById('testCompanySelect').value;\r\n+        const recipientEmail = document.getElementById('testRecipientEmail').value;\r\n+\r\n+        if (!recipientEmail) {\r\n+            return showToast('Por favor, insira um e-mail para o envio do teste.', 'error');\r\n+        }\r\n+\r\n+        showLoader();\r\n+        try {\r\n+            const response = await api.sendTestEmail({ templateName, companyId, recipientEmail });\r\n+            showToast(response.message, 'success');\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    });\r\n }\r\n-\r\n function renderBulkEmailView() {\r\n     const container = document.getElementById('email-subview-content');\r\n     container.innerHTML = `\r\n         <div class=\"space-y-4\">\r\n"
                },
                {
                    "date": 1754324762286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1148,9 +1148,30 @@\n     // 2. Chama a função que irá buscar os dados e configurar toda a interatividade\r\n     await fetchAndSetupEmailEditor();\r\n }\r\n \r\n+/**\r\n+ * Atualiza a pré-visualização do e-mail dentro da iframe.\r\n+ * @param {string} htmlContent - O conteúdo HTML completo do template.\r\n+ */\r\n+function updateEmailPreview(htmlContent) {\r\n+    const previewFrame = document.getElementById('emailPreviewFrame');\r\n+    if (!previewFrame) return;\r\n \r\n+    const previewDoc = previewFrame.contentWindow.document;\r\n+\r\n+    // 1. Escrevemos o conteúdo EXATO do seu template na iframe.\r\n+    previewDoc.open();\r\n+    previewDoc.write(htmlContent);\r\n+    previewDoc.close();\r\n+\r\n+    // 2. (A CORREÇÃO) Após o conteúdo ser carregado, definimos a cor de fundo\r\n+    //    do corpo da iframe para ser a mesma do seu template de e-mail.\r\n+    if (previewDoc.body) {\r\n+        previewDoc.body.style.backgroundColor = '#f4f7f6'; // O cinzento claro do seu template\r\n+    }\r\n+}\r\n+\r\n /**\r\n  * Busca os templates e empresas, e configura todos os eventos do editor e do painel de teste.\r\n  */\r\n async function fetchAndSetupEmailEditor() {\r\n@@ -1159,16 +1180,8 @@\n     const saveBtn = document.getElementById('saveEmailTemplateBtn');\r\n     const templateBodyTextarea = document.getElementById('templateBody');\r\n     const previewFrame = document.getElementById('emailPreviewFrame');\r\n \r\n-    const updateEmailPreview = (htmlContent) => {\r\n-        if (!previewFrame) return;\r\n-        const previewDoc = previewFrame.contentWindow.document;\r\n-        previewDoc.open();\r\n-        previewDoc.write(htmlContent);\r\n-        previewDoc.close();\r\n-    };\r\n-\r\n     try {\r\n         const templates = await api.getEmailTemplates();\r\n         templatesListDiv.innerHTML = templates.map(t =>\r\n             `<button class=\"email-template-item text-left w-full p-3 rounded-md hover:bg-indigo-600 focus:outline-none focus:bg-indigo-600\" data-id=\"${t._id}\" data-name=\"${t.name}\">\r\n"
                },
                {
                    "date": 1754326196143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1380,8 +1380,50 @@\n         });\r\n     });\r\n }\r\n \r\n+/**\r\n+ * Renderiza a lista de empresas adicionadas recentemente.\r\n+ * @param {Array} companies - A lista de empresas recentes vinda da API.\r\n+ */\r\n+function renderRecentCompanies(companies) {\r\n+    const container = document.getElementById('recentCompaniesList');\r\n+    if (!container) return;\r\n+\r\n+    if (!companies || companies.length === 0) {\r\n+        container.innerHTML = '<p class=\"text-gray-400\">Nenhuma empresa registada recentemente.</p>';\r\n+        return;\r\n+    }\r\n+\r\n+    container.innerHTML = companies.map(company => `\r\n+        <div class=\"bg-gray-700/50 p-3 rounded-md flex justify-between items-center\">\r\n+            <div>\r\n+                <p class=\"font-semibold text-white\">${company.nomeEmpresa}</p>\r\n+                <p class=\"text-xs text-gray-400\">Registada em: ${new Date(company.createdAt).toLocaleDateString('pt-BR')}</p>\r\n+            </div>\r\n+            <button class=\"view-details-btn bg-indigo-600 text-white py-1 px-3 rounded-md hover:bg-indigo-700 text-sm\" data-company-id=\"${company._id}\">\r\n+                Detalhes\r\n+            </button>\r\n+        </div>\r\n+    `).join('');\r\n+\r\n+    // Adiciona os eventos de clique aos novos botões \"Detalhes\"\r\n+    container.querySelectorAll('.view-details-btn').forEach(button => {\r\n+        button.addEventListener('click', async (e) => {\r\n+            const companyId = e.target.dataset.companyId;\r\n+            showLoader();\r\n+            try {\r\n+                const { company, users, masterUsers } = await api.getCompanyDetails(companyId);\r\n+                openCompanyDetailsModal(company, users, masterUsers);\r\n+            } catch (error) {\r\n+                showToast(error.message, 'error');\r\n+            } finally {\r\n+                hideLoader();\r\n+            }\r\n+        });\r\n+    });\r\n+}\r\n+\r\n // =================================================================================\r\n // =================================================================================\r\n // EVENT LISTENERS\r\n // =================================================================================\r\n"
                },
                {
                    "date": 1754326239463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -612,16 +612,19 @@\n     showLoader();\r\n     try {\r\n         const stats = await api.getAdminDashboardStats();\r\n \r\n-        // Preenche os cartões (KPIs)\r\n+        // Preenche os cartões (KPIs) - inalterado\r\n         document.getElementById('kpiTotalCompanies').textContent = stats.totalCompanies;\r\n         document.getElementById('kpiTotalUsers').textContent = stats.totalUsers;\r\n         document.getElementById('kpiActiveSubscriptions').textContent = stats.activeSubscriptions;\r\n \r\n-        // Renderiza o gráfico\r\n+        // Renderiza o gráfico - inalterado\r\n         renderNewCompaniesChart(stats.newCompaniesLast30Days);\r\n \r\n+        // CHAMA A NOVA FUNÇÃO AQUI\r\n+        renderRecentCompanies(stats.recentlyAddedCompanies);\r\n+\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n     } finally {\r\n         hideLoader();\r\n"
                },
                {
                    "date": 1754327248400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,8 +315,9 @@\n     // 1. Guarda a referência da empresa selecionada para uso nos handlers\r\n     selectedCompanyForAdmin = company;\r\n \r\n     // 2. Referências aos elementos do Modal\r\n+    const companyDetailsModal = document.getElementById('companyDetailsModal');\r\n     const modalCompanyNameInput = document.getElementById('modalCompanyNameInput');\r\n     const modalCompanyCnpj = document.getElementById('modalCompanyCnpj');\r\n     const modalCompanyPasswordInput = document.getElementById('modalCompanyPasswordInput');\r\n     const modalCompanyUsers = document.getElementById('modalCompanyUsers');\r\n@@ -326,18 +327,18 @@\n     modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n     modalCompanyPasswordInput.value = ''; // Limpa o campo de senha por segurança\r\n     updateSubscriptionDetails(company.subscription);\r\n \r\n-    // 4. Preenche a lista de utilizadores\r\n+    // 4. Preenche a lista de utilizadores, permitindo todas as ações para o Admin\r\n     modalCompanyUsers.innerHTML = ''; // Limpa a lista anterior\r\n     if (masterUsers && masterUsers.length > 0) {\r\n         const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n         masterUsers.forEach(user => {\r\n             const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n             const userHtml = `\r\n                 <div class=\"bg-gray-800 p-3 rounded-md flex justify-between items-center mb-2\">\r\n                     <div>\r\n-                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n+                        <p class.=\"font-semibold text-white\">${user.username}</p>\r\n                         <p class=\"text-xs text-gray-400\">${user.email || 'Sem e-mail'}</p>\r\n                     </div>\r\n                     <div class=\"flex items-center space-x-4\">\r\n                         <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n@@ -363,33 +364,64 @@\n                 showLoader();\r\n                 try {\r\n                     await api.updateUserRole(company._id, userId, newRole);\r\n                     showToast('Cargo atualizado com sucesso!');\r\n-                    const data = await api.getCompanyDetails(company._id); // Recarrega os dados\r\n-                    openCompanyDetailsModal(data.company, data.users, data.masterUsers); // Reabre o modal com dados frescos\r\n-                } catch (error) { showToast(error.message, 'error'); } finally { hideLoader(); }\r\n+                    const data = await api.getCompanyDetails(company._id);\r\n+                    openCompanyDetailsModal(data.company, data.users, data.masterUsers);\r\n+                } catch (error) { \r\n+                    showToast(error.message, 'error');\r\n+                    const data = await api.getCompanyDetails(company._id);\r\n+                    openCompanyDetailsModal(data.company, data.users, data.masterUsers);\r\n+                } finally { \r\n+                    hideLoader(); \r\n+                }\r\n+            } else {\r\n+                const data = await api.getCompanyDetails(company._id);\r\n+                openCompanyDetailsModal(data.company, data.users, data.masterUsers);\r\n             }\r\n         });\r\n     });\r\n \r\n     modalCompanyUsers.querySelectorAll('.remove-user-btn').forEach(button => {\r\n         button.addEventListener('click', async (e) => {\r\n             const userId = e.currentTarget.dataset.userId;\r\n-            if (confirm('Tem a certeza de que deseja remover este utilizador?')) {\r\n+            if (confirm('Tem a certeza de que deseja remover este utilizador? A ação não pode ser desfeita.')) {\r\n                 showLoader();\r\n                 try {\r\n                     await api.deleteUserFromCompany(company._id, userId);\r\n                     showToast('Utilizador removido com sucesso!');\r\n-                    const data = await api.getCompanyDetails(company._id); // Recarrega os dados\r\n-                    openCompanyDetailsModal(data.company, data.users, data.masterUsers); // Reabre o modal\r\n+                    const data = await api.getCompanyDetails(company._id);\r\n+                    openCompanyDetailsModal(data.company, data.users, data.masterUsers);\r\n                 } catch (error) { showToast(error.message, 'error'); } finally { hideLoader(); }\r\n             }\r\n         });\r\n     });\r\n \r\n     // 6. Define as funções de handler para os botões principais do modal\r\n-    const handleSaveDetails = async () => { /* ... sua lógica para salvar ... */ };\r\n-    const handleDelete = async () => { /* ... sua lógica para apagar ... */ };\r\n+    const handleSaveDetails = async () => {\r\n+        // Lógica para salvar alterações do nome da empresa, etc.\r\n+        showToast('Funcionalidade \"Salvar Alterações\" ainda não implementada.', 'info');\r\n+    };\r\n+\r\n+    const handleDelete = async () => {\r\n+        if (!company) return;\r\n+        const confirmation = prompt(`Esta ação é irreversível. Para confirmar a exclusão, digite o nome da empresa: \"${company.nomeEmpresa}\"`);\r\n+        if (confirmation !== company.nomeEmpresa) {\r\n+            return showToast(\"A digitação não corresponde. A exclusão foi cancelada.\", \"info\");\r\n+        }\r\n+        showLoader();\r\n+        try {\r\n+            await api.deleteCompany(company._id);\r\n+            showToast('Empresa e todos os seus dados foram excluídos com sucesso!');\r\n+            companyDetailsModal.classList.add('hidden');\r\n+            renderCompaniesView();\r\n+        } catch (error) {\r\n+            showToast(error.message, 'error');\r\n+        } finally {\r\n+            hideLoader();\r\n+        }\r\n+    };\r\n+    \r\n     const handleAddUser = () => openAddUserModal(company._id, true);\r\n     \r\n     const handleAddSubscription = async () => {\r\n         const days = document.getElementById('daysToAddInput').value;\r\n@@ -398,9 +430,9 @@\n         try {\r\n             const updatedData = await api.addSubscription(company._id, days);\r\n             showToast('Assinatura adicionada com sucesso!', 'success');\r\n             updateSubscriptionDetails(updatedData.company.subscription);\r\n-            fetchAndRenderSubscriptions(); // Atualiza a tabela principal em segundo plano\r\n+            fetchAndRenderSubscriptions();\r\n         } catch (error) { showToast(error.message, 'error'); } finally { hideLoader(); }\r\n     };\r\n \r\n     const handleRemoveSubscription = async () => {\r\n@@ -409,9 +441,9 @@\n         try {\r\n             const updatedData = await api.removeSubscription(company._id);\r\n             showToast('Assinatura removida com sucesso!', 'success');\r\n             updateSubscriptionDetails(updatedData.company.subscription);\r\n-            fetchAndRenderSubscriptions(); // Atualiza a tabela principal em segundo plano\r\n+            fetchAndRenderSubscriptions();\r\n         } catch (error) { showToast(error.message, 'error'); } finally { hideLoader(); }\r\n     };\r\n \r\n     // 7. Limpa listeners antigos e adiciona os novos para evitar bugs de múltiplos cliques\r\n"
                },
                {
                    "date": 1754327522938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n     switchAdminView('dashboard');\r\n }\r\n \r\n async function renderCompaniesView() {\r\n-    // 1. Desenha a estrutura da página, incluindo a nova área de pesquisa\r\n+    // 1. Desenha a estrutura completa da aba, incluindo a barra de pesquisa e a área para a lista de empresas.\r\n     companiesView.innerHTML = `\r\n         <div class=\"mb-8\">\r\n             <input type=\"text\" id=\"globalSearchInput\" placeholder=\"Pesquisar por Utilizador, E-mail, Empresa ou CNPJ...\" class=\"w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-indigo-500\">\r\n             <div id=\"searchResultsContainer\" class=\"mt-4\"></div>\r\n@@ -163,9 +163,14 @@\n             Nenhuma empresa cadastrada ainda.\r\n         </div>\r\n     `;\r\n \r\n-    // 2. Adiciona o Event Listener para a pesquisa com debounce\r\n+    // 2. Configura os 'event listeners' para os elementos que acabaram de ser criados.\r\n+    const createCompanyBtn = document.getElementById('createCompanyBtn');\r\n+    if (createCompanyBtn) {\r\n+        createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n+    }\r\n+\r\n     const searchInput = document.getElementById('globalSearchInput');\r\n     const debouncedSearch = debounce(async (event) => {\r\n         const query = event.target.value;\r\n         const resultsContainer = document.getElementById('searchResultsContainer');\r\n@@ -183,9 +188,9 @@\n         }\r\n     });\r\n     searchInput.addEventListener('input', debouncedSearch);\r\n \r\n-    // 3. Carrega a lista de empresas como antes\r\n+    // 3. Carrega a lista principal de todas as empresas.\r\n     const companyListDiv = document.getElementById('companyList');\r\n     const noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\n     \r\n     showLoader();\r\n@@ -208,9 +213,9 @@\n                     </div>\r\n                 `;\r\n                 companyListDiv.appendChild(companyCard);\r\n             });\r\n-            // Adiciona os listeners para os botões de \"Detalhes\" e \"Entrar\" da lista principal\r\n+            // Ativa os botões 'Detalhes' e 'Entrar' dos cartões que acabaram de ser criados.\r\n             addEventListenersToAdminButtons();\r\n         }\r\n     } catch (error) {\r\n         showToast(error.message, 'error');\r\n@@ -1481,9 +1486,8 @@\n \r\n if (addUserForm) addUserForm.addEventListener('submit', handleAddUserSubmit);\r\n if (closeAddUserModalBtn) closeAddUserModalBtn.addEventListener('click', closeAddUserModal);\r\n if (cancelAddUserBtn) cancelAddUserBtn.addEventListener('click', closeAddUserModal);\r\n-if (createCompanyBtn) createCompanyBtn.addEventListener('click', openAddCompanyModal);\r\n if (addCompanyForm) addCompanyForm.addEventListener('submit', handleAddCompanySubmit);\r\n if (closeAddCompanyModalBtn) closeAddCompanyModalBtn.addEventListener('click', closeAddCompanyModal);\r\n if (cancelAddCompanyBtn) cancelAddCompanyBtn.addEventListener('click', closeAddCompanyModal);\r\n \r\n"
                },
                {
                    "date": 1754328712569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n \r\n /**\r\n  * Abre e preenche o modal com os detalhes de uma empresa específica.\r\n  * @param {object} company - O objeto da empresa.\r\n- * @param {Array} users - A lista de utilizadores do tenant.\r\n+ * @param {Array} users - A lista de utilizadores do tenant (mantida por consistência).\r\n  * @param {Array} masterUsers - A lista de utilizadores do banco de dados mestre.\r\n  */\r\n function openCompanyDetailsModal(company, users, masterUsers) {\r\n     // 1. Guarda a referência da empresa selecionada para uso nos handlers\r\n@@ -332,18 +332,18 @@\n     modalCompanyCnpj.textContent = formatCnpj(company.cnpj);\r\n     modalCompanyPasswordInput.value = ''; // Limpa o campo de senha por segurança\r\n     updateSubscriptionDetails(company.subscription);\r\n \r\n-    // 4. Preenche a lista de utilizadores, permitindo todas as ações para o Admin\r\n+    // 4. Preenche a lista de utilizadores\r\n     modalCompanyUsers.innerHTML = ''; // Limpa a lista anterior\r\n     if (masterUsers && masterUsers.length > 0) {\r\n         const roles = ['Proprietário', 'Gerente', 'Funcionário'];\r\n         masterUsers.forEach(user => {\r\n             const roleOptions = roles.map(role => `<option value=\"${role}\" ${user.role === role ? 'selected' : ''}>${role}</option>`).join('');\r\n             const userHtml = `\r\n                 <div class=\"bg-gray-800 p-3 rounded-md flex justify-between items-center mb-2\">\r\n                     <div>\r\n-                        <p class.=\"font-semibold text-white\">${user.username}</p>\r\n+                        <p class=\"font-semibold text-white\">${user.username}</p>\r\n                         <p class=\"text-xs text-gray-400\">${user.email || 'Sem e-mail'}</p>\r\n                     </div>\r\n                     <div class=\"flex items-center space-x-4\">\r\n                         <select class=\"role-select bg-gray-600 border border-gray-500 rounded px-2 py-1 text-sm text-white\" data-user-id=\"${user._id}\">\r\n@@ -369,10 +369,10 @@\n                 showLoader();\r\n                 try {\r\n                     await api.updateUserRole(company._id, userId, newRole);\r\n                     showToast('Cargo atualizado com sucesso!');\r\n-                    const data = await api.getCompanyDetails(company._id);\r\n-                    openCompanyDetailsModal(data.company, data.users, data.masterUsers);\r\n+                    const data = await api.getCompanyDetails(company._id); // Recarrega os dados\r\n+                    openCompanyDetailsModal(data.company, data.users, data.masterUsers); // Reabre o modal com dados frescos\r\n                 } catch (error) { \r\n                     showToast(error.message, 'error');\r\n                     const data = await api.getCompanyDetails(company._id);\r\n                     openCompanyDetailsModal(data.company, data.users, data.masterUsers);\r\n@@ -435,9 +435,13 @@\n         try {\r\n             const updatedData = await api.addSubscription(company._id, days);\r\n             showToast('Assinatura adicionada com sucesso!', 'success');\r\n             updateSubscriptionDetails(updatedData.company.subscription);\r\n-            fetchAndRenderSubscriptions();\r\n+            \r\n+            const subsView = document.getElementById('subscriptionsView');\r\n+            if (subsView && !subsView.classList.contains('hidden')) {\r\n+                fetchAndRenderSubscriptions();\r\n+            }\r\n         } catch (error) { showToast(error.message, 'error'); } finally { hideLoader(); }\r\n     };\r\n \r\n     const handleRemoveSubscription = async () => {\r\n@@ -446,9 +450,13 @@\n         try {\r\n             const updatedData = await api.removeSubscription(company._id);\r\n             showToast('Assinatura removida com sucesso!', 'success');\r\n             updateSubscriptionDetails(updatedData.company.subscription);\r\n-            fetchAndRenderSubscriptions();\r\n+            \r\n+            const subsView = document.getElementById('subscriptionsView');\r\n+            if (subsView && !subsView.classList.contains('hidden')) {\r\n+                fetchAndRenderSubscriptions();\r\n+            }\r\n         } catch (error) { showToast(error.message, 'error'); } finally { hideLoader(); }\r\n     };\r\n \r\n     // 7. Limpa listeners antigos e adiciona os novos para evitar bugs de múltiplos cliques\r\n"
                },
                {
                    "date": 1754414658394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n /**\r\n  * Alterna a visualização entre as abas do painel de admin.\r\n  * @param {string} viewToShow - O nome da aba para mostrar ('companies' ou 'announcements').\r\n  */\r\n-function switchAdminView(viewToShow) {\r\n+export function switchAdminView(viewToShow) {\r\n     // --- A CORREÇÃO ESTÁ AQUI ---\r\n     // Este bloco no início da função é crucial. Ele garante que TODAS as\r\n     // vistas são escondidas antes de qualquer outra ação.\r\n     adminDashboardView.classList.add('hidden');\r\n"
                },
                {
                    "date": 1754414699856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1550,4 +1550,12 @@\n             }\r\n         }\r\n     });\r\n }\r\n+const adminNavSelect = document.getElementById('admin-nav-select');\r\n+if (adminNavSelect) {\r\n+    adminNavSelect.addEventListener('change', (e) => {\r\n+        // Chama a função que já usas para trocar de vista,\r\n+        // passando o valor da opção selecionada.\r\n+        switchAdminView(e.target.value);\r\n+    });\r\n+}\r\n"
                }
            ],
            "date": 1753808555917,
            "name": "Commit-0",
            "content": "// D:\\SCripts\\SiteLobos\\Scripts\\admin.js\r\nimport * as api from './api.js';\r\nimport { showToast, showLoader, hideLoader, formatCnpj } from './utils.js';\r\n\r\n// Variáveis de estado e elementos do DOM para o painel de admin\r\nlet selectedCompanyForAdmin = null;\r\n\r\nconst adminDashboardScreen = document.getElementById('adminDashboardScreen');\r\nconst companyListDiv = document.getElementById('companyList');\r\nconst noCompaniesMessage = document.getElementById('noCompaniesMessage');\r\nconst adminLogoutBtn = document.getElementById('adminLogoutBtn');\r\nconst createCompanyBtn = document.getElementById('createCompanyBtn');\r\n\r\n// Elementos das novas abas\r\nconst viewCompaniesTab = document.getElementById('viewCompaniesTab');\r\nconst viewAnnouncementsTab = document.getElementById('viewAnnouncementsTab');\r\nconst companiesView = document.getElementById('companiesView');\r\nconst announcementsView = document.getElementById('announcementsView');\r\nconst adminTabButtons = document.querySelectorAll('.admin-tab-btn');\r\n\r\n/**\r\n * Alterna a visualização entre as abas do painel de admin.\r\n * @param {string} viewToShow - O nome da aba para mostrar ('companies' ou 'announcements').\r\n */\r\nfunction switchAdminView(viewToShow) {\r\n    // Esconde ambos os painéis\r\n    companiesView.classList.add('hidden');\r\n    announcementsView.classList.add('hidden');\r\n\r\n    // Reseta o estilo dos botões\r\n    adminTabButtons.forEach(btn => {\r\n        btn.classList.remove('bg-indigo-600', 'text-white');\r\n        btn.classList.add('text-gray-400', 'hover:bg-gray-800');\r\n    });\r\n\r\n    // Mostra o painel correto e ativa o botão correspondente\r\n    if (viewToShow === 'companies') {\r\n        companiesView.classList.remove('hidden');\r\n        viewCompaniesTab.classList.add('bg-indigo-600', 'text-white');\r\n        viewCompaniesTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n    } else if (viewToShow === 'announcements') {\r\n        announcementsView.classList.remove('hidden');\r\n        viewAnnouncementsTab.classList.add('bg-indigo-600', 'text-white');\r\n        viewAnnouncementsTab.classList.remove('text-gray-400', 'hover:bg-gray-800');\r\n    }\r\n}\r\n\r\n/**\r\n * Função principal que inicializa o painel de admin,\r\n * renderiza a lista de empresas e configura os eventos.\r\n */\r\nexport async function showAdminDashboard() {\r\n    // (A lógica de renderização da lista de empresas virá para aqui)\r\n\r\n    // Configura os eventos de clique para as abas\r\n    if(viewCompaniesTab) viewCompaniesTab.addEventListener('click', () => switchAdminView('companies'));\r\n    if(viewAnnouncementsTab) viewAnnouncementsTab.addEventListener('click', () => switchAdminView('announcements'));\r\n\r\n    // Garante que a aba de empresas seja a padrão\r\n    switchAdminView('companies');\r\n}"
        }
    ]
}