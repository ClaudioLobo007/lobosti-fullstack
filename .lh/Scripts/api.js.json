{
    "sourceFile": "Scripts/api.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 33,
            "patches": [
                {
                    "date": 1752672272290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752674325909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n // --- Funções do Administrador ---\r\n export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n \r\n \r\n+\r\n // --- Funções de Empresas ---\r\n export const getCompanies = () => apiCall('/api/companies');\r\n export const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\n export const createCompany = (companyData) => apiCall('/api/companies/register', { method: 'POST', body: JSON.stringify(companyData) });\r\n@@ -55,8 +56,9 @@\n export const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\n export const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\n export const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\n export const removeSubscription = (companyId) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'DELETE' });\r\n+export const updateUserRole = (companyId, userId, role) => apiCall(`/api/companies/${companyId}/users/${userId}/role`, { method: 'PATCH', body: JSON.stringify({ role }) });\r\n \r\n \r\n // --- Funções de Boletos ---\r\n export const getBoletos = () => apiCall('/api/boletos');\r\n"
                },
                {
                    "date": 1752680194670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n export const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n export const registerUser = (username, password, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n export const checkSession = () => apiCall('/api/auth/me');\r\n export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n+export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n \r\n \r\n // --- Funções do Administrador ---\r\n export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n"
                },
                {
                    "date": 1752698491968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import { API_BASE_URL } from './config.js';\r\n+\r\n+/**\r\n+ * Função genérica para realizar chamadas à API.\r\n+ * @param {string} endpoint - O endpoint para o qual a chamada será feita (ex: '/api/boletos').\r\n+ * @param {object} options - As opções para o 'fetch' (method, body, etc.).\r\n+ * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n+ */\r\n+async function apiCall(endpoint, options = {}) {\r\n+    const token = localStorage.getItem('authToken');\r\n+    const headers = {\r\n+        'Content-Type': 'application/json',\r\n+        ...options.headers,\r\n+    };\r\n+\r\n+    if (token) {\r\n+        headers['Authorization'] = `Bearer ${token}`;\r\n+    }\r\n+\r\n+    try {\r\n+        const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n+        const data = await response.json();\r\n+\r\n+        if (!response.ok) {\r\n+            // Lança um erro com a mensagem vinda do backend para ser capturado no 'catch'.\r\n+            throw new Error(data.message || 'Ocorreu um erro desconhecido na API.');\r\n+        }\r\n+\r\n+        return data; // Retorna os dados em caso de sucesso.\r\n+    } catch (error) {\r\n+        console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n+        // Propaga o erro para que a função que chamou possa tratá-lo (ex: com um showToast).\r\n+        throw error;\r\n+    }\r\n+}\r\n+\r\n+// --- Funções de Autenticação ---\r\n+export const loginCompany = (cnpj, password) => apiCall('/api/auth/login/company', { method: 'POST', body: JSON.stringify({ cnpj, password }) });\r\n+export const loginAdmin = (username, password) => apiCall('/api/auth/login/admin', { method: 'POST', body: JSON.stringify({ username, password }) });\r\n+export const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n+export const registerUser = (username, password, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n+export const checkSession = () => apiCall('/api/auth/me');\r\n+export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n+export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n+\r\n+\r\n+// --- Funções do Administrador ---\r\n+export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n+\r\n+\r\n+\r\n+// --- Funções de Empresas ---\r\n+export const getCompanies = () => apiCall('/api/companies');\r\n+export const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\n+export const createCompany = (companyData) => apiCall('/api/companies/register', { method: 'POST', body: JSON.stringify(companyData) });\r\n+export const updateCompany = (companyId, updateData) => apiCall(`/api/companies/${companyId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n+export const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\n+export const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\n+export const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\n+export const removeSubscription = (companyId) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'DELETE' });\r\n+export const updateUserRole = (companyId, userId, role) => apiCall(`/api/companies/${companyId}/users/${userId}/role`, { method: 'PATCH', body: JSON.stringify({ role }) });\r\n+\r\n+\r\n+// --- Funções de Boletos ---\r\n+export const getBoletos = () => apiCall('/api/boletos');\r\n+export const createBoleto = (boletoData) => apiCall('/api/boletos', { method: 'POST', body: JSON.stringify(boletoData) });\r\n+export const updateParcel = (boletoId, parcelId, updateData) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n+export const deleteParcel = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'DELETE' });\r\n+export const deleteBoleto = (boletoId) => apiCall(`/api/boletos/${boletoId}`, { method: 'DELETE' });\r\n+\r\n+\r\n+// --- Funções de Permissões ---\r\n+export const getPermissions = () => apiCall('/api/permissions');\r\n+export const updatePermissions = (permissionsData) => apiCall('/api/permissions', { method: 'PATCH', body: JSON.stringify(permissionsData) });\r\n+\r\n+\r\n+// --- Funções de Pagamentos ---\r\n+export const createSubscriptionLink = () => apiCall('/api/payments/create-subscription', { method: 'POST' });\r\n+\r\n+\r\n+// --- Funções de NFe ---\r\n+export const findNfe = (chave) => apiCall(`/api/nfe/${chave}`);\r\n+\r\n+\r\n+// --- Funções de Contato ---\r\n+export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752793563728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,30 +7,29 @@\n  * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n  */\r\n async function apiCall(endpoint, options = {}) {\r\n     const token = localStorage.getItem('authToken');\r\n-    const headers = {\r\n-        'Content-Type': 'application/json',\r\n-        ...options.headers,\r\n-    };\r\n+    const headers = { ...options.headers }; // Inicia os headers\r\n \r\n     if (token) {\r\n         headers['Authorization'] = `Bearer ${token}`;\r\n     }\r\n \r\n+    if (!options.isFormData) {\r\n+        headers['Content-Type'] = 'application/json';\r\n+    }\r\n+\r\n     try {\r\n         const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n         const data = await response.json();\r\n \r\n         if (!response.ok) {\r\n-            // Lança um erro com a mensagem vinda do backend para ser capturado no 'catch'.\r\n-            throw new Error(data.message || 'Ocorreu um erro desconhecido na API.');\r\n+            throw new Error(data.message || 'Ocorreu um erro na API.');\r\n         }\r\n \r\n-        return data; // Retorna os dados em caso de sucesso.\r\n+        return data;\r\n     } catch (error) {\r\n         console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n-        // Propaga o erro para que a função que chamou possa tratá-lo (ex: com um showToast).\r\n         throw error;\r\n     }\r\n }\r\n \r\n@@ -66,8 +65,15 @@\n export const createBoleto = (boletoData) => apiCall('/api/boletos', { method: 'POST', body: JSON.stringify(boletoData) });\r\n export const updateParcel = (boletoId, parcelId, updateData) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n export const deleteParcel = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'DELETE' });\r\n export const deleteBoleto = (boletoId) => apiCall(`/api/boletos/${boletoId}`, { method: 'DELETE' });\r\n+export const uploadAttachment = (boletoId, parcelId, formData) => {\r\n+    return apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, {\r\n+        method: 'POST',\r\n+        body: formData,\r\n+        isFormData: true \r\n+    });\r\n+};\r\n \r\n \r\n // --- Funções de Permissões ---\r\n export const getPermissions = () => apiCall('/api/permissions');\r\n@@ -82,87 +88,5 @@\n export const findNfe = (chave) => apiCall(`/api/nfe/${chave}`);\r\n \r\n \r\n // --- Funções de Contato ---\r\n-export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\n-import { API_BASE_URL } from './config.js';\r\n-\r\n-/**\r\n- * Função genérica para realizar chamadas à API.\r\n- * @param {string} endpoint - O endpoint para o qual a chamada será feita (ex: '/api/boletos').\r\n- * @param {object} options - As opções para o 'fetch' (method, body, etc.).\r\n- * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n- */\r\n-async function apiCall(endpoint, options = {}) {\r\n-    const token = localStorage.getItem('authToken');\r\n-    const headers = {\r\n-        'Content-Type': 'application/json',\r\n-        ...options.headers,\r\n-    };\r\n-\r\n-    if (token) {\r\n-        headers['Authorization'] = `Bearer ${token}`;\r\n-    }\r\n-\r\n-    try {\r\n-        const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n-        const data = await response.json();\r\n-\r\n-        if (!response.ok) {\r\n-            // Lança um erro com a mensagem vinda do backend para ser capturado no 'catch'.\r\n-            throw new Error(data.message || 'Ocorreu um erro desconhecido na API.');\r\n-        }\r\n-\r\n-        return data; // Retorna os dados em caso de sucesso.\r\n-    } catch (error) {\r\n-        console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n-        // Propaga o erro para que a função que chamou possa tratá-lo (ex: com um showToast).\r\n-        throw error;\r\n-    }\r\n-}\r\n-\r\n-// --- Funções de Autenticação ---\r\n-export const loginCompany = (cnpj, password) => apiCall('/api/auth/login/company', { method: 'POST', body: JSON.stringify({ cnpj, password }) });\r\n-export const loginAdmin = (username, password) => apiCall('/api/auth/login/admin', { method: 'POST', body: JSON.stringify({ username, password }) });\r\n-export const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n-export const registerUser = (username, password, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n-export const checkSession = () => apiCall('/api/auth/me');\r\n-export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n-export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n-\r\n-\r\n-// --- Funções do Administrador ---\r\n-export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n-\r\n-\r\n-\r\n-// --- Funções de Empresas ---\r\n-export const getCompanies = () => apiCall('/api/companies');\r\n-export const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\n-export const createCompany = (companyData) => apiCall('/api/companies/register', { method: 'POST', body: JSON.stringify(companyData) });\r\n-export const updateCompany = (companyId, updateData) => apiCall(`/api/companies/${companyId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n-export const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\n-export const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\n-export const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\n-export const removeSubscription = (companyId) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'DELETE' });\r\n-export const updateUserRole = (companyId, userId, role) => apiCall(`/api/companies/${companyId}/users/${userId}/role`, { method: 'PATCH', body: JSON.stringify({ role }) });\r\n-\r\n-\r\n-// --- Funções de Boletos ---\r\n-export const getBoletos = () => apiCall('/api/boletos');\r\n-export const createBoleto = (boletoData) => apiCall('/api/boletos', { method: 'POST', body: JSON.stringify(boletoData) });\r\n-export const updateParcel = (boletoId, parcelId, updateData) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n-export const deleteParcel = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'DELETE' });\r\n-export const deleteBoleto = (boletoId) => apiCall(`/api/boletos/${boletoId}`, { method: 'DELETE' });\r\n-\r\n-\r\n-// --- Funções de Permissões ---\r\n-export const getPermissions = () => apiCall('/api/permissions');\r\n-export const updatePermissions = (permissionsData) => apiCall('/api/permissions', { method: 'PATCH', body: JSON.stringify(permissionsData) });\r\n-\r\n-\r\n-// --- Funções de Pagamentos ---\r\n-export const createSubscriptionLink = () => apiCall('/api/payments/create-subscription', { method: 'POST' });\r\n-\r\n-\r\n-// --- Funções de Contato ---\r\n export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752800059050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,9 @@\n         body: formData,\r\n         isFormData: true \r\n     });\r\n };\r\n+export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n \r\n \r\n // --- Funções de Permissões ---\r\n export const getPermissions = () => apiCall('/api/permissions');\r\n"
                },
                {
                    "date": 1752932026345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n export const registerUser = (username, password, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n export const checkSession = () => apiCall('/api/auth/me');\r\n export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n+export const requestPasswordReset = (email) => apiCall('/api/auth/forgot-password', { method: 'POST', body: JSON.stringify({ email }) });\r\n \r\n \r\n // --- Funções do Administrador ---\r\n export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n"
                },
                {
                    "date": 1752942251948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { API_BASE_URL } from './config.js';\r\n+\r\n+/**\r\n+ * Função genérica para realizar chamadas à API.\r\n+ * @param {string} endpoint - O endpoint para o qual a chamada será feita (ex: '/api/boletos').\r\n+ * @param {object} options - As opções para o 'fetch' (method, body, etc.).\r\n+ * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n+ */\r\n+async function apiCall(endpoint, options = {}) {\r\n+    const token = localStorage.getItem('authToken');\r\n+    const headers = { ...options.headers }; // Inicia os headers\r\n+\r\n+    if (token) {\r\n+        headers['Authorization'] = `Bearer ${token}`;\r\n+    }\r\n+\r\n+    if (!options.isFormData) {\r\n+        headers['Content-Type'] = 'application/json';\r\n+    }\r\n+\r\n+    try {\r\n+        const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n+        const data = await response.json();\r\n+\r\n+        if (!response.ok) {\r\n+            throw new Error(data.message || 'Ocorreu um erro na API.');\r\n+        }\r\n+\r\n+        return data;\r\n+    } catch (error) {\r\n+        console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n+        throw error;\r\n+    }\r\n+}\r\n+\r\n+// --- Funções de Autenticação ---\r\n+export const loginCompany = (cnpj, password) => apiCall('/api/auth/login/company', { method: 'POST', body: JSON.stringify({ cnpj, password }) });\r\n+export const loginAdmin = (username, password) => apiCall('/api/auth/login/admin', { method: 'POST', body: JSON.stringify({ username, password }) });\r\n+export const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n+export const registerUser = (username, password, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n+export const checkSession = () => apiCall('/api/auth/me');\r\n+export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n+export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n+export const requestPasswordReset = (email) => apiCall('/api/auth/forgot-password', { method: 'POST', body: JSON.stringify({ email }) });\r\n+\r\n+\r\n+// --- Funções do Administrador ---\r\n+export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n+\r\n+\r\n+\r\n+// --- Funções de Empresas ---\r\n+export const getCompanies = () => apiCall('/api/companies');\r\n+export const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\n+export const createCompany = (companyData) => apiCall('/api/companies/register', { method: 'POST', body: JSON.stringify(companyData) });\r\n+export const updateCompany = (companyId, updateData) => apiCall(`/api/companies/${companyId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n+export const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\n+export const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\n+export const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\n+export const removeSubscription = (companyId) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'DELETE' });\r\n+export const updateUserRole = (companyId, userId, role) => apiCall(`/api/companies/${companyId}/users/${userId}/role`, { method: 'PATCH', body: JSON.stringify({ role }) });\r\n+export const getCategories = () => apiCall('/api/categories');\r\n+export const createCategory = (name) => apiCall('/api/categories', { method: 'POST', body: JSON.stringify({ name }) });\r\n+export const updateCategory = (id, name) => apiCall(`/api/categories/${id}`, { method: 'PATCH', body: JSON.stringify({ name }) });\r\n+export const deleteCategory = (id) => apiCall(`/api/categories/${id}`, { method: 'DELETE' });\r\n+\r\n+\r\n+// --- Funções de Boletos ---\r\n+export const getBoletos = () => apiCall('/api/boletos');\r\n+export const createBoleto = (boletoData) => apiCall('/api/boletos', { method: 'POST', body: JSON.stringify(boletoData) });\r\n+export const updateParcel = (boletoId, parcelId, updateData) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n+export const deleteParcel = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'DELETE' });\r\n+export const deleteBoleto = (boletoId) => apiCall(`/api/boletos/${boletoId}`, { method: 'DELETE' });\r\n+export const uploadAttachment = (boletoId, parcelId, formData) => {\r\n+    return apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, {\r\n+        method: 'POST',\r\n+        body: formData,\r\n+        isFormData: true \r\n+    });\r\n+};\r\n+export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n+\r\n+\r\n+// --- Funções de Permissões ---\r\n+export const getPermissions = () => apiCall('/api/permissions');\r\n+export const updatePermissions = (permissionsData) => apiCall('/api/permissions', { method: 'PATCH', body: JSON.stringify(permissionsData) });\r\n+\r\n+\r\n+// --- Funções de Pagamentos ---\r\n+export const createSubscriptionLink = () => apiCall('/api/payments/create-subscription', { method: 'POST' });\r\n+\r\n+\r\n+// --- Funções de NFe ---\r\n+export const findNfe = (chave) => apiCall(`/api/nfe/${chave}`);\r\n+\r\n+\r\n+// --- Funções de Contato ---\r\n+export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752947138490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,9 @@\n         isFormData: true \r\n     });\r\n };\r\n export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n+export const updateBoleto = (id, data) => apiCall(`/api/boletos/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n \r\n \r\n // --- Funções de Permissões ---\r\n export const getPermissions = () => apiCall('/api/permissions');\r\n@@ -94,99 +95,5 @@\n export const findNfe = (chave) => apiCall(`/api/nfe/${chave}`);\r\n \r\n \r\n // --- Funções de Contato ---\r\n-export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\n-import { API_BASE_URL } from './config.js';\r\n-\r\n-/**\r\n- * Função genérica para realizar chamadas à API.\r\n- * @param {string} endpoint - O endpoint para o qual a chamada será feita (ex: '/api/boletos').\r\n- * @param {object} options - As opções para o 'fetch' (method, body, etc.).\r\n- * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n- */\r\n-async function apiCall(endpoint, options = {}) {\r\n-    const token = localStorage.getItem('authToken');\r\n-    const headers = { ...options.headers }; // Inicia os headers\r\n-\r\n-    if (token) {\r\n-        headers['Authorization'] = `Bearer ${token}`;\r\n-    }\r\n-\r\n-    if (!options.isFormData) {\r\n-        headers['Content-Type'] = 'application/json';\r\n-    }\r\n-\r\n-    try {\r\n-        const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n-        const data = await response.json();\r\n-\r\n-        if (!response.ok) {\r\n-            throw new Error(data.message || 'Ocorreu um erro na API.');\r\n-        }\r\n-\r\n-        return data;\r\n-    } catch (error) {\r\n-        console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n-        throw error;\r\n-    }\r\n-}\r\n-\r\n-// --- Funções de Autenticação ---\r\n-export const loginCompany = (cnpj, password) => apiCall('/api/auth/login/company', { method: 'POST', body: JSON.stringify({ cnpj, password }) });\r\n-export const loginAdmin = (username, password) => apiCall('/api/auth/login/admin', { method: 'POST', body: JSON.stringify({ username, password }) });\r\n-export const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n-export const registerUser = (username, password, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n-export const checkSession = () => apiCall('/api/auth/me');\r\n-export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n-export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n-export const requestPasswordReset = (email) => apiCall('/api/auth/forgot-password', { method: 'POST', body: JSON.stringify({ email }) });\r\n-\r\n-\r\n-// --- Funções do Administrador ---\r\n-export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n-\r\n-\r\n-\r\n-// --- Funções de Empresas ---\r\n-export const getCompanies = () => apiCall('/api/companies');\r\n-export const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\n-export const createCompany = (companyData) => apiCall('/api/companies/register', { method: 'POST', body: JSON.stringify(companyData) });\r\n-export const updateCompany = (companyId, updateData) => apiCall(`/api/companies/${companyId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n-export const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\n-export const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\n-export const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\n-export const removeSubscription = (companyId) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'DELETE' });\r\n-export const updateUserRole = (companyId, userId, role) => apiCall(`/api/companies/${companyId}/users/${userId}/role`, { method: 'PATCH', body: JSON.stringify({ role }) });\r\n-\r\n-\r\n-// --- Funções de Boletos ---\r\n-export const getBoletos = () => apiCall('/api/boletos');\r\n-export const createBoleto = (boletoData) => apiCall('/api/boletos', { method: 'POST', body: JSON.stringify(boletoData) });\r\n-export const updateParcel = (boletoId, parcelId, updateData) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n-export const deleteParcel = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'DELETE' });\r\n-export const deleteBoleto = (boletoId) => apiCall(`/api/boletos/${boletoId}`, { method: 'DELETE' });\r\n-export const uploadAttachment = (boletoId, parcelId, formData) => {\r\n-    return apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, {\r\n-        method: 'POST',\r\n-        body: formData,\r\n-        isFormData: true \r\n-    });\r\n-};\r\n-export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n-\r\n-\r\n-// --- Funções de Permissões ---\r\n-export const getPermissions = () => apiCall('/api/permissions');\r\n-export const updatePermissions = (permissionsData) => apiCall('/api/permissions', { method: 'PATCH', body: JSON.stringify(permissionsData) });\r\n-\r\n-\r\n-// --- Funções de Pagamentos ---\r\n-export const createSubscriptionLink = () => apiCall('/api/payments/create-subscription', { method: 'POST' });\r\n-\r\n-\r\n-// --- Funções de NFe ---\r\n-export const findNfe = (chave) => apiCall(`/api/nfe/${chave}`);\r\n-\r\n-\r\n-// --- Funções de Contato ---\r\n export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753137427095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,11 +22,13 @@\n         const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n         const data = await response.json();\r\n \r\n         if (!response.ok) {\r\n-            throw new Error(data.message || 'Ocorreu um erro na API.');\r\n+            // MODIFICAÇÃO AQUI\r\n+            const error = new Error(data.message || 'Ocorreu um erro na API.');\r\n+            error.details = data.errors; // Anexa o array de erros detalhados\r\n+            throw error;\r\n         }\r\n-\r\n         return data;\r\n     } catch (error) {\r\n         console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n         throw error;\r\n"
                },
                {
                    "date": 1753281068425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,5 +97,8 @@\n export const findNfe = (chave) => apiCall(`/api/nfe/${chave}`);\r\n \r\n \r\n // --- Funções de Contato ---\r\n-export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\n\\ No newline at end of file\n+export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\r\n+\r\n+// --- Funções DashBoard ---\r\n+export const getExpensesByCategory = () => apiCall('/api/reports/expenses-by-category');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753287685263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,5 +100,6 @@\n // --- Funções de Contato ---\r\n export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\r\n \r\n // --- Funções DashBoard ---\r\n-export const getExpensesByCategory = () => apiCall('/api/reports/expenses-by-category');\n\\ No newline at end of file\n+export const getExpensesByCategory = () => apiCall('/api/reports/expenses-by-category');\r\n+export const getMonthlySummary = () => apiCall('/api/reports/monthly-summary');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753307972476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+import { API_BASE_URL } from './config.js';\r\n+\r\n+/**\r\n+ * Função genérica para realizar chamadas à API.\r\n+ * @param {string} endpoint - O endpoint para o qual a chamada será feita (ex: '/api/boletos').\r\n+ * @param {object} options - As opções para o 'fetch' (method, body, etc.).\r\n+ * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n+ */\r\n+async function apiCall(endpoint, options = {}) {\r\n+    const token = localStorage.getItem('authToken');\r\n+    const headers = { ...options.headers }; // Inicia os headers\r\n+\r\n+    if (token) {\r\n+        headers['Authorization'] = `Bearer ${token}`;\r\n+    }\r\n+\r\n+    if (!options.isFormData) {\r\n+        headers['Content-Type'] = 'application/json';\r\n+    }\r\n+\r\n+    try {\r\n+        const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n+        const data = await response.json();\r\n+\r\n+        if (!response.ok) {\r\n+            // MODIFICAÇÃO AQUI\r\n+            const error = new Error(data.message || 'Ocorreu um erro na API.');\r\n+            error.details = data.errors; // Anexa o array de erros detalhados\r\n+            throw error;\r\n+        }\r\n+        return data;\r\n+    } catch (error) {\r\n+        console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n+        throw error;\r\n+    }\r\n+}\r\n+\r\n+// --- Funções de Autenticação ---\r\n+export const loginCompany = (cnpj, password) => apiCall('/api/auth/login/company', { method: 'POST', body: JSON.stringify({ cnpj, password }) });\r\n+export const loginAdmin = (username, password) => apiCall('/api/auth/login/admin', { method: 'POST', body: JSON.stringify({ username, password }) });\r\n+export const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n+export const registerUser = (username, password, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n+export const checkSession = () => apiCall('/api/auth/me');\r\n+export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n+export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n+export const requestPasswordReset = (email) => apiCall('/api/auth/forgot-password', { method: 'POST', body: JSON.stringify({ email }) });\r\n+\r\n+\r\n+// --- Funções do Administrador ---\r\n+export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n+\r\n+\r\n+\r\n+// --- Funções de Empresas ---\r\n+export const getCompanies = () => apiCall('/api/companies');\r\n+export const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\n+export const createCompany = (companyData) => apiCall('/api/companies/register', { method: 'POST', body: JSON.stringify(companyData) });\r\n+export const updateCompany = (companyId, updateData) => apiCall(`/api/companies/${companyId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n+export const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\n+export const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\n+export const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\n+export const removeSubscription = (companyId) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'DELETE' });\r\n+export const updateUserRole = (companyId, userId, role) => apiCall(`/api/companies/${companyId}/users/${userId}/role`, { method: 'PATCH', body: JSON.stringify({ role }) });\r\n+export const getCategories = () => apiCall('/api/categories');\r\n+export const createCategory = (name) => apiCall('/api/categories', { method: 'POST', body: JSON.stringify({ name }) });\r\n+export const updateCategory = (id, name) => apiCall(`/api/categories/${id}`, { method: 'PATCH', body: JSON.stringify({ name }) });\r\n+export const deleteCategory = (id) => apiCall(`/api/categories/${id}`, { method: 'DELETE' });\r\n+\r\n+\r\n+// --- Funções de Boletos ---\r\n+export const getBoletos = () => apiCall('/api/boletos');\r\n+export const createBoleto = (boletoData) => apiCall('/api/boletos', { method: 'POST', body: JSON.stringify(boletoData) });\r\n+export const updateParcel = (boletoId, parcelId, updateData) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n+export const deleteParcel = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'DELETE' });\r\n+export const deleteBoleto = (boletoId) => apiCall(`/api/boletos/${boletoId}`, { method: 'DELETE' });\r\n+export const uploadAttachment = (boletoId, parcelId, formData) => {\r\n+    return apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, {\r\n+        method: 'POST',\r\n+        body: formData,\r\n+        isFormData: true \r\n+    });\r\n+};\r\n+export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n+export const updateBoleto = (id, data) => apiCall(`/api/boletos/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n+\r\n+\r\n+// --- Funções de Permissões ---\r\n+export const getPermissions = () => apiCall('/api/permissions');\r\n+export const updatePermissions = (permissionsData) => apiCall('/api/permissions', { method: 'PATCH', body: JSON.stringify(permissionsData) });\r\n+\r\n+\r\n+// --- Funções de Pagamentos ---\r\n+export const createSubscriptionLink = () => apiCall('/api/payments/create-subscription', { method: 'POST' });\r\n+\r\n+\r\n+// --- Funções de NFe ---\r\n+export const findNfe = (chave) => apiCall(`/api/nfe/${chave}`);\r\n+\r\n+\r\n+// --- Funções de Contato ---\r\n+export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\r\n+\r\n+// --- Funções DashBoard ---\r\n+export const getExpensesByCategory = () => apiCall('/api/reports/expenses-by-category');\r\n+export const getMonthlySummary = () => apiCall('/api/reports/monthly-summary');\r\n+export const getKpiSummary = () => apiCall('/api/reports/kpi-summary');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753314905117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,112 +100,23 @@\n // --- Funções de Contato ---\r\n export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\r\n \r\n // --- Funções DashBoard ---\r\n-export const getExpensesByCategory = () => apiCall('/api/reports/expenses-by-category');\r\n-export const getMonthlySummary = () => apiCall('/api/reports/monthly-summary');\r\n-export const getKpiSummary = () => apiCall('/api/reports/kpi-summary');\n-import { API_BASE_URL } from './config.js';\r\n \r\n /**\r\n- * Função genérica para realizar chamadas à API.\r\n- * @param {string} endpoint - O endpoint para o qual a chamada será feita (ex: '/api/boletos').\r\n- * @param {object} options - As opções para o 'fetch' (method, body, etc.).\r\n- * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n+ * Constrói uma query string a partir de um objeto de parâmetros.\r\n+ * @param {object} params - O objeto com os parâmetros (ex: {startDate, endDate}).\r\n+ * @returns {string} - A query string formatada (ex: \"?startDate=2025-07-01&endDate=2025-07-31\").\r\n  */\r\n-async function apiCall(endpoint, options = {}) {\r\n-    const token = localStorage.getItem('authToken');\r\n-    const headers = { ...options.headers }; // Inicia os headers\r\n-\r\n-    if (token) {\r\n-        headers['Authorization'] = `Bearer ${token}`;\r\n-    }\r\n-\r\n-    if (!options.isFormData) {\r\n-        headers['Content-Type'] = 'application/json';\r\n-    }\r\n-\r\n-    try {\r\n-        const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n-        const data = await response.json();\r\n-\r\n-        if (!response.ok) {\r\n-            // MODIFICAÇÃO AQUI\r\n-            const error = new Error(data.message || 'Ocorreu um erro na API.');\r\n-            error.details = data.errors; // Anexa o array de erros detalhados\r\n-            throw error;\r\n-        }\r\n-        return data;\r\n-    } catch (error) {\r\n-        console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n-        throw error;\r\n-    }\r\n+function buildQueryString(params) {\r\n+    // Remove quaisquer chaves que não tenham valor\r\n+    const validParams = Object.fromEntries(\r\n+      Object.entries(params).filter(([_, v]) => v != null && v !== '')\r\n+    );\r\n+    \r\n+    const query = new URLSearchParams(validParams).toString();\r\n+    return query ? `?${query}` : '';\r\n }\r\n \r\n-// --- Funções de Autenticação ---\r\n-export const loginCompany = (cnpj, password) => apiCall('/api/auth/login/company', { method: 'POST', body: JSON.stringify({ cnpj, password }) });\r\n-export const loginAdmin = (username, password) => apiCall('/api/auth/login/admin', { method: 'POST', body: JSON.stringify({ username, password }) });\r\n-export const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n-export const registerUser = (username, password, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n-export const checkSession = () => apiCall('/api/auth/me');\r\n-export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n-export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n-export const requestPasswordReset = (email) => apiCall('/api/auth/forgot-password', { method: 'POST', body: JSON.stringify({ email }) });\r\n-\r\n-\r\n-// --- Funções do Administrador ---\r\n-export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n-\r\n-\r\n-\r\n-// --- Funções de Empresas ---\r\n-export const getCompanies = () => apiCall('/api/companies');\r\n-export const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\n-export const createCompany = (companyData) => apiCall('/api/companies/register', { method: 'POST', body: JSON.stringify(companyData) });\r\n-export const updateCompany = (companyId, updateData) => apiCall(`/api/companies/${companyId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n-export const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\n-export const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\n-export const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\n-export const removeSubscription = (companyId) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'DELETE' });\r\n-export const updateUserRole = (companyId, userId, role) => apiCall(`/api/companies/${companyId}/users/${userId}/role`, { method: 'PATCH', body: JSON.stringify({ role }) });\r\n-export const getCategories = () => apiCall('/api/categories');\r\n-export const createCategory = (name) => apiCall('/api/categories', { method: 'POST', body: JSON.stringify({ name }) });\r\n-export const updateCategory = (id, name) => apiCall(`/api/categories/${id}`, { method: 'PATCH', body: JSON.stringify({ name }) });\r\n-export const deleteCategory = (id) => apiCall(`/api/categories/${id}`, { method: 'DELETE' });\r\n-\r\n-\r\n-// --- Funções de Boletos ---\r\n-export const getBoletos = () => apiCall('/api/boletos');\r\n-export const createBoleto = (boletoData) => apiCall('/api/boletos', { method: 'POST', body: JSON.stringify(boletoData) });\r\n-export const updateParcel = (boletoId, parcelId, updateData) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n-export const deleteParcel = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'DELETE' });\r\n-export const deleteBoleto = (boletoId) => apiCall(`/api/boletos/${boletoId}`, { method: 'DELETE' });\r\n-export const uploadAttachment = (boletoId, parcelId, formData) => {\r\n-    return apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, {\r\n-        method: 'POST',\r\n-        body: formData,\r\n-        isFormData: true \r\n-    });\r\n-};\r\n-export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n-export const updateBoleto = (id, data) => apiCall(`/api/boletos/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n-\r\n-\r\n-// --- Funções de Permissões ---\r\n-export const getPermissions = () => apiCall('/api/permissions');\r\n-export const updatePermissions = (permissionsData) => apiCall('/api/permissions', { method: 'PATCH', body: JSON.stringify(permissionsData) });\r\n-\r\n-\r\n-// --- Funções de Pagamentos ---\r\n-export const createSubscriptionLink = () => apiCall('/api/payments/create-subscription', { method: 'POST' });\r\n-\r\n\\ No newline at end of file\n-\r\n-// --- Funções de NFe ---\r\n-export const findNfe = (chave) => apiCall(`/api/nfe/${chave}`);\r\n-\r\n-\r\n-// --- Funções de Contato ---\r\n-export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\r\n-\r\n-// --- Funções DashBoard ---\r\n-export const getExpensesByCategory = () => apiCall('/api/reports/expenses-by-category');\r\n-export const getMonthlySummary = () => apiCall('/api/reports/monthly-summary');\n+export const getExpensesByCategory = (dateRange = {}) => apiCall(`/api/reports/expenses-by-category${buildQueryString(dateRange)}`);\r\n+export const getMonthlySummary = (dateRange = {}) => apiCall(`/api/reports/monthly-summary${buildQueryString(dateRange)}`);\r\n+export const getKpiSummary = (dateRange = {}) => apiCall(`/api/reports/kpi-summary${buildQueryString(dateRange)}`);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753315912040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,5 +118,6 @@\n }\r\n \r\n export const getExpensesByCategory = (dateRange = {}) => apiCall(`/api/reports/expenses-by-category${buildQueryString(dateRange)}`);\r\n export const getMonthlySummary = (dateRange = {}) => apiCall(`/api/reports/monthly-summary${buildQueryString(dateRange)}`);\r\n-export const getKpiSummary = (dateRange = {}) => apiCall(`/api/reports/kpi-summary${buildQueryString(dateRange)}`);\n\\ No newline at end of file\n+export const getKpiSummary = (dateRange = {}) => apiCall(`/api/reports/kpi-summary${buildQueryString(dateRange)}`);\r\n+export const getUpcomingPayments = () => apiCall('/api/reports/upcoming-payments');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753457779690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,5 +119,12 @@\n \r\n export const getExpensesByCategory = (dateRange = {}) => apiCall(`/api/reports/expenses-by-category${buildQueryString(dateRange)}`);\r\n export const getMonthlySummary = (dateRange = {}) => apiCall(`/api/reports/monthly-summary${buildQueryString(dateRange)}`);\r\n export const getKpiSummary = (dateRange = {}) => apiCall(`/api/reports/kpi-summary${buildQueryString(dateRange)}`);\r\n-export const getUpcomingPayments = () => apiCall('/api/reports/upcoming-payments');\n\\ No newline at end of file\n+export const getUpcomingPayments = () => apiCall('/api/reports/upcoming-payments');\r\n+\r\n+// --- Funções Importação ---\r\n+\r\n+export const importBoletos = (boletosData) => apiCall('/api/boletos/batch-import', { \r\n+    method: 'POST', \r\n+    body: JSON.stringify({ boletos: boletosData }) \r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753470844391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,9 @@\n     });\r\n };\r\n export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n export const updateBoleto = (id, data) => apiCall(`/api/boletos/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n+export const markParcelsAsPaid = (parcelIds) => apiCall('/api/boletos/parcels/mark-as-paid', { method: 'PATCH', body: JSON.stringify({ parcelIds }) });\r\n \r\n \r\n // --- Funções de Permissões ---\r\n export const getPermissions = () => apiCall('/api/permissions');\r\n"
                },
                {
                    "date": 1753475831846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,10 +117,10 @@\n     const query = new URLSearchParams(validParams).toString();\r\n     return query ? `?${query}` : '';\r\n }\r\n \r\n-export const getExpensesByCategory = (dateRange = {}) => apiCall(`/api/reports/expenses-by-category${buildQueryString(dateRange)}`);\r\n-export const getMonthlySummary = (dateRange = {}) => apiCall(`/api/reports/monthly-summary${buildQueryString(dateRange)}`);\r\n+export const getExpensesByCategory = (dateRange = {}, status = 'all') => apiCall(`/api/reports/expenses-by-category${buildQueryString({ ...dateRange, status })}`);\r\n+export const getMonthlySummary = (dateRange = {}, status = 'all') => apiCall(`/api/reports/monthly-summary${buildQueryString({ ...dateRange, status })}`);\r\n export const getKpiSummary = (dateRange = {}) => apiCall(`/api/reports/kpi-summary${buildQueryString(dateRange)}`);\r\n export const getUpcomingPayments = () => apiCall('/api/reports/upcoming-payments');\r\n \r\n // --- Funções Importação ---\r\n"
                },
                {
                    "date": 1753477051566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,9 @@\n };\r\n export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n export const updateBoleto = (id, data) => apiCall(`/api/boletos/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n export const markParcelsAsPaid = (parcelIds) => apiCall('/api/boletos/parcels/mark-as-paid', { method: 'PATCH', body: JSON.stringify({ parcelIds }) });\r\n+export const bulkUpdateCategory = (boletoIds, categoryId) => apiCall('/api/boletos/bulk-update-category', { method: 'PATCH', body: JSON.stringify({ boletoIds, categoryId }) });\r\n \r\n \r\n // --- Funções de Permissões ---\r\n export const getPermissions = () => apiCall('/api/permissions');\r\n"
                },
                {
                    "date": 1753544807128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n // --- Funções de Autenticação ---\r\n export const loginCompany = (cnpj, password) => apiCall('/api/auth/login/company', { method: 'POST', body: JSON.stringify({ cnpj, password }) });\r\n export const loginAdmin = (username, password) => apiCall('/api/auth/login/admin', { method: 'POST', body: JSON.stringify({ username, password }) });\r\n export const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n-export const registerUser = (username, password, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n+export const registerUser = (username, password, email, role, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, email, role, companyId }) });\r\n export const checkSession = () => apiCall('/api/auth/me');\r\n export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n export const requestPasswordReset = (email) => apiCall('/api/auth/forgot-password', { method: 'POST', body: JSON.stringify({ email }) });\r\n"
                },
                {
                    "date": 1753741176498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n export const checkSession = () => apiCall('/api/auth/me');\r\n export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n export const requestPasswordReset = (email) => apiCall('/api/auth/forgot-password', { method: 'POST', body: JSON.stringify({ email }) });\r\n+export const changePassword = (passwords) => apiCall('/api/auth/change-password', { method: 'POST', body: JSON.stringify(passwords) });\r\n \r\n \r\n // --- Funções do Administrador ---\r\n export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n"
                },
                {
                    "date": 1753741600178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n export const requestPasswordReset = (email) => apiCall('/api/auth/forgot-password', { method: 'POST', body: JSON.stringify({ email }) });\r\n export const changePassword = (passwords) => apiCall('/api/auth/change-password', { method: 'POST', body: JSON.stringify(passwords) });\r\n+export const resendVerificationEmail = () => apiCall('/api/auth/resend-verification', { method: 'POST' });\r\n \r\n \r\n // --- Funções do Administrador ---\r\n export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n"
                },
                {
                    "date": 1753747316325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,12 @@\n export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n export const updateBoleto = (id, data) => apiCall(`/api/boletos/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n export const markParcelsAsPaid = (parcelIds) => apiCall('/api/boletos/parcels/mark-as-paid', { method: 'PATCH', body: JSON.stringify({ parcelIds }) });\r\n export const bulkUpdateCategory = (boletoIds, categoryId) => apiCall('/api/boletos/bulk-update-category', { method: 'PATCH', body: JSON.stringify({ boletoIds, categoryId }) });\r\n+export const bulkUpdateParcels = (boletoId, parcelId, updatedData, scope) => apiCall('/api/boletos/bulk-update-parcels', { \r\n+    method: 'PATCH', \r\n+    body: JSON.stringify({ boletoId, parcelId, updatedData, scope }) \r\n+});\r\n \r\n \r\n // --- Funções de Permissões ---\r\n export const getPermissions = () => apiCall('/api/permissions');\r\n"
                },
                {
                    "date": 1753805562912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n import { API_BASE_URL } from './config.js';\r\n \r\n /**\r\n- * Função genérica para realizar chamadas à API.\r\n+ * Função genérica para realizar chamadas à API, agora com tratamento para tokens expirados.\r\n  * @param {string} endpoint - O endpoint para o qual a chamada será feita (ex: '/api/boletos').\r\n  * @param {object} options - As opções para o 'fetch' (method, body, etc.).\r\n  * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n  */\r\n async function apiCall(endpoint, options = {}) {\r\n     const token = localStorage.getItem('authToken');\r\n-    const headers = { ...options.headers }; // Inicia os headers\r\n+    const headers = { ...options.headers };\r\n \r\n     if (token) {\r\n         headers['Authorization'] = `Bearer ${token}`;\r\n     }\r\n@@ -19,19 +19,36 @@\n     }\r\n \r\n     try {\r\n         const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n+\r\n+        // --- NOVA LÓGICA DE TRATAMENTO DE ERRO ---\r\n+        if (response.status === 401) {\r\n+            // Se o erro for 401 (Não Autorizado), o token provavelmente expirou.\r\n+            console.warn(\"Token expirado ou inválido. A redirecionar para o login.\");\r\n+\r\n+            // Limpa os dados de sessão do navegador\r\n+            localStorage.removeItem('authToken');\r\n+            localStorage.removeItem('superAdminToken');\r\n+\r\n+            // Redireciona o utilizador para a página de login\r\n+            window.location.href = 'Index.html';\r\n+\r\n+            // Lança um erro para interromper a execução do código que chamou esta função\r\n+            throw new Error('Sessão expirada. Por favor, faça login novamente.');\r\n+        }\r\n+\r\n         const data = await response.json();\r\n \r\n         if (!response.ok) {\r\n-            // MODIFICAÇÃO AQUI\r\n             const error = new Error(data.message || 'Ocorreu um erro na API.');\r\n-            error.details = data.errors; // Anexa o array de erros detalhados\r\n+            error.details = data.errors;\r\n             throw error;\r\n         }\r\n         return data;\r\n     } catch (error) {\r\n         console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n+        // Re-lança o erro para que a função que chamou saiba que algo deu errado\r\n         throw error;\r\n     }\r\n }\r\n \r\n"
                },
                {
                    "date": 1753807398968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,5 +151,8 @@\n \r\n export const importBoletos = (boletosData) => apiCall('/api/boletos/batch-import', { \r\n     method: 'POST', \r\n     body: JSON.stringify({ boletos: boletosData }) \r\n-});\n\\ No newline at end of file\n+});\r\n+\r\n+// --- Funções de Anúncios ---\r\n+export const getActiveAnnouncement = () => apiCall('/api/announcements/active');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753812874729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n \r\n // --- Funções de Empresas ---\r\n export const getCompanies = () => apiCall('/api/companies');\r\n export const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\n-export const createCompany = (companyData) => apiCall('/api/companies/register', { method: 'POST', body: JSON.stringify(companyData) });\r\n+export const createCompany = (companyData) => apiCall('/api/companies', { method: 'POST', body: JSON.stringify(companyData) });\r\n export const updateCompany = (companyId, updateData) => apiCall(`/api/companies/${companyId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n export const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\n export const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\n export const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\n"
                },
                {
                    "date": 1753820526703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,5 +154,9 @@\n     body: JSON.stringify({ boletos: boletosData }) \r\n });\r\n \r\n // --- Funções de Anúncios ---\r\n-export const getActiveAnnouncement = () => apiCall('/api/announcements/active');\n\\ No newline at end of file\n+export const getActiveAnnouncement = () => apiCall('/api/announcements/active');\r\n+export const getAllAnnouncements = () => apiCall('/api/admin/announcements');\r\n+export const createAnnouncement = (data) => apiCall('/api/admin/announcements', { method: 'POST', body: JSON.stringify(data) });\r\n+export const updateAnnouncement = (id, data) => apiCall(`/api/admin/announcements/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n+export const deleteAnnouncement = (id) => apiCall(`/api/admin/announcements/${id}`, { method: 'DELETE' });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754060930765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,5 +158,8 @@\n export const getActiveAnnouncement = () => apiCall('/api/announcements/active');\r\n export const getAllAnnouncements = () => apiCall('/api/admin/announcements');\r\n export const createAnnouncement = (data) => apiCall('/api/admin/announcements', { method: 'POST', body: JSON.stringify(data) });\r\n export const updateAnnouncement = (id, data) => apiCall(`/api/admin/announcements/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n-export const deleteAnnouncement = (id) => apiCall(`/api/admin/announcements/${id}`, { method: 'DELETE' });\n\\ No newline at end of file\n+export const deleteAnnouncement = (id) => apiCall(`/api/admin/announcements/${id}`, { method: 'DELETE' });\r\n+\r\n+// --- Funções do Dashboard de Admin ---\r\n+export const getAdminDashboardStats = () => apiCall('/api/admin/dashboard-stats');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754062512628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,5 +161,7 @@\n export const updateAnnouncement = (id, data) => apiCall(`/api/admin/announcements/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n export const deleteAnnouncement = (id) => apiCall(`/api/admin/announcements/${id}`, { method: 'DELETE' });\r\n \r\n // --- Funções do Dashboard de Admin ---\r\n-export const getAdminDashboardStats = () => apiCall('/api/admin/dashboard-stats');\n\\ No newline at end of file\n+export const getAdminDashboardStats = () => apiCall('/api/admin/dashboard-stats');\r\n+\r\n+export const getAdminSubscriptions = () => apiCall('/api/admin/subscriptions');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754144804152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+import { API_BASE_URL } from './config.js';\r\n+\r\n+/**\r\n+ * Função genérica para realizar chamadas à API, agora com tratamento para tokens expirados.\r\n+ * @param {string} endpoint - O endpoint para o qual a chamada será feita (ex: '/api/boletos').\r\n+ * @param {object} options - As opções para o 'fetch' (method, body, etc.).\r\n+ * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n+ */\r\n+async function apiCall(endpoint, options = {}) {\r\n+    const token = localStorage.getItem('authToken');\r\n+    const headers = { ...options.headers };\r\n+\r\n+    if (token) {\r\n+        headers['Authorization'] = `Bearer ${token}`;\r\n+    }\r\n+\r\n+    if (!options.isFormData) {\r\n+        headers['Content-Type'] = 'application/json';\r\n+    }\r\n+\r\n+    try {\r\n+        const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n+\r\n+        // --- NOVA LÓGICA DE TRATAMENTO DE ERRO ---\r\n+        if (response.status === 401) {\r\n+            // Se o erro for 401 (Não Autorizado), o token provavelmente expirou.\r\n+            console.warn(\"Token expirado ou inválido. A redirecionar para o login.\");\r\n+\r\n+            // Limpa os dados de sessão do navegador\r\n+            localStorage.removeItem('authToken');\r\n+            localStorage.removeItem('superAdminToken');\r\n+\r\n+            // Redireciona o utilizador para a página de login\r\n+            window.location.href = 'Index.html';\r\n+\r\n+            // Lança um erro para interromper a execução do código que chamou esta função\r\n+            throw new Error('Sessão expirada. Por favor, faça login novamente.');\r\n+        }\r\n+\r\n+        const data = await response.json();\r\n+\r\n+        if (!response.ok) {\r\n+            const error = new Error(data.message || 'Ocorreu um erro na API.');\r\n+            error.details = data.errors;\r\n+            throw error;\r\n+        }\r\n+        return data;\r\n+    } catch (error) {\r\n+        console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n+        // Re-lança o erro para que a função que chamou saiba que algo deu errado\r\n+        throw error;\r\n+    }\r\n+}\r\n+\r\n+// --- Funções de Autenticação ---\r\n+export const loginCompany = (cnpj, password) => apiCall('/api/auth/login/company', { method: 'POST', body: JSON.stringify({ cnpj, password }) });\r\n+export const loginAdmin = (username, password) => apiCall('/api/auth/login/admin', { method: 'POST', body: JSON.stringify({ username, password }) });\r\n+export const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n+export const registerUser = (username, password, email, role, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, email, role, companyId }) });\r\n+export const checkSession = () => apiCall('/api/auth/me');\r\n+export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n+export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n+export const requestPasswordReset = (email) => apiCall('/api/auth/forgot-password', { method: 'POST', body: JSON.stringify({ email }) });\r\n+export const changePassword = (passwords) => apiCall('/api/auth/change-password', { method: 'POST', body: JSON.stringify(passwords) });\r\n+export const resendVerificationEmail = () => apiCall('/api/auth/resend-verification', { method: 'POST' });\r\n+\r\n+\r\n+// --- Funções do Administrador ---\r\n+export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n+export const getEmailTemplates = () => apiCall('/api/admin/email-templates');\r\n+export const updateEmailTemplate = (templateId, data) => apiCall(`/api/admin/email-templates/${templateId}`, {\r\n+    method: 'PATCH',\r\n+    body: JSON.stringify(data)\r\n+});\r\n+\r\n+\r\n+\r\n+// --- Funções de Empresas ---\r\n+export const getCompanies = () => apiCall('/api/companies');\r\n+export const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\n+export const createCompany = (companyData) => apiCall('/api/companies', { method: 'POST', body: JSON.stringify(companyData) });\r\n+export const updateCompany = (companyId, updateData) => apiCall(`/api/companies/${companyId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n+export const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\n+export const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\n+export const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\n+export const removeSubscription = (companyId) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'DELETE' });\r\n+export const updateUserRole = (companyId, userId, role) => apiCall(`/api/companies/${companyId}/users/${userId}/role`, { method: 'PATCH', body: JSON.stringify({ role }) });\r\n+export const getCategories = () => apiCall('/api/categories');\r\n+export const createCategory = (name) => apiCall('/api/categories', { method: 'POST', body: JSON.stringify({ name }) });\r\n+export const updateCategory = (id, name) => apiCall(`/api/categories/${id}`, { method: 'PATCH', body: JSON.stringify({ name }) });\r\n+export const deleteCategory = (id) => apiCall(`/api/categories/${id}`, { method: 'DELETE' });\r\n+\r\n+\r\n+// --- Funções de Boletos ---\r\n+export const getBoletos = () => apiCall('/api/boletos');\r\n+export const createBoleto = (boletoData) => apiCall('/api/boletos', { method: 'POST', body: JSON.stringify(boletoData) });\r\n+export const updateParcel = (boletoId, parcelId, updateData) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n+export const deleteParcel = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'DELETE' });\r\n+export const deleteBoleto = (boletoId) => apiCall(`/api/boletos/${boletoId}`, { method: 'DELETE' });\r\n+export const uploadAttachment = (boletoId, parcelId, formData) => {\r\n+    return apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, {\r\n+        method: 'POST',\r\n+        body: formData,\r\n+        isFormData: true \r\n+    });\r\n+};\r\n+export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n+export const updateBoleto = (id, data) => apiCall(`/api/boletos/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n+export const markParcelsAsPaid = (parcelIds) => apiCall('/api/boletos/parcels/mark-as-paid', { method: 'PATCH', body: JSON.stringify({ parcelIds }) });\r\n+export const bulkUpdateCategory = (boletoIds, categoryId) => apiCall('/api/boletos/bulk-update-category', { method: 'PATCH', body: JSON.stringify({ boletoIds, categoryId }) });\r\n+export const bulkUpdateParcels = (boletoId, parcelId, updatedData, scope) => apiCall('/api/boletos/bulk-update-parcels', { \r\n+    method: 'PATCH', \r\n+    body: JSON.stringify({ boletoId, parcelId, updatedData, scope }) \r\n+});\r\n+\r\n+\r\n+// --- Funções de Permissões ---\r\n+export const getPermissions = () => apiCall('/api/permissions');\r\n+export const updatePermissions = (permissionsData) => apiCall('/api/permissions', { method: 'PATCH', body: JSON.stringify(permissionsData) });\r\n+\r\n+\r\n+// --- Funções de Pagamentos ---\r\n+export const createSubscriptionLink = () => apiCall('/api/payments/create-subscription', { method: 'POST' });\r\n+\r\n+\r\n+// --- Funções de NFe ---\r\n+export const findNfe = (chave) => apiCall(`/api/nfe/${chave}`);\r\n+\r\n+\r\n+// --- Funções de Contato ---\r\n+export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\r\n+\r\n+// --- Funções DashBoard ---\r\n+\r\n+/**\r\n+ * Constrói uma query string a partir de um objeto de parâmetros.\r\n+ * @param {object} params - O objeto com os parâmetros (ex: {startDate, endDate}).\r\n+ * @returns {string} - A query string formatada (ex: \"?startDate=2025-07-01&endDate=2025-07-31\").\r\n+ */\r\n+function buildQueryString(params) {\r\n+    // Remove quaisquer chaves que não tenham valor\r\n+    const validParams = Object.fromEntries(\r\n+      Object.entries(params).filter(([_, v]) => v != null && v !== '')\r\n+    );\r\n+    \r\n+    const query = new URLSearchParams(validParams).toString();\r\n+    return query ? `?${query}` : '';\r\n+}\r\n+\r\n+export const getExpensesByCategory = (dateRange = {}, status = 'all') => apiCall(`/api/reports/expenses-by-category${buildQueryString({ ...dateRange, status })}`);\r\n+export const getMonthlySummary = (dateRange = {}, status = 'all') => apiCall(`/api/reports/monthly-summary${buildQueryString({ ...dateRange, status })}`);\r\n+export const getKpiSummary = (dateRange = {}) => apiCall(`/api/reports/kpi-summary${buildQueryString(dateRange)}`);\r\n+export const getUpcomingPayments = () => apiCall('/api/reports/upcoming-payments');\r\n+\r\n+// --- Funções Importação ---\r\n+\r\n+export const importBoletos = (boletosData) => apiCall('/api/boletos/batch-import', { \r\n+    method: 'POST', \r\n+    body: JSON.stringify({ boletos: boletosData }) \r\n+});\r\n+\r\n+// --- Funções de Anúncios ---\r\n+export const getActiveAnnouncement = () => apiCall('/api/announcements/active');\r\n+export const getAllAnnouncements = () => apiCall('/api/admin/announcements');\r\n+export const createAnnouncement = (data) => apiCall('/api/admin/announcements', { method: 'POST', body: JSON.stringify(data) });\r\n+export const updateAnnouncement = (id, data) => apiCall(`/api/admin/announcements/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n+export const deleteAnnouncement = (id) => apiCall(`/api/admin/announcements/${id}`, { method: 'DELETE' });\r\n+\r\n+// --- Funções do Dashboard de Admin ---\r\n+export const getAdminDashboardStats = () => apiCall('/api/admin/dashboard-stats');\r\n+\r\n+export const getAdminSubscriptions = () => apiCall('/api/admin/subscriptions');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754145352364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n export const updateEmailTemplate = (templateId, data) => apiCall(`/api/admin/email-templates/${templateId}`, {\r\n     method: 'PATCH',\r\n     body: JSON.stringify(data)\r\n });\r\n+export const getEmailTemplateById = (templateId) => apiCall(`/api/admin/email-templates/${templateId}`);\r\n \r\n \r\n \r\n // --- Funções de Empresas ---\r\n@@ -168,172 +169,5 @@\n \r\n // --- Funções do Dashboard de Admin ---\r\n export const getAdminDashboardStats = () => apiCall('/api/admin/dashboard-stats');\r\n \r\n-export const getAdminSubscriptions = () => apiCall('/api/admin/subscriptions');\n-import { API_BASE_URL } from './config.js';\r\n-\r\n-/**\r\n- * Função genérica para realizar chamadas à API, agora com tratamento para tokens expirados.\r\n- * @param {string} endpoint - O endpoint para o qual a chamada será feita (ex: '/api/boletos').\r\n- * @param {object} options - As opções para o 'fetch' (method, body, etc.).\r\n- * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n- */\r\n-async function apiCall(endpoint, options = {}) {\r\n-    const token = localStorage.getItem('authToken');\r\n-    const headers = { ...options.headers };\r\n-\r\n-    if (token) {\r\n-        headers['Authorization'] = `Bearer ${token}`;\r\n-    }\r\n-\r\n-    if (!options.isFormData) {\r\n-        headers['Content-Type'] = 'application/json';\r\n-    }\r\n-\r\n-    try {\r\n-        const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n-\r\n-        // --- NOVA LÓGICA DE TRATAMENTO DE ERRO ---\r\n-        if (response.status === 401) {\r\n-            // Se o erro for 401 (Não Autorizado), o token provavelmente expirou.\r\n-            console.warn(\"Token expirado ou inválido. A redirecionar para o login.\");\r\n-\r\n-            // Limpa os dados de sessão do navegador\r\n-            localStorage.removeItem('authToken');\r\n-            localStorage.removeItem('superAdminToken');\r\n-\r\n-            // Redireciona o utilizador para a página de login\r\n-            window.location.href = 'Index.html';\r\n-\r\n-            // Lança um erro para interromper a execução do código que chamou esta função\r\n-            throw new Error('Sessão expirada. Por favor, faça login novamente.');\r\n-        }\r\n-\r\n-        const data = await response.json();\r\n-\r\n-        if (!response.ok) {\r\n-            const error = new Error(data.message || 'Ocorreu um erro na API.');\r\n-            error.details = data.errors;\r\n-            throw error;\r\n-        }\r\n-        return data;\r\n-    } catch (error) {\r\n-        console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n-        // Re-lança o erro para que a função que chamou saiba que algo deu errado\r\n-        throw error;\r\n-    }\r\n-}\r\n-\r\n-// --- Funções de Autenticação ---\r\n-export const loginCompany = (cnpj, password) => apiCall('/api/auth/login/company', { method: 'POST', body: JSON.stringify({ cnpj, password }) });\r\n-export const loginAdmin = (username, password) => apiCall('/api/auth/login/admin', { method: 'POST', body: JSON.stringify({ username, password }) });\r\n-export const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n-export const registerUser = (username, password, email, role, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, email, role, companyId }) });\r\n-export const checkSession = () => apiCall('/api/auth/me');\r\n-export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n-export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n-export const requestPasswordReset = (email) => apiCall('/api/auth/forgot-password', { method: 'POST', body: JSON.stringify({ email }) });\r\n-export const changePassword = (passwords) => apiCall('/api/auth/change-password', { method: 'POST', body: JSON.stringify(passwords) });\r\n-export const resendVerificationEmail = () => apiCall('/api/auth/resend-verification', { method: 'POST' });\r\n-\r\n-\r\n-// --- Funções do Administrador ---\r\n-export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n-\r\n-\r\n-\r\n-// --- Funções de Empresas ---\r\n-export const getCompanies = () => apiCall('/api/companies');\r\n-export const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\n-export const createCompany = (companyData) => apiCall('/api/companies', { method: 'POST', body: JSON.stringify(companyData) });\r\n-export const updateCompany = (companyId, updateData) => apiCall(`/api/companies/${companyId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n-export const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\n-export const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\n-export const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\n-export const removeSubscription = (companyId) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'DELETE' });\r\n-export const updateUserRole = (companyId, userId, role) => apiCall(`/api/companies/${companyId}/users/${userId}/role`, { method: 'PATCH', body: JSON.stringify({ role }) });\r\n-export const getCategories = () => apiCall('/api/categories');\r\n-export const createCategory = (name) => apiCall('/api/categories', { method: 'POST', body: JSON.stringify({ name }) });\r\n-export const updateCategory = (id, name) => apiCall(`/api/categories/${id}`, { method: 'PATCH', body: JSON.stringify({ name }) });\r\n-export const deleteCategory = (id) => apiCall(`/api/categories/${id}`, { method: 'DELETE' });\r\n-\r\n-\r\n-// --- Funções de Boletos ---\r\n-export const getBoletos = () => apiCall('/api/boletos');\r\n-export const createBoleto = (boletoData) => apiCall('/api/boletos', { method: 'POST', body: JSON.stringify(boletoData) });\r\n-export const updateParcel = (boletoId, parcelId, updateData) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n-export const deleteParcel = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'DELETE' });\r\n-export const deleteBoleto = (boletoId) => apiCall(`/api/boletos/${boletoId}`, { method: 'DELETE' });\r\n-export const uploadAttachment = (boletoId, parcelId, formData) => {\r\n-    return apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, {\r\n-        method: 'POST',\r\n-        body: formData,\r\n-        isFormData: true \r\n-    });\r\n-};\r\n-export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n-export const updateBoleto = (id, data) => apiCall(`/api/boletos/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n-export const markParcelsAsPaid = (parcelIds) => apiCall('/api/boletos/parcels/mark-as-paid', { method: 'PATCH', body: JSON.stringify({ parcelIds }) });\r\n-export const bulkUpdateCategory = (boletoIds, categoryId) => apiCall('/api/boletos/bulk-update-category', { method: 'PATCH', body: JSON.stringify({ boletoIds, categoryId }) });\r\n-export const bulkUpdateParcels = (boletoId, parcelId, updatedData, scope) => apiCall('/api/boletos/bulk-update-parcels', { \r\n-    method: 'PATCH', \r\n-    body: JSON.stringify({ boletoId, parcelId, updatedData, scope }) \r\n-});\r\n-\r\n-\r\n-// --- Funções de Permissões ---\r\n-export const getPermissions = () => apiCall('/api/permissions');\r\n-export const updatePermissions = (permissionsData) => apiCall('/api/permissions', { method: 'PATCH', body: JSON.stringify(permissionsData) });\r\n-\r\n-\r\n-// --- Funções de Pagamentos ---\r\n-export const createSubscriptionLink = () => apiCall('/api/payments/create-subscription', { method: 'POST' });\r\n-\r\n-\r\n-// --- Funções de NFe ---\r\n-export const findNfe = (chave) => apiCall(`/api/nfe/${chave}`);\r\n-\r\n-\r\n-// --- Funções de Contato ---\r\n-export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\r\n-\r\n-// --- Funções DashBoard ---\r\n-\r\n-/**\r\n- * Constrói uma query string a partir de um objeto de parâmetros.\r\n- * @param {object} params - O objeto com os parâmetros (ex: {startDate, endDate}).\r\n- * @returns {string} - A query string formatada (ex: \"?startDate=2025-07-01&endDate=2025-07-31\").\r\n- */\r\n-function buildQueryString(params) {\r\n-    // Remove quaisquer chaves que não tenham valor\r\n-    const validParams = Object.fromEntries(\r\n-      Object.entries(params).filter(([_, v]) => v != null && v !== '')\r\n-    );\r\n-    \r\n-    const query = new URLSearchParams(validParams).toString();\r\n-    return query ? `?${query}` : '';\r\n-}\r\n-\r\n-export const getExpensesByCategory = (dateRange = {}, status = 'all') => apiCall(`/api/reports/expenses-by-category${buildQueryString({ ...dateRange, status })}`);\r\n-export const getMonthlySummary = (dateRange = {}, status = 'all') => apiCall(`/api/reports/monthly-summary${buildQueryString({ ...dateRange, status })}`);\r\n-export const getKpiSummary = (dateRange = {}) => apiCall(`/api/reports/kpi-summary${buildQueryString(dateRange)}`);\r\n-export const getUpcomingPayments = () => apiCall('/api/reports/upcoming-payments');\r\n-\r\n-// --- Funções Importação ---\r\n-\r\n-export const importBoletos = (boletosData) => apiCall('/api/boletos/batch-import', { \r\n-    method: 'POST', \r\n-    body: JSON.stringify({ boletos: boletosData }) \r\n-});\r\n-\r\n-// --- Funções de Anúncios ---\r\n-export const getActiveAnnouncement = () => apiCall('/api/announcements/active');\r\n-export const getAllAnnouncements = () => apiCall('/api/admin/announcements');\r\n-export const createAnnouncement = (data) => apiCall('/api/admin/announcements', { method: 'POST', body: JSON.stringify(data) });\r\n-export const updateAnnouncement = (id, data) => apiCall(`/api/admin/announcements/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n-export const deleteAnnouncement = (id) => apiCall(`/api/admin/announcements/${id}`, { method: 'DELETE' });\r\n-\r\n-// --- Funções do Dashboard de Admin ---\r\n-export const getAdminDashboardStats = () => apiCall('/api/admin/dashboard-stats');\r\n-\r\n export const getAdminSubscriptions = () => apiCall('/api/admin/subscriptions');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754163192294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+import { API_BASE_URL } from './config.js';\r\n+\r\n+/**\r\n+ * Função genérica para realizar chamadas à API, agora com tratamento para tokens expirados.\r\n+ * @param {string} endpoint - O endpoint para o qual a chamada será feita (ex: '/api/boletos').\r\n+ * @param {object} options - As opções para o 'fetch' (method, body, etc.).\r\n+ * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n+ */\r\n+async function apiCall(endpoint, options = {}) {\r\n+    const token = localStorage.getItem('authToken');\r\n+    const headers = { ...options.headers };\r\n+\r\n+    if (token) {\r\n+        headers['Authorization'] = `Bearer ${token}`;\r\n+    }\r\n+\r\n+    if (!options.isFormData) {\r\n+        headers['Content-Type'] = 'application/json';\r\n+    }\r\n+\r\n+    try {\r\n+        const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n+\r\n+        // --- NOVA LÓGICA DE TRATAMENTO DE ERRO ---\r\n+        if (response.status === 401) {\r\n+            // Se o erro for 401 (Não Autorizado), o token provavelmente expirou.\r\n+            console.warn(\"Token expirado ou inválido. A redirecionar para o login.\");\r\n+\r\n+            // Limpa os dados de sessão do navegador\r\n+            localStorage.removeItem('authToken');\r\n+            localStorage.removeItem('superAdminToken');\r\n+\r\n+            // Redireciona o utilizador para a página de login\r\n+            window.location.href = 'Index.html';\r\n+\r\n+            // Lança um erro para interromper a execução do código que chamou esta função\r\n+            throw new Error('Sessão expirada. Por favor, faça login novamente.');\r\n+        }\r\n+\r\n+        const data = await response.json();\r\n+\r\n+        if (!response.ok) {\r\n+            const error = new Error(data.message || 'Ocorreu um erro na API.');\r\n+            error.details = data.errors;\r\n+            throw error;\r\n+        }\r\n+        return data;\r\n+    } catch (error) {\r\n+        console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n+        // Re-lança o erro para que a função que chamou saiba que algo deu errado\r\n+        throw error;\r\n+    }\r\n+}\r\n+\r\n+// --- Funções de Autenticação ---\r\n+export const loginCompany = (cnpj, password) => apiCall('/api/auth/login/company', { method: 'POST', body: JSON.stringify({ cnpj, password }) });\r\n+export const loginAdmin = (username, password) => apiCall('/api/auth/login/admin', { method: 'POST', body: JSON.stringify({ username, password }) });\r\n+export const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n+export const registerUser = (username, password, email, role, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, email, role, companyId }) });\r\n+export const checkSession = () => apiCall('/api/auth/me');\r\n+export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n+export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n+export const requestPasswordReset = (email) => apiCall('/api/auth/forgot-password', { method: 'POST', body: JSON.stringify({ email }) });\r\n+export const changePassword = (passwords) => apiCall('/api/auth/change-password', { method: 'POST', body: JSON.stringify(passwords) });\r\n+export const resendVerificationEmail = () => apiCall('/api/auth/resend-verification', { method: 'POST' });\r\n+\r\n+\r\n+// --- Funções do Administrador ---\r\n+export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n+export const getEmailTemplates = () => apiCall('/api/admin/email-templates');\r\n+export const updateEmailTemplate = (templateId, data) => apiCall(`/api/admin/email-templates/${templateId}`, {\r\n+    method: 'PATCH',\r\n+    body: JSON.stringify(data)\r\n+});\r\n+export const getEmailTemplateById = (templateId) => apiCall(`/api/admin/email-templates/${templateId}`);\r\n+export const globalAdminSearch = (query) => apiCall(`/api/admin/search?q=${encodeURIComponent(query)}`);\r\n+\r\n+\r\n+\r\n+// --- Funções de Empresas ---\r\n+export const getCompanies = () => apiCall('/api/companies');\r\n+export const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\n+export const createCompany = (companyData) => apiCall('/api/companies', { method: 'POST', body: JSON.stringify(companyData) });\r\n+export const updateCompany = (companyId, updateData) => apiCall(`/api/companies/${companyId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n+export const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\n+export const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\n+export const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\n+export const removeSubscription = (companyId) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'DELETE' });\r\n+export const updateUserRole = (companyId, userId, role) => apiCall(`/api/companies/${companyId}/users/${userId}/role`, { method: 'PATCH', body: JSON.stringify({ role }) });\r\n+export const getCategories = () => apiCall('/api/categories');\r\n+export const createCategory = (name) => apiCall('/api/categories', { method: 'POST', body: JSON.stringify({ name }) });\r\n+export const updateCategory = (id, name) => apiCall(`/api/categories/${id}`, { method: 'PATCH', body: JSON.stringify({ name }) });\r\n+export const deleteCategory = (id) => apiCall(`/api/categories/${id}`, { method: 'DELETE' });\r\n+\r\n+\r\n+// --- Funções de Boletos ---\r\n+export const getBoletos = () => apiCall('/api/boletos');\r\n+export const createBoleto = (boletoData) => apiCall('/api/boletos', { method: 'POST', body: JSON.stringify(boletoData) });\r\n+export const updateParcel = (boletoId, parcelId, updateData) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n+export const deleteParcel = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'DELETE' });\r\n+export const deleteBoleto = (boletoId) => apiCall(`/api/boletos/${boletoId}`, { method: 'DELETE' });\r\n+export const uploadAttachment = (boletoId, parcelId, formData) => {\r\n+    return apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, {\r\n+        method: 'POST',\r\n+        body: formData,\r\n+        isFormData: true \r\n+    });\r\n+};\r\n+export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n+export const updateBoleto = (id, data) => apiCall(`/api/boletos/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n+export const markParcelsAsPaid = (parcelIds) => apiCall('/api/boletos/parcels/mark-as-paid', { method: 'PATCH', body: JSON.stringify({ parcelIds }) });\r\n+export const bulkUpdateCategory = (boletoIds, categoryId) => apiCall('/api/boletos/bulk-update-category', { method: 'PATCH', body: JSON.stringify({ boletoIds, categoryId }) });\r\n+export const bulkUpdateParcels = (boletoId, parcelId, updatedData, scope) => apiCall('/api/boletos/bulk-update-parcels', { \r\n+    method: 'PATCH', \r\n+    body: JSON.stringify({ boletoId, parcelId, updatedData, scope }) \r\n+});\r\n+\r\n+\r\n+// --- Funções de Permissões ---\r\n+export const getPermissions = () => apiCall('/api/permissions');\r\n+export const updatePermissions = (permissionsData) => apiCall('/api/permissions', { method: 'PATCH', body: JSON.stringify(permissionsData) });\r\n+\r\n+\r\n+// --- Funções de Pagamentos ---\r\n+export const createSubscriptionLink = () => apiCall('/api/payments/create-subscription', { method: 'POST' });\r\n+\r\n+\r\n+// --- Funções de NFe ---\r\n+export const findNfe = (chave) => apiCall(`/api/nfe/${chave}`);\r\n+\r\n+\r\n+// --- Funções de Contato ---\r\n+export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\r\n+\r\n+// --- Funções DashBoard ---\r\n+\r\n+/**\r\n+ * Constrói uma query string a partir de um objeto de parâmetros.\r\n+ * @param {object} params - O objeto com os parâmetros (ex: {startDate, endDate}).\r\n+ * @returns {string} - A query string formatada (ex: \"?startDate=2025-07-01&endDate=2025-07-31\").\r\n+ */\r\n+function buildQueryString(params) {\r\n+    // Remove quaisquer chaves que não tenham valor\r\n+    const validParams = Object.fromEntries(\r\n+      Object.entries(params).filter(([_, v]) => v != null && v !== '')\r\n+    );\r\n+    \r\n+    const query = new URLSearchParams(validParams).toString();\r\n+    return query ? `?${query}` : '';\r\n+}\r\n+\r\n+export const getExpensesByCategory = (dateRange = {}, status = 'all') => apiCall(`/api/reports/expenses-by-category${buildQueryString({ ...dateRange, status })}`);\r\n+export const getMonthlySummary = (dateRange = {}, status = 'all') => apiCall(`/api/reports/monthly-summary${buildQueryString({ ...dateRange, status })}`);\r\n+export const getKpiSummary = (dateRange = {}) => apiCall(`/api/reports/kpi-summary${buildQueryString(dateRange)}`);\r\n+export const getUpcomingPayments = () => apiCall('/api/reports/upcoming-payments');\r\n+\r\n+// --- Funções Importação ---\r\n+\r\n+export const importBoletos = (boletosData) => apiCall('/api/boletos/batch-import', { \r\n+    method: 'POST', \r\n+    body: JSON.stringify({ boletos: boletosData }) \r\n+});\r\n+\r\n+// --- Funções de Anúncios ---\r\n+export const getActiveAnnouncement = () => apiCall('/api/announcements/active');\r\n+export const getAllAnnouncements = () => apiCall('/api/admin/announcements');\r\n+export const createAnnouncement = (data) => apiCall('/api/admin/announcements', { method: 'POST', body: JSON.stringify(data) });\r\n+export const updateAnnouncement = (id, data) => apiCall(`/api/admin/announcements/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n+export const deleteAnnouncement = (id) => apiCall(`/api/admin/announcements/${id}`, { method: 'DELETE' });\r\n+\r\n+// --- Funções do Dashboard de Admin ---\r\n+export const getAdminDashboardStats = () => apiCall('/api/admin/dashboard-stats');\r\n+\r\n+export const getAdminSubscriptions = () => apiCall('/api/admin/subscriptions');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754164403727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,181 +73,12 @@\n     body: JSON.stringify(data)\r\n });\r\n export const getEmailTemplateById = (templateId) => apiCall(`/api/admin/email-templates/${templateId}`);\r\n export const globalAdminSearch = (query) => apiCall(`/api/admin/search?q=${encodeURIComponent(query)}`);\r\n-\r\n-\r\n-\r\n-// --- Funções de Empresas ---\r\n-export const getCompanies = () => apiCall('/api/companies');\r\n-export const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\n-export const createCompany = (companyData) => apiCall('/api/companies', { method: 'POST', body: JSON.stringify(companyData) });\r\n-export const updateCompany = (companyId, updateData) => apiCall(`/api/companies/${companyId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n-export const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\n-export const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\n-export const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\n-export const removeSubscription = (companyId) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'DELETE' });\r\n-export const updateUserRole = (companyId, userId, role) => apiCall(`/api/companies/${companyId}/users/${userId}/role`, { method: 'PATCH', body: JSON.stringify({ role }) });\r\n-export const getCategories = () => apiCall('/api/categories');\r\n-export const createCategory = (name) => apiCall('/api/categories', { method: 'POST', body: JSON.stringify({ name }) });\r\n-export const updateCategory = (id, name) => apiCall(`/api/categories/${id}`, { method: 'PATCH', body: JSON.stringify({ name }) });\r\n-export const deleteCategory = (id) => apiCall(`/api/categories/${id}`, { method: 'DELETE' });\r\n-\r\n-\r\n-// --- Funções de Boletos ---\r\n-export const getBoletos = () => apiCall('/api/boletos');\r\n-export const createBoleto = (boletoData) => apiCall('/api/boletos', { method: 'POST', body: JSON.stringify(boletoData) });\r\n-export const updateParcel = (boletoId, parcelId, updateData) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\n-export const deleteParcel = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'DELETE' });\r\n-export const deleteBoleto = (boletoId) => apiCall(`/api/boletos/${boletoId}`, { method: 'DELETE' });\r\n-export const uploadAttachment = (boletoId, parcelId, formData) => {\r\n-    return apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, {\r\n-        method: 'POST',\r\n-        body: formData,\r\n-        isFormData: true \r\n-    });\r\n-};\r\n-export const deleteAttachment = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}/attach`, { method: 'DELETE' });\r\n-export const updateBoleto = (id, data) => apiCall(`/api/boletos/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n-export const markParcelsAsPaid = (parcelIds) => apiCall('/api/boletos/parcels/mark-as-paid', { method: 'PATCH', body: JSON.stringify({ parcelIds }) });\r\n-export const bulkUpdateCategory = (boletoIds, categoryId) => apiCall('/api/boletos/bulk-update-category', { method: 'PATCH', body: JSON.stringify({ boletoIds, categoryId }) });\r\n-export const bulkUpdateParcels = (boletoId, parcelId, updatedData, scope) => apiCall('/api/boletos/bulk-update-parcels', { \r\n-    method: 'PATCH', \r\n-    body: JSON.stringify({ boletoId, parcelId, updatedData, scope }) \r\n-});\r\n-\r\n-\r\n-// --- Funções de Permissões ---\r\n-export const getPermissions = () => apiCall('/api/permissions');\r\n-export const updatePermissions = (permissionsData) => apiCall('/api/permissions', { method: 'PATCH', body: JSON.stringify(permissionsData) });\r\n-\r\n-\r\n-// --- Funções de Pagamentos ---\r\n-export const createSubscriptionLink = () => apiCall('/api/payments/create-subscription', { method: 'POST' });\r\n-\r\n-\r\n-// --- Funções de NFe ---\r\n-export const findNfe = (chave) => apiCall(`/api/nfe/${chave}`);\r\n-\r\n-\r\n-// --- Funções de Contato ---\r\n-export const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });\r\n-\r\n-// --- Funções DashBoard ---\r\n-\r\n-/**\r\n- * Constrói uma query string a partir de um objeto de parâmetros.\r\n- * @param {object} params - O objeto com os parâmetros (ex: {startDate, endDate}).\r\n- * @returns {string} - A query string formatada (ex: \"?startDate=2025-07-01&endDate=2025-07-31\").\r\n- */\r\n-function buildQueryString(params) {\r\n-    // Remove quaisquer chaves que não tenham valor\r\n-    const validParams = Object.fromEntries(\r\n-      Object.entries(params).filter(([_, v]) => v != null && v !== '')\r\n-    );\r\n-    \r\n-    const query = new URLSearchParams(validParams).toString();\r\n-    return query ? `?${query}` : '';\r\n-}\r\n-\r\n-export const getExpensesByCategory = (dateRange = {}, status = 'all') => apiCall(`/api/reports/expenses-by-category${buildQueryString({ ...dateRange, status })}`);\r\n-export const getMonthlySummary = (dateRange = {}, status = 'all') => apiCall(`/api/reports/monthly-summary${buildQueryString({ ...dateRange, status })}`);\r\n-export const getKpiSummary = (dateRange = {}) => apiCall(`/api/reports/kpi-summary${buildQueryString(dateRange)}`);\r\n-export const getUpcomingPayments = () => apiCall('/api/reports/upcoming-payments');\r\n-\r\n-// --- Funções Importação ---\r\n-\r\n-export const importBoletos = (boletosData) => apiCall('/api/boletos/batch-import', { \r\n-    method: 'POST', \r\n-    body: JSON.stringify({ boletos: boletosData }) \r\n-});\r\n-\r\n-// --- Funções de Anúncios ---\r\n-export const getActiveAnnouncement = () => apiCall('/api/announcements/active');\r\n-export const getAllAnnouncements = () => apiCall('/api/admin/announcements');\r\n-export const createAnnouncement = (data) => apiCall('/api/admin/announcements', { method: 'POST', body: JSON.stringify(data) });\r\n-export const updateAnnouncement = (id, data) => apiCall(`/api/admin/announcements/${id}`, { method: 'PATCH', body: JSON.stringify(data) });\r\n-export const deleteAnnouncement = (id) => apiCall(`/api/admin/announcements/${id}`, { method: 'DELETE' });\r\n-\r\n-// --- Funções do Dashboard de Admin ---\r\n-export const getAdminDashboardStats = () => apiCall('/api/admin/dashboard-stats');\r\n-\r\n-export const getAdminSubscriptions = () => apiCall('/api/admin/subscriptions');\n-import { API_BASE_URL } from './config.js';\r\n-\r\n-/**\r\n- * Função genérica para realizar chamadas à API, agora com tratamento para tokens expirados.\r\n- * @param {string} endpoint - O endpoint para o qual a chamada será feita (ex: '/api/boletos').\r\n- * @param {object} options - As opções para o 'fetch' (method, body, etc.).\r\n- * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n- */\r\n-async function apiCall(endpoint, options = {}) {\r\n-    const token = localStorage.getItem('authToken');\r\n-    const headers = { ...options.headers };\r\n-\r\n-    if (token) {\r\n-        headers['Authorization'] = `Bearer ${token}`;\r\n-    }\r\n-\r\n-    if (!options.isFormData) {\r\n-        headers['Content-Type'] = 'application/json';\r\n-    }\r\n-\r\n-    try {\r\n-        const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n-\r\n-        // --- NOVA LÓGICA DE TRATAMENTO DE ERRO ---\r\n-        if (response.status === 401) {\r\n-            // Se o erro for 401 (Não Autorizado), o token provavelmente expirou.\r\n-            console.warn(\"Token expirado ou inválido. A redirecionar para o login.\");\r\n-\r\n-            // Limpa os dados de sessão do navegador\r\n-            localStorage.removeItem('authToken');\r\n-            localStorage.removeItem('superAdminToken');\r\n-\r\n-            // Redireciona o utilizador para a página de login\r\n-            window.location.href = 'Index.html';\r\n-\r\n-            // Lança um erro para interromper a execução do código que chamou esta função\r\n-            throw new Error('Sessão expirada. Por favor, faça login novamente.');\r\n-        }\r\n-\r\n-        const data = await response.json();\r\n-\r\n-        if (!response.ok) {\r\n-            const error = new Error(data.message || 'Ocorreu um erro na API.');\r\n-            error.details = data.errors;\r\n-            throw error;\r\n-        }\r\n-        return data;\r\n-    } catch (error) {\r\n-        console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n-        // Re-lança o erro para que a função que chamou saiba que algo deu errado\r\n-        throw error;\r\n-    }\r\n-}\r\n-\r\n-// --- Funções de Autenticação ---\r\n-export const loginCompany = (cnpj, password) => apiCall('/api/auth/login/company', { method: 'POST', body: JSON.stringify({ cnpj, password }) });\r\n-export const loginAdmin = (username, password) => apiCall('/api/auth/login/admin', { method: 'POST', body: JSON.stringify({ username, password }) });\r\n-export const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\n-export const registerUser = (username, password, email, role, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, email, role, companyId }) });\r\n-export const checkSession = () => apiCall('/api/auth/me');\r\n-export const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n-export const findCompanyByCnpj = (cnpj) => apiCall('/api/auth/find-company-by-cnpj', { method: 'POST', body: JSON.stringify({ cnpj }) });\r\n-export const requestPasswordReset = (email) => apiCall('/api/auth/forgot-password', { method: 'POST', body: JSON.stringify({ email }) });\r\n-export const changePassword = (passwords) => apiCall('/api/auth/change-password', { method: 'POST', body: JSON.stringify(passwords) });\r\n-export const resendVerificationEmail = () => apiCall('/api/auth/resend-verification', { method: 'POST' });\r\n-\r\n-\r\n-// --- Funções do Administrador ---\r\n-export const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n-export const getEmailTemplates = () => apiCall('/api/admin/email-templates');\r\n-export const updateEmailTemplate = (templateId, data) => apiCall(`/api/admin/email-templates/${templateId}`, {\r\n-    method: 'PATCH',\r\n+export const sendBulkEmail = (data) => apiCall('/api/admin/bulk-email', {\r\n+    method: 'POST',\r\n     body: JSON.stringify(data)\r\n });\r\n-export const getEmailTemplateById = (templateId) => apiCall(`/api/admin/email-templates/${templateId}`);\r\n \r\n \r\n \r\n // --- Funções de Empresas ---\r\n"
                },
                {
                    "date": 1754323346875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,12 @@\n export const sendBulkEmail = (data) => apiCall('/api/admin/bulk-email', {\r\n     method: 'POST',\r\n     body: JSON.stringify(data)\r\n });\r\n+export const sendTestEmail = (data) => apiCall('/api/admin/email-templates/test-send', {\r\n+    method: 'POST',\r\n+    body: JSON.stringify(data)\r\n+});\r\n \r\n \r\n \r\n // --- Funções de Empresas ---\r\n"
                }
            ],
            "date": 1752672272290,
            "name": "Commit-0",
            "content": "import { API_BASE_URL } from './config.js';\r\n\r\n/**\r\n * Função genérica para realizar chamadas à API.\r\n * @param {string} endpoint - O endpoint para o qual a chamada será feita (ex: '/api/boletos').\r\n * @param {object} options - As opções para o 'fetch' (method, body, etc.).\r\n * @returns {Promise<any>} Os dados da resposta em formato JSON.\r\n */\r\nasync function apiCall(endpoint, options = {}) {\r\n    const token = localStorage.getItem('authToken');\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n    };\r\n\r\n    if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n            // Lança um erro com a mensagem vinda do backend para ser capturado no 'catch'.\r\n            throw new Error(data.message || 'Ocorreu um erro desconhecido na API.');\r\n        }\r\n\r\n        return data; // Retorna os dados em caso de sucesso.\r\n    } catch (error) {\r\n        console.error(`Erro na chamada à API para ${endpoint}:`, error);\r\n        // Propaga o erro para que a função que chamou possa tratá-lo (ex: com um showToast).\r\n        throw error;\r\n    }\r\n}\r\n\r\n// --- Funções de Autenticação ---\r\nexport const loginCompany = (cnpj, password) => apiCall('/api/auth/login/company', { method: 'POST', body: JSON.stringify({ cnpj, password }) });\r\nexport const loginAdmin = (username, password) => apiCall('/api/auth/login/admin', { method: 'POST', body: JSON.stringify({ username, password }) });\r\nexport const loginUser = (username, password, companyId) => apiCall('/api/auth/login/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\nexport const registerUser = (username, password, companyId) => apiCall('/api/auth/register/user', { method: 'POST', body: JSON.stringify({ username, password, companyId }) });\r\nexport const checkSession = () => apiCall('/api/auth/me');\r\nexport const loginDirect = (cnpj, username, password) => apiCall('/api/auth/login/direct', { method: 'POST', body: JSON.stringify({ cnpj, username, password }) });\r\n\r\n\r\n// --- Funções do Administrador ---\r\nexport const impersonateUser = (companyId, userId) => apiCall('/api/admin/impersonate', { method: 'POST', body: JSON.stringify({ companyId, userId }) });\r\n\r\n\r\n// --- Funções de Empresas ---\r\nexport const getCompanies = () => apiCall('/api/companies');\r\nexport const getCompanyDetails = (companyId) => apiCall(`/api/companies/${companyId}`);\r\nexport const createCompany = (companyData) => apiCall('/api/companies/register', { method: 'POST', body: JSON.stringify(companyData) });\r\nexport const updateCompany = (companyId, updateData) => apiCall(`/api/companies/${companyId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\nexport const deleteCompany = (companyId) => apiCall(`/api/companies/${companyId}`, { method: 'DELETE' });\r\nexport const deleteUserFromCompany = (companyId, userId) => apiCall(`/api/companies/${companyId}/users/${userId}`, { method: 'DELETE' });\r\nexport const addSubscription = (companyId, daysToAdd) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'PATCH', body: JSON.stringify({ daysToAdd }) });\r\nexport const removeSubscription = (companyId) => apiCall(`/api/companies/${companyId}/subscription`, { method: 'DELETE' });\r\n\r\n\r\n// --- Funções de Boletos ---\r\nexport const getBoletos = () => apiCall('/api/boletos');\r\nexport const createBoleto = (boletoData) => apiCall('/api/boletos', { method: 'POST', body: JSON.stringify(boletoData) });\r\nexport const updateParcel = (boletoId, parcelId, updateData) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'PATCH', body: JSON.stringify(updateData) });\r\nexport const deleteParcel = (boletoId, parcelId) => apiCall(`/api/boletos/${boletoId}/parcels/${parcelId}`, { method: 'DELETE' });\r\nexport const deleteBoleto = (boletoId) => apiCall(`/api/boletos/${boletoId}`, { method: 'DELETE' });\r\n\r\n\r\n// --- Funções de Permissões ---\r\nexport const getPermissions = () => apiCall('/api/permissions');\r\nexport const updatePermissions = (permissionsData) => apiCall('/api/permissions', { method: 'PATCH', body: JSON.stringify(permissionsData) });\r\n\r\n\r\n// --- Funções de Pagamentos ---\r\nexport const createSubscriptionLink = () => apiCall('/api/payments/create-subscription', { method: 'POST' });\r\n\r\n\r\n// --- Funções de Contato ---\r\nexport const sendContactForm = (formData) => apiCall('/api/contact/send', { method: 'POST', body: JSON.stringify(formData) });"
        }
    ]
}